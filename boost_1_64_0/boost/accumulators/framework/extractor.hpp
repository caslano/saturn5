///////////////////////////////////////////////////////////////////////////////
// extractor.hpp
//
//  Copyright 2005 Eric Niebler. Distributed under the Boost
//  Software License, Version 1.0. (See accompanying file
//  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_ACCUMULATORS_FRAMEWORK_EXTRACTOR_HPP_EAN_28_10_2005
#define BOOST_ACCUMULATORS_FRAMEWORK_EXTRACTOR_HPP_EAN_28_10_2005

#include <boost/preprocessor/cat.hpp>
#include <boost/preprocessor/tuple/rem.hpp>
#include <boost/preprocessor/array/size.hpp>
#include <boost/preprocessor/array/data.hpp>
#include <boost/preprocessor/array/elem.hpp>
#include <boost/preprocessor/seq/to_array.hpp>
#include <boost/preprocessor/seq/transform.hpp>
#include <boost/preprocessor/repetition/enum_params.hpp>
#include <boost/preprocessor/repetition/enum_trailing.hpp>
#include <boost/preprocessor/repetition/enum_trailing_params.hpp>
#include <boost/preprocessor/repetition/enum_trailing_binary_params.hpp>
#include <boost/preprocessor/repetition/repeat.hpp>
#include <boost/preprocessor/repetition/repeat_from_to.hpp>
#include <boost/parameter/binding.hpp>
#include <boost/mpl/bool.hpp>
#include <boost/mpl/if.hpp>
#include <boost/mpl/eval_if.hpp>
#include <boost/mpl/apply.hpp>
#include <boost/type_traits/remove_const.hpp>
#include <boost/type_traits/remove_reference.hpp>
#include <boost/accumulators/accumulators_fwd.hpp>
#include <boost/accumulators/framework/parameters/accumulator.hpp>

namespace boost { namespace accumulators
{

namespace detail
{
    template<typename AccumulatorSet, typename Feature>
    struct accumulator_set_result
    {
        typedef typename as_feature<Feature>::type feature_type;
        typedef typename mpl::apply<
            typename boost::remove_const<
                typename boost::remove_reference<AccumulatorSet>::type
            >::type
          , feature_type
        >::type::result_type type;
    };

    template<typename Args, typename Feature>
    struct argument_pack_result
      : accumulator_set_result<
            typename boost::remove_reference<
                typename parameter::binding<
                    typename boost::remove_const<
                        typename boost::remove_reference<Args>::type
                    >::type
                  , tag::accumulator
                >::type
            >::type
          , Feature
        >
    {
    };

    template<typename A, typename Feature>
    struct extractor_result
      : mpl::eval_if<
            detail::is_accumulator_set<A>
          , accumulator_set_result<A, Feature>
          , argument_pack_result<A, Feature>
        >
    {
    };

    template<typename Feature, typename AccumulatorSet>
    typename extractor_result<AccumulatorSet, Feature>::type
    do_extract(AccumulatorSet const &acc, mpl::true_)
    {
        typedef typename as_feature<Feature>::type feature_type;
        return extract_result<feature_type>(acc);
    }

    template<typename Feature, typename Args>
    typename extractor_result<Args, Feature>::type
    do_extract(Args const &args, mpl::false_)
    {
        typedef typename as_feature<Feature>::type feature_type;
        return find_accumulator<feature_type>(args[accumulator]).result(args);
    }

} // namespace detail


///////////////////////////////////////////////////////////////////////////////
/// Extracts the result associated with Feature from the specified accumulator_set.
template<typename Feature>
struct extractor
{
    typedef extractor<Feature> this_type;

    /// The result meta-function for determining the return type of the extractor
    template<typename F>
    struct result;

    template<typename A1>
    struct result<this_type(A1)>
      : detail::extractor_result<A1, Feature>
    {
    };

    /// Extract the result associated with Feature from the accumulator set
    /// \param acc The accumulator set object from which to extract the result
    template<typename Arg1>
    typename detail::extractor_result<Arg1, Feature>::type
    operator ()(Arg1 const &arg1) const
    {
        // Arg1 could be an accumulator_set or an argument pack containing
        // an accumulator_set. Dispatch accordingly.
        return detail::do_extract<Feature>(arg1, detail::is_accumulator_set<Arg1>());
    }

    /// \overload
    ///
    /// \param a1 Optional named parameter to be passed to the accumulator's result() function.
    template<typename AccumulatorSet, typename A1>
    typename detail::extractor_result<AccumulatorSet, Feature>::type
    operator ()(AccumulatorSet const &acc, A1 const &a1) const
    {
        BOOST_MPL_ASSERT((detail::is_accumulator_set<AccumulatorSet>));
        typedef typename as_feature<Feature>::type feature_type;
        return extract_result<feature_type>(acc, a1);
    }

    // ... other overloads generated by Boost.Preprocessor:

    /// INTERNAL ONLY
    ///
#define BOOST_ACCUMULATORS_EXTRACTOR_FUN_OP(z, n, _)                                    \
    template<BOOST_PP_ENUM_PARAMS_Z(z, n, typename A)>                                  \
    struct result<this_type(BOOST_PP_ENUM_PARAMS_Z(z, n, A))>                           \
      : detail::extractor_result<A1, Feature>                                           \
    {};                                                                                 \
    template<                                                                           \
        typename AccumulatorSet                                                         \
        BOOST_PP_ENUM_TRAILING_PARAMS_Z(z, n, typename A)                               \
    >                                                                                   \
    typename detail::extractor_result<AccumulatorSet, Feature>::type                    \
    operator ()(                                                                        \
        AccumulatorSet const &acc                                                       \
        BOOST_PP_ENUM_TRAILING_BINARY_PARAMS_Z(z, n, A, const &a)                       \
    ) const                                                                             \
    {                                                                                   \
        BOOST_MPL_ASSERT((detail::is_accumulator_set<AccumulatorSet>));                 \
        typedef typename as_feature<Feature>::type feature_type;                        \
        return extract_result<feature_type>(acc BOOST_PP_ENUM_TRAILING_PARAMS_Z(z, n, a));\
    }

    BOOST_PP_REPEAT_FROM_TO(
        2
      , BOOST_PP_INC(BOOST_ACCUMULATORS_MAX_ARGS)
      , BOOST_ACCUMULATORS_EXTRACTOR_FUN_OP
      , _
    )

#undef BOOST_ACCUMULATORS_EXTRACTOR_FUN_OP

    #ifdef BOOST_ACCUMULATORS_DOXYGEN_INVOKED
    /// \overload
    ///
    template<typename AccumulatorSet, typename A1, typename A2, ...>
    typename detail::extractor_result<AccumulatorSet, Feature>::type
    operator ()(AccumulatorSet const &acc, A1 const &a1, A2 const &a2, ...);
    #endif
};

}} // namespace boost::accumulators

/// INTERNAL ONLY
///
#define BOOST_ACCUMULATORS_ARRAY_REM(Array)                                                         \
    BOOST_PP_TUPLE_REM_CTOR(BOOST_PP_ARRAY_SIZE(Array), BOOST_PP_ARRAY_DATA(Array))

/// INTERNAL ONLY
///
#define BOOST_ACCUMULATORS_SEQ_REM(Seq)                                                             \
    BOOST_ACCUMULATORS_ARRAY_REM(BOOST_PP_SEQ_TO_ARRAY(Seq))

/// INTERNAL ONLY
///
#define BOOST_ACCUMULATORS_ARGS_OP(s, data, elem)                                                   \
    T ## s

/// INTERNAL ONLY
///
#define BOOST_ACCUMULATORS_PARAMS_OP(s, data, elem)                                                 \
    elem T ## s

/// INTERNAL ONLY
///
#define BOOST_ACCUMULATORS_MAKE_FEATURE(Tag, Feature, ParamsSeq)                                    \
    Tag::Feature<                                                                                   \
        BOOST_ACCUMULATORS_SEQ_REM(                                                                 \
            BOOST_PP_SEQ_TRANSFORM(BOOST_ACCUMULATORS_ARGS_OP, ~, ParamsSeq)                        \
        )                                                                                           \
    >

/// INTERNAL ONLY
///
#define BOOST_ACCUMULATORS_DEFINE_EXTRACTOR_FUN_IMPL(z, n, Tag, Feature, ParamsSeq)                 \
    template<                                                                                       \
        BOOST_ACCUMULATORS_SEQ_REM(                                                                 \
            BOOST_PP_SEQ_TRANSFORM(BOOST_ACCUMULATORS_PARAMS_OP, ~, ParamsSeq)                      \
        )                                                                                           \
      , typename Arg1                                                                               \
        BOOST_PP_ENUM_TRAILING_PARAMS_Z(z, n, typename A)                                           \
    >                                                                                               \
    typename boost::accumulators::detail::extractor_result<                                         \
        Arg1                                                                                        \
      , BOOST_ACCUMULATORS_MAKE_FEATURE(Tag, Feature, ParamsSeq)                                    \
    >::type                                                                                         \
    Feature(Arg1 const &arg1 BOOST_PP_ENUM_TRAILING_BINARY_PARAMS_Z(z, n, A, const &a) )            \
    {                                                                                               \
        typedef BOOST_ACCUMULATORS_MAKE_FEATURE(Tag, Feature, ParamsSeq) feature_type;              \
        return boost::accumulators::extractor<feature_type>()(                                      \
            arg1 BOOST_PP_ENUM_TRAILING_PARAMS_Z(z, n, a));                                         \
    }

/// INTERNAL ONLY
///
#define BOOST_ACCUMULATORS_DEFINE_EXTRACTOR_FUN(z, n, _)                                            \
    BOOST_ACCUMULATORS_DEFINE_EXTRACTOR_FUN_IMPL(                                                   \
        z                                                                                           \
      , n                                                                                           \
      , BOOST_PP_ARRAY_ELEM(0, _)                                                                   \
      , BOOST_PP_ARRAY_ELEM(1, _)                                                                   \
      , BOOST_PP_ARRAY_ELEM(2, _)                                                                   \
    )

#define BOOST_ACCUMULATORS_DEFINE_EXTRACTOR(Tag, Feature, ParamSeq)                                 \
    BOOST_PP_REPEAT(                                                                                \
        BOOST_PP_INC(BOOST_ACCUMULATORS_MAX_ARGS)                                                   \
      , BOOST_ACCUMULATORS_DEFINE_EXTRACTOR_FUN                                                     \
      , (3, (Tag, Feature, ParamSeq))                                                               \
    )

#endif

/* extractor.hpp
WC08RXBg7WtsqGkaEIOmySW1683HFsvos4fng9Yonm/OvSB15P7O8roC5oewvkS6xsVeVjjwlqgc4a2wjypY5vazrIFIrdkLm8OnHPxSNgW6n6eTq20s2afYPYV69Rzp1etcgiU79NvSdZd+XeaA1w25AJfJ13NRq0ZTUuX/m+4v8HhPvr/pZ/un69SIL0UX4mfEeX/Wxm3yDA/wuRj+jXxZ8RuqxpUR5/OqxtuoOrmiMULNn0cUwmx/RmO08WoZlNuGmkVwgZpdPoJ7lt2Mb1hNcwWPVKrG9VKd2M3VLtyrBubtM1JAZitTQWZJ7cF3ba68lpfTU0SDV0YZbGSOrqRmjEgzpvekZvyxOeVbiYnp3SNoYvqAsvIrk9M3yxlU8cyFyfOTmt2/gpVYyf/VqfLuxBtS9we3dfLPWJDqX93Jfy9GWCq+vpfx9Rlm3yMw+95uYfZ5PrLwT6u7eQ/g6KpO7wGo0xWaodk0lI1MttnXhSNjqVMw8T5eTBE1OtNFwRnt9eFEyFMRUojXJ0J6VEivuXSh3VGPlBP7gpT8R0uw81TcpADRud7DcJTZ1f5rTtJ5bhd82wa0EYkXmK9AvDCBb/uAeJyS5OFlzm9dcPghbdX+b07CEuHryFBPPIkwEJkmv4aQ39gd/sGc1P41O7w33v39cW2sdQl6x2wFG6gZJvee97qiVX2cglb1OgOl2nhS85xJeFLznYwntdQpeFLlUPSX2KBSxZBRLHUeW9s1XmOBS83Y7WZwKUw4+8sFS+gOhEpASiFMAIlSgGu+wdPKDSmoUkOV59fFc5Jc/MjJBVmFI99C8S2Frwe+vVJ9c8Q3D75s45Se4rt3QgIMMLiNFLMRdbk6MROp+9UTP3f7f94/S59z4qwU/JjjL/8s/Jiqsi+DHxN1puLHtGUku7G5Gq54umWmpZMgbJWPrldW1LvwodWeJFvzVT3kqO6Kmw7BOEPZJx8BI6kk82RXKJrCzwMO8NNZP+IUXrCmvY1cz0OuMX27GSyxheXjsQSdDDLbHsm9iJjei216XuAVt/GQ9CFd7T+v5Yz5gOR9VAUV4Axi/TSqlDfmqUp5GR/q6LxQh51CtyfkhXWf2+Yz8X6d4mffNRb6o4aCQ2mLLXY5tshhWr9FabH1bLtWsnWQK6LelCkNRxTBNG42FjDNV/jwL4xwDlg7mR6rTD3xYTf0Bqc09Nwl6kmXLzbDd7ZfTVz9OV4KxtfbsYWlq5+klaf+DcteNORL4CIILozdMR1QvG3mBcX2AvU1tP4pzqTWv/iq2OjegLEsNbdeSkOJbkIBiq+n0dj2JPwNuXODWCVxd1pAAZaS+mCu+fcbWHAmXQOcqCwvgrBqynyUvKq2lrxGh+4gQO6lk6zMP/M59YCwwmPUcO+LtschOqCEZIbllvcJmE/TUYtVz2mPr+QDuG9LXc6l89KTqO5XXKfq3sCHXfcXpkvd77/ROuyclLjlRULTv+Lk4bPWt+oZqhM+q0N+R/XwKvUG2OtmvnkA/o2d7P9n2PhUn6rIs+Z/Bh5SDzv88DSPhNc+K/zz063wEz9R6ff7rPD3T+/Cz47vfkb4ait8j+FW+JWfFT5oh59vVdaUzwqfY4e/c78KX/RZ4d+c1oUfF8IfwnkeD71fSnTYh0F2CAu+xz2VNprHdfxShbnqsgTiR1i9S0dWloZsfM3rMTgskNmA8QybFpAogNGcryUBn+zm/dwGBgC5ieeaFgCAzOevTeb3RtLG4LD1cYX/MVXhfxwbIPyPCQn8j6yA4H9MZvyPa4Lsap58yPgfneQxS68wVjIkgK1yY1eoqo30e1UvARykgsBBhumq/gLq6JImbsHylYNmpThQN/4=
*/