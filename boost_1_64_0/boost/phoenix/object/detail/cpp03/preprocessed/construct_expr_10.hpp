/*==============================================================================
    Copyright (c) 2016 Kohei Takahashi

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
==============================================================================*/
namespace boost { namespace phoenix { namespace tag { struct construct {}; template <typename Ostream> inline Ostream &operator<<( Ostream & os , construct) { os << "construct"; return os; } } namespace expression { template < typename A0 = void , typename A1 = void , typename A2 = void , typename A3 = void , typename A4 = void , typename A5 = void , typename A6 = void , typename A7 = void , typename A8 = void , typename A9 = void , typename A10 = void , typename Dummy = void > struct construct; template < typename A0 , typename A1 > struct construct< A0 , A1 > : boost::phoenix::expr< tag:: construct , A0 , A1 > {}; template < typename A0 , typename A1 , typename A2 > struct construct< A0 , A1 , A2 > : boost::phoenix::expr< tag:: construct , A0 , A1 , A2 > {}; template < typename A0 , typename A1 , typename A2 , typename A3 > struct construct< A0 , A1 , A2 , A3 > : boost::phoenix::expr< tag:: construct , A0 , A1 , A2 , A3 > {}; template < typename A0 , typename A1 , typename A2 , typename A3 , typename A4 > struct construct< A0 , A1 , A2 , A3 , A4 > : boost::phoenix::expr< tag:: construct , A0 , A1 , A2 , A3 , A4 > {}; template < typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 > struct construct< A0 , A1 , A2 , A3 , A4 , A5 > : boost::phoenix::expr< tag:: construct , A0 , A1 , A2 , A3 , A4 , A5 > {}; template < typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 > struct construct< A0 , A1 , A2 , A3 , A4 , A5 , A6 > : boost::phoenix::expr< tag:: construct , A0 , A1 , A2 , A3 , A4 , A5 , A6 > {}; template < typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 > struct construct< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 > : boost::phoenix::expr< tag:: construct , A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 > {}; template < typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 > struct construct< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 > : boost::phoenix::expr< tag:: construct , A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 > {}; template < typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 > struct construct< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 > : boost::phoenix::expr< tag:: construct , A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 > {}; template < typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10 > struct construct< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 > : boost::phoenix::expr< tag:: construct , A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 > {}; } namespace rule { struct construct : expression:: construct < proto::terminal<detail::target<proto::_> > , boost::proto::vararg< meta_grammar > > {}; } namespace functional { typedef boost::proto::functional::make_expr< tag:: construct > make_construct; } namespace result_of { template <typename A0 = void , typename A1 = void , typename A2 = void , typename A3 = void , typename A4 = void , typename A5 = void , typename A6 = void , typename A7 = void , typename A8 = void , typename A9 = void, typename Dummy = void> struct make_construct; template <typename A0> struct make_construct <A0> : boost::result_of< functional:: make_construct( A0 ) > {}; template <typename A0 , typename A1> struct make_construct <A0 , A1> : boost::result_of< functional:: make_construct( A0 , A1 ) > {}; template <typename A0 , typename A1 , typename A2> struct make_construct <A0 , A1 , A2> : boost::result_of< functional:: make_construct( A0 , A1 , A2 ) > {}; template <typename A0 , typename A1 , typename A2 , typename A3> struct make_construct <A0 , A1 , A2 , A3> : boost::result_of< functional:: make_construct( A0 , A1 , A2 , A3 ) > {}; template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4> struct make_construct <A0 , A1 , A2 , A3 , A4> : boost::result_of< functional:: make_construct( A0 , A1 , A2 , A3 , A4 ) > {}; template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5> struct make_construct <A0 , A1 , A2 , A3 , A4 , A5> : boost::result_of< functional:: make_construct( A0 , A1 , A2 , A3 , A4 , A5 ) > {}; template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6> struct make_construct <A0 , A1 , A2 , A3 , A4 , A5 , A6> : boost::result_of< functional:: make_construct( A0 , A1 , A2 , A3 , A4 , A5 , A6 ) > {}; template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7> struct make_construct <A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7> : boost::result_of< functional:: make_construct( A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 ) > {}; template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8> struct make_construct <A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8> : boost::result_of< functional:: make_construct( A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 ) > {}; } template <typename A0> inline typename result_of:: make_construct< A0 >::type make_construct(A0 const& a0) { return functional::make_construct()(a0); } template <typename A0 , typename A1> inline typename result_of:: make_construct< A0 , A1 >::type make_construct(A0 const& a0 , A1 const& a1) { return functional::make_construct()(a0 , a1); } template <typename A0 , typename A1 , typename A2> inline typename result_of:: make_construct< A0 , A1 , A2 >::type make_construct(A0 const& a0 , A1 const& a1 , A2 const& a2) { return functional::make_construct()(a0 , a1 , a2); } template <typename A0 , typename A1 , typename A2 , typename A3> inline typename result_of:: make_construct< A0 , A1 , A2 , A3 >::type make_construct(A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3) { return functional::make_construct()(a0 , a1 , a2 , a3); } template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4> inline typename result_of:: make_construct< A0 , A1 , A2 , A3 , A4 >::type make_construct(A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4) { return functional::make_construct()(a0 , a1 , a2 , a3 , a4); } template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5> inline typename result_of:: make_construct< A0 , A1 , A2 , A3 , A4 , A5 >::type make_construct(A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5) { return functional::make_construct()(a0 , a1 , a2 , a3 , a4 , a5); } template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6> inline typename result_of:: make_construct< A0 , A1 , A2 , A3 , A4 , A5 , A6 >::type make_construct(A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6) { return functional::make_construct()(a0 , a1 , a2 , a3 , a4 , a5 , a6); } template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7> inline typename result_of:: make_construct< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 >::type make_construct(A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 , A7 const& a7) { return functional::make_construct()(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7); } template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8> inline typename result_of:: make_construct< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 >::type make_construct(A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 , A7 const& a7 , A8 const& a8) { return functional::make_construct()(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8); } } } namespace boost { namespace phoenix { template <typename Dummy> struct meta_grammar::case_< :: boost :: phoenix :: tag:: construct , Dummy > : enable_rule< :: boost :: phoenix :: rule:: construct , Dummy > {}; } }

/* construct_expr_10.hpp
yz5NPTfDem9aXfdFCIEZu3Ft2OOqlq9nadDY5DWe6FmkFC3++tAauoWvL9vu5vnSYaadJtjAajY34YSfDAxEcJ5+Dal/oh8gmMr2xD3K9sEk0Gaw8gnllNjSHWDzmkBo9RfRfnpHqkABJKIFt51ego7UssGYHSZ3nGcYy05gMYEw7VDEwkQpLE96CYurSBa2+gZpbHGEsewCFhMI0wY4r+Ih7xSWRYzFVfQIHxxMifIZy+70Eu3G+RYn7BSWk7wZJcrHMcQg5U3tkdEZ2OfTqfd4F9w4HH9j23YXwdgsqbe3Ai6FdRdPDq4SjkNynC/S0xdGz+SEhUCcBloYe+5PRVWtnKAVcCnEMUI8JJ2+wrzyVtiuNyhICnyg8bHpoE2JUlf9YktzYmxpEyz8u+q3qWRaQTRP5ZMY7qpZfjahKbZ0Peu4tcyFuRjq5uFVh3up826VXYETrCnGfe8YvpXYnnbTkG/eC/qYNkO3teUmSZVbU43rh/HdpJqtHhPohwj06NyYg6dVti3CfmhbzrJC+5FuR+iOhWJREyskBOG3xWEvmGn0cqHsDd0mul0SxZZuZesEGz0yTMNPBlc9G8VTfHD5aMaDXUE4B8b2FkZHSHzsvZLoUA0wLpqXmmOfSnyFj4zjjTB7Z7o8zW64d8G9E+4dcG/CW1B/pc3huMTUD525hKISqcGefo9Ubzf+by/P//Ufo6/0cpF679CYNpc7G8Pkymd2IN4ZKKlqW5anPRCp1PypjsTz9ga/9HRi9jUEbqENADiql7sfX8Md3EZ/6nb3L8r+I2BEkPwej9pE6ydvTuZdKSg4kk0f4MxOc0SkFmunUDGVAuKRWmF1Eee+kVe1JB11kiz1xvvIJScJ+yY2udazbJTWlqIbqOpAtcf951zypoyJp+wXNa1sZqXqMi7Kh7936nG/VzYydZ/bmEMOsa35B6/cmX/d6ezshX1xwlfK598RXe3nJo29I32yyTj7bcderIHfAcwXjasnWLQ/pBQLfkIX3VuZxqb6/tvIUb69fshGOLB+37mJY3Yyq2Vu54tYRu2TtYzwgrJdkQqnY0FGz5iQk+oZ35eesWiB7hnTiBq0VoN6+RJrfKXYANoOdxPPbMzCv4FntFEathrm8U3bBqmtnVUOty+ZsmpAbQqE/mOIiwRCjPB3VADCnwExVSC65mJ7ij26IxVkyQhAnqAGevcvGXkZoE2b/BroRQHqtlAC8ZCCMHmpbm3gnJu6ZGQ6vricyzJyMRAakzOz21xM9QJiTLZc9H+nT3ouztXva0stR9hLdBdgnYlmW5vdmI6B6CKrD2rHjyB3+d/IpKwPx5Smys8QhjKBMH99qPwCYTIyOAzEzC65+DPaYYxANJZto5MV9gPYRsKGB9bITfa9pnRVmza/5pvtvCcF1EavJtr3pZf/Cxxt3991YJxv64FxjE+/XbUTA2AHBsN2uJvg3lbBto36tBBFBTj8qDe5MW3DRtsmFr+IpO3qp8hYd2brAtpNgHJ2/I0wRNjCWFtsS195zoa3A6fW9OMwL8J453sC21Z6S0tIXX1kJko2CrjCYLSfThXZgZ73pVxkQoXu8IyO4wvzlyUOZSbZI+fJ1zo7xXYkgf46xz1V32dAc+WVP7DT6UTSzNz6ZuaUz4e1J15aqpwffEF4ygQwkPfJVvR09pCNsQrnotd0Fz3GfiWNpqmSEe2xnP6AEuuLt9DWb63dnNaaQwWUzfdueZVBsSnlHaDF6X8lgSSHImoYzs8lxDwdU27RRnuAiOA435FYvvzfGh9oVw3xKIEa50WOCirAZgWIQ8OhWLb+//mAn5T817D9nV0lXbXkDBkQIsuDPT5grO/P2waKppw=
*/