/*==============================================================================
    Copyright (c) 2001-2010 Joel de Guzman
    Copyright (c) 2010-2011 Thomas Heller

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
==============================================================================*/
    
    namespace placeholders
    {
        typedef expression::argument<1>::type arg1_type BOOST_ATTRIBUTE_UNUSED; typedef expression::argument<2>::type arg2_type BOOST_ATTRIBUTE_UNUSED; typedef expression::argument<3>::type arg3_type BOOST_ATTRIBUTE_UNUSED; typedef expression::argument<4>::type arg4_type BOOST_ATTRIBUTE_UNUSED; typedef expression::argument<5>::type arg5_type BOOST_ATTRIBUTE_UNUSED; typedef expression::argument<6>::type arg6_type BOOST_ATTRIBUTE_UNUSED; typedef expression::argument<7>::type arg7_type BOOST_ATTRIBUTE_UNUSED; typedef expression::argument<8>::type arg8_type BOOST_ATTRIBUTE_UNUSED; typedef expression::argument<9>::type arg9_type BOOST_ATTRIBUTE_UNUSED; typedef expression::argument<10>::type arg10_type BOOST_ATTRIBUTE_UNUSED; typedef expression::argument<11>::type arg11_type BOOST_ATTRIBUTE_UNUSED; typedef expression::argument<12>::type arg12_type BOOST_ATTRIBUTE_UNUSED; typedef expression::argument<13>::type arg13_type BOOST_ATTRIBUTE_UNUSED; typedef expression::argument<14>::type arg14_type BOOST_ATTRIBUTE_UNUSED; typedef expression::argument<15>::type arg15_type BOOST_ATTRIBUTE_UNUSED; typedef expression::argument<16>::type arg16_type BOOST_ATTRIBUTE_UNUSED; typedef expression::argument<17>::type arg17_type BOOST_ATTRIBUTE_UNUSED; typedef expression::argument<18>::type arg18_type BOOST_ATTRIBUTE_UNUSED; typedef expression::argument<19>::type arg19_type BOOST_ATTRIBUTE_UNUSED; typedef expression::argument<20>::type arg20_type BOOST_ATTRIBUTE_UNUSED;
        typedef expression::argument<1>::type _1_type BOOST_ATTRIBUTE_UNUSED; typedef expression::argument<2>::type _2_type BOOST_ATTRIBUTE_UNUSED; typedef expression::argument<3>::type _3_type BOOST_ATTRIBUTE_UNUSED; typedef expression::argument<4>::type _4_type BOOST_ATTRIBUTE_UNUSED; typedef expression::argument<5>::type _5_type BOOST_ATTRIBUTE_UNUSED; typedef expression::argument<6>::type _6_type BOOST_ATTRIBUTE_UNUSED; typedef expression::argument<7>::type _7_type BOOST_ATTRIBUTE_UNUSED; typedef expression::argument<8>::type _8_type BOOST_ATTRIBUTE_UNUSED; typedef expression::argument<9>::type _9_type BOOST_ATTRIBUTE_UNUSED; typedef expression::argument<10>::type _10_type BOOST_ATTRIBUTE_UNUSED; typedef expression::argument<11>::type _11_type BOOST_ATTRIBUTE_UNUSED; typedef expression::argument<12>::type _12_type BOOST_ATTRIBUTE_UNUSED; typedef expression::argument<13>::type _13_type BOOST_ATTRIBUTE_UNUSED; typedef expression::argument<14>::type _14_type BOOST_ATTRIBUTE_UNUSED; typedef expression::argument<15>::type _15_type BOOST_ATTRIBUTE_UNUSED; typedef expression::argument<16>::type _16_type BOOST_ATTRIBUTE_UNUSED; typedef expression::argument<17>::type _17_type BOOST_ATTRIBUTE_UNUSED; typedef expression::argument<18>::type _18_type BOOST_ATTRIBUTE_UNUSED; typedef expression::argument<19>::type _19_type BOOST_ATTRIBUTE_UNUSED; typedef expression::argument<20>::type _20_type BOOST_ATTRIBUTE_UNUSED;
    }
    namespace arg_names
    {
        typedef expression::argument<1>::type arg1_type BOOST_ATTRIBUTE_UNUSED; typedef expression::argument<2>::type arg2_type BOOST_ATTRIBUTE_UNUSED; typedef expression::argument<3>::type arg3_type BOOST_ATTRIBUTE_UNUSED; typedef expression::argument<4>::type arg4_type BOOST_ATTRIBUTE_UNUSED; typedef expression::argument<5>::type arg5_type BOOST_ATTRIBUTE_UNUSED; typedef expression::argument<6>::type arg6_type BOOST_ATTRIBUTE_UNUSED; typedef expression::argument<7>::type arg7_type BOOST_ATTRIBUTE_UNUSED; typedef expression::argument<8>::type arg8_type BOOST_ATTRIBUTE_UNUSED; typedef expression::argument<9>::type arg9_type BOOST_ATTRIBUTE_UNUSED; typedef expression::argument<10>::type arg10_type BOOST_ATTRIBUTE_UNUSED; typedef expression::argument<11>::type arg11_type BOOST_ATTRIBUTE_UNUSED; typedef expression::argument<12>::type arg12_type BOOST_ATTRIBUTE_UNUSED; typedef expression::argument<13>::type arg13_type BOOST_ATTRIBUTE_UNUSED; typedef expression::argument<14>::type arg14_type BOOST_ATTRIBUTE_UNUSED; typedef expression::argument<15>::type arg15_type BOOST_ATTRIBUTE_UNUSED; typedef expression::argument<16>::type arg16_type BOOST_ATTRIBUTE_UNUSED; typedef expression::argument<17>::type arg17_type BOOST_ATTRIBUTE_UNUSED; typedef expression::argument<18>::type arg18_type BOOST_ATTRIBUTE_UNUSED; typedef expression::argument<19>::type arg19_type BOOST_ATTRIBUTE_UNUSED; typedef expression::argument<20>::type arg20_type BOOST_ATTRIBUTE_UNUSED;
        typedef expression::argument<1>::type _1_type BOOST_ATTRIBUTE_UNUSED; typedef expression::argument<2>::type _2_type BOOST_ATTRIBUTE_UNUSED; typedef expression::argument<3>::type _3_type BOOST_ATTRIBUTE_UNUSED; typedef expression::argument<4>::type _4_type BOOST_ATTRIBUTE_UNUSED; typedef expression::argument<5>::type _5_type BOOST_ATTRIBUTE_UNUSED; typedef expression::argument<6>::type _6_type BOOST_ATTRIBUTE_UNUSED; typedef expression::argument<7>::type _7_type BOOST_ATTRIBUTE_UNUSED; typedef expression::argument<8>::type _8_type BOOST_ATTRIBUTE_UNUSED; typedef expression::argument<9>::type _9_type BOOST_ATTRIBUTE_UNUSED; typedef expression::argument<10>::type _10_type BOOST_ATTRIBUTE_UNUSED; typedef expression::argument<11>::type _11_type BOOST_ATTRIBUTE_UNUSED; typedef expression::argument<12>::type _12_type BOOST_ATTRIBUTE_UNUSED; typedef expression::argument<13>::type _13_type BOOST_ATTRIBUTE_UNUSED; typedef expression::argument<14>::type _14_type BOOST_ATTRIBUTE_UNUSED; typedef expression::argument<15>::type _15_type BOOST_ATTRIBUTE_UNUSED; typedef expression::argument<16>::type _16_type BOOST_ATTRIBUTE_UNUSED; typedef expression::argument<17>::type _17_type BOOST_ATTRIBUTE_UNUSED; typedef expression::argument<18>::type _18_type BOOST_ATTRIBUTE_UNUSED; typedef expression::argument<19>::type _19_type BOOST_ATTRIBUTE_UNUSED; typedef expression::argument<20>::type _20_type BOOST_ATTRIBUTE_UNUSED;
    }

/* argument_no_predefined_20.hpp
qj9eAHwXAraR5GbyvUzcccF8WkLzqZOTdBYQvWF0EfetAs9HdszaA8HHhls3hxbpLF8uzlrHypNtkdU6O3dW0Tx3VBFPq0hGXKra/DLw8BK0yeXg4fepz39NjekrkedAzMU/QJ4fUpm7UDteTe14jWrHH5XJp9rxWuD7MWDz3D2VexT9R/i1jYqjvneFGts3oIyfoIxor1EeBInvG5aYuD6JpDvGP+V+YHWG5gaNJSQK2PZI1Dl8DF/D1u4+6tuFrGmbGuTNFr+kzZkKOXEzcJ/xf1rDrjVrWOWn+Ra7H7erCWPZYKGb8D7drbw/+YTnnrvm5V8Wu7LWB6PD9UFmcJDsGITe3raePjOEo7cvb88av4tFB9AQqqjCnxbntlnn9F0D/R0roJc1OI8M9gGuO7NwQaOefeygIslmgcbeL9TYu6tMPjX27sa4uMeNi+T57GRDo5+3hC4xyMce/5e8x8/jE96OR8HLvpzvR7nu7IbeJ3swkgdFvE4UjLChYRurEfZ9WaNi5rdSsu0D222/lfyRvZs1XcuGeajM1aFnVZdB5mxu2ODSnW+J7rdf7L3cPF8hfMFv6dfd7vc4WguMD2a53xODevd7UtDmfk8O2t3vKcEqt0aowxrB+SRy97O97e1egSF7/7a0sX2BvvxhaqMv5PVRh3mD+tGjqh89Viaf6kePox89UeZtuLcjG257bwZra1n5rYnuNvzK0nWgWeptiPSMT0lcqgA941bA+bTFkQl2xd2VZ1hO59G9RHPFJWrN+hzq8ryq972p8ON6vwjYl/z8KWts/3uVmn9fRlm/wfz7W+R/Jb++urXDGJj2S//rarX2VSKkbYUSUyI7D6LpaDWnvwY61kGv+AfQ8Xretd/wPokNjjeo3CtJT7Be8fPPZfKpfvQm6HirbHifu8OckybrlDZCnvL55SjjE7qI5fdgayjBWU+3OivubSszQ4qCd31cKrBnYUiAr79Q79wnhnpiMW6MFAc7xN7ZpU0MVMq7Pt/kAOd9dPk1uodbF+R+m2ZGkPttmg2Cd68g/9s08zld48C598JgZZusQNSjMD69xc6tKh1rqNHC0r/SWF72Md4fmpv1vrCyi048C5ddpuTLtc/8G8uWYf1PF6Vupf3XP0imvqfGwvtl8qmx8E+MhQ+UDFmn1rYfAu7fHk5s4Hy5H6n8QXmY/0Ws54vKw/zF5T7/m5R/RLmne1P5zXSPLA8/pnsz4CsB7K557/j5e30F+J7JfuuEonju2tLXQ377eoyW38yHrUD3KPlroLYG3SnAYc/s6l6m6l5eLp+qewVwVMpfvj80Ad8BZeYvnRlKD6xCnmrk2Xf4M8uNOHuSt2m5Pqn4vaZxkp4JlD2Q0LUN6Nq2PDGP6GniecYjz3bxPAKfnGd75JmYkGct7JRMPs6zI/J8mts0VoeiYCfA7Qy4HQWuhO/uwXZI/spaP4kPJcFk4PhMefIbvxOUHdVnAT8F8M9i3vhUOewKI/lSHtoFdZDvWXPPc0imVOcBBWk7COwofxcDj2DCE8W73mdaSvl4YN+2kwRHRbDcnH065zFSON339LGwyHY6i3FBzA1CW3vXSv+OTHK6QeNwTISfjFw4JiE9F45dhP7JmLPEQicT1WtXiZ9ifLn2S4IwzuhHxPgcZ4V+vqoT3pMPWcyBK1ZE+KcKnr2EBjK/gfVR4NrnC0FnfzhbhXo6YXnxNMkX/ZsT2ntIQThUteNTxeGs071z5H0vOVvTEfZejYBL4dF98joqp6SAN5tm5dKV51OVcxrkx/U0r1xPuqUZauztCVm4B+TpTIyDzwFuVh49wy2GRqUHiHQG/LbTrOh9f+LFqI20sd45Fx0obwQ=
*/