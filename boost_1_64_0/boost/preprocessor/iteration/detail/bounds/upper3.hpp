# /* **************************************************************************
#  *                                                                          *
#  *     (C) Copyright Paul Mensonides 2002.
#  *     Distributed under the Boost Software License, Version 1.0. (See
#  *     accompanying file LICENSE_1_0.txt or copy at
#  *     http://www.boost.org/LICENSE_1_0.txt)
#  *                                                                          *
#  ************************************************************************** */
#
# /* See http://www.boost.org for most recent version. */
#
# include <boost/preprocessor/slot/detail/shared.hpp>
#
# undef BOOST_PP_ITERATION_FINISH_3
#
# undef BOOST_PP_ITERATION_FINISH_3_DIGIT_1
# undef BOOST_PP_ITERATION_FINISH_3_DIGIT_2
# undef BOOST_PP_ITERATION_FINISH_3_DIGIT_3
# undef BOOST_PP_ITERATION_FINISH_3_DIGIT_4
# undef BOOST_PP_ITERATION_FINISH_3_DIGIT_5
# undef BOOST_PP_ITERATION_FINISH_3_DIGIT_6
# undef BOOST_PP_ITERATION_FINISH_3_DIGIT_7
# undef BOOST_PP_ITERATION_FINISH_3_DIGIT_8
# undef BOOST_PP_ITERATION_FINISH_3_DIGIT_9
# undef BOOST_PP_ITERATION_FINISH_3_DIGIT_10
#
# if BOOST_PP_SLOT_TEMP_3 == 0
#    define BOOST_PP_ITERATION_FINISH_3_DIGIT_3 0
# elif BOOST_PP_SLOT_TEMP_3 == 1
#    define BOOST_PP_ITERATION_FINISH_3_DIGIT_3 1
# elif BOOST_PP_SLOT_TEMP_3 == 2
#    define BOOST_PP_ITERATION_FINISH_3_DIGIT_3 2
# elif BOOST_PP_SLOT_TEMP_3 == 3
#    define BOOST_PP_ITERATION_FINISH_3_DIGIT_3 3
# elif BOOST_PP_SLOT_TEMP_3 == 4
#    define BOOST_PP_ITERATION_FINISH_3_DIGIT_3 4
# elif BOOST_PP_SLOT_TEMP_3 == 5
#    define BOOST_PP_ITERATION_FINISH_3_DIGIT_3 5
# elif BOOST_PP_SLOT_TEMP_3 == 6
#    define BOOST_PP_ITERATION_FINISH_3_DIGIT_3 6
# elif BOOST_PP_SLOT_TEMP_3 == 7
#    define BOOST_PP_ITERATION_FINISH_3_DIGIT_3 7
# elif BOOST_PP_SLOT_TEMP_3 == 8
#    define BOOST_PP_ITERATION_FINISH_3_DIGIT_3 8
# elif BOOST_PP_SLOT_TEMP_3 == 9
#    define BOOST_PP_ITERATION_FINISH_3_DIGIT_3 9
# endif
#
# if BOOST_PP_SLOT_TEMP_2 == 0
#    define BOOST_PP_ITERATION_FINISH_3_DIGIT_2 0
# elif BOOST_PP_SLOT_TEMP_2 == 1
#    define BOOST_PP_ITERATION_FINISH_3_DIGIT_2 1
# elif BOOST_PP_SLOT_TEMP_2 == 2
#    define BOOST_PP_ITERATION_FINISH_3_DIGIT_2 2
# elif BOOST_PP_SLOT_TEMP_2 == 3
#    define BOOST_PP_ITERATION_FINISH_3_DIGIT_2 3
# elif BOOST_PP_SLOT_TEMP_2 == 4
#    define BOOST_PP_ITERATION_FINISH_3_DIGIT_2 4
# elif BOOST_PP_SLOT_TEMP_2 == 5
#    define BOOST_PP_ITERATION_FINISH_3_DIGIT_2 5
# elif BOOST_PP_SLOT_TEMP_2 == 6
#    define BOOST_PP_ITERATION_FINISH_3_DIGIT_2 6
# elif BOOST_PP_SLOT_TEMP_2 == 7
#    define BOOST_PP_ITERATION_FINISH_3_DIGIT_2 7
# elif BOOST_PP_SLOT_TEMP_2 == 8
#    define BOOST_PP_ITERATION_FINISH_3_DIGIT_2 8
# elif BOOST_PP_SLOT_TEMP_2 == 9
#    define BOOST_PP_ITERATION_FINISH_3_DIGIT_2 9
# endif
#
# if BOOST_PP_SLOT_TEMP_1 == 0
#    define BOOST_PP_ITERATION_FINISH_3_DIGIT_1 0
# elif BOOST_PP_SLOT_TEMP_1 == 1
#    define BOOST_PP_ITERATION_FINISH_3_DIGIT_1 1
# elif BOOST_PP_SLOT_TEMP_1 == 2
#    define BOOST_PP_ITERATION_FINISH_3_DIGIT_1 2
# elif BOOST_PP_SLOT_TEMP_1 == 3
#    define BOOST_PP_ITERATION_FINISH_3_DIGIT_1 3
# elif BOOST_PP_SLOT_TEMP_1 == 4
#    define BOOST_PP_ITERATION_FINISH_3_DIGIT_1 4
# elif BOOST_PP_SLOT_TEMP_1 == 5
#    define BOOST_PP_ITERATION_FINISH_3_DIGIT_1 5
# elif BOOST_PP_SLOT_TEMP_1 == 6
#    define BOOST_PP_ITERATION_FINISH_3_DIGIT_1 6
# elif BOOST_PP_SLOT_TEMP_1 == 7
#    define BOOST_PP_ITERATION_FINISH_3_DIGIT_1 7
# elif BOOST_PP_SLOT_TEMP_1 == 8
#    define BOOST_PP_ITERATION_FINISH_3_DIGIT_1 8
# elif BOOST_PP_SLOT_TEMP_1 == 9
#    define BOOST_PP_ITERATION_FINISH_3_DIGIT_1 9
# endif
#
# if BOOST_PP_ITERATION_FINISH_3_DIGIT_3
#    define BOOST_PP_ITERATION_FINISH_3 BOOST_PP_SLOT_CC_3(BOOST_PP_ITERATION_FINISH_3_DIGIT_3, BOOST_PP_ITERATION_FINISH_3_DIGIT_2, BOOST_PP_ITERATION_FINISH_3_DIGIT_1)
# elif BOOST_PP_ITERATION_FINISH_3_DIGIT_2
#    define BOOST_PP_ITERATION_FINISH_3 BOOST_PP_SLOT_CC_2(BOOST_PP_ITERATION_FINISH_3_DIGIT_2, BOOST_PP_ITERATION_FINISH_3_DIGIT_1)
# else
#    define BOOST_PP_ITERATION_FINISH_3 BOOST_PP_ITERATION_FINISH_3_DIGIT_1
# endif

/* upper3.hpp
J/qmLD75An0TFp9sxTfQCTvXquJG/IRdZAW9QMLSd5KXpiIhi09+GYvCXPVAB7KHyN50C+yjG05WJC+bzwoSm9ILix0i3z6uUR5vquU2AFAIZ0Nn+/U0/Qrgh2Uk76nH4qhd3s3N+FoelT/X9r1G+xa5VYz2PRVj+Y5iX+m1eC/+qCB8CATz7mdt+EHVayx3xlon3R9i/X8C8BPgKVYqyKMVBVFHxoAkX/vfQFw5vV1OXnoP7RMMx+P2+z83izTRLUTxuTFah+BMcm0ml4wuoclC/7CpAW8kISwThFZ+EI4A8wRwhADpAGilXSS0fTUlSD07xhLaHgT/0HEQ05q8wu/viQPjUMh/Qj0xLs10HmBnpTjFQ2w8dAjOFmvYFPc6cS803SvF3azxbXKhOeIz3cS8Dr/VTvVEKaX4F3mm+sePyG8s/NQq9vHcItsJmQNoI9IPXyPVLtuXb+J2LB2Fb0SF+l+E8FeWyuvNIRROdJpCynY7yH2QE1pmJnSfeM82E7pd3DWm+wlxbzbJkQ4tI/1ACeQ0SyjFj0t6tALSEO32zLcnwzVkiyEbHqygUYqh0/bwaCuOSXDkmI4i1QiaG2iBFB6i7oIdgm68klkRT7qdhWHleLrE3JQ9jEvvmif1GV2NoT6lNl1hXjNeDWYdBOySVz4CPF1iNXZR+g1uptFFeehCFKULEesJbjEOU5y6s961CdlhV/i36lAxcGTCDn+g3inmnoENjUVdzzkq2RBx7GeRUbeZ0c1wrGUHE7tPiCVRpxgueltTHbFyw5C+oUwNjNVA+oaSNTBGA+kb+v6MAJ0aSN/QPwBUjhtkEQGonx+nfIug/7regqZGzkgY+WqsJwhrVxTWaY2Fr43VQNHytCmtZC6Fah3N+iv3WvorZ1EGK+GF7nmM+/A5ocvpJtKvgKlXKaE8CrpYAKeI1iUEqBHAUQL0kMi2wR5H7nhCuFIQSonEt6cZocBMzT/gVgMEIZ0Q3iVAHwFkEmCnhJhohniGEE4VMUIZITwqCEUmwq8I4UNBSCOExQR4TQAZBKghwHYBVBJgJgE2C2AL0ZhMgAcAgFT4D01XOld0GMfcjZPUBx3Br2tH5x/3d6wvyM1uAkN8QJOrk9YGGlzJgyYK9YbGJRPbUMWjG1diNUhT5Cx/J2DjeUFwGete4YkXzfoUH/jVuA3j0VKcghSxPoGJ1rh5PIPGf6qJBHjJEgXjPwGOj0KPnI4OEnqYnIqcbnKuJuf7cOopgfZpoTtF+WiKWUw3s/5TQdIHk/rdyqVT4dXiLJIFdWgsIQYtao2yjg71J7A/GpxK4FTKj6wuIVR+7DVL5eUAysh36PaLT77RiaZo0sQhU/1dOU2LB56ga059kpf9GShaT2K5Kp1shf/yPAwUpEjhaSAEW3n2BA/0HDVnlpOXwsJDzsbJ2QBKFWSNZpmyRj3V6yMZVCkgyuTNIKPHFz+NL/Wgv/iVQaQi7WRC8rKJ5J3Z5B9ZjFv9CIwYsrVK2gQqvmz457bptWKoL1zwms0l25UcvNiVYd1pu9n/a3rlcQRoysIYbYAA/QBgLbHvwGWpY0pV9/2CssdOKobxSBbOnyL8StMS7oQy2LiZ9q+/t3I1i1ZqT/YlTutj9vz/C1lrrQdc70TzHgfe3XDzalEtLjYfGazk1M+DT1C2MCpugtwBnoVYSKgB7aYArKM7hssWIZCio15NJAd9r6/ZFmEpxK9bZPtFhutgPsJig1kSZ+1A/3qdPMUGgvAYY3r41EviAU7g0lqHNVW0UARv9kHKELNU/DXVxI0sKieWJLiTbXPbxzXFjuvmdnFNteOaYsZlZeQwxXNDH5ZArHUGzsPHT7eKUzdbJbo=
*/