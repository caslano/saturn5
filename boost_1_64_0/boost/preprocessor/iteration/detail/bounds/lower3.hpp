# /* **************************************************************************
#  *                                                                          *
#  *     (C) Copyright Paul Mensonides 2002.
#  *     Distributed under the Boost Software License, Version 1.0. (See
#  *     accompanying file LICENSE_1_0.txt or copy at
#  *     http://www.boost.org/LICENSE_1_0.txt)
#  *                                                                          *
#  ************************************************************************** */
#
# /* See http://www.boost.org for most recent version. */
#
# include <boost/preprocessor/slot/detail/shared.hpp>
#
# undef BOOST_PP_ITERATION_START_3
#
# undef BOOST_PP_ITERATION_START_3_DIGIT_1
# undef BOOST_PP_ITERATION_START_3_DIGIT_2
# undef BOOST_PP_ITERATION_START_3_DIGIT_3
# undef BOOST_PP_ITERATION_START_3_DIGIT_4
# undef BOOST_PP_ITERATION_START_3_DIGIT_5
# undef BOOST_PP_ITERATION_START_3_DIGIT_6
# undef BOOST_PP_ITERATION_START_3_DIGIT_7
# undef BOOST_PP_ITERATION_START_3_DIGIT_8
# undef BOOST_PP_ITERATION_START_3_DIGIT_9
# undef BOOST_PP_ITERATION_START_3_DIGIT_10
#
# if BOOST_PP_SLOT_TEMP_3 == 0
#    define BOOST_PP_ITERATION_START_3_DIGIT_3 0
# elif BOOST_PP_SLOT_TEMP_3 == 1
#    define BOOST_PP_ITERATION_START_3_DIGIT_3 1
# elif BOOST_PP_SLOT_TEMP_3 == 2
#    define BOOST_PP_ITERATION_START_3_DIGIT_3 2
# elif BOOST_PP_SLOT_TEMP_3 == 3
#    define BOOST_PP_ITERATION_START_3_DIGIT_3 3
# elif BOOST_PP_SLOT_TEMP_3 == 4
#    define BOOST_PP_ITERATION_START_3_DIGIT_3 4
# elif BOOST_PP_SLOT_TEMP_3 == 5
#    define BOOST_PP_ITERATION_START_3_DIGIT_3 5
# elif BOOST_PP_SLOT_TEMP_3 == 6
#    define BOOST_PP_ITERATION_START_3_DIGIT_3 6
# elif BOOST_PP_SLOT_TEMP_3 == 7
#    define BOOST_PP_ITERATION_START_3_DIGIT_3 7
# elif BOOST_PP_SLOT_TEMP_3 == 8
#    define BOOST_PP_ITERATION_START_3_DIGIT_3 8
# elif BOOST_PP_SLOT_TEMP_3 == 9
#    define BOOST_PP_ITERATION_START_3_DIGIT_3 9
# endif
#
# if BOOST_PP_SLOT_TEMP_2 == 0
#    define BOOST_PP_ITERATION_START_3_DIGIT_2 0
# elif BOOST_PP_SLOT_TEMP_2 == 1
#    define BOOST_PP_ITERATION_START_3_DIGIT_2 1
# elif BOOST_PP_SLOT_TEMP_2 == 2
#    define BOOST_PP_ITERATION_START_3_DIGIT_2 2
# elif BOOST_PP_SLOT_TEMP_2 == 3
#    define BOOST_PP_ITERATION_START_3_DIGIT_2 3
# elif BOOST_PP_SLOT_TEMP_2 == 4
#    define BOOST_PP_ITERATION_START_3_DIGIT_2 4
# elif BOOST_PP_SLOT_TEMP_2 == 5
#    define BOOST_PP_ITERATION_START_3_DIGIT_2 5
# elif BOOST_PP_SLOT_TEMP_2 == 6
#    define BOOST_PP_ITERATION_START_3_DIGIT_2 6
# elif BOOST_PP_SLOT_TEMP_2 == 7
#    define BOOST_PP_ITERATION_START_3_DIGIT_2 7
# elif BOOST_PP_SLOT_TEMP_2 == 8
#    define BOOST_PP_ITERATION_START_3_DIGIT_2 8
# elif BOOST_PP_SLOT_TEMP_2 == 9
#    define BOOST_PP_ITERATION_START_3_DIGIT_2 9
# endif
#
# if BOOST_PP_SLOT_TEMP_1 == 0
#    define BOOST_PP_ITERATION_START_3_DIGIT_1 0
# elif BOOST_PP_SLOT_TEMP_1 == 1
#    define BOOST_PP_ITERATION_START_3_DIGIT_1 1
# elif BOOST_PP_SLOT_TEMP_1 == 2
#    define BOOST_PP_ITERATION_START_3_DIGIT_1 2
# elif BOOST_PP_SLOT_TEMP_1 == 3
#    define BOOST_PP_ITERATION_START_3_DIGIT_1 3
# elif BOOST_PP_SLOT_TEMP_1 == 4
#    define BOOST_PP_ITERATION_START_3_DIGIT_1 4
# elif BOOST_PP_SLOT_TEMP_1 == 5
#    define BOOST_PP_ITERATION_START_3_DIGIT_1 5
# elif BOOST_PP_SLOT_TEMP_1 == 6
#    define BOOST_PP_ITERATION_START_3_DIGIT_1 6
# elif BOOST_PP_SLOT_TEMP_1 == 7
#    define BOOST_PP_ITERATION_START_3_DIGIT_1 7
# elif BOOST_PP_SLOT_TEMP_1 == 8
#    define BOOST_PP_ITERATION_START_3_DIGIT_1 8
# elif BOOST_PP_SLOT_TEMP_1 == 9
#    define BOOST_PP_ITERATION_START_3_DIGIT_1 9
# endif
#
# if BOOST_PP_ITERATION_START_3_DIGIT_3
#    define BOOST_PP_ITERATION_START_3 BOOST_PP_SLOT_CC_3(BOOST_PP_ITERATION_START_3_DIGIT_3, BOOST_PP_ITERATION_START_3_DIGIT_2, BOOST_PP_ITERATION_START_3_DIGIT_1)
# elif BOOST_PP_ITERATION_START_3_DIGIT_2
#    define BOOST_PP_ITERATION_START_3 BOOST_PP_SLOT_CC_2(BOOST_PP_ITERATION_START_3_DIGIT_2, BOOST_PP_ITERATION_START_3_DIGIT_1)
# else
#    define BOOST_PP_ITERATION_START_3 BOOST_PP_ITERATION_START_3_DIGIT_1
# endif

/* lower3.hpp
CpNMj/ojTTbYDVmKJOpvd/R/oxTa+B2MiZFoApJYFZlrLnmmddM7UPzG86BfIX569x3EDvF52tcbO4C7rhhvRd7V6wTUucIWxn58IiyRSuoMzKsTVCVILH6YtXJPzEkVJn1wAVcES7PuBl1GFsPu8c09Dz7U/fX47p1Ha/ZMzq6rTKZ9MMtTNyQ5K7PHTG+P8pmXufv+MGl/HIx61AZtcFeQ5p9RLWNQYQwS22rrINNgMF+HkFmzT1O33uR2VlO3zuTWpqlbR7gxA/DEc4wDTk1++rBdk08usCUwE1koA6iZiNszSZsVEQINQmT0zUcdIdBjthDojQu0ECicEApRKiADeutzsrfaBlcVWCCWdbDk7y11ETwH+PPneOsDcA1gJuB+wKOApwDPA5YBVgNeB7wFeA/wGeArwD8BRwAu4DkFcAHMb3xR6noV8Ange4DDf23pFvc9bF1kdKOjbkD2z8T//Fcs+iHVdQkrK98Lmygr33fl1RazufPjU3K8kbYQyfAzrgDRGdblzShDzT9DzxavK4C5vhh/eEgET9wwKS1TVT5IZFSjAu667q6UdPBW6KFGVwnQXIx6zwJtFiHlDZ4bxbRyGCLhzZdgfZCxrg8aIx00WTYavE8TvVQvqpLo5w9wohOc0F89ZIWe2ImDrJUgs50gjXaQlPqLXySvLMR6iVrEp9q6NJWrs/p5AhrfmF3r7H8ekhGcWKIVbtdehGxlpmejC0C6zz/jFDmrLPkaJBBi7a+e7HVFLxDMg2zMOWohY17iYD5bYzYrBa1aNxZzerlX2LYJUaYLHdDgeBsQz+yiHuYgmU4Q7FmK1AAO8rmDevv8VIm0uUgI+oLbuFhUO4NWW5btVb9nbAEL29Wby3PJaKnABZ9Sd4QIqhr8y1a4M4LVlfuC8AqwV5V4sTIuEl3RcaGX6NGvSl37AYsAAVTOCMDNgBoA+XH/I7GjzEp12TOOFsEMortAAAafALdXt370SkGsLdVVJMKCr5XGhrtQH9n9qsmnaxOfH+ETUlvR3SLhkHr5ad5uy7rUqKVaclg64Og8JKqFCFYiOBdjMql+egk2UG3iajD0/8NMl4O8PL41j/ekCDYgUr3Jo+6Ep9wPvsEL6uPwl/a+0dgXt5vjMwTTRu/8FDJAI7g5Tg1VGoudoG0YY8DMwkO3juuxB1Lbs0FS1TgcGSeLv7/XC0L/ykZpQ8o3z5Lc98YPH/rMooF0wNI5ENq8sShnqMvvY8pgKT6anZJfJsUJjgR+o62M/BqSCT4VCbMEKVwK2SVdXIwSth16QFPHEX/Odut1gDrsXYL4ax/UD53yXySEdN+/l9N9Ax+kynhz8NYeTnOCiSYAIsC2rA/2KnNhqkAy5gW4h4bLUMelcz+6lYXbsBrbrQUtHW2CxijO2er7rVNMJjHcQ5aEpkkjlxN7BJ5c54iCrBqL3yLXmeyaObDvcf/swqQoqoZzW8mZVesOe75Df1xOpKF+gd8Tt21hVcDIg0n9baEmak051Rg90+F/51R8JO+yOZ2iENKQuhjnBb7oyzbmOoF/mqcDk+AKGrEH9+Nn7tEU6cnAJZqPgOGUp7hO0QJeqHU0FtLtfD6GhrEQ+NSpUjjqH19hH+RfcYCGG24MjAZ4B3lneXEP2i+hzf7guaH2osEhtRwhseHhASSQFbGKV77ATVwhCGEssZKKqPnIcEhN4Hii+MEWp3H0ddd5Y+TTd9NtQ2saJgRDxphZyIJqwKZO5Im3oY9egEuPzEi83+KtA7ChwPbDvV558VBV0Uy3f3n/JN6pZUupG3fD1d+6Y3uujjeCxevKEUzMzKO5yiiZZdfkc/fxuqAVZzRdXzPjFyHBDjSPxzo=
*/