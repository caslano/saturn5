/* A very simple result type
(C) 2017-2020 Niall Douglas <http://www.nedproductions.biz/> (10 commits)
File Created: June 2017


Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

#ifndef BOOST_OUTCOME_BOOST_RESULT_HPP
#define BOOST_OUTCOME_BOOST_RESULT_HPP

#include "config.hpp"

#include "boost/exception_ptr.hpp"
#include "boost/system/system_error.hpp"

BOOST_OUTCOME_V2_NAMESPACE_EXPORT_BEGIN

/*! AWAITING HUGO JSON CONVERSION TOOL
SIGNATURE NOT RECOGNISED
*/
namespace policy
{
  namespace detail
  {
    /* Pass through `make_error_code` function for `boost::system::error_code`.
     */
    inline boost::system::error_code make_error_code(boost::system::error_code v) { return v; }

    /* Pass through `make_exception_ptr` function for `boost::exception_ptr`.
    The reason this needs to be here, declared before the rest of Outcome,
    is that there is no boost::make_exception_ptr as Boost still uses the old
    naming boost::copy_exception. Therefore the ADL discovered make_exception_ptr
    doesn't work, hence this hacky pre-declaration here.

    I was tempted to just inject a boost::make_exception_ptr, but I can see
    Boost doing that itself at some point. This hack should keep working after.
    */
    inline boost::exception_ptr make_exception_ptr(boost::exception_ptr v) { return v; }
  }  // namespace detail
}  // namespace policy
BOOST_OUTCOME_V2_NAMESPACE_END

#include "std_result.hpp"


// ADL injection of outcome_throw_as_system_error_with_payload
namespace boost
{
  namespace system
  {
    inline void outcome_throw_as_system_error_with_payload(const error_code &error) { BOOST_OUTCOME_THROW_EXCEPTION(system_error(error)); }
    namespace errc
    {
      BOOST_OUTCOME_TEMPLATE(class Error)
      BOOST_OUTCOME_TREQUIRES(BOOST_OUTCOME_TPRED(is_error_code_enum<std::decay_t<Error>>::value || is_error_condition_enum<std::decay_t<Error>>::value))
      inline void outcome_throw_as_system_error_with_payload(Error &&error) { BOOST_OUTCOME_THROW_EXCEPTION(system_error(make_error_code(error))); }
    }  // namespace errc
  }    // namespace system
}  // namespace boost

BOOST_OUTCOME_V2_NAMESPACE_EXPORT_BEGIN

namespace detail
{
  // Customise _set_error_is_errno
  template <class State> constexpr inline void _set_error_is_errno(State &state, const boost::system::error_code &error)
  {
    if(error.category() == boost::system::generic_category()
#ifndef _WIN32
       || error.category() == boost::system::system_category()
#endif
    )
    {
      state._status.set_have_error_is_errno(true);
    }
  }
  template <class State> constexpr inline void _set_error_is_errno(State &state, const boost::system::error_condition &error)
  {
    if(error.category() == boost::system::generic_category()
#ifndef _WIN32
       || error.category() == boost::system::system_category()
#endif
    )
    {
      state._status.set_have_error_is_errno(true);
    }
  }
  template <class State> constexpr inline void _set_error_is_errno(State &state, const boost::system::errc::errc_t & /*unused*/)
  {
    state._status.set_have_error_is_errno(true);
  }

}  // namespace detail

/*! AWAITING HUGO JSON CONVERSION TOOL
SIGNATURE NOT RECOGNISED
*/
namespace trait
{
  namespace detail
  {
    // Shortcut these for lower build impact
    template <> struct _is_error_code_available<boost::system::error_code>
    {
      static constexpr bool value = true;
      using type = boost::system::error_code;
    };
    template <> struct _is_exception_ptr_available<boost::exception_ptr>
    {
      static constexpr bool value = true;
      using type = boost::exception_ptr;
    };
  }  // namespace detail

  // boost::system::error_code is an error type
  template <> struct is_error_type<boost::system::error_code>
  {
    static constexpr bool value = true;
  };
  // boost::system::error_code::errc_t is an error type
  template <> struct is_error_type<boost::system::errc::errc_t>
  {
    static constexpr bool value = true;
  };
  // boost::exception_ptr is an error types
  template <> struct is_error_type<boost::exception_ptr>
  {
    static constexpr bool value = true;
  };
  // For boost::system::error_code, boost::system::is_error_condition_enum<> is the trait we want.
  template <class Enum> struct is_error_type_enum<boost::system::error_code, Enum>
  {
    static constexpr bool value = boost::system::is_error_condition_enum<Enum>::value;
  };

}  // namespace trait


/*! AWAITING HUGO JSON CONVERSION TOOL
SIGNATURE NOT RECOGNISED
*/
template <class R, class S = boost::system::error_code, class NoValuePolicy = policy::default_policy<R, S, void>>  //
using boost_result = basic_result<R, S, NoValuePolicy>;

/*! AWAITING HUGO JSON CONVERSION TOOL
type alias template <class R, class S = boost::system::error_code> boost_unchecked. Potential doc page: `boost_unchecked<T, E = boost::system::error_code>`
*/
template <class R, class S = boost::system::error_code> using boost_unchecked = boost_result<R, S, policy::all_narrow>;

/*! AWAITING HUGO JSON CONVERSION TOOL
type alias template <class R, class S = boost::system::error_code> boost_checked. Potential doc page: `boost_checked<T, E = boost::system::error_code>`
*/
template <class R, class S = boost::system::error_code> using boost_checked = boost_result<R, S, policy::throw_bad_result_access<S, void>>;

BOOST_OUTCOME_V2_NAMESPACE_END

#endif

/* boost_result.hpp
9P2bl15vyaf/d77eA1QCDgUvBEeAs8H3q/sMcA54CTgXvAz8IFgJloFLwQpwGbgQvBWsAu8GLwc/Dy4BnwZrwRfBOvBV8Arwt2A9eBRsAL3MrgT7gB8B+4MfBQeBTfybAs4GLwWrwXngGnA+uASsAD8GLgSvBms1PDzHe7aed6TyNfcB5Wu9FIBpYBewC1gI9lT3CWA3cCDYHRwEdgWHqDu0y9TnFFvqsVif00+f0x9sr+48cADYBzxB09sWrOPAg5qeeZ7ZI5reVzX+E2Bn8CXN/9cd3acKjgJ3gmM0fBz4DFgKPgteAz4PrgV3gTcr3zrwe+C94IvgdvD74E7wh+Au8EfgPnAv+JofT/dF6ZwbvE/zr/uiku6R6w8OBSeDw8Hp4HRwBjgCPB8cA84Gx4ILwHFghfJVgqeDNeBEcBX4fvBKDV8NTgY/Bk4FrwfP1HIRrvshgnkiYZpfcz/E3Y6eXwfmgp8GR4IbwLHg51Wu92o72gieof6avs67SNOS/vXwRcAbwQzwJjAf/IQ+51ZN/yZN93bwHPAO8z5YTb+bpf/ZpPK+HywCHwB7pvm2vna7Xt+md8PkJPvdJNvdZJvdJFtdq42u3TY3Zo9bAq2E4u1vTdtb0+422b7WtK1tguw2taY9rWlHa7efXQMl2s2mtpm128uWQI2Q3S42ZhOr9rBqC2vawJr2ryltX027V9PeVW1dk+1cD0GBfeskyG7Xatq0Htue1bRdVbvV0GZ1NbRhVtvtVI9to9o6+1S1TVWbVLVTB2eCNnvU1Laoqe1Q50F10FpoG2Tam6qdqdqY2u1LA9vSmWAVZNqSboVM+9GekGE3arEZ9e1Fm++Adz35gxqhe6Dt0D7oKFR8J/UOzYeuu9M5/nf87/jf8b/jf8f/jv8d/zv+d/zv+N//0d8/2/5/afl7Y/9fSg6Hqi3LTrW/9s6KzwWvB+/37K8nyjebxpqG4aUlF55pflO32+lMjH1f2+nzVVZWDLfbV09M/sYObylmXNbv4va0R1i/idvTHqFpJ38Tt6c90vpN3J72SE072a7EnvYo4S02eItTpj0qTHuAwT8gZdqnCu9Ag3dgyrRPDdMebPAPTki7vaZdrnYCwwzeYQm8mjbJ+ryjDF5+w5tg/2nYPY41eMda060N051g8E5I4k225dwq4RVuHycqPItE85dUOMpTAH5JeJa6fB0VngfkW2YdRsuxb7yvCM8IN8k+U8twFJvE8XynbI97fidiI7sycAFUfgyqgCrVbiftmLYN6Z1yJpEH2Ovrk20dgu+zOz23tj+1c1D7h7Cdqf2lyTtCbRxM3hEhb1Ec70i12zF5R4a8xXG8vg30AOVVv5B3YBzvqcI7WHnVL+QdFthlqD56fqNivLD5fmNDu1LqR/kmBHyqR95zjlpsSM3v2UfUUPKHbgwHdXY4sCLWN5bRqTZinlBR6Ri6qm79Fr9G+PNs/SZptc4mMbAz3zcZfsM9R9356MaFkwO785GjHfWbGfM7NfA7M+Y3KvCbFPMbGfiNj/mNCPxGxfyGB35DY37DAr+Bod+IcYFfv5jf2MCvZ8xvTOBXGPMLy5EX8wvLkR3zC8uRFvMLy/H3SaFfWI4jMb+wHH+I+YXlOBT6DQ/L8WrMLyzH/phfWI6XY35hOfbE/MJyvBDzC8vxbMwvLMc3Y35hObbH/IY52kc8FvqNE/eW0D1W3A+E7jHi3hi6R4v7M6H7VHHfHbpHqW2FtiXVc9OmZ5Rq8bneHWGeGzyFkN1TYm2mvKps6SLM/6rrqtjP1dBY1hhvsxfYtbpTvTjb0xvT1nFf/Cpb+yHdxHFiRVV1eZWkITZvEv7d9F9Fz3IWpc11bfM=
*/