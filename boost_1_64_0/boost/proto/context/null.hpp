///////////////////////////////////////////////////////////////////////////////
/// \file null.hpp
/// Definintion of null_context\<\>, an evaluation context for
/// proto::eval() that simply evaluates each child expression, doesn't
/// combine the results at all, and returns void.
//
//  Copyright 2008 Eric Niebler. Distributed under the Boost
//  Software License, Version 1.0. (See accompanying file
//  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_PROTO_CONTEXT_NULL_HPP_EAN_06_24_2007
#define BOOST_PROTO_CONTEXT_NULL_HPP_EAN_06_24_2007

#include <boost/preprocessor/iteration/iterate.hpp>
#include <boost/preprocessor/repetition/repeat.hpp>
#include <boost/proto/proto_fwd.hpp>
#include <boost/proto/eval.hpp>
#include <boost/proto/traits.hpp>

namespace boost { namespace proto { namespace context
{

    template<
        typename Expr
      , typename Context
      , long Arity          // = Expr::proto_arity_c
    >
    struct null_eval
    {};

    template<typename Expr, typename Context>
    struct null_eval<Expr, Context, 0>
    {
        typedef void result_type;
        void operator()(Expr &, Context &) const
        {}
    };

    // Additional specializations generated by the preprocessor
    #include <boost/proto/context/detail/null_eval.hpp>

    /// null_context
    ///
    struct null_context
    {
        /// null_context::eval
        ///
        template<typename Expr, typename ThisContext = null_context const>
        struct eval
          : null_eval<Expr, ThisContext>
        {};
    };

}}}

#endif

/* null.hpp
V1/WhpFaJh+quT2XL0L+uosWQ2e763vO6HudG5S28c4VvnM7WwacbCCdvXMe52thUu7UmVWPg3VyisMV1FkcM2nNlX9IXP7Cf1V+dYb/oUCwdm6ZIlzMMdv6Z3w2ksuLvCnbOhOrsD8+HYzMj83cUZ7P6VqRZ21Fl6LR4Whzy4h9+Lmf2lG/MjqzKlG0bYYjuhTGBMCZQx4BEp6vfmrRfdjdETiv44XKccnPM7FujlqiPjajR/nuREZotcLdPu99/RC3Rk+r2Bfh5h5rn9PjclDLkuLAduIs85/FV4oEX4u1D7CdyD76xp+LeQ15WbV1I6e8Yv92xozxKjkvWYqiavte6zIKFsM8emxcERdqY2xX6nQvnFeKj1slvcr6TKxN/dVn7eVzNz8mPHQHlWpbJRMecdccE2aD/KZojCDjlDlE9ro/sC3c30AEPl+L+ECuLEm+G1LH52Fn1zdWD2DEbKJh0Bf3q4PStcnrVmT2wjwjsxmz9mm8petzPr3QGsLqiGOvode7n55aVB+avlXentPfpRhkPtRJby0jQn2ZK3+Ul29F36m27LVD2Q0krn0i6mcpykopnRZ6X1sH1sVbuv7ljP7ONaFqy7IWKDgWO+vKDU/ld25ZkXd1UdLTcMxvKSqnoDxI0kwJ6cr5uA283cdqnRLsCt3+fckQV+ShvOyRoq6TXFXWyxD/a6d369VozMsqa0qJu/ihc6MD9+GTjOa0q+OVN+S+glWa4A6UVJwmvodsfH6KN1E0KZTi1q6BxEDMUm/VMDXeFx5zgvPJalEng6qyyARHWU2KM+M5Nhj1SC7mGBb3TuxfnGf90LU5tij3iAlWdm76+23Uh0b0SSubtpKCPA5Onpg/vBxoDdZoPPc+NaEvqjrPZaP2pR/hY+N77k85fSeGaqiyrNXCPQDyleX293m3v0d1JyKVWJgq7YXRNpk9eTTRi/e7S38hvj/iOGyHpvonA843hqAnuznnM1/lVUtWGW6+HHXzZV27fYCXz8iHvdWD7IZ/G5ftYUBAYvEXhqgfjZB9UnVFTchibm9RkQYu3t+Wve7/C1Mbob5JoZj2/jLGzg0CciB3tE/ktL0Y+hTb49CNm8Ih7lgTRAJP+wxOq0WbFdCg1+hHeRBp6PuLvzDRaaeyKGoMgsoC+e4sn2nfXx+3QUHr0atW/DPqvYc5fI/oe/aiypusT0tlnP/c0Q8G2/RX3o4/4gd2YmycJeixMZaWdYjoR1emi1zgdDlRHWhgoRLdZq31x8QU/6+qoIxIH33zL8a6EN1kdZpVgoTTKFQZO9cOcZpWDLrrQTeMNCujW1ysT707L3+ia4ukThRJUFB7rEMBOdXPlLz8fJNhhVWltt+Gy5ksFtDAaY4OfStb2VXmi7j2+/OHlz0GdaSSZaHNyLp9snbnDy+b5kJpLYu2KqmzR0iFPCrHedNmfBvP+vfgiFeKPbcrOiimXc+sdQt0uLO+Yt4eKOKRULyfNu9V4ngYUWmWhbcH4vRHyCaw7OpC0Ozwf6Y2RC+OaGTTqSQbUqLp/J/pHHlZRJOmDU7UnEiG8IfryV45GZu0bHWRkZ3u+AhnzHQpxoEh2/VY69G3hACbk8e+SOi7TH2U3xeVzRIptSrNK9xsw6BHcX35WDR/+yqjJ1KQeaw7Oxe9HyTKcxs1Be2ofZm8AFe7jald4DejuZuVLZoFKTxu1eSt5odRm+p26Ieyl6J0dkdTe6PfTuZNleuupm4kQS/OngF3H+L0w1+Kz8yyyRoImVYCs5PM/5y3DsDNHIUb52hPCmUCfo3HyuP8j2ipEop4Z/2E7fHtz11e9mjZ1wUWI8rOs9Jcnr49L38MQmvWpS3xNnLdOUs=
*/