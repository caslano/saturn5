///////////////////////////////////////////////////////////////////////////////
/// \file null.hpp
/// Definintion of null_context\<\>, an evaluation context for
/// proto::eval() that simply evaluates each child expression, doesn't
/// combine the results at all, and returns void.
//
//  Copyright 2008 Eric Niebler. Distributed under the Boost
//  Software License, Version 1.0. (See accompanying file
//  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_PROTO_CONTEXT_NULL_HPP_EAN_06_24_2007
#define BOOST_PROTO_CONTEXT_NULL_HPP_EAN_06_24_2007

#include <boost/preprocessor/iteration/iterate.hpp>
#include <boost/preprocessor/repetition/repeat.hpp>
#include <boost/proto/proto_fwd.hpp>
#include <boost/proto/eval.hpp>
#include <boost/proto/traits.hpp>

namespace boost { namespace proto { namespace context
{

    template<
        typename Expr
      , typename Context
      , long Arity          // = Expr::proto_arity_c
    >
    struct null_eval
    {};

    template<typename Expr, typename Context>
    struct null_eval<Expr, Context, 0>
    {
        typedef void result_type;
        void operator()(Expr &, Context &) const
        {}
    };

    // Additional specializations generated by the preprocessor
    #include <boost/proto/context/detail/null_eval.hpp>

    /// null_context
    ///
    struct null_context
    {
        /// null_context::eval
        ///
        template<typename Expr, typename ThisContext = null_context const>
        struct eval
          : null_eval<Expr, ThisContext>
        {};
    };

}}}

#endif

/* null.hpp
QRavky1DFzaDhLvU+le1f6KDWiZQ07+RIHPgSRerg+4rEGRUNKzwaH1hENRhgUVcpqEVzjA4088B+/PCLsK2cYqrEv1uOwrzwYAIR+AdMB0CMP/P3YkrbKTEwoL7jfvJ6eHRhuyxYae7CsMCSVPttySQs2hBppIroPL4oSGcqtz10rCsKyAj36WQSNxL/+ydfT8HSTHo6LkZ6VXo1mo5kans8r9RRiQy96YS9VQt9wan3SL0CLf5cJRcp2LjZVtZ/gHwGhqwXloGw7v/mW3Af54SwXkk74KsyaiuRedALYV86+xTWeXlFLJfefyxfNYgkkSPGXl4IxT6qnpSbfiNb470OTC7/3kSFvoff/zHu+3GKW2sXHwD9FBKI2g1xrIEOW2TbLaAEq/FjeBk0QSI5Pnvz9cuPp+T/2UYqwyIAtgRkTJW2pjH6QzJ42twZvhkzGkwTWDMTL4stKhjaqLbs7y6AsgfvYgC/YW3C5dXWcI5JZTnKloqERDrsbeIChqTxC+te6aVJEK30I8pkmfiXC4zvzbJyhI1TAfXf2B/nX2RNlpechiti6goRg==
*/