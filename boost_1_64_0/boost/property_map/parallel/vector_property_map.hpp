// Copyright (C) Vladimir Prus 2003.
// Distributed under the Boost Software License, Version 1.0. (See
// accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
//
// See http://www.boost.org/libs/graph/vector_property_map.html for
// documentation.
//

#ifndef BOOST_PROPERTY_MAP_PARALLEL_VECTOR_PROPERTY_MAP_HPP_VP_2003_03_04
#define BOOST_PROPERTY_MAP_PARALLEL_VECTOR_PROPERTY_MAP_HPP_VP_2003_03_04

#include <boost/property_map/property_map.hpp>
#include <boost/shared_ptr.hpp>
#include <vector>
#include <boost/property_map/parallel/distributed_property_map.hpp>
#include <boost/property_map/parallel/local_property_map.hpp>

namespace boost {

/** Distributed vector property map.
 *
 * This specialization of @ref vector_property_map builds a
 * distributed vector property map given the local index maps
 * generated by distributed graph types that automatically have index
 * properties. 
 *
 * This specialization is useful when creating external distributed
 * property maps via the same syntax used to create external
 * sequential property maps.
 */
template<typename T, typename ProcessGroup, typename GlobalMap, 
         typename StorageMap>
class vector_property_map<T, 
                          local_property_map<ProcessGroup, GlobalMap,
                                             StorageMap> >
  : public parallel::distributed_property_map<
             ProcessGroup, GlobalMap, vector_property_map<T, StorageMap> >
{
  typedef vector_property_map<T, StorageMap> local_iterator_map;

  typedef parallel::distributed_property_map<ProcessGroup, GlobalMap, 
                                             local_iterator_map> inherited;

  typedef local_property_map<ProcessGroup, GlobalMap, StorageMap> index_map_type;

public:
  vector_property_map(const index_map_type& index = index_map_type())
    : inherited(index.process_group(), index.global(),
                local_iterator_map(index.base())) { }

  vector_property_map(unsigned inital_size, 
                      const index_map_type& index = index_map_type())
    : inherited(index.process_group(),  index.global(),
                local_iterator_map(inital_size, index.base())) { }
};

/** Distributed vector property map.
 *
 * This specialization of @ref vector_property_map builds a
 * distributed vector property map given the local index maps
 * generated by distributed graph types that automatically have index
 * properties. 
 *
 * This specialization is useful when creating external distributed
 * property maps via the same syntax used to create external
 * sequential property maps.
 */
template<typename T, typename ProcessGroup, typename GlobalMap, 
         typename StorageMap>
class vector_property_map<
        T, 
        parallel::distributed_property_map<
          ProcessGroup,
          GlobalMap,
          StorageMap
        >
      > 
  : public parallel::distributed_property_map<
             ProcessGroup, GlobalMap, vector_property_map<T, StorageMap> >
{
  typedef vector_property_map<T, StorageMap> local_iterator_map;

  typedef parallel::distributed_property_map<ProcessGroup, GlobalMap, 
                                             local_iterator_map> inherited;

  typedef parallel::distributed_property_map<ProcessGroup, GlobalMap, 
                                             StorageMap>
    index_map_type;

public:
  vector_property_map(const index_map_type& index = index_map_type())
    : inherited(index.process_group(), index.global(),
                local_iterator_map(index.base())) { }

  vector_property_map(unsigned inital_size, 
                      const index_map_type& index = index_map_type())
    : inherited(index.process_group(), index.global(),
                local_iterator_map(inital_size, index.base())) { }
};

}

#endif // BOOST_PROPERTY_MAP_PARALLEL_VECTOR_PROPERTY_MAP_HPP_VP_2003_03_04

/* vector_property_map.hpp
u648tfNf5aXHsOcB0TihJd7wB5xR9x31EHwcJ46MiF5f/5F58K/pefKui+S1Z9n/EnjdKRXd50HxcAp9p9u/v7H7tfj83eLAH3CO/io7wt/jzB8/WH4GffbBu/Du8uvw2U/kn7vkA+fz11vEa+ubJy4XTJPnX+9677jOIfo5Cd8V94o2qCddq27QG8+s1r8cqd4xPBpT7H7qQPpZ4P4do9c33xuN404Vj8db/yh4BQ/Xn2rf8bKeDcS1OL8fb32fRuPmQ4lo/Ec05j4fjUWP4hkJdYeZ7qMeun4RPP5FXnuRPLg1/hHzsE36yz/Sz/vq6XB56nN4wDf45xV4+SPeP0U9ah87WZRkNyl1XX7+Ezu4XZwpsb/Xxb8xpE4ur90M57Pg8IgW0VhyVTSufkP/7Qv4/RQcOgkOwok5O9nrRXAgAYfZ11J4t/Tv8MDrhWPdD78v7B6N03/Ds69Xp+gnPuTg6wXR2HSVsT17kv+UFGfgK3jcreJaD/v9ftxX0v+bDa/xiIqt8Hy+PkwpHtTX+/CVqub461Fw0H0LR+Gt36XhX+LJhfJmeFFyJb7RSRzLwQ/ln4WN4El9OHQV/ej7rJZHLVgVjdPn4Cn8o2lzvO1Pff1+cV0NjvGvqfTc9D56E2f33s/ub/O+Mnj3nHgwVN73T7i7B//7L7wdCLeuU/dKRWPm7c7bfGIfxOvKC/jfCfzq4kQ0voovdsK7nsVrvkmP5pHBL1tY/63JaN/+6vqL7Yc6TlUKzuFRg+fqozh3kXzE/Qepu8zgv6X6KfC36S9ev8A8rufPY/y9OBp7ny3PlY9MPSo+P4Jf8qfC17zOfnLg4frX6WWAfanWDzyNXz8VvV58DT1ughOt4QIcHjNGPEiXT1W6/gVwZoz9fYcdPKxe4/8nHau/Uisac7vYb/x10oPqAU/SXzk+NR4uLo/r//CuAD5bX3N40vgNdp8Q9/vrF7Zn/z/y47by1Ep89nd8NkvdoBO8p++qTXCus/9/C8/Ekzoftp5q9So8a/r3eO0d0biynrxzDh6JBxZMYG/4e+OB8rj34jonv8uGg+e6zyR4PhWvWOS6N4oj4xLRdeUhe8+A+wPsg3yjKB3+z6ePC/Hsic539NInWeO+P+s/G7eeYL9+j8Zm+Fcd9ZSmL6kvX5iI7sPOqvDiwTfJ42fC6Vn8ran4upldqX+uS0Rjuy3yiZ3WUSPut7Pui+07/jIMjqx8nP0fDVfgyOo96pW15VNwZdgT9HWKePIrvlDC/ruk9FPZz9V4vngx7Ef5UBl/5Eer0+Bje7ylFX6dq083Dv9hb+vG8vdl7M9+FubAcedgejsf1a4Er/soGou6qWe7TuOXxHl+MOF4/gSnJ4jbzXZEr+f3iMacwc4R3WIf5sof9BlXDsLfllvHZPH6IvpoLP6eKL5mqhde5f14ZdY16nDHp/BIv63+tH2Xp2YaF0zy+bvMpyF/fVG9xv8X4229j4aX4uvWKnhdpp6Jf1fD6QVx/6mjfTuX/airzDlsHl34RX12dTn8b+86y+n1a/N4RFy6GL/UD5qtTpy1mh90M091vtZnqj+Ns94FcG1xRjT2l6/cgndt5bfF4scR/PFRdZfL1UmS4sxg+FUiPmSo66XB+w7RmDciFY3N6cc5h9174Am8ScpXJ96F19Vl1yeI69vwm1OjsaqeuuwScWGhuAQ3Uj3cZ4r19BEv9FkqWuBX1fhaHbjzin5Kt2gsxUMa9pP/9NSfmo6vHws/P8Bbq+T1hfox09U/r9C/7EwPmfhUaVxnlX89Zh+fhvv2YUEt+j1oH3aJL/Cx9/v6FpeZ57PsTT+rd0f7Qk97+9MD3jZug+uqqxSx16mnseM=
*/