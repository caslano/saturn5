/* Copyright 2006-2019 Joaquin M Lopez Munoz.
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * See http://www.boost.org/libs/flyweight for library home page.
 */

#ifndef BOOST_FLYWEIGHT_DETAIL_DEFAULT_VALUE_POLICY_HPP
#define BOOST_FLYWEIGHT_DETAIL_DEFAULT_VALUE_POLICY_HPP

#if defined(_MSC_VER)
#pragma once
#endif

#include <boost/config.hpp> /* keep it first to prevent nasty warns in MSVC */
#include <boost/detail/workaround.hpp>
#include <boost/flyweight/detail/perfect_fwd.hpp>
#include <boost/flyweight/detail/value_tag.hpp>

/* Default value policy: the key is the same as the value.
 */

namespace boost{

namespace flyweights{

namespace detail{

template<typename Value>
struct default_value_policy:value_marker
{
  typedef Value key_type;
  typedef Value value_type;

  struct rep_type
  {
  /* template ctors */

#if !defined(BOOST_NO_CXX11_RVALUE_REFERENCES)&&\
    !defined(BOOST_NO_CXX11_VARIADIC_TEMPLATES)&&\
    BOOST_WORKAROUND(BOOST_GCC,<=40603)
/* GCC bug: the default ctor generated by the variadic template ctor below
 * fails to value-initialize x.
 */

    rep_type():x(){}
#endif

#define BOOST_FLYWEIGHT_PERFECT_FWD_CTR_BODY(args) \
  :x(BOOST_FLYWEIGHT_FORWARD(args)){}

  BOOST_FLYWEIGHT_PERFECT_FWD(
    explicit rep_type,
    BOOST_FLYWEIGHT_PERFECT_FWD_CTR_BODY)

#undef BOOST_FLYWEIGHT_PERFECT_FWD_CTR_BODY

    rep_type(const rep_type& r):x(r.x){}

#if !defined(BOOST_NO_CXX11_RVALUE_REFERENCES)
    rep_type(rep_type&& r):x(std::move(r.x)){}
#endif

    operator const value_type&()const{return x;}

    value_type x;
  };

  static void construct_value(const rep_type&){}
  static void copy_value(const rep_type&){}

#if !defined(BOOST_NO_CXX11_RVALUE_REFERENCES)
  static void move_value(const rep_type&){}
#endif
};

} /* namespace flyweights::detail */

} /* namespace flyweights */

} /* namespace boost */

#endif

/* default_value_policy.hpp
02p8CT1lEE26nw2pCRpIG4UWchNFEKqyqD2A/Mpa7LUl/8IMHiz+Xg9XdeLv3fFM2Rnj742PCRJ/L6qwzDr+XqnzV8TfM1sJHFpR2fQ/xSCtG9zv5XI761xs4xwhqr/P3+bQTLPHcaYYfCi9XVRP+KNfSGd8PH1TPSXqXiqu/iW1rFwYf1eXB9lDzlynuzCewPOnYP40zF8A+b16BNLOYADHYuitkSJympaAiRQ4r3bAFXjA3xes0H5Ty1Dr8+gCduDxtNHeRbaO6ODYSKrrFD1UYmMZxTC+ngy0liUm+TfoNOej29kkv2IUTPLD4XiQNtdCcyIDrc0Tgdb2UbYVlG0jZkumbAPljD7QIRHIQGuT1UBr+wnJcEKyGpH8+1mGJFsiyRZI5slAawkUaE2sVPmiY2GDy7qOrKs6bCR/1UNEpcuo4C/Hkb9qLHgsFTzEqYtIk93wIM8yZe3D/A+EK7uLjk/pQb8m64F7JpuCflEKdKwECtyjqpeSKHCPciJHb0Xgnjjd9AFXEiQhOlwP+iUITIUNknwqdqgKswimMPNFBZoJw5xAfQVUGgOJNFqM0sUjvq+koUJ0zYXn1ECMCivwpekjVB2tspHme4TP8fWhpvZb7jG1nxod8DS1X+s81n4v3gzt9yws7QiiuBsucVMctLkOuSl281UpeGu1+y1a68YwGaXq5GkZvmIW0qedWPpH9J99Mmic2tn5ZkXyK3rabPj9+/Kqk6RMTnZyATKTOu0Dc2qxg4U8e0XGuDrf9JomeBR5Qn9gQlC8CqCOBalA+p07S8cQ66YpcCttk/aHtM1il9o2aep6U5nWaWWmZBmQbjuh7Ahu+83vsXlIIh1xijVPCzOEnFuw5D+ifRboIeda/VRRocxPN4n5KZlMg+69hc1PjYfD/FQbpCoEqTw/TevutOrac6y6tiP/d67s047gnXHavRYNjDTm/540ugI1KIgdSpN/8lAjf33+BB/L/dzyh0k9ecdaS39S76wqq168uas5vqeGWeKbUV18NTi+fU9Y4ru4uvjWP0T4brHG98VKjs/G/iaViesPqUqD87jYWpe0Yj6DNvRrUku1Hckm18O5MLk+t1RqQ+VhsVl51jJALjyFoaBb+LlTEwKtzNoFEEKdahpFUYXEX6lNqHw/45bFxMpL15j9h818xo6/2TY8/4Qcc/5etvIHFlH+5x835w+3lX8Vz59TKf/OFVb5KZ6Z1f2EGwkTaRWEJqEmD9ZRICwxP5hEEenyoBNkbXbxQ/AD40lfnKu7NKKIdB2dvmT/S4AKs8DFM8CwCDCQA5z9w908/3zI738omPM0RMykkvtdwkFWLh0ZKu/qhfDb1xS+XYZbAzoo6to4Zt+punpdnKteGSFdyXk6rfyWbCar9ycTBdWtJdWHbkcPr/1pRDTmyWlaAzT6fEWGwycrKSiutUVxqxzWxY2Xxf00TBQ3hhWXTcWtHiaKexrVqrIkqtmWm9WiSBfcnTn6gqyLfwwXtgsM4xDCeJ3EOAitMzGLx48XewK//a3cc/cxDY85C033p3rca+e8nPxfU17Kd/rGM/pLj1Ph5wyzd78ssMB8P+xLn01/jusoK+Va67N1H6+Q8uilXfeUbX6kqeWtvtFWeVHm8r580nZ5+/+ulNfVXnmP/N1U3oQnz+jf8pnhVvdRVKw9CStqMdPIt40HFr8fIJ/W8Y6yCj2d34DegG9emC5MjrB4u/pG8v/yANVcqAq1y4sMHm7JrO9yB/mjHC4tAUZKS4BlE5lZ3yVOh+WNYmnwMJdm1LTouT+QDk9/tVS6zZ0bU5tNbvgbp9rPtjuZw0m+gO+nI4R/P8YDB63HheMpB9mpD1MzrqI=
*/