/*
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * Copyright (c) 2014 Andrey Semashev
 */
/*!
 * \file   atomic/detail/caps_gcc_atomic.hpp
 *
 * This header defines feature capabilities macros
 */

#ifndef BOOST_ATOMIC_DETAIL_CAPS_GCC_ATOMIC_HPP_INCLUDED_
#define BOOST_ATOMIC_DETAIL_CAPS_GCC_ATOMIC_HPP_INCLUDED_

#include <boost/atomic/detail/config.hpp>
#include <boost/atomic/detail/int_sizes.hpp>
#if defined(__i386__) || defined(__x86_64__)
#include <boost/atomic/detail/hwcaps_gcc_x86.hpp>
#elif defined(__arm__)
#include <boost/atomic/detail/hwcaps_gcc_arm.hpp>
#elif defined(__POWERPC__) || defined(__PPC__)
#include <boost/atomic/detail/hwcaps_gcc_ppc.hpp>
#endif

#ifdef BOOST_HAS_PRAGMA_ONCE
#pragma once
#endif

#if defined(BOOST_ATOMIC_DETAIL_X86_HAS_CMPXCHG16B) && (defined(BOOST_HAS_INT128) || !defined(BOOST_NO_ALIGNMENT))
#define BOOST_ATOMIC_INT128_LOCK_FREE 2
#else
#define BOOST_ATOMIC_INT128_LOCK_FREE 0
#endif

#if (__GCC_ATOMIC_LLONG_LOCK_FREE == 2) || (defined(BOOST_ATOMIC_DETAIL_X86_HAS_CMPXCHG8B) && BOOST_ATOMIC_DETAIL_SIZEOF_LLONG == 8)
#define BOOST_ATOMIC_LLONG_LOCK_FREE 2
#else
#define BOOST_ATOMIC_LLONG_LOCK_FREE BOOST_ATOMIC_INT128_LOCK_FREE
#endif

#if (__GCC_ATOMIC_LONG_LOCK_FREE == 2) || (defined(BOOST_ATOMIC_DETAIL_X86_HAS_CMPXCHG8B) && BOOST_ATOMIC_DETAIL_SIZEOF_LONG == 8)
#define BOOST_ATOMIC_LONG_LOCK_FREE 2
#else
#define BOOST_ATOMIC_LONG_LOCK_FREE BOOST_ATOMIC_LLONG_LOCK_FREE
#endif

#if __GCC_ATOMIC_INT_LOCK_FREE == 2
#define BOOST_ATOMIC_INT_LOCK_FREE 2
#else
#define BOOST_ATOMIC_INT_LOCK_FREE BOOST_ATOMIC_LONG_LOCK_FREE
#endif

#if __GCC_ATOMIC_SHORT_LOCK_FREE == 2
#define BOOST_ATOMIC_SHORT_LOCK_FREE 2
#else
#define BOOST_ATOMIC_SHORT_LOCK_FREE BOOST_ATOMIC_INT_LOCK_FREE
#endif

#if __GCC_ATOMIC_CHAR_LOCK_FREE == 2
#define BOOST_ATOMIC_CHAR_LOCK_FREE 2
#else
#define BOOST_ATOMIC_CHAR_LOCK_FREE BOOST_ATOMIC_SHORT_LOCK_FREE
#endif

#if __GCC_ATOMIC_POINTER_LOCK_FREE == 2
#define BOOST_ATOMIC_POINTER_LOCK_FREE 2
#else
#define BOOST_ATOMIC_POINTER_LOCK_FREE 0
#endif


#define BOOST_ATOMIC_INT8_LOCK_FREE BOOST_ATOMIC_CHAR_LOCK_FREE

#if BOOST_ATOMIC_DETAIL_SIZEOF_SHORT == 2
#define BOOST_ATOMIC_INT16_LOCK_FREE BOOST_ATOMIC_SHORT_LOCK_FREE
#elif BOOST_ATOMIC_DETAIL_SIZEOF_INT == 2
#define BOOST_ATOMIC_INT16_LOCK_FREE BOOST_ATOMIC_INT_LOCK_FREE
#elif BOOST_ATOMIC_DETAIL_SIZEOF_LONG == 2
#define BOOST_ATOMIC_INT16_LOCK_FREE BOOST_ATOMIC_LONG_LOCK_FREE
#elif BOOST_ATOMIC_DETAIL_SIZEOF_LLONG == 2
#define BOOST_ATOMIC_INT16_LOCK_FREE BOOST_ATOMIC_LLONG_LOCK_FREE
#else
#define BOOST_ATOMIC_INT16_LOCK_FREE 0
#endif

#if BOOST_ATOMIC_DETAIL_SIZEOF_SHORT == 4
#define BOOST_ATOMIC_INT32_LOCK_FREE BOOST_ATOMIC_SHORT_LOCK_FREE
#elif BOOST_ATOMIC_DETAIL_SIZEOF_INT == 4
#define BOOST_ATOMIC_INT32_LOCK_FREE BOOST_ATOMIC_INT_LOCK_FREE
#elif BOOST_ATOMIC_DETAIL_SIZEOF_LONG == 4
#define BOOST_ATOMIC_INT32_LOCK_FREE BOOST_ATOMIC_LONG_LOCK_FREE
#elif BOOST_ATOMIC_DETAIL_SIZEOF_LLONG == 4
#define BOOST_ATOMIC_INT32_LOCK_FREE BOOST_ATOMIC_LLONG_LOCK_FREE
#else
#define BOOST_ATOMIC_INT32_LOCK_FREE 0
#endif

#if BOOST_ATOMIC_DETAIL_SIZEOF_SHORT == 8
#define BOOST_ATOMIC_INT64_LOCK_FREE BOOST_ATOMIC_SHORT_LOCK_FREE
#elif BOOST_ATOMIC_DETAIL_SIZEOF_INT == 8
#define BOOST_ATOMIC_INT64_LOCK_FREE BOOST_ATOMIC_INT_LOCK_FREE
#elif BOOST_ATOMIC_DETAIL_SIZEOF_LONG == 8
#define BOOST_ATOMIC_INT64_LOCK_FREE BOOST_ATOMIC_LONG_LOCK_FREE
#elif BOOST_ATOMIC_DETAIL_SIZEOF_LLONG == 8
#define BOOST_ATOMIC_INT64_LOCK_FREE BOOST_ATOMIC_LLONG_LOCK_FREE
#else
#define BOOST_ATOMIC_INT64_LOCK_FREE 0
#endif


#if __GCC_ATOMIC_WCHAR_T_LOCK_FREE == 2
#define BOOST_ATOMIC_WCHAR_T_LOCK_FREE 2
#elif BOOST_ATOMIC_DETAIL_SIZEOF_WCHAR_T == 8
#define BOOST_ATOMIC_WCHAR_T_LOCK_FREE BOOST_ATOMIC_INT64_LOCK_FREE
#elif BOOST_ATOMIC_DETAIL_SIZEOF_WCHAR_T == 4
#define BOOST_ATOMIC_WCHAR_T_LOCK_FREE BOOST_ATOMIC_INT32_LOCK_FREE
#elif BOOST_ATOMIC_DETAIL_SIZEOF_WCHAR_T == 2
#define BOOST_ATOMIC_WCHAR_T_LOCK_FREE BOOST_ATOMIC_INT16_LOCK_FREE
#elif BOOST_ATOMIC_DETAIL_SIZEOF_WCHAR_T == 1
#define BOOST_ATOMIC_WCHAR_T_LOCK_FREE BOOST_ATOMIC_INT8_LOCK_FREE
#else
#define BOOST_ATOMIC_WCHAR_T_LOCK_FREE 0
#endif

#define BOOST_ATOMIC_CHAR32_T_LOCK_FREE BOOST_ATOMIC_INT32_LOCK_FREE
#define BOOST_ATOMIC_CHAR16_T_LOCK_FREE BOOST_ATOMIC_INT16_LOCK_FREE

#define BOOST_ATOMIC_THREAD_FENCE 2
#define BOOST_ATOMIC_SIGNAL_FENCE 2

#endif // BOOST_ATOMIC_DETAIL_CAPS_GCC_ATOMIC_HPP_INCLUDED_

/* caps_gcc_atomic.hpp
52E5fAWeBX/j5sww/BhOgjHE4WxYByttf3AGfB1WwYQoZHrA9rAaDoGz4AxYA5fA2XAbnAOfhXPhJ7AWpkcjqwO+Ai+AX8MLYdsY2krYE14MT4eL+L8AXgJXwUvhLngZfBleDr+BV8Bm1P+fw77wSjgOLoYXwKvgzfBq+Bt4DayHS2z/8DrYOo6+DyyGS+Ek+Au4GN4Ab4e/hI/CG+F7cBmk66Jugl3gclgKV8BpcCX8OVwFN8Kb4XNwNfwQ3gLjEpDlATvCtXAkvA3OhOvgtfB2eCdcD5+Bd8BP4AbYKNEre60T3ARL4RY4Bd4JF8Ot8F64DT4Gd8LX4AOwCxX2QTgPPgTXwIfhI3A3/AA+Aulcq0dhe/gYHAIfh1XwCTgbPgXnw2dgWRJlG54H98Gl8Dl4F3we/h6+AL+CL8JWycjqgt3hS/A0+Hs4D/4BroQv2/GCr8BX4KvwMHzN9p/C3DIcCOvhFPgmvAi+BdfBt+GT8B24H74LY1O9shvy4PuwFH4AZ8A/wmvgn+CdcD98Cn4IP4Ifwfg0ZH3BTvBjOAJ+AivhX+DV8DO4GX4JR6UjCwFOhF/BC+Eh+Gv4NXwMHoZ74DfwW/gtbNbEKwNiJPwbrIDKIr+gBR+ELvgKdMOPoQfSJVJRMBdGwxNhDJwIY+FkGAd/DuPhWpgAH4WJ8AnYBA6incqAj8FmcP6/aG/iRNwsQq1FPY56P7JXMXJFrp/88qBm/ITr/1OKbDVhLgLC7cX/f3rtf4Nv77/sUdeUZ4lBfZjMe322d010UNGEWQQzq3qudx1OHWGsxJjHhFsk68ajCT8d9oUv5/HeNuEiW712Ao/kXT/7HXaWQutfPxO3xWa98m2td4vs7sD10jTodV9k1iJe0vqmVoM1Z1lffUzbd5H1VZ//bO8cRbR/XWQMdru1XYHje/d8+t9x76o52CPp1Hw3SetzzVzt89p/O2uGutwxB1Kp3dsJ9qK2HyV6vtJk+8el834F/M0Q94XafqbKJHUHYuqLx33avInM/9Kv0OHmWBVqlWN+RX961vjJniPnN8TPGK1fcNT8tse9sZC8Y9xL3olZMqz1rbOKWWbgurwZHxe7wo0Xf/i4ObT87R8u9/iHyuv+oeP10PLDw8nfDievO9y4P7y87lP1+P6dK9dsbnXw6g5f7Vs5ekSHMyb/ePK6fyw52KHlVx95/iBfSZsFY0VWkRvmSIFNknFiGoyB6dD2V2PaDd1WaX8JuuZziQymlrA9zIa5sCPsAPNhITwPFsFF8AS4A3ZXIosIRhNmTxl/9oYPwCPJG9qEehxV1NnIEDJyg75A2TKB2qIWMrAsgqFk/ewO6mPmoXzyeBajNqF8cnbelv5n+vG4Q41FGRk6qD3SL/0W1TJfy70xcm6qUM7+6kuoj1HfohILCA8VSubM4yiRNUMf1y9fJgfVF1WOqkVdjvLLgcEPSnXDLUrkujSQ57IbFSynJRPllMWyNKjvfAjllJVSjPLJRlmEWopaQnpvah/pU0euyBW5IlfkilyR6182/ucbdz/O3v/1uazLyDh9uozTT+YhMmAB/D3jubZVvnF62PG5uMk3e3rLtL61J9R+5hHGfbHZBz1R65M8KUi2P2B9b6WacXpltR4lOr6HNVy7zfDIWF3C6qhSzVmEWfNqxZNvfD9Iu8nSfkYbP9nOcTCPQ9iyv/kibf+wO4lzCUMI+2LULtTnqI5WRzUFtdoazB7FQmTbFqla1H2ow6h+7iKE7OY7xvbzzVzAdB3utZZvX2cvre/uOR4z/3mHSvPNtZO0fZwnTb1u+b5V21ebfWuxWm953Un64eZF9pJod4FmjrgsIC7eeYhibX+8x5EG8/k=
*/