
#ifndef BOOST_MPL_AUX_OVERLOAD_NAMES_HPP_INCLUDED
#define BOOST_MPL_AUX_OVERLOAD_NAMES_HPP_INCLUDED

// Copyright Aleksey Gurtovoy 2004
//
// Distributed under the Boost Software License, Version 1.0. 
// (See accompanying file LICENSE_1_0.txt or copy at 
// http://www.boost.org/LICENSE_1_0.txt)
//
// See http://www.boost.org/libs/mpl for documentation.

// $Id$
// $Date$
// $Revision$

#include <boost/mpl/aux_/ptr_to_ref.hpp>
#include <boost/mpl/aux_/config/operators.hpp>

#if defined(BOOST_MPL_CFG_USE_OPERATORS_OVERLOADING)

#   include <boost/mpl/aux_/static_cast.hpp>

#   define BOOST_MPL_AUX_OVERLOAD_VALUE_BY_KEY  operator/
#   define BOOST_MPL_AUX_OVERLOAD_ITEM_BY_ORDER operator|
#   define BOOST_MPL_AUX_OVERLOAD_ORDER_BY_KEY  operator||
#   define BOOST_MPL_AUX_OVERLOAD_IS_MASKED     operator%

#   define BOOST_MPL_AUX_OVERLOAD_CALL_VALUE_BY_KEY(T, x)   BOOST_MPL_AUX_PTR_TO_REF(T) / x
#   define BOOST_MPL_AUX_OVERLOAD_CALL_ITEM_BY_ORDER(T, x)  BOOST_MPL_AUX_PTR_TO_REF(T) | x
#   define BOOST_MPL_AUX_OVERLOAD_CALL_ORDER_BY_KEY(T, x)   BOOST_MPL_AUX_PTR_TO_REF(T) || x
#   define BOOST_MPL_AUX_OVERLOAD_CALL_IS_MASKED(T, x)      BOOST_MPL_AUX_PTR_TO_REF(T) % x

#else

#   define BOOST_MPL_AUX_OVERLOAD_VALUE_BY_KEY  value_by_key_
#   define BOOST_MPL_AUX_OVERLOAD_ITEM_BY_ORDER item_by_order_
#   define BOOST_MPL_AUX_OVERLOAD_ORDER_BY_KEY  order_by_key_
#   define BOOST_MPL_AUX_OVERLOAD_IS_MASKED     is_masked_

#   define BOOST_MPL_AUX_OVERLOAD_CALL_VALUE_BY_KEY(T, x)   T::BOOST_MPL_AUX_OVERLOAD_VALUE_BY_KEY( BOOST_MPL_AUX_PTR_TO_REF(T), x )
#   define BOOST_MPL_AUX_OVERLOAD_CALL_ITEM_BY_ORDER(T, x)  T::BOOST_MPL_AUX_OVERLOAD_ITEM_BY_ORDER( BOOST_MPL_AUX_PTR_TO_REF(T), x )
#   define BOOST_MPL_AUX_OVERLOAD_CALL_ORDER_BY_KEY(T, x)   T::BOOST_MPL_AUX_OVERLOAD_ORDER_BY_KEY( BOOST_MPL_AUX_PTR_TO_REF(T), x )
#   define BOOST_MPL_AUX_OVERLOAD_CALL_IS_MASKED(T, x)      T::BOOST_MPL_AUX_OVERLOAD_IS_MASKED( BOOST_MPL_AUX_PTR_TO_REF(T), x )

#endif

#endif // BOOST_MPL_AUX_OVERLOAD_NAMES_HPP_INCLUDED

/* overload_names.hpp
OOHqmaYQK6Vhv5DRxGm4H9SMHqZSorxMCqa6phqwF9BrRKzPxJRPOk+utUQMHWSqV1IBFDI0jVIh001eLQ9DRaIfLMy6oJcxbUpGEsPHjsf40VaS4sPZWDLbOXxN8YVjnFLF5hfvGno/znogRfqYOSpaEy1Xk2iMYQaHdUI7rbV+zqKGsFQWKcFPwtLaijNxdA2BsUPCZFDpKI28mLUTPDI1McK0kUz5zMijTGWGMw5Gxu4KPY+9x5EwOWaWGQY7eJyJhLC+R0CZy0HwdT2oW59ZCdFSpUxN5j8pHW1YUtmTTZ8o5jSuN7jrgKGeLLZurWcvz8ZLHdExXkPVsbjwpDU4IGOYapx4yIym0R+vgYycMNlh0r7csUlkPxi4f7SG4hw6PAaFVdKkFvLhMjLOUHZKJx+iUA5T6AYil6ef/OSiMDqWIyO7GwkzI511jo1IzPGLqR6zplMlyDEH/yC+yVrHqJrqMuOb5Fai3LDwslSgM0wlidP2JRPmLkx/sGRR3NilPJtRq//0eY5cSaKwbbBSxSu++vizZ1SwG/50+eKG/fl81H/HWRiZk6xoJMwyT3uxbAMPhO3jFVhfHYgMG6B4OConjoyJV0dTXB5+zIkTLt762WHUT78GFYeLV20cLrNXH8LH0lAyn7NZlKK+mGPkn7Y3StdGSgX8+CeWxLE7wzewVwm/SZ6QQLdrRwf2xFu0WU4IcJ0IHwqudLc0QIvvSaVQFCgFH0V8zIdHmX6IhkGTT/35D0XRADw8T0rwd3xIXAAQ/W9//hn9TwkMvV7a/rf4R/sfjvQ/9dO+/n////hTyk7+L3G6Z5/0Bjbh9fYPdHMt9TqKmKx1VIXL6Rg5rj/g72enHkDbqdvZqbVDt18xY4DW7x0U2EksjcfaHRlnCMcosZ+w/GwZruLUMiz0OgMZuRIVtl9/+hyrlMbHyHRHNkyYqEjVSjZPFa/bEwOZAiEVYx4KYgjjelisIF/Oislex+ar8SUt9g/KhI9LRkUU4bEqygmT0pvwmHx1my9SIt+5wKu7boYeuf4mNSMOjQQ7W6Io3k7DYQ3Hx8QQfqwc9ig0I2KUalwgDo2XwEwPV0kihpDLJ46ODNIYcgnC5ROrPjJeoa8n05aGU5jhJZ3C4HqGZEvykzE8jCC2n0aFYLnLcWEbS44xYJrBaOdcJ3IaGeEEcg8Cx77XHrXTaDKuNmOz68qswMkA4esygk2SGIerWcRAOko0rrbbODrkYEuf8Z+yObh2Csm9HUXhtzPj40B1scXFqqVPM1ZJTEROX7QjfjtHdzLKmsKy1+AyEGzi4iSaaDL3g30DMffJRGGHI8Egth+JW6zdjmLLvTEcKcpQ3mYRuj50Arx79AkODcKkiRPLEvXfADL8SJwgGAQMn0wSsNFhYjmM0US2LFYWi+SYMJRKTBuHAFx+J//gkOLmge1LBngUFCQKKWZWxBB2ffDDo654thJTi+LUU8tzhZiijNtLrO0Hwo+Ux6mLB5SsBANWHhMji8JMQlrF15CGQ2Qlzle1qwitjNRKDGf2YkNGxQZpguHOhRBKRqmoBEpORcDnSDlTicy8oJSw79SUhpJAOoTqoF/fqThKBmkIPgEl8jwQrxPVkQoFGDPXTu1hBwNYtz1gbuP8zHDl70FjSS/lNYkGf+Lwls3Zz5mGBgR1JusZy4+hoYwVh0vUspbNDeeVMcooRkamBcMnpwzaVTJCQ4YON/2Q0KAevkSOAU1WkBLjIlhSPJIc0deVSaw9SdHqiYODAvy9+4h9e3XEdAgNY3KHfoILEiXfZJFiM19nyF2V4hDvULZfHOAfEsoOG58zKV3lhjjwc+IgXGIc8JhCMWHO+T54bHk=
*/