// Copyright David Abrahams, Daniel Wallin 2003.
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_PARAMETER_REQUIRED_HPP
#define BOOST_PARAMETER_REQUIRED_HPP

#include <boost/parameter/aux_/use_default.hpp>

namespace boost { namespace parameter {

    // This metafunction can be used to describe the treatment of particular
    // named parameters for the purposes of overload elimination with SFINAE,
    // by placing specializations in the parameters<...> list.  In order for
    // a treated function to participate in overload resolution:
    //
    //   - all keyword tags wrapped in required<...> must have a matching
    //     actual argument
    //
    //   - The actual argument type matched by every keyword tag
    //     associated with a predicate must satisfy that predicate
    template <
        typename Tag
      , typename Predicate = ::boost::parameter::aux::use_default
    >
    struct required
    {
        typedef Tag key_type;
        typedef Predicate predicate;
    };
}}

#include <boost/parameter/config.hpp>

#if defined(BOOST_PARAMETER_CAN_USE_MP11)
#include <boost/mp11/integral.hpp>
#else
#include <boost/mpl/bool.hpp>
#endif

namespace boost { namespace parameter { namespace aux {

    template <typename T>
    struct is_required
#if defined(BOOST_PARAMETER_CAN_USE_MP11)
      : ::boost::mp11::mp_false
#else
      : ::boost::mpl::false_
#endif
    {
    };

    template <typename Tag, typename Predicate>
    struct is_required< ::boost::parameter::required<Tag,Predicate> >
#if defined(BOOST_PARAMETER_CAN_USE_MP11)
      : ::boost::mp11::mp_true
#else
      : ::boost::mpl::true_
#endif
    {
    };
}}} // namespace boost::parameter::aux

#endif  // include guard


/* required.hpp
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
*/