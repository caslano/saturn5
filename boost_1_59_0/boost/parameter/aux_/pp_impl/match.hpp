// Copyright Daniel Wallin 2006.
// Copyright Cromwell D. Enage 2017.
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_PARAMETER_AUX_PP_IMPL_MATCH_HPP
#define BOOST_PARAMETER_AUX_PP_IMPL_MATCH_HPP

#include <boost/parameter/config.hpp>

#if defined(BOOST_PARAMETER_HAS_PERFECT_FORWARDING)

namespace boost { namespace parameter { namespace aux {

    // Recast the ParameterSpec's nested match metafunction
    // as a free metafunction.
    //
    // No more limits set by BOOST_PARAMETER_MAX_ARITY. -- Cromwell D. Enage
    template <typename Parameters, typename ...Args>
    struct match : Parameters::BOOST_NESTED_TEMPLATE match<Args...>
    {
    };
}}} // namespace boost::parameter::aux

#else

#include <boost/parameter/aux_/void.hpp>
#include <boost/preprocessor/facilities/intercept.hpp>
#include <boost/preprocessor/repetition/enum_params.hpp>
#include <boost/preprocessor/repetition/enum_trailing_binary_params.hpp>

namespace boost { namespace parameter { namespace aux {

    // Recast the ParameterSpec's nested match metafunction
    // as a free metafunction.
    template <
        typename Parameters
        BOOST_PP_ENUM_TRAILING_BINARY_PARAMS(
            BOOST_PARAMETER_MAX_ARITY
          , typename A
          , = ::boost::parameter::void_ BOOST_PP_INTERCEPT
        )
    >
    struct match
      : Parameters::BOOST_NESTED_TEMPLATE match<
            BOOST_PP_ENUM_PARAMS(BOOST_PARAMETER_MAX_ARITY, A)
        >
    {
    };
}}} // namespace boost::parameter::aux

#endif  // BOOST_PARAMETER_HAS_PERFECT_FORWARDING
#endif  // include guard


/* match.hpp
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
*/