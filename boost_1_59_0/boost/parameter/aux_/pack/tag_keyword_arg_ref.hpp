// Copyright David Abrahams, Daniel Wallin 2003.
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_PARAMETER_AUX_PACK_TAG_KEYWORD_ARG_REF_HPP
#define BOOST_PARAMETER_AUX_PACK_TAG_KEYWORD_ARG_REF_HPP

#include <boost/parameter/aux_/unwrap_cv_reference.hpp>
#include <boost/parameter/aux_/tagged_argument.hpp>
#include <boost/parameter/config.hpp>

namespace boost { namespace parameter { namespace aux { 

    template <
        typename Keyword
      , typename ActualArg
#if BOOST_WORKAROUND(BOOST_BORLANDC, BOOST_TESTED_AT(0x564))
      , typename = typename ::boost::parameter::aux
        ::is_cv_reference_wrapper<ActualArg>::type
#endif
    >
    struct tag_ref
    {
        typedef ::boost::parameter::aux::tagged_argument<
            Keyword
          , typename ::boost::parameter::aux
            ::unwrap_cv_reference<ActualArg>::type
        > type;
    };
}}} // namespace boost::parameter::aux_

#if BOOST_WORKAROUND(BOOST_BORLANDC, BOOST_TESTED_AT(0x564))

#include <boost/mpl/bool.hpp>

namespace boost { namespace parameter { namespace aux { 

    template <typename Keyword, typename ActualArg>
    struct tag_ref<Keyword,ActualArg,::boost::mpl::false_>
    {
        typedef ::boost::parameter::aux
        ::tagged_argument<Keyword,ActualArg> type;
    };
}}} // namespace boost::parameter::aux_

#endif  // Borland workarounds needed.

namespace boost { namespace parameter { namespace aux {

    struct tag_keyword_arg_ref
    {
        template <typename K, typename T>
        struct apply
        {
            typedef typename ::boost::parameter::aux::tag_ref<K,T>::type type;
        };

#if defined(BOOST_PARAMETER_CAN_USE_MP11)
        template <typename K, typename T>
        using fn = typename ::boost::parameter::aux::tag_ref<K,T>::type;
#endif
    };
}}} // namespace boost::parameter::aux

#endif  // include guard


/* tag_keyword_arg_ref.hpp
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
*/