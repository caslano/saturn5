// Copyright Daniel Wallin 2006.
// Copyright Cromwell D. Enage 2017.
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_PARAMETER_AUX_PREPROCESSOR_QUALIFIER_HPP
#define BOOST_PARAMETER_AUX_PREPROCESSOR_QUALIFIER_HPP

#define BOOST_PARAMETER_QUALIFIER_EAT_in(x)
#define BOOST_PARAMETER_QUALIFIER_EAT_out(x)
#define BOOST_PARAMETER_QUALIFIER_EAT_in_out(x)
#define BOOST_PARAMETER_QUALIFIER_EAT_consume(x)
#define BOOST_PARAMETER_QUALIFIER_EAT_move_from(x)
#define BOOST_PARAMETER_QUALIFIER_EAT_forward(x)

#define BOOST_PARAMETER_GET_QUALIFIER_in(x) in_reference
#define BOOST_PARAMETER_GET_QUALIFIER_out(x) out_reference
#define BOOST_PARAMETER_GET_QUALIFIER_in_out(x) in_out_reference
#define BOOST_PARAMETER_GET_QUALIFIER_consume(x) consume_reference
#define BOOST_PARAMETER_GET_QUALIFIER_move_from(x) move_from_reference
#define BOOST_PARAMETER_GET_QUALIFIER_forward(x) forward_reference

#define BOOST_PARAMETER_STRIP_QUALIFIER_in(x) x
#define BOOST_PARAMETER_STRIP_QUALIFIER_out(x) x
#define BOOST_PARAMETER_STRIP_QUALIFIER_in_out(x) x
#define BOOST_PARAMETER_STRIP_QUALIFIER_consume(x) x
#define BOOST_PARAMETER_STRIP_QUALIFIER_move_from(x) x
#define BOOST_PARAMETER_STRIP_QUALIFIER_forward(x) x

#include <boost/preprocessor/cat.hpp>

#define BOOST_PARAMETER_GET_QUALIFIER_GET(x) \
    BOOST_PP_CAT(BOOST_PARAMETER_GET_QUALIFIER_, x)
/**/

#define BOOST_PARAMETER_GET_UNQUALIFIED(x) \
    BOOST_PP_CAT(BOOST_PARAMETER_STRIP_QUALIFIER_, x)
/**/

#include <boost/preprocessor/facilities/is_empty.hpp>

// Expands to 1 if x is either "in(k)", "out(k)", "in_out(k)", "consume(k)",
// "move_from(k)", or "forward(k)"; expands to 0 otherwise.
#define BOOST_PARAMETER_IS_QUALIFIER(x) \
    BOOST_PP_IS_EMPTY(BOOST_PP_CAT(BOOST_PARAMETER_QUALIFIER_EAT_, x))
/**/

#include <boost/preprocessor/control/iif.hpp>

// Expands to the qualifier of x,
// where x is either a keyword qualifier or a keyword.
//
//   k => forward_reference
//   in(k) => in_reference
//   out(k) => out_reference
//   in_out(k) => in_out_reference
//   forward(k) => forward_reference
//   consume(k) => consume_reference
//   move_from(k) => move_from_reference
#define BOOST_PARAMETER_GET_QUALIFIER(x) \
    BOOST_PP_IIF( \
        BOOST_PARAMETER_IS_QUALIFIER(x) \
      , BOOST_PARAMETER_GET_QUALIFIER_GET(x) \
      , forward_reference \
    )
/**/

// Expands to the unqualified version of x,
// where x is either a keyword qualifier or a keyword.
//
//   k => k
//   in(k) => k
//   out(k) => k
//   in_out(k) => k
//   forward(k) => k
//   consume(k) => k
//   move_from(k) => k
#define BOOST_PARAMETER_UNQUALIFIED(x) \
    BOOST_PP_IIF( \
        BOOST_PARAMETER_IS_QUALIFIER(x) \
      , BOOST_PARAMETER_GET_UNQUALIFIED(x) \
      , x \
    )
/**/

#endif  // include guard


/* qualifier.hpp
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
*/