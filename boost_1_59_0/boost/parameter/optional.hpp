// Copyright David Abrahams, Daniel Wallin 2003.
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_PARAMETER_OPTIONAL_HPP
#define BOOST_PARAMETER_OPTIONAL_HPP

#include <boost/parameter/aux_/use_default.hpp>

namespace boost { namespace parameter {

    // This metafunction can be used to describe the treatment of particular
    // named parameters for the purposes of overload elimination with SFINAE,
    // by placing specializations in the parameters<...> list.  In order for
    // a treated function to participate in overload resolution:
    //
    //   - The actual argument type matched by every keyword tag
    //     associated with a predicate must satisfy that predicate
    //
    //   - If a keyword k is specified without an optional<...> or
    //     required<...> wrapper, it is treated as though
    //     optional<k> were specified.
    template <
        typename Tag
      , typename Predicate = ::boost::parameter::aux::use_default
    >
    struct optional
    {
        typedef Tag key_type;
        typedef Predicate predicate;
    };
}}

#include <boost/parameter/config.hpp>

#if defined(BOOST_PARAMETER_CAN_USE_MP11)
#include <boost/mp11/integral.hpp>
#else
#include <boost/mpl/bool.hpp>
#endif

namespace boost { namespace parameter { namespace aux {

    template <typename T>
    struct is_optional
#if defined(BOOST_PARAMETER_CAN_USE_MP11)
      : ::boost::mp11::mp_false
#else
      : ::boost::mpl::false_
#endif
    {
    };

    template <typename Tag, typename Predicate>
    struct is_optional< ::boost::parameter::optional<Tag,Predicate> >
#if defined(BOOST_PARAMETER_CAN_USE_MP11)
      : ::boost::mp11::mp_true
#else
      : ::boost::mpl::true_
#endif
    {
    };
}}} // namespace boost::parameter::aux

#endif  // include guard


/* optional.hpp
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
*/