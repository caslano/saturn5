
// Copyright (C) 2009-2012 Lorenzo Caminiti
// Distributed under the Boost Software License, Version 1.0
// (see accompanying file LICENSE_1_0.txt or a copy at
// http://www.boost.org/LICENSE_1_0.txt)
// Home at http://www.boost.org/libs/functional/overloaded_function

#if !BOOST_PP_IS_ITERATING
#   ifndef BOOST_FUNCTIONAL_OVERLOADED_FUNCTION_DETAIL_BASE_HPP_
#       define BOOST_FUNCTIONAL_OVERLOADED_FUNCTION_DETAIL_BASE_HPP_

#       include <boost/functional/overloaded_function/config.hpp>
#       include <boost/function.hpp>
#       include <boost/preprocessor/iteration/iterate.hpp>
#       include <boost/preprocessor/repetition/enum.hpp>
#       include <boost/preprocessor/cat.hpp>
#       include <boost/preprocessor/comma_if.hpp>

#define BOOST_FUNCTIONAL_DETAIL_arg_type(z, n, unused) \
    BOOST_PP_CAT(A, n)

#define BOOST_FUNCTIONAL_DETAIL_arg_name(z, n, unused) \
    BOOST_PP_CAT(a, n)

#define BOOST_FUNCTIONAL_DETAIL_arg_tparam(z, n, unused) \
    typename BOOST_FUNCTIONAL_DETAIL_arg_type(z, n, unused)

#define BOOST_FUNCTIONAL_DETAIL_arg(z, n, unused) \
    BOOST_FUNCTIONAL_DETAIL_arg_type(z, n, unused) \
    BOOST_FUNCTIONAL_DETAIL_arg_name(z, n, unused)

#define BOOST_FUNCTIONAL_DETAIL_f \
    R (BOOST_PP_ENUM(BOOST_FUNCTIONAL_DETAIL_arity, \
            BOOST_FUNCTIONAL_DETAIL_arg_type, ~))

// Do not use namespace ::detail because overloaded_function is already a class.
namespace boost { namespace overloaded_function_detail {

template<typename F>
class base {}; // Empty template cannot be used directly (only its spec).

#       define BOOST_PP_ITERATION_PARAMS_1 \
                (3, (0, BOOST_FUNCTIONAL_OVERLOADED_FUNCTION_CONFIG_ARITY_MAX, \
                "boost/functional/overloaded_function/detail/base.hpp"))
#       include BOOST_PP_ITERATE() // Iterate over funciton arity.

} } // namespace

#undef BOOST_FUNCTIONAL_DETAIL_arg_type
#undef BOOST_FUNCTIONAL_DETAIL_arg_name
#undef BOOST_FUNCTIONAL_DETAIL_arg_tparam
#undef BOOST_FUNCTIONAL_DETAIL_arg
#undef BOOST_FUNCTIONAL_DETAIL_f

#   endif // #include guard

#elif BOOST_PP_ITERATION_DEPTH() == 1
#   define BOOST_FUNCTIONAL_DETAIL_arity BOOST_PP_FRAME_ITERATION(1)

template<
    typename R
    BOOST_PP_COMMA_IF(BOOST_FUNCTIONAL_DETAIL_arity)
    BOOST_PP_ENUM(BOOST_FUNCTIONAL_DETAIL_arity,
            BOOST_FUNCTIONAL_DETAIL_arg_tparam, ~)
>
class base< BOOST_FUNCTIONAL_DETAIL_f > {
public:
    /* implicit */ inline base(
            // This requires specified type to be implicitly convertible to
            // a boost::function<> functor.
            boost::function< BOOST_FUNCTIONAL_DETAIL_f > const& f): f_(f)
    {}

    inline R operator()(BOOST_PP_ENUM(BOOST_FUNCTIONAL_DETAIL_arity,
            BOOST_FUNCTIONAL_DETAIL_arg, ~)) const {
        return f_(BOOST_PP_ENUM(BOOST_FUNCTIONAL_DETAIL_arity,
                BOOST_FUNCTIONAL_DETAIL_arg_name, ~));
    }

private:
    boost::function< BOOST_FUNCTIONAL_DETAIL_f > const f_;
};

#   undef BOOST_FUNCTIONAL_DETAIL_arity
#endif // iteration


/* base.hpp
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
*/