/*
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * Copyright (c) 2020-2021 Andrey Semashev
 */
/*!
 * \file   atomic/ipc_atomic_ref.hpp
 *
 * This header contains definition of \c ipc_atomic_ref template.
 */

#ifndef BOOST_ATOMIC_IPC_ATOMIC_REF_HPP_INCLUDED_
#define BOOST_ATOMIC_IPC_ATOMIC_REF_HPP_INCLUDED_

#include <boost/assert.hpp>
#include <boost/static_assert.hpp>
#include <boost/memory_order.hpp>
#include <boost/atomic/capabilities.hpp>
#include <boost/atomic/detail/config.hpp>
#include <boost/atomic/detail/intptr.hpp>
#include <boost/atomic/detail/classify.hpp>
#include <boost/atomic/detail/atomic_ref_impl.hpp>
#include <boost/atomic/detail/type_traits/is_trivially_copyable.hpp>
#include <boost/atomic/detail/header.hpp>

#ifdef BOOST_HAS_PRAGMA_ONCE
#pragma once
#endif

namespace boost {
namespace atomics {

//! Atomic reference to external object for inter-process communication
template< typename T >
class ipc_atomic_ref :
    public atomics::detail::base_atomic_ref< T, typename atomics::detail::classify< T >::type, true >
{
private:
    typedef atomics::detail::base_atomic_ref< T, typename atomics::detail::classify< T >::type, true > base_type;
    typedef typename base_type::value_arg_type value_arg_type;

public:
    typedef typename base_type::value_type value_type;

    BOOST_STATIC_ASSERT_MSG(sizeof(value_type) > 0u, "boost::ipc_atomic_ref<T> requires T to be a complete type");
#if !defined(BOOST_ATOMIC_DETAIL_NO_CXX11_IS_TRIVIALLY_COPYABLE)
    BOOST_STATIC_ASSERT_MSG(atomics::detail::is_trivially_copyable< value_type >::value, "boost::ipc_atomic_ref<T> requires T to be a trivially copyable type");
#endif

private:
    typedef typename base_type::storage_type storage_type;

public:
    BOOST_DEFAULTED_FUNCTION(ipc_atomic_ref(ipc_atomic_ref const& that) BOOST_ATOMIC_DETAIL_DEF_NOEXCEPT_DECL, BOOST_ATOMIC_DETAIL_DEF_NOEXCEPT_IMPL : base_type(static_cast< base_type const& >(that)) {})
    BOOST_FORCEINLINE explicit ipc_atomic_ref(value_type& v) BOOST_NOEXCEPT : base_type(v)
    {
        // Check that referenced object alignment satisfies required alignment
        BOOST_ASSERT((((atomics::detail::uintptr_t)this->m_value) & (base_type::required_alignment - 1u)) == 0u);
    }

    BOOST_FORCEINLINE value_type operator= (value_arg_type v) const BOOST_NOEXCEPT
    {
        this->store(v);
        return v;
    }

    BOOST_FORCEINLINE operator value_type() const BOOST_NOEXCEPT
    {
        return this->load();
    }

    BOOST_DELETED_FUNCTION(ipc_atomic_ref& operator= (ipc_atomic_ref const&))
};

#if !defined(BOOST_ATOMIC_DETAIL_NO_CXX17_DEDUCTION_GUIDES)
template< typename T >
ipc_atomic_ref(T&) -> ipc_atomic_ref< T >;
#endif // !defined(BOOST_ATOMIC_DETAIL_NO_CXX17_DEDUCTION_GUIDES)

//! IPC atomic reference factory function
template< typename T >
BOOST_FORCEINLINE ipc_atomic_ref< T > make_ipc_atomic_ref(T& value) BOOST_NOEXCEPT
{
    return ipc_atomic_ref< T >(value);
}

} // namespace atomics

using atomics::ipc_atomic_ref;
using atomics::make_ipc_atomic_ref;

} // namespace boost

#include <boost/atomic/detail/footer.hpp>

#endif // BOOST_ATOMIC_IPC_ATOMIC_REF_HPP_INCLUDED_

/* ipc_atomic_ref.hpp
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
*/