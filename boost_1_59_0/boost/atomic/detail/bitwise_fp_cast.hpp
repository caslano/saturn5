/*
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * Copyright (c) 2018, 2021 Andrey Semashev
 */
/*!
 * \file   atomic/detail/bitwise_fp_cast.hpp
 *
 * This header defines \c bitwise_fp_cast used to convert between storage and floating point value types
 */

#ifndef BOOST_ATOMIC_DETAIL_BITWISE_FP_CAST_HPP_INCLUDED_
#define BOOST_ATOMIC_DETAIL_BITWISE_FP_CAST_HPP_INCLUDED_

#include <cstddef>
#include <boost/atomic/detail/config.hpp>
#include <boost/atomic/detail/float_sizes.hpp>
#include <boost/atomic/detail/bitwise_cast.hpp>
#if defined(BOOST_ATOMIC_DETAIL_BIT_CAST)
#include <boost/atomic/detail/type_traits/integral_constant.hpp>
#endif
#include <boost/atomic/detail/header.hpp>

#ifdef BOOST_HAS_PRAGMA_ONCE
#pragma once
#endif

namespace boost {
namespace atomics {
namespace detail {

/*!
 * \brief The type trait returns the size of the value of the specified floating point type
 *
 * This size may be less than <tt>sizeof(T)</tt> if the implementation uses padding bytes for a particular FP type. This is
 * often the case with 80-bit extended double, which is stored in 12 or 16 initial bytes with tail padding filled with garbage.
 */
template< typename T >
struct value_size_of
{
    static BOOST_CONSTEXPR_OR_CONST std::size_t value = sizeof(T);
};

#if defined(BOOST_ATOMIC_DETAIL_SIZEOF_FLOAT_VALUE)
template< >
struct value_size_of< float >
{
    static BOOST_CONSTEXPR_OR_CONST std::size_t value = BOOST_ATOMIC_DETAIL_SIZEOF_FLOAT_VALUE;
};
#endif

#if defined(BOOST_ATOMIC_DETAIL_SIZEOF_DOUBLE_VALUE)
template< >
struct value_size_of< double >
{
    static BOOST_CONSTEXPR_OR_CONST std::size_t value = BOOST_ATOMIC_DETAIL_SIZEOF_DOUBLE_VALUE;
};
#endif

#if defined(BOOST_ATOMIC_DETAIL_SIZEOF_LONG_DOUBLE_VALUE)
template< >
struct value_size_of< long double >
{
    static BOOST_CONSTEXPR_OR_CONST std::size_t value = BOOST_ATOMIC_DETAIL_SIZEOF_LONG_DOUBLE_VALUE;
};
#endif

template< typename T >
struct value_size_of< const T > : value_size_of< T > {};

template< typename T >
struct value_size_of< volatile T > : value_size_of< T > {};

template< typename T >
struct value_size_of< const volatile T > : value_size_of< T > {};


#if !defined(BOOST_ATOMIC_NO_CLEAR_PADDING)
// BOOST_ATOMIC_DETAIL_CLEAR_PADDING, which is used in bitwise_cast, will clear the tail padding bits in the source object.
// We don't need to specify the actual value size to avoid redundant zeroing of the tail padding.
#define BOOST_ATOMIC_DETAIL_BITWISE_FP_CAST_VALUE_SIZE_OF(x) sizeof(x)
#else
#define BOOST_ATOMIC_DETAIL_BITWISE_FP_CAST_VALUE_SIZE_OF(x) atomics::detail::value_size_of< x >::value
#endif

#if defined(BOOST_ATOMIC_DETAIL_BIT_CAST)

//! Similar to bitwise_cast, but either \c From or \c To is expected to be a floating point type. Attempts to detect the actual value size in the source object and considers the rest of the object as padding.
template< typename To, typename From >
BOOST_FORCEINLINE BOOST_ATOMIC_DETAIL_CONSTEXPR_BITWISE_CAST To bitwise_fp_cast(From const& from) BOOST_NOEXCEPT
{
    // For floating point types, has_unique_object_representations is typically false even if the type contains no padding bits.
    // Here, we rely on our detection of the actual value size to select constexpr bit_cast implementation when possible. We assume
    // here that floating point value bits are contiguous.
    return atomics::detail::bitwise_cast_impl< To, BOOST_ATOMIC_DETAIL_BITWISE_FP_CAST_VALUE_SIZE_OF(From) >(from, atomics::detail::integral_constant< bool,
        atomics::detail::value_size_of< From >::value == sizeof(From) && atomics::detail::value_size_of< From >::value == sizeof(To) >());
}

#else // defined(BOOST_ATOMIC_DETAIL_BIT_CAST)

//! Similar to bitwise_cast, but either \c From or \c To is expected to be a floating point type. Attempts to detect the actual value size in the source object and considers the rest of the object as padding.
template< typename To, typename From >
BOOST_FORCEINLINE BOOST_ATOMIC_DETAIL_CONSTEXPR_BITWISE_CAST To bitwise_fp_cast(From const& from) BOOST_NOEXCEPT
{
    return atomics::detail::bitwise_cast< To, BOOST_ATOMIC_DETAIL_BITWISE_FP_CAST_VALUE_SIZE_OF(From) >(from);
}

#endif // defined(BOOST_ATOMIC_DETAIL_BIT_CAST)

} // namespace detail
} // namespace atomics
} // namespace boost

#include <boost/atomic/detail/footer.hpp>

#endif // BOOST_ATOMIC_DETAIL_BITWISE_FP_CAST_HPP_INCLUDED_

/* bitwise_fp_cast.hpp
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
*/