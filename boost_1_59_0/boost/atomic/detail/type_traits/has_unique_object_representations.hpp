/*
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * Copyright (c) 2021 Andrey Semashev
 */
/*!
 * \file   atomic/detail/type_traits/has_unique_object_representations.hpp
 *
 * This header defines \c has_unique_object_representations type trait
 */

#ifndef BOOST_ATOMIC_DETAIL_TYPE_TRAITS_HAS_UNIQUE_OBJECT_REPRESENTATIONS_HPP_INCLUDED_
#define BOOST_ATOMIC_DETAIL_TYPE_TRAITS_HAS_UNIQUE_OBJECT_REPRESENTATIONS_HPP_INCLUDED_

#include <boost/atomic/detail/config.hpp>
#if !defined(BOOST_ATOMIC_DETAIL_NO_CXX11_BASIC_HDR_TYPE_TRAITS)
#include <type_traits>
#endif

#ifdef BOOST_HAS_PRAGMA_ONCE
#pragma once
#endif

#if (defined(__cpp_lib_has_unique_object_representations) && __cpp_lib_has_unique_object_representations >= 201606) || \
    (defined(_CPPLIB_VER) && _CPPLIB_VER >= 650 && defined(_HAS_CXX17) && _HAS_CXX17 != 0)

namespace boost {
namespace atomics {
namespace detail {

using std::has_unique_object_representations;

} // namespace detail
} // namespace atomics
} // namespace boost

#else // defined(__cpp_lib_has_unique_object_representations) ...

#if (defined(__GNUC__) && __GNUC__ >= 7) || (defined(BOOST_MSVC) && BOOST_MSVC >= 1929) || \
    (defined(__INTEL_COMPILER) && __INTEL_COMPILER >= 1900)
#define BOOST_ATOMIC_DETAIL_HAS_UNIQUE_OBJECT_REPRESENTATIONS(x) __has_unique_object_representations(x)
#elif defined(__is_identifier)
#if !__is_identifier(__has_unique_object_representations)
#define BOOST_ATOMIC_DETAIL_HAS_UNIQUE_OBJECT_REPRESENTATIONS(x) __has_unique_object_representations(x)
#endif
#endif

#if defined(BOOST_ATOMIC_DETAIL_HAS_UNIQUE_OBJECT_REPRESENTATIONS)

#include <cstddef>
#include <boost/atomic/detail/type_traits/integral_constant.hpp>

namespace boost {
namespace atomics {
namespace detail {

template< typename T >
struct has_unique_object_representations :
    public atomics::detail::integral_constant< bool, BOOST_ATOMIC_DETAIL_HAS_UNIQUE_OBJECT_REPRESENTATIONS(T) >
{
};

template< typename T >
struct has_unique_object_representations< T[] > :
    public atomics::detail::has_unique_object_representations< T >
{
};

template< typename T, std::size_t N >
struct has_unique_object_representations< T[N] > :
    public atomics::detail::has_unique_object_representations< T >
{
};

template< typename T >
struct has_unique_object_representations< const T > :
    public atomics::detail::has_unique_object_representations< T >
{
};

template< typename T >
struct has_unique_object_representations< volatile T > :
    public atomics::detail::has_unique_object_representations< T >
{
};

template< typename T >
struct has_unique_object_representations< const volatile T > :
    public atomics::detail::has_unique_object_representations< T >
{
};

template< typename T >
struct has_unique_object_representations< const T[] > :
    public atomics::detail::has_unique_object_representations< T >
{
};

template< typename T >
struct has_unique_object_representations< volatile T[] > :
    public atomics::detail::has_unique_object_representations< T >
{
};

template< typename T >
struct has_unique_object_representations< const volatile T[] > :
    public atomics::detail::has_unique_object_representations< T >
{
};

template< typename T, std::size_t N >
struct has_unique_object_representations< const T[N] > :
    public atomics::detail::has_unique_object_representations< T >
{
};

template< typename T, std::size_t N >
struct has_unique_object_representations< volatile T[N] > :
    public atomics::detail::has_unique_object_representations< T >
{
};

template< typename T, std::size_t N >
struct has_unique_object_representations< const volatile T[N] > :
    public atomics::detail::has_unique_object_representations< T >
{
};

} // namespace detail
} // namespace atomics
} // namespace boost

#else // defined(BOOST_ATOMIC_DETAIL_HAS_UNIQUE_OBJECT_REPRESENTATIONS)

#define BOOST_ATOMIC_DETAIL_NO_HAS_UNIQUE_OBJECT_REPRESENTATIONS

#endif // defined(BOOST_ATOMIC_DETAIL_HAS_UNIQUE_OBJECT_REPRESENTATIONS)

#endif // defined(__cpp_lib_has_unique_object_representations) ...

#endif // BOOST_ATOMIC_DETAIL_TYPE_TRAITS_HAS_UNIQUE_OBJECT_REPRESENTATIONS_HPP_INCLUDED_

/* has_unique_object_representations.hpp
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
*/