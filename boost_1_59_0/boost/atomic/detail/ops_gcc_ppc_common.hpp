/*
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * Copyright (c) 2009 Helge Bahmann
 * Copyright (c) 2013 Tim Blechmann
 * Copyright (c) 2014 Andrey Semashev
 */
/*!
 * \file   atomic/detail/ops_gcc_ppc_common.hpp
 *
 * This header contains basic utilities for gcc PowerPC backend.
 */

#ifndef BOOST_ATOMIC_DETAIL_OPS_GCC_PPC_COMMON_HPP_INCLUDED_
#define BOOST_ATOMIC_DETAIL_OPS_GCC_PPC_COMMON_HPP_INCLUDED_

#include <boost/memory_order.hpp>
#include <boost/atomic/detail/config.hpp>
#include <boost/atomic/detail/header.hpp>

#ifdef BOOST_HAS_PRAGMA_ONCE
#pragma once
#endif

namespace boost {
namespace atomics {
namespace detail {

// The implementation below uses information from this document:
// http://www.rdrop.com/users/paulmck/scalability/paper/N2745r.2010.02.19a.html

// A note about memory_order_consume. Technically, this architecture allows to avoid
// unnecessary memory barrier after consume load since it supports data dependency ordering.
// However, some compiler optimizations may break a seemingly valid code relying on data
// dependency tracking by injecting bogus branches to aid out of order execution.
// This may happen not only in Boost.Atomic code but also in user's code, which we have no
// control of. See this thread: http://lists.boost.org/Archives/boost/2014/06/213890.php.
// For this reason we promote memory_order_consume to memory_order_acquire.

struct core_arch_operations_gcc_ppc_base
{
    static BOOST_CONSTEXPR_OR_CONST bool full_cas_based = false;
    static BOOST_CONSTEXPR_OR_CONST bool is_always_lock_free = true;

    static BOOST_FORCEINLINE void fence_before(memory_order order) BOOST_NOEXCEPT
    {
#if defined(__powerpc64__) || defined(__PPC64__)
        if (order == memory_order_seq_cst)
            __asm__ __volatile__ ("sync" ::: "memory");
        else if ((static_cast< unsigned int >(order) & static_cast< unsigned int >(memory_order_release)) != 0u)
            __asm__ __volatile__ ("lwsync" ::: "memory");
#else
        if ((static_cast< unsigned int >(order) & static_cast< unsigned int >(memory_order_release)) != 0u)
            __asm__ __volatile__ ("sync" ::: "memory");
#endif
    }

    static BOOST_FORCEINLINE void fence_after(memory_order order) BOOST_NOEXCEPT
    {
        if ((static_cast< unsigned int >(order) & (static_cast< unsigned int >(memory_order_consume) | static_cast< unsigned int >(memory_order_acquire))) != 0u)
            __asm__ __volatile__ ("isync" ::: "memory");
    }
};

} // namespace detail
} // namespace atomics
} // namespace boost

#include <boost/atomic/detail/footer.hpp>

#endif // BOOST_ATOMIC_DETAIL_OPS_GCC_PPC_COMMON_HPP_INCLUDED_

/* ops_gcc_ppc_common.hpp
x5ru1rQRT4k6zQGR39bwiQVxyy0AdOCerwxZO3EBLMSOdSd3gC9Ae6h5u9V1fM97t/b0Q03OFahMO1Fsq286CW0AaYCC89oisiFCJ0KgLChifIazuwJ752vAJ6C/4zH6ufpBOYzQkk5Zy7jwwY6GtkI1W0q6f2uSbsDhNDoBO0PYZrdK711RVFD41lq7OPVymQcc55ExfU1Vphk/hs2gTpdsfehbxmBas7GEvuREvOqPDUSIgJjh96oDn8pPlmeavVjTYLZjVFUknBMVnZoZSiIxprQSj8jlpZHuM/3SmrvbdVY/R7q52HLdh/LBVL4OrFFcO+k/NHGGWrIbxisPeWkZwilPpz7gw9Hbjpa1E4X6JDZzwgR/QAjQHLCMUPnakDGwSyDYhmMJWIeyYz0VAsReAs7Z1uPr2/Dq4tYgB93F+8HI+/jocVnz779quyNOmIKMVD+Kt1ycXBxY0b6xQB7/XD4+la0cd6Zg+gr2VOGg+acLx/nsAZT6lq1pVvnN1ZAW/rDFSTwUAIreC5qrQ9QXYAI0B6MDiw/yxvrsMcgSOAxQB2cDBKZ+Zcft7NcHeiKu6SUiK8EwYQqZOZSCc+AuHBw0Y273aFeXHYpPwpG1h7Vtrc3NwyP5p/CfrKUBPSAe4HyM9PrxUFnXBIIsqoEW4MfQN5A+3n47hdyDmmj1r03TwOdeGtwH+AZoRBcy/6RV5GbGLZ+T2D9ASxOUeDAwh9SetPwlseuWO0wvWhjod11g82wSGDw80v6ppbqrnLYiJN9vz3sQQ2ghrXxHFyIZxJx/eGFSooOqGfWGf4CbGTQrfAKCFDzmJEqOCwPq/JNNOgqe38D2o9nNZYVkfoeIntT5gMGsxO/1uLNXh7CoLe2VGnGZ3MMcE2ZxU2abe9U6e9XOzYeuzYdyzbZEeu5gerPRDDaKaW75w3B71f2WEGJVMZj2XHSv6W3l09pE0r4rps1MmuntVTO4alk0f5PsDsPVOm42AkKncFn6fSNwDYx7DTFbxDwMGfkjeHQnWH4eYW4OmKjw5RXcLU8BXMOe5abCgQ+SQsH9dcMXE9GFmtO1mnHEsUQ9AKrreE22xJgI+ZgIZOw6D7YhVKcqwAeYCGBJPoZA7Jhu4nhrIxj4FcAKGAXMwxPxjizAd0qxc5wJFxk9Vk6YHKL7YD65B3c00TVUirrfH+oviN4WHFltvnOV6zeVxKSg10EV+cih/Mk2Xwv5OfOq/0RLLNrqENWdeg+A7/R6Q3bucYHYgrTNXW+u39mYfpc9Pw9CWzIvn/YIjEvEOsMVaFWxyCW1WOMD1DlYVHzbj1NxsMhrgWZnKnjlOJp1JDh82/woAbWlcUQ47DXWoJx74FwvPNqGvNM69RScnnZvp0a8c1aOS50tL1C0m3dEyn3TsYHOj2av28Gw44rLn+6ifU/MDb/IyzmkyqnwOUzNaDP9TK9oGyHsbuPIYht9ViQDeQfBPkBktFOtGOz+Q7jLeQ5sm4qpoqVt3DXSVOs7hbCkLty91q6VIRmzKBYJWOrUSZ3BN87JSDK8BU2LaiPquMWFX0q+0JQkDqnlcqy+X9abjxaaY0+rsSOTvX7jvGtrbrC+gc3/hYUlnY1tk3Q+AlbcVaxbtWYwQqv97SrFll3+XaMVIklFBAcbvrCEHJ11xCVOlbL0OweYG5yJ7Bh++yFtGcYPcE2ItrcSMhQKC1JJ7rNNRzgfMRW9kpUWt5ajlxYa75uwFDNktBt0+Rqv1gpDPoqhnZHqmm/UzeUIliHn8bKV4jEbyXR/RFLFpfsk5f6eJ3d9CLZ9T5WgQHCCUGYjbpLQjs1tKM/31WOxaWvGGHRvkQJ+VYKC+xAK4SPKUFDfw26yqpFx/TBK1iLzm+M7tSaGU77kA1tSqiKr/GjV8uhC7m0y6zQdnaUmsvZ6F4siOVrCYreh6fpzr+HWScgh172NZKummNaNZK+CbZYWuW6iIqn7a6V8E58iGDvZRV7xxal6hYTB8KjLbhKsRnEGRy4n789y92ofSr/vsWi15MhVPF8reilX6Ls+BhbXFKUl76R8+0ZLDf1+wXF9w6sMN3Xk/HZ2NNN69ZT9tJzVYiTTYnPy/G2x1/bZ2wUvp9VF4FSco0+zn4+Qvi/9B30Wp6HFvbDtMzdwOOjkrZS+onJCFg5sgZg5SIaKtXlSNY7ZcjrLCxxUga6jSj+fiBFa2wu4pda36EhOniiS/f0KWiWJucW9U6qe/Kyu43MfjpyLMOu+6bMNKK8Am8oUHRpgW1NaIidsrEM+aEzHQxqu7qMdoNU4fH1f7cAefNjnWXK1B+68ZJfrsVlmO2CfqCHmPTMzN5s0S45xNt2h/RNcy+2qvlN1Tr/u+RL6OIUNPbXP5gDm9cS4S1fE26+bhfJaJVTxvFP+BW+f9vi6qRbe+9KkLGCx3C99SG+BPGoNcs8sNPracRPAv2Hsg05nEldWFIZvhV+cMYTL8+79QCe6XDrUCY/fYrL8muzClOiRmudX7cXo2cKDTvObfXEVK+MOF5z9/QQRrWliBX7YuOlC8Y2nqrCZ4RRNvQr9Z0LtAkZ0M3tTF1dnMyM7OBDlYGwNx8JExET0QvDxMYqCFK5WDvZiRq5mRFRiPCxMTNzMLCxczKxsHCxs9EzslExMlNS/RXNwJqIiEgZlYUakZOng6uBi6eBIJKrKRiRvZGJl/8JTM8o7mP6RFTMTExcTOzMXKys7Fz0T229ZKTk7mLqZmIHy+teszEEF/JGVgMA/68v8R31VrbzNiFhYGFUcHFyJXuQqjNL25g5Ev9oEosV0+CRE2CQ42MQ5JETFhdk42MVE2Fi5OTiYRTi5WSUkRJhFBIj4OMXFJNi42ZlF2ZmF2YVZhcXExTiZmUS5WZmYOMWEWZgE9BjVvBzNGDVVzMwZNXSYiViImPUY5czsLVwtibi4QFX7vUcBoAcIQAaFEM9AAN8LC8IOACAQBQAEFwO9jwAgxFsAENoKAIS9AAARIAFApFIA8BU/AIjyGQBEwwe9ewAgBhLoPQAAc3lA7z7g38bMxdXI2dXT2cwcjo2Zk4kDjpxcXFGCXElMgp6ZgROOfGNzbAruT92kZGRh5kLE+qtPfrVE1MjVyNbB4o9OZf2TDTi42YM6k1HWytRFh/0lze/N/5XLH0nY/0gi7Owq4uCp89LprExEbNx6oEzsXc3sXV2IOH4VKm9mamX0L1GUjJxBMX6vlYqZi4Obswmolpx/1PKlwD/K4/ijvN+7noWTiVHCytbVzJlRwhZkZmJmJg6mZn8Mh+eiXQKvfbcQgphipcc45AbCs2kWRUEJXqc8DuXp4ydHDShb8iAIKc/hsW+HdstvDT/Fzd7plsc6TkIo371F60EvWLoSEg9LdAAHLPjT8zG3/4zAU1mNAG2XJupRICtxmdUUH27rCnZVvIV20GxYXD3zmH28f+j9Gf3CNAo8BJNtU4PzffKe1rasaKUhxWnc2fDPQ2CvlpWLMBXzzfzrCFn0ewWUvrpc6gtycqocttd8hjbFHilVDMpCY180U9OtemGJJ9/zT9CcyIjodNBhCjOU6Oh+C5QOYYM/gBuCYO2hoi9/hBPx9Iq2luTwGGtsGvAs4u+7aRxZPiaI3tkzWGWNiztj11+tmF9p7/e69CEQRFR1Vvo3I+L8o0PFPV0lVV1BXQiiJVWZQSFoAro6u4E6U0DgZY6aqJq56jCCDIxRzczTlVHaDjQ0Ir8h0d+QtB6jpqKxtZmJKyi1tB0TEdfLQL6k/0d5XH+U99t0+i06o6qbsesL/ysbRhErVxclM2dRBztHB/sXA+ECGZOtg7Oqo5GJGaOYmbuViZmKpMg/Bl5MVO23Yf+HURARsXBzMGpYmYJoViZGKTMrC0tXkMH9YRbP889rgFcyEtISoIn5MmFBwfMSQBQAAwUFDQUJAw0NDQsLA4eAjogAD4/wGhUNGR0fh5AAHwcPj4iMgZKIhI4UD4+Kk5qOiZmNjY2Qkpufi4WPgZWN5SUTICwsLAI8AjYiIjYLMR4xy//289wJQIEBMAMIwIEkADAUIDgK8LkHgPGrqn95YEBi9Ff/KgW8SIF/K0X5d+kiAAEcCCoFHAUgCMjq/JMq4Hnh3wyG+79yFMwvDydohWdl4/yPHAU7kYYVKF8Pl391Ey8PFzMzCzcr9z8z+t93E8xM/+ImmJn/zU1w/9NLiImxinMKs7NwSHBxghwEO7c4O7u4OMg9cDJxg/wG94uXEOXkYGITZ+bgZmID+Qd2DhE2EQ4mMWERLlAMbi7u/9JLsLH9B14CsAoAgjGB3myQlzACACGR/quVH9RBbP+TFn5uEPzbwi/p7ODm+LIg/FpNGGV/Q6qMas5G9i6OLx7AxOu3Qn7FBC02f3UVv2X6/7+rYOP+71xFXfJX+yUmhLdZQifZJg2iMirJVPrRdp3vIBEOJz+F51IlYu7dE8pQp5Kzizu4oYr9tD17vv10vZChp4R8vfA0m9Ty6AP2fDCj8BVI7aJ+7aj0Jif/yZQNPkoKb3fiM0svnlm2WwHOfoocEIPS3I0k+G4mdpotUoqB3QNOGdurpHZPiDvx54SyycFW+4TKFE1BDNdRQ0DiK4qM0Y95KjVTP564JlYs5va8dHeamilvTop8qKtMIh/boRRfsxoiJrFCr+O0uhXDSmj3kFvA4kBb/+DKEaKhFV+DYCWt9Fex+6waRU2ta+0exW2eU91xMM2xv3D8ucrNedWyWDpVHYntqB871zjTlcfm3f7IspVLQPre74VxQylmQcYlVMlJwmZSoTr8YJhWzzXtUMEDgPsa5l1lKMzyppDNthC6JX+Dfbtw1zfrhc6hLSnMhXpau8pGyqrIA44raVQ0ReXafLPg5k3QTWVr+8g2tkngY1m1Sq/wcP7D/jm7H/zndtWWqjkTVMF1fupm98dvCio+G18s1iwfe4dgPwzpGFctWZzUbXe0eFXyI79aDzfI7JDdj6fj6lVKPMmV+hmba2mCFk8pHE/z04ea+yKNO9zdd92k1fzSaIwg91XhQXokNPTZRmf7zTF+ipDE3P9zNygBMm2QSIL5H67t/6Fj/H3VsWMmYv79M9UOtFT8vizZsRIxs/xOshExs/5OshMxs/0X/lTEyMXspXqMcqqKcsratMLOVka28mogd+liAoptZO/6onXRYeb4bVqL24PM38reglHaFDSxrFy96KUYFYzszECN+6c7fplXTIxqDm/srV7mChHzn6bbS25/VIT7/5JjZ2dl+4dj5/6HYwdRqvJGLjZEzOy/9c+fvPwxAOmXtwCY/ubt/o/4+F/umRJACQ4AfdOjgHzni299DXLPQAD4n30rBBQYODRIRfoKAAYGBoQA+6cWCAYAh4BEQUVnFoZCI2ZV/uWFX1wCGADkhW9uTy5Wt7xadPn9kueSvPOW12kNTAcu3Bu976krKK4km7rU2wcTfhw5Xl2r6svvx7mElvkl0aXKkrw8pk9G4Tqm+9Xq5SU+tZCBO0EsAUzdZdVuWrQab9oWwTpdOj8IvjeaXeApTSn5snIENORekzedlTcVAz1So/3ACx9SP/lE5APBRDILk8DbtoT2wkHoq6xBVNaqTt+VgVVV05C7sa1I2SU926hjjPTT7HuWtPrmBYxlWu514WszRju3atpGdZeukMNRl/QdFBQUphZEhZkGHcr+EjIGYUK9lMuws8dzCiyj4sX6A9OfV6ZhA6QH1e3x7YLtYl2H7Lzq322zCErjmyD83DUmsfpvBjK8RxiOy47Bf9Bfq4om4pdu0Zwd+rBWaBV8n2nr9O1tH7J0Fq1LD9PnjzN3O2BraW5oRH7fsCCPJOVeE1/SX3U4crkqfyn2j+dvvmn+/Jnw/6rxsnFx/43x/n9krzgAABj4X78SIYDgkGAv35RkIIMFgoNDgAP/YrAgezUiZmYVJmHJ+ReLvXh4+SOGEUF9I1v55jWFTLE7XB7Z4BuGr2qm74cXP7p+vXnto6rwXmBT0dJqCiKzfaNKM58YlgiTCJhoGqgZCCWdCDQHICSxHZX1Ygzu73SgKSwuK+tmlvtkbc3U1aNjUZZk7tzyNJ6NlvO5lGShD35gJQCYrgkhpMMApDtP2MrKeoleP+2cW+noRAmxPo5tTdfWowtZ3GcNfDNnp2k8Gyrnc/4U9ysZt8hC2taQm/fGPwl+B+vhCzOeOHtSuHf4LukwXXnhujtgLJ/X57g704a3z0vi8L5s9lM3nonZiUBPPzrN/4alDkkwg9/7OUy/6+JvVDBZCv0h2Khg9G9gxn7wVo+WukKXZU9LvrfTbLLm70yQ+f+SCbJycv7PMcHXAAA48K8mCDJJiJclk/DXkvkXLRAMBZUYnNkITVn4r8Z3ltc3RsQ8KFF2bZIYq3OopcBsxblQGAOrk/8baDP3YsY4iefhaeRLJZAPNWDpVOuWOLm1kH5L+Tp7WGHmQ5dSXfWOdvLlnXhHO/EWOwg8/VtSKmdHN4uC5sozAGGIQXOxo2tChv96qJfqZoke+/PNErZTJwAUTzF5emvv8Fd4khtAXTyYfzMlKhqX4CxJa+Vty3WLReZcn5b3Ivg6tGiwxIOU9BkAEWpjKyVR3xNKa+vU/9I08L8zCZb/Wy6VheV/8qoE9rIqQb/oyF8BQIsSGPQf6l/7VlRiZicINHQWVmHlIJK/WsYPsUVYgTQ2p7r8LNlMNEuyO1kCttpYiHRyRRxtISaydZpjnn6AoXRg2b4BDqSDys9x2ua0viBJtYOObGJQWA1BhKdaPvCqXKPw1ZuzFlMMX4UFSAPceq0UnVTska9mM5YvyHTOsvlTHifFI8UjpR8Rz1M2TzZPkaTlAt/KRLWne2z8DCglOyglIiilVN1I8wLaGdEcx4GpYm8mQde9qd6ZDhGtKfKMbxCqm4jbo4ibkJvCu4lqr7Y809MjXKrPFJ8Cf+Zmf7QH34gKtmpEjiareujv5NaC+nQbF+hclaFQxH6KnwEjMeQGKZEmDb6ca8YTnCebH3SsPFWg9sbINR6puoJEl3TfmLwLjZmhy9UQ4rQTdj0QvVglX9WI21Iffd5ZGyuMA408h5A+YRHlfAE/R2vY1D2UPPY1IowsDgvOK81xUzZipZy/Ow1gZv2/dp7zP8hzYr186f31IAUK+LJoEbwC/rZqAf60aIGjQEBCoTP/i8M8OX46WQMAYMi6tPi3Wq0V/Dv4TFYUzas4HkLnks+s7CV1MhtvkhZK5evaRGyGuGobSMvGsH8TnKPTvKGCn+EpgHgvy2KDObtBaVBM3VOMsD24LuCxbdu2bVv/2LZt27Zt27Zt4xtba9bKPth9cqVNe/Imb9L2Piqnhqn6atG87W9mT3Uto6NtsZYXzlVUFgyNMhXAnZnQyy1Yws3vKgHTNzyWiEx/XywhANSHn0P2S1oC9u96zc+a3LebEFQy1PttZ+Y3/6WlB7G6OjMR7vzp3cnbOf+Fu6QZcV0f5/ab2R6zU9Nvms5th7lheA0eReUDY2diqNExL4zbXZpYa8ygxZS6JcoWPkgWn1ojR0XtLqcb7IyXLqwo1bOLKbN4MUykNEzB8fA4VXcU2wek3J1YiqougBgrRme4CTfnZcA4lKnUrQvilFEaJR0fZ285+qQrKX77rQIlUN70wChTJjxcILJNxI5G
*/