/*
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * Copyright (c) 2018 Andrey Semashev
 */
/*!
 * \file   atomic/detail/float_sizes.hpp
 *
 * This header defines macros for testing buitin floating point type sizes
 */

#ifndef BOOST_ATOMIC_DETAIL_FLOAT_SIZES_HPP_INCLUDED_
#define BOOST_ATOMIC_DETAIL_FLOAT_SIZES_HPP_INCLUDED_

#include <float.h>
#include <boost/atomic/detail/config.hpp>

#ifdef BOOST_HAS_PRAGMA_ONCE
#pragma once
#endif

// Detect value sizes of the different floating point types. The value sizes may be less than the corresponding type sizes
// if the type contains padding bits. This is typical e.g. with 80-bit extended float types, which are often represented as 128-bit types.
// See: https://en.wikipedia.org/wiki/IEEE_754
// For Intel x87 extended double see: https://en.wikipedia.org/wiki/Extended_precision#x86_Architecture_Extended_Precision_Format
// For IBM extended double (a.k.a. double-double) see: https://en.wikipedia.org/wiki/Long_double#Implementations, https://gcc.gnu.org/wiki/Ieee128PowerPC
#if (FLT_RADIX+0) == 2

#if ((FLT_MANT_DIG+0) == 11) && ((FLT_MAX_EXP+0) == 16) // IEEE 754 binary16
#define BOOST_ATOMIC_DETAIL_SIZEOF_FLOAT_VALUE 2
#elif ((FLT_MANT_DIG+0) == 24) && ((FLT_MAX_EXP+0) == 128) // IEEE 754 binary32
#define BOOST_ATOMIC_DETAIL_SIZEOF_FLOAT_VALUE 4
#elif ((FLT_MANT_DIG+0) == 53) && ((FLT_MAX_EXP+0) == 1024) // IEEE 754 binary64
#define BOOST_ATOMIC_DETAIL_SIZEOF_FLOAT_VALUE 8
#elif ((FLT_MANT_DIG+0) == 64) && ((FLT_MAX_EXP+0) == 16384) // x87 extended double
#define BOOST_ATOMIC_DETAIL_SIZEOF_FLOAT_VALUE 10
#elif ((FLT_MANT_DIG+0) == 106) && ((FLT_MAX_EXP+0) == 1024) // IBM extended double
#define BOOST_ATOMIC_DETAIL_SIZEOF_FLOAT_VALUE 16
#elif ((FLT_MANT_DIG+0) == 113) && ((FLT_MAX_EXP+0) == 16384) // IEEE 754 binary128
#define BOOST_ATOMIC_DETAIL_SIZEOF_FLOAT_VALUE 16
#elif ((FLT_MANT_DIG+0) == 237) && ((FLT_MAX_EXP+0) == 262144) // IEEE 754 binary256
#define BOOST_ATOMIC_DETAIL_SIZEOF_FLOAT_VALUE 32
#endif

#if ((DBL_MANT_DIG+0) == 11) && ((DBL_MAX_EXP+0) == 16) // IEEE 754 binary16
#define BOOST_ATOMIC_DETAIL_SIZEOF_DOUBLE_VALUE 2
#elif ((DBL_MANT_DIG+0) == 24) && ((DBL_MAX_EXP+0) == 128) // IEEE 754 binary32
#define BOOST_ATOMIC_DETAIL_SIZEOF_DOUBLE_VALUE 4
#elif ((DBL_MANT_DIG+0) == 53) && ((DBL_MAX_EXP+0) == 1024) // IEEE 754 binary64
#define BOOST_ATOMIC_DETAIL_SIZEOF_DOUBLE_VALUE 8
#elif ((DBL_MANT_DIG+0) == 64) && ((DBL_MAX_EXP+0) == 16384) // x87 extended double
#define BOOST_ATOMIC_DETAIL_SIZEOF_DOUBLE_VALUE 10
#elif ((DBL_MANT_DIG+0) == 106) && ((DBL_MAX_EXP+0) == 1024) // IBM extended double
#define BOOST_ATOMIC_DETAIL_SIZEOF_DOUBLE_VALUE 16
#elif ((DBL_MANT_DIG+0) == 113) && ((DBL_MAX_EXP+0) == 16384) // IEEE 754 binary128
#define BOOST_ATOMIC_DETAIL_SIZEOF_DOUBLE_VALUE 16
#elif ((DBL_MANT_DIG+0) == 237) && ((DBL_MAX_EXP+0) == 262144) // IEEE 754 binary256
#define BOOST_ATOMIC_DETAIL_SIZEOF_DOUBLE_VALUE 32
#endif

#if ((LDBL_MANT_DIG+0) == 11) && ((LDBL_MAX_EXP+0) == 16) // IEEE 754 binary16
#define BOOST_ATOMIC_DETAIL_SIZEOF_LONG_DOUBLE_VALUE 2
#elif ((LDBL_MANT_DIG+0) == 24) && ((LDBL_MAX_EXP+0) == 128) // IEEE 754 binary32
#define BOOST_ATOMIC_DETAIL_SIZEOF_LONG_DOUBLE_VALUE 4
#elif ((LDBL_MANT_DIG+0) == 53) && ((LDBL_MAX_EXP+0) == 1024) // IEEE 754 binary64
#define BOOST_ATOMIC_DETAIL_SIZEOF_LONG_DOUBLE_VALUE 8
#elif ((LDBL_MANT_DIG+0) == 64) && ((LDBL_MAX_EXP+0) == 16384) // x87 extended double
#define BOOST_ATOMIC_DETAIL_SIZEOF_LONG_DOUBLE_VALUE 10
#elif ((LDBL_MANT_DIG+0) == 106) && ((LDBL_MAX_EXP+0) == 1024) // IBM extended double
#define BOOST_ATOMIC_DETAIL_SIZEOF_LONG_DOUBLE_VALUE 16
#elif ((LDBL_MANT_DIG+0) == 113) && ((LDBL_MAX_EXP+0) == 16384) // IEEE 754 binary128
#define BOOST_ATOMIC_DETAIL_SIZEOF_LONG_DOUBLE_VALUE 16
#elif ((LDBL_MANT_DIG+0) == 237) && ((LDBL_MAX_EXP+0) == 262144) // IEEE 754 binary256
#define BOOST_ATOMIC_DETAIL_SIZEOF_LONG_DOUBLE_VALUE 32
#endif

#elif (FLT_RADIX+0) == 10

#if ((FLT_MANT_DIG+0) == 7) && ((FLT_MAX_EXP+0) == 97) // IEEE 754 decimal32
#define BOOST_ATOMIC_DETAIL_SIZEOF_FLOAT_VALUE 4
#elif ((FLT_MANT_DIG+0) == 16) && ((FLT_MAX_EXP+0) == 385) // IEEE 754 decimal64
#define BOOST_ATOMIC_DETAIL_SIZEOF_FLOAT_VALUE 8
#elif ((FLT_MANT_DIG+0) == 34) && ((FLT_MAX_EXP+0) == 6145) // IEEE 754 decimal128
#define BOOST_ATOMIC_DETAIL_SIZEOF_FLOAT_VALUE 16
#endif

#if ((DBL_MANT_DIG+0) == 7) && ((DBL_MAX_EXP+0) == 97) // IEEE 754 decimal32
#define BOOST_ATOMIC_DETAIL_SIZEOF_DOUBLE_VALUE 4
#elif ((DBL_MANT_DIG+0) == 16) && ((DBL_MAX_EXP+0) == 385) // IEEE 754 decimal64
#define BOOST_ATOMIC_DETAIL_SIZEOF_DOUBLE_VALUE 8
#elif ((DBL_MANT_DIG+0) == 34) && ((DBL_MAX_EXP+0) == 6145) // IEEE 754 decimal128
#define BOOST_ATOMIC_DETAIL_SIZEOF_DOUBLE_VALUE 16
#endif

#if ((LDBL_MANT_DIG+0) == 7) && ((LDBL_MAX_EXP+0) == 97) // IEEE 754 decimal32
#define BOOST_ATOMIC_DETAIL_SIZEOF_LONG_DOUBLE_VALUE 4
#elif ((LDBL_MANT_DIG+0) == 16) && ((LDBL_MAX_EXP+0) == 385) // IEEE 754 decimal64
#define BOOST_ATOMIC_DETAIL_SIZEOF_LONG_DOUBLE_VALUE 8
#elif ((LDBL_MANT_DIG+0) == 34) && ((LDBL_MAX_EXP+0) == 6145) // IEEE 754 decimal128
#define BOOST_ATOMIC_DETAIL_SIZEOF_LONG_DOUBLE_VALUE 16
#endif

#endif

// GCC and compatible compilers define internal macros with builtin type traits
#if defined(__SIZEOF_FLOAT__)
#define BOOST_ATOMIC_DETAIL_SIZEOF_FLOAT __SIZEOF_FLOAT__
#endif
#if defined(__SIZEOF_DOUBLE__)
#define BOOST_ATOMIC_DETAIL_SIZEOF_DOUBLE __SIZEOF_DOUBLE__
#endif
#if defined(__SIZEOF_LONG_DOUBLE__)
#define BOOST_ATOMIC_DETAIL_SIZEOF_LONG_DOUBLE __SIZEOF_LONG_DOUBLE__
#endif

#if !defined(BOOST_ATOMIC_DETAIL_SIZEOF_FLOAT) || !defined(BOOST_ATOMIC_DETAIL_SIZEOF_DOUBLE) || !defined(BOOST_ATOMIC_DETAIL_SIZEOF_LONG_DOUBLE)

#define BOOST_ATOMIC_DETAIL_ALIGN_SIZE_TO_POWER_OF_2(x)\
    ((x) == 1u ? 1u : ((x) == 2u ? 2u : ((x) <= 4u ? 4u : ((x) <= 8u ? 8u : ((x) <= 16u ? 16u : ((x) <= 32u ? 32u : (x)))))))

// Make our best guess. These sizes may not be accurate, but they are good enough to estimate the size of the storage required to hold these types.
#if !defined(BOOST_ATOMIC_DETAIL_SIZEOF_FLOAT) && defined(BOOST_ATOMIC_DETAIL_SIZEOF_FLOAT_VALUE)
#define BOOST_ATOMIC_DETAIL_SIZEOF_FLOAT BOOST_ATOMIC_DETAIL_ALIGN_SIZE_TO_POWER_OF_2(BOOST_ATOMIC_DETAIL_SIZEOF_FLOAT_VALUE)
#endif
#if !defined(BOOST_ATOMIC_DETAIL_SIZEOF_DOUBLE) && defined(BOOST_ATOMIC_DETAIL_SIZEOF_DOUBLE_VALUE)
#define BOOST_ATOMIC_DETAIL_SIZEOF_DOUBLE BOOST_ATOMIC_DETAIL_ALIGN_SIZE_TO_POWER_OF_2(BOOST_ATOMIC_DETAIL_SIZEOF_DOUBLE_VALUE)
#endif
#if !defined(BOOST_ATOMIC_DETAIL_SIZEOF_LONG_DOUBLE) && defined(BOOST_ATOMIC_DETAIL_SIZEOF_LONG_DOUBLE_VALUE)
#define BOOST_ATOMIC_DETAIL_SIZEOF_LONG_DOUBLE BOOST_ATOMIC_DETAIL_ALIGN_SIZE_TO_POWER_OF_2(BOOST_ATOMIC_DETAIL_SIZEOF_LONG_DOUBLE_VALUE)
#endif

#endif // !defined(BOOST_ATOMIC_DETAIL_SIZEOF_FLOAT) || !defined(BOOST_ATOMIC_DETAIL_SIZEOF_DOUBLE) || !defined(BOOST_ATOMIC_DETAIL_SIZEOF_LONG_DOUBLE)

#if !defined(BOOST_ATOMIC_DETAIL_SIZEOF_FLOAT_VALUE) || !defined(BOOST_ATOMIC_DETAIL_SIZEOF_FLOAT) ||\
    !defined(BOOST_ATOMIC_DETAIL_SIZEOF_DOUBLE_VALUE) || !defined(BOOST_ATOMIC_DETAIL_SIZEOF_DOUBLE) ||\
    !defined(BOOST_ATOMIC_DETAIL_SIZEOF_LONG_DOUBLE_VALUE) || !defined(BOOST_ATOMIC_DETAIL_SIZEOF_LONG_DOUBLE)
#error Boost.Atomic: Failed to determine builtin floating point type sizes, the target platform is not supported. Please, report to the developers (patches are welcome).
#endif

#endif // BOOST_ATOMIC_DETAIL_FLOAT_SIZES_HPP_INCLUDED_

/* float_sizes.hpp
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
*/