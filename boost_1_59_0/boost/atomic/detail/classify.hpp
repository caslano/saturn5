/*
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * Copyright (c) 2020-2021 Andrey Semashev
 */
/*!
 * \file   atomic/detail/classify.hpp
 *
 * This header contains type traits for type classification.
 */

#ifndef BOOST_ATOMIC_DETAIL_CLASSIFY_HPP_INCLUDED_
#define BOOST_ATOMIC_DETAIL_CLASSIFY_HPP_INCLUDED_

#include <boost/atomic/detail/config.hpp>
#include <boost/atomic/detail/type_traits/is_enum.hpp>
#include <boost/atomic/detail/type_traits/is_integral.hpp>
#include <boost/atomic/detail/type_traits/is_function.hpp>
#include <boost/atomic/detail/type_traits/is_floating_point.hpp>
#include <boost/atomic/detail/header.hpp>

#ifdef BOOST_HAS_PRAGMA_ONCE
#pragma once
#endif

namespace boost {
namespace atomics {
namespace detail {

template< typename T, bool IsFunction = atomics::detail::is_function< T >::value >
struct classify_pointer
{
    typedef void* type;
};

template< typename T >
struct classify_pointer< T, true >
{
    typedef void type;
};

template<
    typename T,
    bool IsInt = atomics::detail::is_integral< T >::value,
    bool IsFloat = atomics::detail::is_floating_point< T >::value,
    bool IsEnum = atomics::detail::is_enum< T >::value
>
struct classify
{
    typedef void type;
};

template< typename T >
struct classify< T, true, false, false > { typedef int type; };

#if !defined(BOOST_ATOMIC_NO_FLOATING_POINT)
template< typename T >
struct classify< T, false, true, false > { typedef float type; };
#endif

template< typename T >
struct classify< T, false, false, true > { typedef const int type; };

template< typename T >
struct classify< T*, false, false, false > { typedef typename classify_pointer< T >::type type; };

template< >
struct classify< void*, false, false, false > { typedef void type; };

template< >
struct classify< const void*, false, false, false > { typedef void type; };

template< >
struct classify< volatile void*, false, false, false > { typedef void type; };

template< >
struct classify< const volatile void*, false, false, false > { typedef void type; };

template< typename T, typename U >
struct classify< T U::*, false, false, false > { typedef void type; };

} // namespace detail
} // namespace atomics
} // namespace boost

#include <boost/atomic/detail/footer.hpp>

#endif // BOOST_ATOMIC_DETAIL_CLASSIFY_HPP_INCLUDED_

/* classify.hpp
RtktsM+UNmmLbiPMoTjipTjilHhCNPN3lUPwXAExBdIGM+cGM9AGM94GM8bGk3QlsVBjsU8jsUBjsW8jcZ9zXod0nvnwDrhhvPGEmzH5IOJAK2Jh5DB+IgloIsm3GV+AfGnR5rB+GJkhOJkiJNwrBUlg9KRaJ02TdCVjoSFqIQrwv+lAW/Ejf4EbLVLzC9YbiIqcxHVmztIbgSY+sGOmPSGPXKQu1twjqpeulm3SZtodF3Q1dkSEPhphKXY0ZKDkfnRqggcQ6yD81aEoUpqWoizYqSw1yJ5Uh57UlZ7Ujp7PUQMmlNQHYF+PeGbD+zZnyUv2qyhKaf69dg2/qgqkd3Jfs5qq1Iw5GA2M3k9YPgvJ4SePczww6jJ+yWEQ9gu8UuoylOMimFjTN+x4dkwblpYQlpkzNKfCXg69wC36Y4PjAu6Azi3w3RfBArg3ljQkgsaZ0zDHGU7jQutaU9JZm/n2lVNe2E/cdD7Rc3wZN5qE9zW2YO4gKnNqDgJ13U4r0n3vqpfoNoK2X1c3eFI8quKaYXtqkFPBcLLq2gInnUS9ECMnf9zTEVo1Lvz5TtXrUQ6vcHdcykWDiuxKW5Ul6awD6E/TH87MphRZDrMTpjYIrmHoju6zb8/q0KherWe2zpK9y3RLhrSpFDp28CiYKrz3VBSiA7zwYJob8tYD3PhgGhsqzyONk0lYO3vmpKvv630y1BBjbiH1/CtekinuYq7AfOcQYCWIapgeLBeuhk4CMNUMxP/aP3yro/SYeQJzpI24GousJXRU9HsInmLNWLpaD7BZBzWI82RPryw+2NkNuO5TpoACYAoteGaWH++vx1cNsvZi9FtBTYffwbaxl8WsE9dgDcgLSZ0EaiH7yoCqV9oVG7264cwYShGqaXxUUrUw7DQaKy79sT7XarkJ5/6jXWAsClHIw2phVZ0mXUeAN7jG8ayKL56rjEJQK/UplzFpX95/0ciBiKe1WTW0DejVCxPJdf/m7zzEfDG/lc7L/kLoVFzrWqFLu1Pzs1E+xP83z+aH6Rp3D3SLT0Ff3jfllHYhdI+1v0dWn+Vl4bf2NfwI9ELpIuwbVPgfHGVghSojJ9Tp6w+ccUM5CuLk96TPhVZ7bA6WsdOBwje1z/O3iFauFoKWoZZsLIFeyqbJVshWydaIy/gTxir5mnkV/enQDlHNJ/5nD07Sba+3ynOCDsEZ2QXxNfFt8V3xJfGFMbtAR8x0zHKcehwKxB3UK3zYJd010VI2LZa8II1Mng+w/Nr+FrYFLUnkYrkx1Box3USsoG+JrP6mGMkCMFiwMFEJiGoHTCEKRSu4+F5x2n92/w0lLRweToKKKDkJXW+z5x7igBooFZmtCxKr/hddvyA6qpde2hBtgjnhYFrYMCLF50/uErpQze6w4tGoF1FeV0I/ykXxBaNldabuT9guIuv/EJ3mvXhfJNfe5/fwjmM/wi9ZwxcfilP0mxOQ3UWloYf1YzZtLpzOC7QH1LwWu8qcukZrbNj3berE/Y7chR97Mn6R6hW4Ufxgc3hb/GIDNFrMoOh9WcyiGLhZ/FiQ/DwXS0+Rnbd3DnVR2yoPfV/rPxnirdY1G6L/g6hTuI3+6LZazK7L5qhFYFWlKOthABS84WEBNLzxTgIUv8qmXafRH3X56bHYvtQjRvGc91qWiOMLCBJc9eogh7SkD+vB/kmPmaSgRi5/oJ/4EuuRfa82bu+Tv3TZbG6v+IWGpOEWSEjuY25wQHgAUl2qTg8oszAsmJSHIzHQok4YGJIdhVxAQ1oubrDXRKpTkCm2IvXOdaimzh9ahpHgAKminwwPzUnqDRsmptCvnO8/vsQiN9ioLq8YuOo4VAaUYgV9jqxZSnY754STAmRTH9QfOmcuGwzOYRsVGsZv/gsBL7qGBwlPsoaHBVu/goj8S15b9g+vvJWUAs+4lZQLYV9VxJaamBH/Ll3tONc9V82SB4aX45WdmrNjfwRmaT908nlAbJlMvbWCQAbt2ENFGw9ljk4ZLXqOjh669xkyFfrwcjcFc+5EIFZjWGyLjInji/mQmYDHrscm3PWhuwjh5lJCI2I7blJukvqy4XeDeFUoXs2eTfGf5L+Ji+3v7RzMi8sU+pyA7rxm5v4GLwwU6NgO5jduuggsaBZTdQxoJdvy5AQeogGoqHxFRlPVbcnhSggFSEnIyXYIFeTsYohYaDltsDxoae3UoQhuTmB88aiRFYbm8fNnhDtrgN4k5WTxFLjlAsJgjAfj6X9gH8mns6MXCITEQqSDqAGpYOfxhVJh6fpia+qZ9iJrBsAxkirlE+ZQNZJMzrxqc3NkJdzhn4nN5W9Wb36LAdThUhgsIGlgg4Yh3XYCiGyEDoJxeORgmgYk87BNDIp0ZJpjw5FSyzFfzA4Eub9gPKKMe1Ie1Lbo8fUozUA68+EbjNzDDgzcpLuwuHW4uLHSyrbuIeLr28Aycua436gZhZhaxJkQ56Y4008OoMHD0L2gKl9Y25BMH+YY5mEtnEzDY+tGeHvj7IRM2wRwiD43k+3LIqOj2Ke9bnNbN31ZrqJOdx/Ct2JLqM27Uw4EDnbXSRZTxX1Gfqe+r+dBHbzk9UW/DUcSN+bb+EU0kXe51tCbDJlK5FGqeCvc3eZSZarqYY60jcSD3I0ckzyX9fCV+ARyol10ZlQWVqZXjlbO0PegDkM9+BV8tXS1foV7vXfNfG12PXVVcSAkEcqUEa8SowzuL0Veh4konYnGaPqplpqrjC+1rU73uN58Rsw2AlPLiSE9YjA97AJ1PvbTUwAGAwipsNxh7LOuzcv+k6yZDgxLD2n6r5OkW68trXfYVA1XVA1ZVEuwzRelmcvINlIyqSnlmZHJ1iaRaEolWRdIsC0SR9bIu3SGyaubpMsbwjMvLBKTG6IzvnaJOF5SnpnEF7uJCaQTk23G+RKLLzSYdkhcrSu536vEoWZVOdZd0To2VrfGQ0xM28OJNlNMS3vDi4vJPNp+1FW93LcPqe10cXorOFOU3SQuY40vU/lqLc6BH1P5/SbRtk42/dLI/XaYKNtgtzrAOfuCyAAemMrLaLaOhZD/WUOPre+A5Kv30483gQZoD497FaWnCiyk0j+EZgLE2nWYwAgK3fjbySCoi24CvttFZLj2n2o9qKb/l5puCS7dQ6I/CpSxEBOEnr1r7jCDdLa/y/8OFoGsaKcfK7I9+V+MSKvCtvZFDOgeve/J9EKyGm5eqmDNcEGU25B7TLALSF7qe2KDEyV+17RDTanG9vrhjGCqw7b61AyQzeM+bV3bjPtjvgYEPtdpoMM3s2/p5UzgX7XpD1onR68ZvTR1QA1Gl25hcq10bwtGuGzQ++48LVFbOm8ZGd9vWuVak1qzWoxaq3KtO9zf4nCsvs6+KHTJdMt0ym8VeuIlU+rrObC+bAhTY7a7XftOzxPuoSrq2v3sd0GgFs0H/Wk2R1NdIWVrM5oUlEi3kZaghFbA0SoLOIqhJQ8moQTEbdW8PLHEX5nrcWvsdee0r9103Jww2D88tdpA849FIVwDiCiJJHvaRzrtLtFlS7jn7SOInWgbuTBnc4vOXhGbgkWxe2W09SaYs1zFl4Eq3WiraoX1XaOR8x2+DqNc+7BHunNlbm9AZlyFr4Bi/F0H2qHYlYbReu11btAdZVm9WdgbpOLJzWAX3+DAORGkbfMEorlxE0j5ts6Z8CfRmFmKdI6Y+bgslnErguCnWLi9pBarPsgBLeJtknlfMVV7KoVCy7NChSfV6mqDOI8DL1c5nwPJcjyqhgJWZBYOJKZemG7SNV0LavVWnlRmUozDWwEw/Rcrs2sqTvi90iDNcOiPXX4G6bK26vm+pOn444bkCuAI/M1bkAgs54NgLKVxJvLIc/Gglh/gn2iS7Pf2KnA1I6CQ+ZFG7qdVtYARs3ES0VLP9yQcnTHuNHFe+tyYYwazHVvMDFiZK/DiNRXQwNXpQfksA0AxgOTTQnOsmKSe1wTeO9xpSjcJj2fPoRs35Khd4XQZ2OOH9umIRjuevMR0+aA1CNBqrOrvJImKuYIGue5dt3gjPUXuEe7In3iTQSDcdBdVwzaEtrFsQmLlzySkHRO9smyZURkuHUa+3LuXbAFiHy4OeOy73LlpN703r1aAMx23gLceOGTe35tc3kG7DG1Z7dIkmQ8nGg/audq9sodcjULaxl74TdU5Z9vRjdAnRu7rsWZ8VHRTdKZtnfjUmpKpxJNZpla3KtFOLfGlN912C9aYTqu7VpnsstqlB+FnBNakrm3cAeaYLqp7K1Mvq7wetgMOlrsncx7NHBR2FbuPUX4oWtDmv+u7S7E3Gn4GrWysCr75nCY36VWuW/MCDWLjQSMzHQ0LuMrYznjO4cdnU+cWDV0UKKdzN49KjnHE1AzX5xq5AsjUjBVt7XCTyEl8zj+Go/9VIuEUAE+bOfEId4NP1Y8UndM+wUU3AitcIGx+QC0zJrdhwBQrr4wUVbARtNp7ca5mfpJo1MpubXfxThPLlivbCtIdaTycOt4vT/O9a7yP6tpNoaleIAhHlBwFBa+U5Kd0jn0FJroEI8lyQv/iWXwheV5bi/ZfJ04JtCueKl9YW47SCBB88g8ieUa1LHGnJbK5HsD2GZvQShjpdJEZELmGpcSrnExw+BKgwNs691NTE4LlUtfOHYn2ikPS9oZMp7dJUGgQ1RPT4UPVg22eAlCe0w4hpFXX9EbEnz3fOhDmATcEtZ9Br6GGHkXBAzLQ9wP+6/09hPGB9zy5wX/mdh1qaL9dMNlVqerT9an25foQf6E4mq2jWBt7w/JYyCnvQvT3eHLv2HkLP5gLelIqpCoda+lrwvNMGPthXlD7bL0abdxku2mfunOuKPoqNZx4ZxAD81zoeP+wkJnR8k0BlbvYxX45vV01YfASaNvp+jw+myjeuZpYuqzs+lyszPk8qZz6stmauQha+dLF9rOZXXxWSrHRmp1kKTkcdqh67hbXKub6kDi+F9B5l1ZJpc3lzzrgvCT6OTwZTND0MS0WnOtynZGtmIXPEV7jWHpcCkQ24MBheCnkOc3cosCMXtCRp3fUR/z+V8EjxbFz962euAE4uDSG3tXEtIgEyPtNuUhhDf42CFthqeJkLixIx+WAkQS8px3RGbEiF4xf80LNrtt2xcDyeA5mRuCvQwfqyPQQyyelN3IrgLDRDPlAmtsicCwHwXB0cFshPd/Xpk8aDZcAyJCNoSlPhae/d7MHXMMr8pZUSoIHxyGBnXkPXfk8ydu0LcYNuaWw/fLB/egJ5k1Wgy9IJ22bhosZCJy4AtoCfZWgQkYPs6Ud72XaBn2QxAm/A1RCh9CXt0nWAlBz5ehi7Iacne5kAbkAreAOXJ5TzlLwHIwgKYElE89iwhUhhWQaqpD9r6Owsfi/iUzk7DA0mfL2Re/+p1wGTaJn4no35YfwDmLEMrhXxNrhHvkOYyNUIlHl8OJudU7Bysisso3a9alkQzjTx0wz99DrgFtdFFwFK8ey99VPXFp3XAcrKBAP8SUDNO9OKJwkBv7izuLK7maJDqohcPM94y7DrxL7Lm8bqSOYhukJQ+TAT7lrUKPPUbXYPtbikg2xnkTLmAYqhXTKhmKNyX1UnvphDckT9InvLdIWZCWvoQ7+UOj0T2Mmk9CGr+s8ezVDePLei5zBD5EVJXdY6rHB2dS33o3fBqoqyJkG561lCeBln+a47i5mmQJpg0nnheaLp1nmD+fJ5sunOIvWi1GLS59bn7pN8rR/6IloN6oVqjOqDDSdKpeTIF3EXc1Jb0nHScNJy8jHOulThaMXsRa3Pj8+fT7xPgU+hYo8NGBb7q4X0/rqQ/1VmVX/VdHBZkoNt1K8SbxZcNxzTMgoTomQhJCInIaciniFeImkh6SLWIRYiFyGXIo8hrgvhS2x8whnscAVJiYUhgyX0yQf5FEQXfYGp/lEmH8bLTWDmdA999lktAq7Zk/muRNd6Bxz8bzFaZUyzLqQbI9XS9VJ1cy133npvfP6c4/lSZvFmnMW/DzSmm9QeZIF3048l65oEN8uZXwarWFg78X6bt8i45z+TPOM78zxLP9W+OXH7Tz3QndBj+FP/fbwvdzJELYOIdfuEugwtS7XhceUaQNVZbNrbqoKy5a7wp/XrtAm37rcetz53ArchdxF8CxtuXCyPIU/RVQlYSpiJGIsVh5VJVUhVylVIVdOyCJz0ZbTcfo0+nB69zNXMnURqUVUKd0onYZlhmWJ7YRtIyeEDkrTo4usikOE7oTtiNmFVbt1u2nTedsZ3gXZVub2cAdt8lUnQCkzz9H8Nve4Pj7cQmh+0jOsHaB2kbpoHvCeeM9sKfSyjtI8YcK2BotKa4ZJwpoM/9OD/WTqtiRXsYN6CC+2YGxCcxVovgRYcYWaDi+3KFwyM515mmusfJAcUUZhJklmoljnidG9xTWwmiwTaXOK4/Op88mtyXPw7tKl1GuUMz1WrXKZdI50qXR+cJF0iXSmdIFynqRKrkyuWr5BuVG+Tr5evq7FPWSNLyHuBtIF+YbeekGtncbfzzXSPdZ7/CrrokbpPrznC7shoht4n3+S3+X42X1ko+gRK3G3lGGt5qOMniEXRR7qPHut7Rvr0WSpgIUxOk3BWnUqiCkdw9p1CqgljcIGTdn/AS1fw0/Ujvo+FXS9dP/d/nSTxbwoi7fTLHupOq7K5d+12r1Ke7Gt22yBKh5aiHpqf7pDzm8WGmxGvdHb/DyembFSR2OJs95GaBEblXm1pEMniA12k96J/wt9fG1pLej4FJcVdRS1FdUUNRU1PvZFvCW8JZwlBPnE+bZSurgJGANsNbVK7Wvt6D1qHWk+SqAHXiVeF173I5Z5jnlIeZbaInwifKh8JHwsffC+lb6Tvpd0kXSUdKJFUd+iFdCF2nr2CoxEY4leYvFWWmjBNuWZyUh+N9CrbGbBSYo/CZ3UCZ3cjdXURdXczgIzoYWQSWQ4dXunYoBdSLIdp2bPd+PciBt84zXJ2EtpztaPWcrNUlR+9VoWbKZ0F7hnHRXLVapmKO0U9+5JjRVxFG0pNbO56gQsqdQTOIh3qS5f+22LZkt9tDQ/Vn309/i+ohzQlWMr4ZFQkfImAk351iMYJoaqnM6W5fBQ8MjgYLUHSGzJb3xQ3DqHD4gqQ5Jefv/wxTtJnawOUIcr4VJtf/05EFxknj6me9p9Zj0HPI0UK7m1PP+59HvaOMacbk7SCL4OdFf7qlYosHY5fg3pbswCDwHWWZWp8vYQzsBbrnnXNep5RbJomrSFXsXOY5etLFEX4yh0sbDOwpTfuK3g0mrjC3QmNItU+7YxUetVc9N7nrq7+ol6qrZXPFm9SD1GXSlfKa7RadBpmLm332q28wBBFJ/I0gOI3X1YEWo1PdnIHakJ1ABvGmoJ28p/GeXimt6jn+W5fwHphn1Jg1g6oWPGLtvZ4zXlRQx/9lKTv0F/UH1IQXkTpItyJrdTomiO8xjaR40xQWkJy4KCUcU53QbwloruzFt9coHZUy6CJffjmrEhEvy3/kBbp2G2GFO0+KTFQZineNa93rbRmgX/RpNUzLfZyrbHsnOhATvK/cLwxGcXkJ2Vt+ea05rNR3WQ/LLaWedJzogOmg9aKAedu9OP6lCJjqWASFAcKhmJginL
*/