/*
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * Copyright (c) 2020 Andrey Semashev
 */
/*!
 * \file   atomic/detail/wait_ops_dragonfly_umtx.hpp
 *
 * This header contains implementation of the waiting/notifying atomic operations based on DragonFly BSD umtx.
 * https://man.dragonflybsd.org/?command=umtx&section=2
 */

#ifndef BOOST_ATOMIC_DETAIL_WAIT_OPS_DRAGONFLY_UMTX_HPP_INCLUDED_
#define BOOST_ATOMIC_DETAIL_WAIT_OPS_DRAGONFLY_UMTX_HPP_INCLUDED_

#include <unistd.h>
#include <boost/memory_order.hpp>
#include <boost/atomic/detail/config.hpp>
#include <boost/atomic/detail/wait_operations_fwd.hpp>
#include <boost/atomic/detail/header.hpp>

#ifdef BOOST_HAS_PRAGMA_ONCE
#pragma once
#endif

namespace boost {
namespace atomics {
namespace detail {

template< typename Base, bool Interprocess >
struct wait_operations< Base, sizeof(int), true, Interprocess > :
    public Base
{
    typedef Base base_type;
    typedef typename base_type::storage_type storage_type;

    static BOOST_CONSTEXPR_OR_CONST bool always_has_native_wait_notify = true;

    static BOOST_FORCEINLINE bool has_native_wait_notify(storage_type const volatile&) BOOST_NOEXCEPT
    {
        return true;
    }

    static BOOST_FORCEINLINE storage_type wait(storage_type const volatile& storage, storage_type old_val, memory_order order) BOOST_NOEXCEPT
    {
        storage_type new_val = base_type::load(storage, order);
        while (new_val == old_val)
        {
            ::umtx_sleep(reinterpret_cast< int* >(const_cast< storage_type* >(&storage)), static_cast< int >(old_val), 0);
            new_val = base_type::load(storage, order);
        }

        return new_val;
    }

    static BOOST_FORCEINLINE void notify_one(storage_type volatile& storage) BOOST_NOEXCEPT
    {
        ::umtx_wakeup(reinterpret_cast< int* >(const_cast< storage_type* >(&storage)), 1);
    }

    static BOOST_FORCEINLINE void notify_all(storage_type volatile& storage) BOOST_NOEXCEPT
    {
        ::umtx_wakeup(reinterpret_cast< int* >(const_cast< storage_type* >(&storage)), 0);
    }
};

} // namespace detail
} // namespace atomics
} // namespace boost

#include <boost/atomic/detail/footer.hpp>

#endif // BOOST_ATOMIC_DETAIL_WAIT_OPS_DRAGONFLY_UMTX_HPP_INCLUDED_

/* wait_ops_dragonfly_umtx.hpp
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
*/