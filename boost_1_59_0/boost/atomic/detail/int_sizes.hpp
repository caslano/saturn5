/*
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * Copyright (c) 2014 Andrey Semashev
 */
/*!
 * \file   atomic/detail/int_sizes.hpp
 *
 * This header defines macros for testing buitin integer type sizes
 */

#ifndef BOOST_ATOMIC_DETAIL_INT_SIZES_HPP_INCLUDED_
#define BOOST_ATOMIC_DETAIL_INT_SIZES_HPP_INCLUDED_

#include <boost/atomic/detail/config.hpp>

#ifdef BOOST_HAS_PRAGMA_ONCE
#pragma once
#endif

// GCC and compatible compilers define internal macros with builtin type traits
#if defined(__SIZEOF_SHORT__)
#define BOOST_ATOMIC_DETAIL_SIZEOF_SHORT __SIZEOF_SHORT__
#endif
#if defined(__SIZEOF_INT__)
#define BOOST_ATOMIC_DETAIL_SIZEOF_INT __SIZEOF_INT__
#endif
#if defined(__SIZEOF_LONG__)
#define BOOST_ATOMIC_DETAIL_SIZEOF_LONG __SIZEOF_LONG__
#endif
#if defined(__SIZEOF_LONG_LONG__)
#define BOOST_ATOMIC_DETAIL_SIZEOF_LLONG __SIZEOF_LONG_LONG__
#endif
#if defined(__SIZEOF_WCHAR_T__)
#define BOOST_ATOMIC_DETAIL_SIZEOF_WCHAR_T __SIZEOF_WCHAR_T__
#endif
#if defined(__SIZEOF_POINTER__)
#define BOOST_ATOMIC_DETAIL_SIZEOF_POINTER __SIZEOF_POINTER__
#elif defined(_MSC_VER)
#if defined(_M_AMD64) || defined(_M_ARM64) || defined(_M_IA64)
#define BOOST_ATOMIC_DETAIL_SIZEOF_POINTER 8
#else
#define BOOST_ATOMIC_DETAIL_SIZEOF_POINTER 4
#endif
#endif

#if !defined(BOOST_ATOMIC_DETAIL_SIZEOF_SHORT) || !defined(BOOST_ATOMIC_DETAIL_SIZEOF_INT) ||\
    !defined(BOOST_ATOMIC_DETAIL_SIZEOF_LONG) || !defined(BOOST_ATOMIC_DETAIL_SIZEOF_LLONG) ||\
    !defined(BOOST_ATOMIC_DETAIL_SIZEOF_POINTER)

// Try to deduce sizes from limits
#include <limits.h>
#if defined(__has_include)
#if __has_include(<stdint.h>)
#include <stdint.h>
#endif
#endif
#include <boost/cstdint.hpp>

#if !defined(BOOST_ATOMIC_DETAIL_SIZEOF_SHORT)
#if (USHRT_MAX + 0) == 0xff
#define BOOST_ATOMIC_DETAIL_SIZEOF_SHORT 1
#elif (USHRT_MAX + 0) == 0xffff
#define BOOST_ATOMIC_DETAIL_SIZEOF_SHORT 2
#elif (USHRT_MAX + 0) == 0xffffffff
#define BOOST_ATOMIC_DETAIL_SIZEOF_SHORT 4
#elif (USHRT_MAX + 0) == UINT64_C(0xffffffffffffffff)
#define BOOST_ATOMIC_DETAIL_SIZEOF_SHORT 8
#endif
#endif // !defined(BOOST_ATOMIC_DETAIL_SIZEOF_SHORT)

#if !defined(BOOST_ATOMIC_DETAIL_SIZEOF_INT)
#if (UINT_MAX + 0) == 0xff
#define BOOST_ATOMIC_DETAIL_SIZEOF_INT 1
#elif (UINT_MAX + 0) == 0xffff
#define BOOST_ATOMIC_DETAIL_SIZEOF_INT 2
#elif (UINT_MAX + 0) == 0xffffffff
#define BOOST_ATOMIC_DETAIL_SIZEOF_INT 4
#elif (UINT_MAX + 0) == UINT64_C(0xffffffffffffffff)
#define BOOST_ATOMIC_DETAIL_SIZEOF_INT 8
#endif
#endif // !defined(BOOST_ATOMIC_DETAIL_SIZEOF_INT)

#if !defined(BOOST_ATOMIC_DETAIL_SIZEOF_LONG)
#if (ULONG_MAX + 0) == 0xff
#define BOOST_ATOMIC_DETAIL_SIZEOF_LONG 1
#elif (ULONG_MAX + 0) == 0xffff
#define BOOST_ATOMIC_DETAIL_SIZEOF_LONG 2
#elif (ULONG_MAX + 0) == 0xffffffff
#define BOOST_ATOMIC_DETAIL_SIZEOF_LONG 4
#elif (ULONG_MAX + 0) == UINT64_C(0xffffffffffffffff)
#define BOOST_ATOMIC_DETAIL_SIZEOF_LONG 8
#endif
#endif // !defined(BOOST_ATOMIC_DETAIL_SIZEOF_LONG)

#if !defined(BOOST_ATOMIC_DETAIL_SIZEOF_LLONG)
#if defined(__hpux) // HP-UX's value of ULONG_LONG_MAX is unusable in preprocessor expressions
#define BOOST_ATOMIC_DETAIL_SIZEOF_LLONG 8
#else

// The list of the non-standard macros (the ones except ULLONG_MAX) is taken from cstdint.hpp
#if defined(ULLONG_MAX)
#define BOOST_ATOMIC_DETAIL_ULLONG_MAX ULLONG_MAX
#elif defined(ULONG_LONG_MAX)
#define BOOST_ATOMIC_DETAIL_ULLONG_MAX ULONG_LONG_MAX
#elif defined(ULONGLONG_MAX)
#define BOOST_ATOMIC_DETAIL_ULLONG_MAX ULONGLONG_MAX
#elif defined(_LLONG_MAX) // strangely enough, this one seems to be holding the limit for the unsigned integer
#define BOOST_ATOMIC_DETAIL_ULLONG_MAX _LLONG_MAX
#endif

#if (BOOST_ATOMIC_DETAIL_ULLONG_MAX + 0) == 0xff
#define BOOST_ATOMIC_DETAIL_SIZEOF_LLONG 1
#elif (BOOST_ATOMIC_DETAIL_ULLONG_MAX + 0) == 0xffff
#define BOOST_ATOMIC_DETAIL_SIZEOF_LLONG 2
#elif (BOOST_ATOMIC_DETAIL_ULLONG_MAX + 0) == 0xffffffff
#define BOOST_ATOMIC_DETAIL_SIZEOF_LLONG 4
#elif (BOOST_ATOMIC_DETAIL_ULLONG_MAX + 0) == UINT64_C(0xffffffffffffffff)
#define BOOST_ATOMIC_DETAIL_SIZEOF_LLONG 8
#endif

#endif // defined(__hpux)
#endif // !defined(BOOST_ATOMIC_DETAIL_SIZEOF_LLONG)

#if !defined(BOOST_ATOMIC_DETAIL_SIZEOF_POINTER) && defined(UINTPTR_MAX)
#if (UINTPTR_MAX + 0) == 0xffff
#define BOOST_ATOMIC_DETAIL_SIZEOF_POINTER 2
#elif (UINTPTR_MAX + 0) == 0xffffffff
#define BOOST_ATOMIC_DETAIL_SIZEOF_POINTER 4
#elif (UINTPTR_MAX + 0) == UINT64_C(0xffffffffffffffff)
#define BOOST_ATOMIC_DETAIL_SIZEOF_POINTER 8
#endif
#endif // !defined(BOOST_ATOMIC_DETAIL_SIZEOF_POINTER) && defined(UINTPTR_MAX)

#endif

#if !defined(BOOST_ATOMIC_DETAIL_SIZEOF_WCHAR_T)

#include <wchar.h>
#include <boost/cstdint.hpp>

#if defined(_MSC_VER) && (_MSC_VER <= 1310 || defined(UNDER_CE) && _MSC_VER <= 1500)
// MSVC 7.1 and MSVC 8 (arm) define WCHAR_MAX to a value not suitable for constant expressions
#define BOOST_ATOMIC_DETAIL_SIZEOF_WCHAR_T 2
#elif (WCHAR_MAX + 0) == 0xff || (WCHAR_MAX + 0) == 0x7f
#define BOOST_ATOMIC_DETAIL_SIZEOF_WCHAR_T 1
#elif (WCHAR_MAX + 0) == 0xffff || (WCHAR_MAX + 0) == 0x7fff
#define BOOST_ATOMIC_DETAIL_SIZEOF_WCHAR_T 2
#elif (WCHAR_MAX + 0) == 0xffffffff || (WCHAR_MAX + 0) == 0x7fffffff
#define BOOST_ATOMIC_DETAIL_SIZEOF_WCHAR_T 4
#elif (WCHAR_MAX + 0) == UINT64_C(0xffffffffffffffff) || (WCHAR_MAX + 0) == INT64_C(0x7fffffffffffffff)
#define BOOST_ATOMIC_DETAIL_SIZEOF_WCHAR_T 8
#endif
#endif

#if !defined(BOOST_ATOMIC_DETAIL_SIZEOF_SHORT) || !defined(BOOST_ATOMIC_DETAIL_SIZEOF_INT) ||\
    !defined(BOOST_ATOMIC_DETAIL_SIZEOF_LONG) || !defined(BOOST_ATOMIC_DETAIL_SIZEOF_LLONG) ||\
    !defined(BOOST_ATOMIC_DETAIL_SIZEOF_WCHAR_T)
#error Boost.Atomic: Failed to determine builtin integer sizes, the target platform is not supported. Please, report to the developers (patches are welcome).
#endif

#endif // BOOST_ATOMIC_DETAIL_INT_SIZES_HPP_INCLUDED_

/* int_sizes.hpp
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
*/