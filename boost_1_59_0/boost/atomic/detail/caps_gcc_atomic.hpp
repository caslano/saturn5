/*
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * Copyright (c) 2014, 2020 Andrey Semashev
 */
/*!
 * \file   atomic/detail/caps_gcc_atomic.hpp
 *
 * This header defines feature capabilities macros
 */

#ifndef BOOST_ATOMIC_DETAIL_CAPS_GCC_ATOMIC_HPP_INCLUDED_
#define BOOST_ATOMIC_DETAIL_CAPS_GCC_ATOMIC_HPP_INCLUDED_

#include <boost/atomic/detail/config.hpp>
#include <boost/atomic/detail/int_sizes.hpp>

#if defined(BOOST_ATOMIC_DETAIL_CORE_ARCH_BACKEND_HEADER)
#include BOOST_ATOMIC_DETAIL_CORE_ARCH_BACKEND_HEADER(boost/atomic/detail/caps_arch_)
#endif

#ifdef BOOST_HAS_PRAGMA_ONCE
#pragma once
#endif

// Translate type-based lock-free macros to size-based ones
#define BOOST_ATOMIC_DETAIL_GCC_ATOMIC_INT8_LOCK_FREE __GCC_ATOMIC_CHAR_LOCK_FREE

#if BOOST_ATOMIC_DETAIL_SIZEOF_SHORT == 2
#define BOOST_ATOMIC_DETAIL_GCC_ATOMIC_INT16_LOCK_FREE __GCC_ATOMIC_SHORT_LOCK_FREE
#elif BOOST_ATOMIC_DETAIL_SIZEOF_INT == 2
#define BOOST_ATOMIC_DETAIL_GCC_ATOMIC_INT16_LOCK_FREE __GCC_ATOMIC_INT_LOCK_FREE
#elif BOOST_ATOMIC_DETAIL_SIZEOF_LONG == 2
#define BOOST_ATOMIC_DETAIL_GCC_ATOMIC_INT16_LOCK_FREE __GCC_ATOMIC_LONG_LOCK_FREE
#elif BOOST_ATOMIC_DETAIL_SIZEOF_LLONG == 2
#define BOOST_ATOMIC_DETAIL_GCC_ATOMIC_INT16_LOCK_FREE __GCC_ATOMIC_LLONG_LOCK_FREE
#else
#define BOOST_ATOMIC_DETAIL_GCC_ATOMIC_INT16_LOCK_FREE 0
#endif

#if BOOST_ATOMIC_DETAIL_SIZEOF_SHORT == 4
#define BOOST_ATOMIC_DETAIL_GCC_ATOMIC_INT32_LOCK_FREE __GCC_ATOMIC_SHORT_LOCK_FREE
#elif BOOST_ATOMIC_DETAIL_SIZEOF_INT == 4
#define BOOST_ATOMIC_DETAIL_GCC_ATOMIC_INT32_LOCK_FREE __GCC_ATOMIC_INT_LOCK_FREE
#elif BOOST_ATOMIC_DETAIL_SIZEOF_LONG == 4
#define BOOST_ATOMIC_DETAIL_GCC_ATOMIC_INT32_LOCK_FREE __GCC_ATOMIC_LONG_LOCK_FREE
#elif BOOST_ATOMIC_DETAIL_SIZEOF_LLONG == 4
#define BOOST_ATOMIC_DETAIL_GCC_ATOMIC_INT32_LOCK_FREE __GCC_ATOMIC_LLONG_LOCK_FREE
#else
#define BOOST_ATOMIC_DETAIL_GCC_ATOMIC_INT32_LOCK_FREE 0
#endif

#if BOOST_ATOMIC_DETAIL_SIZEOF_SHORT == 8
#define BOOST_ATOMIC_DETAIL_GCC_ATOMIC_INT64_LOCK_FREE __GCC_ATOMIC_SHORT_LOCK_FREE
#elif BOOST_ATOMIC_DETAIL_SIZEOF_INT == 8
#define BOOST_ATOMIC_DETAIL_GCC_ATOMIC_INT64_LOCK_FREE __GCC_ATOMIC_INT_LOCK_FREE
#elif BOOST_ATOMIC_DETAIL_SIZEOF_LONG == 8
#define BOOST_ATOMIC_DETAIL_GCC_ATOMIC_INT64_LOCK_FREE __GCC_ATOMIC_LONG_LOCK_FREE
#elif BOOST_ATOMIC_DETAIL_SIZEOF_LLONG == 8
#define BOOST_ATOMIC_DETAIL_GCC_ATOMIC_INT64_LOCK_FREE __GCC_ATOMIC_LLONG_LOCK_FREE
#else
#define BOOST_ATOMIC_DETAIL_GCC_ATOMIC_INT64_LOCK_FREE 0
#endif

#if BOOST_ATOMIC_DETAIL_SIZEOF_SHORT == 16
#define BOOST_ATOMIC_DETAIL_GCC_ATOMIC_INT128_LOCK_FREE __GCC_ATOMIC_SHORT_LOCK_FREE
#elif BOOST_ATOMIC_DETAIL_SIZEOF_INT == 16
#define BOOST_ATOMIC_DETAIL_GCC_ATOMIC_INT128_LOCK_FREE __GCC_ATOMIC_INT_LOCK_FREE
#elif BOOST_ATOMIC_DETAIL_SIZEOF_LONG == 16
#define BOOST_ATOMIC_DETAIL_GCC_ATOMIC_INT128_LOCK_FREE __GCC_ATOMIC_LONG_LOCK_FREE
#elif BOOST_ATOMIC_DETAIL_SIZEOF_LLONG == 16
#define BOOST_ATOMIC_DETAIL_GCC_ATOMIC_INT128_LOCK_FREE __GCC_ATOMIC_LLONG_LOCK_FREE
#else
#define BOOST_ATOMIC_DETAIL_GCC_ATOMIC_INT128_LOCK_FREE 0
#endif

// On x86-64, clang 3.4 does not implement 128-bit __atomic* intrinsics even though it defines __GCC_HAVE_SYNC_COMPARE_AND_SWAP_16:
// https://bugs.llvm.org/show_bug.cgi?id=19149
// Another problem exists with gcc 7 and later, as it requires to link with libatomic to use 16-byte intrinsics:
// https://gcc.gnu.org/bugzilla/show_bug.cgi?id=80878
// Both clang and gcc do generate cmpxchg16b for __sync_val_compare_and_swap though.
#if defined(BOOST_ATOMIC_DETAIL_X86_HAS_CMPXCHG16B) &&\
    (\
        (defined(BOOST_CLANG) && (__clang_major__ < 3 || (__clang_major__ == 3 && __clang_minor__ < 5))) ||\
        (defined(BOOST_GCC) && BOOST_GCC >= 70000)\
    )
#undef BOOST_ATOMIC_DETAIL_GCC_ATOMIC_INT128_LOCK_FREE
#define BOOST_ATOMIC_DETAIL_GCC_ATOMIC_INT128_LOCK_FREE 0
#endif

// On 32-bit x86, there is a clang bug for 64-bit atomics: https://bugs.llvm.org/show_bug.cgi?id=19355. The compiler defines
// __GCC_ATOMIC_LLONG_LOCK_FREE to 1 when the target architecture supports 64-bit atomic instructions (i.e. the value should be 2).
// Additionally, any clang version requires to link with libatomic for 64-bit __atomic* intrinsics on x86. It does generate
// cmpxchg8b for __sync_val_compare_and_swap though.
#if defined(BOOST_ATOMIC_DETAIL_X86_HAS_CMPXCHG8B) && defined(BOOST_CLANG)
#undef BOOST_ATOMIC_DETAIL_GCC_ATOMIC_INT64_LOCK_FREE
#define BOOST_ATOMIC_DETAIL_GCC_ATOMIC_INT64_LOCK_FREE 0
#endif

// Override arch-specific macros if atomic intrinsics provide better guarantees
#if !defined(BOOST_ATOMIC_INT128_LOCK_FREE) || (BOOST_ATOMIC_INT128_LOCK_FREE < BOOST_ATOMIC_DETAIL_GCC_ATOMIC_INT128_LOCK_FREE)
#undef BOOST_ATOMIC_INT128_LOCK_FREE
#define BOOST_ATOMIC_INT128_LOCK_FREE BOOST_ATOMIC_DETAIL_GCC_ATOMIC_INT128_LOCK_FREE
#endif

#if !defined(BOOST_ATOMIC_INT64_LOCK_FREE) || (BOOST_ATOMIC_INT64_LOCK_FREE < BOOST_ATOMIC_DETAIL_GCC_ATOMIC_INT64_LOCK_FREE) || (BOOST_ATOMIC_INT64_LOCK_FREE < BOOST_ATOMIC_INT128_LOCK_FREE)
#undef BOOST_ATOMIC_INT64_LOCK_FREE
#if BOOST_ATOMIC_DETAIL_GCC_ATOMIC_INT64_LOCK_FREE >= BOOST_ATOMIC_INT128_LOCK_FREE
#define BOOST_ATOMIC_INT64_LOCK_FREE BOOST_ATOMIC_DETAIL_GCC_ATOMIC_INT64_LOCK_FREE
#else
#define BOOST_ATOMIC_INT64_LOCK_FREE BOOST_ATOMIC_INT128_LOCK_FREE
#endif
#endif

#if !defined(BOOST_ATOMIC_INT32_LOCK_FREE) || (BOOST_ATOMIC_INT32_LOCK_FREE < BOOST_ATOMIC_DETAIL_GCC_ATOMIC_INT32_LOCK_FREE) || (BOOST_ATOMIC_INT32_LOCK_FREE < BOOST_ATOMIC_INT64_LOCK_FREE)
#undef BOOST_ATOMIC_INT32_LOCK_FREE
#if BOOST_ATOMIC_DETAIL_GCC_ATOMIC_INT32_LOCK_FREE >= BOOST_ATOMIC_INT64_LOCK_FREE
#define BOOST_ATOMIC_INT32_LOCK_FREE BOOST_ATOMIC_DETAIL_GCC_ATOMIC_INT32_LOCK_FREE
#else
#define BOOST_ATOMIC_INT32_LOCK_FREE BOOST_ATOMIC_INT64_LOCK_FREE
#endif
#endif

#if !defined(BOOST_ATOMIC_INT16_LOCK_FREE) || (BOOST_ATOMIC_INT16_LOCK_FREE < BOOST_ATOMIC_DETAIL_GCC_ATOMIC_INT16_LOCK_FREE) || (BOOST_ATOMIC_INT16_LOCK_FREE < BOOST_ATOMIC_INT32_LOCK_FREE)
#undef BOOST_ATOMIC_INT16_LOCK_FREE
#if BOOST_ATOMIC_DETAIL_GCC_ATOMIC_INT16_LOCK_FREE >= BOOST_ATOMIC_INT32_LOCK_FREE
#define BOOST_ATOMIC_INT16_LOCK_FREE BOOST_ATOMIC_DETAIL_GCC_ATOMIC_INT16_LOCK_FREE
#else
#define BOOST_ATOMIC_INT16_LOCK_FREE BOOST_ATOMIC_INT32_LOCK_FREE
#endif
#endif

#if !defined(BOOST_ATOMIC_INT8_LOCK_FREE) || (BOOST_ATOMIC_INT8_LOCK_FREE < BOOST_ATOMIC_DETAIL_GCC_ATOMIC_INT8_LOCK_FREE) || (BOOST_ATOMIC_INT8_LOCK_FREE < BOOST_ATOMIC_INT16_LOCK_FREE)
#undef BOOST_ATOMIC_INT8_LOCK_FREE
#if BOOST_ATOMIC_DETAIL_GCC_ATOMIC_INT8_LOCK_FREE >= BOOST_ATOMIC_INT16_LOCK_FREE
#define BOOST_ATOMIC_INT8_LOCK_FREE BOOST_ATOMIC_DETAIL_GCC_ATOMIC_INT8_LOCK_FREE
#else
#define BOOST_ATOMIC_INT8_LOCK_FREE BOOST_ATOMIC_INT16_LOCK_FREE
#endif
#endif

#if !defined(BOOST_ATOMIC_POINTER_LOCK_FREE) || (BOOST_ATOMIC_POINTER_LOCK_FREE < __GCC_ATOMIC_POINTER_LOCK_FREE)
#undef BOOST_ATOMIC_POINTER_LOCK_FREE
#define BOOST_ATOMIC_POINTER_LOCK_FREE __GCC_ATOMIC_POINTER_LOCK_FREE
#endif

#if !defined(BOOST_ATOMIC_THREAD_FENCE) || (BOOST_ATOMIC_THREAD_FENCE < 2)
#undef BOOST_ATOMIC_THREAD_FENCE
#define BOOST_ATOMIC_THREAD_FENCE 2
#endif
#if !defined(BOOST_ATOMIC_SIGNAL_FENCE) || (BOOST_ATOMIC_SIGNAL_FENCE < 2)
#undef BOOST_ATOMIC_SIGNAL_FENCE
#define BOOST_ATOMIC_SIGNAL_FENCE 2
#endif

#endif // BOOST_ATOMIC_DETAIL_CAPS_GCC_ATOMIC_HPP_INCLUDED_

/* caps_gcc_atomic.hpp
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
*/