/*
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * Copyright (c) 2014 Andrey Semashev
 */
/*!
 * \file   atomic/detail/extending_cas_based_arithmetic.hpp
 *
 * This header contains a boilerplate of core atomic operations that require sign/zero extension in arithmetic operations.
 */

#ifndef BOOST_ATOMIC_DETAIL_EXTENDING_CAS_BASED_ARITHMETIC_HPP_INCLUDED_
#define BOOST_ATOMIC_DETAIL_EXTENDING_CAS_BASED_ARITHMETIC_HPP_INCLUDED_

#include <cstddef>
#include <boost/memory_order.hpp>
#include <boost/atomic/detail/config.hpp>
#include <boost/atomic/detail/storage_traits.hpp>
#include <boost/atomic/detail/integral_conversions.hpp>
#include <boost/atomic/detail/header.hpp>

#ifdef BOOST_HAS_PRAGMA_ONCE
#pragma once
#endif

namespace boost {
namespace atomics {
namespace detail {

template< typename Base, std::size_t Size, bool Signed >
struct extending_cas_based_arithmetic :
    public Base
{
    typedef typename Base::storage_type storage_type;
    typedef typename storage_traits< Size >::type emulated_storage_type;

    static BOOST_FORCEINLINE storage_type fetch_add(storage_type volatile& storage, storage_type v, memory_order order) BOOST_NOEXCEPT
    {
        storage_type old_val;
        atomics::detail::non_atomic_load(storage, old_val);
        storage_type new_val;
        do
        {
            new_val = atomics::detail::integral_extend< Signed, storage_type >(static_cast< emulated_storage_type >(old_val + v));
        }
        while (!Base::compare_exchange_weak(storage, old_val, new_val, order, memory_order_relaxed));
        return old_val;
    }

    static BOOST_FORCEINLINE storage_type fetch_sub(storage_type volatile& storage, storage_type v, memory_order order) BOOST_NOEXCEPT
    {
        storage_type old_val;
        atomics::detail::non_atomic_load(storage, old_val);
        storage_type new_val;
        do
        {
            new_val = atomics::detail::integral_extend< Signed, storage_type >(static_cast< emulated_storage_type >(old_val - v));
        }
        while (!Base::compare_exchange_weak(storage, old_val, new_val, order, memory_order_relaxed));
        return old_val;
    }
};

} // namespace detail
} // namespace atomics
} // namespace boost

#include <boost/atomic/detail/footer.hpp>

#endif // BOOST_ATOMIC_DETAIL_EXTENDING_CAS_BASED_ARITHMETIC_HPP_INCLUDED_

/* extending_cas_based_arithmetic.hpp
ZAfGUbDAHmol0zQ01Nt5gpUPozOrxgJ2cxqe0Ke7c9p3wHN/FnuAZAD5n6QaABR7iUVESESCxSUkJGLx+YXEhgSFRQUFSXv7h3sJCUmISQlJyMhKTIuIS4yLiciKTwz1TcGFCBCYuPAAbRH4qTGA2u0A9fmAZgFPdwFmr2GRAaIgW28AdoW9BDgweu3YMThASChCHseAAdHQrtlR1DncZUCgrHNvv2AAUK/zXoJBAYIBwLG/vVPeV7B1bMyQI7ApYJ/FW8Gn+Nism1Xv4WLwbwBTewryoPGeGh2eF/dZu9MW4Ukf1LXImLJiFi8a6FBjvi4PEXQMNjTuuzyZKqqqQAFOOQhr9R4+L+VBEiM0Ly24tsZ5i4q8Nk7kWWs9GXHzrHzJ3RSoRpLhD2/m20iayC/O1XSPuJpfnurvk6rBTMqebantFDfGfaWAWEnYJJDLGOZHkw/rycJJJQC/XYPacr65l4/e0O/Ag6Mu4F8PdgaRggHMB4RbdhZheYBwYC6JKWKOIQHQwNAA99gPc1KBoMGtRQQhUVT7vwHeee20t3k+c+9cY9jNb6OcX28vvEhSb8E61LMSibgmdqZYWqOzAt5YDpU+2+9pWoYP0zO4h4YA/W08OM8dM3pwkorSXDBMXaD8s0rKyKvumR+kGK1Fo8bCQpbZckhy5FZfdNyXpqBO100TW0OUyO0XRJr7LX19hXg3zsdyeS/Igd+YvMKUrD9CyESLz/D8P49lBfsRRvp5d1FRk4LB/nE+zoiSJBPIfvaNs2XfNW0LOWrZ28a8JmV2pADWt2vxqvKNfCbDIyIyAvylbEd6J4/8FigM7eVvRsYSeSJiph9S+2AIB00J+jH2YpLYVaJYkklNmC1RiOz5WHC8PJRmmtCUpxox785aMIkzVn0Frgau/6loJ0V45Q+7ggBgYPAbcLWvlWC4VUAak9dB3LSLYKhNVUfpFyAe2XHaKCdBhO/Fq7EOGCLiKuE6XfwjyMtcoJ46RKzwEc7SgrJAFdRtCSG+QbSf/IeGx/E4ZCZ2mvfoBchZ9QCGnDtzzID5PXEPD/FLHKztGK+owOgTS2sNyUAeBFe/cf46fhvWRmMYwvsNQxbCXej6YWu17Vn8b+eGzp/V3f3UQQEAgH/zbcOpf2cykbSNmHXApgp/8FnpbvWWSuyFvgveUdRbd5poaT71QKbofaB4Nu200OESgCCQXIPDXGlWE6Xo/XbGyRtXqJ7JgBdXhhuUyHVma//xXzx84UF95PxFO+D1lIY0r57+67j+hXMAnIWzrF+mVCKC+iTVTrIcBOVy6qDWFl1GsBYj6GQ5jdDWtg3YJ9AE19wokuIe9Tdsmy2pRGhb0iHZadaUxgZ1aGVteDSxK1AgQXvHT30nrkeLt+woTBpyPqMQDU6vhLT/2BucBXiLq7KWgjHBjVQnJrjDXljN/kvCrkX8QsIoXvOv+AVGQ7q7Od3iYFemMRw0kW8lKT1pJKaSqlDxsMwhkC5OxU6/HFning8d8VzhMX3CPUs0u1dBVpg7imBaGAokL8F1TWe7enMRemQfdgza4bLH39nh4KggpMJpidhv1hnUkzqONXwHrFO9QQuC5x8CuQHgz274ANtweO3QB5BjO9LvmzRLjiIdXAB3zd33T8aPjB3wbyC04O/S5L4fZdoJzDYBVKtSJihvBbGfNK4UZ6b7T2DY0xXLkzenyV1GI8NwO7xc0icytm4YEGQpWzFs9dwzJrG0B44kNOrpaj0hRPalOoJkHXVay0UJzQ58vjGH9cY9EGzcpw8t74bmuAKxKExwGefaAm5s0suKFKaZhfwY+3ygpFV8QavJJ8aBHTXQQz3bdACnH3gZZIG/PYyyAJw/2yyAbxUWQCTDhGBgEREAQx4cBDz92puXCLZydAzgColBCQnIJHQS0zOE44T9pFC/McoAfc/gBOBBAH9P/yQ43MEpItIpvOGnzCLwIYdVtvdasGOaAQCmnxxgkvgPwOSBFQBMOSYAWBU8QBAfoH8fxBszM0hq2AX/OFSfINzxNzf14I0NFL/4W84GCkfr6s8/WcEkejBxyCQ99ztgrYl5XlzcIW2MzEoJ6d21LaMG+vnzNFVVTKfomHbLIiHSOqaWRnYVM/AURnWgAtl/O/xSx9yg9Hje8eHyPIo2MqOuPGK6oT+MgWt2w1VFlHNPVS+oT3xb9lBn7xVVPojFjZmRNax2kSUjJBePujSLnWXYM+eSWA7EDNK4UH6Hl3V4KO/NO8OrLqGCvrpjdupq/PELDiIdUhfE7a6P0ebbInQlTPysDyN5kxZpmTzdaixZobj/pluHGeNEBc9OcqmH2vujzyizGXKADj672crNEj+skwxl6MpY1O2gH/MHn+AVgzawIHU6ZjG558yw9rh9Bzf2Mx1BQolr9vIsYjgX+J97v7MNK3URC8mfWIcXhMM1MRZaPdy34gfapLUkezVWnLtE96z6PHR1TK0Jx7hutGwWCZZBkTAntOs4Bqq+zJ/dGmKVlsbE3pVpt0zoYYirPNWO77KBpXnBjZ0q/opWtOJWLQ6Atfdw3RFVuKxHpPdNLDoW0crVpH0rmL4F59LXsNkQYcliuQZJiL/SNm6P8us55ZYtCKjX9xsVih7CxQR9tBIsH3zeGWU9+y+khP7V2gO1jMfQrgEp+1hPbqlfL8qknzDPkq5ha8veKPsrKufMvaQCwQeXKE/aIlm+cPGcqWV3D+Eht6mjLM9XC8d81oyxztQJ7pY4QDCKboglxfV3SAbTshkpntCK8K4AfJbDpLsRY8Pt/sgnve9wVu7l7Glpyea9u8tPknZ89vJs4Rx9Y/AHrWCkZyAe8F3l3P7z14/cMj1gNk9KXDIAT7gBxumNn+S6MHKAx+crIxUUFR8WFl94YCrQ44/nBybTLFDprj5FnjsgGBwyGBSsPaBfFAZA7Df0IEAX9EOYG+MPho4AKSkZDhmKTqfdGy3s2YwNrB89TwA8NrryeQCh9k/i7SHBSm1g8cX1Z0v+g8EBGFCfPsOHHvK7Xfh0T9M58M92+U+FIj4ICpijvVOddHh4lEArAQ+PPgEKiAAHSW9m/uXm5qbCGGRXoD0UtDBoBQW3iLpQZlYQNBENEJBT3YM/R8gQgR8VJ+FP9CEIjVBRMZ3zTZjUNAYADNFOjqQkATj8yMwfJm1FXSTYtFtCAxYLSkaT07RPA79HfQzkiYjTwGxNFBOVoZubG8lRwf3488LDXHGKwlkApPuBfxkvnI8QpIL0eeIUqJ4nJxyzPzMOrq6u19fXhSaNmBogM/T02PwtUlJWeDi4Wdk5UZEVQgcV5RkUZRgGB0zOLzDhkqWAhIbU1DsOd2m2dnaCOPtqKysP0NIFBTt01dXL3XbeH2yKKg+Y0Cm+xs6ZEaL29uYwk4TTozSzy8ugIFHbm5u7u4y7iAx7e8ywcH9395mTE5UNDuag/aqw/JNBR0Q1dEHLvX6CM6sSM2EYtQExyDAw7vEobEVmvTzmDfvL8d69HLZObS7lB3EUnXTBr8s8cVmWtneYLf7cUeRxQ5TgNgSKR5FgudAFu1NxOXLvy2q0OE/xKRAfD5YF7HWmnp/DeAGbwqbKJ1hccJ6ghAHk+T8naPCyRLoXm89vOtMjJmNotmmPMyMji3kbSqLmpYo/EWQ7PPONIitQ7E94dv2zBHFujUjVgVmv1n+1ymRBcr1LfveoZ8bM0zII3ujIHnpFfgV1imZvNFHLhz+KQ0tBp0ZkhPmMFeARwJNzJAA/nWGc0SP+mlGERxi8gzeIbffXwkKn8rsIRNxABvG/nYLnPgrVTbXj/DvC99JYk3wmtVRV0lUtUbS/q7CWEmoa9mfrGOFaJ/w64wY4Ec2aRJb8CS0au+WlxmgCOt54/U/ikyO9WF5705j1pBecHEtXnFrUjE9/i50kGoY4I+iSnt8LnvJ5A4l7LM9OC92eJe2VSxfe9wAdXwtTwdhXqnoYSV6FIo9HnHiXfC50zdhzp2/yCsjGwmIFOXFW3hx7Nfe+0jLe1Pdb5WzeR9mNWRgjz8vT83T5SgaOfDNdpNfEdjKT5hmn3eO+CtSMySRXNKalUw/Hk30OhQQk8VqvyY5kkzM3hyOPR/ZStWz290Hle8OUvY2UNnNK4Zm+Or3raigsEnfS+EErSsmMsooPSN2obzZGZZ34/MFSIrgeUc1K6SyQ8e3B1QoR3YD6hE4M/GNlXxRFfxDWkOlTwBOE7UWszN2LBR/fQYsYF0UqklfkfiCHodARAm9u9rxN88G5xmh4Z7FGx04kOoLLKi4RyY9isJt5+3SGqfuil/S+KMfymVoGnUjKwewcn24sery43Sx3ydkfTKLEMdEikolqoPpQ98dsyJokyztZZnJX6go1FYqeBK2BWxO7wcmmTRs906S0XY/H1U4XFlt2/Mr+W6NO1tJUN3Ct6NtegbaYNgjdkLoDnaAVgv3yZjvhO+Si/Ngm0BNcqeQY0BRUJOIBZMSPY4+1Azj0CY0hYFSDQQ8HcnermjPFNl1RHfxKCF2+g/Q80kAbE4YYfHi+ZPbhfHiA4e5JubradE0ECmsRyZR/oo+0XjFz+5nPNOIJw5tBV4h/TDiYqUfF7IyvLbZimNKonIKEReG6ZJvGGw2g6ANVFZR5pKjBkBX3h00nmKw5ybAJy7pvTpZ1wSNRB4ILtSoftPsoi3QkGZHLzrT76EWVdXY0heeIxi1BzRRJ+a6oQIP/+s0qL8GTlmASnr96I1lM5K49GrFq2IBYuU5R1aAzDtQIpT4endDjUYyev+2M8VzfyhLRoH3m6Erwl0NHE8rmqgbX7bZMzTDCPub+hW4MgjQU017YD6hCChWdw7KClQ4LmBhq/Aq3TXDgOvrKInbAFkoPihPIYs7xkTE3e1H9EVcLZ1azk1uniFch2Pv4R/luaqWt+IxR7SLMsM7GFwAL/UTTNm8mM4eQDAFEZxTSBDX0adtdRmnpzaljiakJ6VwninqC/W9hvy5ZPl1cX6jcvdgaP5Z2ksUD4gIy/obnzp1yJoVriEE369lRplx9a0oEhomjHhIMlSF2rHuuoq/l28xX7xAPu3vmqAX++x4PF9I29TTmdWgUb9gawcU54x9CT8adRgk5aE8MlM2qrzGtaE3iiRDvySRuX9ITEi4oFsXc2gvGiotg9vYh82TJEcQRvHrrZntQUB4CYt4nImDC7Tih0numgKeIpgWj9+WIcD/D3X2GQ+M2yapMIP9kcIf6lbjXsDZlPgi8+m4X2iEvSWJghERg4nrb9qPP3+9GvIevgu5S8XchjW8v6sSUZ7OXZSeswEPrf9atW/oRyRGsrYgHRbDtWTPrl1Q8C8asgpPytHRCBYw2ZdQ1PGfLCdTLHE7OdMTrlJKS157tzZaRCdYgWxSIIRA1nkLR8zWuoKu9n64gwh5nrxnxHIV47xWYfOzdKydm2GBCVm5eeqYzEdefPZuGDM738D8/YNkJwq2CPbtOpSBv0AJhUPE/DQjvWgIj/EKn4T+kQiNBb9zQBED7/EFzTgb5h4A/JXY/sktA5Qi1wD8n5aAQIMG1wr5Gux9OS/v0kF8vqNAEseHhFKk6wQlRCdBAaKG39hBOQipQCOgdFAoyIOXq9hFREVL+gwT6kHRwjAYM4CUUJSApGBg0VHTjA2OkNHc9ueqVQkkRI7NbyAAPpzgADxwXMyjQCMEJD/hpO75h9Jw/Vt6Q305e1MougZaeOJvwVMSHfuZ2oIF5MROAYEHf4FIHdpMD9aqupmJys8+sIWhKaOujlwR0DBlAnOQZHCg1QgSb1vcKgefAAVlRYbJSYUHAkWGECF38ICv8QW67Of5u0/zNvIGjfZc9fXv8HfHhXGvcn7LROdpZo3716D9VNvcnED25zrv4+c4mH+B3QtPf4vZfP0aCgw9qJ6k97YP+vndBb2vcYJ8VbjCH8sHLesqQcAwn/Aqkzyyvhs5Fc28hJ/yXhKnkE++k1kOB/Gh3IIUOEizdXcfEQjbbO9MT/hdhov6YKopPHe7Rr9N6t9Nm49AfYK00jafwErd+ikIFNn590lwdXWGFowvW0gzavMrdXRIHya8HZ1lfYTFx0tlWU6Z6fvgRdYJgvDuhcewnmLJj+Dk99H9f+hklzpmF7emHtt+9H1XJjfoG8xvVdhZirNPpjJ1qNUdLI+xyI+f+jm2RWeh3B9RLBHjEk54lm7bRlzEmu/t2msaCUd9Iy+hejDBDwgUIsiS6Ywm6EZJiTgak7wcyG3t9SC63M0LH7FsjdVkitZeKFfSdeD1AMmzpms5QCsqqE/NgLz63b2x/2+g2Nfe3c7PKZdvdbpFvTc8sV2V0taWHLcPPk5KufJ0k3sKX72K9sTzXw5euH5xAZMnab4CIjyOsbkNVWoBStsX6xToTm9G8tEXQ85OvpY04Y+jYDN9LR6YMXFVQuXGmMfrI4lDOnsow3q/9y6+KyqGq6D6FhiA2UCCoBHXCvRF3SKdpINK+ioAWZ0loBntoiFVEbdIjgpBnG1AbrUqBPN1gffHyEKdpTNEFzhE1SxfDrfMXxN7DSUpsjLlBRUZlORgU/gOjaJDxz9+HRDQnCrNnOypNhqkbmULaGaYGBLXd6tAh9NHiZRrfHK+1j963a92dboy7jT4KOOPwTEKqLmIL6+zeFk8Rc0yvnmdCmNn1TIPTrmdVQTVBcHntaq4J4azrZEqOdu1u7S//Wr4IZMGfGacjbW9VqCJjWs3LcPRaiPmUgOHXLOUxXJIY3gMJyks0RMuJLttgd3/nagGfiPwsykgAdNG7U3rjI0b5dbWWeF48QU34TO0YEZW3+BLvqF0LinyFNh0O2qbgnVWQ0Hduo2h05ZclYgfe2GuIY7QR3vTmVHr5pacpZwFDFHBeL8wh/9My8wSs7e6VAOCgzbtr2DVrS8N9q/eWkBmyoVrTSojPeGjF8HNRz0r0RWntXSVxIXCPInkOtDRURuV5Vq1/eFk+Q0X4cUfihMMbDFhj26pqf3z4mxQdsJUZMMEymIYfCvj/KkS6obJxpRXsW2jv/ivMGGWOQHmk0eicVDjW1Y575n65F3uG4H0xVOMuVlVGH/BxpixUZlr+q9vW/ffgcgZlcvpEVb6EF8qha6lh/IBIC4fDMaf0iFe0jGAGcWzk7TE4PNnntUs/17xLb6V2uG6MM54NhYFpEXCD4XQeTZNkGAQMYIYTm1UCczRZ9J3S8StntMgO2isqfFZ2cM6UxzYLHpdAV1B6le3z+lwCNSUT/299yrIn1+SBOyykAbHcG0Z00lxIcRaVOKnrpyDqJA6C7CcIaykUPusoQgxFnoIhDkAD8ztLwqj0q3gCkvVOry2o0kncsfVUfocfWf0HWFmZlXNx6U3Rk/Wqz+MKT1fbFJeq3HONie2qW81pjtVh1QEJN38Xl67vS/LlmjY1mi1rfumneItqDb5UimCm+9DgdOJixAJFBNHZG5tKF7HPRiogrDjHC9Hbl4ugb8zOQvhmZRBKeXKohE2PQ7dLjIs3YLdXxrNYM/V2y5lWTIQ/+acYF3KzSGIC10IJkl35zGUmEX85lZqVGHMfztxAzKrJW/fEQJKkVpIkDX82Yic0LKOG9A0hkXcUc0V1ingOrnxIRANvcSD1gdUOPtGHIJXrSRkap1x6Rqprg2g4
*/