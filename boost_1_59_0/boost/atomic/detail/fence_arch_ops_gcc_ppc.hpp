/*
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * Copyright (c) 2020 Andrey Semashev
 */
/*!
 * \file   atomic/detail/fence_arch_ops_gcc_ppc.hpp
 *
 * This header contains implementation of the \c fence_arch_operations struct.
 */

#ifndef BOOST_ATOMIC_DETAIL_FENCE_ARCH_OPS_GCC_PPC_HPP_INCLUDED_
#define BOOST_ATOMIC_DETAIL_FENCE_ARCH_OPS_GCC_PPC_HPP_INCLUDED_

#include <boost/memory_order.hpp>
#include <boost/atomic/detail/config.hpp>
#include <boost/atomic/detail/header.hpp>

#ifdef BOOST_HAS_PRAGMA_ONCE
#pragma once
#endif

namespace boost {
namespace atomics {
namespace detail {

//! Fence operations for PowerPC
struct fence_arch_operations_gcc_ppc
{
    static BOOST_FORCEINLINE void thread_fence(memory_order order) BOOST_NOEXCEPT
    {
        if (order != memory_order_relaxed)
        {
#if defined(__powerpc64__) || defined(__PPC64__)
            if (order != memory_order_seq_cst)
                __asm__ __volatile__ ("lwsync" ::: "memory");
            else
                __asm__ __volatile__ ("sync" ::: "memory");
#else
            __asm__ __volatile__ ("sync" ::: "memory");
#endif
        }
    }

    static BOOST_FORCEINLINE void signal_fence(memory_order order) BOOST_NOEXCEPT
    {
        if (order != memory_order_relaxed)
        {
#if defined(__ibmxl__) || defined(__IBMCPP__)
            __fence();
#else
            __asm__ __volatile__ ("" ::: "memory");
#endif
        }
    }
};

typedef fence_arch_operations_gcc_ppc fence_arch_operations;

} // namespace detail
} // namespace atomics
} // namespace boost

#include <boost/atomic/detail/footer.hpp>

#endif // BOOST_ATOMIC_DETAIL_FENCE_ARCH_OPS_GCC_PPC_HPP_INCLUDED_

/* fence_arch_ops_gcc_ppc.hpp
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
*/