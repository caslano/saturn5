/*
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * Copyright (c) 2020 Andrey Semashev
 */
/*!
 * \file   atomic/detail/fence_arch_ops_msvc_x86.hpp
 *
 * This header contains implementation of the \c fence_arch_operations struct.
 */

#ifndef BOOST_ATOMIC_DETAIL_FENCE_ARCH_OPS_MSVC_X86_HPP_INCLUDED_
#define BOOST_ATOMIC_DETAIL_FENCE_ARCH_OPS_MSVC_X86_HPP_INCLUDED_

#include <boost/cstdint.hpp>
#include <boost/memory_order.hpp>
#include <boost/atomic/detail/config.hpp>
#include <boost/atomic/detail/interlocked.hpp>
#include <boost/atomic/detail/ops_msvc_common.hpp>
#include <boost/atomic/detail/header.hpp>

#ifdef BOOST_HAS_PRAGMA_ONCE
#pragma once
#endif

namespace boost {
namespace atomics {
namespace detail {

//! Fence operations for x86
struct fence_arch_operations_msvc_x86
{
    static BOOST_FORCEINLINE void thread_fence(memory_order order) BOOST_NOEXCEPT
    {
        if (order == memory_order_seq_cst)
        {
            // See the comment in fence_ops_gcc_x86.hpp as to why we're not using mfence here.
            // We're not using __faststorefence() here because it generates an atomic operation
            // on [rsp]/[esp] location, which may alias valid data and cause false data dependency.
            boost::uint32_t dummy;
            BOOST_ATOMIC_INTERLOCKED_INCREMENT(&dummy);
        }
        else if (order != memory_order_relaxed)
        {
            BOOST_ATOMIC_DETAIL_COMPILER_BARRIER();
        }
    }

    static BOOST_FORCEINLINE void signal_fence(memory_order order) BOOST_NOEXCEPT
    {
        if (order != memory_order_relaxed)
            BOOST_ATOMIC_DETAIL_COMPILER_BARRIER();
    }
};

typedef fence_arch_operations_msvc_x86 fence_arch_operations;

} // namespace detail
} // namespace atomics
} // namespace boost

#include <boost/atomic/detail/footer.hpp>

#endif // BOOST_ATOMIC_DETAIL_FENCE_ARCH_OPS_MSVC_X86_HPP_INCLUDED_

/* fence_arch_ops_msvc_x86.hpp
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
*/