/*
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * Copyright (c) 2020-2021 Andrey Semashev
 */
/*!
 * \file   atomic/atomic_ref.hpp
 *
 * This header contains definition of \c atomic_ref template.
 */

#ifndef BOOST_ATOMIC_ATOMIC_REF_HPP_INCLUDED_
#define BOOST_ATOMIC_ATOMIC_REF_HPP_INCLUDED_

#include <boost/assert.hpp>
#include <boost/static_assert.hpp>
#include <boost/memory_order.hpp>
#include <boost/atomic/capabilities.hpp>
#include <boost/atomic/detail/config.hpp>
#include <boost/atomic/detail/intptr.hpp>
#include <boost/atomic/detail/classify.hpp>
#include <boost/atomic/detail/atomic_ref_impl.hpp>
#include <boost/atomic/detail/type_traits/is_trivially_copyable.hpp>
#include <boost/atomic/detail/header.hpp>

#ifdef BOOST_HAS_PRAGMA_ONCE
#pragma once
#endif

namespace boost {
namespace atomics {

//! Atomic reference to external object
template< typename T >
class atomic_ref :
    public atomics::detail::base_atomic_ref< T, typename atomics::detail::classify< T >::type, false >
{
private:
    typedef atomics::detail::base_atomic_ref< T, typename atomics::detail::classify< T >::type, false > base_type;
    typedef typename base_type::value_arg_type value_arg_type;

public:
    typedef typename base_type::value_type value_type;

    BOOST_STATIC_ASSERT_MSG(sizeof(value_type) > 0u, "boost::atomic_ref<T> requires T to be a complete type");
#if !defined(BOOST_ATOMIC_DETAIL_NO_CXX11_IS_TRIVIALLY_COPYABLE)
    BOOST_STATIC_ASSERT_MSG(atomics::detail::is_trivially_copyable< value_type >::value, "boost::atomic_ref<T> requires T to be a trivially copyable type");
#endif

private:
    typedef typename base_type::storage_type storage_type;

public:
    BOOST_DEFAULTED_FUNCTION(atomic_ref(atomic_ref const& that) BOOST_ATOMIC_DETAIL_DEF_NOEXCEPT_DECL, BOOST_ATOMIC_DETAIL_DEF_NOEXCEPT_IMPL : base_type(static_cast< base_type const& >(that)) {})
    BOOST_FORCEINLINE explicit atomic_ref(value_type& v) BOOST_NOEXCEPT : base_type(v)
    {
        // Check that referenced object alignment satisfies required alignment
        BOOST_ASSERT((((atomics::detail::uintptr_t)this->m_value) & (base_type::required_alignment - 1u)) == 0u);
    }

    BOOST_FORCEINLINE value_type operator= (value_arg_type v) const BOOST_NOEXCEPT
    {
        this->store(v);
        return v;
    }

    BOOST_FORCEINLINE operator value_type() const BOOST_NOEXCEPT
    {
        return this->load();
    }

    BOOST_DELETED_FUNCTION(atomic_ref& operator= (atomic_ref const&))
};

#if !defined(BOOST_ATOMIC_DETAIL_NO_CXX17_DEDUCTION_GUIDES)
template< typename T >
atomic_ref(T&) -> atomic_ref< T >;
#endif // !defined(BOOST_ATOMIC_DETAIL_NO_CXX17_DEDUCTION_GUIDES)

//! Atomic reference factory function
template< typename T >
BOOST_FORCEINLINE atomic_ref< T > make_atomic_ref(T& value) BOOST_NOEXCEPT
{
    return atomic_ref< T >(value);
}

} // namespace atomics

using atomics::atomic_ref;
using atomics::make_atomic_ref;

} // namespace boost

#include <boost/atomic/detail/footer.hpp>

#endif // BOOST_ATOMIC_ATOMIC_REF_HPP_INCLUDED_

/* atomic_ref.hpp
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
*/