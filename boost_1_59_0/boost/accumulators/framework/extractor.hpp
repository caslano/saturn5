///////////////////////////////////////////////////////////////////////////////
// extractor.hpp
//
//  Copyright 2005 Eric Niebler. Distributed under the Boost
//  Software License, Version 1.0. (See accompanying file
//  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_ACCUMULATORS_FRAMEWORK_EXTRACTOR_HPP_EAN_28_10_2005
#define BOOST_ACCUMULATORS_FRAMEWORK_EXTRACTOR_HPP_EAN_28_10_2005

#include <boost/preprocessor/cat.hpp>
#include <boost/preprocessor/tuple/rem.hpp>
#include <boost/preprocessor/array/size.hpp>
#include <boost/preprocessor/array/data.hpp>
#include <boost/preprocessor/array/elem.hpp>
#include <boost/preprocessor/seq/to_array.hpp>
#include <boost/preprocessor/seq/transform.hpp>
#include <boost/preprocessor/repetition/enum_params.hpp>
#include <boost/preprocessor/repetition/enum_trailing.hpp>
#include <boost/preprocessor/repetition/enum_trailing_params.hpp>
#include <boost/preprocessor/repetition/enum_trailing_binary_params.hpp>
#include <boost/preprocessor/repetition/repeat.hpp>
#include <boost/preprocessor/repetition/repeat_from_to.hpp>
#include <boost/parameter/binding.hpp>
#include <boost/mpl/bool.hpp>
#include <boost/mpl/if.hpp>
#include <boost/mpl/eval_if.hpp>
#include <boost/mpl/apply.hpp>
#include <boost/type_traits/remove_const.hpp>
#include <boost/type_traits/remove_reference.hpp>
#include <boost/accumulators/accumulators_fwd.hpp>
#include <boost/accumulators/framework/parameters/accumulator.hpp>

namespace boost { namespace accumulators
{

namespace detail
{
    template<typename AccumulatorSet, typename Feature>
    struct accumulator_set_result
    {
        typedef typename as_feature<Feature>::type feature_type;
        typedef typename mpl::apply<
            typename boost::remove_const<
                typename boost::remove_reference<AccumulatorSet>::type
            >::type
          , feature_type
        >::type::result_type type;
    };

    template<typename Args, typename Feature>
    struct argument_pack_result
      : accumulator_set_result<
            typename boost::remove_reference<
                typename parameter::binding<
                    typename boost::remove_const<
                        typename boost::remove_reference<Args>::type
                    >::type
                  , tag::accumulator
                >::type
            >::type
          , Feature
        >
    {
    };

    template<typename A, typename Feature>
    struct extractor_result
      : mpl::eval_if<
            detail::is_accumulator_set<A>
          , accumulator_set_result<A, Feature>
          , argument_pack_result<A, Feature>
        >
    {
    };

    template<typename Feature, typename AccumulatorSet>
    typename extractor_result<AccumulatorSet, Feature>::type
    do_extract(AccumulatorSet const &acc, mpl::true_)
    {
        typedef typename as_feature<Feature>::type feature_type;
        return extract_result<feature_type>(acc);
    }

    template<typename Feature, typename Args>
    typename extractor_result<Args, Feature>::type
    do_extract(Args const &args, mpl::false_)
    {
        typedef typename as_feature<Feature>::type feature_type;
        return find_accumulator<feature_type>(args[accumulator]).result(args);
    }

} // namespace detail


///////////////////////////////////////////////////////////////////////////////
/// Extracts the result associated with Feature from the specified accumulator_set.
template<typename Feature>
struct extractor
{
    typedef extractor<Feature> this_type;

    /// The result meta-function for determining the return type of the extractor
    template<typename F>
    struct result;

    template<typename A1>
    struct result<this_type(A1)>
      : detail::extractor_result<A1, Feature>
    {
    };

    /// Extract the result associated with Feature from the accumulator set
    /// \param acc The accumulator set object from which to extract the result
    template<typename Arg1>
    typename detail::extractor_result<Arg1, Feature>::type
    operator ()(Arg1 const &arg1) const
    {
        // Arg1 could be an accumulator_set or an argument pack containing
        // an accumulator_set. Dispatch accordingly.
        return detail::do_extract<Feature>(arg1, detail::is_accumulator_set<Arg1>());
    }

    /// \overload
    ///
    /// \param a1 Optional named parameter to be passed to the accumulator's result() function.
    template<typename AccumulatorSet, typename A1>
    typename detail::extractor_result<AccumulatorSet, Feature>::type
    operator ()(AccumulatorSet const &acc, A1 const &a1) const
    {
        BOOST_MPL_ASSERT((detail::is_accumulator_set<AccumulatorSet>));
        typedef typename as_feature<Feature>::type feature_type;
        return extract_result<feature_type>(acc, a1);
    }

    // ... other overloads generated by Boost.Preprocessor:

    /// INTERNAL ONLY
    ///
#define BOOST_ACCUMULATORS_EXTRACTOR_FUN_OP(z, n, _)                                    \
    template<BOOST_PP_ENUM_PARAMS_Z(z, n, typename A)>                                  \
    struct result<this_type(BOOST_PP_ENUM_PARAMS_Z(z, n, A))>                           \
      : detail::extractor_result<A1, Feature>                                           \
    {};                                                                                 \
    template<                                                                           \
        typename AccumulatorSet                                                         \
        BOOST_PP_ENUM_TRAILING_PARAMS_Z(z, n, typename A)                               \
    >                                                                                   \
    typename detail::extractor_result<AccumulatorSet, Feature>::type                    \
    operator ()(                                                                        \
        AccumulatorSet const &acc                                                       \
        BOOST_PP_ENUM_TRAILING_BINARY_PARAMS_Z(z, n, A, const &a)                       \
    ) const                                                                             \
    {                                                                                   \
        BOOST_MPL_ASSERT((detail::is_accumulator_set<AccumulatorSet>));                 \
        typedef typename as_feature<Feature>::type feature_type;                        \
        return extract_result<feature_type>(acc BOOST_PP_ENUM_TRAILING_PARAMS_Z(z, n, a));\
    }

    BOOST_PP_REPEAT_FROM_TO(
        2
      , BOOST_PP_INC(BOOST_ACCUMULATORS_MAX_ARGS)
      , BOOST_ACCUMULATORS_EXTRACTOR_FUN_OP
      , _
    )

#undef BOOST_ACCUMULATORS_EXTRACTOR_FUN_OP

    #ifdef BOOST_ACCUMULATORS_DOXYGEN_INVOKED
    /// \overload
    ///
    template<typename AccumulatorSet, typename A1, typename A2, ...>
    typename detail::extractor_result<AccumulatorSet, Feature>::type
    operator ()(AccumulatorSet const &acc, A1 const &a1, A2 const &a2, ...);
    #endif
};

}} // namespace boost::accumulators

/// INTERNAL ONLY
///
#define BOOST_ACCUMULATORS_ARRAY_REM(Array)                                                         \
    BOOST_PP_TUPLE_REM_CTOR(BOOST_PP_ARRAY_SIZE(Array), BOOST_PP_ARRAY_DATA(Array))

/// INTERNAL ONLY
///
#define BOOST_ACCUMULATORS_SEQ_REM(Seq)                                                             \
    BOOST_ACCUMULATORS_ARRAY_REM(BOOST_PP_SEQ_TO_ARRAY(Seq))

/// INTERNAL ONLY
///
#define BOOST_ACCUMULATORS_ARGS_OP(s, data, elem)                                                   \
    T ## s

/// INTERNAL ONLY
///
#define BOOST_ACCUMULATORS_PARAMS_OP(s, data, elem)                                                 \
    elem T ## s

/// INTERNAL ONLY
///
#define BOOST_ACCUMULATORS_MAKE_FEATURE(Tag, Feature, ParamsSeq)                                    \
    Tag::Feature<                                                                                   \
        BOOST_ACCUMULATORS_SEQ_REM(                                                                 \
            BOOST_PP_SEQ_TRANSFORM(BOOST_ACCUMULATORS_ARGS_OP, ~, ParamsSeq)                        \
        )                                                                                           \
    >

/// INTERNAL ONLY
///
#define BOOST_ACCUMULATORS_DEFINE_EXTRACTOR_FUN_IMPL(z, n, Tag, Feature, ParamsSeq)                 \
    template<                                                                                       \
        BOOST_ACCUMULATORS_SEQ_REM(                                                                 \
            BOOST_PP_SEQ_TRANSFORM(BOOST_ACCUMULATORS_PARAMS_OP, ~, ParamsSeq)                      \
        )                                                                                           \
      , typename Arg1                                                                               \
        BOOST_PP_ENUM_TRAILING_PARAMS_Z(z, n, typename A)                                           \
    >                                                                                               \
    typename boost::accumulators::detail::extractor_result<                                         \
        Arg1                                                                                        \
      , BOOST_ACCUMULATORS_MAKE_FEATURE(Tag, Feature, ParamsSeq)                                    \
    >::type                                                                                         \
    Feature(Arg1 const &arg1 BOOST_PP_ENUM_TRAILING_BINARY_PARAMS_Z(z, n, A, const &a) )            \
    {                                                                                               \
        typedef BOOST_ACCUMULATORS_MAKE_FEATURE(Tag, Feature, ParamsSeq) feature_type;              \
        return boost::accumulators::extractor<feature_type>()(                                      \
            arg1 BOOST_PP_ENUM_TRAILING_PARAMS_Z(z, n, a));                                         \
    }

/// INTERNAL ONLY
///
#define BOOST_ACCUMULATORS_DEFINE_EXTRACTOR_FUN(z, n, _)                                            \
    BOOST_ACCUMULATORS_DEFINE_EXTRACTOR_FUN_IMPL(                                                   \
        z                                                                                           \
      , n                                                                                           \
      , BOOST_PP_ARRAY_ELEM(0, _)                                                                   \
      , BOOST_PP_ARRAY_ELEM(1, _)                                                                   \
      , BOOST_PP_ARRAY_ELEM(2, _)                                                                   \
    )

#define BOOST_ACCUMULATORS_DEFINE_EXTRACTOR(Tag, Feature, ParamSeq)                                 \
    BOOST_PP_REPEAT(                                                                                \
        BOOST_PP_INC(BOOST_ACCUMULATORS_MAX_ARGS)                                                   \
      , BOOST_ACCUMULATORS_DEFINE_EXTRACTOR_FUN                                                     \
      , (3, (Tag, Feature, ParamSeq))                                                               \
    )

#endif

/* extractor.hpp
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
*/