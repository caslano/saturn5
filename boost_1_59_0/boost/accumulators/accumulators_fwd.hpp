///////////////////////////////////////////////////////////////////////////////
// accumulators_fwd.hpp
//
//  Copyright 2005 Eric Niebler. Distributed under the Boost
//  Software License, Version 1.0. (See accompanying file
//  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_ACCUMULATORS_ACCUMULATORS_FWD_HPP_EAN_28_10_2005
#define BOOST_ACCUMULATORS_ACCUMULATORS_FWD_HPP_EAN_28_10_2005

#include <boost/config.hpp>
#include <boost/core/enable_if.hpp>
#include <boost/parameter/is_argument_pack.hpp>
#include <boost/mpl/apply_fwd.hpp> // for mpl::na
#include <boost/mpl/limits/vector.hpp>
#include <boost/preprocessor/cat.hpp>
#include <boost/preprocessor/arithmetic/inc.hpp>
#include <boost/preprocessor/repetition/enum_params_with_a_default.hpp>
#include <boost/preprocessor/repetition/enum_trailing_params.hpp>
#include <boost/preprocessor/repetition/enum_trailing_binary_params.hpp>
#include <boost/preprocessor/repetition/repeat_from_to.hpp>
#include <boost/accumulators/numeric/functional_fwd.hpp>

#ifndef BOOST_ACCUMULATORS_MAX_FEATURES
  /// The maximum number of accumulators that may be put in an accumulator_set.
  /// Defaults to BOOST_MPL_LIMIT_VECTOR_SIZE (which defaults to 20).
# define BOOST_ACCUMULATORS_MAX_FEATURES BOOST_MPL_LIMIT_VECTOR_SIZE
#endif

#if BOOST_ACCUMULATORS_MAX_FEATURES > BOOST_MPL_LIMIT_VECTOR_SIZE
# error BOOST_ACCUMULATORS_MAX_FEATURES cannot be larger than BOOST_MPL_LIMIT_VECTOR_SIZE
#endif

#ifndef BOOST_ACCUMULATORS_MAX_ARGS
  /// The maximum number of arguments that may be specified to an accumulator_set's
  /// accumulation function. Defaults to 15.
# define BOOST_ACCUMULATORS_MAX_ARGS 15
#endif

#if BOOST_WORKAROUND(__GNUC__, == 3) \
 || BOOST_WORKAROUND(__EDG_VERSION__, BOOST_TESTED_AT(306))
# define BOOST_ACCUMULATORS_BROKEN_CONST_OVERLOADS
#endif

#ifdef BOOST_ACCUMULATORS_BROKEN_CONST_OVERLOADS
# include <boost/type_traits/is_const.hpp>
# define BOOST_ACCUMULATORS_PROTO_DISABLE_IF_IS_CONST(T)\
    , typename boost::disable_if<boost::is_const<T> >::type * = 0
#else
# define BOOST_ACCUMULATORS_PROTO_DISABLE_IF_IS_CONST(T)
#endif

#define BOOST_ACCUMULATORS_GCC_VERSION                                                              \
  (__GNUC__ * 10000 + __GNUC_MINOR__ * 100 + __GNUC_PATCHLEVEL__)

namespace boost { namespace accumulators
{

///////////////////////////////////////////////////////////////////////////////
// Named parameters tags
//
namespace tag
{
    struct sample;
    struct weight;
    struct accumulator;
    struct weights;
}

///////////////////////////////////////////////////////////////////////////////
// User-level features
//
namespace tag
{
    template<typename ValueType, typename Tag>
    struct value;

    template<typename Tag>
    struct value_tag;

    template<typename Referent, typename Tag>
    struct reference;

    template<typename Tag>
    struct reference_tag;

    template<typename Type, typename Tag = void, typename AccumulatorSet = void>
    struct external;

    template<typename Feature>
    struct droppable;
}

template<typename Accumulator>
struct droppable_accumulator_base;

template<typename Accumulator>
struct droppable_accumulator;

template<typename Accumulator>
struct with_cached_result;

template<typename Sample, typename Features, typename Weight = void>
struct accumulator_set;

template<typename Feature>
struct extractor;

template<typename Feature>
struct feature_of;

template<typename Feature>
struct as_feature;

template<typename Feature>
struct as_weighted_feature;

template<BOOST_PP_ENUM_PARAMS_WITH_A_DEFAULT(BOOST_ACCUMULATORS_MAX_FEATURES, typename Feature, mpl::na)>
struct depends_on;

template<BOOST_PP_ENUM_PARAMS_WITH_A_DEFAULT(BOOST_ACCUMULATORS_MAX_FEATURES, typename Feature, mpl::na)>
struct features;

template<typename Feature, typename AccumulatorSet>
typename mpl::apply<AccumulatorSet, Feature>::type const &
find_accumulator(AccumulatorSet const &acc);

template<typename Feature, typename AccumulatorSet>
typename mpl::apply<AccumulatorSet, Feature>::type::result_type
extract_result(AccumulatorSet const &acc);

namespace detail
{
    struct _enabler
    {
    };
}

// ... other overloads generated by Boost.Preprocessor:

/// INTERNAL ONLY
///
#define BOOST_ACCUMULATORS_EXTRACT_RESULT_FWD(z, n, _)                      \
    template<                                                               \
        typename Feature                                                    \
      , typename AccumulatorSet                                             \
        BOOST_PP_ENUM_TRAILING_PARAMS_Z(z, n, typename A)                   \
    >                                                                       \
    typename mpl::apply<AccumulatorSet, Feature>::type::result_type         \
    extract_result(                                                         \
        AccumulatorSet const &acc                                           \
        BOOST_PP_ENUM_TRAILING_BINARY_PARAMS_Z(z, n, A, const &a)           \
      , typename boost::enable_if<                                          \
            parameter::is_argument_pack<A0>                                 \
          , detail::_enabler                                                \
        >::type = detail::_enabler()                                        \
    );                                                                      \
    template<                                                               \
        typename Feature                                                    \
      , typename AccumulatorSet                                             \
        BOOST_PP_ENUM_TRAILING_PARAMS_Z(z, n, typename A)                   \
    >                                                                       \
    typename mpl::apply<AccumulatorSet, Feature>::type::result_type         \
    extract_result(                                                         \
        AccumulatorSet const &acc                                           \
        BOOST_PP_ENUM_TRAILING_BINARY_PARAMS_Z(z, n, A, const &a)           \
      , typename boost::disable_if<                                         \
            parameter::is_argument_pack<A0>                                 \
          , detail::_enabler                                                \
        >::type = detail::_enabler()                                        \
    );

/// INTERNAL ONLY
///
BOOST_PP_REPEAT_FROM_TO(
    1
  , BOOST_PP_INC(BOOST_ACCUMULATORS_MAX_ARGS)
  , BOOST_ACCUMULATORS_EXTRACT_RESULT_FWD
  , _
)

#undef BOOST_ACCUMULATORS_EXTRACT_RESULT_FWD

#ifdef BOOST_ACCUMULATORS_DOXYGEN_INVOKED
template<typename Feature, typename AccumulatorSet, typename A1, typename A2 ...>
typename mpl::apply<AccumulatorSet, Feature>::type::result_type
extract_result(AccumulatorSet const &acc, A1 const &a1, A2 const &a2 ...);
#endif

namespace impl
{
    using namespace numeric::operators;

    template<typename Accumulator, typename Tag>
    struct external_impl;
}

namespace detail
{
    template<typename Accumulator>
    struct feature_tag;

    template<typename Feature, typename Sample, typename Weight>
    struct to_accumulator;

    struct accumulator_set_base;

    template<typename T>
    struct is_accumulator_set;

    inline void ignore_variable(void const *) {}
}

}} // namespace boost::accumulators

#define BOOST_ACCUMULATORS_IGNORE_GLOBAL(X)                             \
    namespace detail                                                    \
    {                                                                   \
        struct BOOST_PP_CAT(ignore_, X)                                 \
        {                                                               \
            void ignore()                                               \
            {                                                           \
                boost::accumulators::detail::ignore_variable(&X);       \
            }                                                           \
        };                                                              \
    }                                                                   \
    /**/

#include <boost/parameter/nested_keyword.hpp>

#endif  // include guard


/* accumulators_fwd.hpp
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
*/