// Copyright David Abrahams 2006. Distributed under the Boost
// Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
#ifndef BOOST_CONCEPT_DETAIL_CONCEPT_DEF_DWA200651_HPP
# define BOOST_CONCEPT_DETAIL_CONCEPT_DEF_DWA200651_HPP
# include <boost/preprocessor/seq/for_each_i.hpp>
# include <boost/preprocessor/seq/enum.hpp>
# include <boost/preprocessor/comma_if.hpp>
# include <boost/preprocessor/cat.hpp>
#endif // BOOST_CONCEPT_DETAIL_CONCEPT_DEF_DWA200651_HPP

// BOOST_concept(SomeName, (p1)(p2)...(pN))
//
// Expands to "template <class p1, class p2, ...class pN> struct SomeName"
//
// Also defines an equivalent SomeNameConcept for backward compatibility.
// Maybe in the next release we can kill off the "Concept" suffix for good.
# define BOOST_concept(name, params)                                            \
    template < BOOST_PP_SEQ_FOR_EACH_I(BOOST_CONCEPT_typename,~,params) >       \
    struct name; /* forward declaration */                                      \
                                                                                \
    template < BOOST_PP_SEQ_FOR_EACH_I(BOOST_CONCEPT_typename,~,params) >       \
    struct BOOST_PP_CAT(name,Concept)                                           \
      : name< BOOST_PP_SEQ_ENUM(params) >                                       \
    {                                                                           \
    };                                                                          \
                                                                                \
    template < BOOST_PP_SEQ_FOR_EACH_I(BOOST_CONCEPT_typename,~,params) >       \
    struct name                                                                
    
// Helper for BOOST_concept, above.
# define BOOST_CONCEPT_typename(r, ignored, index, t) \
    BOOST_PP_COMMA_IF(index) typename t


/* concept_def.hpp
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
*/