// Copyright David Abrahams 2006. Distributed under the Boost
// Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
#ifndef BOOST_CONCEPT_DETAIL_HAS_CONSTRAINTS_DWA2006429_HPP
# define BOOST_CONCEPT_DETAIL_HAS_CONSTRAINTS_DWA2006429_HPP

# include <boost/type_traits/integral_constant.hpp>
# include <boost/config/workaround.hpp>
# include <boost/concept/detail/backward_compatibility.hpp>

namespace boost { namespace concepts {

namespace detail
{ 

// Here we implement the metafunction that detects whether a
// constraints metafunction exists
  typedef char yes;
  typedef char (&no)[2];

  template <class Model, void (Model::*)()>
  struct wrap_constraints {};
    
#if BOOST_WORKAROUND(__SUNPRO_CC, <= 0x580) || defined(__CUDACC__)
  // Work around the following bogus error in Sun Studio 11, by
  // turning off the has_constraints function entirely:
  //    Error: complex expression not allowed in dependent template
  //    argument expression
  inline no has_constraints_(...);
#else
  template <class Model>
  inline yes has_constraints_(Model*, wrap_constraints<Model,&Model::constraints>* = 0);
  inline no has_constraints_(...);
#endif
}

// This would be called "detail::has_constraints," but it has a strong
// tendency to show up in error messages.
template <class Model>
struct not_satisfied
{
    BOOST_STATIC_CONSTANT(
        bool
      , value = sizeof( detail::has_constraints_((Model*)0) ) == sizeof(detail::yes) );
    typedef boost::integral_constant<bool, value> type;
};

}} // namespace boost::concepts::detail

#endif // BOOST_CONCEPT_DETAIL_HAS_CONSTRAINTS_DWA2006429_HPP

/* has_constraints.hpp
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
*/