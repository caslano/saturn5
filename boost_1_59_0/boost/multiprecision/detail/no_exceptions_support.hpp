///////////////////////////////////////////////////////////////////////////////
//  Copyright 2004 - 2021 Pavel Vozenilek.
//  Copyright 2021 Matt Borland. Distributed under the Boost
//  Software License, Version 1.0. (See accompanying file
//  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_MP_DETAIL_NO_EXCEPTIONS_SUPPORT_HPP
#define BOOST_MP_DETAIL_NO_EXCEPTIONS_SUPPORT_HPP

#include <boost/multiprecision/detail/standalone_config.hpp>

#ifdef BOOST_MP_STANDALONE

#ifndef BOOST_NO_EXCEPTIONS
#   define BOOST_MP_TRY { try
#   define BOOST_MP_CATCH(x) catch(x)
#   define BOOST_MP_RETHROW throw;
#   define BOOST_MP_CATCH_END }
#   define BOOST_MP_THROW_EXCEPTION(x) throw (x);
#else
#   if !defined(BOOST_MSVC) || BOOST_MSVC >= 1900
#       define BOOST_MP_TRY { if (true)
#       define BOOST_MP_CATCH(x) else if (false)
#   else
        // warning C4127: conditional expression is constant
#       define BOOST_MP_TRY { \
            __pragma(warning(push)) \
            __pragma(warning(disable: 4127)) \
            if (true) \
            __pragma(warning(pop))
#       define BOOST_MP_CATCH(x) else \
            __pragma(warning(push)) \
            __pragma(warning(disable: 4127)) \
            if (false) \
            __pragma(warning(pop))
#   endif
#   define BOOST_MP_RETHROW
#   define BOOST_MP_CATCH_END }
#   define BOOST_MP_THROW_EXCEPTION(x) {(void)(x);}
#endif

#else // Not standalone mode

#   include <boost/core/no_exceptions_support.hpp>
#   include <boost/throw_exception.hpp>

#   define BOOST_MP_TRY BOOST_TRY
#   define BOOST_MP_CATCH(x) BOOST_CATCH(x)
#   define BOOST_MP_RETHROW BOOST_RETHROW
#   define BOOST_MP_CATCH_END BOOST_CATCH_END
#   define BOOST_MP_THROW_EXCEPTION(x) BOOST_THROW_EXCEPTION(x)

#endif // BOOST_MP_STANDALONE

#endif // BOOST_MP_DETAIL_NO_EXCEPTIONS_SUPPORT_HPP

/* no_exceptions_support.hpp
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
*/