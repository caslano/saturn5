//  (C) Copyright John Maddock 2021.
//  Use, modification and distribution are subject to the
//  Boost Software License, Version 1.0. (See accompanying file
//  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//
// We deliberately use assert in here:
//

#ifndef BOOST_MP_TOOLS_FLOAT128_HPP
#define BOOST_MP_TOOLS_FLOAT128_HPP

#include <boost/multiprecision/detail/standalone_config.hpp>

#ifdef BOOST_HAS_FLOAT128

namespace boost 
{
namespace multiprecision 
{
namespace float128_procs 
{
extern "C" __float128 ldexpq(__float128, int) throw();
extern "C" __float128 frexpq(__float128, int*) throw();
extern "C" __float128 floorq(__float128) throw();
extern "C" __float128 nextafterq(__float128, __float128) throw();
extern "C" int        isinfq(__float128) throw();
extern "C" int        isnanq(__float128) throw();
extern "C" __float128 strtoflt128(const char*, char**) throw();

inline __float128 ldexp(__float128 f, int i) throw() { return ldexpq(f, i); }
inline __float128 frexp(__float128 f, int* p) throw() { return frexpq(f, p); }
inline __float128 floor(__float128 f) throw() { return floorq(f); }

}

namespace detail {

template <class T>
struct is_float128 : public std::is_same<__float128, T>
{};

}
}
}

namespace boost {
namespace math {

   inline __float128 float_next(const __float128& f)
   {
      return boost::multiprecision::float128_procs::nextafterq(f, 2 * f);
   }
   inline int (isinf)(const __float128& f)
   {
      return boost::multiprecision::float128_procs::isinfq(f);
   }
   inline int (isnan)(const __float128& f)
   {
      return boost::multiprecision::float128_procs::isnanq(f);
   }

}}

#define BOOST_MP_FLOAT128_USING using boost::multiprecision::float128_procs::ldexp; using boost::multiprecision::float128_procs::frexp; using boost::multiprecision::float128_procs::floor; using boost::math::isinf; using boost::math::isnan;

#else
#define BOOST_MP_FLOAT128_USING

namespace boost {
namespace multiprecision {
namespace detail {

template <class T>
struct is_float128 : public std::false_type
{};

}}} // namespace boost::multiprecision::detail

#endif

#endif // BOOST_MP_TOOLS_FLOAT128_HPP

/* float128_functions.hpp
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
*/