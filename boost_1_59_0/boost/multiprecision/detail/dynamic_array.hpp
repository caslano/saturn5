///////////////////////////////////////////////////////////////////////////////
//  Copyright 2012 John Maddock.
//  Copyright Christopher Kormanyos 2013. Distributed under the Boost
//  Software License, Version 1.0. (See accompanying file
//  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//

#ifndef BOOST_MP_DETAIL_DYNAMIC_ARRAY_HPP
#define BOOST_MP_DETAIL_DYNAMIC_ARRAY_HPP

#include <algorithm>
#include <cstddef>
#include <cstdint>
#include <vector>

#include <boost/multiprecision/detail/rebind.hpp>

namespace boost { namespace multiprecision { namespace backends { namespace detail {
template <class ValueType, const std::uint32_t ElemNumber, class my_allocator>
struct dynamic_array : public std::vector<ValueType, typename rebind<ValueType, my_allocator>::type>
{
private:
   using base_class_type = std::vector<ValueType, typename rebind<ValueType, my_allocator>::type>;

public:
   dynamic_array()
      : base_class_type(static_cast<typename base_class_type::size_type>(ElemNumber),
                        static_cast<typename base_class_type::value_type>(0u)) { }

   dynamic_array(std::initializer_list<std::uint32_t> lst)
      : base_class_type(static_cast<typename base_class_type::size_type>(ElemNumber),
                        static_cast<typename base_class_type::value_type>(0u))
   {
      std::copy(lst.begin(),
                lst.begin() + (std::min)(std::size_t(lst.size()), std::size_t(ElemNumber)),
                data());
   }

         typename base_class_type::value_type* data()       { return &(*(this->begin())); }
   const typename base_class_type::value_type* data() const { return &(*(this->begin())); }
};
}}}} // namespace boost::multiprecision::backends::detail

#endif // BOOST_MP_DETAIL_DYNAMIC_ARRAY_HPP

/* dynamic_array.hpp
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
*/