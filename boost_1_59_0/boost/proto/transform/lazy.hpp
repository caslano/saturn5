///////////////////////////////////////////////////////////////////////////////
/// \file lazy.hpp
/// Contains definition of the lazy<> transform.
//
//  Copyright 2008 Eric Niebler. Distributed under the Boost
//  Software License, Version 1.0. (See accompanying file
//  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_PROTO_TRANSFORM_LAZY_HPP_EAN_12_02_2007
#define BOOST_PROTO_TRANSFORM_LAZY_HPP_EAN_12_02_2007

#include <boost/preprocessor/iteration/iterate.hpp>
#include <boost/preprocessor/repetition/enum_params.hpp>
#include <boost/preprocessor/repetition/enum_trailing_params.hpp>
#include <boost/proto/proto_fwd.hpp>
#include <boost/proto/transform/make.hpp>
#include <boost/proto/transform/call.hpp>
#include <boost/proto/transform/impl.hpp>
#include <boost/proto/transform/detail/pack.hpp>

namespace boost { namespace proto
{
    /// \brief A PrimitiveTransform that uses <tt>make\<\></tt> to build
    /// a CallableTransform, and then uses <tt>call\<\></tt> to apply it.
    ///
    /// <tt>lazy\<\></tt> is useful as a higher-order transform, when the
    /// transform to be applied depends on the current state of the
    /// transformation. The invocation of the <tt>make\<\></tt> transform
    /// evaluates any nested transforms, and the resulting type is treated
    /// as a CallableTransform, which is evaluated with <tt>call\<\></tt>.
    template<typename Object>
    struct lazy : transform<lazy<Object> >
    {
        template<typename Expr, typename State, typename Data>
        struct impl
          : call<
                typename make<Object>::template impl<Expr, State, Data>::result_type
            >::template impl<Expr, State, Data>
        {};
    };

    /// INTERNAL ONLY
    template<typename Fun>
    struct lazy<detail::msvc_fun_workaround<Fun> >
      : lazy<Fun>
    {};

    #include <boost/proto/transform/detail/lazy.hpp>

    /// INTERNAL ONLY
    ///
    template<typename Object>
    struct is_callable<lazy<Object> >
      : mpl::true_
    {};

}}

#endif

/* lazy.hpp
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
*/