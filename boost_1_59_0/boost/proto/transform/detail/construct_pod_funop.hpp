#if !defined(BOOST_PROTO_DONT_USE_PREPROCESSED_FILES)

    #include <boost/proto/transform/detail/preprocessed/construct_pod_funop.hpp>

#elif !defined(BOOST_PP_IS_ITERATING)

    #if defined(__WAVE__) && defined(BOOST_PROTO_CREATE_PREPROCESSED_FILES)
        #pragma wave option(preserve: 2, line: 0, output: "preprocessed/construct_pod_funop.hpp")
    #endif

    ///////////////////////////////////////////////////////////////////////////////
    /// \file construct_pod_funop.hpp
    /// Overloads of construct_\<\>::operator().
    //
    //  Copyright 2008 Eric Niebler. Distributed under the Boost
    //  Software License, Version 1.0. (See accompanying file
    //  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

    #if defined(__WAVE__) && defined(BOOST_PROTO_CREATE_PREPROCESSED_FILES)
        #pragma wave option(preserve: 1)
    #endif

    #define BOOST_PP_ITERATION_PARAMS_1                                                         \
        (3, (1, BOOST_PROTO_MAX_ARITY, <boost/proto/transform/detail/construct_pod_funop.hpp>))
    #include BOOST_PP_ITERATE()

    #if defined(__WAVE__) && defined(BOOST_PROTO_CREATE_PREPROCESSED_FILES)
        #pragma wave option(output: null)
    #endif

#else

    #define N BOOST_PP_ITERATION()

    template<BOOST_PP_ENUM_PARAMS(N, typename A)>
    BOOST_FORCEINLINE
    Type operator ()(BOOST_PP_ENUM_BINARY_PARAMS(N, A, &a)) const
    {
        Type that = {BOOST_PP_ENUM_PARAMS(N, a)};
        return that;
    }

    #undef N

#endif

/* construct_pod_funop.hpp
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
*/