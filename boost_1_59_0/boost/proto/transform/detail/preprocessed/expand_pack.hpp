    ///////////////////////////////////////////////////////////////////////////////
    /// \file expand_pack.hpp
    /// Contains helpers for pseudo-pack expansion.
    //
    //  Copyright 2012 Eric Niebler. Distributed under the Boost
    //  Software License, Version 1.0. (See accompanying file
    //  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
        template<typename Tfx, typename Ret >
        struct expand_pattern_helper<Tfx, Ret()>
        {
            typedef Ret (*type)();
            typedef mpl::bool_< false> applied;
        };
        template<typename Tfx, typename Ret , typename A0>
        struct expand_pattern_helper<Tfx, Ret(A0)>
        {
            typedef Ret (*type)(typename expand_pattern_helper<Tfx, A0>::type);
            typedef mpl::bool_<expand_pattern_helper<Tfx, A0>::applied::value || false> applied;
        };
        template<typename Tfx, typename Ret , typename A0 , typename A1>
        struct expand_pattern_helper<Tfx, Ret(A0 , A1)>
        {
            typedef Ret (*type)(typename expand_pattern_helper<Tfx, A0>::type , typename expand_pattern_helper<Tfx, A1>::type);
            typedef mpl::bool_<expand_pattern_helper<Tfx, A0>::applied::value || expand_pattern_helper<Tfx, A1>::applied::value || false> applied;
        };
        template<typename Tfx, typename Ret , typename A0 , typename A1 , typename A2>
        struct expand_pattern_helper<Tfx, Ret(A0 , A1 , A2)>
        {
            typedef Ret (*type)(typename expand_pattern_helper<Tfx, A0>::type , typename expand_pattern_helper<Tfx, A1>::type , typename expand_pattern_helper<Tfx, A2>::type);
            typedef mpl::bool_<expand_pattern_helper<Tfx, A0>::applied::value || expand_pattern_helper<Tfx, A1>::applied::value || expand_pattern_helper<Tfx, A2>::applied::value || false> applied;
        };
        template<typename Tfx, typename Ret , typename A0 , typename A1 , typename A2 , typename A3>
        struct expand_pattern_helper<Tfx, Ret(A0 , A1 , A2 , A3)>
        {
            typedef Ret (*type)(typename expand_pattern_helper<Tfx, A0>::type , typename expand_pattern_helper<Tfx, A1>::type , typename expand_pattern_helper<Tfx, A2>::type , typename expand_pattern_helper<Tfx, A3>::type);
            typedef mpl::bool_<expand_pattern_helper<Tfx, A0>::applied::value || expand_pattern_helper<Tfx, A1>::applied::value || expand_pattern_helper<Tfx, A2>::applied::value || expand_pattern_helper<Tfx, A3>::applied::value || false> applied;
        };
        template<typename Tfx, typename Ret , typename A0 , typename A1 , typename A2 , typename A3 , typename A4>
        struct expand_pattern_helper<Tfx, Ret(A0 , A1 , A2 , A3 , A4)>
        {
            typedef Ret (*type)(typename expand_pattern_helper<Tfx, A0>::type , typename expand_pattern_helper<Tfx, A1>::type , typename expand_pattern_helper<Tfx, A2>::type , typename expand_pattern_helper<Tfx, A3>::type , typename expand_pattern_helper<Tfx, A4>::type);
            typedef mpl::bool_<expand_pattern_helper<Tfx, A0>::applied::value || expand_pattern_helper<Tfx, A1>::applied::value || expand_pattern_helper<Tfx, A2>::applied::value || expand_pattern_helper<Tfx, A3>::applied::value || expand_pattern_helper<Tfx, A4>::applied::value || false> applied;
        };
        template<typename Tfx, typename Ret , typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5>
        struct expand_pattern_helper<Tfx, Ret(A0 , A1 , A2 , A3 , A4 , A5)>
        {
            typedef Ret (*type)(typename expand_pattern_helper<Tfx, A0>::type , typename expand_pattern_helper<Tfx, A1>::type , typename expand_pattern_helper<Tfx, A2>::type , typename expand_pattern_helper<Tfx, A3>::type , typename expand_pattern_helper<Tfx, A4>::type , typename expand_pattern_helper<Tfx, A5>::type);
            typedef mpl::bool_<expand_pattern_helper<Tfx, A0>::applied::value || expand_pattern_helper<Tfx, A1>::applied::value || expand_pattern_helper<Tfx, A2>::applied::value || expand_pattern_helper<Tfx, A3>::applied::value || expand_pattern_helper<Tfx, A4>::applied::value || expand_pattern_helper<Tfx, A5>::applied::value || false> applied;
        };
        template<typename Tfx, typename Ret , typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6>
        struct expand_pattern_helper<Tfx, Ret(A0 , A1 , A2 , A3 , A4 , A5 , A6)>
        {
            typedef Ret (*type)(typename expand_pattern_helper<Tfx, A0>::type , typename expand_pattern_helper<Tfx, A1>::type , typename expand_pattern_helper<Tfx, A2>::type , typename expand_pattern_helper<Tfx, A3>::type , typename expand_pattern_helper<Tfx, A4>::type , typename expand_pattern_helper<Tfx, A5>::type , typename expand_pattern_helper<Tfx, A6>::type);
            typedef mpl::bool_<expand_pattern_helper<Tfx, A0>::applied::value || expand_pattern_helper<Tfx, A1>::applied::value || expand_pattern_helper<Tfx, A2>::applied::value || expand_pattern_helper<Tfx, A3>::applied::value || expand_pattern_helper<Tfx, A4>::applied::value || expand_pattern_helper<Tfx, A5>::applied::value || expand_pattern_helper<Tfx, A6>::applied::value || false> applied;
        };
        template<typename Tfx, typename Ret , typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7>
        struct expand_pattern_helper<Tfx, Ret(A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7)>
        {
            typedef Ret (*type)(typename expand_pattern_helper<Tfx, A0>::type , typename expand_pattern_helper<Tfx, A1>::type , typename expand_pattern_helper<Tfx, A2>::type , typename expand_pattern_helper<Tfx, A3>::type , typename expand_pattern_helper<Tfx, A4>::type , typename expand_pattern_helper<Tfx, A5>::type , typename expand_pattern_helper<Tfx, A6>::type , typename expand_pattern_helper<Tfx, A7>::type);
            typedef mpl::bool_<expand_pattern_helper<Tfx, A0>::applied::value || expand_pattern_helper<Tfx, A1>::applied::value || expand_pattern_helper<Tfx, A2>::applied::value || expand_pattern_helper<Tfx, A3>::applied::value || expand_pattern_helper<Tfx, A4>::applied::value || expand_pattern_helper<Tfx, A5>::applied::value || expand_pattern_helper<Tfx, A6>::applied::value || expand_pattern_helper<Tfx, A7>::applied::value || false> applied;
        };
        template<typename Tfx, typename Ret , typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8>
        struct expand_pattern_helper<Tfx, Ret(A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8)>
        {
            typedef Ret (*type)(typename expand_pattern_helper<Tfx, A0>::type , typename expand_pattern_helper<Tfx, A1>::type , typename expand_pattern_helper<Tfx, A2>::type , typename expand_pattern_helper<Tfx, A3>::type , typename expand_pattern_helper<Tfx, A4>::type , typename expand_pattern_helper<Tfx, A5>::type , typename expand_pattern_helper<Tfx, A6>::type , typename expand_pattern_helper<Tfx, A7>::type , typename expand_pattern_helper<Tfx, A8>::type);
            typedef mpl::bool_<expand_pattern_helper<Tfx, A0>::applied::value || expand_pattern_helper<Tfx, A1>::applied::value || expand_pattern_helper<Tfx, A2>::applied::value || expand_pattern_helper<Tfx, A3>::applied::value || expand_pattern_helper<Tfx, A4>::applied::value || expand_pattern_helper<Tfx, A5>::applied::value || expand_pattern_helper<Tfx, A6>::applied::value || expand_pattern_helper<Tfx, A7>::applied::value || expand_pattern_helper<Tfx, A8>::applied::value || false> applied;
        };
        template<typename Tfx, typename Ret , typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9>
        struct expand_pattern_helper<Tfx, Ret(A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9)>
        {
            typedef Ret (*type)(typename expand_pattern_helper<Tfx, A0>::type , typename expand_pattern_helper<Tfx, A1>::type , typename expand_pattern_helper<Tfx, A2>::type , typename expand_pattern_helper<Tfx, A3>::type , typename expand_pattern_helper<Tfx, A4>::type , typename expand_pattern_helper<Tfx, A5>::type , typename expand_pattern_helper<Tfx, A6>::type , typename expand_pattern_helper<Tfx, A7>::type , typename expand_pattern_helper<Tfx, A8>::type , typename expand_pattern_helper<Tfx, A9>::type);
            typedef mpl::bool_<expand_pattern_helper<Tfx, A0>::applied::value || expand_pattern_helper<Tfx, A1>::applied::value || expand_pattern_helper<Tfx, A2>::applied::value || expand_pattern_helper<Tfx, A3>::applied::value || expand_pattern_helper<Tfx, A4>::applied::value || expand_pattern_helper<Tfx, A5>::applied::value || expand_pattern_helper<Tfx, A6>::applied::value || expand_pattern_helper<Tfx, A7>::applied::value || expand_pattern_helper<Tfx, A8>::applied::value || expand_pattern_helper<Tfx, A9>::applied::value || false> applied;
        };

/* expand_pack.hpp
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
*/