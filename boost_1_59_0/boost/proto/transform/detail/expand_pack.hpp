#if !defined(BOOST_PROTO_DONT_USE_PREPROCESSED_FILES)

    #include <boost/proto/transform/detail/preprocessed/expand_pack.hpp>

#elif !defined(BOOST_PP_IS_ITERATING)

    #if defined(__WAVE__) && defined(BOOST_PROTO_CREATE_PREPROCESSED_FILES)
        #pragma wave option(preserve: 2, line: 0, output: "preprocessed/expand_pack.hpp")
    #endif

    ///////////////////////////////////////////////////////////////////////////////
    /// \file expand_pack.hpp
    /// Contains helpers for pseudo-pack expansion.
    //
    //  Copyright 2012 Eric Niebler. Distributed under the Boost
    //  Software License, Version 1.0. (See accompanying file
    //  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

    #if defined(__WAVE__) && defined(BOOST_PROTO_CREATE_PREPROCESSED_FILES)
        #pragma wave option(preserve: 1)
    #endif

    #define BOOST_PP_ITERATION_PARAMS_1                                                             \
        (3, (0, BOOST_PROTO_MAX_ARITY, <boost/proto/transform/detail/expand_pack.hpp>))
    #include BOOST_PP_ITERATE()

    #if defined(__WAVE__) && defined(BOOST_PROTO_CREATE_PREPROCESSED_FILES)
        #pragma wave option(output: null)
    #endif

#else
    #define N BOOST_PP_ITERATION()
    #define M0(Z, X, DATA) typename expand_pattern_helper<Tfx, BOOST_PP_CAT(A, X)>::type
    #define M1(Z, X, DATA) expand_pattern_helper<Tfx, BOOST_PP_CAT(A, X)>::applied::value ||

        template<typename Tfx, typename Ret BOOST_PP_ENUM_TRAILING_PARAMS(N, typename A)>
        struct expand_pattern_helper<Tfx, Ret(BOOST_PP_ENUM_PARAMS(N, A))>
        {
            typedef Ret (*type)(BOOST_PP_ENUM(N, M0, ~));
            typedef mpl::bool_<BOOST_PP_REPEAT(N, M1, ~) false> applied;
        };

    #undef M1
    #undef M0
    #undef N
#endif

/* expand_pack.hpp
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
*/