///////////////////////////////////////////////////////////////////////////////
/// \file push_back.hpp
/// Proto callables Fusion push_back
//
//  Copyright 2010 Eric Niebler. Distributed under the Boost
//  Software License, Version 1.0. (See accompanying file
//  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_PROTO_FUNCTIONAL_FUSION_PUSH_BACK_HPP_EAN_11_27_2010
#define BOOST_PROTO_FUNCTIONAL_FUSION_PUSH_BACK_HPP_EAN_11_27_2010

#include <boost/type_traits/add_const.hpp>
#include <boost/type_traits/remove_const.hpp>
#include <boost/type_traits/remove_reference.hpp>
#include <boost/fusion/include/push_back.hpp>
#include <boost/proto/proto_fwd.hpp>

namespace boost { namespace proto { namespace functional
{
    /// \brief A PolymorphicFunctionObject type that invokes the
    /// \c fusion::push_back() algorithm on its argument.
    ///
    /// A PolymorphicFunctionObject type that invokes the
    /// \c fusion::push_back() algorithm on its argument.
    struct push_back
    {
        BOOST_PROTO_CALLABLE()

        template<typename Sig>
        struct result;

        template<typename This, typename Seq, typename T>
        struct result<This(Seq, T)>
          : fusion::result_of::push_back<
                typename boost::add_const<typename boost::remove_reference<Seq>::type>::type
              , typename boost::remove_const<typename boost::remove_reference<T>::type>::type
            >
        {};

        template<typename Seq, typename T>
        typename fusion::result_of::push_back<Seq const, T>::type
        operator ()(Seq const &seq, T const &t) const
        {
            return fusion::push_back(seq, t);
        }
    };
}}}

#endif

/* push_back.hpp
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
*/