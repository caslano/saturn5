#if !defined(BOOST_PROTO_DONT_USE_PREPROCESSED_FILES)

    #include <boost/proto/detail/preprocessed/or_n.hpp>

#elif !defined(BOOST_PP_IS_ITERATING)

    #if defined(__WAVE__) && defined(BOOST_PROTO_CREATE_PREPROCESSED_FILES)
        #pragma wave option(preserve: 2, line: 0, output: "preprocessed/or_n.hpp")
    #endif

    ///////////////////////////////////////////////////////////////////////////////
    /// \file or_n.hpp
    /// Definitions of or_N
    //
    //  Copyright 2008 Eric Niebler. Distributed under the Boost
    //  Software License, Version 1.0. (See accompanying file
    //  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

    #if defined(__WAVE__) && defined(BOOST_PROTO_CREATE_PREPROCESSED_FILES)
        #pragma wave option(preserve: 1)
    #endif

    #define BOOST_PP_ITERATION_PARAMS_1                                                             \
        (3, (2, BOOST_PROTO_MAX_LOGICAL_ARITY, <boost/proto/detail/or_n.hpp>))
    #include BOOST_PP_ITERATE()

    #if defined(__WAVE__) && defined(BOOST_PROTO_CREATE_PREPROCESSED_FILES)
        #pragma wave option(output: null)
    #endif

#else // BOOST_PP_IS_ITERATING

    #define N BOOST_PP_ITERATION()

    template<bool B, typename Expr, typename BasicExpr, BOOST_PP_ENUM_PARAMS(N, typename G)>
    struct BOOST_PP_CAT(or_, N)
    #if 2 == N
      : mpl::bool_<matches_<Expr, BasicExpr, typename G1::proto_grammar>::value>
    {
        typedef G1 which;
    };
    #else
      : BOOST_PP_CAT(or_, BOOST_PP_DEC(N))<
            matches_<Expr, BasicExpr, typename G1::proto_grammar>::value
          , Expr, BasicExpr, BOOST_PP_ENUM_SHIFTED_PARAMS(N, G)
        >
    {};
    #endif

    template<typename Expr, typename BasicExpr BOOST_PP_ENUM_TRAILING_PARAMS(N, typename G)>
    struct BOOST_PP_CAT(or_, N)<true, Expr, BasicExpr, BOOST_PP_ENUM_PARAMS(N, G)>
      : mpl::true_
    {
        typedef G0 which;
    };

    #undef N

#endif

/* or_n.hpp
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
*/