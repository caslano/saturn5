#if !defined(BOOST_PROTO_DONT_USE_PREPROCESSED_FILES)

    #include <boost/proto/detail/preprocessed/class_member_traits.hpp>

#elif !defined(BOOST_PP_IS_ITERATING)

    #if defined(__WAVE__) && defined(BOOST_PROTO_CREATE_PREPROCESSED_FILES)
        #pragma wave option(preserve: 2, line: 0, output: "preprocessed/class_member_traits.hpp")
    #endif

    ///////////////////////////////////////////////////////////////////////////////
    // class_member_traits.hpp
    // Contains specializations of the class_member_traits\<\> class template.
    //
    //  Copyright 2008 Eric Niebler. Distributed under the Boost
    //  Software License, Version 1.0. (See accompanying file
    //  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

    #if defined(__WAVE__) && defined(BOOST_PROTO_CREATE_PREPROCESSED_FILES)
        #pragma wave option(preserve: 1)
    #endif

    #define BOOST_PP_ITERATION_PARAMS_1                                                             \
        (3, (0, BOOST_PROTO_MAX_ARITY, <boost/proto/detail/class_member_traits.hpp>))
    #include BOOST_PP_ITERATE()

    #if defined(__WAVE__) && defined(BOOST_PROTO_CREATE_PREPROCESSED_FILES)
        #pragma wave option(output: null)
    #endif

#else

    #define N BOOST_PP_ITERATION()

    template<typename T, typename U BOOST_PP_ENUM_TRAILING_PARAMS(N, typename A)>
    struct class_member_traits<T (U::*)(BOOST_PP_ENUM_PARAMS(N, A))>
    {
        typedef U class_type;
        typedef T result_type;
    };

    template<typename T, typename U BOOST_PP_ENUM_TRAILING_PARAMS(N, typename A)>
    struct class_member_traits<T (U::*)(BOOST_PP_ENUM_PARAMS(N, A)) const>
    {
        typedef U class_type;
        typedef T result_type;
    };

    #undef N

#endif // BOOST_PROTO_DONT_USE_PREPROCESSED_FILES

/* class_member_traits.hpp
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
*/