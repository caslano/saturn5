// Copyright 2002 The Trustees of Indiana University.

// Use, modification and distribution is subject to the Boost Software 
// License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

//  Boost.MultiArray Library
//  Authors: Ronald Garcia
//           Jeremy Siek
//           Andrew Lumsdaine
//  See http://www.boost.org/libs/multi_array for documentation.

#ifndef BOOST_MULTI_ARRAY_INDEX_GEN_HPP
#define BOOST_MULTI_ARRAY_INDEX_GEN_HPP

#include "boost/array.hpp"
#include "boost/multi_array/index_range.hpp"
#include "boost/multi_array/range_list.hpp"
#include "boost/multi_array/types.hpp"
#include <algorithm> 
#include <cstddef>

namespace boost {
namespace detail {
namespace multi_array {


template <int NumRanges, int NumDims>
struct index_gen {
private:
  typedef ::boost::detail::multi_array::index index;
  typedef ::boost::detail::multi_array::size_type size_type;
  typedef index_range<index,size_type> range;
public:
  template <int Dims, int Ranges>
  struct gen_type {
    typedef index_gen<Ranges,Dims> type;
  };

  typedef typename range_list_generator<range,NumRanges>::type range_list;
  range_list ranges_;

  index_gen() { }

  template <int ND>
  explicit index_gen(const index_gen<NumRanges-1,ND>& rhs,
            const range& r)
  {
    std::copy(rhs.ranges_.begin(),rhs.ranges_.end(),ranges_.begin());
    *ranges_.rbegin() = r;
  }

  index_gen<NumRanges+1,NumDims+1>
  operator[](const range& r) const
  {
    index_gen<NumRanges+1,NumDims+1> tmp;
    std::copy(ranges_.begin(),ranges_.end(),tmp.ranges_.begin());
    *tmp.ranges_.rbegin() = r;
    return tmp;
  }

  index_gen<NumRanges+1,NumDims>
  operator[](index idx) const
  {
    index_gen<NumRanges+1,NumDims> tmp;
    std::copy(ranges_.begin(),ranges_.end(),tmp.ranges_.begin());
    *tmp.ranges_.rbegin() = range(idx);
    return tmp;
  }    

  static index_gen<0,0> indices() {
    return index_gen<0,0>();
  }
};

} // namespace multi_array
} // namespace detail
} // namespace boost


#endif

/* index_gen.hpp
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
*/