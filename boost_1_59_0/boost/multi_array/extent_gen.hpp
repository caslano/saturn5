// Copyright 2002 The Trustees of Indiana University.

// Use, modification and distribution is subject to the Boost Software 
// License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

//  Boost.MultiArray Library
//  Authors: Ronald Garcia
//           Jeremy Siek
//           Andrew Lumsdaine
//  See http://www.boost.org/libs/multi_array for documentation.

#ifndef BOOST_MULTI_ARRAY_EXTENT_GEN_HPP
#define BOOST_MULTI_ARRAY_EXTENT_GEN_HPP

#include "boost/multi_array/extent_range.hpp"
#include "boost/multi_array/range_list.hpp"
#include "boost/multi_array/types.hpp"
#include "boost/array.hpp"
#include <algorithm>

namespace boost {
namespace detail {
namespace multi_array {


template <std::size_t NumRanges>
class extent_gen {
public:
  typedef boost::detail::multi_array::index index;
  typedef boost::detail::multi_array::size_type size_type;
  typedef extent_range<index,size_type> range;
private:
  typedef typename range_list_generator<range,NumRanges>::type range_list;
public:
  template <std::size_t Ranges>
  struct gen_type {
    typedef extent_gen<Ranges> type;
  };

  range_list ranges_;

  extent_gen() { }

  // Used by operator[] to expand extent_gens
  extent_gen(const extent_gen<NumRanges-1>& rhs,
            const range& a_range)
  {
    std::copy(rhs.ranges_.begin(),rhs.ranges_.end(),ranges_.begin());
    *ranges_.rbegin() = a_range;
  }

  extent_gen<NumRanges+1>
  operator[](const range& a_range)
  {
    return extent_gen<NumRanges+1>(*this,a_range);    
  }

  extent_gen<NumRanges+1>
  operator[](index idx)
  {
    return extent_gen<NumRanges+1>(*this,range(0,idx));    
  }    

  static extent_gen<0> extents() {
    return extent_gen<0>();
  }
};

} // namespace multi_array
} // namespace detail
} // namespace boost


#endif

/* extent_gen.hpp
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
*/