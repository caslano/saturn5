// Copyright 2002 The Trustees of Indiana University.

// Use, modification and distribution is subject to the Boost Software 
// License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

//  Boost.MultiArray Library
//  Authors: Ronald Garcia
//           Jeremy Siek
//           Andrew Lumsdaine
//  See http://www.boost.org/libs/multi_array for documentation.

#ifndef BOOST_MULTI_ARRAY_COPY_ARRAY_HPP
#define BOOST_MULTI_ARRAY_COPY_ARRAY_HPP

//
// copy_array.hpp - generic code for copying the contents of one
// Basic_MultiArray to another.  We assume that they are of the same
// shape
//
#include "boost/type.hpp"
#include "boost/assert.hpp"

namespace boost {
namespace detail {
namespace multi_array {

template <typename Element>
class copy_dispatch {
public:
  template <typename SourceIterator, typename DestIterator>
  static void copy_array (SourceIterator first, SourceIterator last,
                   DestIterator result) {
    while (first != last) {
      copy_array(*first++,*result++);
    }
  }
private:
  // Array2 has to be passed by VALUE here because subarray
  // pseudo-references are temporaries created by iterator::operator*()
  template <typename Array1, typename Array2>
  static void copy_array (const Array1& source, Array2 dest) {
    copy_array(source.begin(),source.end(),dest.begin());
  }

  static void copy_array (const Element& source, Element& dest) {
    dest = source;
  }

};


template <typename Array1, typename Array2>
void copy_array (Array1& source, Array2& dest) {
  BOOST_ASSERT(std::equal(source.shape(),source.shape()+source.num_dimensions(),
                          dest.shape()));
  // Dispatch to the proper function
  typedef typename Array1::element element_type;
  copy_dispatch<element_type>::
    copy_array(source.begin(),source.end(),dest.begin());
}


} // namespace multi_array
} // namespace detail
} // namespace boost

#endif

/* copy_array.hpp
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
*/