#ifndef BOOST_SERIALIZATION_BASIC_OSERIALIZER_HPP
#define BOOST_SERIALIZATION_BASIC_OSERIALIZER_HPP

// MS compatible compilers support #pragma once
#if defined(_MSC_VER)
# pragma once
#endif

/////////1/////////2/////////3/////////4/////////5/////////6/////////7/////////8
// basic_oserializer.hpp: extenstion of type_info required for serialization.

// (C) Copyright 2002 Robert Ramey - http://www.rrsd.com .
// Use, modification and distribution is subject to the Boost Software
// License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

//  See http://www.boost.org for updates, documentation, and revision history.

#include <cstddef> // NULL
#include <boost/config.hpp>
#include <boost/noncopyable.hpp>

#include <boost/archive/basic_archive.hpp>
#include <boost/archive/detail/auto_link_archive.hpp>
#include <boost/archive/detail/basic_serializer.hpp>

#include <boost/archive/detail/abi_prefix.hpp> // must be the last header

#ifdef BOOST_MSVC
#  pragma warning(push)
#  pragma warning(disable : 4511 4512)
#endif

namespace boost {
namespace serialization {
    class extended_type_info;
} // namespace serialization

// forward declarations
namespace archive {
namespace detail {

class basic_oarchive;
class basic_pointer_oserializer;

class BOOST_SYMBOL_VISIBLE basic_oserializer :
    public basic_serializer
{
private:
    basic_pointer_oserializer *m_bpos;
protected:
    explicit BOOST_ARCHIVE_DECL basic_oserializer(
        const boost::serialization::extended_type_info & type_
    );
    virtual BOOST_ARCHIVE_DECL ~basic_oserializer();
public:
    bool serialized_as_pointer() const {
        return m_bpos != NULL;
    }
    void set_bpos(basic_pointer_oserializer *bpos){
        m_bpos = bpos;
    }
    const basic_pointer_oserializer * get_bpos() const {
        return m_bpos;
    }
    virtual void save_object_data(
        basic_oarchive & ar, const void * x
    ) const = 0;
    // returns true if class_info should be saved
    virtual bool class_info() const = 0;
    // returns true if objects should be tracked
    virtual bool tracking(const unsigned int flags) const = 0;
    // returns class version
    virtual version_type version() const = 0;
    // returns true if this class is polymorphic
    virtual bool is_polymorphic() const = 0;
};

} // namespace detail
} // namespace serialization
} // namespace boost

#ifdef BOOST_MSVC
#pragma warning(pop)
#endif

#include <boost/archive/detail/abi_suffix.hpp> // pops abi_suffix.hpp pragmas

#endif // BOOST_SERIALIZATION_BASIC_OSERIALIZER_HPP

/* basic_oserializer.hpp
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
*/