#ifndef BOOST_ARCHIVE_DETAIL_BASIC_ISERIALIZER_HPP
#define BOOST_ARCHIVE_DETAIL_BASIC_ISERIALIZER_HPP

// MS compatible compilers support #pragma once
#if defined(_MSC_VER)
# pragma once
#endif

/////////1/////////2/////////3/////////4/////////5/////////6/////////7/////////8
// basic_iserializer.hpp: extenstion of type_info required for serialization.

// (C) Copyright 2002 Robert Ramey - http://www.rrsd.com .
// Use, modification and distribution is subject to the Boost Software
// License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

//  See http://www.boost.org for updates, documentation, and revision history.

#include <cstdlib> // NULL
#include <boost/config.hpp>

#include <boost/archive/basic_archive.hpp>
#include <boost/archive/detail/decl.hpp>
#include <boost/archive/detail/basic_serializer.hpp>
#include <boost/archive/detail/auto_link_archive.hpp>
#include <boost/archive/detail/abi_prefix.hpp> // must be the last header

#ifdef BOOST_MSVC
#  pragma warning(push)
#  pragma warning(disable : 4511 4512)
#endif

namespace boost {
namespace serialization {
    class extended_type_info;
} // namespace serialization

// forward declarations
namespace archive {
namespace detail {

class basic_iarchive;
class basic_pointer_iserializer;

class BOOST_SYMBOL_VISIBLE basic_iserializer :
    public basic_serializer
{
private:
    basic_pointer_iserializer *m_bpis;
protected:
    explicit BOOST_ARCHIVE_DECL basic_iserializer(
        const boost::serialization::extended_type_info & type
    );
    virtual BOOST_ARCHIVE_DECL ~basic_iserializer();
public:
    bool serialized_as_pointer() const {
        return m_bpis != NULL;
    }
    void set_bpis(basic_pointer_iserializer *bpis){
        m_bpis = bpis;
    }
    const basic_pointer_iserializer * get_bpis_ptr() const {
        return m_bpis;
    }
    virtual void load_object_data(
        basic_iarchive & ar,
        void *x,
        const unsigned int file_version
    ) const = 0;
    // returns true if class_info should be saved
    virtual bool class_info() const = 0 ;
    // returns true if objects should be tracked
    virtual bool tracking(const unsigned int) const = 0 ;
    // returns class version
    virtual version_type version() const = 0 ;
    // returns true if this class is polymorphic
    virtual bool is_polymorphic() const = 0;
    virtual void destroy(/*const*/ void *address) const = 0 ;
};

} // namespae detail
} // namespace archive
} // namespace boost

#ifdef BOOST_MSVC
#pragma warning(pop)
#endif

#include <boost/archive/detail/abi_suffix.hpp> // pops abi_suffix.hpp pragmas

#endif // BOOST_ARCHIVE_DETAIL_BASIC_ISERIALIZER_HPP

/* basic_iserializer.hpp
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
*/