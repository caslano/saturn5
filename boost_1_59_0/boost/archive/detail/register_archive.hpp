// Copyright David Abrahams 2006. Distributed under the Boost
// Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
#ifndef BOOST_ARCHIVE_DETAIL_REGISTER_ARCHIVE_DWA2006521_HPP
# define BOOST_ARCHIVE_DETAIL_REGISTER_ARCHIVE_DWA2006521_HPP

namespace boost { namespace archive { namespace detail {

// No instantiate_ptr_serialization overloads generated by
// BOOST_SERIALIZATION_REGISTER_ARCHIVE that lexically follow the call
// will be seen *unless* they are in an associated namespace of one of
// the arguments, so we pass one of these along to make sure this
// namespace is considered.  See temp.dep.candidate (14.6.4.2) in the
// standard.
struct adl_tag {};

template <class Archive, class Serializable>
struct ptr_serialization_support;

// We could've just used ptr_serialization_support, above, but using
// it with only a forward declaration causes vc6/7 to complain about a
// missing instantiate member, even if it has one.  This is just a
// friendly layer of indirection.
template <class Archive, class Serializable>
struct _ptr_serialization_support
  : ptr_serialization_support<Archive,Serializable>
{
    typedef int type;
};

#if defined(__SUNPRO_CC) && (__SUNPRO_CC < 0x5130)

template<int N>
struct counter : counter<N-1> {};
template<>
struct counter<0> {};

template<class Serializable>
void instantiate_ptr_serialization(Serializable* s, int, adl_tag) {
    instantiate_ptr_serialization(s, counter<20>());
}

template<class Archive>
struct get_counter {
    static const int value = sizeof(adjust_counter(counter<20>()));
    typedef counter<value> type;
    typedef counter<value - 1> prior;
    typedef char (&next)[value+1];
};

char adjust_counter(counter<0>);
template<class Serializable>
void instantiate_ptr_serialization(Serializable*, counter<0>) {}

#define BOOST_SERIALIZATION_REGISTER_ARCHIVE(Archive)                     \
namespace boost { namespace archive { namespace detail {                  \
    get_counter<Archive >::next adjust_counter(get_counter<Archive >::type);\
    template<class Serializable>                                          \
    void instantiate_ptr_serialization(Serializable* s,                   \
        get_counter<Archive >::type) {                                    \
        ptr_serialization_support<Archive, Serializable> x;               \
        instantiate_ptr_serialization(s, get_counter<Archive >::prior()); \
    }\
}}}


#else

// This function gets called, but its only purpose is to participate
// in overload resolution with the functions declared by
// BOOST_SERIALIZATION_REGISTER_ARCHIVE, below.
template <class Serializable>
void instantiate_ptr_serialization(Serializable*, int, adl_tag ) {}

// The function declaration generated by this macro never actually
// gets called, but its return type gets instantiated, and that's
// enough to cause registration of serialization functions between
// Archive and any exported Serializable type.  See also:
// boost/serialization/export.hpp
# define BOOST_SERIALIZATION_REGISTER_ARCHIVE(Archive)                  \
namespace boost { namespace archive { namespace detail {                \
                                                                        \
template <class Serializable>                                           \
typename _ptr_serialization_support<Archive, Serializable>::type  \
instantiate_ptr_serialization( Serializable*, Archive*, adl_tag );              \
                                                                        \
}}}
#endif
}}} // namespace boost::archive::detail

#endif // BOOST_ARCHIVE_DETAIL_INSTANTIATE_SERIALIZE_DWA2006521_HPP

/* register_archive.hpp
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
*/