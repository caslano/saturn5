//////////////////////////////////////////////////////////////////////////////
//
// (C) Copyright Ion Gaztanaga 2005-2012. Distributed under the Boost
// Software License, Version 1.0. (See accompanying file
// LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//
// See http://www.boost.org/libs/interprocess for documentation.
//
//////////////////////////////////////////////////////////////////////////////

#ifndef BOOST_INTERPROCESS_DETAIL_SPIN_SEMAPHORE_HPP
#define BOOST_INTERPROCESS_DETAIL_SPIN_SEMAPHORE_HPP

#ifndef BOOST_CONFIG_HPP
#  include <boost/config.hpp>
#endif
#
#if defined(BOOST_HAS_PRAGMA_ONCE)
#  pragma once
#endif

#include <boost/interprocess/detail/config_begin.hpp>
#include <boost/interprocess/detail/workaround.hpp>
#include <boost/interprocess/detail/atomic.hpp>
#include <boost/interprocess/detail/os_thread_functions.hpp>
#include <boost/interprocess/sync/detail/common_algorithms.hpp>
#include <boost/interprocess/sync/detail/locks.hpp>
#include <boost/cstdint.hpp>

namespace boost {
namespace interprocess {
namespace ipcdetail {

class spin_semaphore
{
   spin_semaphore(const spin_semaphore &);
   spin_semaphore &operator=(const spin_semaphore &);

   public:
   spin_semaphore(unsigned int initialCount);
   ~spin_semaphore();

   void post();
   void wait();
   bool try_wait();
   template<class TimePoint> bool timed_wait(const TimePoint &abs_time);

//   int get_count() const;
   private:
   volatile boost::uint32_t m_count;
};


inline spin_semaphore::~spin_semaphore()
{}

inline spin_semaphore::spin_semaphore(unsigned int initialCount)
{  ipcdetail::atomic_write32(&this->m_count, boost::uint32_t(initialCount));  }

inline void spin_semaphore::post()
{
   ipcdetail::atomic_inc32(&m_count);
}

inline void spin_semaphore::wait()
{
   ipcdetail::lock_to_wait<spin_semaphore> lw(*this);
   return ipcdetail::try_based_lock(lw);
}

inline bool spin_semaphore::try_wait()
{
   return ipcdetail::atomic_add_unless32(&m_count, boost::uint32_t(-1), boost::uint32_t(0));
}

template<class TimePoint>
inline bool spin_semaphore::timed_wait(const TimePoint &abs_time)
{
   ipcdetail::lock_to_wait<spin_semaphore> lw(*this);
   return ipcdetail::try_based_timed_lock(lw, abs_time);
}

//inline int spin_semaphore::get_count() const
//{
   //return (int)ipcdetail::atomic_read32(&m_count);
//}

}  //namespace ipcdetail {
}  //namespace interprocess {
}  //namespace boost {

#include <boost/interprocess/detail/config_end.hpp>

#endif   //BOOST_INTERPROCESS_DETAIL_SPIN_SEMAPHORE_HPP

/* semaphore.hpp
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
*/