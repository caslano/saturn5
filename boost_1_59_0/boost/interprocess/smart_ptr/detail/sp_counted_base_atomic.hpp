#ifndef BOOST_INTERPROCESS_DETAIL_SP_COUNTED_BASE_ATOMIC_HPP_INCLUDED
#define BOOST_INTERPROCESS_DETAIL_SP_COUNTED_BASE_ATOMIC_HPP_INCLUDED

#ifndef BOOST_CONFIG_HPP
#  include <boost/config.hpp>
#endif
#
#if defined(BOOST_HAS_PRAGMA_ONCE)
# pragma once
#endif

//  Copyright (c) 2001, 2002, 2003 Peter Dimov and Multi Media Ltd.
//  Copyright 2004-2005 Peter Dimov
//  Copyright 2007-2012 Ion Gaztanaga
//
// Distributed under the Boost Software License, Version 1.0. (See
// accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
//
//
//  Lock-free algorithm by Alexander Terekhov
//
//  Thanks to Ben Hitchings for the #weak + (#shared != 0)
//  formulation
//

#include <boost/interprocess/detail/config_begin.hpp>
#include <boost/interprocess/detail/workaround.hpp>

#include <boost/interprocess/detail/atomic.hpp>
#include <typeinfo>

namespace boost {

namespace interprocess {

namespace ipcdetail {

class sp_counted_base
{
private:

    sp_counted_base( sp_counted_base const & );
    sp_counted_base & operator= ( sp_counted_base const & );

    boost::uint32_t use_count_;        // #shared
    boost::uint32_t weak_count_;       // #weak + (#shared != 0)

public:

    sp_counted_base(): use_count_( 1 ), weak_count_( 1 )
    {}

    ~sp_counted_base() // nothrow
    {}

    void add_ref_copy()
    {
        ipcdetail::atomic_inc32( &use_count_ );
    }

    bool add_ref_lock() // true on success
    {
        for( ;; )
        {
            boost::uint32_t tmp = static_cast< boost::uint32_t const volatile& >( use_count_ );
            if( tmp == 0 ) return false;
            if( ipcdetail::atomic_cas32( &use_count_, tmp + 1, tmp ) == tmp )
               return true;
        }
    }

   bool ref_release() // nothrow
   { return 1 == ipcdetail::atomic_dec32( &use_count_ );  }

   void weak_add_ref() // nothrow
   { ipcdetail::atomic_inc32( &weak_count_ ); }

   bool weak_release() // nothrow
   { return 1 == ipcdetail::atomic_dec32( &weak_count_ ); }

   long use_count() const // nothrow
   { return (long)static_cast<boost::uint32_t const volatile &>( use_count_ ); }
};

} // namespace ipcdetail

} // namespace interprocess

} // namespace boost

#include <boost/interprocess/detail/config_end.hpp>

#endif  // #ifndef BOOST_INTERPROCESS_DETAIL_SP_COUNTED_BASE_ATOMIC_HPP_INCLUDED

/* sp_counted_base_atomic.hpp
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
*/