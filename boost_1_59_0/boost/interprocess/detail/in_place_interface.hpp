//////////////////////////////////////////////////////////////////////////////
//
// (C) Copyright Ion Gaztanaga 2005-2012. Distributed under the Boost
// Software License, Version 1.0. (See accompanying file
// LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//
// See http://www.boost.org/libs/interprocess for documentation.
//
//////////////////////////////////////////////////////////////////////////////

#ifndef BOOST_INTERPROCESS_IN_PLACE_INTERFACE_HPP
#define BOOST_INTERPROCESS_IN_PLACE_INTERFACE_HPP

#ifndef BOOST_CONFIG_HPP
#  include <boost/config.hpp>
#endif
#
#if defined(BOOST_HAS_PRAGMA_ONCE)
#  pragma once
#endif

#include <boost/interprocess/detail/config_begin.hpp>
#include <boost/interprocess/detail/workaround.hpp>
#include <boost/interprocess/detail/type_traits.hpp>
#include <boost/container/detail/type_traits.hpp>  //alignment_of, aligned_storage
#include <typeinfo>  //typeid

//!\file
//!Describes an abstract interface for placement construction and destruction.

namespace boost {
namespace interprocess {
namespace ipcdetail {

struct in_place_interface
{
   in_place_interface(std::size_t alignm, std::size_t sz, const char *tname)
   :  alignment(alignm), size(sz), type_name(tname)
   {}

   std::size_t alignment;
   std::size_t size;
   const char *type_name;

   virtual void construct_n(void *mem, std::size_t num, std::size_t &constructed) = 0;
   virtual void destroy_n(void *mem, std::size_t num, std::size_t &destroyed) = 0;
   virtual ~in_place_interface(){}
};

template<class T>
struct placement_destroy :  public in_place_interface
{
   placement_destroy()
      :  in_place_interface(::boost::container::dtl::alignment_of<T>::value, sizeof(T), typeid(T).name())
   {}

   virtual void destroy_n(void *mem, std::size_t num, std::size_t &destroyed) BOOST_OVERRIDE
   {
      T* memory = static_cast<T*>(mem);
      for(destroyed = 0; destroyed < num; ++destroyed)
         (memory++)->~T();
   }

   virtual void construct_n(void *, std::size_t, std::size_t &) BOOST_OVERRIDE {}

   private:
   void destroy(void *mem)
   {  static_cast<T*>(mem)->~T();   }
};

}
}
}   //namespace boost { namespace interprocess { namespace ipcdetail {

#include <boost/interprocess/detail/config_end.hpp>

#endif //#ifndef BOOST_INTERPROCESS_IN_PLACE_INTERFACE_HPP

/* in_place_interface.hpp
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
*/