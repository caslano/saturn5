#ifndef BOOST_SMART_PTR_DETAIL_ATOMIC_COUNT_HPP_INCLUDED
#define BOOST_SMART_PTR_DETAIL_ATOMIC_COUNT_HPP_INCLUDED

// MS compatible compilers support #pragma once

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
# pragma once
#endif

//
//  boost/detail/atomic_count.hpp - thread/SMP safe reference counter
//
//  Copyright (c) 2001, 2002 Peter Dimov and Multi Media Ltd.
//  Copyright (c) 2013 Peter Dimov
//
//  Distributed under the Boost Software License, Version 1.0.
//  See accompanying file LICENSE_1_0.txt or copy at
//  http://www.boost.org/LICENSE_1_0.txt
//
//  typedef <implementation-defined> boost::detail::atomic_count;
//
//  atomic_count a(n);
//
//    (n is convertible to long)
//
//    Effects: Constructs an atomic_count with an initial value of n
//
//  a;
//
//    Returns: (long) the current value of a
//    Memory Ordering: acquire
//
//  ++a;
//
//    Effects: Atomically increments the value of a
//    Returns: (long) the new value of a
//    Memory Ordering: acquire/release
//
//  --a;
//
//    Effects: Atomically decrements the value of a
//    Returns: (long) the new value of a
//    Memory Ordering: acquire/release
//

#include <boost/smart_ptr/detail/sp_has_gcc_intrinsics.hpp>
#include <boost/smart_ptr/detail/sp_has_sync_intrinsics.hpp>
#include <boost/config.hpp>

#if defined( BOOST_AC_DISABLE_THREADS )
# include <boost/smart_ptr/detail/atomic_count_nt.hpp>

#elif defined( BOOST_AC_USE_STD_ATOMIC )
# include <boost/smart_ptr/detail/atomic_count_std_atomic.hpp>

#elif defined( BOOST_AC_USE_SPINLOCK )
# include <boost/smart_ptr/detail/atomic_count_spin.hpp>

#elif defined( BOOST_AC_USE_PTHREADS )
# include <boost/smart_ptr/detail/atomic_count_pt.hpp>

#elif defined( BOOST_SP_DISABLE_THREADS )
# include <boost/smart_ptr/detail/atomic_count_nt.hpp>

#elif defined( BOOST_SP_USE_STD_ATOMIC )
# include <boost/smart_ptr/detail/atomic_count_std_atomic.hpp>

#elif defined( BOOST_SP_USE_SPINLOCK )
# include <boost/smart_ptr/detail/atomic_count_spin.hpp>

#elif defined( BOOST_SP_USE_PTHREADS )
# include <boost/smart_ptr/detail/atomic_count_pt.hpp>

#elif defined( BOOST_DISABLE_THREADS ) && !defined( BOOST_SP_ENABLE_THREADS ) && !defined( BOOST_DISABLE_WIN32 )
# include <boost/smart_ptr/detail/atomic_count_nt.hpp>

#elif defined( BOOST_SP_HAS_GCC_INTRINSICS )
# include <boost/smart_ptr/detail/atomic_count_gcc_atomic.hpp>

#elif !defined( BOOST_NO_CXX11_HDR_ATOMIC )
# include <boost/smart_ptr/detail/atomic_count_std_atomic.hpp>

#elif defined( BOOST_SP_HAS_SYNC_INTRINSICS )
# include <boost/smart_ptr/detail/atomic_count_sync.hpp>

#elif defined( __GNUC__ ) && ( defined( __i386__ ) || defined( __x86_64__ ) ) && !defined( __PATHSCALE__ )
# include <boost/smart_ptr/detail/atomic_count_gcc_x86.hpp>

#elif defined(WIN32) || defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
# include <boost/smart_ptr/detail/atomic_count_win32.hpp>

#elif defined(__GLIBCPP__) || defined(__GLIBCXX__)
# include <boost/smart_ptr/detail/atomic_count_gcc.hpp>

#elif !defined( BOOST_HAS_THREADS )
# include <boost/smart_ptr/detail/atomic_count_nt.hpp>

#else
# include <boost/smart_ptr/detail/atomic_count_spin.hpp>

#endif

#endif // #ifndef BOOST_SMART_PTR_DETAIL_ATOMIC_COUNT_HPP_INCLUDED

/* atomic_count.hpp
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
*/