#ifndef BOOST_SMART_PTR_DETAIL_SP_THREAD_SLEEP_HPP_INCLUDED
#define BOOST_SMART_PTR_DETAIL_SP_THREAD_SLEEP_HPP_INCLUDED

// MS compatible compilers support #pragma once

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
# pragma once
#endif

// boost/smart_ptr/detail/sp_thread_sleep.hpp
//
// inline void bost::detail::sp_thread_sleep();
//
//   Cease execution for a while to yield to other threads,
//   as if by calling nanosleep() with an appropriate interval.
//
// Copyright 2008, 2020 Peter Dimov
// Distributed under the Boost Software License, Version 1.0
// https://www.boost.org/LICENSE_1_0.txt

#include <boost/config.hpp>
#include <boost/config/pragma_message.hpp>

#if defined( WIN32 ) || defined( _WIN32 ) || defined( __WIN32__ ) || defined( __CYGWIN__ )

#if defined(BOOST_SP_REPORT_IMPLEMENTATION)
  BOOST_PRAGMA_MESSAGE("Using Sleep(1) in sp_thread_sleep")
#endif

#include <boost/smart_ptr/detail/sp_win32_sleep.hpp>

namespace boost
{

namespace detail
{

inline void sp_thread_sleep()
{
    Sleep( 1 );
}

} // namespace detail

} // namespace boost

#elif defined(BOOST_HAS_NANOSLEEP)

#if defined(BOOST_SP_REPORT_IMPLEMENTATION)
  BOOST_PRAGMA_MESSAGE("Using nanosleep() in sp_thread_sleep")
#endif

#include <time.h>

namespace boost
{

namespace detail
{

inline void sp_thread_sleep()
{
    // g++ -Wextra warns on {} or {0}
    struct timespec rqtp = { 0, 0 };

    // POSIX says that timespec has tv_sec and tv_nsec
    // But it doesn't guarantee order or placement

    rqtp.tv_sec = 0;
    rqtp.tv_nsec = 1000;

    nanosleep( &rqtp, 0 );
}

} // namespace detail

} // namespace boost

#else

#if defined(BOOST_SP_REPORT_IMPLEMENTATION)
  BOOST_PRAGMA_MESSAGE("Using sp_thread_yield() in sp_thread_sleep")
#endif

#include <boost/smart_ptr/detail/sp_thread_yield.hpp>

namespace boost
{

namespace detail
{

inline void sp_thread_sleep()
{
    sp_thread_yield();
}

} // namespace detail

} // namespace boost

#endif

#endif // #ifndef BOOST_SMART_PTR_DETAIL_SP_THREAD_SLEEP_HPP_INCLUDED

/* sp_thread_sleep.hpp
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
*/