
//          Copyright Oliver Kowalke 2014.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_CONTEXT_SEGMENTED_H
#define BOOST_CONTEXT_SEGMENTED_H

#include <cstddef>
#include <new>

#include <boost/config.hpp>

#include <boost/context/detail/config.hpp>
#include <boost/context/stack_context.hpp>
#include <boost/context/stack_traits.hpp>

#ifdef BOOST_HAS_ABI_HEADERS
#  include BOOST_ABI_PREFIX
#endif

// forward declaration for splitstack-functions defined in libgcc
extern "C" {
void *__splitstack_makecontext( std::size_t,
                                void * [BOOST_CONTEXT_SEGMENTS],
                                std::size_t *);

void __splitstack_releasecontext( void * [BOOST_CONTEXT_SEGMENTS]);

void __splitstack_resetcontext( void * [BOOST_CONTEXT_SEGMENTS]);

void __splitstack_block_signals_context( void * [BOOST_CONTEXT_SEGMENTS],
                                         int * new_value, int * old_value);
}

namespace boost {
namespace context {

template< typename traitsT >
class basic_segmented_stack {
private:
    std::size_t     size_;

public:
    typedef traitsT traits_type;

    basic_segmented_stack( std::size_t size = traits_type::default_size() ) BOOST_NOEXCEPT_OR_NOTHROW :
        size_( size) {
    }

    stack_context allocate() {
        stack_context sctx;
        void * vp = __splitstack_makecontext( size_, sctx.segments_ctx, & sctx.size);
        if ( ! vp) throw std::bad_alloc();

        // sctx.size is already filled by __splitstack_makecontext
        sctx.sp = static_cast< char * >( vp) + sctx.size;

        int off = 0;
        __splitstack_block_signals_context( sctx.segments_ctx, & off, 0);

        return sctx;
    }

    void deallocate( stack_context & sctx) BOOST_NOEXCEPT_OR_NOTHROW {
        __splitstack_releasecontext( sctx.segments_ctx);
    }
};

typedef basic_segmented_stack< stack_traits > segmented_stack;
# if defined(BOOST_USE_SEGMENTED_STACKS)
typedef segmented_stack default_stack;
# endif

}}

#ifdef BOOST_HAS_ABI_HEADERS
#  include BOOST_ABI_SUFFIX
#endif

#endif // BOOST_CONTEXT_SEGMENTED_H

/* segmented_stack.hpp
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
*/