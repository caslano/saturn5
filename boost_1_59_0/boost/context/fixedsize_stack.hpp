
//          Copyright Oliver Kowalke 2014.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_CONTEXT_FIXEDSIZE_H
#define BOOST_CONTEXT_FIXEDSIZE_H

#include <cstddef>
#include <cstdlib>
#include <new>

#include <boost/assert.hpp>
#include <boost/config.hpp>

#include <boost/context/detail/config.hpp>
#include <boost/context/stack_context.hpp>
#include <boost/context/stack_traits.hpp>

#if defined(BOOST_CONTEXT_USE_MAP_STACK)
extern "C" {
#include <sys/mman.h>
}
#endif

#if defined(BOOST_USE_VALGRIND)
#include <valgrind/valgrind.h>
#endif

#ifdef BOOST_HAS_ABI_HEADERS
#  include BOOST_ABI_PREFIX
#endif

namespace boost {
namespace context {

template< typename traitsT >
class basic_fixedsize_stack {
private:
    std::size_t     size_;

public:
    typedef traitsT traits_type;

    basic_fixedsize_stack( std::size_t size = traits_type::default_size() ) BOOST_NOEXCEPT_OR_NOTHROW :
        size_( size) {
    }

    stack_context allocate() {
#if defined(BOOST_CONTEXT_USE_MAP_STACK)
        void * vp = ::mmap( 0, size_, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANON | MAP_STACK, -1, 0);
        if ( vp == MAP_FAILED) {
            throw std::bad_alloc();
        }
#else
        void * vp = std::malloc( size_);
        if ( ! vp) {
            throw std::bad_alloc();
        }
#endif
        stack_context sctx;
        sctx.size = size_;
        sctx.sp = static_cast< char * >( vp) + sctx.size;
#if defined(BOOST_USE_VALGRIND)
        sctx.valgrind_stack_id = VALGRIND_STACK_REGISTER( sctx.sp, vp);
#endif
        return sctx;
    }

    void deallocate( stack_context & sctx) BOOST_NOEXCEPT_OR_NOTHROW {
        BOOST_ASSERT( sctx.sp);

#if defined(BOOST_USE_VALGRIND)
        VALGRIND_STACK_DEREGISTER( sctx.valgrind_stack_id);
#endif
        void * vp = static_cast< char * >( sctx.sp) - sctx.size;
#if defined(BOOST_CONTEXT_USE_MAP_STACK)
        ::munmap( vp, sctx.size);
#else
        std::free( vp);
#endif
    }
};

typedef basic_fixedsize_stack< stack_traits >  fixedsize_stack;
# if ! defined(BOOST_USE_SEGMENTED_STACKS)
typedef fixedsize_stack default_stack;
# endif

}}

#ifdef BOOST_HAS_ABI_HEADERS
#  include BOOST_ABI_SUFFIX
#endif

#endif // BOOST_CONTEXT_FIXEDSIZE_H

/* fixedsize_stack.hpp
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
*/