/*=============================================================================
    Copyright (c) 2015 Paul Fultz II
    result_of.h
    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
==============================================================================*/

#ifndef BOOST_HOF_GUARD_DETAIL_RESULT_OF_H
#define BOOST_HOF_GUARD_DETAIL_RESULT_OF_H

#include <boost/hof/returns.hpp>
#include <boost/hof/config.hpp>

#if BOOST_HOF_HAS_MANUAL_DEDUCTION || BOOST_HOF_NO_EXPRESSION_SFINAE

#include <boost/hof/detail/and.hpp>
#include <boost/hof/detail/holder.hpp>
#include <boost/hof/detail/can_be_called.hpp>

namespace boost { namespace hof { namespace detail {

template<class F, class Args, class=void>
struct result_of_impl {};

template<class F, class... Ts>
struct result_of_impl<
    F, 
    holder<Ts...>, 
    typename std::enable_if<can_be_called<F, typename Ts::type...>::value>::type
>
{
    typedef decltype(std::declval<F>()(std::declval<typename Ts::type>()...)) type;
};
}

template<class T>
struct id_
{
    typedef T type;
};

template<class F, class... Ts>
struct result_of
: detail::result_of_impl<F, detail::holder<Ts...>>
{};

// template<class F, class... Ts>
// using result_of = detail::result_of_impl<F, detail::holder<Ts...>>;
// using result_of = id_<decltype(std::declval<F>()(std::declval<typename Ts::type>()...))>;

}} // namespace boost::hof
#endif

#if BOOST_HOF_NO_EXPRESSION_SFINAE

#define BOOST_HOF_SFINAE_RESULT(...) typename boost::hof::result_of<__VA_ARGS__>::type
#define BOOST_HOF_SFINAE_RETURNS(...) BOOST_HOF_RETURNS_DEDUCE_NOEXCEPT(__VA_ARGS__) { return __VA_ARGS__; }

#else

#define BOOST_HOF_SFINAE_RESULT(...) auto
#define BOOST_HOF_SFINAE_RETURNS BOOST_HOF_RETURNS

#endif

#if BOOST_HOF_HAS_MANUAL_DEDUCTION

#define BOOST_HOF_SFINAE_MANUAL_RESULT(...) typename boost::hof::result_of<__VA_ARGS__>::type
#if BOOST_HOF_HAS_COMPLETE_DECLTYPE && BOOST_HOF_HAS_MANGLE_OVERLOAD
#define BOOST_HOF_SFINAE_MANUAL_RETURNS(...) BOOST_HOF_RETURNS_DEDUCE_NOEXCEPT(__VA_ARGS__) { return (__VA_ARGS__); }
#else
#define BOOST_HOF_SFINAE_MANUAL_RETURNS(...) BOOST_HOF_RETURNS_DEDUCE_NOEXCEPT(__VA_ARGS__) { BOOST_HOF_RETURNS_RETURN(__VA_ARGS__); }
#endif

#else

#define BOOST_HOF_SFINAE_MANUAL_RESULT BOOST_HOF_SFINAE_RESULT
#define BOOST_HOF_SFINAE_MANUAL_RETURNS BOOST_HOF_SFINAE_RETURNS

#endif

#endif

/* result_of.hpp
CuhL75S7VYwTrTuHok1hdkKyGuTxz9hqbg+Okb9ZL5HfN/aYmBc+bbdC7o/aZw6wNf7VprX7bWZrlW/mhKsMO1WwuD8bU5ylo1wqnZhQF8UAgQ3+5dB0WGFUVIjHRpdQdUL9YkSwP4vuwF+iBDXqMR2PGBPVAodSF0pyxysQXqEBIQtzZtVYILgwlomOZAf7WP9jERGFUdlKVjFKqkxJOAcVbN07zOzArdnDf9cAudq/CeH5blDd/nXnlLAyUCiGef28XORRD8YIzHUaZmrkVn4yI08dJof1dfG3fkVqst8nKNMLORabBR/jBzEx06HOzH7yXr78U6DQZRRigvVxRanbQY9YBd+BfEmJedaRwW/QSdmbinJX8S1MPZdfFtsAOzQ8N/FRekP1uJN4qNXTS6vtkbTPUCSgnNC2Ay7E2jqGMVCxM37lHNG2s0zFIt9OcphwzmSKop4IzEKypeFE7b3K0v3KnFlCO+JkCLSHSm0ubgpsULFblphuX7XWCVDL/tCuBFEBxcFbmaaY1jp7NxqtqLU7HuKHK4TpvkliGPIR4jqzo+CcxFToKzF6ha2RYWzvyYLt2inoeTvsn3sS+oOiJcMX+CYgztBo9EYSfx+c85twL4PVS1BmOvT3ufUEjO/e3Qv5V1wE34g7XXFWhlBPxQTCvfD/8hYai8fkdXSHdAr9pBQhNPx58q5/uQXgEHYtDuGrOh5XqHTVXeku7Vo/P4eC4ASPsl7V+fGGDqI2Lt+RX5fGNaE0eau8Gio6wsCHO9HK6V65zfPIAly93TjttQZPh/4YufAceOTDppMwN6OH2dh2Q5R+wXEFiONuyMWmnaB9/ZIg8xuV5+fSkGifuzt2V7K9tOSdv3XlJi2+kqy7G3alr1Eijls03WhceMTCjinH69itOCYrP+nT9Xqq8Ns+WS860jDDpjVszLsx3kVIn7JMYNU62k49ESr4K5Ubp1Ix6kFj+pq7B1djgDhmLv6wDAqDrjZVuJUmDKSTNNeg5x3suYVD0zFr15dhqIQoMpHu26ZJP8QnshVpz8p94bg71vUHFxm4EehJJf2fZR8bHhQqgbuFM2rLHARlBEYuUHKzWNVVIWieP1qb8cXCKrB6jDoDa2n/aJmGGpEltMImtAbjKBeNLqhSvCTnkbVrvidRdDFnNRzrsngY2Z/8Li6G0L5Q7oPgI3mFAqR3KJFJvWs5vI3gMkRiZ3Tssn7VbqhedpFoO5AuSCobqT63I24sXxW3M3oEznqw8PF3e/6EoB15yyrLMQ+vPXcqvLqL7Ek8xwaOd0s7C5VOzMXAone67u2Js4yz4Xm2idx3k5TxsuS/jIwM4YYRrjzTBAJvlSBmia4n0OOm2Igu0+n91oWFbYiA54VCwQshe/QqSCRz+lAWi/47zy0WIRe6d2GxxG4538R6nnHvTt4pc6ICrxi9AqhD0K6ipXmFydoqIgyj8OB/j0IMliJJq9P4OCU/DbZTaRB5UPHwsL9XAHx2/015Ct9ezU3+Ya0Eh0/UKQbfyAlfLOkbbStoDvEoZ4nXDy9XKC4th6Uqz/5TJCHvllhuNGtvoh3CITKv362vhKrM6bP33v2iHRm1+MIDSkDLwz1PUn3olVjsWP1XQ0tless12GtXzDGqBLKGeq9jwSkMqHHX2be3mR2uWFMHhQmaWVuwclZKi3eGDwqTU6qkUGeBDLpzAM85XafYeOEmrDidj6yIzVdRPy5IVw2Ptq/n0zpiT/rbdIrXgLPax+JkVsb1jMz2rJhoenHkqGdDv53kAF4zf84NlVXnYrs3qbduaAlx4bkIx9niW2ogHXcIWGkRn8hRGc1nCFStWrqmTPeq1s6xyeuBw61TU5KsN/jEJsoyJf7y4Dj/mIiMMzpeVLkwSr3JST4CrStmzDa4bT0Jy4GtvMaNqfDEcysh0ofvOWpHHY32LlUGECrdCwjpUgIIw82lg69WROK+B/FvyXp7qJcO6EHD1/oQEz/AABxbjHIrEpTQnMUFTQ67qvre3sNB2EDe25wb1FYFSkqCgKwN1Dt3i2zZ8gcapD19AJm5mdVOtrq3EGVEtnwxXwwVl5OvKiRJcgWw/jsHbvjdcwjN4t4WC30cZ7pZfOJewerGPO4AkT/JfQ/ndYlNQ1e4ppWBBdSP3XaZ3+dkVqreTbEAACz/08CK7mTQW2ssJ6qhylHquPLFZiXLt7dXTkWtHFNPzyHoRmIcv7DnQl2X8er2VN8z49vq7fP4rPiW0e6ma2OHo+3pqHScBm7LqpV4rQrGHTViT61NBpX4jGCYby1p4ZA5zaEvVmhSrighAFwX4q0rgB1YD09zYg4nArWaFfJxck+5hzyJw9mngzern8ZmgRQD7cO5yH2S8WAep8lSYkMg1hlDRfwXjwtsHJiZG6/mzj+lKSUhsNf6ZSZAxrWMAkX9FOWgQzl6peuE0nYC9tZF+W/mozAms9FKkhgzMSlYMbdK3uN1Qlis0LI4ONlGKkJlVu4mKUea8qe7NiyDeRxaAICt2x+zT1Fr/EsOTh/gz5/Sq9MslNNBQ/mMO1yTdRIjTrSmILIgB+VezZxUa66pv1uahtt/klewxisRt358dVDHZNliAtSX6iimhC3WMoWdpS+cz0bKEWuY39SaFF6ZeEK34lGlwlIy98CXgfvJAF1YEoGgKenQaiW/gIpmW8zRHOhvSZ4WkgIO8n3aeUIf0H2cyWadBn3g/aMuSHo5jGBED52QYNn5MMK2LEgLx/8WWugN1IqER/co67N+oMgvl6t36wd/Gh4IObA84WYEv5eX9pUJSR88GirHMz5Xf64yD87wI2HzvXMFeVzL6vVuJHMEUHjMQFOED+ugz5uF6lNYFFGMF9ouyNm3JeVTJORRhAyTmIppQLsFV2mQQSjD1XsoCUtjg8qb1bvSIDpMBJ9Ux/O7vI1eqi+NIP0gk1z/ED4qs3F6L4U9KqOL6163BIxu1F73FNMlvPwge2sn55A2qCtLta2x9C6vOnLUJuwuNlgM8oXt5xjdyYa/kmt/JlB+M0BBwH6J4/URsPDlUciAgblTI2IYIWlTYvybhBKyJ/LOMANEG5HLDK1rjOUl10sECj88CJw/AYlUkEEzfwTcxJelIP8gistiTryAGlz27QZteTFHjODOZ7BeXccV15P6Tn+4FkP2Tlws0xZkKFM4d02xL1b0wA830Po+lkGOic5iXzC1Weio7gKcdgqj9o6m3upN4t0xP883KDDnMl3fZ21ql5bONEc29UibbLArLglFGSJ32hTs051M2xwsvKfSCuadbtTdalSJzp7Xn0ZXH8V0mNWkeBJr0OdjTm1vqZ3M2Jna6TgpAKD8qmxb8Um5CEi81EYU4ZnqwHKDte/sULh27uw4OM1Mw+q6ufipE5V+aHufffQCOtRGhNc9L/GmSPEOD6krysH0GJtOwrjk3GBBaCKy8FysTRdbiX583HOW/u0FQvJyG3KJchsLjI8o5hvOI1LS8lEgeZ/HdPigt7DK72zeKsjWE4EeNJdHH/0TObsTnzMWh6xbMyYWUGsTbIEpDmD6sBBQZ30WvnSdnymJytQNpNPwKh0qbm2YWx3W6ZCDEGHosm/m+zXm+1c0d7qCRMPe9bQypmE8gkTr2avpeEZhtpBhC/R38dmk3RQkfw33LQWzZKHC8HeVbiE5sAOFE7Ws2kPU8qXFSJy2kDXoisOeRa1st/qQrg0goflRDCBbakH+Wd/R0hCmLS1kCsTV5VB5V2TgxYNBjvb/ONwyY20DxD2NiB5a6LUVAkoyIpj9qMbfpsiCVfilVGUVn8T1vsMLH64Fuh/yr339hIr5/ks+us85//EWfu9I5c0bzfhhvOl+tspVlPk3vhjC6CVD3ej20HL7EsJIA2XMjh9IFXWDGR6E+dzJR/3IqUL2TBH1g+3d1efrfOocT6P0vvL45NiXMnWIhNXCBz76+I1xv2ZRI/CG0sN8q9wwXuyHX/OCPTq8c8eX7yaRA+2+w1aHtHFXQSzBbeb5YkGj3wNAmtiHNPVqtbcSo7APmDfIJiS3n0MXuI7Rz0olSnnHVAcbW/128o80e/iE6HtYXkIpnBQsdzAcXVAOlkAJWDeGRp4suTcbW0huzXyG6y9lHF0yRiDSnb4cLJGSbJQCkSiNPaIEjjcvyJJI4LlpQWIqcfIrmsTn0RuC0g6R0llB4iiKJIHLRTa8AEugHGwWrrpBMjteqLYjBJVX8+3HzL6Ni1BDjX6ytaNR31LziZrA5fSrnOKr1uBPOppX91qLSfIUnnrtdHMkqnC6+4tsHhrl1CY0KE+xSmeJedLcl8uDewgUGnYm+Zd0auCxuWz3cAD+4L9KQkRj2J5Ip9qjYQOB4TqPFVFAzXWvYRHezwD7goy4W9o1GvuWWHZQZFK45NYgsvWwKoXRJ3DCFSq1KusnINcHiLAbQsdGSA5cwXx4ZBG4FnZu+wmHZLeW2FekaRcLXlPCtwza6mak7deJBkA15LyMTMMP+IuyFlwPKpfzyR61pba9K1xEJFP9/XVyNYOQWDcWsvCur4rYVxZYXvJDLxmxTwhkZFBhnj8k13GBeXqg0oVCf7WxczdsNx6AUIoujYOmQlrv8oPYf5SJx18pRAMGCdCL/j7Xz2b0VCC0i7tmzO69YQ2/6uAHTjFO9aW1n3JM3eBxId/+9Berj2FxPnFYU6jEKnwGNWv3GNl6rGETjzbMi7k3453fl0AUHuf8cerl82dvjlgahPQlCGO2cnG2GCOs1sftuXtWBFz98fXE/lSytuDNt3lnCmdzQNijgeYvTRMgy2Ue+auw1fjntR5vdmWeYKSh/MtpAfItlytcblt9Xk8n/kfpAW/6sGEn6rIL78GhWPuVzjclb8KnQno/DZN1zopZwgYsw3K0yCpD0NEa4WQ9RXef5KmuNerFQOgtQ0zQHoKc61YpTsKspqJUURshBq9Qb3UElEmhxbDoA3rM57p7JdDHDlIuKUgsIo9J3kqMlj1xlc3nSqoxPkha/Nun2/z0AsAPHhVKlBkAHrY5VAXi6zR3rjhUD5+1c77WmXROh9DX9x4+T0f+Ozu0q3w98BQT1GekaoA6cgiKrRYqbs7kh7CRQv7vhjsWFY03lKzXjWdVqPqzu3RHOK2g6ZuqLZzz6c0O7A1C/DhnfA8+parQu59Budeno2c3JMFwoRGQkgQ4T/tv+4jgzfdD3QCSwpEDOGPoxDqj2pGWyAgta6qFoJhRELvXLb5FcZCI7wn6Xnrp9114MNY6m9A6Q1NYHyr3q8QOFztzlDPJK4KgUrp3tOHAtstwqX35vINx+ef916066KR2+QcqRliGfL9bBoOP0MieUwjk5HbuWlAlafWIcRUszQuF5RneP+XopuTG+Lw4Jq72tI/1CJpkRxQJIAnNKaQIhWoSXgUDnSjc2S/GdhocyKDL1tkLBafwgV1sJTv8q/t8OGxJf1a0Lj/BJxPYJn5HWEKTNkikgLAZ5m5d5D6HbuVFg98ngDvDPoV4110oLoiPBfl9rRYzrl1DEu7e9mwOU4RNnmfqZ8dJWvbnjbWMGDELXcoONtXsdABrdC/GAXay4I8U9RP7IJ0ie1GfzYltHmTfBsChru/nh6ibwgXDFQJ8+b2ssuYTONod3mW4nZkkFpuY4BxVGU/VvkyngTbqRHM7F2q8obS1ph7z2Ru3pJXVBhykbe5BeEEQMD4+Xw/1eVypofdIPXg0WS05KLd4DBrVwDZlDJpFPx6LKDTyAB5yDBpZCA8ZPq0UpKcUh0Yq3nPqtQXTtCsz4Or2sDTiLfgMMB6WMXSGcNfT7lJ3CyjXLafLbmpb/xHTNJdKHe43bsXt3M2f9y3pno/TF/v3qYUbpuiu5kJlK8cavilVbihoRf+4Wvr72yS1wa7KifhguBw7up21woEoyK0x2XL4JDEaJNnCS4t6ObWWQoIGxO3hDXViLjvhV6aYWgXISxzAnlwFK1Esl1j6zqoebiyqoqbQEujZ5S0ssi++KKJV/gfzp3ZHueI7rkrpq6sRhGDAp3bkVDQ9c6VA92zcD7IHPm8jtZaEcBA7ozzHFsRdKWihZJVLj3xvFvVCxJQaoTLwelhrWMjt90R+Yo+NJPYCCjCYH7SaruXN+Peslya6OBpHc71hyOS9EYIVuaYfOONnwUVLVy/+5TN6ONdb7sJw3FA534tqf7cR2uaSYuCUlr0UxJ7o+terFj3bhtd9UxGbGHL9zzg6A1K07+O23kH3+BoR1zBPnJYNpzhlnBIB+WLwg8P7g39NlQt7RYqEPyRKIKWzKGvbAX3Hui5ag5JbkOfWHMwGZc8QXtHWmwESTzd6rthcsbs7hXfb9LymzGK5TKd95H76eyl19xZPzUhoWfHJOdfncq2cSa5c7aA0ILZ4mGhWOdrIgGxb2bbtf2fadeoI8y9GflCpIfliNh+vKVKcA8Chi0UTCioeFdh+PHYukNDuGN4uUqw6khUlJAIpmev+ZFJR8LYat2v8FRZEAMMuyiHW52AB+tpVzxMos2lHLPoOYVmktqzQRIgsJpp7L26YhfucqAj6x06LN2i+JqBlvfqpX60seeoNankHaMUQnPcqZ/TPbV742Hx1D+hwdC+lyTsQPZ+UBSsDiCw8qL2fYsgT59QJ19cDGG+MHYmz7MAzEX+Ht8GoevjHUZMxQ4Xjs0v0U18dhTkCth7D2rtJMHlDPfluk2tmbiVi7wlmg3KB9tKZyLPKhEXMPHm8DUu1q1qwwOcSG8xXRp8v2IgwIU+W4DVXXjo5/S1xcpDhspda52ZAQVbQRbHGkP5JLi/ob/Ptzz8XeqZVgUth2Gh5sKs99uUBAqvVDg0nHY0E/g+10fv7nO/jAvmONGIXpqAWL4xoyLXR6uJbNm92FdUGZuphQ5BoIh2fSJ0IlpzmGHJ+t0SgsbYaXYBcNNUL76mSoQgHMQp5vquK+ZuTmx+a5LdzsPdrTGNSAcBIvEb4cKXMSXROPxm0YDrg94VWhE7sw+Bq79MspjBPmZB7ghp1VCqEv+MahTTR8sl7fu1j4oZHgRAebQifydyFdUeLUFE9lujTtwkg7bwQUi/a4oPzuXlRhsJOgH66HAEtZPtdoau8UB2HeLBbMShL2C4Lei0T9Kyf2AFJyHH/Mskv+6fpVekppXkdENhyWwOnBAQiXvikyEDD0Qg2MbZCq/7A8qG71EcWMu68QdzFK5x+oa5/Ae5u9bs9gFv0FNYQWPeczjrN6PoB+T5wpyduFRG4j/3JmWcpVUcUiYTq2TxStJOuIaphgMymZZnEdc/3yMKUsI17f2I1ZrxtvSZo+TBMXciE6j5eIbRJMd2byQ5NmrwH3NgkrcTqw1ZOhN6Ya9iDeKcQ1h41WISqy4UjxF9wYc3lA6JB0OcNRF/PmsMEAG5BLEt2Jacok0dNqdgtT7qO0tzPI53Xh4V/oqGalN8TKQ1V7p/RfCTtyjou8RGD7GJSFVBlfzRw0ptY4x98+/4BRpkwf3QX/O8RfZM3tJvS0tIpt0w8MgY7Mib9aa5ASXiwBX1jADKLPwJwoBsZIRNB7Czagvn4jUiaQNXe0piYDOu/TQnvrfX15ef3lyIVn4AYQUESyAA/eBTh268OQzeQRBICeteqppk01YDml+d+tjQO057lbc+r
*/