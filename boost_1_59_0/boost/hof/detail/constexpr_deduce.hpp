/*=============================================================================
    Copyright (c) 2015 Paul Fultz II
    constexpr_deduce.h
    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
==============================================================================*/

#ifndef BOOST_HOF_GUARD_FUNCTION_CONSTEXPR_DEDUCE_H
#define BOOST_HOF_GUARD_FUNCTION_CONSTEXPR_DEDUCE_H

#include <boost/hof/config.hpp>

#define BOOST_HOF_CONST_FOLD(x) (__builtin_constant_p(x) ? (x) : (x))

#ifndef BOOST_HOF_HAS_CONST_FOLD
#if defined(__GNUC__) && !defined (__clang__) && __GNUC__ == 4 && __GNUC_MINOR__ < 7
#define BOOST_HOF_HAS_CONST_FOLD 0
#elif defined(__clang__) || defined (__GNUC__)
#define BOOST_HOF_HAS_CONST_FOLD 1
#else
#define BOOST_HOF_HAS_CONST_FOLD 0
#endif
#endif


namespace boost { namespace hof {

namespace detail {

struct constexpr_deduce
{
    constexpr constexpr_deduce()
    {}
    template<class F>
    constexpr operator F() const
    {
        return F();
    }
};

template<class T>
struct constexpr_deduce_unique
{
    constexpr constexpr_deduce_unique()
    {}
#if BOOST_HOF_HAS_CONST_FOLD
    template<class F>
    constexpr operator const F&() const
    {
        static_assert(BOOST_HOF_IS_EMPTY(F), "Function or lambda expression must be empty");
        return BOOST_HOF_CONST_FOLD(reinterpret_cast<const F&>(static_const_var<T>()));
    }
#else
    template<class F>
    constexpr operator F() const
    {
        // static_assert(std::is_default_constructible<F>::value, "Function not default constructible");
        return F();
    }
#endif
};

}}} // namespace boost::hof

#define BOOST_HOF_DETAIL_CONSTEXPR_DEDUCE true ? boost::hof::detail::constexpr_deduce() :
#define BOOST_HOF_DETAIL_CONSTEXPR_DEDUCE_UNIQUE(T) true ? boost::hof::detail::constexpr_deduce_unique<T>() :

#ifdef _MSC_VER
#define BOOST_HOF_DETAIL_MSVC_CONSTEXPR_DEDUCE BOOST_HOF_DETAIL_CONSTEXPR_DEDUCE
#else
#define BOOST_HOF_DETAIL_MSVC_CONSTEXPR_DEDUCE
#endif

#endif

/* constexpr_deduce.hpp
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
*/