/*=============================================================================
    Copyright (c) 2014 Paul Fultz II
    pp.h
    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
==============================================================================*/

#ifndef BOOST_HOF_GUARD_PP_H
#define BOOST_HOF_GUARD_PP_H

#define BOOST_HOF_PP_CAT(x, y) BOOST_HOF_PP_PRIMITIVE_CAT(x, y)
#define BOOST_HOF_PP_PRIMITIVE_CAT(x, y) x ## y

#define BOOST_HOF_PP_SEQ_ITERATE(...) BOOST_HOF_PP_PRIMITIVE_SEQ_ITERATE(__VA_ARGS__)
#define BOOST_HOF_PP_PRIMITIVE_SEQ_ITERATE(...) __VA_ARGS__ ## _END

// 
// BOOST_HOF_PP_NARGS returns the number of args in __VA_ARGS__
// 
#define BOOST_HOF_PP_NARGS(...) \
         BOOST_HOF_PP_DETAIL_NARG((__VA_ARGS__,BOOST_HOF_PP_DETAIL_RSEQ_N()))

#define BOOST_HOF_PP_DETAIL_NARG(args) \
        BOOST_HOF_PP_DETAIL_ARG_N args

#define BOOST_HOF_PP_DETAIL_ARG_N( \
          _1, _2, _3, _4, _5, _6, _7, _8, _9,_10, \
         _11,_12,_13,_14,_15,_16,_17,_18,_19,_20, \
         _21,_22,_23,_24,_25,_26,_27,_28,_29,_30, \
         _31,_32,_33,_34,_35,_36,_37,_38,_39,_40, \
         _41,_42,_43,_44,_45,_46,_47,_48,_49,_50, \
         _51,_52,_53,_54,_55,_56,_57,_58,_59,_60, \
         _61,_62,_63,N,...) N
#define BOOST_HOF_PP_DETAIL_RSEQ_N() \
         63,62,61,60,                   \
         59,58,57,56,55,54,53,52,51,50, \
         49,48,47,46,45,44,43,42,41,40, \
         39,38,37,36,35,34,33,32,31,30, \
         29,28,27,26,25,24,23,22,21,20, \
         19,18,17,16,15,14,13,12,11,10, \
         9,8,7,6,5,4,3,2,1,0 


//
// BOOST_HOF_PP_IS_PAREN is used to detect if the first token is a parenthesis.
// It expands to 1 if it is, otherwise it expands to 0.
//
#define BOOST_HOF_PP_IS_PAREN(x) BOOST_HOF_PP_IS_PAREN_CHECK(BOOST_HOF_PP_IS_PAREN_PROBE x)
#define BOOST_HOF_PP_IS_PAREN_CHECK(...) BOOST_HOF_PP_IS_PAREN_CHECK_N(__VA_ARGS__,0)
#define BOOST_HOF_PP_IS_PAREN_PROBE(...) ~, 1,
#ifndef _MSC_VER
#define BOOST_HOF_PP_IS_PAREN_CHECK_N(x, n, ...) n
#else
// MSVC workarounds
#define BOOST_HOF_PP_IS_PAREN_CHECK_RES(x) x
#define BOOST_HOF_PP_IS_PAREN_CHECK_II(x, n, ...) n
#define BOOST_HOF_PP_IS_PAREN_CHECK_I(x) BOOST_HOF_PP_IS_PAREN_CHECK_RES(BOOST_HOF_PP_IS_PAREN_CHECK_II x)
#define BOOST_HOF_PP_IS_PAREN_CHECK_N(...) BOOST_HOF_PP_IS_PAREN_CHECK_I((__VA_ARGS__))
#endif

//
// BOOST_HOF_PP_IS_1 is used to detect if the first token is a 1.
// It expands to 1 if it is, otherwise it expands to 0.
//
#define BOOST_HOF_PP_IS_1(x) BOOST_HOF_PP_IS_PAREN(BOOST_HOF_PP_CAT(BOOST_HOF_PP_IS_1_PROBE_, x))
#define BOOST_HOF_PP_IS_1_PROBE_1 ()

#define BOOST_HOF_PP_ARGS_IS_SINGLE(...) BOOST_HOF_PP_IS_1(BOOST_HOF_PP_NARGS(__VA_ARGS__))

#define BOOST_HOF_PP_EMPTY(...)
#define BOOST_HOF_PP_DEFER(...) __VA_ARGS__ BOOST_HOF_PP_EMPTY()
#define BOOST_HOF_PP_OBSTRUCT(...) __VA_ARGS__ BOOST_HOF_PP_DEFER(BOOST_HOF_PP_EMPTY)()
#define BOOST_HOF_PP_EXPAND(...) __VA_ARGS__

#define BOOST_HOF_PP_IIF(c) BOOST_HOF_PP_PRIMITIVE_CAT(BOOST_HOF_PP_IIF_, c)
#define BOOST_HOF_PP_IIF_0(t, ...) __VA_ARGS__
#define BOOST_HOF_PP_IIF_1(t, ...) t

#define BOOST_HOF_PP_WALL(...) __VA_ARGS__

#define BOOST_HOF_PP_RAIL_IIF(c) BOOST_HOF_PP_PRIMITIVE_CAT(BOOST_HOF_PP_RAIL_IIF_, c)
#define BOOST_HOF_PP_RAIL_IIF_0(t, ...) __VA_ARGS__
#define BOOST_HOF_PP_RAIL_IIF_1(t, ...) t

#define BOOST_HOF_PP_RAIL(macro) \
    BOOST_HOF_PP_RAIL_IIF(BOOST_HOF_PP_IS_PAREN(BOOST_HOF_PP_WALL(())))( \
        BOOST_HOF_PP_RAIL_ID BOOST_HOF_PP_OBSTRUCT()()(macro), \
        macro BOOST_HOF_PP_OBSTRUCT() \
    )

#define BOOST_HOF_PP_RAIL_ID() BOOST_HOF_PP_RAIL

#endif

/* pp.hpp
Q4k+1lMc/JYjHHE/vfRw7K0RO/Wr5JtEQW5MOmfOHRlVO5tNXp6f0geOUtROgRT0LBtFttyI6DOm9LBECVIjv2F1BpR4uxTG1bQnXSJvim2DpL+RxIDEYHKSbATNxMGP8o6T+AGx6yEeFP2Sr+EV5nHFqGyHPZR06VNVJJQa6gTtAlGpFPbqKc8iXBZXhLyT365rvEjuz4z8cg2kNNa/H0JrGGBT8mG9VhOYnEQD4kqWwIT6YfdQd+DDJif2zBFTCmNApy/kXQ7SKstDH5igafi26Uy+Pc5+T7MKTINtFZ+QenqEcel2zbABW+uobKn2jVDopDfczw6nCY0zq4hLnWlHIqGJCaRmpCJn6dOTdLaAT8iCEEJqzFdfGmYAb8tUOn5fbc+kgr0OLVGyazaydNNrVooGH2lMpSocqC99Ru5l2V5iXess0Vu71y0gvMIvdkTQRYHb1yxB/pdqUblAsn9EgbkE9FXg8s6+q67fLdVMAHB7ulXgL65CSKbIvYiCdqkg7FIQcA1g0TjysSzHGcQdD/J0Dt7uJGm6YF4jM4AoQ4qZACjS7J/9IiGEra06p0SiMb3xziGzeBozW/4XaATbun/B22eRwxFXoUIQB/063iZNvonf37U87aIV8M45hw5Wsx6VU4pCJEPssTODmfgmMbW/JWwao80WCzht3w3otH++Es5/+hPfrdkq+XTc1caZ6Z2sge8cIpYBttH75eJAWG9PmuPk7yVn5hAHqVvZM22bblXjdjn49vBvq4TBarC2w7MFhoN77nkQLbaG6VzGare4XPl8vy2MdMc5OJMn7tJi/s61EuSwiM1GUsBRF3Gh09nWACXvBT0ptyDXfNTUQim62tQHRM++Sn0XoDNTcnkIK/EGJuFLccwIHr1OzuRfIkozoC9KJ2oueopUvIRvcPRTRRLsq9XqMNruL3joDACraHsZgjIGzCQT66dPoWO9cSJrmhpBS3txbkO3rgr6Q1xIdQp6RA0u/5vmSfUg0QtmRP0rnewcXa9+Bh1wcfpA4vi6S6VPWRJbZmzXfqtjIrxDlo7ajJjGqSglk1FdMOWifuNn0uSjus7OpecCO+go2cJtLIzcKbotVuRxXDJ6ivowZ4v+ePDt7zKlIzUk2SjFnf/TZi/BnV+I92UHK3tte0ioneunxoMwBcT6SGl8WHAK4fy3S+NWMgp28La/B12FPYE2VebBVbHM8klWimj3EL2xmMfkzsfzfYts+2H+Jmn/yyDm+Rr1Br9wRzX0xbXxpeRyztG/bdOxbYivdshGJpDug1N66vx1mVs74v0mP7Z4WvBrrG9b0n9j7hx2uH+Kl1XTepXOapiA/LUvlJyOdBeZbuIC9zWum1DdhPhfQftZn+a+8YIeUjngmZP9+iy/BN0eNMDAQRWZWzf5cQbeyxFg9ubY1Ofxq6uFcJpm2wwWD9KoihcaTIfyoaKuF4Foi5Pb2dnadqMiZzj6DymGbJvLzlldndZ1XX/oT/BpTkvviEVV+XpWSDMxfT1Wo2IfUN8OS4W41DcSVnsWdHeYIdn3uARZyljmzoBNzqbVQiR50B61VBP9wyAHWnK+UblGTfKV0IbMXRUF9meS3Qareb88G8RyykWkQ9CP+PUPwxxi7JjEqAUfu6pS8XYbeqtleYT8R/+myyTiWpJscnbOyrj22r/laaPYCvS/ndzU1rkZOXWkaGDZQhKMmaBIs631XLctmF9AVLnKgF6WmwgVmWlTQyO30cVZj0he0B80tuZ+XYaUNLpReAGfT/Owh3R8bwKTYbakN66enjF6k/6Y/mt3VY3NMRAzTv6ZalbNtZCyLyUnQMHaSc6A1DmA8e8wvfuSRJdaXf6fXNOhL/OYRHqLpnl2u39WCU0X7zDPY1WuoeWqyQ9T46C+9a2wEmMLtNmTMXv7ej28BKhJiyyRTxqpj7L+8S2bHsjr3cQltUY7evyxiuvh6XTYbqBsU5XdH1tOtCvvctiGLE1qvGjk9WjUwCclFafsrosf5M4mftmOEdeMI9jyrQ+eA8YPiDL/O4nzgrFgQv5WJzEydY4tgkWc65PPALTvx2iJRIfgELj408mXxLklHSF87Z3+rpIaz+adlO3X6P0lD/Vm2vVD4l6ciuhFsCVT1t4o1jAcHcYq0cQKg/m3MXU9lB+bGI+aEzflqcR2OWEIGtAjLLRoXTLuas7bspewtzdd2qIs+c3bKNC1H51/ala/O+xGHTIRsQ/TKkor1i/4RAs4WS1bbJSfMjnnuln2qzuCv2F0h6z9aqGdRx+2w8yKQ0b+dm40qJPfs/05qXP5UddcP0jjmqiX5gU9DE3FjFbK7nQCkj7rJW9FzdCKkQpsjl122P4AnZ56Tj+rt2ZhmnqwRXuheo5l1t8MzG8uf+6daVMZ4A3h/iDUrJ6/1enwHwPTDOYZ4YP5Kwbv4I3tK0PstIXZvbL153AIJs+9IRvGz08xvsE0HtjgT2jsRcbtI3hXM4iH7PwC2+6ZnYn/poBsqxnNoxK4rPtjI1620yOKX4ljY2zA7SMhDw+s7M2CIg83bklJcCJ9sAaHLS53l7is5d6Zs8c6gGzNrKKmRGpidWYLTLZObslzIjuoGkcNcLbB4yMFd9CZuQhVrc9RZ7GS3tW4O21Zb3nSg4aifxL1Ca0sKEDE9x9UN5IoDLSn6w9m+6HXMLJqiMFZdqcVnUAGGoCGGhmeB2R9B1z3hVO+irFw8zKwuJNsT8WyR04IZsJBIPiSsNBvblzgre06xjMGCzyM4ulgS1uvJCEExsbg7Dw8bnKVDWBVRUp38sX8kKBjBhGw6v7AcQalGhXu41vc2gdSKc7X0cruJjwX7pi1kmsPJDaPVPfGLZKXCX68nnfFz36Sl69vqKxu0GIwRDitEr6UOlM+9yhu2AwNyhp6fyUILifV4ceJQhc0i7ndFu9y0KYap0SZaLMcF/jXErpihamst3PaWXkftJkqoOjxUw4aGbxtk7yamxxgtpRHhJo++Gjjtud7xojOBZy1HI02+3/27uFLa0fWwGOMMHHVEUf3FpDOl7PYhLXlsustyZV1rrIHBZuw3Mq3B6eIKiaW8NMm8JK4KxJ+8dFLq25d2mUNss9Or1ueTak1x7JMDLqSDWRDXkMNRx3dYrM0l2qcRf09QHxKETSgo1FKGU6dUL0U0sF72i8W9JM/D7ohez/t4PqncvB8d+h6qyD0Wj0Xf+lpjGTX3W0O+cMBwLogJ6VoZrcQdFro2wzXfGG1KrpL/S0f6fwsUf0uvPzBqo1XAqDfYB/8L96iUM2k+wAQHG5klEgBWKmvYMBnzsKaEMs53CajAEM34gCq6+zoOMRWPPdHwIcdpnGds+5gyhUOE/NOXD1OrgeDK/x7HsAsOv33Ie2/dK/zCNk/NWciUJ6B7aPEiPlHmAkDvrzpw+s+ct/SSo8E8dSGeYVqUKaIcamcrcCKz/R30aTIQQEXWYABg8iRo9hMMZ95fL+BOFBViVUf87TcR3IZ8dzs+vvCn/CIOId8njYTab37l4TsixXp2BUpI++PFy/x9XbS21I/w4Nxns/rNHe/TNxPhPAIhBcOszhO6aw3Cz4zq92E0lj1+f7MPh8o+mbX48vWUkUwWh8LZWhZJXXGrNLio7MNOkNKuvY3JnXOVzjziRIlE99YLXuCyWLCCuFBVZnCT8e7TvcqSeEs1hMdMC1ztult5ypUbtBjcVQCC2iSMMZRiNqORBy8pXnj6XlV6Fg7WGR83fPJrl2St+YepV3btmKP77P4VkUl9hvrA8IDoWqSAyGW8twCWIJ+Gc9+8T9ii/F+QFjMdbkVw+A8iLWJ9zB7caHTioCRBPbcMvq1k/fJzlmbgO2tQLBVY77v8tKn8aJEHEgwQ8R6Og5Kd9X4t6QTpfhtV7cEOhy0wXtcp7H7OJXi+wo85DJ7yHdEahyZdS57KqBHsly3nZzzO086wr+solN1jBXYZRQ8lYlvp36fQa8PLadDI2+nkmEUhb1ft2VU828wtjM+txeT/YRDH1I9oo6g+Bb0vi6XWG/Bl+0ETsYvHQbzmuk1vWGYm8hF5w9jXlLuGegPEbzAhYG0vbDkaTV4zdPmmATVqCgKOaBEDUuoSPZl6F3gfGOKqY2+io13OPDd1xtynBaNOxcbOdvPDlo+yGvjVqGEa1Hed6yHP6DycOgPa1V2u7H1NY7ycf5RQIBDJk8TwWTfTKOb9mEYddocF51Ap/da33nQYRPDy3IbNXTf3hEaEf/QAAhRyTtQf9p1uYfeMOkFSJkwhX3KBjFXTTI8PClsQ4CV5x4KNmyAc1N3JKygNcg24GgHTRnMpUbFhUAFqsJLD1mq7kpoQb9fEokz+oN/bAvox/chkf3Ho/AjJk+LqvYafk6p9A7dUSy4WE8tZHExmlv7023mpr2grDbP1Fd2zMLRDq73+qLG8OFvsogpbuVy6qNZeyoGF8lyctKU5ZRxXIyD/97q7UDiSH4b0Mb9VoXgP3BZFKZUnTAdR7hyvnfifB1AgkES4YyUGsKr7Afk0GRn4BZd2+0gFsPIlGdjRYtvyW/X6pcZNHcxtv02UXIz4useEYwbIAgD0nq1llhKAqypH9gnRjeux7fzNCULTDCkFqn7ZBOh/PNrXLO4goxBBjdzMHJv3vvSXFo/XF8h6Fxguw6QdEhWYqIX4pV0dTqdwqjuSGwwFuEcEGhGy+L6bMYm5QapRTdkCTf+gvq8fj1Up8azSedeloqSa6JC5reoFBEJjR2pSgMjqnvIVt02xcuR0HN6Vrr1auaNVQvPyYPcKN/wFvaM67+32efU1XYBPqC25qKqXhNkW55/t2lw/6hbQ07HeOLQr17GLz2Hwa7mH+8UaReiFDdupCpHS1whgb5fFvP+rMZJ9Ln2teXDUYt4W+Xwelhz0VYrCZFYpSN3osY0RzpZnUh6nMopa3+VQwjP0wwBlm31Ko2E4NYagHM6K6pQW7yyK32wmTelmzdp/M74F9+9BrSTgcANQEUTiMNfbtD3uqHO5WssOSWHZDSqs+REaFljM+e887aE2e5e224iBT8AOiQK2Wwks8AQvhSJLdzmkXXoWVGJjih4LLi7goZt46vmInqhdD5/cSHSDwmgT5Obv9xFFnNOxl0uMJli4QAZDGijj1OgTjEiK7h0lngmbim0NpEkUV2ewA1tqg+MwAbyPPVk5z1zcOxLE5PISDcjwa9AnkIGTDp1H4u6P2xQLIZ7Gwzk3WUqmyGSfMsx+pno5xiPolvPPJFz9cxyM0GYhizure79LgXNN0PNFU6K2DfzWKo57vAxo7XxMlmcN/i3kdEWThtEwMPYHK1nYgp0p4Uua/GWn7grYQD4PhT8ddkevkCLpYcinwSxVd0Qj1WUwAzcOdf1IvHH4C8FyRBOW1XOuEtxiNaLvRog2H/R0mGaB4+V5Xaw3QBmulSMffV0jP5J40+SJiXUCfImnCTRxAW02DG9rK9Kdda+xNUwhofsNhWjrQpfpirxuTAz6vmytzrO106pSYXUwTQRpnSGHgUsgGQaSEJJ6Gj5E79z39gOQq5thvdseGPLWzvfKiUzBgpg3SY9GaKd1452mTkjiVrDA/r92fg3ABLk99D3pciNvDbLFKft/S5uffvA9A+fOj8fWdFqgLK5IqIx34Fum4/ZrGhu9cSnswko9kowNi/gj8CVfuA6UPXJG+kEglzLvQU208GTCbSObX1bpZCBpFXlwDgnM4VAH3+1hgdWq4jjGKOhHufKin2NfNQNIpVoXOFWxKT2bY8uMGnbi+ZhIEJfnytiJ1iWuLHvLStgy4U2j/i4nVvQ8bG5HfdElED7OXKRfLz56zFqI5ic8kh1856/4I+DmD+guBQfmJ3tBoWWU/g55lF4GCMOIwkmD4P1uBnZuPWKjNsI416jWgR8xB5phj9SfzlmGeO55HLIqEHxD34Qbrl7vM/5fuMXLYdPuvYkumRwTJLAoysxoGFk59pjymNfB3zMgOFLjsDrtUhLLx7TcWqz4HLkmLqAlZwq0h+4Jsvlpatkq/qk2WvFKXvbn7mXI1zRgjI/+bVok67/nvo67By1ukKbsGaIXL80as2rlNJWT5OVUKP317QpYDx6VthB82vAzHwF5ms8VFGEsMfU+7TzXJCjM26UDbpIyUcbX8//KaQ7v02LGed6tqcqxZH0lZr6OdqvzDmfcjoUuUMlMzG0hbmhjytE5gpV4SVglp7VnxQb1ocpD0496q7JB0VUesVJ8gp6pA+sHl5GH0XIcm6qqz7CDW5ZM3DksmSMUlJ3+gTATMxe/vKkAuV6qLs4PIvCrx5dPqOIRoZguGiYS4k1pP6071qb9N0/9ScXTtYJwW/wwCV8HZCY9RuLsVl8ExjNv8Xks/fS3dTzUK97j2GT5FRYGUvxzEkJWk2OqpSJuPVgcUQ7euGsPXG4UXQIhgVqLuguGtJtTOnUs66F4lOSlssNtNCkKBi9cVXcsIBsPBANuVmEv/TzQCcBnO2U60TglKN88fVIKKYLjFP6KE1cVqsB9oehUW3oGTlkrHBf1NJjSUQap/YXBcQqVQAj3pEALgV/L1oWwtYCfUMeLOc/IulA3p9REVD+9HuP0Cyr5yIv+xwQIvsQGYd7HyHR48MG5Zs9ISiCXjEVC/1bhNSDLWF5RtFiYjmyy2vo2O5kh91mfi/jam6T/n46UZhKbYDfzQBuwqf7dVbvtBrOpe35RjFhyIJUwVCPhVzB0IAFXVHHyLzd0oAFzhctDyWWtTSKtj5nCHiOHMDdNCXgr1B5+Vxn1TzYV9kRW2duY0NmEVO7+Pf1YQ3Ezz1hr2DmsJvC4UQGLGY6Yey6+HKXHt/dqxceqDGmqqH8ZH1ewrr51I+Vn3Oj/g08emPqe47WxdHRoGvxzFY/6Bzd0J1zZZthrGklSdC7o2YtNbjHLRbYAMqAgeo4habRIFBMaQsN8JQrqrFnlmGNxKM1Gg6UzCAaY7oAyKikWuaCuQPYglp5p1NEMD4NTgqpuRFgvXDkaaYlNr2QR6ES3lj0+KIDrbAke/E5XL8YoL/06siXciZJZqWYlxb2Sd5/jOlz3FpQ4mS476X+fBFYUh++y/nW2ynHVGFHLdyFi7WejRmIhQC5o+QOVThu+Q+d03JWWmE+Z2Omx58YD88+wQSnkFDockhWaq+s93anMEM5IhGoSzMpc4P5i9dCDME2G5Nc4dWFOXQB3hz1Ki0Y0lkp9MOlW8XSO+irj9yv8cjVxVOK6hEIYgb5j2Cnj6g0JAwFuL2yJDPEqwJVnN0oaykP2JxEKMXRUxNUMgVqsh+IpmSLI8FSXc3ROX/EmSyPNlt1OHFrZAGjz1mviB3/wyM/D3s0lh8nk9Mg+kep6xqR63ipEZUlZxNjB9cwLeP6R5PRQx/ZQx8yoVAfmUCxcZTTbBG3em7O3g0cnTb0q7B8cuAl/nQQwvxQ7o+lQ2mkbQHPe2BQRRUkhPQniDye853p8dEwkyFDRPQ/5m/EhdFq4t9qNztMUyKUWNXmoti9h0HV0OctndMpq8ejM8MVdhl8siW40/p2PTohPJoUo8GzYTqkSp/lKgwItJWwJgYWQXLqOQccZr8N8jGJm6TpbFyPnBFiSv0z1eNMWvUv0vz7mOUueMMZwDjcZMEIkllU
*/