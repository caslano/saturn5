// Boost.Bimap
//
// Copyright (c) 2006-2007 Matias Capeletto
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

/// \file relation/support/get_pair_functor.hpp
/// \brief get_pair_functor definition

#ifndef BOOST_BIMAP_RELATION_SUPPORT_GET_PAIR_FUNCTOR_HPP
#define BOOST_BIMAP_RELATION_SUPPORT_GET_PAIR_FUNCTOR_HPP

#if defined(_MSC_VER)
#pragma once
#endif

#include <boost/config.hpp>

#include <boost/bimap/relation/support/pair_by.hpp>

namespace boost {
namespace bimaps {
namespace relation {
namespace support {

/// \brief A Functor that takes a relation as a parameter an return the desired view.
/**

This functor is included to help users of the relation class when using
stl algorithms.

See also member_at, pair_by().
\ingroup relation_group

                                                                                  **/

template< class Tag, class Relation >
struct get_pair_functor
{
    BOOST_DEDUCED_TYPENAME result_of::pair_by<Tag,Relation>::type
    operator()( Relation & r ) const
    {
        return pair_by<Tag>(r);
    }

    BOOST_DEDUCED_TYPENAME result_of::pair_by<Tag,const Relation>::type
    operator()( const Relation & r ) const
    {
        return pair_by<Tag>(r);
    }
};


/// \brief A Functor that takes a relation as a parameter an return the above view.
/**

\ingroup relation_group
                                                                                  **/

template< class Relation >
struct get_above_view_functor
{
    BOOST_DEDUCED_TYPENAME Relation::above_view &
    operator()( Relation & r ) const
    {
        return r.get_view();
    }

    const BOOST_DEDUCED_TYPENAME Relation::above_view &
    operator()( const Relation & r ) const
    {
        return r.get_view();
    }
};

} // namespace support
} // namespace relation
} // namespace bimaps
} // namespace boost


#endif // BOOST_BIMAP_RELATION_SUPPORT_GET_PAIR_FUNCTOR_HPP


/* get_pair_functor.hpp
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
*/