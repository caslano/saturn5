// Boost.Bimap
//
// Copyright (c) 2006-2007 Matias Capeletto
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

/// \file relation/support/data_extractor.hpp
/// \brief Data extraction functor.

#ifndef BOOST_BIMAP_RELATION_SUPPORT_DATA_EXTRACTOR_HPP
#define BOOST_BIMAP_RELATION_SUPPORT_DATA_EXTRACTOR_HPP

#if defined(_MSC_VER)
#pragma once
#endif

#include <boost/config.hpp>

#include <boost/bimap/relation/detail/metadata_access_builder.hpp>

/** \struct boost::bimaps::relation::support::data_extractor

\brief Data extraction functor.

\ingroup relation_group
                                                                    **/

#ifndef BOOST_BIMAP_DOXYGEN_WILL_NOT_PROCESS_THE_FOLLOWING_LINES

namespace boost {
namespace bimaps {
namespace relation {
namespace support {

template< class Tag, class Relation >
struct data_extractor_implementation;

template< class Relation >
struct data_extractor_implementation< member_at::left, Relation >
{
    typedef Relation argument_type;
    typedef BOOST_DEDUCED_TYPENAME Relation::left_value_type result_type;

    BOOST_DEDUCED_TYPENAME Relation::left_value_type const &
        operator()(Relation const & rel) const
    {
        return rel.left;
    }

    BOOST_DEDUCED_TYPENAME Relation::left_value_type &
        operator()(Relation       & rel) const
    {
        return rel.left;
    }
};

template< class Relation >
struct data_extractor_implementation< member_at::right, Relation >
{
    typedef Relation argument_type;
    typedef BOOST_DEDUCED_TYPENAME Relation::right_value_type result_type;

    BOOST_DEDUCED_TYPENAME Relation::right_value_type const & 
        operator()(Relation const & rel) const
    {
        return rel.right;
    }

    BOOST_DEDUCED_TYPENAME Relation::right_value_type & 
        operator()(Relation       & rel) const
    {
        return rel.right;
    }
};

template< class Tag, class Relation >
struct data_extractor
{
    typedef data_extractor_implementation
    <
        BOOST_DEDUCED_TYPENAME member_with_tag<Tag,Relation>::type,
        Relation

    > type;
};

template< class Relation >
struct both_keys_extractor
{
    typedef BOOST_DEDUCED_TYPENAME Relation::storage_base result_type;

     const result_type & operator()(const Relation & rel) const
    {
        return rel;
    }

    result_type & operator()( Relation & rel) const
    {
        return rel;
    }
};

} // namespace support
} // namespace relation
} // namespace bimaps
} // namespace boost

#endif // BOOST_BIMAP_DOXYGEN_WILL_NOT_PROCESS_THE_FOLLOWING_LINES

#endif // BOOST_BIMAP_RELATION_SUPPORT_DATA_EXTRACTOR_HPP


/* data_extractor.hpp
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
*/