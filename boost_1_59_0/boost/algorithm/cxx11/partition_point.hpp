/* 
   Copyright (c) Marshall Clow 2011-2012.

   Distributed under the Boost Software License, Version 1.0. (See accompanying
   file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

/// \file  partition_point.hpp
/// \brief Find the partition point in a sequence
/// \author Marshall Clow

#ifndef BOOST_ALGORITHM_PARTITION_POINT_HPP
#define BOOST_ALGORITHM_PARTITION_POINT_HPP

#include <iterator>    // for std::distance, advance

#include <boost/config.hpp>
#include <boost/range/begin.hpp>
#include <boost/range/end.hpp>

namespace boost { namespace algorithm {

/// \fn partition_point ( ForwardIterator first, ForwardIterator last, Predicate p )
/// \brief Given a partitioned range, returns the partition point, i.e, the first element 
///     that does not satisfy p
/// 
/// \param first    The start of the input sequence
/// \param last     One past the end of the input sequence
/// \param p        The predicate to test the values with
/// \note           This function is part of the C++2011 standard library.
template <typename ForwardIterator, typename Predicate>
ForwardIterator partition_point ( ForwardIterator first, ForwardIterator last, Predicate p )
{
    std::size_t dist = std::distance ( first, last );
    while ( first != last ) {
        std::size_t d2 = dist / 2;
        ForwardIterator ret_val = first;
        std::advance (ret_val, d2);
        if (p (*ret_val)) {
            first = ++ret_val;
            dist -= d2 + 1;
            }
        else {
            last = ret_val;
            dist = d2;
            }
        }
    return first;
}

/// \fn partition_point ( Range &r, Predicate p )
/// \brief Given a partitioned range, returns the partition point
/// 
/// \param r        The input range
/// \param p        The predicate to test the values with
///
template <typename Range, typename Predicate>
typename boost::range_iterator<Range>::type partition_point ( Range &r, Predicate p )
{
    return boost::algorithm::partition_point (boost::begin(r), boost::end(r), p);
}


}}

#endif  // BOOST_ALGORITHM_PARTITION_POINT_HPP

/* partition_point.hpp
NVheJz/cQpt7w1y2XDMvOjhXRDrJVKE9st7trB/c8aw/tmj7sXpNhsFgqTehp0ysnxlkuYZz/Ng/gGm+gLH85aQdbvReQZltIQfheMEKspDH51pbqyPrQNalbkNHtcP6RTrqsleS0xTDd5MrHj1Kf08vVmcK9uPHRZZS7ZtSxvbSrLXfZdJKmEohyQNNrRezzbI7TeAiFntFTIVEsgVvf75U9y1Kj8Xl1YHm4mRFB/sn2cj0oOh4v6U7Txutbd4kCJBrG0Q7XZcHPC+4IvWWa84978M/hNtO1TPxTm/oEtu0q/MNmBjfeKaEs2yz1H6tJANKJ8NMK4u3bNm3T8yswaofL7y/p3526qqYBSPBun9s5OLszsHZkYspKik9GuL8vvr5k5HK50NnsGmToa1HVru+SJQTvt51HVXufjANKxsqPkOMbaqderBtPF13Ev5F+Ot17IrE1w58iop+A+eLrLPPnD4f2+37YczVeYJYIb34Qva6tFdLUrAOu7LHL9KLqjIp7/zNLk2ztBPK2sSiaHfNynvfld+562J5bX/ZMjojnjy9K6TkefGHZMmKPRbqSRUt6i7X9qRpBqdfMm9UD063d9IsaH4pkB9fTBUg6ZY8in9RcqvK5Za+3xHx9F7rWwJiZS930HJb47piELMpFMRKTrP7TCwibGMyq/BppV55wZuxdNv457SzOeMiaZA9D2p83zJ7ls09QvWmPS1L/EOnwuaWtiHHHUpv3YugWTrei/CwbCmqfvNydDDT5/VcmrCzVbZYUlZxhA/O0ZdQExVRr6NU0CTFeW4lNvFtUG7tc8Mv2IvnStQ+OldyRCcG7nJ/vd19kcexEi/2AMd+yvdgXc9iR0qP+q0AWsdLxaFGOt9SEKNipilaAynOm3/x0aHg6cABP3YqRaPjo/IrKZ3o5W1AT97BjoN7p8USdkzvV2j0T3jklDWgVfF6f7kYlYIPTmHiL9g729saO4mnPbuw4TMs4N7d48hidfCjz7du2VL7A4est/6Sq+TucDzpaO0UZ2I6wrtqJ2GOPn1xai37A70q1NwtHFGEcV95iNAJ4XEK+5qnt68+6sT8hm4dqUfV4en2NyZbdDudbJDpr0KktTNP7pAwZB8Kmko1dX6SVpgde6VpIQqNSuq5NfXYY/zdefcrDvPMqH7dW9ZiD8+kWD1VQO84jz2x0/WdztZfWp+v1QBbhnP4KP7ugXQaxdWPB+xR3Xx4EDAoDLrZ0dPTIoADdG+qP9GVToGqEnURMJgOHIHAwpEobQRKA4ZWgcFUdvwQo9KgqlAcqIICtfai0qmBXtQAKMEWBbVwJXv7b9I7tCyo7j9VwWEwLAwNx8JRMIwGDPVDlTWN6h5EpoC6/lqVB2jgpyoDgz/5C//pr603gwJFILRsqFQ6dJNvo2Xq70GFfl8T2Cc668GxSBKGiCGSiDgciqQDw2OJ2hgCxgiGQ+NQWCzKAKqHROngUSgiHoclonAgG4mCGWHgcDROB22EQ2LwBi5admEBFC0HG4qHlr0zHIqAwl209lD8PeleUCwWdO3XHQXABAEEwJptAwLobZJgSwUgECEAwroTLO8ACJs/AOGoBiDcCgBkizQA4SsCIIJmAESoDIBsfQVAhG8CEJEOACJ6H4Dc6AUgN88Av/vMAumuNHoojeLBg4JjtVE8SkokKyMla6KRBlwTw6M0MtrexfNn22Tt6kkJhCK/78n3lRBc6a6+VM+fm4r8szNADfIHN1PL3Ns90Bm9OefX5X/X8nMK+ucUHI2Op4Y6b246HAkWHawLqMafTvGnB0K1v5u1oLh7u/5OyNqVBsr86pkNJZAaRCODnmJ+erpp9KdN7Z82f9t+OFzLyNuXTqFpGfmCR41IIVPdKT8/ktB+yr5d/s44Xr0nFac0BaM3rLKUb/8i/dhCUmXh61XesnYLtm0LUU6aTelvJz5+qXSYhMvO9W/My3J1djXvc5DFku7SDA0E9xX4l8QVJjNGTxM4OuoS7tBojQ6UmiB7q1fP1pb5XCmVcbrtCyL13dwX1McHWxH7zoal5CXH2pKyrypkZT51tLStenj7TI5ymWP/qSxFu45qNPt4VVoic3DGvRWfVRqXWOmlrry84jhJHNjlk5rakpvBl0IN9g5uuyoUfZQc+zhH+ZlSsTft4NHwmggFQzNJUoj8kmJZqNGVgWAbypOR8e7ioTnSOfHo5OIWZBjwqT/zKR5oJDo2u+/KbYjujSN2NNdFXWV0+J5PRZ7fd2fy2JuY9JJEMedA/4xJr+TzHJcQOcpFrl8CXOWDpkpXPnDuuDjRYm3GPaxi9LKkYE/l9tgthdnDuTKnKlrjGGe1ToTmGCdamUpqK2s/ujzXFn3V/uj1PbTS5Eu1PP49OkEBefw2bBpTafzE/afTeU/bh92KZPiLiTe5LTf3uhaq1dkjUf0snrXuZjjZX15f8hr4hLY49hAoLg3W5lL0Gvq0c3fAZXp6UG7X8YT3grU3+u7q7xZ2r9YdpsiqWD4ca9VU5ui2fSYncpBDcEQ/zu1dSVGwr4rf+HavkYAOEsdeCxGLfM0uPasGx3bc0eth29YBFuMAdN9D4+ODMrsjXQ57r3Cz79LFpkqklvgSLoSVcjdAqyeTb21PXKzM9UNF9tESWltwvus4arF5HZK2jFwLLT6XB6w4cxpsNU55kT3jYU2cRryUTl7SvfRpTJp4efT+a4e1Kke+tL4qDk38cbeXhZUButLjE7/wzL2sNINeftpzffH+a+XdSQ/1B2ZFU/hqAHaVcCZfYnkHwmFgMMHXyWJYtLLsAJ5c2b816srXaxyxF7D3eZVRboP8eOzBsxanZeYbaqyDbXMljqFjtZ/x8F/kYY+YjEnK2XNPf05iTeZUicAV+PQxq9Mrj9RuuE0fzevNWU4/SXi1Yxi7cH7tIA/DsC/dLcRYITfFYvwVOxxdcXyxps3zxqFXWdNr7QKM9dXwKpfV8IpvkKZmx/7fRRnMz9tGCqUb29LB+wX2jW3hYA1GaDotCLxpBgabQZxsS6E7a4ERSMuOEkrXMvUD7y3+R0P40Zi6aDlYuflQyHRwtqkfDIrdvOWb83+zh/1p70e8/SGuZRvkRt+kv6vRwnvTA60pNALVL4Dqvxk9sGCs8aXSbANcyRQtIiXYm0yxMcb/FhWIBLsfMeG3iAEmFFpHy97bHSTASKRlQvH29KJvBqSfYWOjd2MYEDQzMjUCg/dmUAerjQGAAHBxcHBysHNxcnJyc3Px8Irw8W7Zwrttq7CAiIyk7HYZSWlpqKKmClR+p4K0tCpmx04YHIVCyaro6GMReppIFGJTCYSbm5t3C68EH58EQk5aDvFPp43HgBAX0ABEsULkARYhCKsQZKMOEP3u6l8kTpAtIvjXXGCTC/mbXKHfc/sBXlYIaIVVCDAE4oD/W0lgo+93x1rnj/AOHEwIOAyLhqGw/xDeQf/veOe7KjgCpoNG/knVP4934LC/wjvgN95f4x2dn3AHidMhEkhGRtoYDMqIQMDiYSQimkjAwNBGIMohgXAHYwTH4tHaOCMcCoXXQWPROAQWoUMiwIyQWCMEEf2HcAeF+gfgDjAKwpy9YHkCQDhVwfLqjyAMCDIxPxBMnLWlMR+P5KZiPlMTog3YQjcLFytYE2+dbQCbbus9dqSNjQ2wy8LCwsq6OcTOzg5eyM3zzsm55XtiY2P7QW6q+p4EBATCw8PBIZAjJydnZ2cHyggKCjIYDGFhYS4uLpDP8T3Z2NiAakGd4OiP6aC5+vr6tbW1Dx8+LC8vT05ODg4OLi0tdXZ2rq+vl5WVPX/+vKmpqbKy8smTJ+/fv3/z5s3i4uL09PTIyEhOTs7Q0FBfX19bW9vw8PD8/PzHjx8bGhry8vIyMzNXV1dbW1shEEhFRYWvWyQMtKdEt7G0BcTW1rm+fJZcWM5bZ1kValpe/partbD2Jfdb+4r40sq3L0sflGvuO/EPghOSTYk4u9CD75pJYrUwXmCvo+m0IsXjPivFI3tNNjfiwYCZeKPvxm4vZGDlFtawJIvzy40vSD2cUuKO9ozDLp+XoDf6L54g9HQvLycKV19d56hdH2+qo8kEEJpLutLvfVq6A7mV2l2/ElAteErzkMS5+Nt9TOnmi905+6kzTdfD9B5KC87yC7792jELsX1TKM3lfYitSVBaRAb+afNAmJIsiffxh6P+K8CpDhwK/gj5Y2z6m8y/D03Bnzp/D5qm7PKXgvASrfJDXnBLfzM8fiX1Pg3A7Jhhqz6RIoc5GexqEnk6R0lnLMEgqf3mZ1wovCOi+nhkh3mpT4n+RLROsZ2s7LXt78Z4zIyGLq16eJtK1p65yIjYh3k/tSWcgI6Fmb/OVFQWGkknKA3RyJ28g85fbykL4Wxbb/j88rTsRuBlh/QB1U/uAnYzM++fmrywFr+f4dWkcVPPyWW2DdG1s63Pigc3N4PMYRMedw6JI91D3EytzM9dKfR5N5CSvD8MMWfSLmW+c4IJqn07cahsl1cWQ1/4EbPK5YbJpThndr+g025J6XfiOvBJn65jhTgS3JqThzJl5saP81m+uKsIv16m9D7m3ST5YlKKuK6+eka7tMTeioTsqMOHclJvHi2YdLRpLbNEE6ZX6iidKzyKC2Vu4dnBzeXBtw8VfY5YZ7G/3Frp4ypNrmm6tzvvfkhDHKx13rr9fgqRL2lwTT/dTv5ISblm6tu4V61hK208bwzMcoo2+uyu7n+0NGt65ChVsqcnny59CnUeWdUm5ulRMxc45914bIxOel+1MRtHSFV2Ub0s73L1ss0pdhqZO/xle8LBO6o2JXE79hYzfA+qfjKkyOMGdgni6vWD258G0W1TyasvSxE3bK/eUJQvK3peM21qvjWmR3lLw+nXJZ/LP0nNLX5cPX5sbRGXNH8i8RXr/KtRrbzIhdn/P6gLicL8irp04H8CXTDY/y3Q5Q44/z3QxfWfBl1Zj/89EHTiXwFBcAwciYTBMf8gCLL3BvWGBP4tCISAo9Bo5D8KgX5T9K8CIBISTgAhDwyFI2LheBRMh4THkYhwEgKFwRPxaBwIgHRIRCwRh8GhYUgkDo3EGOHhMAwSAdfWhsNQaIzRfwAAvQUgrGpguQJA2JMBCMeuPwJAcLQO+gcA+h/8f7D6ZSE/LUNLzZp3PFzbvsBndKL3GqNEb2PGINrRe8RoQYTB6IwaQoQQIWoQokRE9N67ENF7FyUIUaIHIbo3ktybc8499733eX+cd9eU9dt7/VbZs3+/7/rtNevaTQUlfrCAKMG1hU8DIwRgkBAIZW5HICkpeBNhjXQDQdAn4IK695yRgvIId4QDylpamgDpZHmpBPmlLI/ycHIHgQXVbS3djEUu65j8qPS9lV9VRH5VkXV1l0N5GQuhz0DF0G8TdCNO7kgndzcQ7Hunyq4oD2e0oirI3dUDKaj+I9MR1HVFOLk5I1yRThb3fnTyXVNaWlATaWmL+FOjNy8V3X9eBxzphvJwtUBfl+iv67oc4q8Rwn6NUAPpZO1uAwILCwsJKtk6uCNdBZUcEO5IBaQFyvKyipu7KxLhSOA15WggEYPkJDRpnm5pJW6PAfi6chJz7mJcdxm+q7nAsz2Lgd+6vv6yyG7t9uDKZxUhGVMZU5Omhxc9MsypxaZ+F49QTWebqR99WmZxDoO3B/uW10a06QnlpxUyIQVUsrG3WBKarwfKXzuY/3xdy+/QtjWrdkTDgjOE2DLxLg7Cm1Hzk7v8ZyZkCs7wsgwFFWnLPRznilv74yOeCKc+y0fbV5APv7rxucr3NkSiYCQdButfn8CPIxvKtCeiDWansFn2BB6PcvnSxCoNH4cWiFXLlmiJrpJf1bQc9I8rzEJZN0CUq0wqZyYkpbAc7k92bV3TR0Y7fu38csBvoXxHm2ejk5fBGvdjdPWUylzbU5GMW1SxsMfNgW462Z/UPXq9Y6lQejvvirxpjLq5wjJf7fraF77m09OHZc52n4zfA+syaWvor1Cu1Hcsr+YR39zWTsljBR3kuI75WOy5c6ffjQ/oXihvkrnjd7p7bE8MfCH/sYMe83kOdBHS4V/iqLpGHbfKcdvLwXXfT93tpt2LIP6womfWAbr48GD5gVn8iuR6PuoDGA6xkXZ8W/dy4reO9QF50hkskWmmgOszfAH0qL5r1w3k32VAy9g/m2F+dDdJW+QhWUcOWZNl8URuR/AH3ObdziketR6kCQuaabxSyNVjjtzrPeHIoZKVFhHD6XBYSByvU+F7HJ4eEWu7FrPp30ttjUcIcaat0FFAZZ5u8fRDmGC2s8D4q/z2H5JU1LEfPocW01TKP7WcmmlL1LxX4hlAfD0B7tfBysYuu5ScaBP1KRR+Xz4yMjaC8Iaiway5SZV3GMtc3NUw1RQ3V1/+/jF+i2OncWHXvfKh0zdXcDEfn/I5mq+zIt5uhJTHllrDkNGJ4MbZxjb7VJrWJ3DaMhpeBjDSd7FQ4Pxzj7mKSSfZkbkw7ZfuFY+7Lk7lZ026HarTESt6981QfTVDueGLa7f4sOO2je2pMvPJId2xmrnVu40edwj1lCljx8TbjrZKPaJfrPmnRqzpUs20u4WzVwnEpIdPGRLwhA2cF4VlNJmwG0sPxoes0H4UOLHSGqWgLL4d8uLZ3paJqBKlz52XqkWm9twMH/gz0iufYQP6K85NPHnYbRc0kOJP4CE3KLWSLgxRlSzieAnOz7Eghq5ZVZoV0a6vpKce0EEnWjQ6qlaDFhjluVYKNbjbiFdMXErmPacf4FLxVBiCMqOLU1umY+d9WKPyKde2h/rnS+7R51O2YFupqRtsRS9/G8r+vHDvE2t0EIuIwWYQf2UnbWFUdcqM8RVLQ3bM7bIxeRPZdvhTH8zwkXN6nRGq6Pck7lJGDcchubx+7/gL72l6KITvIajdItpOQj4hcBDZsSPPpThSkgQCRqV2gwprreQUzhw5o2qXuXyZK4T27ftfbz/WoY2ulz5bqr6520E1FENx8rUqLkK5XF+rf3vhix5jAYtAttZyyjNUrRu2e1OquEGoaWnmK0YETfeLY74wyXzKPIlGUWqstF2G66VWJ0yN/HcmluoHQ8v49GEDDZyyI/HgRXXJx/NJDBYkryP6H4hObZtIQswsPDWCXKff6FGfZUYOpS/5WOxcgG2OkdnfRFao3Pio754IVLzmC4vrg2xfSxgMe3TnFO0SMo1QkiM0/X7S7CcHRX9xUNHLXVnHHQ0+tKysA0Z/o5y/w1ganQRvuqIsdJDuxoLomURQF+nlLqjqiCaq3I9M/kemaiJ4S8vcDmnhfgl0RyGQ2Hf+qjqCQeI/JWEQWOinCAGBwT9FKBq/P0UREBjyU4SBwNCfoigI/H2+uRzLP8Yu9mvs3wn/s2tBHQ9z98vj70MSlLN1d7uJdJVHOTqjnC7nCDH0DOSActVxRlggBRWQd20tkHBluX+gX0Fe9wf4/zEvgEAwiJCgga0lWoaKCaogba1t3C8lHU2Emz0IDPsxrH/MEhcTF1sAYln0AJEAS8BlupgGyAPwcHBwcbDxcHFx8fHxCAgpiQivXCGkI6cgoWSiZ77KRM/ICGIX4ASx8rExMnKJcvMJgaFQKDOnuJSYsKQABCp88RZAhgcQAghhAsgAQDIABhng
*/