/* 
   Copyright (c) Marshall Clow 2011-2012.

   Distributed under the Boost Software License, Version 1.0. (See accompanying
   file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

/// \file  find_if_not.hpp
/// \brief Find the first element in a sequence that does not satisfy a predicate.
/// \author Marshall Clow

#ifndef BOOST_ALGORITHM_FIND_IF_NOT_HPP
#define BOOST_ALGORITHM_FIND_IF_NOT_HPP

#include <boost/config.hpp>
#include <boost/range/begin.hpp>
#include <boost/range/end.hpp>

namespace boost { namespace algorithm {

/// \fn find_if_not(InputIterator first, InputIterator last, Predicate p)
/// \brief Finds the first element in the sequence that does not satisfy the predicate.
/// \return         The iterator pointing to the desired element.
/// 
/// \param first    The start of the input sequence
/// \param last     One past the end of the input sequence
/// \param p        A predicate for testing the elements of the range
/// \note           This function is part of the C++2011 standard library.
template<typename InputIterator, typename Predicate> 
BOOST_CXX14_CONSTEXPR InputIterator find_if_not ( InputIterator first, InputIterator last, Predicate p )
{
    for ( ; first != last; ++first )
        if ( !p(*first))
            break;
    return first;
}

/// \fn find_if_not ( const Range &r, Predicate p )
/// \brief Finds the first element in the sequence that does not satisfy the predicate.
/// \return         The iterator pointing to the desired element.
/// 
/// \param r        The input range
/// \param p        A predicate for testing the elements of the range
///
template<typename Range, typename Predicate>
BOOST_CXX14_CONSTEXPR typename boost::range_iterator<const Range>::type find_if_not ( const Range &r, Predicate p )
{
    return boost::algorithm::find_if_not (boost::begin (r), boost::end(r), p);
}

}}
#endif  // BOOST_ALGORITHM_FIND_IF_NOT_HPP

/* find_if_not.hpp
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
*/