/*
   Copyright (c) Marshall Clow 2017.

   Distributed under the Boost Software License, Version 1.0. (See accompanying
   file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

/// \file  reduce.hpp
/// \brief Combine the elements of a sequence into a single value
/// \author Marshall Clow

#ifndef BOOST_ALGORITHM_REDUCE_HPP
#define BOOST_ALGORITHM_REDUCE_HPP

#include <functional>     // for std::plus
#include <iterator>       // for std::iterator_traits

#include <boost/config.hpp>
#include <boost/range/begin.hpp>
#include <boost/range/end.hpp>
#include <boost/range/value_type.hpp>

namespace boost { namespace algorithm {

template<class InputIterator, class T, class BinaryOperation>
T reduce(InputIterator first, InputIterator last, T init, BinaryOperation bOp)
{
    ;
    for (; first != last; ++first)
        init = bOp(init, *first);
    return init;
}

template<class InputIterator, class T>
T reduce(InputIterator first, InputIterator last, T init)
{
	typedef typename std::iterator_traits<InputIterator>::value_type VT;
    return boost::algorithm::reduce(first, last, init, std::plus<VT>());
}

template<class InputIterator>
typename std::iterator_traits<InputIterator>::value_type
reduce(InputIterator first, InputIterator last)
{
    return boost::algorithm::reduce(first, last,
       typename std::iterator_traits<InputIterator>::value_type());
}

template<class Range>
typename boost::range_value<Range>::type
reduce(const Range &r)
{
    return boost::algorithm::reduce(boost::begin(r), boost::end(r));
}

//	Not sure that this won't be ambiguous (1)
template<class Range, class T>
T reduce(const Range &r, T init)
{
    return boost::algorithm::reduce(boost::begin (r), boost::end (r), init);
}


//	Not sure that this won't be ambiguous (2)
template<class Range, class T, class BinaryOperation>
T reduce(const Range &r, T init, BinaryOperation bOp)
{
    return boost::algorithm::reduce(boost::begin(r), boost::end(r), init, bOp);
}

}} // namespace boost and algorithm

#endif // BOOST_ALGORITHM_REDUCE_HPP

/* reduce.hpp
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
*/