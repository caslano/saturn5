/*
   Copyright (c) Marshall Clow 2017.

   Distributed under the Boost Software License, Version 1.0. (See accompanying
   file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

/// \file  transform_reduce.hpp
/// \brief Combine the (transformed) elements of a sequence (or two) into a single value.
/// \author Marshall Clow

#ifndef BOOST_ALGORITHM_INCLUSIVE_SCAN_HPP
#define BOOST_ALGORITHM_INCLUSIVE_SCAN_HPP

#include <functional>     // for std::plus
#include <iterator>       // for std::iterator_traits

#include <boost/config.hpp>
#include <boost/range/begin.hpp>
#include <boost/range/end.hpp>
#include <boost/range/value_type.hpp>

namespace boost { namespace algorithm {

template<class InputIterator, class OutputIterator, class T, class BinaryOperation>
OutputIterator inclusive_scan(InputIterator first, InputIterator last,
                              OutputIterator result, BinaryOperation bOp, T init)
{
    for (; first != last; ++first, (void) ++result) {
        init = bOp(init, *first);
        *result = init;
        }
    return result;
}


template<class InputIterator, class OutputIterator, class BinaryOperation>
OutputIterator inclusive_scan(InputIterator first, InputIterator last,
                              OutputIterator result, BinaryOperation bOp)
{
    if (first != last) {
        typename std::iterator_traits<InputIterator>::value_type init = *first;
        *result++ = init;
        if (++first != last)
            return boost::algorithm::inclusive_scan(first, last, result, bOp, init);
        }

    return result;
}

template<class InputIterator, class OutputIterator>
OutputIterator inclusive_scan(InputIterator first, InputIterator last,
                   OutputIterator result)
{
    typedef typename std::iterator_traits<InputIterator>::value_type VT;
    return boost::algorithm::inclusive_scan(first, last, result, std::plus<VT>());
}

}} // namespace boost and algorithm

#endif // BOOST_ALGORITHM_INCLUSIVE_SCAN_HPP

/* inclusive_scan.hpp
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
*/