/*
   Copyright (c) Alexander Zaitsev <zamazan4ik@gmail.by>, 2017.

   Distributed under the Boost Software License, Version 1.0. (See accompanying
   file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

/// \file  is_partitioned_until.hpp
/// \brief Tell if a sequence is partitioned
/// \author Alexander Zaitsev

#ifndef BOOST_ALGORITHM_IS_PARTITIONED_UNTIL_HPP
#define BOOST_ALGORITHM_IS_PARTITIONED_UNTIL_HPP

#include <boost/config.hpp>
#include <boost/range/begin.hpp>
#include <boost/range/end.hpp>

namespace boost { namespace algorithm {

/// \fn is_partitioned_until ( InputIterator first, InputIterator last, UnaryPredicate p )
/// \brief Tests to see if a sequence is partitioned according to a predicate. 
///	   In other words, all the items in the sequence that satisfy the predicate are at the beginning of the sequence.
///
/// \param first    The start of the input sequence
/// \param last     One past the end of the input sequence
/// \param p        The predicate to test the values with
///
/// \note Returns the first iterator 'it' in the sequence [first, last) for which is_partitioned(first, it, p) is false.
///     Returns last if the entire sequence is partitioned.
///     Complexity: O(N).
template <typename InputIterator, typename UnaryPredicate>
InputIterator is_partitioned_until ( InputIterator first, InputIterator last, UnaryPredicate p )
{
//  Run through the part that satisfy the predicate
    for ( ; first != last; ++first )
        if ( !p (*first))
            break;
//  Now the part that does not satisfy the predicate
    for ( ; first != last; ++first )
        if ( p (*first))
            return first;
    return last;
}

/// \fn is_partitioned_until ( const Range &r, UnaryPredicate p )
/// \brief Tests to see if a sequence is partitioned according to a predicate. 
///	   In other words, all the items in the sequence that satisfy the predicate are at the beginning of the sequence.
///
/// \param r        The input range
/// \param p        The predicate to test the values with
///
/// \note Returns the first iterator 'it' in the sequence [first, last) for which is_partitioned(first, it, p) is false.
///     Returns last if the entire sequence is partitioned.
///     Complexity: O(N).
template <typename Range, typename UnaryPredicate>
typename boost::range_iterator<const Range>::type is_partitioned_until ( const Range &r, UnaryPredicate p )
{
    return boost::algorithm::is_partitioned_until (boost::begin(r), boost::end(r), p);
}

}}

#endif  // BOOST_ALGORITHM_IS_PARTITIONED_UNTIL_HPP

/* is_partitioned_until.hpp
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
*/