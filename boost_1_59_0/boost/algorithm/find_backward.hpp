/*
   Copyright (c) T. Zachary Laine 2018.

   Distributed under the Boost Software License, Version 1.0. (See accompanying
   file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
*/
#ifndef BOOST_ALGORITHM_FIND_BACKWARD_HPP
#define BOOST_ALGORITHM_FIND_BACKWARD_HPP

#include <utility>

#include <boost/config.hpp>
#include <boost/range/begin.hpp>
#include <boost/range/end.hpp>

namespace boost { namespace algorithm {

template<typename BidiIter, typename T>
BOOST_CXX14_CONSTEXPR
BidiIter find_backward(BidiIter first, BidiIter last, const T & x)
{
    BidiIter it = last;
    while (it != first) {
        if (*--it == x)
            return it;
    }
    return last;
}

template<typename Range, typename T>
BOOST_CXX14_CONSTEXPR
typename boost::range_iterator<Range>::type find_backward(Range & range, const T & x)
{
    return ::boost::algorithm::find_backward(boost::begin(range), boost::end(range), x);
}

template<typename BidiIter, typename T>
BOOST_CXX14_CONSTEXPR
BidiIter find_not_backward(BidiIter first, BidiIter last, const T & x)
{
    BidiIter it = last;
    while (it != first) {
        if (*--it != x)
            return it;
    }
    return last;
}

template<typename Range, typename T>
BOOST_CXX14_CONSTEXPR
typename boost::range_iterator<Range>::type find_not_backward(Range & range, const T & x)
{
    return ::boost::algorithm::find_not_backward(boost::begin(range), boost::end(range), x);
}

template<typename BidiIter, typename Pred>
BOOST_CXX14_CONSTEXPR
BidiIter find_if_backward(BidiIter first, BidiIter last, Pred p)
{
    BidiIter it = last;
    while (it != first) {
        if (p(*--it))
            return it;
    }
    return last;
}

template<typename Range, typename Pred>
BOOST_CXX14_CONSTEXPR
typename boost::range_iterator<Range>::type find_if_backward(Range & range, Pred p)
{
    return ::boost::algorithm::find_if_backward(boost::begin(range), boost::end(range), p);
}

template<typename BidiIter, typename Pred>
BOOST_CXX14_CONSTEXPR
BidiIter find_if_not_backward(BidiIter first, BidiIter last, Pred p)
{
    BidiIter it = last;
    while (it != first) {
        if (!p(*--it))
            return it;
    }
    return last;
}

template<typename Range, typename Pred>
BOOST_CXX14_CONSTEXPR
typename boost::range_iterator<Range>::type find_if_not_backward(Range & range, Pred p)
{
    return ::boost::algorithm::find_if_not_backward(boost::begin(range), boost::end(range), p);
}

}} // namespace boost and algorithm

#endif // BOOST_ALGORITHM_FIND_BACKWARD_HPP

/* find_backward.hpp
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
*/