#ifndef BOOST_METAPARSE_V1_SEQUENCE_APPLY_HPP
#define BOOST_METAPARSE_V1_SEQUENCE_APPLY_HPP

// Copyright Abel Sinkovics (abel@sinkovics.hu)  2015.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

#include <boost/metaparse/v1/letter.hpp>
#include <boost/metaparse/v1/sequence.hpp>

#include <boost/metaparse/limit_sequence_size.hpp>

#include <boost/mpl/at.hpp>

#include <boost/preprocessor/cat.hpp>
#include <boost/preprocessor/repetition/repeat_from_to.hpp>
#include <boost/preprocessor/repetition/enum.hpp>
#include <boost/preprocessor/repetition/enum_params.hpp>
#include <boost/preprocessor/tuple/eat.hpp>

namespace boost
{
  namespace metaparse
  {
    namespace v1
    {
#ifdef BOOST_METAPARSE_SEQUENCE_APPLY_ARG
#  error BOOST_METAPARSE_SEQUENCE_APPLY_ARG already defined
#endif
#define BOOST_METAPARSE_SEQUENCE_APPLY_ARG(z, n, container) \
  typename boost::mpl::at_c<container, n>::type

#ifdef BOOST_METAPARSE_SEQUENCE_APPLY
#  error BOOST_METAPARSE_SEQUENCE_APPLY already defined
#endif
#define BOOST_METAPARSE_SEQUENCE_APPLY(z, n, unused) \
  namespace impl \
  { \
  template < \
    template <BOOST_PP_ENUM(n, class BOOST_PP_TUPLE_EAT(3), ~)> class T \
  > \
  struct BOOST_PP_CAT(sequence_apply_transform, n) \
  { \
    typedef BOOST_PP_CAT(sequence_apply_transform, n) type; \
    \
    template <class V> \
    struct apply \
    { \
      typedef T<BOOST_PP_ENUM(n, BOOST_METAPARSE_SEQUENCE_APPLY_ARG, V)> type; \
    }; \
  }; \
  } \
  \
  template < \
    template <BOOST_PP_ENUM(n, class BOOST_PP_TUPLE_EAT(3), ~)> class T, \
    BOOST_PP_ENUM_PARAMS(n, class P) \
  > \
  struct BOOST_PP_CAT(sequence_apply, n) : \
    transform< \
      sequence<BOOST_PP_ENUM_PARAMS(n, P)>, \
      BOOST_PP_CAT(impl::sequence_apply_transform, n)<T> \
    > \
  {};

      BOOST_PP_REPEAT_FROM_TO(
        1,
        BOOST_METAPARSE_LIMIT_SEQUENCE_SIZE,
        BOOST_METAPARSE_SEQUENCE_APPLY,
        ~
      )

#undef BOOST_METAPARSE_SEQUENCE_APPLY
#undef BOOST_METAPARSE_SEQUENCE_APPLY_ARG
    }
  }
}

#endif


/* sequence_apply.hpp
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
*/