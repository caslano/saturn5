#ifndef BOOST_METAPARSE_V1_BUILD_PARSER_HPP
#define BOOST_METAPARSE_V1_BUILD_PARSER_HPP

// Copyright Abel Sinkovics (abel@sinkovics.hu)  2009 - 2010.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

#include <boost/metaparse/v1/fwd/build_parser.hpp>
#include <boost/metaparse/v1/start.hpp>
#include <boost/metaparse/v1/get_result.hpp>
#include <boost/metaparse/v1/get_position.hpp>
#include <boost/metaparse/v1/get_message.hpp>
#include <boost/metaparse/v1/get_line.hpp>
#include <boost/metaparse/v1/get_col.hpp>
#include <boost/metaparse/v1/is_error.hpp>

#include <boost/mpl/eval_if.hpp>

#include <boost/static_assert.hpp>

namespace boost
{
  namespace metaparse
  {
    namespace v1
    {
      template <int Line, int Col, class Msg>
      struct x__________________PARSING_FAILED__________________x
      {
        BOOST_STATIC_ASSERT(Line == Line + 1);
      };

      template <class P, class S>
      struct parsing_failed :
        x__________________PARSING_FAILED__________________x<
          get_line<
            get_position<typename P::template apply<S, start> >
          >::type::value,
          get_col<
            get_position<typename P::template apply<S, start> >
          >::type::value,
          typename get_message<typename P::template apply<S, start> >::type
        >
      {};

      template <class P>
      struct build_parser
      {
        typedef build_parser type;
        
        template <class S>
        struct apply :
          boost::mpl::eval_if<
            typename is_error<typename P::template apply<S, start> >::type,
            parsing_failed<P, S>,
            get_result<typename P::template apply<S, start> >
          >
        {};
      };
    }
  }
}

#endif


/* build_parser.hpp
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
*/