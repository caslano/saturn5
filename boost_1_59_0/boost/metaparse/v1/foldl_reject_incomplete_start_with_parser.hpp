#ifndef BOOST_METAPARSE_V1_FOLDL_REJECT_INCOMPLETE_START_WITH_PARSER_HPP
#define BOOST_METAPARSE_V1_FOLDL_REJECT_INCOMPLETE_START_WITH_PARSER_HPP

// Copyright Abel Sinkovics (abel@sinkovics.hu)  2015.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

#include <boost/metaparse/v1/foldl_reject_incomplete.hpp>
#include <boost/metaparse/v1/get_remaining.hpp>
#include <boost/metaparse/v1/get_position.hpp>
#include <boost/metaparse/v1/get_result.hpp>
#include <boost/metaparse/v1/is_error.hpp>

#include <boost/mpl/eval_if.hpp>

namespace boost
{
  namespace metaparse
  {
    namespace v1
    {
      template <class P, class StateP, class ForwardOp>
      class foldl_reject_incomplete_start_with_parser
      {
      private:
        template <class Res>
        struct apply_unchecked :
          foldl_reject_incomplete<
            P,
            typename get_result<Res>::type,
            ForwardOp
          >::template apply<
            typename get_remaining<Res>::type,
            typename get_position<Res>::type
          >
        {};
      public:
        typedef foldl_reject_incomplete_start_with_parser type;

        template <class S, class Pos>
        struct apply :
          boost::mpl::eval_if<
            typename is_error<typename StateP::template apply<S, Pos> >::type,
            typename StateP::template apply<S, Pos>,
            apply_unchecked<typename StateP::template apply<S, Pos> >
          >
        {};
      };
    }
  }
}

#endif


/* foldl_reject_incomplete_start_with_parser.hpp
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
*/