#ifndef BOOST_METAPARSE_V1_CPP98_SEQUENCE_HPP
#define BOOST_METAPARSE_V1_CPP98_SEQUENCE_HPP

// Copyright Abel Sinkovics (abel@sinkovics.hu)  2009 - 2010.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

#include <boost/metaparse/v1/cpp98/impl/sequence.hpp>

#include <boost/preprocessor/comma_if.hpp>
#include <boost/preprocessor/repetition/repeat_from_to.hpp>
#include <boost/preprocessor/repetition/enum.hpp>
#include <boost/preprocessor/repetition/enum_params.hpp>
#include <boost/preprocessor/repetition/enum_params_with_a_default.hpp>
#include <boost/preprocessor/arithmetic/sub.hpp>
#include <boost/preprocessor/cat.hpp>
#include <boost/preprocessor/tuple/eat.hpp>

namespace boost
{
  namespace metaparse
  {
    namespace v1
    {
      template <
        BOOST_PP_ENUM_PARAMS_WITH_A_DEFAULT(
          BOOST_METAPARSE_LIMIT_SEQUENCE_SIZE,
          class P,
          boost::mpl::na
        )
      >
      struct sequence;

      #ifdef BOOST_METAPARSE_SEQUENCE_N
      #  error BOOST_METAPARSE_SEQUENCE_N already defined
      #endif
      #define BOOST_METAPARSE_SEQUENCE_N(z, n, unused) \
        template <BOOST_PP_ENUM_PARAMS(n, class P)> \
        struct sequence< \
          BOOST_PP_ENUM_PARAMS(n, P) \
          BOOST_PP_COMMA_IF(n) \
          BOOST_PP_ENUM( \
            BOOST_PP_SUB(BOOST_METAPARSE_LIMIT_SEQUENCE_SIZE, n), \
            boost::mpl::na BOOST_PP_TUPLE_EAT(3), \
            ~ \
          ) \
        > : impl::BOOST_PP_CAT(sequence, n)<BOOST_PP_ENUM_PARAMS(n, P)> \
        {};
      
      BOOST_PP_REPEAT_FROM_TO(
        1,
        BOOST_METAPARSE_LIMIT_SEQUENCE_SIZE,
        BOOST_METAPARSE_SEQUENCE_N,
        ~
      )
      
      #undef BOOST_METAPARSE_SEQUENCE_N
    }
  }
}

#endif


/* sequence.hpp
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
*/