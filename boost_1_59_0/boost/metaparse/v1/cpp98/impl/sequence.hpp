#ifndef BOOST_METAPARSE_V1_CPP98_IMPL_SEQUENCE_HPP
#define BOOST_METAPARSE_V1_CPP98_IMPL_SEQUENCE_HPP

// Copyright Abel Sinkovics (abel@sinkovics.hu)  2013.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

#include <boost/metaparse/v1/cpp98/impl/sequence_impl.hpp>
#include <boost/metaparse/limit_sequence_size.hpp>

#include <boost/mpl/vector.hpp>

#include <boost/preprocessor/repetition/repeat_from_to.hpp>
#include <boost/preprocessor/repetition/enum_params.hpp>
#include <boost/preprocessor/cat.hpp>

namespace boost
{
  namespace metaparse
  {
    namespace v1
    {
      namespace impl
      {
        #ifdef BOOST_METAPARSE_SEQUENCE_CASE
        #  error BOOST_METAPARSE_SEQUENCE_CASE already defined
        #endif
        #define BOOST_METAPARSE_SEQUENCE_CASE(z, n, unused) \
          template <BOOST_PP_ENUM_PARAMS(n, class P)> \
          struct BOOST_PP_CAT(sequence, n) \
          { \
            typedef BOOST_PP_CAT(sequence, n) type; \
            \
            template <class S, class Pos> \
            struct apply : \
              sequence_impl< \
                boost::mpl::vector<BOOST_PP_ENUM_PARAMS(n, P)>, \
                S, \
                Pos \
              > \
            {}; \
          };
        
        BOOST_PP_REPEAT_FROM_TO(
          1,
          BOOST_METAPARSE_LIMIT_SEQUENCE_SIZE,
          BOOST_METAPARSE_SEQUENCE_CASE,
          ~
        )
        
        #undef BOOST_METAPARSE_SEQUENCE_CASE
      } 
    }
  }
}

#endif


/* sequence.hpp
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
*/