#ifndef BOOST_METAPARSE_V1_CPP98_NTH_OF_C_HPP
#define BOOST_METAPARSE_V1_CPP98_NTH_OF_C_HPP

// Copyright Abel Sinkovics (abel@sinkovics.hu)  2013.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

#include <boost/metaparse/v1/cpp98/impl/nth_of_c.hpp>
#include <boost/metaparse/limit_sequence_size.hpp>

#include <boost/preprocessor/repetition/repeat.hpp>
#include <boost/preprocessor/repetition/enum.hpp>
#include <boost/preprocessor/punctuation/comma_if.hpp>
#include <boost/preprocessor/repetition/enum_params.hpp>
#include <boost/preprocessor/repetition/enum_params_with_a_default.hpp>
#include <boost/preprocessor/arithmetic/sub.hpp>
#include <boost/preprocessor/cat.hpp>
#include <boost/preprocessor/tuple/eat.hpp>

namespace boost
{
  namespace metaparse
  {
    namespace v1
    {
      template <
        int N,
        BOOST_PP_ENUM_PARAMS_WITH_A_DEFAULT(
          BOOST_METAPARSE_LIMIT_SEQUENCE_SIZE,
          class P,
          boost::mpl::na
        )
      >
      struct nth_of_c;

      #ifdef BOOST_METAPARSE_NTH_OF_N
      #  error BOOST_METAPARSE_NTH_OF_N already defined
      #endif
      #define BOOST_METAPARSE_NTH_OF_N(z, n, unused) \
        template <int K BOOST_PP_COMMA_IF(n) BOOST_PP_ENUM_PARAMS(n, class P)> \
        struct nth_of_c< \
          K, \
          BOOST_PP_ENUM_PARAMS(n, P) \
          BOOST_PP_COMMA_IF(n) \
          BOOST_PP_ENUM( \
            BOOST_PP_SUB(BOOST_METAPARSE_LIMIT_SEQUENCE_SIZE, n), \
            boost::mpl::na BOOST_PP_TUPLE_EAT(3), \
            ~ \
          ) \
        > : \
          impl::BOOST_PP_CAT(nth_of_c, n)< \
            K BOOST_PP_COMMA_IF(n) \
            BOOST_PP_ENUM_PARAMS(n, P) \
          > \
        {};
      
      BOOST_PP_REPEAT(
        BOOST_METAPARSE_LIMIT_SEQUENCE_SIZE,
        BOOST_METAPARSE_NTH_OF_N,
        ~
      )
      
      #undef BOOST_METAPARSE_NTH_OF_N
    }
  }
}

#endif


/* nth_of_c.hpp
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
*/