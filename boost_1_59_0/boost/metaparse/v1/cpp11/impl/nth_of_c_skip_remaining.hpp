#ifndef BOOST_METAPARSE_V1_CPP11_IMPL_NTH_OF_C_SKIP_REMANING_HPP
#define BOOST_METAPARSE_V1_CPP11_IMPL_NTH_OF_C_SKIP_REMANING_HPP

// Copyright Abel Sinkovics (abel@sinkovics.hu)  2017.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

#include <boost/metaparse/v1/is_error.hpp>
#include <boost/metaparse/v1/get_remaining.hpp>
#include <boost/metaparse/v1/get_position.hpp>
#include <boost/metaparse/v1/return_.hpp>

#include <type_traits>

namespace boost
{
  namespace metaparse
  {
    namespace v1
    {
      namespace impl
      {
        template <class FinalResult, class S, class Pos, class... Ps>
        struct nth_of_c_skip_remaining;

        template <class FinalResult, class S, class Pos>
        struct nth_of_c_skip_remaining<FinalResult, S, Pos> :
          return_<FinalResult>::template apply<S, Pos>
        {};

        template <class FinalResult, class S, class Pos, class P, class... Ps>
        struct nth_of_c_skip_remaining<FinalResult, S, Pos, P, Ps...>
        {
        private:
          template <class NextResult>
          struct apply_unchecked :
            nth_of_c_skip_remaining<
              FinalResult,
              typename get_remaining<NextResult>::type,
              typename get_position<NextResult>::type,
              Ps...
            >
          {};
        public:
          typedef
            typename std::conditional<
              is_error<typename P::template apply<S, Pos>>::type::value,
              typename P::template apply<S, Pos>,
              apply_unchecked<typename P::template apply<S, Pos>>
            >::type::type
            type;
        };
      }
    }
  }
}

#endif


/* nth_of_c_skip_remaining.hpp
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
*/