#ifndef BOOST_METAPARSE_V1_CPP11_SEQUENCE_HPP
#define BOOST_METAPARSE_V1_CPP11_SEQUENCE_HPP

// Copyright Abel Sinkovics (abel@sinkovics.hu)  2018.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

#include <boost/metaparse/v1/cpp11/impl/push_front_result.hpp>

#include <boost/metaparse/v1/get_remaining.hpp>
#include <boost/metaparse/v1/get_position.hpp>
#include <boost/metaparse/v1/is_error.hpp>
#include <boost/metaparse/v1/return_.hpp>
#include <boost/metaparse/v1/transform.hpp>

#include <boost/mpl/eval_if.hpp>
#include <boost/mpl/vector.hpp>

namespace boost
{
  namespace metaparse
  {
    namespace v1
    {
      template <class... Ps>
      struct sequence;

      template <>
      struct sequence<> : return_<boost::mpl::vector<>> {};

      template <class P, class... Ps>
      struct sequence<P, Ps...>
      {
      private:
        template <class Res>
        struct apply_unchecked :
          transform<
            sequence<Ps...>,
            impl::push_front_result<Res>
          >::template apply<
            typename get_remaining<Res>::type,
            typename get_position<Res>::type
          >
        {};
      public:
        typedef sequence type;

        template <class S, class Pos>
        struct apply :
          boost::mpl::eval_if<
            typename is_error<typename P::template apply<S, Pos>>::type,
            typename P::template apply<S, Pos>,
            apply_unchecked<typename P::template apply<S, Pos>>
          >
        {};
      };
    }
  }
}

#endif

/* sequence.hpp
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
*/