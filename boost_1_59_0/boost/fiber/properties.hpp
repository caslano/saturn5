//          Copyright Nat Goodspeed 2014.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

// Define fiber_properties, a base class from which a library consumer can
// derive a subclass with specific properties important to a user-coded
// scheduler.

#ifndef BOOST_FIBERS_PROPERTIES_HPP
#define BOOST_FIBERS_PROPERTIES_HPP

#include <boost/assert.hpp>
#include <boost/fiber/detail/config.hpp>

#ifdef BOOST_HAS_ABI_HEADERS
#  include BOOST_ABI_PREFIX
#endif

# if defined(BOOST_MSVC)
# pragma warning(push)
# pragma warning(disable:4275)
# endif

namespace boost {
namespace fibers {

class context;

namespace algo {

class algorithm;

}

class BOOST_FIBERS_DECL fiber_properties {
protected:
    // initialized by constructor
    context         *   ctx_;
    // set every time this fiber becomes READY
    algo::algorithm *   algo_{ nullptr };

    // Inform the relevant algorithm instance that something important
    // has changed, so it can (presumably) adjust its data structures
    // accordingly.
    void notify() noexcept;

public:
    // Any specific property setter method, after updating the relevant
    // instance variable, can/should call notify().

    // fiber_properties, and by implication every subclass, must accept a back
    // pointer to its context.

    // For fiber_properties passed to fiber constructors, nullptr must be
    // used here.
    explicit fiber_properties( context * ctx) noexcept :
        ctx_{ ctx } {
    }

    // We need a virtual destructor (hence a vtable) because fiber_properties
    // is stored polymorphically (as fiber_properties*) in context, and
    // destroyed via that pointer.
    virtual ~fiber_properties() = default;

    // not really intended for public use, but algorithm_with_properties
    // must be able to call this
    void set_algorithm( algo::algorithm * algo) noexcept {
        algo_ = algo;
    }

    // not really intended for public use, but required to set properties
    // on fiber/context construction.
    void set_context( context* ctx ) noexcept {
        BOOST_ASSERT( ctx_ == nullptr );
        BOOST_ASSERT( ctx != nullptr );
        ctx_ = ctx;
    }
};

}} // namespace boost::fibers

# if defined(BOOST_MSVC)
# pragma warning(pop)
# endif

#ifdef BOOST_HAS_ABI_HEADERS
#  include BOOST_ABI_SUFFIX
#endif

#endif // BOOST_FIBERS_PROPERTIES_HPP

/* properties.hpp
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
*/