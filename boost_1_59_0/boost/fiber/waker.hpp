#ifndef BOOST_FIBERS_WAKER_H
#define BOOST_FIBERS_WAKER_H

#include <cstddef>

#include <boost/config.hpp>
#include <boost/fiber/detail/config.hpp>
#include <boost/fiber/detail/spinlock.hpp>
#include <boost/intrusive/slist.hpp>

namespace boost {
namespace fibers {

class context;

namespace detail {

typedef intrusive::slist_member_hook<> waker_queue_hook;

} // detail


class BOOST_FIBERS_DECL waker {
private:
    context *ctx_{};
    size_t epoch_{};

public:
    friend class context;

    waker() = default;

    waker(context * ctx, const size_t epoch)
        : ctx_{ ctx }
        , epoch_{ epoch }
    {}

    bool wake() const noexcept;
};


class BOOST_FIBERS_DECL waker_with_hook : public waker {
public:
    explicit waker_with_hook(waker && w)
        : waker{ std::move(w) }
    {}

    bool is_linked() const noexcept {
        return waker_queue_hook_.is_linked();
    }

    friend bool
    operator==( waker const& lhs, waker const& rhs) noexcept {
        return & lhs == & rhs;
    }

public:
    detail::waker_queue_hook waker_queue_hook_{};
};

namespace detail {
    typedef intrusive::slist<
            waker_with_hook,
            intrusive::member_hook<
                waker_with_hook, detail::waker_queue_hook, & waker_with_hook::waker_queue_hook_ >,
            intrusive::constant_time_size< false >,
            intrusive::cache_last< true >
        >                                               waker_slist_t;
}

class BOOST_FIBERS_DECL wait_queue {
private:
    detail::waker_slist_t   slist_{};

public:
    void suspend_and_wait( detail::spinlock_lock &, context *);
    bool suspend_and_wait_until( detail::spinlock_lock &,
                                 context *,
                                 std::chrono::steady_clock::time_point const&);
    void notify_one();
    void notify_all();

    bool empty() const;
};

}}

#endif // BOOST_FIBERS_WAKER_H

/* waker.hpp
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
*/