
//          Copyright Oliver Kowalke 2013.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_FIBERS_TYPE_H
#define BOOST_FIBERS_TYPE_H

#include <atomic>
#include <chrono>
#include <exception>
#include <functional>
#include <map>
#include <memory>
#include <type_traits>

#include <boost/assert.hpp>
#include <boost/config.hpp>
#include <boost/context/detail/apply.hpp>
#include <boost/context/stack_context.hpp>
#include <boost/intrusive/list.hpp>
#include <boost/intrusive/parent_from_member.hpp>
#include <boost/intrusive_ptr.hpp>
#include <boost/intrusive/set.hpp>

#include <boost/fiber/detail/config.hpp>
#include <boost/fiber/detail/data.hpp>
#include <boost/fiber/detail/decay_copy.hpp>
#include <boost/fiber/detail/fss.hpp>
#include <boost/fiber/detail/spinlock.hpp>
#include <boost/fiber/exceptions.hpp>
#include <boost/fiber/fixedsize_stack.hpp>
#include <boost/fiber/properties.hpp>
#include <boost/fiber/segmented_stack.hpp>

#ifdef BOOST_HAS_ABI_HEADERS
#  include BOOST_ABI_PREFIX
#endif

namespace boost {
namespace fibers {

enum class type {
    none               = 0,
    main_context       = 1 << 1,
    dispatcher_context = 1 << 2,
    worker_context     = 1 << 3,
    pinned_context     = main_context | dispatcher_context
};

inline
constexpr type
operator&( type l, type r) {
    return static_cast< type >(
            static_cast< unsigned int >( l) & static_cast< unsigned int >( r) );
}

inline
constexpr type
operator|( type l, type r) {
    return static_cast< type >(
            static_cast< unsigned int >( l) | static_cast< unsigned int >( r) );
}

inline
constexpr type
operator^( type l, type r) {
    return static_cast< type >(
            static_cast< unsigned int >( l) ^ static_cast< unsigned int >( r) );
}

inline
constexpr type
operator~( type l) {
    return static_cast< type >( ~static_cast< unsigned int >( l) );
}

inline
type &
operator&=( type & l, type r) {
    l = l & r;
    return l;
}

inline
type &
operator|=( type & l, type r) {
    l = l | r;
    return l;
}

inline
type &
operator^=( type & l, type r) {
    l = l ^ r;
    return l;
}

}}

#ifdef BOOST_HAS_ABI_HEADERS
#  include BOOST_ABI_SUFFIX
#endif

#endif // BOOST_FIBERS_TYPE_H

/* type.hpp
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
*/