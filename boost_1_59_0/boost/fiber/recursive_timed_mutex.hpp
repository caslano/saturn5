
//          Copyright Oliver Kowalke 2013.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)
//
//  based on boost::interprocess::sync::interprocess_spinlock

#ifndef BOOST_FIBERS_RECURSIVE_TIMED_MUTEX_H
#define BOOST_FIBERS_RECURSIVE_TIMED_MUTEX_H

#include <chrono>
#include <cstddef>

#include <boost/config.hpp>

#include <boost/assert.hpp>

#include <boost/fiber/context.hpp>
#include <boost/fiber/detail/config.hpp>
#include <boost/fiber/detail/convert.hpp>
#include <boost/fiber/detail/spinlock.hpp>
#include <boost/fiber/waker.hpp>

#ifdef BOOST_HAS_ABI_HEADERS
#  include BOOST_ABI_PREFIX
#endif

#ifdef _MSC_VER
# pragma warning(push)
# pragma warning(disable:4251)
#endif

namespace boost {
namespace fibers {

class condition_variable;

class BOOST_FIBERS_DECL recursive_timed_mutex {
private:
    friend class condition_variable;

    detail::spinlock            wait_queue_splk_{};
    wait_queue                  wait_queue_{};
    context                 *   owner_{ nullptr };
    std::size_t                 count_{ 0 };

    bool try_lock_until_( std::chrono::steady_clock::time_point const& timeout_time) noexcept;

public:
    recursive_timed_mutex() = default;

    ~recursive_timed_mutex() {
        BOOST_ASSERT( nullptr == owner_);
        BOOST_ASSERT( 0 == count_);
        BOOST_ASSERT( wait_queue_.empty() );
    }

    recursive_timed_mutex( recursive_timed_mutex const&) = delete;
    recursive_timed_mutex & operator=( recursive_timed_mutex const&) = delete;

    void lock();

    bool try_lock() noexcept;

    template< typename Clock, typename Duration >
    bool try_lock_until( std::chrono::time_point< Clock, Duration > const& timeout_time_) {
        std::chrono::steady_clock::time_point timeout_time = detail::convert( timeout_time_);
        return try_lock_until_( timeout_time);
    }

    template< typename Rep, typename Period >
    bool try_lock_for( std::chrono::duration< Rep, Period > const& timeout_duration) {
        return try_lock_until_( std::chrono::steady_clock::now() + timeout_duration);
    }

    void unlock();
};

}}

#ifdef _MSC_VER
# pragma warning(pop)
#endif

#ifdef BOOST_HAS_ABI_HEADERS
#  include BOOST_ABI_SUFFIX
#endif

#endif // BOOST_FIBERS_RECURSIVE_TIMED_MUTEX_H

/* recursive_timed_mutex.hpp
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
*/