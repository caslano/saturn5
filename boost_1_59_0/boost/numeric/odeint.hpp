/*
 [auto_generated]
 boost/numeric/odeint.hpp

 [begin_description]
 Forward include for odeint. Includes nearly everything.
 [end_description]

 Copyright 2009-2013 Karsten Ahnert
 Copyright 2010-2013 Mario Mulansky

 Distributed under the Boost Software License, Version 1.0.
 (See accompanying file LICENSE_1_0.txt or
 copy at http://www.boost.org/LICENSE_1_0.txt)
 */


#ifndef BOOST_NUMERIC_ODEINT_HPP_INCLUDED
#define BOOST_NUMERIC_ODEINT_HPP_INCLUDED

#include <boost/numeric/odeint/version.hpp>
#include <boost/numeric/odeint/config.hpp>

// start with ublas wrapper because we need its specializations before including state_wrapper.hpp
#include <boost/numeric/odeint/util/ublas_wrapper.hpp>

#include <boost/numeric/odeint/stepper/euler.hpp>
#include <boost/numeric/odeint/stepper/runge_kutta4_classic.hpp>
#include <boost/numeric/odeint/stepper/runge_kutta4.hpp>
#include <boost/numeric/odeint/stepper/runge_kutta_cash_karp54.hpp>
#include <boost/numeric/odeint/stepper/runge_kutta_cash_karp54_classic.hpp>
#include <boost/numeric/odeint/stepper/runge_kutta_dopri5.hpp>
#include <boost/numeric/odeint/stepper/runge_kutta_fehlberg78.hpp>

#include <boost/numeric/odeint/stepper/controlled_runge_kutta.hpp>

#include <boost/numeric/odeint/stepper/dense_output_runge_kutta.hpp>

#include <boost/numeric/odeint/stepper/bulirsch_stoer.hpp>

#ifndef __CUDACC__
/* Bulirsch Stoer with Dense Output does not compile with nvcc
 * because of the binomial library used there which relies on unsupported SSE functions
 */
#include <boost/numeric/odeint/stepper/bulirsch_stoer_dense_out.hpp>
#endif

#include <boost/numeric/odeint/stepper/symplectic_euler.hpp>
#include <boost/numeric/odeint/stepper/symplectic_rkn_sb3a_mclachlan.hpp>
#include <boost/numeric/odeint/stepper/velocity_verlet.hpp>

#include <boost/numeric/odeint/stepper/adams_bashforth_moulton.hpp>

#include <boost/numeric/odeint/stepper/adaptive_adams_bashforth_moulton.hpp>
#include <boost/numeric/odeint/stepper/controlled_adams_bashforth_moulton.hpp>

#include <boost/numeric/odeint/stepper/implicit_euler.hpp>
#include <boost/numeric/odeint/stepper/rosenbrock4.hpp>
#include <boost/numeric/odeint/stepper/rosenbrock4_controller.hpp>
#include <boost/numeric/odeint/stepper/rosenbrock4_dense_output.hpp>

#include <boost/numeric/odeint/algebra/algebra_dispatcher.hpp>
#include <boost/numeric/odeint/algebra/multi_array_algebra.hpp>
#include <boost/numeric/odeint/util/multi_array_adaption.hpp>
/*
 * Including this algebra slows down the compilation time
 */
// #include <boost/numeric/odeint/algebra/fusion_algebra.hpp>

#include <boost/numeric/odeint/integrate/integrate.hpp>
#include <boost/numeric/odeint/integrate/integrate_adaptive.hpp>
#include <boost/numeric/odeint/integrate/integrate_const.hpp>
#include <boost/numeric/odeint/integrate/integrate_n_steps.hpp>
#include <boost/numeric/odeint/integrate/integrate_times.hpp>

#include <boost/numeric/odeint/integrate/observer_collection.hpp>
#include <boost/numeric/odeint/integrate/max_step_checker.hpp>

#include <boost/numeric/odeint/stepper/generation.hpp>

#include <boost/numeric/odeint/iterator/adaptive_iterator.hpp>
#include <boost/numeric/odeint/iterator/adaptive_time_iterator.hpp>
#include <boost/numeric/odeint/iterator/const_step_iterator.hpp>
#include <boost/numeric/odeint/iterator/const_step_time_iterator.hpp>


#endif // BOOST_NUMERIC_ODEINT_HPP_INCLUDED

/* odeint.hpp
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
*/