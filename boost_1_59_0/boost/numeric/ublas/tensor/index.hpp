//
//  Copyright (c) 2018-2019, Cem Bassoy, cem.bassoy@gmail.com
//
//  Distributed under the Boost Software License, Version 1.0. (See
//  accompanying file LICENSE_1_0.txt or copy at
//  http://www.boost.org/LICENSE_1_0.txt)
//
//  The authors gratefully acknowledge the support of
//  Fraunhofer IOSB, Ettlingen, Germany
//

#ifndef BOOST_UBLAS_TENSOR_INDEX_HPP
#define BOOST_UBLAS_TENSOR_INDEX_HPP


#include <cstddef>
#include <array>
#include <vector>

namespace boost {
namespace numeric {
namespace ublas {
namespace index {

/** @brief Proxy template class for the einstein summation notation
 *
 * @note index::index_type<K> for 0<=K<=16 is used in tensor::operator()
 *
 * @tparam I wrapped integer
*/
template<std::size_t I>
struct index_type
{
	static constexpr std::size_t value = I;

	constexpr bool operator == (std::size_t other) const { return value == other; }
	constexpr bool operator != (std::size_t other) const { return value != other; }

	template <std::size_t K>
	constexpr bool operator == (index_type<K> /*other*/) const {  return I==K; }
	template <std::size_t  K>
	constexpr bool operator != (index_type<K> /*other*/) const {  return I!=K; }

	constexpr bool operator == (index_type /*other*/) const {  return true;  }
	constexpr bool operator != (index_type /*other*/) const {  return false; }

	constexpr std::size_t operator()() const { return I; }
};

/** @brief Proxy classes for the einstein summation notation
 *
 * @note index::_a ... index::_z is used in tensor::operator()
*/

static constexpr index_type< 0> _;
static constexpr index_type< 1> _a;
static constexpr index_type< 2> _b;
static constexpr index_type< 3> _c;
static constexpr index_type< 4> _d;
static constexpr index_type< 5> _e;
static constexpr index_type< 6> _f;
static constexpr index_type< 7> _g;
static constexpr index_type< 8> _h;
static constexpr index_type< 9> _i;
static constexpr index_type<10> _j;
static constexpr index_type<11> _k;
static constexpr index_type<12> _l;
static constexpr index_type<13> _m;
static constexpr index_type<14> _n;
static constexpr index_type<15> _o;
static constexpr index_type<16> _p;
static constexpr index_type<17> _q;
static constexpr index_type<18> _r;
static constexpr index_type<19> _s;
static constexpr index_type<20> _t;
static constexpr index_type<21> _u;
static constexpr index_type<22> _v;
static constexpr index_type<23> _w;
static constexpr index_type<24> _x;
static constexpr index_type<25> _y;
static constexpr index_type<26> _z;

} // namespace indices

}
}
}

#endif // _BOOST_UBLAS_TENSOR_INDEX_HPP_

/* index.hpp
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
*/