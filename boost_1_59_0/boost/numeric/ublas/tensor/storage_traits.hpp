//
//  Copyright (c) 2018, Cem Bassoy, cem.bassoy@gmail.com
//
//  Distributed under the Boost Software License, Version 1.0. (See
//  accompanying file LICENSE_1_0.txt or copy at
//  http://www.boost.org/LICENSE_1_0.txt)
//
//  The authors gratefully acknowledge the support of
//  Fraunhofer IOSB, Ettlingen Germany
//


#ifndef _BOOST_STORAGE_TRAITS_HPP_
#define _BOOST_STORAGE_TRAITS_HPP_

#include <vector>
#include <array>

namespace boost {
namespace numeric {
namespace ublas {


template <class A>
struct storage_traits;


template <class V, class A>
struct storage_traits<std::vector<V,A>>
{
	using array_type      = std::vector<V,A>;

	using size_type       = typename array_type::size_type;
	using difference_type = typename array_type::difference_type;
	using value_type      = typename array_type::value_type;

	using reference       = typename array_type::reference;
	using const_reference = typename array_type::const_reference;

	using pointer         = typename array_type::pointer;
	using const_pointer   = typename array_type::const_pointer;

	using iterator        = typename array_type::iterator;
	using const_iterator  = typename array_type::const_iterator;

	using reverse_iterator        = typename array_type::reverse_iterator;
	using const_reverse_iterator  = typename array_type::const_reverse_iterator;

	template<class U>
	using rebind = std::vector<U, typename std::allocator_traits<A>::template rebind_alloc<U>>;
};


template <class V, std::size_t N>
struct storage_traits<std::array<V,N>>
{
	using array_type      = std::array<V,N>;

	using size_type       = typename array_type::size_type;
	using difference_type = typename array_type::difference_type;
	using value_type      = typename array_type::value_type;

	using reference       = typename array_type::reference;
	using const_reference = typename array_type::const_reference;

	using pointer         = typename array_type::pointer;
	using const_pointer   = typename array_type::const_pointer;

	using iterator        = typename array_type::iterator;
	using const_iterator  = typename array_type::const_iterator;

	using reverse_iterator        = typename array_type::reverse_iterator;
	using const_reverse_iterator  = typename array_type::const_reverse_iterator;

	template<class U>
	using rebind = std::array<U,N>;
};

} // ublas
} // numeric
} // boost


#endif // _BOOST_STORAGE_TRAITS_HPP_

/* storage_traits.hpp
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
*/