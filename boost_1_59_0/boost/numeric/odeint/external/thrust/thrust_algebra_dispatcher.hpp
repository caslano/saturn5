/*
  [auto_generated]
  boost/numeric/odeint/external/thrust/thrust_algebra_dispatcher.hpp

  [begin_description]
  algebra_dispatcher specialization for thrust
  [end_description]

  Copyright 2013 Karsten Ahnert
  Copyright 2013 Mario Mulansky

  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or
  copy at http://www.boost.org/LICENSE_1_0.txt)
*/


#ifndef BOOST_NUMERIC_ODEINT_EXTERNAL_THRUST_THRUST_ALGEBRA_DISPATCHER_HPP_DEFINED
#define BOOST_NUMERIC_ODEINT_EXTERNAL_THRUST_THRUST_ALGEBRA_DISPATCHER_HPP_DEFINED

#include <thrust/host_vector.h>
#include <thrust/device_vector.h>

#include <boost/numeric/odeint/external/thrust/thrust_algebra.hpp>
#include <boost/numeric/odeint/algebra/algebra_dispatcher.hpp>

// specializations for the standard thrust containers

namespace boost {
namespace numeric {
namespace odeint {

// specialization for thrust host_vector
template< class T , class A >
struct algebra_dispatcher< thrust::host_vector< T , A > >
{
    typedef thrust_algebra algebra_type;
};

// specialization for thrust device_vector
template< class T , class A >
struct algebra_dispatcher< thrust::device_vector< T , A > >
{
    typedef thrust_algebra algebra_type;
};

} // namespace odeint
} // namespace numeric
} // namespace boost


// add support for thrust backend vectors, if available

#include <thrust/version.h>

#if THRUST_VERSION >= 100600

// specialization for thrust cpp vector
#include <thrust/system/cpp/vector.h>
namespace boost { namespace numeric { namespace odeint {
    template< class T , class A >
    struct algebra_dispatcher< thrust::cpp::vector< T , A > >
    {
        typedef thrust_algebra algebra_type;
    };
} } }

// specialization for thrust omp vector
#ifdef _OPENMP
#include <thrust/system/omp/vector.h>
namespace boost { namespace numeric { namespace odeint {
    template< class T , class A >
    struct algebra_dispatcher< thrust::omp::vector< T , A > >
    {
        typedef thrust_algebra algebra_type;
    };
} } }
#endif // _OPENMP

// specialization for thrust tbb vector
#ifdef TBB_VERSION_MAJOR
#include <thrust/system/tbb/vector.h>
namespace boost { namespace numeric { namespace odeint {
    template< class T , class A >
    struct algebra_dispatcher< thrust::tbb::vector< T , A > >
    {
        typedef thrust_algebra algebra_type;
    };
} } }
#endif // TBB_VERSION_MAJOR

// specialization for thrust cuda vector
#ifdef __CUDACC__
#include <thrust/system/cuda/vector.h>
namespace boost { namespace numeric { namespace odeint {
    template< class T , class A >
    struct algebra_dispatcher< thrust::cuda::vector< T , A > >
    {
        typedef thrust_algebra algebra_type;
    };
} } }
#endif // __CUDACC__

#endif // THRUST_VERSION >= 100600

#endif // BOOST_NUMERIC_ODEINT_EXTERNAL_THRUST_THRUST_ALGEBRA_DISPATCHER_HPP_DEFINED


/* thrust_algebra_dispatcher.hpp
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
*/