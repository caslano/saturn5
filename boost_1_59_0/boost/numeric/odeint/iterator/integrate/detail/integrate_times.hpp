/*
 [auto_generated]
 boost/numeric/odeint/integrate/detail/integrate_times.hpp

 [begin_description]
 Default integrate times implementation.
 [end_description]

 Copyright 2009-2012 Karsten Ahnert
 Copyright 2009-2012 Mario Mulansky

 Distributed under the Boost Software License, Version 1.0.
 (See accompanying file LICENSE_1_0.txt or
 copy at http://www.boost.org/LICENSE_1_0.txt)
 */


#ifndef BOOST_NUMERIC_ODEINT_INTEGRATE_DETAIL_INTEGRATE_TIMES_HPP_INCLUDED
#define BOOST_NUMERIC_ODEINT_INTEGRATE_DETAIL_INTEGRATE_TIMES_HPP_INCLUDED

#include <stdexcept>

#include <boost/config.hpp>
#include <boost/range/algorithm/for_each.hpp>

#include <boost/numeric/odeint/util/unwrap_reference.hpp>
#include <boost/numeric/odeint/stepper/controlled_step_result.hpp>
#include <boost/numeric/odeint/util/detail/less_with_sign.hpp>
#include <boost/numeric/odeint/iterator/times_time_iterator.hpp>
#include <boost/numeric/odeint/iterator/integrate/detail/functors.hpp>

namespace boost {
namespace numeric {
namespace odeint {
namespace detail {



/*
 * integrate_times for all steppers
 */
template< class Stepper , class System , class State , class TimeIterator , class Time , class Observer , class StepperTag >
size_t integrate_times(
        Stepper stepper , System system , State &start_state ,
        TimeIterator start_time , TimeIterator end_time , Time dt ,
        Observer observer , StepperTag
)
{
    size_t obs_calls = 0;

    boost::for_each( make_times_time_range( stepper , system , start_state ,
                                            start_time , end_time , dt ) ,
                         // should we use traits<Stepper>::state_type here instead of State? NO!
                     obs_caller< Observer >( obs_calls , observer ) );

        // step integration steps gives step+1 observer calls
    return obs_calls-1;
}


} // namespace detail
} // namespace odeint
} // namespace numeric
} // namespace boost


#endif // BOOST_NUMERIC_ODEINT_INTEGRATE_DETAIL_INTEGRATE_ADAPTIVE_HPP_INCLUDED

/* integrate_times.hpp
4sr8+cfn8qd3POYOmOP9yeC6oHOPJDEyS83aVXQsL5HJ99gHRYUO3owuhLE/yRIBO5pAVI8nT2MAIaB/aA1gH7sLIegF2dStxRfgRcfbsxRqzf7vs129RHXHbHUopYGm48mR3ZFl7PUg3tYP/+IjRUPClTT6vgunu6Zj8LUvVYndwhrz3sZS06GQM0SVLe68JIinZTFjS2x30kMt/ZrnoI1Kr+/aLPY8vNKQpwo2+6xM3IqH8WSbMhVKi1b8ppjeB7TRmKGXP86P7J2WztuCCg0f+KUCC9Ui0KlfZFoEYR42d5ByXCIh0ILCnW4yKoxeeQ6rg//Ibc8LQVaf8ez544Z4VJzeIs8xGpWWRYJdbIXCMxLWkUG+At7sn/H+mAjiRBs0jAO92ysFlvGCMtG3J0js/snSCncEE7TeIIrGd3y2eCaZQm8cr2UCTUHY+kaNxn/EnHAxdjkV+syMYaw68VGeW/fIebc6IDqYQQlrah2nOXwBWk/1yBWZb8O9EX9lqSJw5SdbFtcq6CVzrBzyXWa1m70NbVmfOf8leMRQpj/sUnOumbWyDz7RFj7JnZ8N0RSxrsPznfC8px5sZh8bb+koYiM++kFH0WIE4Bhb8wyqBa+a6t4Dl8uMV00YJYjyEn3rv0IslM9jgu6KyJutwb7VrXTsFqBi11vJcTLf72oex3t3cuOoMPmuDcky9ZE0BujMzBilKtA4cQYnTYT8YVmsMw7lF+ac/hjTPXQ1XjYQ6l4e7PReHsHxwQ8ALbp4/8t25HxZWgN6ahlTU4uQzqb9kURMt3M2aO42IuAnUMKB3+DgOI4gu39zSmSaSadp9vyIvJweheEFL3YSXnbKTfLI552Sc9j4WGt0ThOuVod3gNFI992TVhxotE7jEsWWW7tDb+amtBlYL1EbXn42XXGZTiaH9eU8xgaVbkuiJE3n+bMjALZJGtgN+72vU2QOks6dII1/5WZHJuL2elTte8La4+XlekfX/Tj6GG98D+FPk87LaTauQ9DOLiSNMY4HEw6pq/SsPyp++9jPw0pTpagf6RvYNaHnHf+v0uAP4K2Qffqlodd4A3IaBHagcWirJzB4152yIjAXJx63rFyTYMn8ILm1zJf0TCcBi4EpcvJMwBpVljsVCJ6x21/2dJClS2iyRr901aOSwS0QCJZhXhxW1OaKB4STSRJ6ALlqJF3IEn+Pam1f/uI6DSO/3uUGOFM5t3jqUWZSazdxjVZ06amp9UDzvq6QfcPwXbofPIoglI76NtWWQmU/xSUsV3O0bdzHUuoXirWX6Vtu2Swt5uwN5uxM2GmbtQWzlOTdZR0RsDgzsgIDPMURzLNkMlTUCE8dbUZsBSSBBlCMecu46H/Gh6lsdWv32vSmh1i8xNbUUkMcCiodt1Pf++Kv9NaPPD4NkbQ5JExvAXUB0jnQlPsSf3XQl141MtVjR90TYN+dC/W2xYfTR5VYgDEFklZgk+q4FegdB282UU1xCiO4G3ENWFwDghJR7Iinf6/kVOzcuoFpuHlCX/FKkJiT3ukmCfJq3MENdnsmc0SlDPtakAef5ZW9dc7428mjtD3OSXZDNOSSns+ITyN533HRD8yljUO2Ev9dfAboFjdl5qvfLgGrnVuzvx10e5UxM7DE1g/msQGpDLu2Wm5wOQ2rkIwJoKiU4gN1j/enL9KjWPkPZCTVU3d/MCFmd9S/VqY1nkSJp2mw/U24IfetaF8zpZZOj3rAXd9n0/F4RtjIRHFggOjealgj44wGJOuk9JsYB1FFVdW84wRaLe5GqRQH0z93wPZ3yrRr4ILwyBfif2VfAVoeo71rCLMQLOf4JWosPa/LjSJe0+JfGXv5kPIgv+vJnhMh3SCGt3fvJ7hWhd7WEnV0jSxq7QMr49Z1BbI5c5Bc95zoBi++yul9vDjcZXr9cIoogINfDKHVkcnhxbhMkdNzclAP20jWEsk9tamcd5sKWZ3jm4Ry8ueCSxB6zxwEEBFcff5UNNKCzRZR9ECV2rEPmWyiPLtb+SEcXpsiSRKvVCnbNsZQPho3tBH9Y5hQWyagbQ8PJxiuCoryLcEEbDRLQcy/yVjzVeD/We7VVYabGxsUZvushEs3zYmPYou/n+WPKZrFJjJKAfhbJWA7yplOwGa2YxWwJqHRqqcT5YJKzsN3T+sqsYTYVKzCVkFtBaKnIWPsaNvJgv78jhab1Cm02g6aJtElYSosUaj+ZkCu3+heQ5pYGsGyKDxOKPtnXXZMZHfQQqczpDUJ6wq25qHJ6N80ob9mjVlulHvhkRl4QX1tpw2BZJTQGEsxWtXfRY/m+MC3rInJp6WMiDrFJuoMYqV18JlLSS8BqqvSLxI+Ogn6sCXQRNx5JDnBgiGibUMUd3mZvwJuFmc7b4a2EXTHnNlf1HAq8F/Kcktbu7WQdcWCFIQwXP+sKQUhRltooQ0uYxItyNDBBQLTwrh7OrJv8OtyrnI2gLur65+/BQlBkfHdGAFMJyv9gF+qoA7fXyPN8c0KQPXbgIbhF2cM4dHmMvVCb+sjIR6hoZ674mP0+lbMxHt4zVwtbtgC/oHGkHB9wP0lrRDdID3Y6MD42IZYor8gKM2rQmzxsEM+WIrzIVp563raph4NmNTM4V4cjvnaHr7lN7Ax7aDxC77z4ohe/ELta+NlMqZMv1ken/IXhrCgtB13bdr+B2lnskEsfclaSD6m10K8aZU5ZnTb4faagblTZmik0UK9C1vyyYqR9i7LfEEoR2ECnbL9JYZD27JnmmrzFDVFt7E3FtBVxGe7McZ5cPWH+HJlQbpOT46ZuOlFdL/K9ejOxsvpNcdf7vSZ3aIzHK7CJ0u0Ys5rehuu3BwoWS1z8koLlMqupXHcCCJKiuBah0CZo1UogMKdR4LG+WgOc2PV557uwBjgjEf/jjKckhrc4HsdbrgeDSOw35PftBOZRGmnHFLam/zUjQ0ZfR/qvoqbY3+MTF5goC0ay0x4CrrHYvgfmEKPNXa1VmUjlXXhCbQstQG1B9w1FQX/P3kzFtxPgU/5ZnFqco4w3pwFx7O1iV4rsJmEF8RBK19hltDNmOG4fqDq1jLXexhdtZyIsax21mE4JkxP7YLEdcNk1SnzB+QW/GCn2VmDdzxX7OylwQLAQL/bQH+e2MO9C05s6ZROjBDtbr2B3OGbLw3fP+yRxBUiVwpsNeFvyxpvd3elKkUM38U93IYXSH4ZU3Jb67Bb+25lg0csHpurfW73TZB9r/CjOs8RMBO+DMMeGBOgrd+eLtJ+P1lu7cQwoBnwOIpPwt2gvJRVQAuGgoNN6UIgOzKwrOVO1HPexDxdIl08NiF3vOH64okTENpNKJ3c8kiNCIY733sRdEjpKVQFumbIPg4q0lGbjK567CpTAIYd/tOfiAtS2oQ3voaJj1+kDcRqq8zcrceeN3soo8o1gLh/2bzNzHaU2RORbdHpY5PPVZx59xg7ThiUCFQ+Cyi2UWy1Vwn/xWeFsVWI/mkGlFVRO8e2F7+751rdRYvbd77z4UZfI/YYKdDp0/YvptgPi+0ddpvqasd4MONV5YAGHw0IoWg9AlrMy+z4g3swfOLYJDBzqS0nOgOjf0w4DICnBM6dc0PfHjPr7gnMzUBpOtrht7v5wRp/h5/MZi/7CWYANnKXKeLWNHg7ZXtJ2mj581Nn2eW765fSddgOfHdFinubIFZZJ8unbJBdA08zhzyqUw8C6uo/ESD+LRgiHhMEL19zombB4x+Cmkmgfu49TnX7AQBF78xWvK9pb0k6NbJTDnEIuX6fxhnL7MUheM41FnHFzUEu/NFdCM1hdU50SFOESSLYdBfOI0ktzP8w3LnN6LItRgAtkSuWt95UW2nAnHsAwWAyRuoIRSDSxlErz+wlZS+F6/OhjjtI0K8L3VerkyHLYEbySaBRr/EVSMnyChqe+gUKvIYeHPaMoeB6v/2qb7wca60z5Gf+qPTPvEGSm0813ExZHzKW5laTSx4O/PVaWP6zaWUTlrI6LajIeOn5Ji/Hl8bhiDqMhMhtknJCF5yWuoROhQZaWC5dpHmkEgkidEf49NqnfRP6sUDtBlhLGKs9vZd+CYhczyM3F2X1TGvnhOpV8p8bCkhaxJeS+4QLUr9QrFsE0EFd1CBP1igmAtrluJiaundRI7eBDy9zqUr4gmTqEyQBRNGCaN4YPlXvCaGnvd3lCZHy5/V72oxPYY7f9c3LuuEFOoRfT0FmLWZqiNlUEBFXn4gaZJTmCZzj6E3N80THqVA0PnVB2dp8PNGlfNJmyKnuM7KW3FLQmicglr2FMNfzroPUI4YW8mlfVXN1wjIWTLrwSpczWF+THZyjmDQniCt9xsS/WSUI8ijbmyMAJsHhwCV0ZT7htrsOBQPnZS+YCO3SiD43dP9jhxvj7KQ2Far7xwMCnjfAtnHU64lmgJbryvu9a0BURssJ92d7q/p4vvO2nMqD036oCico/naVXV7H+ur8J7RCCKE9uKq8cek66ujEAiSOi/aOEqXkTM6iPk/p71WwRzdjRWk/XaOwdeifvlc7q9ne0gDRUgPnls6lzOQuby7TeutA7O1NgNQwlHlavggKOk9vNuKmnSqpwFtR5OUhS59+hEgmOA32nO+16amc7bXpasoJ034XuOvJ/AFAY5w5xq3oqBhhgJwOSq917diQhxAqWAvQAuTZUYB88elQCtcB9qxtyaztI/auymX9zKkiJHK0vbB052NMkt027LCxfANHpcDNKPktRIbOs95Og58EDbfYe3PGmPaZcju60FlXmWpTvTXTPY8XcyxtJ25Yuu9hRTQnNru8MLM4Kle5xaOvn58foDRAAOBfIL9Af4H9Av8F8QvyF9Qv6F8wv2B/wf2C/4XwC/EX0i/kXyi/UH+h/UL/hfEL8xfWL+xfOL9wf+H9wv9F8IvwF9Ev4l8kv0h/kf0i/0Xxi/IX1S/qXzS/aH/R/aL/xfCL8RfTL+Zff36x/GL9xfaL/RfHL85fXL+4f/H84v3F94v/l8AvwV9Cv4R/ifwS/SX2S/yXxC/JX1K/pH/J/JL9JfdL/pfCL8VfSr+Uf6n8Uv2l9kv9l8YvzV9av7R/6fzS/aX3S/+XwS/DX0a/jH+Z/DL9ZfbL/JfFL8tfVr+sf9n8sv1l98v+l8Mvx19Ov5x/ufxy/eX2y/2Xxy/PX16/vH/5/PL95f/rv9iHsiC7SZFX5ImjxlOodLIwhlKxNgzA8W+C8uRVj3ytgn2JsRqGCa3ulSxTfobW9NAfP6fdfNgDuS4TOO5sRmd30wfvrKB8dSciG3bboXNZ85DpwAV/mo5tpPql6G3jXeOqTwlgtgaN8G8LZC35uiFUETvCKjOXPXRcGPk/kRtAc/xbd7n6RGDCUwtCp85tLlaozR6dgkjqPUwhAPzQjt7RAX+W9uDS2n2fq+rbKx/YK1cTU8Al09PRtthLjKueeLeUlp81DqR+Pa69YqIQqyASmFx7f317CCB9YH+tpvxuKR5fUeVrFSCyTaZPo3AsPGrUJjSkSsTCZ3KgH1Yw7eIL4xTMNsbr9mt7/Fi5pXtwmiuMZich8MIJM3egUSNgY9SBhcJgXyBsaODAHxQzE+YIJRgY626ITziBO20x1TtAaz3NKtrLYreXnVdZwVISmg0FlRRKvKljKll2wh6PCPrBIr6SBfrNBCY330wy8jRCAvUuvIl840xUKLEDaqza99oq99NcN+Kvcr0WYVPf4NaJVl/gVrByFQ5jfpvlEkVEdB4LstJnfTcyyEcAcHM7/qfQmCiuzrLcOsQk4GK+dPRQ9n+nR5zOPnG4vjG5TL/aUqwE4/CVwUsFwI4zCEwBjxb5IeAvHDjteNW8ioV8ionRd9Ijrtj6iqGX7g7yfp4meKBkxfyyYgwOOaou9YeIE9kll6sCG3C/xL32sUFjv6KR58Vj0HMJww05cpRhZhXvmqqB5DaiWBlXXsAWfbOukjn5beiA9KW7VKBZ90z+PT7HTmjomX69K8ogSr8C4+TskjJI6O+R2AP3BhpVnVRJiU/Q2m00+XurG9uxuN7mfrnt+fzshil03sCMLWROOaJ8Z0aFvHhdgz/4fm6GxUzdq7ow3KiFC4cFEM3ly6UIWr5hP+tb+1XjcXiPAep7AKl8hn6tV9+djwUw6JqSUWcI77v5Ndep8R7I7OGj5JldG6/yH2NIXUXYPAtGEdUdot5ypKP63GcopkbOw1SBF2HC32wUl6SeI+7Bz3U0PeA+PbBIxr6KSJOmKvQ4GmcHuyuaDaTR8wQ1nLBzA2ss9HgiuwsVxvXBfu+Luj5hMY0oOMwbKVmLLl8wEtrtaGLmGZI820jI+2c3ZIbyI6uZ8MGPd5rpPz+UjYsl1sp876Nx67dq7i53SxPO+OL1OxIaF2q4cfbjhy4gunoCZLGa8cGv+4+Ir+fF4PatrxO+j6UtQC36gRtkwYBRdqjWMO8MBEWK9WlArDwlszBJdO1nnUgChqn3Xt0Rtn86tFwIpdVCXNhemIcwn1fbi2F62XahBiBoFiVFAFNcszXqddyqCd/LPiUrjHGFd41PB31D/yNlFV7YlTmxB1p350S1a2T06UHKxGeA31akL2/52m+pGcyfJgwIY1mgvBCosIyAn5OJm+mCbMRB+yc8rY3kFc3upnfCpuKTyqZRYIc1tI3CWnmzCvQxTsZwnKRHocfgf7kjJeOWRM9wBau1Gj7iyaxRzQqYQkAiy5QtnM2NPZlVw7oRtyFHvaRdHJ7agVv8Y0kaw6Mj9tnclmPl/Sg705sZ2EWQuDIjq1qr2ZVRf3/OhdZDFZJYEbYjVueZBU17oZv9AXkLJtOm6V0B/kqM8SX9T+ULB05Eg9WV/cMmkyKCFfSls9y91TwAd+euRWZe41gvHXAbbIG9Z6FJWKDsUSSqKwWH11udysLSMkFSNpeXNtn7bgg9wVaRvcS0BhKQxSy6H82fcqUo1fvtKFVxrM3ppCjBrvtNlKrN/c4wFZ5uCrwmsQZbE0LlhZJjFlRqLHJkRpLUzu++Wtnx8iGyCv+kO7rFGM25b8/A3JzkIhB7Wgj9VO3yeWZaL0Gyu733++14QyoBDv7PsQApvS86kiIVnBNAcsKnCHZRQtuEH33yJ1GdBBWlxp11Kv4jlbutfZlEPqKn40x/KSm6dZGLfsgwI5XHfjNYufHVdY8UKf0ynlmPrpfE/tnMwRfZMk4muPmKzXLzRyL3F0StBz1NcqfzJ3S5sd4Ex7ecHKyy2dDHZMxzW3+ByIHKhXaLZTZ2X1+uOGZS65JE6u0enC5TfI7Z4mFlvT1hgE1P/7dz+utXEfpOiMt9yHLumaUfWfkX5oQnEQSLhVzMYDH+cg8dF9uHl8u134jrdcMwdCP8BM473VBSWhE4vbmOY97imeu/gpD0jkqpOnXnkTmFHfGY5Y8p6tOCTgB+oPlMXQsVgI1jwzyke3X3McCeDeXMv+WMB9FciIZLHvWsiCS+0iG1wvI+WzxxA/21PSaH/lUB4x7ZNxLz6+JwynSX3l2prlsou6opqxddzRc+QOb4F/Zdta5bOGWbs2+efFeeP/xHy9MrSk0XKfwmKicXwE0XwMDJHZx6PYIdtrDKrM7dtpUyKPZA5QHjKdMr4BYrVwHj4icXapZXekd6oLs5vrpu
*/