/*
 [auto_generated]
 boost/numeric/odeint/integrate/detail/functors.hpp

 [begin_description]
 some functors for the iterator based integrate routines
 [end_description]

 Copyright 2009-2013 Karsten Ahnert
 Copyright 2009-2013 Mario Mulansky

 Distributed under the Boost Software License, Version 1.0.
 (See accompanying file LICENSE_1_0.txt or
 copy at http://www.boost.org/LICENSE_1_0.txt)
 */


#ifndef BOOST_NUMERIC_ODEINT_INTEGRATE_DETAIL_FUNCTORS_HPP_INCLUDED
#define BOOST_NUMERIC_ODEINT_INTEGRATE_DETAIL_FUNCTORS_HPP_INCLUDED

#include <utility>

namespace boost {
namespace numeric {
namespace odeint {
namespace detail {


template< class Observer >
struct obs_caller {

    size_t &m_n;
    Observer m_obs;

    obs_caller( size_t &m , Observer &obs ) : m_n(m) , m_obs( obs ) {}

    template< class State , class Time >
    void operator()( std::pair< const State & , const Time & > x )
    {
        typedef typename odeint::unwrap_reference< Observer >::type observer_type;
        observer_type &obs = m_obs;
        obs( x.first , x.second );
        m_n++;
    }
};

template< class Observer , class Time >
struct obs_caller_time {

    Time &m_t;
    Observer m_obs;

    obs_caller_time( Time &t , Observer &obs ) : m_t(t) , m_obs( obs ) {}

    template< class State >
    void operator()( std::pair< const State & , const Time & > x )
    {
        typedef typename odeint::unwrap_reference< Observer >::type observer_type;
        observer_type &obs = m_obs;
        obs( x.first , x.second );
        m_t = x.second;
    }
};

} // namespace detail
} // namespace odeint
} // namespace numeric
} // namespace boost

#endif // BOOST_NUMERIC_ODEINT_INTEGRATE_DETAIL_FUNCTORS_HPP_INCLUDED

/* functors.hpp
zJ8BXE7q1sEaSCMxgvZX8pue0RbQDCBjFG6mvjLkfItQwJV8aP9ySFxUUzkgjdUOwm8ibKcTFoH/4RxNEQuPlCuSjZ7HsEU7lkTaj0ouSymJ5EdBNj4mwzatqOn9A4oZlPVa/xbU5j5JQS156LwqlLmwRe4eEYgc3d5myKgEQGHKn0oGtMZ+NQVDj5ecMJXETCW9ppI+xWfW/Uig/zF3r9ZITJmlxTZwn9B/o6+6mVZWT+24j5vc3OTuMbnjii2pmeSx9ELHrj7xhZUJENj5irgqDEsSjvQEALDzn2tZSNSeUGzJQ+zn75Pw6cyc/C7fYHsdedQIfK+Kt4xOhnMP7OXtv9H30nl+wD3PFCcISo/nH5wV+wNFRwryEfeH9pxmCoNztsDatJND6170J9fn3F01FP1N0aDRv+kA8q5/bfyWpPFXPt1v/Jb+47cnjf/KlPHb/z+Of0nSe2XyPAgwPwdB8xKf4l+PJLZSuYp/8NXf6YV89KksfEPfjHYSLRGGxKtHcW3mv3runMoylZIYKzQr7h7msQBxVNLLCqwIbuiFRfLL2ynClV+RvViL9kr/ivbhSnzxJeCSsmzFVaP4VyMVIPDpHn74S0GhsXuygQ76DHLRXcgW6GGL4tqquLYprkbRPNEOl0IXAVjQLfT8nv7dz5djH/4Tef7u2q6l6cy/Lc+/RQRQV/zrapsc3UOQIMwOAOCxbdvGjm3btm1bO7ZtWzu2bdu29eZ/h6+qT31JVadzSFLJpD9eEz2XX9XAWOtYqdiGSEl3fDM1AA504Q8SlOWOR5QTPWYOkNadYLt7VuCKE5djaUI6+6662Np//m/FqiNqt1DXofrvv3NI1xUuLuqF2+opzmPNvSi1DH2YyWZMS/eU5l1OpxdR9QN3dR2MPwME89uvMQD4dvELYlq0mj7sppo2LF1EX46cTH1iaV6N6Jrx0dLrf4VFb7Ha07hvcDciw7Bqy6I9Z3zn72P/nHmCeIbycEsoEG9ldQFTROIRnDSv6V6e6rUHNeszGFttG0HI6iM+rIt8nfoVwf3IzSjOpAJz619ff/PgW4TrGnAidYHuoriu8riHrWJyZa2kv/xxOb2Z3ij852A2+8boL/wiutARYPBq3lmEvmonzJN8sYbxfOE1ZLCVtKMS5R5nOGWQrCsu9HpkG1oMhARsm8TWgDRCU+BM2kNx4j3A4awTSgOiPbnh85nMa2C3fz3hl9lok5EFXX+IpzXVbLz/I+yYnksyDuCzigWzu4oWn7k+te3PyAAiWvLKdpC+GhWbzVawRzGLx0/EuRNy1BE+RVPk1aNhN1/DNnbBNkDoYKNqmvG0yUxPytkE8HVmDQtIsH5J0VhYuzyFQtqZ3N8ruunVPLIwJ2UBJlAUDb2bkXIZwsuY26bmsLJOE1Q4ieXcz+gVEqNnT+M0YmBkj3hGkKY5Wqkq5gxjGWUmOAynWm3SW3Etsm8WW/3MLCCQ86cgGxlhoFpgZqVqhOowS4rWkMe6mTGJ6/v9xXEZzWc5tEgjM6Bo2Sz7jaVxGsd62Wnlr8YOWKMtB62Hohr89PoSXUxPYLCamfMfHPLeRYa5ThMij7B9TggKqIxpU/t10bEFdZpRanb/OWzhmUT1I90iZgarROcQvhBAEy0DU/5NVXUGVt0Q1Lsg1Ag5+1c2oUTSzLi4PrJI/Vku/dlVY09Gt6wjqpjcpnxxFGRa0RYfhkJs1YGoT5aWDOwoDH7v5upjrX+wNUvW3aiQKM6Z/VAG0QjlsXBpkm/QuQudYeOoUbrhMa0zhbZ9yuOuDyOUG6pOCftKcYW+rDzoYiS47CHUbNirVkqjSFyvOjAlbYK8AxCmgDCsKrbBpMZRcJId+7ax0wPuEMkXt5q8AuW49pSFO2IB41AGXKLVBj5lMLsvlx//sA3asBW4lE1rbKW3youv/dvEtLn8DzyBpkeFVJsERnTGEjqAMAa6Bqj712wMr5fcMY5FJFlRj/Dtk6xFTaLhvxrsgAj48PsirbpkN3m7WSRmZV5ZyJd+UOMgq5iQY+KrTScR8mHFfdxD/0nlSYTtYFX1P3CqFQ5D2iJaEEP6I0NAPN99Khmu7ZCYWTgkTgj6w56uuutGPshogegUprsCS3O/Eb5BsxyIeCK5Acb6SXN9C5KRQ+4ji8ydIIpOCnsSF7t5Wd7Qv8ymA9jvCPGMAPq75R14OU+pY4J4A4zu/swetSxps/CXpiTJ/vh/S5eNycPV/Vk0hgkXV6OXLXEEki1ig/JgHL9A3RrazeN3s1jVkSY2ADgpHKlz/R6svS3SCnLb9+R0ABRiZK1YJadbjaZZLKRhapSvbRjtF3QwiU+WedA3VoGU1n1XSoGxOqZgBv+BXabU/Gt1MDj0mqr5bqEohZZkoaEuysTeiwpmqcUlt7MUSX7ok6AFVcKYy2FpyCvVKz/IbNRk+OyP6FMPj6h3RuQNSAUFq8AvkKHUSPITu6r6jfl6gvvtqiw+QBQZdduV2YOX/MfblDIC1vZx70+ChDjhzaidq3J6UMkoTWHhONIfNPYKprNa3O+CZSvSHEmxJZKN8Svn5yqKW/s/BRQE5g4ta5Y/ifL8rKGiXhmSh+zQPWaVFgh0/L45EugxG7OWqSBUrBTah3sjvAoqvaZzQIRC8eVXSZbhuiOmpmSK8PKWpovTpuuELsHiWwLlrsFFH0ED+uglycC7VQ0ptrE2/HqjF0Uvor7uwLyJtiFKzXmXh9X852RjYXGokon3iFxf338POTnYi/tvQGlfJb8Byhsg8KQlU+zy3tj9gfV9ACs6Yh56x40FppCagVmK67xeaklN83sRcASQ9mDyFmdc+44/aI2bP5WlfBvpmbzKKv51PLhxaC/vFovrzgwjL1FnOWAXpOZN3K4Nbf/9CFYLxYi/PlG/UHqzO+46s9YAgsm5ElFju+1NQmpX5vun9UMgW5A9KNmCFfAPuYAZpp8bBtys0uelnwZFA2h0g24wV3y6qDFQMLdVXFgl3cgP6ivUzVB//tPP/YEBxkIhXywUCc3IYViIWAMblISyl1E0rE5V1UIEWOEx4pAbXRoYARG0nePafsMA0BxkqXKwsTBBtyCdM+D6CakNCB3+PQ2QZ90HD3HqsChigHpKmCENj+E1Is0sdPLtL4xhjBGI7mhY/QzFs0e+NiK/RpSvv03iNuAGzfMeN8CAIzztn8u/G7aVHrJ4P2iIWUDhqm6xGN5+f9Paq541UfFDnYil7XCaLJ1HClLlNSHZUgYLz5JWgJdeWaj/aDxUj+5fTE3zn7gmRdJr3+Xu+b8yNMG2cUDEtaHIDMCOJEDvPrxDr6eQ30WykT9EkmQh224ErJ+hASGycw9OZSvukOrFbBubxVDEDozOSfxhiTNQy1uzkGgVJS1ieBAnIFzsli7gIZloD6kThTKuC87Drf0HYckB4YJgqsdKwTuAZLi0asKMh2asGP9eE+b3zV69gZNiIq6rMuohd7gJwxHYKVgDb0ua9Yqf1/1eRIUSRicLoxZWjqoaNqtOV8CIhxspKOjGRr0WqUFOQQ3bKBv3qHhAVCpkZDu3aiLu1H5Qooo75Qq03SGZt3Yn7tHu1SzNHwHuUiTu2WqdVwOaQm6JaAdGV5IgUNE8NrkjcwFVqkfQZM3+NO7NfDvxWjc+k/wGlN+HI2GSCnsq9ZcO5Mx4UR6D8rhm6bZwe1sfIoEBz2rIiO3hhVI34mOMOuGU8ni6KPVTWOmIXW5CDIJJvzfEtw3H18u+aSA3Gn0kEB1cdcKxupLcs1zcWSuKX71IyRQmHM57C77xHhUeyxjAp2oPdaWv6L6DBjMMo+yBJiodyOzCi1d4gtT1dUaR5CSCuUuNPittZxD6Gh2qJ9yAJ5nmFo3p1NiBXYe213Zl3iTiLBUSEHmL/FHiFDrqGdDdUYObl4gE8EFHtnU8TIUEozCSJURSIH9c9zgW2H6sMurojVE7kg8wm4BDHyJKdIq3e3LEfcu+qY54oeOPFtQk24ilpyWUiGK0bjjuaL0+eAkrQevdu6ZMtHKRFISVU+K4BU+aZqJVHJn5H0HjPKBGaS9pm9N0gwgQQ8OAGTtJXkn0fb0OmJZ4SgCM34o4MhWmJsshvMmb0n7IJ7DnDnFLVO5fAnaghagftyXTu9ftIsAHlphdVlBu+oHgq3zc7lzkIT8zrKZX16rupZ7lTB6b2Xym0zNI5Fsxfr4GHHkCAAMSDBdbT9tqEKpSWP1Jq2bXp2kRLicP5ZTtXGNizUWiJ1H1zaGxL3gZEqIqtolPzmEIqj6RtoVYIvyhqjzfXGUSjjKD4dvdrn3ijqWjSf9M2ZKy4dAtSVIYrUnhpXQepsPH/Se4gi1IGH1SeZQCHisXvBrRTdxJxFEzBWbkgkhR5jpw5ILG8Jpskikww/Ug6dkkF1CI3bjVmJdSuoluVr7IgEUlT+MrE+uK93MdE1s9r5+7rp4/61dc9RIy+C09ifNQHUTZPWiWD09t+RxIj1pDGNMejB5o3dYr4Ny2Ud6g/esnnA8YLXTRzhSJ2yBwk52EhZ+h44fr2rfTiNI6n/0ndgt+DOCegQgxuBzlLGVG4x3+09DSrSw0mCrVkVrYP09T0xbGP1RMI3S0EUCm35EMhhMS1tOHf0cuvU/yET1o90yZM6xRx3DY+P9Z45NQ3e7pTxjth+RG0zEMy1AOk1/G67EsJBLKwWWyZvJomM9r3wItdoEfO5P6A/Ce7+I5GyQUeEv/kwDIACNQrUnfrGZS09NI+KbkGtIz6x6X5aCqblk37SfBQh/jjHdtKUwV0id/Ke7dAwbJfLnFtlC1Z47HZuTSEhwANdp3bgGxMyJ17/ShyL0xYAO99MAFwDXyEIvgqYIT0I6nDxdztlnMQ7tXtACILUQ7LLVFWEVxoHmBCZSl5pCIBaiO2GVzFvTKxUUohPK5b+2ezg14xKAtiDyqHJf+k69wrL4+f+W3YSwvWd2rAYhdrGxCzeyUVCER34ANPEDkZEote6TQeF8m4rE4nrvRELY9JODJoQeLbxyuoiYk8Mwgrx8iUl4X6laOZyIbwGQWylQqD70YRlGnXp5B49s8NVl8wqGCHLLwFMldPI2zyvv4Td8d0MOdlX78cDZx8PqubQQ2ZglDdoff8XLaouxk+vDhetPWC5rjOULC6qJo8zAP8y0L75lkh+uf08YBqusq4R5eWq2O12LMeQyQmRkZXPIiKFdCkTHpv/FU/aLCwiAt3o2q766tamZl3tI4bl0p8oC8KJicT3BvqoopBLMhoOxaWqqOzvocV1efGhztsIoWpQbFPctUYROLlkh7Qb83oWFSvwRGsVaVpPHNFq0YZZ7g3e6hhw5Yjul+IzpXLYiGMXrxkmKKCcKjSlI3n/cvLo0FBqm3oiH7xIbFDnv04uxh0XF2PEXQ8rQx8ZUdsPEneA1afPkty9u8vb8s3QJxJhkcAuKV2hmGejAh3kMpLK9RoNiYHl+O6nb3iR9YD8v2O2ef828QMpOMNwDslXNdQlB/K5TTFc/GWfh2RPKbssIDWBWmg5tnPqvnAE/ZUnHGdZenCT02EEU3cBkxBc1gTN0OIXUV52WJoqnaONPTRU6Lrz5QxvRGp8DphG0BvVL5mJ0hOyHqdwYa/fGZXNH1U8m6aVz9IGtxg0L5ZoGyLSjQI2t3GZKK41UG7+PXLguEBHR41BNcL7LtQxyzjV9Hnn7twTCxIt+7b6DcIoVmttwmmTRgXr/bq5oU0vnKC6CIpFVkV06A+gjtYlS2p+e9vaPcszF1OAh5OOq9G8eOGMuZQQQ28WMr3ecVUrsDuPRdcwgRgnp7A90CCV2/r9YUonLq1FBvRXE69HhShxOp7r9vi71zBOw1iiavRf1acxysJu3ZPFxs5bq+2tv8WWmuP+x6VnUf5cJBTjNQLAV+ECHtRzPjdi8I82SuvUBhL8AwdmICD4yKsK7HbQHwJKAG8Odumw7LUC9DjzH762eXdSzyu4yTJCqkyi6uwb4Uo17QGzEHkXDIgszIWllWXvXRzdAmO2PBDfS1zDN+nypZyWM7iW5/rxRGG5k+wJ0haF3bXHEgr7jDFU3CrMTMI+ogJCxxh5zOZjmTrnb6rlMS1dJcM+XBgmQEgxqag/50BHnY/3wWRUdRXmdTmIeuuRxcuu5e5qQ2RvZVHfdV7ep6i2HkwJpBucaeRyIa+p7Z/0tCwgio9InjcO0hPMaYCOJqBhfFzj62v4JB7Q1uWvpIJQcbuJ4a6OHq0OaKDXZ1jmWA+SncM5dwUlcJSinM1qlxfdVXMc2DEsOxPdba9aacOBIIPh7BuTq8OlF5KqvEdMS+fZwaUy45bqByfrE7kSIIaSGrFfJIGGY5NC9Nu2XvVlQ+5K1StST32/a4Gs9u40yj8mJa+qq/XWktzu3hRYrflgUDDkvnIv+B2aY7wowgE425ToLg7FYS1EqaVSVtkoFkqQgjqkHFI20ShKxWFKxMnuV8QsjMOVD/A1xjzaevGtk3TMItpaZbMmvkppH9Eaj2UAO1pTkigNmnULUqyapP3eRPYmwgn8HAsAq9da0iiCt5mod0Hhzwb8UredaTtEkB0kZRMNOAwC09OZVRO/3+3ucxdX+yKyq/KW9l4y02X+2Z07U0oLQWoE8afda+Fg72RpJ/YN2LcvAFsFepNvLOTFBq5UEOXlL8CdV+wQ0yTZ1KOeNVgkGhcuK6gT9b63UHX9Z/qDZQTYgpYOiJU72TGhBtZXe0nJHrSS19Ptc/qlgdPTM1TqEysUeKhhJo1OkUJP8AGtB2PSQXPMdLs6yJYntNx/R0lxclCbiyBywsC93tO2hru9KaTRku5Ht+1hxwTCnP9Z4zC6Wl0hHEGAa1bwwlNbsrJgw0zULmkdTQFlVEnKTQePdcIdyLKXvEmqUxzKCKMWL8qGWXzoubN/u8DmkpXkI5DLc8hkcCKe+okiUfbpqYTsWp46gT6ohbr9hjr+BHPHOlM+B4KT+JZApaTqIYlimU+T167ad/8pK9UQ/ma2f6MlaOZObSkbFxvTI0Iv1L2lcv8Aq6HAaGx5ic0K1xv0ZUjoixuEgNkHWoGdiGWvCqX6BTUbEw+PwtCHxIs1oM4nA962R9dDPaowYODUi6EbUu9qz6BzqJVFCQ7v+Lnid5/NyVVFIsElMIKMPTDJeYXF/Pa3IFrgDaDYdMglGMYUgoJT6XChqBmtlzTx85ClCyJC5GDrAOH0ZirpmCXFa/ZquNfsq8GfZ9KWn/JMOhXOlbJqbHGA9rITESzAZKPmd57Xh50MtooWzp9MhluO34nOQ43XCc5HjdtJ38jRqY2GD9jNsM1iqMyo7Nw+c0aiJ+fUO81ASE2dEZnDNqbI0jbhnQDruP9QqmUgx3A4g6hE9grW7qPyg+LEeqdoOlWqaBowdgt+CyQNZ87XQGKil2IrjC8f7U+2sWNvWA9eeANBnMhhnNPQts6rbC0ShRedWE1aPh6nXpPdFTPTnYACeACtxqZ8FQaN4ab7P5vFWpYWd52O+MZ/kW8s5kEgN9SsgH/+z8IsLT0Kevuwsf3hDrAlQuqOGGi46Hm4USK+Y4mWYLDlloko/tWavTyZ0Y70IOuPmVUYoHva188DElhjcsSycZ5GrN1irIYe4G/WogKNWgZbMNpYeZrRMqGKCz
*/