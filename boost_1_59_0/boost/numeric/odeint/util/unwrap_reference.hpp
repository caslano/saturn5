/*
 [auto_generated]
 boost/numeric/odeint/util/unwrap_reference.hpp

 [begin_description]
 unwrap_reference
 [end_description]

 Copyright 2012-2013 Karsten Ahnert
 Copyright 2012-2013 Mario Mulansky

 Distributed under the Boost Software License, Version 1.0.
 (See accompanying file LICENSE_1_0.txt or
 copy at http://www.boost.org/LICENSE_1_0.txt)
 */


#ifndef BOOST_NUMERIC_ODEINT_UTIL_UNWRAP_REFERENCE_HPP_INCLUDED
#define BOOST_NUMERIC_ODEINT_UTIL_UNWRAP_REFERENCE_HPP_INCLUDED


#include <boost/numeric/odeint/config.hpp>


#if BOOST_NUMERIC_ODEINT_CXX11
#include <functional>
#else
#include <boost/ref.hpp>
#endif

namespace boost {

#if BOOST_NUMERIC_ODEINT_CXX11
template<typename T> class reference_wrapper;

template<typename T> struct unwrap_reference;
#endif

namespace numeric {
namespace odeint {


#if BOOST_NUMERIC_ODEINT_CXX11

template<typename T>
struct unwrap_reference
{
    typedef typename std::remove_reference<T>::type type;
};

template<typename T>
struct unwrap_reference< std::reference_wrapper<T> >
{
    typedef typename std::remove_reference<T>::type type;
};

template<typename T>
struct unwrap_reference< boost::reference_wrapper<T> >
{
    typedef typename boost::unwrap_reference<T>::type type;
};

#else

using ::boost::unwrap_reference;

#endif

namespace detail
{

#if BOOST_NUMERIC_ODEINT_CXX11

using ::std::ref;

#else

using ::boost::ref;

#endif
}

}
}
}



/*
 * 
 * the following is the suggested way, but unfortunately it does not work with all compilers.
 */

/*

#include <boost/config.hpp>


#ifdef BOOST_NO_CXX11_HDR_FUNCTIONAL
#include <boost/ref.hpp>
#else
#include <functional>
#endif



namespace boost {
namespace numeric {
namespace odeint {


#ifndef BOOST_NO_CXX11_HDR_FUNCTIONAL

template<typename T>
struct unwrap_reference
{
    typedef typename std::remove_reference<T>::type type;
};

template<typename T>
struct unwrap_reference< std::reference_wrapper<T> >
{
    typedef typename std::remove_reference<T>::type type;
};

template<typename T>
struct unwrap_reference< boost::reference_wrapper<T> >
{
    typedef typename boost::unwrap_reference<T>::type type;
};

#else

using ::boost::unwrap_reference;

#endif

}
}
}

namespace boost {
namespace numeric {
namespace odeint {  
namespace detail {


#ifndef BOOST_NO_CXX11_HDR_FUNCTIONAL

using ::std::ref;

#else

using ::boost::ref;

#endif


}
}
}
}

*/

#endif // BOOST_NUMERIC_ODEINT_UTIL_UNWRAP_REFERENCE_HPP_INCLUDED

/* unwrap_reference.hpp
Uphl0ab0tCgb1jo28E0/kkXcNIaEjSFhq0iKd1CC2Ayp4MUa7T1vjzWMlZYNjBG3TDkF1Vm3PXNLUeIdgJE5Nk0vVufbExOS48mvzgalKI9Myo4997bL9FAC9EWjtkjPJDR1kR6eruOkBZLIx5x/a1Ltj3+OaasqtNT2LShrj7RvVURf8EQfvcEy2DGGj+zomFPdiJBzN/DLNcW4Xr48JsbuRVfLitkxp064Hrj5Ijd36M19+2Ze+xMsDp7T1zEEZ5LlW0d/XUNmqGQWPdBdzoW44hC3KV58xcsTkuRTZsRYzkNzc2ArmUuPpUaqqT185ii4+zj61MiJSfNFndeoguFG1tb/oJIrH00eeJ4pP8v7FMe1xmzLUZG0n1eUy9/ikAqZbvkEaT2PQ5Pfcqx5qRymfk79MNK9mTSe0dkvP8VZ+qUAUZM0C8YkzbrbWL9NcfUFetAB7kEO3tv1ORfKGSVV98nVvOVI0XX0QeqSXX3otOTG9GSP0DlpCw6IDbdb323bU7vdpEzd1QZ/yBLgQPIEfMhN+VgbNkm0nPSZ3GQqdRrCpFN2qamPtu9ZznJLaiL+8brrGFVGNL8xioZxlLbuI2gdtEu+BR2CXY3iyrdcC7lypDEg4d3Ql2DYJpVyzPW7Oq+S9hV/BJvyTYHjLLA/5MqLmeo5icKh8kyy8rtHtpuOwP9h9r/JEvnPrH9LM1w1fk/+X/x4z/KJSc+HBu0Xwpnzdu41Lazn/GUL6/nme9EVr4GzBNDKmyxcB4d8maOeb/wAFF+RnMiKB/4DjJw4X9CabGO+oI92GfIFubO1fEFf/pcxX9C/7YqXLwj1v3Rj/C+fNB42OHF4fyt0rpSXccEBPpAe2mDuHRMcGInf0noF+7HgQJZ1V1eocYQA4rI/k4lLXhOXU5kP0wYuykUobLrEnFb+T/5BsWpwyv5MZZmJ/Zmy4/ozfff/5M8E7T08cbj2hp39tNnLecw9PErJ3Z+ra3hwj2q/iY7sqH6fozI9SNgKuZynQPiSawDk23wQuC7BrrT0+MfIxYLlaNvWcSWL8gIZZcWO6+uvwJNywOY46b9TDty0fAuPOQIDwOHFNsmZ09IZeEfNbFhfJ/FqxmwnXy/NibKj0fxVgkd+krN3tlxtzoNObK3mF+SYN2YseshsbhaCnWmOo41fze2sq+3ebx4SUA/LjFwCjJfjnw7c558cHMj2T0B7SK683MbuZOMdHu9Y7J3dhuBqnb4Zk5Ls/wZ9OWR+us4RzPVqus4Ro4d6CHJbKeCB3A/ccFXjhjJOKqVuUiUCPA9jT92kgAnW4VXpScGXLzVw5DinvepwGl0Rh/dHtET5I0a5fKL7/w8E2W0DTsXPpciByHsJ9ooqPX45/RXD+jmUHC4eRuuYv2rTYHV1dW5DTohbbum0dIpktNpwGPv7MKsaaIbMbVnJ3TbWwJTEf+V1TUZ631jy76p6uWw6HxMp0622Z+Ek43qe0ENfgIXyjVwjfghGeYYz1r2M4W3eMRT/ykMTOpUKqXnos/xq1YK9E6av1WPtuKerky+xHHUcD1ypq01gT/3xpBTid7BVrBFK7lvQbE0g705LbLFU5ysmE+yCVcFlE2FOudH48ugYGsVce8QW1SI8WFZKhWCzUFCzPsuXpeSuHaNmLS+FXUFFHunFDHMn5XNkbhATfcCVEXjlQTXU4Myn9SM8OYYtaYrycxbJTIv1V16k829mrL+yvSdsWrGTik+pPE8qz5fKC9ZI4lSpvDCGnUFkiig45UrBcRomkCigbHUL0lIUslJJHHEaJ77rtRTGh6mHpfkRrLW4PoBfmZLYl92oI8vfOJyC31VVs5VvdeGqsHBUwzRYqUM/sdVUKrkr8oA3zyE22oVABuzAkFWdvFTHS/dj/zz81lrlf2s7/tgmqvC1vbU36HYHFtlgQjeJYUyCionTmtEJVxLioAzpTMDNf0wa/Ef0DmOEZaOw9Xpc+cPAohAT+AOBmGiMkcWQZT8MLYQQZEtY4qIkFnOmEofIcGbs/L73etd2tNtMtMn9eq/33vvej+/e99sfrVpkkLhHUJR8oW1Xa1F94u9XzrK/hnWSx3LBCJCxRVGhIK96qKC9lH77zFfW/uGO4Sq+f+hNHcvTP+r9uqeA/c1J75z0Flkyr548Y7EU4v32HEGAQ+tDq27Y5RLu7zZ3jjtJ076AsHO3sdl30PzJ4ubG99sxHth9I2MYx+Lj++UZ+RAh6Wjpbu1ong7Nwkyok894jrrB2SbpGzLvweZsi5CrXtDs4ObyzwL94a7Oi5dd2IFCEYU+MzAJYi0Bx7op1UwilOsZRxqiJytXU5tSe2xQhfqnUq7u1DXxN+UtxAucAjuJEGvxDBzEHQdubq1AhrjjP4p9hr2nH/qDUJNOsyVzaAFSVQ4P81/ob6wrz+3gu7as6GfHQ9c89JWg/i+q544PBGAkxBTF1tjPZJtEwuxkY5VmdSrtueILmGj6emhLC5XchX9GYTHr5phTo429DOUgIpa85bvExxtxGstjaS7twPiuTbcOX+ajH0GiL8lrKlxPjeBLTWOqx9Y5qNQyTLMl+UD3LXA7uhZua+FWe8dOn+ouBUNoRU+yMx43kekzanFxYISvm1ycTFAiatOLPllqYfB68lQEmhV5BAWSfPwI8d4xwvCHDxKBsR40BZQXy4iHKS/pCvTrEiQ+6vDJVL2g8dWzTbj6SKRwzPdSoe4CRU4lxBGyn31EwWEYhfIYJDOcLDtHC3hmLWERriZA0/rFJO2CfCWOKmuSJ3PqH1t+mgAmrVPllCloDYUPEkn4sNVE2pRgKNxJFLWG0ytz5EgZ/YFwBxXgKmJKHY9MG9JmGFdfGY4+r11AeJaQQRXHVFagVUGBn9CaTMWG0WZ9xfUSxureU48hKrlF5lBEHHM34gRK8kcuP4SFkFVc6KJVwxQc/8kwrKn5Wu6kzUqxRgsv3UIm5oC49AdTrnyM3/v8iQL4fWFNjr54MOu/Nru+9jCZIEVv/0IQCfXlTlIqp11We2jKzcGin6mM/5nq2enVScr1OfQxPjjVoJuEAL5m3DADh14/cT5fh2Fm4N9DP0hlYWTjat1n0QhNRD+LbrSIzxSDHRYen0cxFeFqUsznZNDh24Ja4CV6IU4ly8y7P00jy2etjl18e2bH9k/N7Nj2gXl8/6H+jTX/I/8O6EEVQ4NLlSFV9mAg7Jjw0lKZjT0eFfy+Aflurls12p7OOdoTuWIADa91Po24VRyHe6Bz/23TcuobqJmHvBAwerkW4L5diW2AzS4b6ee2fHBfiaO6udaFi3pmHlJrojv2hkeJC9jU4xWo37azQuny2IlkRTnuJSlVSlcV+cMqOEfjq/H86Ro4T/g5TnJPDAqyi6xZ3DtrfQh3tKuObJAEhVdwE/QdAK5shnnYj0FekxbXoJgksYKx9Edb1hsYjrPsUqDBSATQs6CRXhdjooGGlw25JJI00iv4vv5g+HUF6S5PxWnq9Vdy8n2BBmyREvDjbaR/IvLXe3z3eaiG/yb65rvI1NTq4QIf8hsJGnhAI2FXY6/YoHgotQ3ebR2aCGxipX0vtgvy3jZowX6i7w2JXHo3nIV06EFgE6SxUjNSNDd/J+6DA0q7v611iGbZpRcw6yLJSj9lJtaoTj/AJi3rqF8gLaEvQIm2NAtnu+ygKapxYW+c4aChV+E6CscquO+B6z04bsCxBp7Xw8GUFvvZ4LDbHWyBLLZ0ll9JqXO2bBfnenS+Vjw5O70TaWcZuYHoyal3LDQR1K8NPjSoJatFHIwXXTYFCS9af7pmDntNwMbSavUJpLPUaXWfoBywVGc2A1U/3KJ333ORWTQh/ziblFu1qds536D0XEf9brnOD3d5pqZL0dR0MTE1LceUD6WSjr8PyHbFZth+9cKHk9JrblhzapMHlfNgvYhTvoS0nNqL+q5IS2KV6rhfEd2N9SvkSl9CTvuuyF4NXhKQwdWqCCazS22asnhfHQe8jOTyJeB/kkMTp/L/PNNfRMDvEzmpDFDh9izF7lS3Ilo0QRsAQAIENK5jEkGbrCUpCBqkIGiTCJrTcMJy2gi9WYBfsYPUtskICC3nADxOXhZp99fKnj0lVr3GVqGt9UvbrqGzXmk35G6QQ/oxlKS1+9E+YPof86eaQaw8AIBDS6w9DXgTVbaTH5oAoYlatEiVIqBIXWUtupREqEhSUFqT1jau0FJ52M3rog+XiWVXWoppuw13B5EHPndF5FtdH+6iovy6QklLpeXBQmFRAgUVxOdAirY+HhTwY945985MJm1oWPZ9+tHcO3fu35xz7/k/khSQJvCPBaTh/hup1/54HrgjfOn+0IydAekhqEaEHq6tLk/u3f8F13gOjih+VLkZUfNEsyyZeO1XsmTi304DQCitxeHfa0rXDe+vn9HA+xc7/gF4L0Q3cuDdn7z5j1wC/z/3iETyRfIzOqdsnBPsVT/trKZe96xop0vC2C0SJuL7pyUlxrRb7Gro1e3V78RCS7TbzN0TwtYVoavFs6P4k2srIp0oEAZ4BUyy56bC3wNAoqaQVsQd62a9dXN/N3ADaSKmm4TjeTh7D274faQwxV6Y6h+CSGVGQYi5REap4NgSDTY1qtikadXzvmb4bGP4jMjcxA/F+QwFyO9+OBumBPNZMmzC7f5b7U3+b+DRNWNzUwJsVr7/0hEJ/fsPf2fqIS+7V5WXJfX2729+XSMt+3+UkTH/GUtRZoh0lQVdjtp2a80HmHGUVJpRf7gEbm3JzA93jF1odGRVDQ9INmstXtGC+83qS/0qUuGKDojeyO3C1Lbqi6YKPy2PjSQLU3dUX+xX8Qwt/yzQLfFPlZEiBxxpZdYPDpcZ2kjSY2XBIsd1H3CzL0gSzLb2KQmVXopXDNv/T0Zo7p84+3/BZUGbHh6/IsmzucVNlyVpSThiWFJsJi8YA1WpnH8SfKT7z8ofyRwVnw2F74UUnPqB1M+ijbzgSiUu2Js95EDjGYOhKXDC9JHu4EmzLX6U457w85dQInpTWYFVWcH/XJKkeifOPlPKqkrzjym3iPM7FBgLVuKdNiA4HtVuC8wxM00jL6TBZZ6VVHEHfB1hgc3riSugZNJJF5VO5prrLXqpT81bjH/RiAT0QAqZSIpttRI/hCTZU+f3DyywccI8m7+LTIRKo30YP648RXwrIq8nRcEZWzBV/RS9Yl8ssNETxuz2kORAo1EsPROPyYqVn29tjcfPBkdek72gxe0rKQFOfdAlU2zATpRjik+3yKLG1ShqJHuCxRYxeNYkmwkqvoUtdShjQ8VzsKEaCfiG39F/6+m/NUz+ZhSWovRTXPoYzcPTTxGOKi6HBHUxrMmLEzdKWQ+taniHq/qlME3OR4TsKFoWkTANKp6yPbtkK4qVLNF44MSy3Q0veQvcxLh9DfxyYwaM3IgkZ4e2aGSsCnebY6cDLfxDpiQ7PYborBfoFRdHyqME65qxug69f/pgQMxcVP786emo/vrZ033Jn4+9ESt/XrA6zvfcMzKh/v9IsLizxYDRnhTNwCfUnEbiPUwszAkVFjQESEIbH+p4vk9cffdllr4lz9iShIZAcL+alVgp3hYXCrI5cZ1IF8BMC7UOyHvEEQAPfXh/KvNPHnXN+owkOLJulKam+QeRJIxxk/GWhGZjLUmagQWXbJRJZ3FNnLKG3ge4x6hd8Jng0kiRY87Ygi5zZsgLVFxB0AUXEJRTRGkrevgFvpoULBkXrBof6NbxLhhhMrVn38oZuOci9kC3EX4P5arnRe5D+wL4vWbx85ERgW5kcY0G83ORW9DGIB1tDB6WRg3j6udF+m29XFxhDrqmIE2bzZvg7A1MNWP6dkcX3A4AKjNkRJftqaL7F9+8odJSFpAk/hmFcLS4xdlfaUi0P23qRUtZEpBoXmDBb44jFKdep45Z/D1unwmtZCdgwKVW1rgm5B+cGYrzSlwr8+j9lyh+u6JeWRGFbleKW5yEQ7tS3eKA/wYwrEpjDBrqdyW4aB43e5Ax++4bypiRqnRa6zXnY21YrnWNRrrzfJdqa8YUZ1eFaRm/nRr7FOEbU5/2KTK9WYDSIhIGmEtF7Xwj/xOkV+wX+Lutm5NJm0x0etxIcZadkyQXkJzDVJLzsP2C/zaF3IwxWCgJps64KsmptlTmg/HLFpUPEDeel6TM3Q9hyboy1NM+zTcqob6LCiSyOX4uqRoXWGREwqve2eHPph5s+8VTxzXQd9cGBn0518QgdJDHjfkUtlSgMkHvjln+UpI35UIjDusfhjX38nmOGfyjjpm8yzGGn+xYyE90lPATHCP5B7FZNccPxWaj+bscd/MjHBn8MMckfqjjRf4WRyV/EzbhdHwZNrmDNzru889Aau81JCvhVr9eOu83ZyVpva6XDu3+UFy1Gtvvd0YltAdEDFCIqDsUIur9LorJS8IeKNYXm8U3upCqskSSgDBcAtBSZaxpX7BoQnjRi9aGtmBhxzKS22HPS6n818AiIBknA8konZRpFPEfJRlzUmEEJBm7gFps/M5gqEilNOPNxN85IcwnXdk5IVz1MswK2sDoGQfsRamVk4E1e5naKrJ8qIQxfpv+F+hZpwUe1nwGtVd2wmvw9ol4t2zm+ayKdP9PgV585KSG3MUTxr4LaMaxaLk6L4ZmzEnHzahIZ3rt+4SHgdEAMovmE5vOxH/QSW3I31/VbQMcwpUArwVvhrbArTDtttrJKOKiynF3XNoT36PkJ3A5eeZ64w1xac949H+8b19pzjyv7hceCO4i8euLlCl9in5IpP0fPHG9tH9OKoH/9zWeNhgayT6V9HctvoLQtvB3vc7tWP8w8rAR2NdAKMUNk8snNJLRJjjAaDu2vrZRCfJzPKPe/5VosgX7L68XrRJSYVPEnV8iHWBxBenTbIwS9XUfAShQtST+u+Eq+bGW3qnRT2ztKz6QnLfms+yNEgt5VOugMYGYi6njlIljLTyCMA8brluuo2orYGpWI/FbNalWstZjgiA7JYatwgdoQl+HpLIwPdXiEZ5INRNjar5b7uDFeh2XE9hpY80XNsrVfI0ORpqrGWnybL3sQU8JZ1VLqWPNZEXhq6vgWb7PM4t6lSZ/b+J2IKJ4yzlfPqubB8Q/Fp+gxWDdGqTCZ0Clr0iueZtSv2spabyO/l5Pf2OeW/G2ThPz8g3WbdPTiBheObYDxsB45TuT4n6uMYXIbW1xtk5/E3iMv/1IGQKzICyUYlNsLtCWkwSB15Y5tgeqLtBClUZTtU0GCjTokSb7j5CtfYVplRxqVTxfrE4M2IpqxPVfmWLs71+4SwM/oavDj2/mLGqL3wCMLVOjUzecbpKTLvtQ/x1pQwloQ4/Py77HcmzbKr4OvCPxpqvOzUC1YMOaYzQJIU17mg2skoI2OdGW2Gk7Jo3+Gyrl6xjUNcK/aLTNAE+Yg7E3Q3AEigMX6fD4Q8CRE7IySKK5kOZEAWkl7p4KSJ/CJIW6FXr0XhfGqy/J2WPZriL/xICtQIE1Y7cJSzKosTxPnRdi6vAjisdi6zA0VXA7DXPVdMEkL1/GgyALp/XGk7TNTPq7FFve8TLFRL2KiY8gvYXYuEmDje/2jY1na2KxsVyGPHHkr3ScWshZ+o0k/9xbrcMchvhf
*/