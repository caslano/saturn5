/*
 [auto_generated]
 boost/numeric/odeint/util/copy.hpp

 [begin_description]
 Copy abstraction for the usage in the steppers.
 [end_description]

 Copyright 2011-2012 Karsten Ahnert
 Copyright 2011-2012 Mario Mulansky

 Distributed under the Boost Software License, Version 1.0.
 (See accompanying file LICENSE_1_0.txt or
 copy at http://www.boost.org/LICENSE_1_0.txt)
 */


#ifndef BOOST_NUMERIC_ODEINT_UTIL_COPY_HPP_INCLUDED
#define BOOST_NUMERIC_ODEINT_UTIL_COPY_HPP_INCLUDED


#include <boost/range/algorithm/copy.hpp>

#include <boost/utility/enable_if.hpp>

#include <boost/numeric/odeint/util/detail/is_range.hpp>

namespace boost {
namespace numeric {
namespace odeint {

namespace detail {

    template< class Container1 , class Container2 >
    void do_copying( const Container1 &from , Container2 &to , boost::mpl::true_ )
    {
        boost::range::copy( from , boost::begin( to ) );
    }

    template< class Container1 , class Container2 >
    void do_copying( const Container1 &from , Container2 &to , boost::mpl::false_ )
    {
        to = from;
    }

} // namespace detail



/*
 * Default implementation of the copy operation used the assign operator
 * gsl_vector must copied differently
 */
template< class Container1 , class Container2 , class Enabler = void >
struct copy_impl_sfinae
{
    static void copy( const Container1 &from , Container2 &to )
    {
        typedef typename boost::numeric::odeint::detail::is_range< Container1 >::type is_range_type;
        detail::do_copying( from , to , is_range_type() );
    }

};

template< class Container1, class Container2 >
struct copy_impl
{
    static void copy( const Container1 &from , Container2 &to )
    {
        copy_impl_sfinae< Container1 , Container2 >::copy( from , to );
    }
};

// ToDo: allow also to copy INTO a range, not only from a range! Needs "const Container2 &to"
template< class Container1 , class Container2 >
void copy( const Container1 &from , Container2 &to )
{
    copy_impl< Container1 , Container2 >::copy( from , to );
}


} // namespace odeint
} // namespace numeric
} // namespace boost


#endif // BOOST_NUMERIC_ODEINT_UTIL_COPY_HPP_INCLUDED

/* copy.hpp
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
*/