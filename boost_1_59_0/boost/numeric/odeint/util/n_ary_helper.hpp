/*
 [auto_generated]
 boost/numeric/odeint/util/n_ary_helper.hpp

 Macros to generate scale_sumN and for_eachN functors.

 Copyright 2013 Karsten Ahnert
 Copyright 2013 Mario Mulansky
 Copyright 2013 Pascal Germroth

 Distributed under the Boost Software License, Version 1.0.
 (See accompanying file LICENSE_1_0.txt or
 copy at http://www.boost.org/LICENSE_1_0.txt)
 */

#ifndef BOOST_NUMERIC_ODEINT_UTIL_N_ARY_HELPER_HPP_INCLUDED
#define BOOST_NUMERIC_ODEINT_UTIL_N_ARY_HELPER_HPP_INCLUDED

#include <boost/preprocessor/repetition.hpp>

// like BOOST_PP_ENUM_SHIFTED but with a comma in front like _TRAILING
#define BOOST_ODEINT_ENUM_TRAILING_SHIFTED_PARAMS(count, param) \
    BOOST_PP_COMMA_IF(BOOST_PP_DEC(count)) \
    BOOST_PP_ENUM_SHIFTED_PARAMS(count, param)

#define BOOST_ODEINT_ENUM_TRAILING_SHIFTED_BINARY_PARAMS(count, p1, p2) \
    BOOST_PP_COMMA_IF(BOOST_PP_DEC(count)) \
    BOOST_PP_ENUM_SHIFTED_BINARY_PARAMS(count, p1, p2)

// like BOOST_PP_ENUM_SHIFTED_BINARY_PARAMS(n, p1, p2) but p2 is shifted left.
// generate "p1 ## 0 = p2, p1 ## 1 = p3 ## 0, p1 ## 2 = p3 ## 1"
#define BOOST_ODEINT_ENUM_LSHIFTED_BINARY_PARAMS(count, p1, p2, p3) \
    BOOST_PP_ENUM(count, BOOST_ODEINT_ENUM_LSHIFTED_BINARY_PARAMS_, (p1, p2, p3))
#define BOOST_ODEINT_ENUM_LSHIFTED_BINARY_PARAMS_(z, n, data) \
    BOOST_PP_CAT(BOOST_PP_TUPLE_ELEM(3, 0, data), n) \
    BOOST_PP_IF(n, \
        BOOST_PP_CAT(BOOST_PP_TUPLE_ELEM(3, 2, data), BOOST_PP_DEC(n)), \
        BOOST_PP_TUPLE_ELEM(3, 1, data))

// like BOOST_PP_ENUM_BINARY_PARAMS(n, p1, p2) but with statements.
// "p1 ## 0 p2 ## 0 ; p1 ## 1 p2 ## 1 ; ..."
#define BOOST_ODEINT_ENUM_BINARY_STATEMENTS(count, p1, p2) \
    BOOST_PP_REPEAT(count, BOOST_ODEINT_ENUM_BINARY_STATEMENTS_, (p1, p2))
#define BOOST_ODEINT_ENUM_BINARY_STATEMENTS_(z, n, data) \
    BOOST_PP_CAT(BOOST_PP_TUPLE_ELEM(2, 0, data), n) \
    BOOST_PP_CAT(BOOST_PP_TUPLE_ELEM(2, 1, data), n) ;

// like BOOST_PP_ENUM_BINARY_PARAMS(n, p1, p2) but p2 is in parens.
// "p1 ## 0 (p2 ## 0) , p1 ## 1 (p2 ## 1) , ..."
#define BOOST_ODEINT_ENUM_UNARY_CALLS(count, p1, p2) \
    BOOST_PP_ENUM(count, BOOST_ODEINT_ENUM_UNARY_CALLS_, (p1, p2))
#define BOOST_ODEINT_ENUM_SHIFTED_UNARY_CALLS(count, p1, p2) \
    BOOST_PP_ENUM_SHIFTED(count, BOOST_ODEINT_ENUM_UNARY_CALLS_, (p1, p2))
#define BOOST_ODEINT_ENUM_TRAILING_SHIFTED_UNARY_CALLS(count, p1, p2) \
    BOOST_PP_COMMA_IF(BOOST_PP_DEC(count)) \
    BOOST_PP_ENUM_SHIFTED(count, BOOST_ODEINT_ENUM_UNARY_CALLS_, (p1, p2))
#define BOOST_ODEINT_ENUM_UNARY_CALLS_(z, n, data) \
      BOOST_PP_CAT(BOOST_PP_TUPLE_ELEM(2, 0, data), n) \
    ( BOOST_PP_CAT(BOOST_PP_TUPLE_ELEM(2, 1, data), n) )


// maximum arity + 1 for scale_sum and for_each
#define BOOST_ODEINT_N_ARY_MAX 16


// generate scale_sum1 to scale_sumN, operator body generated by macro(N)
#define BOOST_ODEINT_GEN_SCALE_SUM(macro) \
    BOOST_PP_REPEAT_FROM_TO(1, BOOST_ODEINT_N_ARY_MAX, BOOST_ODEINT_GEN_SCALE_SUM_, macro)
#define BOOST_ODEINT_GEN_SCALE_SUM_(z, n, macro) \
    template< BOOST_ODEINT_ENUM_LSHIFTED_BINARY_PARAMS(n, class Fac, = double, = Fac) > \
    struct BOOST_PP_CAT(scale_sum, n) \
    { \
        BOOST_ODEINT_ENUM_BINARY_STATEMENTS(n, const Fac, m_alpha) \
        \
        BOOST_PP_CAT(scale_sum, n) \
        ( BOOST_PP_ENUM_BINARY_PARAMS(n, Fac, alpha) ) \
        : BOOST_ODEINT_ENUM_UNARY_CALLS(n, m_alpha, alpha) {} \
        \
        template< BOOST_PP_ENUM_PARAMS(BOOST_PP_INC(n), class T) > \
        void operator()( T0 &t0 \
            BOOST_ODEINT_ENUM_TRAILING_SHIFTED_BINARY_PARAMS(BOOST_PP_INC(n), const T, &t) \
        ) const \
        { macro(n) } \
        typedef void result_type; \
    };

// generate for_each1 to for_eachN, body generated by macro(N)
#define BOOST_ODEINT_GEN_FOR_EACH(macro) \
    BOOST_PP_REPEAT_FROM_TO(1, BOOST_ODEINT_N_ARY_MAX, BOOST_ODEINT_GEN_FOR_EACH_, macro)
#define BOOST_ODEINT_GEN_FOR_EACH_(z, n, macro) \
    template< BOOST_PP_ENUM_PARAMS(n, class S) , class Op > \
    static void for_each##n ( BOOST_PP_ENUM_BINARY_PARAMS(n, S, &s) , Op op ) \
    { macro(n) }


#endif

/* n_ary_helper.hpp
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
*/