/*
 [auto_generated]
 boost/numeric/odeint/algebra/algebra_dispatcher.hpp

 [begin_description]
 Algebra dispatcher to automatically chose suitable algebra.
 [end_description]

 Copyright 2013 Karsten Ahnert
 Copyright 2013 Mario Mulansky

 Distributed under the Boost Software License, Version 1.0.
 (See accompanying file LICENSE_1_0.txt or
 copy at http://www.boost.org/LICENSE_1_0.txt)
 */

#ifndef BOOST_NUMERIC_ODEINT_ALGEBRA_ALGEBRA_DISPATCHER_HPP_INCLUDED
#define BOOST_NUMERIC_ODEINT_ALGEBRA_ALGEBRA_DISPATCHER_HPP_INCLUDED

#include <boost/numeric/odeint/config.hpp>

#include <complex>
#include <boost/type_traits/is_floating_point.hpp>

#include <boost/numeric/ublas/vector.hpp>
#include <boost/numeric/ublas/matrix.hpp>

#include <boost/numeric/odeint/algebra/range_algebra.hpp>
#include <boost/numeric/odeint/algebra/array_algebra.hpp>
#include <boost/numeric/odeint/algebra/vector_space_algebra.hpp>

#include <boost/array.hpp>


namespace boost {
namespace numeric {
namespace odeint {
    
template< class StateType , class Enabler = void >
struct algebra_dispatcher_sfinae
{
    // range_algebra is the standard algebra
    typedef range_algebra algebra_type;
};

template< class StateType >
struct algebra_dispatcher : algebra_dispatcher_sfinae< StateType > { };

// specialize for array
template< class T , size_t N >
struct algebra_dispatcher< boost::array< T , N > >
{
    typedef array_algebra algebra_type;
};

//specialize for some integral types
template< typename T >
struct algebra_dispatcher_sfinae< T , typename boost::enable_if< typename boost::is_floating_point< T >::type >::type >
{
    typedef vector_space_algebra algebra_type;
};

template< typename T >
struct algebra_dispatcher< std::complex<T> >
{
    typedef vector_space_algebra algebra_type;
};

///* think about that again....
// specialize for ublas vector and matrix types
template< class T , class A >
struct algebra_dispatcher< boost::numeric::ublas::vector< T , A > >
{
    typedef vector_space_algebra algebra_type;
};

template< class T , class L , class A >
struct algebra_dispatcher< boost::numeric::ublas::matrix< T , L , A > >
{
    typedef vector_space_algebra algebra_type;
};
//*/

}
}
}

#ifdef BOOST_NUMERIC_ODEINT_CXX11

// c++11 mode: specialization for std::array if available

#include <array>

namespace boost {
namespace numeric {
namespace odeint {
    
// specialize for std::array
template< class T , size_t N >
struct algebra_dispatcher< std::array< T , N > >
{
    typedef array_algebra algebra_type;
};

} } }

#endif


#endif

/* algebra_dispatcher.hpp
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
*/