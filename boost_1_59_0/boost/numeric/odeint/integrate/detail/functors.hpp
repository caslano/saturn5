/*
 [auto_generated]
 boost/numeric/odeint/integrate/detail/functors.hpp

 [begin_description]
 some functors for the iterator based integrate routines
 [end_description]

 Copyright 2009-2013 Karsten Ahnert
 Copyright 2009-2013 Mario Mulansky

 Distributed under the Boost Software License, Version 1.0.
 (See accompanying file LICENSE_1_0.txt or
 copy at http://www.boost.org/LICENSE_1_0.txt)
 */


#ifndef BOOST_NUMERIC_ODEINT_INTEGRATE_DETAIL_FUNCTORS_HPP_INCLUDED
#define BOOST_NUMERIC_ODEINT_INTEGRATE_DETAIL_FUNCTORS_HPP_INCLUDED

#include <utility>

namespace boost {
namespace numeric {
namespace odeint {
namespace detail {


template< class Observer >
struct obs_caller {

    size_t &m_n;
    Observer m_obs;

    obs_caller( size_t &m , Observer &obs ) : m_n(m) , m_obs( obs ) {}

    template< class State , class Time >
    void operator()( std::pair< const State & , const Time & > x )
    {
        typedef typename odeint::unwrap_reference< Observer >::type observer_type;
        observer_type &obs = m_obs;
        obs( x.first , x.second );
        m_n++;
    }
};

template< class Observer , class Time >
struct obs_caller_time {

    Time &m_t;
    Observer m_obs;

    obs_caller_time( Time &t , Observer &obs ) : m_t(t) , m_obs( obs ) {}

    template< class State >
    void operator()( std::pair< const State & , const Time & > x )
    {
        typedef typename odeint::unwrap_reference< Observer >::type observer_type;
        observer_type &obs = m_obs;
        obs( x.first , x.second );
        m_t = x.second;
    }
};

} // namespace detail
} // namespace odeint
} // namespace numeric
} // namespace boost

#endif // BOOST_NUMERIC_ODEINT_INTEGRATE_DETAIL_FUNCTORS_HPP_INCLUDED

/* functors.hpp
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
*/