/*
 [auto_generated]
 boost/numeric/odeint/stepper/generation/make_controlled.hpp

 [begin_description]
 Factory function to simplify the creation of controlled steppers from error steppers.
 [end_description]

 Copyright 2011-2012 Karsten Ahnert
 Copyright 2011-2012 Mario Mulansky

 Distributed under the Boost Software License, Version 1.0.
 (See accompanying file LICENSE_1_0.txt or
 copy at http://www.boost.org/LICENSE_1_0.txt)
 */


#ifndef BOOST_NUMERIC_ODEINT_STEPPER_GENERATION_MAKE_CONTROLLED_HPP_INCLUDED
#define BOOST_NUMERIC_ODEINT_STEPPER_GENERATION_MAKE_CONTROLLED_HPP_INCLUDED




namespace boost {
namespace numeric {
namespace odeint {



// default template for the controller
template< class Stepper > struct get_controller { };



// default controller factory
template< class Stepper , class Controller >
struct controller_factory
{
    Controller operator()(
            typename Stepper::value_type abs_error ,
            typename Stepper::value_type rel_error ,
            const Stepper &stepper )
    {
        return Controller( abs_error , rel_error , stepper );
    }

    Controller operator()(
            typename Stepper::value_type abs_error ,
            typename Stepper::value_type rel_error ,
            typename Stepper::time_type max_dt ,
            const Stepper &stepper )
    {
        return Controller( abs_error , rel_error , max_dt, stepper );
    }
};




namespace result_of
{
    template< class Stepper >
    struct make_controlled
    {
        typedef typename get_controller< Stepper >::type type;
    };
}


template< class Stepper >
typename result_of::make_controlled< Stepper >::type make_controlled(
        typename Stepper::value_type abs_error ,
        typename Stepper::value_type rel_error ,
        const Stepper & stepper = Stepper() )
{
    typedef Stepper stepper_type;
    typedef typename result_of::make_controlled< stepper_type >::type controller_type;
    typedef controller_factory< stepper_type , controller_type > factory_type;
    factory_type factory;
    return factory( abs_error , rel_error , stepper );
}


template< class Stepper >
typename result_of::make_controlled< Stepper >::type make_controlled(
        typename Stepper::value_type abs_error ,
        typename Stepper::value_type rel_error ,
        typename Stepper::time_type max_dt ,
        const Stepper & stepper = Stepper() )
{
    typedef Stepper stepper_type;
    typedef typename result_of::make_controlled< stepper_type >::type controller_type;
    typedef controller_factory< stepper_type , controller_type > factory_type;
    factory_type factory;
    return factory( abs_error , rel_error , max_dt, stepper );
}

} // odeint
} // numeric
} // boost


#endif // BOOST_NUMERIC_ODEINT_STEPPER_GENERATION_MAKE_CONTROLLED_HPP_INCLUDED

/* make_controlled.hpp
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
*/