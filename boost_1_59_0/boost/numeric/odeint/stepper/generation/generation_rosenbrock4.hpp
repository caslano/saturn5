/*
 [auto_generated]
 boost/numeric/odeint/stepper/generation/generation_rosenbrock4.hpp

 [begin_description]
 Enable the factory functions for the controller and the dense output of the Rosenbrock4 method.
 [end_description]

 Copyright 2011-2012 Karsten Ahnert
 Copyright 2011-2012 Mario Mulansky

 Distributed under the Boost Software License, Version 1.0.
 (See accompanying file LICENSE_1_0.txt or
 copy at http://www.boost.org/LICENSE_1_0.txt)
 */


#ifndef BOOST_NUMERIC_ODEINT_STEPPER_GENERATION_GENERATION_ROSENBROCK4_HPP_INCLUDED
#define BOOST_NUMERIC_ODEINT_STEPPER_GENERATION_GENERATION_ROSENBROCK4_HPP_INCLUDED

#include <boost/numeric/odeint/stepper/rosenbrock4.hpp>
#include <boost/numeric/odeint/stepper/rosenbrock4_controller.hpp>
#include <boost/numeric/odeint/stepper/rosenbrock4_dense_output.hpp>


namespace boost {
namespace numeric {
namespace odeint {


template< class Value , class Coefficients , class Resize >
struct get_controller< rosenbrock4< Value , Coefficients , Resize > >
{
    typedef rosenbrock4< Value , Coefficients , Resize > stepper_type;
    typedef rosenbrock4_controller< stepper_type > type;
};



template< class Value , class Coefficients , class Resize >
struct get_dense_output< rosenbrock4< Value , Coefficients , Resize > >
{
    typedef rosenbrock4< Value , Coefficients , Resize > stepper_type;
    typedef rosenbrock4_controller< stepper_type > controller_type;
    typedef rosenbrock4_dense_output< controller_type > type;
};



// controller factory for controlled_runge_kutta
template< class Stepper >
struct dense_output_factory< Stepper , rosenbrock4_dense_output< rosenbrock4_controller< Stepper > > >
{
    typedef Stepper stepper_type;
    typedef rosenbrock4_controller< stepper_type > controller_type;
    typedef typename stepper_type::value_type value_type;
    typedef typename stepper_type::time_type time_type;
    typedef rosenbrock4_dense_output< controller_type > dense_output_type;

    dense_output_type operator()( value_type abs_error , value_type rel_error , const stepper_type &stepper )
    {
        return dense_output_type( controller_type( abs_error , rel_error , stepper ) );
    }

    dense_output_type operator()( value_type abs_error , value_type rel_error ,
                                  time_type max_dt, const stepper_type &stepper )
    {
        return dense_output_type( controller_type( abs_error , rel_error , max_dt , stepper ) );
    }
};



} // odeint
} // numeric
} // boost


#endif // BOOST_NUMERIC_ODEINT_STEPPER_GENERATION_GENERATION_ROSENBROCK4_HPP_INCLUDED

/* generation_rosenbrock4.hpp
QnmJa9hqh3PPajsrzinovHCeGLbCjmuiF7pQnwfomBHD1Cw84hc68Ewe1bX1hKKi7t8b5remPZhFDndCmTzIYKdNL+gsdDifa2Etk/qTuOp3nytv4m0MsczdzlREzlSc3Zz9f0/KqchrGGxScnbwSqE48xKT9EiNgn8qBrrpOfimFrsu53jLFN93tYsVS5GLyWCWV6hXwFBFLmYEb61pD111Zpow/VXI3zec2OtaIxetoVlj338wqn9P6Yt7JLbYUVYwXBPd/A/+muHKHxUOhn/AFtsBqWn2vTjaFtbB2lDbvt+1JjhjTSgves6W0ZmwRc9lRPttUW7LaM+I0v9O8Yvq7B8JtXXmG01p5s8QbRUXDm76uaEewP9dTaOngCNE+7997CLQb0og16uGjxoRhqPPXwg3owuc0cilDGfdDbDiIpfszqf/Bgmf4/zSKNEfQCJgsCgvahZdA3gMKO79zj3lUa0UcGqRWt4htoNuSKEAbwecZim6oJ71EnBiHofqwYg2Z2QX7ne+FlUefKjfDlymswmWX063nNPVzu8hXQgYFOjoCRVZ0wHYuJDwFUhQZY4uHrsWyvud9d+D5Qt41hNlI849F93H4jKGLLU4t34DEmzhk0weWnFn+53dh+RsixruUcO9kRHboz9Ozqtp+5MKIDm3erK3rclI3Od8M2ubcz3riPHM9bFz2TTgOOTwf6svW5tryWhP3AmZ1rO29bH+GZDSDllxTrAGJ00S/IOMiext/oxtTii17UGrNZRjuwSHT01n0EfOSCj2xWBN5+ZiDPEzCNsNSPSt6HCnsMWpvYH0IBxVJXZmf/IuOTuUAxCdc911IpQNCPCuVmf1t4liHCmCegrlwU37TwPGanfu8Qycjn3Q/2Gvs+kvzj0hPnxwWfOWqqqqx751od92IvZpFjsc67/Odpg+Xviz7ZSzKZQNGfsw6YNY4jrbB6kk/NQS49fZWhL3//+U3nKR7DVsVe3JLZ/pj0eSwogjQwK+bujbkU9tj27Eh+S8hi6YD+D1tmZs/a5167czEt/Dlxn4sgSnB86QESi6/oYOQOwHRvEx9u+Z6284tN7Wsd7WmfjbcTlG0nIwuQe2E+SDwYLf9bYT61UXC43CwnEfW+jJcda/R078u1h5BwxtVyGsrbpf46fw0TNdLHQSfvz2slKgOB+alYrgfL/YaS7Lma4zXTxYi3Efqj5SLf8K/4/C/xD8vw66tRj+Xwn/M/+kpvE3sYJ2Ms8BBgoOeYwqELdEEe8VOWYRvZA7du7HrZjS/8eHhpJmeus/TP4o/uvJz42/GtlsB36XZ0YkDNHkUAIZCp/2FGlr34f8J6DR/3kSie9Q5jqMH39GzsFoIx5Jx3EYePv1z5JJg3DNsYyv32UJFbDi3IBL0VbneLn3KSTKc9kJW+dKbVnHUOUcXf+BlblQw6PYFeGulRuBEXDRIfK1GsivOGBgHPrQACG0GkPqJovR6EuFYo4p+ufVA8ZqZL4wSs6Gfv/HS+iYdNHCYnsol5U5gKuHr//94wtJHApo8EC1RMrbdwvXDMjKltlR+T5nGzZdZlft2x6MRO3jHfal6AESp+Ve6GCnd1mD32X3SiieXgJrIfI4DHI1uTmDXe9YuNTxyOMoZJj/ZM1w8DogKv08y/8RXnbBSeXnn5V9lGSPoIVBHxxxsAgdhUsdPzmWsiWHWj/BwUHPRAUMi2EX+cEyqsLnKPHzZqzCg6IIkqCO8I8vJZOrmW9EdYWOjzNKJ/8P3c9I6fpa6pYoqWlBc6TWlWbSMtF+R8J7AHRUULXxLcuiQuCXQ/kwHgErEA5FsE9YPV5ZID2zDN+6tNpq4dz5a4nbF92N2RelZd+O66rElL1uTJqAlNJcdAPUHXSU6lkCmfD3SjKomOT+AlZuGakHRUbswSsVjGOF6zfvadIDktCWZ8l81GFE/7O1BwVkmSKpyL4uncnV/a/97ovYJ1TPQvsE19iFWdxK1gcr7kLrA4fpusyeeo5P63Fiqai4uUHqjb8E5zcjRUoYgyxFsCMiCzlBr1dNd2x82xzLZSwYaL3eZ7bXK3eQgAIvHti9uX68/BhAStQnlZSyY6q8l++4zWLRls7VzRHEZQe6p0cn1XIvrur9qhwVKkwaPHv6gMFVfT2w4tALMdeVh8vGFOHnA3JhI1rtbtGnq2Gc4Y+LhN1ielV5XyIrLu+j4ax9EX+dM1FRUkHxleppDiSNYRN3wXIzUzYIETpQpNyN7rSHYPschVPSLQ9+G7C5RkqjqgfYpJOoDC1azUYqyCta1Vu6Wm9JPqqIeQokVV+z6tmtC+t9zXgXgVcRrJ68YZTmoucsXIqq3CyaSdGfS3P1LrEmrLyMhXaThcCxcaEPoRIFKllAkox9CJhpOKB7BOq9uQgqbQt5L30RpWjGDCnaTTvHbgWa868aLy8wR8QaLTUMPIypeb4KCtd3IbNUj/Jr2H77p78AHXIfOIo4rF3MmurpQX+O4T7VwwtjNIPwxwWIDcERM9iVsAGhp49ptnn2Tk6YvZM4e0eSnQXtkfglY6IGVA/ZxXhGoO4rRRMwKktToyKqLtSrhuUZSG0sGlL/Brxh6QQWxh0eZLVoIOYO99rCvHAknAGs18wN1wH2uF5bblUqXiCZbwBtMvhtTyAP0SUGONUjxKlxMcSHGnV99fH2MkLZVYiAYWTrUSzErvUqKFCtyL7Vqoh+x+UBJFCBBIzLQ69hZ30jOsw/w8slulDG82jVPHJdJaO+mTG/KxvHpKS6fEN7k9bccHAmHe2oLJ//uGQRoYo36ZzR9Y+TaQv06ktjWu1XsDVTycrG/InMh0VE57CLqBSTV5G4FdPYSnRZkuXl6JzvO60T7S3+aKJPPI99rr3F7Ne/gD0bdq7iW2hotkgVhm2NhmHbwwAT/8MmYCBr8dst9S/piJi8I+6jBHzFBHXnVtKUwCMJ0bO68xl6r7OmTOFSShla/Q7Tc6Pp+UUUDx+HWaJYyiIfRpKM1+IdLEIZr8XoxffcjHoa0ZRmg569cfyH5wgGPDYL1j8PT3giFhSs1zOVVqyAHgZ+oNUj1HwxUFelFSO/grX8sFaPgPPb4FMAWseLcWyTZ23UI6cj2zwdJ56OPNbG34XhSGQAGqez73M82Bj+SbfEnqPLzmMpu1Bya3RoEvoI5vPV17/IeYmzxmp3YU9RQcdBh8Pmb9QknVu7UTpxYBfddRynI+FlhFVq1uzNyIqmHMstF7k2HWb1dJKb08QsUbhPGa1r9VG/zzSx4vk503OdKGLTz+66O/HsrhYfM/SPj9LH1Ppq3opmh40WXQXmla3m4/mjxycxMOT3PGbYa1hmT8TXSjq+9hsQGrZCbzxBIu+CpCb3oD1hj0kDd78ajqrhg2q4zbAt7GvOEbb2JOwfAewfaRlQVN+QcQRsB2AMIi1OJj85FvP6LYwLfB8HfH9v6uwESgHwfXgvK6xw2VFtYqBEjGogpa+1HFF8B2oRHMDRqUBKsSwSG8C8qmeogq5LqQxdl4lCTyE+FMOJZUcENShC1KWOcBOS1psHfCsm2GjeOAysQCnIAAFOVwUSn2V4cESiA3rzjdT8kF7o54SNxeSiq9QROIkjMSeqce8DKmQhrbbNq3GNctMapRu77S8T5NW0UTzNXia9rdnfLhP2bL5mbVWGk/n2LdeWZTihKqhQX7uvk1b3fiQpyFhRbnPLUbTWk/e5PfvZ7CBggMBXFG9B0u9HNqaqEjH9XpiPtMMRK+lB4Y4a7lDDJ9VwF1uEK6Ak+T5ee2RAvtvRb2oX0jml8BHOat9JsQHdng637+iKyqsL6TXsZAdow9mfAto4K+Hg9Y8idZzHwjzw5YDFfREmFf4cjvy30x/pz/FCfbPnoZQzA+DbC2xm5ECUlILagtMDFr4ASieuDgCf9yhes8HIOyxkXdWwCTH5wp00qvO1lUDmV/6skF7DTAwok15gW/BYLSTkBrzbBuj/UpFp0/HUKXlDw9T20naz/c/8qSSQrmstFuO4FhJIIukNlO9Iof94bY5ujSSOFUQKhF01T5RwB1HX+IEPoEosyr/QqxWQyCvguZcpkurrY3C6ejhTcjCmkFZPRta+AX4OShwqrpwsuOLY+fr9v5j4/59c7v4n8T8T7RceSqdfFDt6RPW86A08UCIEg5r8IuKZpy8QFYKGvP/vZ+MMB9LP+0yTPUX5ZeHJ/mw8PDA/q9/4nPP/IrmmrsgTqpX85p/ohxs6q/tf5ZH43J4+AIBDS629D3xT5dU4njQpBBpIgIIVilRBBeoUKThqwRUhpU5TblKSOKXFbYhddI5BMnEvhXZpoZeHi7iBunfo2ERfnOyVd2ItitgAa6swKIJQLNOqVW9tNwsiDVh7v+ec597kpk2B/T4/+LS997nP3/M8z3nOOc/5k0QYoUEehjRTJ5xs57kkoLNKc1iNnhH5xFKEF83RHX0nrA+8DzkzoMyOTpUL0AeljmVmT+ziJ6GcOxR69jRdn6+t4ESc+BTyB/Ka0ZD2xHo1XxUZD9gJDbMGtIiofC9gcrcnl8zCk7ptIFaDyFZ6Ag8skRQ9UIIsyD9/TVbY6/StwCg+QQ+aezoJ3aonDBWtu6jl8H244bL+pjWf39ynYSxgOncK0cHVrW7izp559GZ68djdLoAY+TsUOAAxMCW+W+P8H9JJOZT7QGSd2gg6+nOHaI3d38orlpIJ5scRRcmqLd7f934mtZc9TpEd6XEr7Oo1reNwk7aM49u1UgmYK5uD4/EEEFRs6zmXCf0lplF8Sh5HlozjKOsAcS++VzbD03OYFsU1r2/UKHK6D0lFCknKU+pnk98+fksfigx8bJytumxaBAPFVk6EP8xhJe0x0diejCZyw6S874pDkeTH0iHDTMpg5xlmm1G+CK/q08Z/dYmGC/DTAz8Go9FoSEoyDIUSY3U/Q9WfPvCJ4/9UToUg4xOymvmpgAojKaS/ibDiMlxb6AKuDU8qK7KGP04WZ97Kv7JSC74uuNXM3/Fl5a0W9hS+IGjDnyQL4sKpVhXC1JQ/ieIt4N3WYmR5n2odx8MFulU6BVXSWzGSuMuNjNDzFGz2eCZw97xRTxO2M/dWe6YHWDtqtwU6MSWVeWQ44DGouFtA++ufYUnqC3Mez3SeA8YOOiTeMzWN15TpiPCa0kmcaaS6or45Tm/Q3P/QbLP9ON/10UTubzAOnn4D/88uKCPvHY4epUVHa/YfsdZVi4EmQxN6C3sax0tH/OO7Dfr1tzYBdLjk5RGoDA5UYHxavQJk7+Yi6AxIDjnkjDk51MbKP4bepvWtusy3bfgSscRj9nYTnKeqxVZBBOsvFFBIeRfKt0dNgkWfZ2YeyyTYvXndkvOcq9CNFzyT8XOBheV1TgLYPYG9Y17rJJTtqASEJ4Jqr03M0QkkQKMbd9BRNyBuZeQO6Hto1TlDYAj5duEsZvs8JM7U4ZgF1Ap2tGrjYRQ3F4eETKlaAu9DS1CCWsg1PeDPNiKM5NxQXYbokHPW4oht669B6S1BVhU1+W2IW/AODzlecgUGjRUKALZ8eCtkY7Ep5Rgfl1fzqOBpdUNazEzu5HpNolITiKfP2ezA/t76InODqC/yDLkSGsuIA4UjaYQgP+EhVXnOlHKvnVdsj1y2aoUh6ETL4VcetXLd9TRBZ2j88qPIdJRRfKNPFUUI1af7MPdHj1u5bXKQ/mpsyNJHE5gZmw1R/yahH5jZmaCDzUvNycsIzirbu41iLVzPRrHfoF8RH9Di8FiGj+hmH18q9C9VJE6hV71MgftbD1rO59ntPv930qp0/3fslC8wC9YDQF6xKQUZXSES+8FYgqllb75ADaewvDQUUqFetl/xKz6enyS+ZgMbS4WPUXH++Zj6qY9+Eg0kMKAmI8Ng2G+rLn8RNZWbxtSGWjqTKe1QvD012xhA4u2T2Pwu9lsxqNdGdESArng/6SVv9qRDqbKNBADYDWnwk+rGk1H1zQ+pSqOqSMjl05BIl/4l6MoeZdVWAU2W5P9Fo5Y1byFWKo7Ke2C9bH/1CuxP/vEwl4qUaVKRLbB05bv/qSjiczuJVt2h+sPZaawi5q4qb4X4HMJefK6GMmw3cOuR+jXb+IIFUhZFbtdTqJfnKCpncUB8bovBYEhsYaLay7x6BfYl2D1pw45YGHKVu756fLUS45/vWhq3cBP458H7i9kBdlcGMP8pOtFWdH3jaRfblBddvTaltnUz5F+4SQHvqpgC3l9dqsrfFjLn2MKdAVhtm2uraJp0Cnl6f1f6CPfdXqlSxhDy7Ew9PaQSH3FPKrocDCwLUWj75GU/w7C0kUGBnFDkhsBtocjEwK2hyPWBm0KRGwM3hiLDg/ncpw93YvNLXJJCBuqUGUyGkhvx/qQ9g7uv4DnmY458nsPIc6jWmCpF//XaRBS9Tv8SI87Cmkx9WL03ie6HpId7K9IhAlhKu0NpLO7lL2L6AuiPzz8IjscTSzDYHzwekY/DoP03UMqKMf6J/GG4/3r+MMh/o5b5Bsj8Pz2og0XTXob+PyzyahgdtJNV23vHq/GRdl0unmptdjlOZsDaVa4hn8CPAA+en2e3B+CMAiK4Y8EaUmbo5icJUsHykQetdBkyH3DxY+l4fkz7NUdQXo6gMPCeavzEK5B/mFGtJMK8+v7O2HVZf96nsmp3Yy+zQ9hvW8UfcEEz7DsPl4kUqGBkefbt9kDyG6j1XPbmHlrXKaGGXFL3EfPsgIaNQSs7KE9DXzoRYzD5DVQygmQzlELqFS9xDYCmfW6/UWDUmCB/XgADGqjkZbAR7DfI1oQOpHlRtkMIOJEAMQZBjvyNAMfAFL8NalZGLiQdmzTBB/BLRQRvV9O8kObmMG3bGhsg+eTQlRXUw4HKGnTTM2UxIotOqMel1YPJQyCZX/jFsiZDmu5gwUlVe6SVOvlTKxIlRjVH+3C63/abJW86BrvYhaSQCg6CRd+pn39NtXJ5/+Dc/i2bkG/gBpH+wvbqLbaP11zVqoneB+ww9LoPSPtp7/uA4T/9z+8DcL8Pf0h//invAROmP9+BHiZ947eI+qz4I6FUWnpBP1011a3BN6OGmV7DPYSeWGdl1eKFo6qBjI71Nz1Iir7Ir0MiojN/gZuWUmTct2TFaSfGlNBYHEAWqRrNLUBeAvkNNCJ6R6h3tHCN5lau0SxHNZrvWJJYo1mnP03jCSxXxxLQj8WgjaVtcb9jaVh8ubFk9DeWmGPYRPaovc+XslILaiIHrPysxn/o2wmfG7nHOtZQ/jEcE8DW4e/ALdxj2KDQBsyT1H7DS+T9ZxxrDH0yqOzioMBI1hD62FR2wRRI2T4gOJDnM7LG8k9QdbL8Iv4OXPUS3sIF4Y8lVpmlXc1tfsmQEUu2a8kZXWuQ0qBvN6vnYoJTcYR2Kg4u38DHlJRoS8RpfavHWnp53LH2n57Hj2otPwi1lxMQFeUrRdVWd9WteYFHUBDkf/+EtNVn0j03vH/4E5KQkqL3JGPUtgP7vN0YGMhLGrcnBaJjssOq5Z1+qEyTXUbxwbqGMpqCIAbHvQ1Du94JZa8Jy/ZYbQZIuSnWyfYM+JQel6NXewlg6CUYqs4FyaYhgf5mya4roD9d33D751qN/kTNBvnNo3DQk20z3jHHWTaLzx0i
*/