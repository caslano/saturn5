/*
 [auto_generated]
 boost/numeric/odeint/stepper/generation/generation_dense_output_runge_kutta.hpp

 [begin_description]
 Specialization of the controller factory for the dense_output_runge_kutta class.
 [end_description]

 Copyright 2011-2012 Karsten Ahnert
 Copyright 2011-2012 Mario Mulansky

 Distributed under the Boost Software License, Version 1.0.
 (See accompanying file LICENSE_1_0.txt or
 copy at http://www.boost.org/LICENSE_1_0.txt)
 */


#ifndef BOOST_NUMERIC_ODEINT_STEPPER_GENERATION_GENERATION_DENSE_OUTPUT_RUNGE_KUTTA_HPP_INCLUDED
#define BOOST_NUMERIC_ODEINT_STEPPER_GENERATION_GENERATION_DENSE_OUTPUT_RUNGE_KUTTA_HPP_INCLUDED

#include <boost/numeric/odeint/stepper/controlled_runge_kutta.hpp>
#include <boost/numeric/odeint/stepper/dense_output_runge_kutta.hpp>
#include <boost/numeric/odeint/stepper/generation/make_dense_output.hpp>

namespace boost {
namespace numeric {
namespace odeint {

// controller factory for controlled_runge_kutta
template< class Stepper >
struct dense_output_factory< Stepper , dense_output_runge_kutta< controlled_runge_kutta< Stepper > > >
{
    typedef Stepper stepper_type;
    typedef controlled_runge_kutta< stepper_type > controller_type;
    typedef typename controller_type::error_checker_type error_checker_type;
    typedef typename controller_type::step_adjuster_type step_adjuster_type;
    typedef typename stepper_type::value_type value_type;
    typedef typename stepper_type::time_type time_type;
    typedef dense_output_runge_kutta< controller_type > dense_output_type;

    dense_output_type operator()( value_type abs_error , value_type rel_error , const stepper_type &stepper )
    {
        return dense_output_type( controller_type( error_checker_type( abs_error , rel_error ) ,
                                                   step_adjuster_type() , stepper ) );
    }

    dense_output_type operator()( value_type abs_error , value_type rel_error ,
                                  time_type max_dt , const stepper_type &stepper )
    {
        return dense_output_type(
                controller_type( error_checker_type( abs_error , rel_error) ,
                                 step_adjuster_type( max_dt ) , stepper ) );
    }
};





} // odeint
} // numeric
} // boost


#endif // BOOST_NUMERIC_ODEINT_STEPPER_GENERATION_GENERATION_DENSE_OUTPUT_RUNGE_KUTTA_HPP_INCLUDED

/* generation_dense_output_runge_kutta.hpp
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
*/