/*
 boost/numeric/odeint/stepper/detail/generation_controlled_adams_bashforth_moulton.hpp

 [begin_description]
 Spezialization of the generation functions for creation of the controlled adams bashforth moulton stepper.
 [end_description]

 Copyright 2017 Valentin Noah Hartmann

 Distributed under the Boost Software License, Version 1.0.
 (See accompanying file LICENSE_1_0.txt or
 copy at http://www.boost.org/LICENSE_1_0.txt)
 */

#ifndef GENERATION_CONTROLLED_ADAMS_BASHFORTH_MOULTON_HPP_INCLUDED
#define GENERATION_CONTROLLED_ADAMS_BASHFORTH_MOULTON_HPP_INCLUDED

#include <boost/numeric/odeint/stepper/adaptive_adams_bashforth_moulton.hpp>
#include <boost/numeric/odeint/stepper/controlled_adams_bashforth_moulton.hpp>
#include <boost/numeric/odeint/stepper/generation/make_controlled.hpp>

namespace boost {
namespace numeric {
namespace odeint {

template< size_t Steps, class State , class Value , class Deriv , class Time , class Algebra , class Operations , class Resizer >
struct get_controller< adaptive_adams_bashforth_moulton< Steps, State , Value , Deriv , Time , Algebra , Operations , Resizer > >
{
	typedef adaptive_adams_bashforth_moulton<Steps, State, Value, Deriv, Time, Algebra, Operations, Resizer> stepper_type;
    typedef controlled_adams_bashforth_moulton< stepper_type > type;
};

// controller factory for controlled_adams_bashforth_moulton
template< class Stepper >
struct controller_factory< Stepper , controlled_adams_bashforth_moulton< Stepper > >
{
    typedef Stepper stepper_type;
    typedef controlled_adams_bashforth_moulton< stepper_type > controller_type;
    typedef typename controller_type::step_adjuster_type step_adjuster_type;
    typedef typename stepper_type::value_type value_type;
    typedef typename stepper_type::value_type time_type;

    controller_type operator()( value_type abs_error , value_type rel_error , const stepper_type &stepper )
    {
        return controller_type(step_adjuster_type(abs_error, rel_error));
    }

    controller_type operator()( value_type abs_error , value_type rel_error ,
                                time_type max_dt, const stepper_type &stepper )
    {
        return controller_type( step_adjuster_type(abs_error, rel_error, max_dt));
    }
};

}
}
}

#endif
/* generation_controlled_adams_bashforth_moulton.hpp
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
*/