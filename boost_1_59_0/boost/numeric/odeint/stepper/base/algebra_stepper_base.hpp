/*
 [auto_generated]
 boost/numeric/odeint/stepper/base/algebra_stepper_base.hpp

 [begin_description]
 Base class for all steppers with an algebra and operations.
 [end_description]

 Copyright 2012-2013 Karsten Ahnert
 Copyright 2012 Mario Mulansky

 Distributed under the Boost Software License, Version 1.0.
 (See accompanying file LICENSE_1_0.txt or
 copy at http://www.boost.org/LICENSE_1_0.txt)
 */


#ifndef BOOST_NUMERIC_ODEINT_STEPPER_BASE_ALGEBRA_STEPPER_BASE_HPP_INCLUDED
#define BOOST_NUMERIC_ODEINT_STEPPER_BASE_ALGEBRA_STEPPER_BASE_HPP_INCLUDED


namespace boost {
namespace numeric {
namespace odeint {

template< class Algebra , class Operations >
class algebra_stepper_base
{
public:

    typedef Algebra algebra_type;
    typedef Operations operations_type;

    algebra_stepper_base( const algebra_type &algebra = algebra_type() )
    : m_algebra( algebra ) { }

    algebra_type& algebra()
    {
        return m_algebra;
    }

    const algebra_type& algebra() const
    {
        return m_algebra;
    }

protected:

    algebra_type m_algebra;
};


/******* DOXYGEN *******/

/**
 * \class algebra_stepper_base
 * \brief Base class for all steppers with algebra and operations.
 *
 * This class serves a base class for all steppers with algebra and operations. It holds the
 * algebra and provides access to the algebra.  The operations are not instantiated, since they are 
 * static classes inside the operations class.
 *
 * \tparam Algebra The type of the algebra. Must fulfill the Algebra Concept, at least partially to work
 * with the stepper.
 * \tparam Operations The type of the operations. Must fulfill the Operations Concept, at least partially 
 * to work with the stepper.
 */

    /**
     * \fn algebra_stepper_base::algebra_stepper_base( const algebra_type &algebra = algebra_type() )
     * \brief Constructs a algebra_stepper_base and creates the algebra. This constructor can be used as a default
     * constructor if the algebra has a default constructor.
     * \param algebra The algebra_stepper_base stores and uses a copy of algebra.
     */

    /**
     * \fn algebra_type& algebra_stepper_base::algebra()
     * \return A reference to the algebra which is held by this class.
     */

    /**
     * \fn const algebra_type& algebra_stepper_base::algebra() const
     * \return A const reference to the algebra which is held by this class.
     */

} // odeint
} // numeric
} // boost


#endif // BOOST_NUMERIC_ODEINT_STEPPER_BASE_ALGEBRA_STEPPER_BASE_HPP_INCLUDED

/* algebra_stepper_base.hpp
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
*/