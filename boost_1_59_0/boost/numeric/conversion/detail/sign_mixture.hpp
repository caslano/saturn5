//  (c) Copyright Fernando Luis Cacciola Carballal 2000-2004
//  Use, modification, and distribution is subject to the Boost Software
//  License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
//  http://www.boost.org/LICENSE_1_0.txt)

//  See library home page at http://www.boost.org/libs/numeric/conversion
//
// Contact the author at: fernando_cacciola@hotmail.com
// 
#ifndef BOOST_NUMERIC_CONVERSION_DETAIL_SIGN_MIXTURE_FLC_12NOV2002_HPP
#define BOOST_NUMERIC_CONVERSION_DETAIL_SIGN_MIXTURE_FLC_12NOV2002_HPP

#include "boost/config.hpp"
#include "boost/limits.hpp"

#include "boost/numeric/conversion/sign_mixture_enum.hpp"
#include "boost/numeric/conversion/detail/meta.hpp"

#include "boost/mpl/integral_c.hpp"

namespace boost { namespace numeric { namespace convdetail
{
  // Integral Constants for 'SignMixture'
  typedef mpl::integral_c<sign_mixture_enum, unsigned_to_unsigned> unsig2unsig_c ;
  typedef mpl::integral_c<sign_mixture_enum, signed_to_signed>     sig2sig_c ;
  typedef mpl::integral_c<sign_mixture_enum, signed_to_unsigned>   sig2unsig_c ;
  typedef mpl::integral_c<sign_mixture_enum, unsigned_to_signed>   unsig2sig_c ;

  // Metafunction:
  //
  //   get_sign_mixture<T,S>::type
  //
  // Selects the appropriate SignMixture Integral Constant for the combination T,S.
  //
  template<class T,class S>
  struct get_sign_mixture
  {
    typedef mpl::bool_< ::std::numeric_limits<S>::is_signed > S_signed ;
    typedef mpl::bool_< ::std::numeric_limits<T>::is_signed > T_signed ;

    typedef typename
      for_both<S_signed, T_signed, sig2sig_c, sig2unsig_c, unsig2sig_c, unsig2unsig_c>::type
        type ;
  } ;

  // Metafunction:
  //
  //   for_sign_mixture<SignMixture,Sig2Sig,Sig2Unsig,Unsig2Sig,Unsig2Unsig>::type
  //
  // {SignMixture} is one of the Integral Constants for SignMixture, declared above.
  // {Sig2Sig,Sig2Unsig,Unsig2Sig,Unsig2Unsig} are aribtrary types. (not metafunctions)
  //
  // According to the value of 'SignMixture', selects the corresponding type.
  //
  template<class SignMixture, class Sig2Sig, class Sig2Unsig, class Unsig2Sig, class Unsig2Unsig>
  struct for_sign_mixture
  {
    typedef typename
      ct_switch4<SignMixture
                 , sig2sig_c, sig2unsig_c, unsig2sig_c  // default
                 , Sig2Sig  , Sig2Unsig  , Unsig2Sig  , Unsig2Unsig
                >::type
        type ;
  } ;

} } } // namespace boost::numeric::convdetail

#endif
//
///////////////////////////////////////////////////////////////////////////////////////////////



/* sign_mixture.hpp
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
*/