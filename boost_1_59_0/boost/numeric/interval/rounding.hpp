/* Boost interval/rounding.hpp template implementation file
 *
 * Copyright 2002-2003 Hervé Brönnimann, Guillaume Melquiond, Sylvain Pion
 *
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or
 * copy at http://www.boost.org/LICENSE_1_0.txt)
 */

#ifndef BOOST_NUMERIC_INTERVAL_ROUNDING_HPP
#define BOOST_NUMERIC_INTERVAL_ROUNDING_HPP

namespace boost {
namespace numeric {
namespace interval_lib {

/*
 * Default rounding_control class (does nothing)
 */

template<class T>
struct rounding_control
{
  typedef int rounding_mode;
  static void get_rounding_mode(rounding_mode&) {}
  static void set_rounding_mode(rounding_mode)  {}
  static void upward()     {}
  static void downward()   {}
  static void to_nearest() {}
  static const T& to_int(const T& x)         { return x; }
  static const T& force_rounding(const T& x) { return x; }
};

/*
 * A few rounding control classes (exact/std/opp: see documentation)
 *   rounded_arith_* control the rounding of the arithmetic operators
 *   rounded_transc_* control the rounding of the transcendental functions
 */

template<class T, class Rounding = rounding_control<T> >
struct rounded_arith_exact;

template<class T, class Rounding = rounding_control<T> >
struct rounded_arith_std;

template<class T, class Rounding = rounding_control<T> >
struct rounded_arith_opp;

template<class T, class Rounding>
struct rounded_transc_dummy;

template<class T, class Rounding = rounded_arith_exact<T> > 
struct rounded_transc_exact;

template<class T, class Rounding = rounded_arith_std<T> > 
struct rounded_transc_std;

template<class T, class Rounding = rounded_arith_opp<T> > 
struct rounded_transc_opp;

/*
 * State-saving classes: allow to set and reset rounding control
 */

namespace detail {

template<class Rounding>
struct save_state_unprotected: Rounding
{
  typedef save_state_unprotected<Rounding> unprotected_rounding;
};

} // namespace detail

template<class Rounding>
struct save_state: Rounding
{
  typename Rounding::rounding_mode mode;
  save_state() {
    this->get_rounding_mode(mode);
    this->init();
  }
  ~save_state() { this->set_rounding_mode(mode); }
  typedef detail::save_state_unprotected<Rounding> unprotected_rounding;
};
  
template<class Rounding>
struct save_state_nothing: Rounding
{
  typedef save_state_nothing<Rounding> unprotected_rounding;
};
  
template<class T>
struct rounded_math: save_state_nothing<rounded_arith_exact<T> >
{};

} // namespace interval_lib
} // namespace numeric
} // namespace boost

#endif // BOOST_NUMERIC_INTERVAL_ROUNDING_HPP

/* rounding.hpp
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
*/