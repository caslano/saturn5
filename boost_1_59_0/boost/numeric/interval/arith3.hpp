/* Boost interval/arith3.hpp template implementation file
 *
 * This headers provides arithmetical functions
 * which compute an interval given some base
 * numbers. The resulting interval encloses the
 * real result of the arithmetic operation.
 *
 * Copyright 2003 Guillaume Melquiond
 *
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or
 * copy at http://www.boost.org/LICENSE_1_0.txt)
 */

#ifndef BOOST_NUMERIC_INTERVAL_ARITH3_HPP
#define BOOST_NUMERIC_INTERVAL_ARITH3_HPP

#include <boost/numeric/interval/detail/interval_prototype.hpp>
#include <boost/numeric/interval/detail/test_input.hpp>

namespace boost {
namespace numeric {
namespace interval_lib {

template<class I> inline
I add(const typename I::base_type& x, const typename I::base_type& y)
{
  typedef typename I::traits_type Policies;
  if (detail::test_input<typename I::base_type, Policies>(x, y))
    return I::empty();
  typename Policies::rounding rnd;
  return I(rnd.add_down(x, y), rnd.add_up(x, y), true);
}

template<class I> inline
I sub(const typename I::base_type& x, const typename I::base_type& y)
{
  typedef typename I::traits_type Policies;
  if (detail::test_input<typename I::base_type, Policies>(x, y))
    return I::empty();
  typename Policies::rounding rnd;
  return I(rnd.sub_down(x, y), rnd.sub_up(x, y), true);
}

template<class I> inline
I mul(const typename I::base_type& x, const typename I::base_type& y)
{
  typedef typename I::traits_type Policies;
  if (detail::test_input<typename I::base_type, Policies>(x, y))
    return I::empty();
  typename Policies::rounding rnd;
  return I(rnd.mul_down(x, y), rnd.mul_up(x, y), true);
}

template<class I> inline
I div(const typename I::base_type& x, const typename I::base_type& y)
{
  typedef typename I::traits_type Policies;
  if (detail::test_input<typename I::base_type, Policies>(x, y) || user::is_zero(y))
    return I::empty();
  typename Policies::rounding rnd;
  return I(rnd.div_down(x, y), rnd.div_up(x, y), true);
}

} // namespace interval_lib
} // namespace numeric
} // namespace boost

#endif // BOOST_NUMERIC_INTERVAL_ARITH3_HPP

/* arith3.hpp
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
*/