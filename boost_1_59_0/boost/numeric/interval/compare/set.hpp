/* Boost interval/compare/set.hpp template implementation file
 *
 * Copyright 2002-2003 Guillaume Melquiond
 *
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or
 * copy at http://www.boost.org/LICENSE_1_0.txt)
 */

#ifndef BOOST_NUMERIC_INTERVAL_COMPARE_SET_HPP
#define BOOST_NUMERIC_INTERVAL_COMPARE_SET_HPP

#include <boost/numeric/interval/detail/interval_prototype.hpp>
#include <boost/numeric/interval/detail/test_input.hpp>
#include <boost/numeric/interval/utility.hpp>

namespace boost {
namespace numeric {
namespace interval_lib {
namespace compare {
namespace set {

template<class T, class Policies1, class Policies2> inline
bool operator<(const interval<T, Policies1>& x, const interval<T, Policies2>& y)
{
  return proper_subset(x, y);
}

template<class T, class Policies> inline
bool operator<(const interval<T, Policies>& , const T& )
{
  throw comparison_error();
}

template<class T, class Policies1, class Policies2> inline
bool operator<=(const interval<T, Policies1>& x, const interval<T, Policies2>& y)
{
  return subset(x, y);
}

template<class T, class Policies> inline
bool operator<=(const interval<T, Policies>& , const T& )
{
  throw comparison_error();
}

template<class T, class Policies1, class Policies2> inline
bool operator>(const interval<T, Policies1>& x, const interval<T, Policies2>& y)
{
  return proper_subset(y, x);
}

template<class T, class Policies> inline
bool operator>(const interval<T, Policies>& , const T& )
{
  throw comparison_error();
}

template<class T, class Policies1, class Policies2> inline
bool operator>=(const interval<T, Policies1>& x, const interval<T, Policies2>& y)
{
  return subset(y, x);
}

template<class T, class Policies> inline
bool operator>=(const interval<T, Policies>& , const T& )
{
  throw comparison_error();
}

template<class T, class Policies1, class Policies2> inline
bool operator==(const interval<T, Policies1>& x, const interval<T, Policies2>& y)
{
  return equal(y, x);
}

template<class T, class Policies> inline
bool operator==(const interval<T, Policies>& , const T& )
{
  throw comparison_error();
}

template<class T, class Policies1, class Policies2> inline
bool operator!=(const interval<T, Policies1>& x, const interval<T, Policies2>& y)
{
  return !equal(y, x);
}

template<class T, class Policies> inline
bool operator!=(const interval<T, Policies>& , const T& )
{
  throw comparison_error();
}

} // namespace set
} // namespace compare
} // namespace interval_lib
} // namespace numeric
} // namespace boost

#endif // BOOST_NUMERIC_INTERVAL_COMPARE_SET_HPP

/* set.hpp
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
*/