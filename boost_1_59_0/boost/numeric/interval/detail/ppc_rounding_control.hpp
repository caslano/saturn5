/* Boost interval/detail/ppc_rounding_control.hpp file
 *
 * Copyright 2000 Jens Maurer
 * Copyright 2002 Hervé Brönnimann, Guillaume Melquiond, Sylvain Pion
 * Copyright 2005 Guillaume Melquiond
 *
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or
 * copy at http://www.boost.org/LICENSE_1_0.txt)
 */

#ifndef BOOST_NUMERIC_INTERVAL_DETAIL_PPC_ROUNDING_CONTROL_HPP
#define BOOST_NUMERIC_INTERVAL_DETAIL_PPC_ROUNDING_CONTROL_HPP

#if !defined(powerpc) && !defined(__powerpc__) && !defined(__ppc__)
#error This header only works on PPC CPUs.
#endif

#if defined(__GNUC__ ) || (__IBMCPP__ >= 700)

namespace boost {
namespace numeric {
namespace interval_lib {
namespace detail {

typedef union {
   ::boost::long_long_type imode;
  double dmode;
} rounding_mode_struct;

static const rounding_mode_struct mode_upward      = { 0xFFF8000000000002LL };
static const rounding_mode_struct mode_downward    = { 0xFFF8000000000003LL };
static const rounding_mode_struct mode_to_nearest  = { 0xFFF8000000000000LL };
static const rounding_mode_struct mode_toward_zero = { 0xFFF8000000000001LL };

struct ppc_rounding_control
{
  typedef double rounding_mode;

  static void set_rounding_mode(const rounding_mode mode)
  { __asm__ __volatile__ ("mtfsf 255,%0" : : "f"(mode)); }

  static void get_rounding_mode(rounding_mode& mode)
  { __asm__ __volatile__ ("mffs %0" : "=f"(mode)); }

  static void downward()    { set_rounding_mode(mode_downward.dmode);    }
  static void upward()      { set_rounding_mode(mode_upward.dmode);      }
  static void to_nearest()  { set_rounding_mode(mode_to_nearest.dmode);  }
  static void toward_zero() { set_rounding_mode(mode_toward_zero.dmode); }
};

} // namespace detail

// Do not declare the following C99 symbols if <math.h> provides them.
// Otherwise, conflicts may occur, due to differences between prototypes.
#if !defined(_ISOC99_SOURCE) && !defined(__USE_ISOC99)
extern "C" {
  float rintf(float);
  double rint(double);
}
#endif

template<>
struct rounding_control<float>:
  detail::ppc_rounding_control
{
  static float force_rounding(const float r)
  {
    float tmp;
    __asm__ __volatile__ ("frsp %0, %1" : "=f" (tmp) : "f" (r));
    return tmp;
  }
  static float to_int(const float& x) { return rintf(x); }
};

template<>
struct rounding_control<double>:
  detail::ppc_rounding_control
{
  static const double & force_rounding(const double& r) { return r; }
  static double to_int(const double& r) { return rint(r); }
};

template<>
struct rounding_control<long double>:
  detail::ppc_rounding_control
{
  static const long double & force_rounding(const long double& r) { return r; }
  static long double to_int(const long double& r) { return rint(r); }
};

} // namespace interval_lib
} // namespace numeric
} // namespace boost

#undef BOOST_NUMERIC_INTERVAL_NO_HARDWARE
#endif

#endif /* BOOST_NUMERIC_INTERVAL_DETAIL_PPC_ROUNDING_CONTROL_HPP */

/* ppc_rounding_control.hpp
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
*/