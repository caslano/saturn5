/* Boost interval/detail/x86_rounding_control.hpp file
 *
 * Copyright 2000 Jens Maurer
 * Copyright 2002 Hervé Brönnimann, Guillaume Melquiond, Sylvain Pion
 *
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or
 * copy at http://www.boost.org/LICENSE_1_0.txt)
 */

#ifndef BOOST_NUMERIC_INTERVAL_DETAIL_X86_ROUNDING_CONTROL_HPP
#define BOOST_NUMERIC_INTERVAL_DETAIL_X86_ROUNDING_CONTROL_HPP

#if defined(__GNUC__) || defined(__BORLANDC__) && defined(__clang__)
#  include <boost/numeric/interval/detail/x86gcc_rounding_control.hpp>
#elif defined(__BORLANDC__)
#  include <boost/numeric/interval/detail/bcc_rounding_control.hpp>
#elif defined(_MSC_VER)
#  include <boost/numeric/interval/detail/msvc_rounding_control.hpp>
#elif defined(__MWERKS__) || defined(__ICC) || defined (__SUNPRO_CC)
#  define BOOST_NUMERIC_INTERVAL_USE_C99_SUBSYSTEM
#  include <boost/numeric/interval/detail/c99sub_rounding_control.hpp>
#else
#  error Unsupported C++ compiler.
#endif

namespace boost {
namespace numeric {
namespace interval_lib {

namespace detail {

#ifdef BOOST_NUMERIC_INTERVAL_USE_C99_SUBSYSTEM
typedef c99_rounding_control x86_rounding_control;
#undef BOOST_NUMERIC_INTERVAL_USE_C99_SUBSYSTEM
#else
struct fpu_rounding_modes
{
  unsigned short to_nearest;
  unsigned short downward;
  unsigned short upward;
  unsigned short toward_zero;
};

// exceptions masked, extended precision
// hardware default is 0x037f (0x1000 only has a meaning on 287)
static const fpu_rounding_modes rnd_mode = { 0x137f, 0x177f, 0x1b7f, 0x1f7f };

struct x86_rounding_control: x86_rounding
{
  static void to_nearest()  { set_rounding_mode(rnd_mode.to_nearest);  }
  static void downward()    { set_rounding_mode(rnd_mode.downward);    }
  static void upward()      { set_rounding_mode(rnd_mode.upward);      }
  static void toward_zero() { set_rounding_mode(rnd_mode.toward_zero); }
};
#endif // BOOST_NUMERIC_INTERVAL_USE_C99_SUBSYSTEM

} // namespace detail

template<>
struct rounding_control<float>: detail::x86_rounding_control
{
  static float force_rounding(const float& r) 
  { volatile float r_ = r; return r_; }
};

template<>
struct rounding_control<double>: detail::x86_rounding_control
{
  /*static double force_rounding(double r) 
  { asm volatile ("" : "+m"(r) : ); return r; }*/
  static double force_rounding(const double& r) 
  { volatile double r_ = r; return r_; }
};

namespace detail {

template<bool>
struct x86_rounding_control_long_double;

template<>
struct x86_rounding_control_long_double<false>: x86_rounding_control
{
  static long double force_rounding(long double const &r)
  { volatile long double r_ = r; return r_; }
};

template<>
struct x86_rounding_control_long_double<true>: x86_rounding_control
{
  static long double const &force_rounding(long double const &r)
  { return r; }
};

} // namespace detail

template<>
struct rounding_control<long double>:
  detail::x86_rounding_control_long_double< (sizeof(long double) >= 10) >
{};

} // namespace interval_lib
} // namespace numeric
} // namespace boost

#undef BOOST_NUMERIC_INTERVAL_NO_HARDWARE

#endif /* BOOST_NUMERIC_INTERVAL_DETAIL_X86_ROUNDING_CONTROL_HPP */

/* x86_rounding_control.hpp
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
*/