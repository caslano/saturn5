/* Boost interval/detail/test_input.hpp file
 *
 * Copyright 2002 Hervé Brönnimann, Guillaume Melquiond, Sylvain Pion
 *
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or
 * copy at http://www.boost.org/LICENSE_1_0.txt)
 */

#ifndef BOOST_NUMERIC_INTERVAL_DETAIL_TEST_INPUT_HPP
#define BOOST_NUMERIC_INTERVAL_DETAIL_TEST_INPUT_HPP

#include <boost/numeric/interval/detail/interval_prototype.hpp>

namespace boost {
namespace numeric {
namespace interval_lib {
namespace user {

template<class T> inline
bool is_zero(T const &v) { return v == static_cast<T>(0); }

template<class T> inline
bool is_neg (T const &v) { return v <  static_cast<T>(0); }

template<class T> inline
bool is_pos (T const &v) { return v >  static_cast<T>(0); }

} // namespace user

namespace detail {

template<class T, class Policies> inline
bool test_input(const interval<T, Policies>& x) {
  typedef typename Policies::checking checking;
  return checking::is_empty(x.lower(), x.upper());
}

template<class T, class Policies1, class Policies2> inline
bool test_input(const interval<T, Policies1>& x, const interval<T, Policies2>& y) {
  typedef typename Policies1::checking checking1;
  typedef typename Policies2::checking checking2;
  return checking1::is_empty(x.lower(), x.upper()) ||
         checking2::is_empty(y.lower(), y.upper());
}

template<class T, class Policies> inline
bool test_input(const T& x, const interval<T, Policies>& y) {
  typedef typename Policies::checking checking;
  return checking::is_nan(x) || checking::is_empty(y.lower(), y.upper());
}

template<class T, class Policies> inline
bool test_input(const interval<T, Policies>& x, const T& y) {
  typedef typename Policies::checking checking;
  return checking::is_empty(x.lower(), x.upper()) || checking::is_nan(y);
}

template<class T, class Policies> inline
bool test_input(const T& x) {
  typedef typename Policies::checking checking;
  return checking::is_nan(x);
}

template<class T, class Policies> inline
bool test_input(const T& x, const T& y) {
  typedef typename Policies::checking checking;
  return checking::is_nan(x) || checking::is_nan(y);
}

} // namespace detail
} // namespace interval_lib
} // namespace numeric
} // namespace boost

#endif // BOOST_NUMERIC_INTERVAL_DETAIL_TEST_INPUT_HPP

/* test_input.hpp
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
*/