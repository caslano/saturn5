//  (C) Copyright John Maddock 2005-2006.
//  Use, modification and distribution are subject to the
//  Boost Software License, Version 1.0. (See accompanying file
//  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_MATH_HYPOT_INCLUDED
#define BOOST_MATH_HYPOT_INCLUDED

#ifdef _MSC_VER
#pragma once
#endif

#include <boost/math/tools/config.hpp>
#include <boost/math/tools/precision.hpp>
#include <boost/math/policies/error_handling.hpp>
#include <boost/math/special_functions/math_fwd.hpp>
#include <algorithm> // for swap
#include <cmath>

namespace boost{ namespace math{ namespace detail{

template <class T, class Policy>
T hypot_imp(T x, T y, const Policy& pol)
{
   //
   // Normalize x and y, so that both are positive and x >= y:
   //
   using std::fabs; using std::sqrt; // ADL of std names

   x = fabs(x);
   y = fabs(y);

#ifdef _MSC_VER
#pragma warning(push) 
#pragma warning(disable: 4127)
#endif
   // special case, see C99 Annex F:
   if(std::numeric_limits<T>::has_infinity
      && ((x == std::numeric_limits<T>::infinity())
      || (y == std::numeric_limits<T>::infinity())))
      return policies::raise_overflow_error<T>("boost::math::hypot<%1%>(%1%,%1%)", 0, pol);
#ifdef _MSC_VER
#pragma warning(pop)
#endif

   if(y > x)
      (std::swap)(x, y);

   if(x * tools::epsilon<T>() >= y)
      return x;

   T rat = y / x;
   return x * sqrt(1 + rat*rat);
} // template <class T> T hypot(T x, T y)

}

template <class T1, class T2>
inline typename tools::promote_args<T1, T2>::type 
   hypot(T1 x, T2 y)
{
   typedef typename tools::promote_args<T1, T2>::type result_type;
   return detail::hypot_imp(
      static_cast<result_type>(x), static_cast<result_type>(y), policies::policy<>());
}

template <class T1, class T2, class Policy>
inline typename tools::promote_args<T1, T2>::type 
   hypot(T1 x, T2 y, const Policy& pol)
{
   typedef typename tools::promote_args<T1, T2>::type result_type;
   return detail::hypot_imp(
      static_cast<result_type>(x), static_cast<result_type>(y), pol);
}

} // namespace math
} // namespace boost

#endif // BOOST_MATH_HYPOT_INCLUDED




/* hypot.hpp
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
*/