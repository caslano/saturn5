//  Copyright (c) 2015 John Maddock
//  Use, modification and distribution are subject to the
//  Boost Software License, Version 1.0. (See accompanying file
//  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//

#ifndef BOOST_MATH_ELLINT_JZ_HPP
#define BOOST_MATH_ELLINT_JZ_HPP

#ifdef _MSC_VER
#pragma once
#endif

#include <boost/math/special_functions/math_fwd.hpp>
#include <boost/math/special_functions/ellint_1.hpp>
#include <boost/math/special_functions/ellint_rj.hpp>
#include <boost/math/special_functions/sign.hpp>
#include <boost/math/constants/constants.hpp>
#include <boost/math/policies/error_handling.hpp>
#include <boost/math/tools/workaround.hpp>

// Elliptic integral the Jacobi Zeta function.

namespace boost { namespace math { 
   
namespace detail{

// Elliptic integral - Jacobi Zeta
template <typename T, typename Policy>
T jacobi_zeta_imp(T phi, T k, const Policy& pol)
{
    BOOST_MATH_STD_USING
    using namespace boost::math::tools;
    using namespace boost::math::constants;

    bool invert = false;
    if(phi < 0)
    {
       phi = fabs(phi);
       invert = true;
    }

    T result;
    T sinp = sin(phi);
    T cosp = cos(phi);
    T s2 = sinp * sinp;
    T k2 = k * k;
    T kp = 1 - k2;
    if(k == 1)
       result = sinp * (boost::math::sign)(cosp);  // We get here by simplifying JacobiZeta[w, 1] in Mathematica, and the fact that 0 <= phi.
    else
       result = k2 * sinp * cosp * sqrt(1 - k2 * s2) * ellint_rj_imp(T(0), kp, T(1), T(1 - k2 * s2), pol) / (3 * ellint_k_imp(k, pol));
    return invert ? T(-result) : result;
}

} // detail

template <class T1, class T2, class Policy>
inline typename tools::promote_args<T1, T2>::type jacobi_zeta(T1 k, T2 phi, const Policy& pol)
{
   typedef typename tools::promote_args<T1, T2>::type result_type;
   typedef typename policies::evaluation<result_type, Policy>::type value_type;
   return policies::checked_narrowing_cast<result_type, Policy>(detail::jacobi_zeta_imp(static_cast<value_type>(phi), static_cast<value_type>(k), pol), "boost::math::jacobi_zeta<%1%>(%1%,%1%)");
}

template <class T1, class T2>
inline typename tools::promote_args<T1, T2>::type jacobi_zeta(T1 k, T2 phi)
{
   return boost::math::jacobi_zeta(k, phi, policies::policy<>());
}

}} // namespaces

#endif // BOOST_MATH_ELLINT_D_HPP


/* jacobi_zeta.hpp
wyahI1dNBYtKLzOFOjS+RqFlQk7Ur+/qqqOhDV7Lqk6VW7n+ilBlIZz4bslGgrm6g+n8EB1BXq+751rfAPOduKY4Nodb0YzPgKiCiCo4JTugCL4mE0XfNu9H0rK+u0ma7iW0CPjvYtP+ykUSuKp3Lafh3BjMlpvk+dObdxrm7Kw4E1tMOOH4xbN5F31Oeg5NNASEZzfegdyU+TDaqtinPoFjxFmDcyobFjKSExHDxMEii0DPHgVxn9eoJnfkQfC/LsJHqxlWG91uPZvEWoL9kj0VspUrMC8eCmFAyVak0rX3ekLM4+s1l7i5Jod7c6t7Gpu77j95jnBt8n7Oxxq0267JnCpKzv3oi5l+y7DsRjcuHC2Lra5SnaeOtOyxnOxY36epIyiCUyCqM3bi990JDutNX+BKSTAPKUW4TTZn6GNga8eifNTtjPU2FfOwq5LOpWIxkQsABWpxPTcP8gKS6o8dA01dl2SFy67ine5F0WxNRiR7sTlbVNaKYPOFJMSqwiFJ8CCZxnkVs9rS0iErMGiqslzhdQfk+mlktm7mIF3VI3CCAA2ppjVTuzaTkpA+F3bBVsOLRuXkQpkXph/O2+rLQBWmOhirJPQcIhxFAkmX70tJJkRmo3Go4tU7QHZ2s30LbqnTXlT++onQs5RDAMLXrbeH1W4db0fopCRi70H1OOWNOSAEx4TuwR9GwL72SzePz3oG/A+0ZAd6M6oYeex0+UrYEwRBTNMXcnn2X5Zn8HpKbxehEd5abtfHQmwbBMedWiWqqpL5JeY8G4dskxh+TR6JjilIboZ8p8EBN9pJiFR/ErZ3z5RBPPEGIrp6ZoZZ5yHnICSoNftdfEtTSLbeJFIK6/rED323lWX0V4YpSxGGeLVydkzKlkKGpDWHT8/PfSS0VlBUyjzKX/mfW8bOUZg5XW8t1H7MdutaTsdpgHJlikVP3ERqGKIlTwJg7s/bgDA5WCok1MIbr1hgMQMghHTiOV4xRCr8xYcvDJReR3pEep68iso2hGp9FefuVP7wDTD+/Gcyehc/XOxZSGZzDv08zZ+geJ+vIxrnA9xuoLpY6gFv/tKEGpQZL/Sh827wf6Fw+Zvq0w99OG8b4EOQnMtIiKXfcGvHMdP6nQ6BKo/tfkQaxvKWNzCiHwNtghTxn3+wA4vGkPP4ZD57IAqy6OPqAc+1sbzY44JkxkZfdvP1QLvW8slRa2bhxh2LlgVzldR8AYPiRol83JfquhMquiZYtkBHsHH4SKqyG+LQeCTXSrgIwApY86a42I7DYPaGH4qcK4d/7iEo4xfoGjEvtOpLWR+X9uGIYCfYtdSmU/NSqakB8YoOsfdbA0aHASW4I1vibV1LdysMVEZXqOFoJrHpoGg8oB1p+k4a1W82fRfYbfjv1BPwgTc4liIXjIqurfss8UE81d+RCaeGRnQKa8k10tYzP0/n+fdA1gitxr07fz0M7o0aiXdUjjfa75JNRNrZu2E1tbeeCmVrDp/SaHMJCAll6mN9crkcGypDT+uALOpBfzk+GhfP4eOGaw5KaMz0zy59zUWIy/STO/1+H7e2jkU3XikJXj8LJz/469BVAySOWRZVmHn9WNttiwUqgwkno2PWvh8+OntxTGvYnKNf2BUZQuqOhG5tZUogdQPSSapzLuGmxDJriOPbZNRYNquwCNW9Ze+JfcPIyoSvOPFET01uevQgDlGRrwPrYTwHJQQT10dzBZ5JcYyoZys/Egmtu+q7RHx3N1kvznC3r1aKfg9pI49DBA/92MH79EcQDUdFrhmWJpyxGtg8yE09ypgF0Ln8HqGCXeYl6pjY+B0DZXdbwgM4Yncz08yruCH+CUtUk6gTZYarmLkgrVV2ZgSvfk1fGlBldSSQVRQHObSl1x3GYqvYGy1Jt0BFiD9tWXQQkQI5PCwPPig7tODHnYqWUqV2moaTTYrlei12x5OHliPkkDmu8LeUHrVk7bT4iaQoJgbvPneW8A55g935vu/ia9QeFWNvcnKnG+FT2Xj7yXH3P/xobfJ9nNBXRRub0IqybbVU1Bu8yHz8+GbIpHlIGPnZ9x1h0pf72BpzjI6oA3QmKc/IOAve1017Ad18dkk17mRHVCQptymQZKgITKU3JoQMt5j8DirFXPl4pTMN/6f01Rj1bh/KQ3YaUhHkVjyMHXqZG72yK+8IXTeYvkvFDhyDj1vcR8647DXIKDo/cCbegvLp3rsZYETQ08K5kqhL7gqJWkv4DznAwLX1tmP2JLXkFd4kGOF84/FjRsOU5i4Tvab9jEuVOa5zaI7XYMIr3d2p315tq99w8h5k45i7B2STEDDcOwfsnmJHKGejNAPUX2Bi4FyZVGAanasVDIzMFwt7AB3PRXPMQcurrb4doahdhe7PPt6WjXg4XAwj2Nyr+cBSP+9LSQ+b6s4yt+v7lyvhi3tekqNvXu/t1T1U0HeDjjftKZao01BYGRBsXa5YSSO3RTPmajeLOsTQ/DbovjUFcDuipbYeUqOzIlCBef4EjsZ6b7v1kU6c4q4JoyJaN84k2HZt58ZqI6pQefcTcf3ocIs+FxuZqw6BTYLM5plat0EwNckeux6GcjCBXUoqx1GEbnh2j6jmSVPagMhsNw5F+y84uqQS4gVSEvp8shOZ6bzKvFQUpgpEb/7bIqQGAihp1VrSZuIwSKk13AeWChfrcttZNXqfXvG/1KinBgZb96ScWOJKYG2AMYXrwiFGpesVp16twjLmZqM6F4OoVumrTZxl4OLgiOLaqhpI+I5G3+WC1C1+m6ZMylOZisCyldnHmP3j+6MFKrzpudJjF9xuojBvPZ5WTpQleizyjuquOjdYDb9VTf/rakIqrWgJWcDOrxiVD/1a0NzRkZEclbMLhRVGBRDa4jT0GgRzaW0VV+gjQaxAOqXeGg2UEwkBRfGGf0CGvlpFT2NyZVPLqc4axbK3v78JPqSwaJEXsAwRcx5TCFUBmQWv1ZD/3QTx/gZvMHz87hGFvC/qbYNmP7qLLPLfBDPNXSM4mHhXm2vDgPZQdf2rVEi1I8QN1LggzMD6uqXmKChoRi+uY5Ar4p2rwJf0zbv6oq3FqpB615XYQCTviLxi+RJXIb4/SN6Xk1bf5QGDew9BIijUBfOiRG4mwroNCwgrSqDEqsFX7QkIJnw81gkNu1unyY4gqm+bWq8lwojO5XMKAZkGtdsiRfVNu7eEsYs1Mjp8UQwKlXlxQ3spibClqL1zvzA3CfnpBa6HueUFRk0yy592xevO5EdEXrKtkbEdlXqQsGNB77jCEI3kDmodhVFgGx5u8qYnUzpD4+/go8ws2qgz4s6zT6eN5jSL8lLcqWK8IWfBFcUxRZeJH9DYwalOkxnFx5D5tkvXqYF9aB4ZvlG3w+kIzBKQtLthHpw0Kg7jFPQak8/rG1PFto41Rc90H3lIbsK0capOajGNxIkIl+bygIksq7bBbxrTQl9hH7YUNigRTDtTDCYKri9psZzP7b8RUYVht02SB5fruLNVjHMOd3tBd97rIQ6zkpvvvLX9X2Kgkyc5lMugI0TZzfVNOUmkza+sskcqnO6zN1KNd2oSSFOHp3VelKMyFJfTst8dBKV7PMfUJ8oZ7pCYlChLpQNNgPMoJ1hhUwgsTN3BmRVDe1XbPHnQRyStswaneGVslqXBqaWJPkU2pOlG41y2raz3xmRrVRqkBBZGmtkLciIenZ3fIyJtsr1QjOd0Sqvc5izb2NSMLi5dO1LjsGUp3yf9oKcyxjbHjAaU/0dbrca0WIPIuaauIUf4rEUeArDAHQhBzPCWTNGHmxKOrDtkRGXtEe8CHjcJmNNmXJQNjSoCsJ87itWEWMSUtFnXuDh0MnlzkTf9ffjuFuMElnOpbno5/z7Tz9lO3ZtX3cB2ZegMw0OHVL6QusVfj/bbCT01NR1QyKZ1SbFbIKIUTlhXz9YNu3jDKWsV1GPKZHBZffH9+OWYcXjeQxo9mFtStt+iKhZY+oCVJVnyxoSMbLzOrZ1vhJWTmhrfDGkVeifrtlLJoiVtHO6i9TM3H6A2AdV+1DlaaCVRG7m2HZ5cDHQ0GI83SCWN1+SHf6BphNi2l3760vLGpwB5XdmY4VGpXPSiOiLkjTuIakF9aBuxv0YYHNRhs8UI5o0jT6Hfo2WGjDGT2PQybHK2eXL4K02MStSse+baBEg7bS5re+29pn4TuSIEqIaOLeDzJbvTFGFUPgdMLbeOqn4ObwL9JWHy+sHC54tWb4WmXa3SmMAd35ZzB4cvGMpEy7ycZJLNSM9cbNQ094nbbjAQdzCIYBLNx/0x1JGhoIImm6xDufPMN43KNusxjOCn2AbdccRQid6YD91Ceu6sbaZkCKv6790RGyjFSJbpflyoIeBVmHUln9c0RTVznnbgeOucQz2njOeZOxx4d4RvVDpsAwEJdnkCJTHUKiEOEdOMa/xYuya1EBaBN1XMeRmHc2u4iP46sGWh487cWus+gk1YTFh2Iuk7FIyRnt5CpaQ2KWaH7PKNsc8mbli7K90GnsxzPhGv1+Pr+C08R/h3MXFi546+7aL6/pZXLA+s5LWtGOJNomvfZifCtACnxZCw1sQG2t3bqqgofe9n5mImPny6w9eCQHGuwdQmg7pA+dzQmOTzv+UT4eVYDOW1zptSyHrauTL93ghdyPkV9tSdyxGXs69nJfEzUdxrIOy3jLFRJBaWi1zqKXUWPOCSNK6ti33msJYpZdoXJhkCMTpJGJwj3lf0eFlcS6wwHGhXcoZ7KM5ZPtNe3k/D9L/G0yvLHPyNWWCTFbNWcWTIBKoypg0rs3N6G+WiOEbKPPIK1Wd9TS+ymzfw4SYcuRk6C7NECNU9da3qbbydzZhhG25A8Nv2vTp0vYdf5bfl5uyam5v41eNXr8w8e7CM8jKCGk4iZrW0oXgmgNi9ipFMyBTXLkNfXzxqOjRKkD7KgNDZDuTu9pL5vAf0nlixKwDXWq6hCw6UJxvvI08JDF8fIcXd9/tyblDfTg3G9niJ/8uNEgjBK3mdn2XlOvt5w6HNFa6E2gmhPF1r3zzo0AMViSsGHvO/yLx+YL6OQIjvz2wt0OYDfbDFDVjzvKusF8pwhP0H3MVz6lm48ePsfcctK/EFJ/49YzyPfEOh927grrP7k4d0LtCNcuwx60e6q0mOHgBvthkPEa5X5GNbqyblFyOnIkJRXn+fHQ+FEY+N7Hd1LKqZq3xNMClL0eKwfwW7EyWROZVkFJc7umR2EUF3e3MsOhetWdYK4+x3iMC1hFDrc2OuKtjx6u5wM18svOY1NTR8u5LVbAf7nDOL+78e2VTWYzm/sa54KJYlGtj7EahayutPDmEPtqkoaN2MpEMkK6ldgdXfZFVZLPNZXA6zihTJhB1HNBCnlcSlT1rhIg0gM4jVqp0Xxvz3XSs2Pc9cSQeG5hz8Y+ojVmU1ShuzZGCiPDbkMEgiPvoZa1EqDKCa3t0xK5zWbUHDWojjRzctlT1oS9c0D/aZ5tY+fGHocaGehey9LfLeqIFvEus5ZR1RG82fj3TPdnBLjCSdpykr3ivisfXd68IcmVOUjHYOHLNu2c6sMuTSMA2kW5XRkvB5Mvd6L/C6y2R30fPRbCiQUFSmWfMHeyNwkgWgoEP1Ia+n2uhgL+FaKGIxeVNr4dOZcaouMOZ3lcavcoru9IZLFvELVIH3zlAZWyATp16VYc7kZVoE9epdCiSqugVRqBkWZ4GEqGj7nnTGKnlujGPb62lrqmOdy1Mt+POZ/SCCzL8OH6j5S9FfTRU1DFJjicWUPRYr4BEq9STTBrasVpocdY7MV7xStkIorenfyNdDW42qt2a4LyytgIMRqAfxG8rlAbl7VhEjWSsJpyBh7BhQMz7pEeofzfCNWo1ZB5zg0/lshEADpMv5fGCiCsR9Za0eZVY15xQj8YaZK5dDy+FVlXGwcjd693u2suq0/TJCOLKxwNKXAZ/JtsPplFw0tUiERcGGkcs0EBpFJVeQMd5bghvaGrkGLqz9UEBJdRA1wf1oAWISlVa94iexTW7BgIgrajNrIiajCM2oqFSOxCWM1JN160Y3BTEmNWU2Tk2+Id9Xiuxxnro3ypSNqDHS0eXUiUE+m+H8QGUmJivzUD+dtv8dTEVUBSmPR6mhAHsdysjUgaIFl+5ayll0NcwpwZUUvqgMyj4EfbulllgXVOO29D3stFOkkmNTHav603cjKXffTnchM8jqqxlDXzmKIlsiwJzDYjiZo6eHuTzKlnHFJmal380MCbCRdZoJbAEp77QXx3SVFQLzPlDBX9S/X1J0ehRralen9YbrEUxtMlkW/M10HmYabpFjha3HadblSUjyVT0ykBXrLt0lFqDnpDQa7dNMGTzdnrqJSgyUDVg5qhZ27Ej5m/SUaoQqKXaWLekSglysSo7SZxxPz4zAD92sU+8hXAsMyU9cLu20P75uRU5i5NDbFWtVArfYN8cYZGkhRqqo1qyrRUhBuVlLBzIjHdeV9H+0rOPuICxgesn26jbsI52nNVhzKjITVX0KG4xsAb55x4GgtTRecF/lyaYa6Iwr1sJ2XMJPFRZmP3LFv2Q5i2zh1yxtVhUatH9C5c/gL7dQnsHoSdJKCfcJGvN8lwaIJTMXIqKy+MDztcppzyLUuatXlrdO49q5zzZCYRVD21qd6ZUeEZEocksPm8dX4T8x6yQJAzHIiqzOlk6QmHGJrmQ8rlyy3FptjjOObkzReaaeoEEuVEaSug0OuQqHW9VpHcNVOJ22UzRFbm7lpnukQUNM6IxpzmPXdcxCxV27xOxd9033mXMPazz9O7YZBrLyijrV2ckV2Si/yzmRNRGG3dTYEYh7f18/JbiXgmSw13u0qYohuPVd4l/GcUIr1Nqmns+/qEG/UmSxszDz2Kb6ZsbK21cVVrkKIx3uvUynyhwWwpJotuFncFU+9D8OlTRkYBUjodX/xQOGHDGa6Ti6y5gjfYqC7slvTefU3ohgzzGnd9/0cVe6IMmf+aQHX1og9ldc11fFQEhfS1bQtnbZfJnqivUetcj8nNXMv/FffXdVJHuUhK18r8fJCBIVa3PPywlaSuRRYRyrCrMpStqdYhAa/t5nXiK27j00DH258XxzRON0VK030LMPChqXR6WSeo/55Qh2LuwVEKXKg3KgD9NbXl299AJjrmEdkhh5dO7glE9xb+vibrKi+tfM7lZkE7IC0gcVNKI2VXMLFHxgJTWoGUJEES1K8VwhnVZbG1RSePqgioy9Ezf3aHhL2J5GLYsSx6ENcya3tt75s3waIVYE1DIyjKpo7wBoRg003xK7dIEWJZTMPT1a4vJl+ol39okgoXlPiTAt0J4A7Praqd3M3VundInaXPXWD8Wa/w6dMH7811F3HDrfabCsBOBFgLcBR8va38/LxOZV2PB675+MKY4w0Xe+pS1BWgfd8tzOsjg+AYFRSc8wBgEuZ3ernfxCqIJCKoNQnsKZMgXrnno9hCQ37vJ5cILSJ2T6v0BK/uikRtBPy/sApx61fnY7XGP2bJ8F4Y8gIfsrv9Oh5vQBsBj+IRaL/z+htDKd/ZTH5AfW+oLSgWoI6BAm9NgROIkPoPfzhy57PBBgVzQPcYYrT8EHZP779T84b7QPyZW3cwc89IcA
*/