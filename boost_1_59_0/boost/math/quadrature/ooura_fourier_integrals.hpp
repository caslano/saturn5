// Copyright Nick Thompson, 2019
// Use, modification and distribution are subject to the
// Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt
// or copy at http://www.boost.org/LICENSE_1_0.txt)

/*
 * References:
 * Ooura, Takuya, and Masatake Mori. "A robust double exponential formula for Fourier-type integrals." Journal of computational and applied mathematics 112.1-2 (1999): 229-241.
 * http://www.kurims.kyoto-u.ac.jp/~ooura/intde.html
 */
#ifndef BOOST_MATH_QUADRATURE_OOURA_FOURIER_INTEGRALS_HPP
#define BOOST_MATH_QUADRATURE_OOURA_FOURIER_INTEGRALS_HPP
#include <memory>
#include <boost/math/quadrature/detail/ooura_fourier_integrals_detail.hpp>

namespace boost { namespace math { namespace quadrature {

template<class Real>
class ooura_fourier_sin {
public:
    ooura_fourier_sin(const Real relative_error_tolerance = tools::root_epsilon<Real>(), size_t levels = sizeof(Real)) : impl_(std::make_shared<detail::ooura_fourier_sin_detail<Real>>(relative_error_tolerance, levels))
    {}

    template<class F>
    std::pair<Real, Real> integrate(F const & f, Real omega) {
        return impl_->integrate(f, omega);
    }

    // These are just for debugging/unit tests:
    std::vector<std::vector<Real>> const & big_nodes() const {
        return impl_->big_nodes();
    }

    std::vector<std::vector<Real>> const & weights_for_big_nodes() const {
        return impl_->weights_for_big_nodes();
    }

    std::vector<std::vector<Real>> const & little_nodes() const {
        return impl_->little_nodes();
    }

    std::vector<std::vector<Real>> const & weights_for_little_nodes() const {
        return impl_->weights_for_little_nodes();
    }

private:
    std::shared_ptr<detail::ooura_fourier_sin_detail<Real>> impl_;
};


template<class Real>
class ooura_fourier_cos {
public:
    ooura_fourier_cos(const Real relative_error_tolerance = tools::root_epsilon<Real>(), size_t levels = sizeof(Real)) : impl_(std::make_shared<detail::ooura_fourier_cos_detail<Real>>(relative_error_tolerance, levels))
    {}

    template<class F>
    std::pair<Real, Real> integrate(F const & f, Real omega) {
        return impl_->integrate(f, omega);
    }
private:
    std::shared_ptr<detail::ooura_fourier_cos_detail<Real>> impl_;
};


}}}
#endif

/* ooura_fourier_integrals.hpp
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
*/