/*
 *  Copyright Nick Thompson, 2019
 *  Use, modification and distribution are subject to the
 *  Boost Software License, Version 1.0. (See accompanying file
 *  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 *
 *  Exactly the same as barycentric_rational.hpp, but delivers values in $\mathbb{R}^n$.
 *  In some sense this is trivial, since each component of the vector is computed in exactly the same
 *  as would be computed by barycentric_rational.hpp. But this is a bit more efficient and convenient.
 */

#ifndef BOOST_MATH_INTERPOLATORS_VECTOR_BARYCENTRIC_RATIONAL_HPP
#define BOOST_MATH_INTERPOLATORS_VECTOR_BARYCENTRIC_RATIONAL_HPP

#include <memory>
#include <boost/math/interpolators/detail/vector_barycentric_rational_detail.hpp>

namespace boost{ namespace math{ namespace interpolators{

template<class TimeContainer, class SpaceContainer>
class vector_barycentric_rational
{
public:
    using Real = typename TimeContainer::value_type;
    using Point = typename SpaceContainer::value_type;
    vector_barycentric_rational(TimeContainer&& times, SpaceContainer&& points, size_t approximation_order = 3);

    void operator()(Point& x, Real t) const;

    // I have validated using google benchmark that returning a value is no more expensive populating it,
    // at least for Eigen vectors with known size at compile-time.
    // This is kinda a weird thing to discover since it goes against the advice of basically every high-performance computing book.
    Point operator()(Real t) const {
        Point p;
        this->operator()(p, t);
        return p;
    }

    void prime(Point& dxdt, Real t) const {
        Point x;
        m_imp->eval_with_prime(x, dxdt, t);
    }

    Point prime(Real t) const {
        Point p;
        this->prime(p, t);
        return p;
    }

    void eval_with_prime(Point& x, Point& dxdt, Real t) const {
        m_imp->eval_with_prime(x, dxdt, t);
        return;
    }

    std::pair<Point, Point> eval_with_prime(Real t) const {
        Point x;
        Point dxdt;
        m_imp->eval_with_prime(x, dxdt, t);
        return {x, dxdt};
    }

private:
    std::shared_ptr<detail::vector_barycentric_rational_imp<TimeContainer, SpaceContainer>> m_imp;
};


template <class TimeContainer, class SpaceContainer>
vector_barycentric_rational<TimeContainer, SpaceContainer>::vector_barycentric_rational(TimeContainer&& times, SpaceContainer&& points, size_t approximation_order):
 m_imp(std::make_shared<detail::vector_barycentric_rational_imp<TimeContainer, SpaceContainer>>(std::move(times), std::move(points), approximation_order))
{
    return;
}

template <class TimeContainer, class SpaceContainer>
void vector_barycentric_rational<TimeContainer, SpaceContainer>::operator()(typename SpaceContainer::value_type& p, typename TimeContainer::value_type t) const
{
    m_imp->operator()(p, t);
    return;
}

}}}
#endif

/* vector_barycentric_rational.hpp
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
*/