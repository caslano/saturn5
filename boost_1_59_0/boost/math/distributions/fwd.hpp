// fwd.hpp Forward declarations of Boost.Math distributions.

// Copyright Paul A. Bristow 2007, 2010, 2012, 2014.
// Copyright John Maddock 2007.

// Use, modification and distribution are subject to the
// Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt
// or copy at http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_MATH_DISTRIBUTIONS_FWD_HPP
#define BOOST_MATH_DISTRIBUTIONS_FWD_HPP

// 33 distributions at Boost 1.9.1 after adding hyperexpon and arcsine

namespace boost{ namespace math{

template <class RealType, class Policy>
class arcsine_distribution;

template <class RealType, class Policy>
class bernoulli_distribution;

template <class RealType, class Policy>
class beta_distribution;

template <class RealType, class Policy>
class binomial_distribution;

template <class RealType, class Policy>
class cauchy_distribution;

template <class RealType, class Policy>
class chi_squared_distribution;

template <class RealType, class Policy>
class exponential_distribution;

template <class RealType, class Policy>
class extreme_value_distribution;

template <class RealType, class Policy>
class fisher_f_distribution;

template <class RealType, class Policy>
class gamma_distribution;

template <class RealType, class Policy>
class geometric_distribution;

template <class RealType, class Policy>
class hyperexponential_distribution;

template <class RealType, class Policy>
class hypergeometric_distribution;

template <class RealType, class Policy>
class inverse_chi_squared_distribution;

template <class RealType, class Policy>
class inverse_gamma_distribution;

template <class RealType, class Policy>
class inverse_gaussian_distribution;

template <class RealType, class Policy>
class kolmogorov_smirnov_distribution;

template <class RealType, class Policy>
class laplace_distribution;

template <class RealType, class Policy>
class logistic_distribution;

template <class RealType, class Policy>
class lognormal_distribution;

template <class RealType, class Policy>
class negative_binomial_distribution;

template <class RealType, class Policy>
class non_central_beta_distribution;

template <class RealType, class Policy>
class non_central_chi_squared_distribution;

template <class RealType, class Policy>
class non_central_f_distribution;

template <class RealType, class Policy>
class non_central_t_distribution;

template <class RealType, class Policy>
class normal_distribution;

template <class RealType, class Policy>
class pareto_distribution;

template <class RealType, class Policy>
class poisson_distribution;

template <class RealType, class Policy>
class rayleigh_distribution;

template <class RealType, class Policy>
class skew_normal_distribution;

template <class RealType, class Policy>
class students_t_distribution;

template <class RealType, class Policy>
class triangular_distribution;

template <class RealType, class Policy>
class uniform_distribution;

template <class RealType, class Policy>
class weibull_distribution;

}} // namespaces

#define BOOST_MATH_DECLARE_DISTRIBUTIONS(Type, Policy)\
   typedef boost::math::arcsine_distribution<Type, Policy> arcsine;\
   typedef boost::math::bernoulli_distribution<Type, Policy> bernoulli;\
   typedef boost::math::beta_distribution<Type, Policy> beta;\
   typedef boost::math::binomial_distribution<Type, Policy> binomial;\
   typedef boost::math::cauchy_distribution<Type, Policy> cauchy;\
   typedef boost::math::chi_squared_distribution<Type, Policy> chi_squared;\
   typedef boost::math::exponential_distribution<Type, Policy> exponential;\
   typedef boost::math::extreme_value_distribution<Type, Policy> extreme_value;\
   typedef boost::math::fisher_f_distribution<Type, Policy> fisher_f;\
   typedef boost::math::gamma_distribution<Type, Policy> gamma;\
   typedef boost::math::geometric_distribution<Type, Policy> geometric;\
   typedef boost::math::hypergeometric_distribution<Type, Policy> hypergeometric;\
   typedef boost::math::kolmogorov_smirnov_distribution<Type, Policy> kolmogorov_smirnov;\
   typedef boost::math::inverse_chi_squared_distribution<Type, Policy> inverse_chi_squared;\
   typedef boost::math::inverse_gaussian_distribution<Type, Policy> inverse_gaussian;\
   typedef boost::math::inverse_gamma_distribution<Type, Policy> inverse_gamma;\
   typedef boost::math::laplace_distribution<Type, Policy> laplace;\
   typedef boost::math::logistic_distribution<Type, Policy> logistic;\
   typedef boost::math::lognormal_distribution<Type, Policy> lognormal;\
   typedef boost::math::negative_binomial_distribution<Type, Policy> negative_binomial;\
   typedef boost::math::non_central_beta_distribution<Type, Policy> non_central_beta;\
   typedef boost::math::non_central_chi_squared_distribution<Type, Policy> non_central_chi_squared;\
   typedef boost::math::non_central_f_distribution<Type, Policy> non_central_f;\
   typedef boost::math::non_central_t_distribution<Type, Policy> non_central_t;\
   typedef boost::math::normal_distribution<Type, Policy> normal;\
   typedef boost::math::pareto_distribution<Type, Policy> pareto;\
   typedef boost::math::poisson_distribution<Type, Policy> poisson;\
   typedef boost::math::rayleigh_distribution<Type, Policy> rayleigh;\
   typedef boost::math::skew_normal_distribution<Type, Policy> skew_normal;\
   typedef boost::math::students_t_distribution<Type, Policy> students_t;\
   typedef boost::math::triangular_distribution<Type, Policy> triangular;\
   typedef boost::math::uniform_distribution<Type, Policy> uniform;\
   typedef boost::math::weibull_distribution<Type, Policy> weibull;

#endif // BOOST_MATH_DISTRIBUTIONS_FWD_HPP

/* fwd.hpp
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
*/