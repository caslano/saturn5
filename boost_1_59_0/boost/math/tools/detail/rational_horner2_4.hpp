//  (C) Copyright John Maddock 2007.
//  Use, modification and distribution are subject to the
//  Boost Software License, Version 1.0. (See accompanying file
//  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//
//  This file is machine generated, do not edit by hand

// Polynomial evaluation using second order Horners rule
#ifndef BOOST_MATH_TOOLS_RAT_EVAL_4_HPP
#define BOOST_MATH_TOOLS_RAT_EVAL_4_HPP

namespace boost{ namespace math{ namespace tools{ namespace detail{

template <class T, class U, class V>
inline V evaluate_rational_c_imp(const T*, const U*, const V&, const std::integral_constant<int, 0>*) BOOST_MATH_NOEXCEPT(V)
{
   return static_cast<V>(0);
}

template <class T, class U, class V>
inline V evaluate_rational_c_imp(const T* a, const U* b, const V&, const std::integral_constant<int, 1>*) BOOST_MATH_NOEXCEPT(V)
{
   return static_cast<V>(a[0]) / static_cast<V>(b[0]);
}

template <class T, class U, class V>
inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const std::integral_constant<int, 2>*) BOOST_MATH_NOEXCEPT(V)
{
   return static_cast<V>((a[1] * x + a[0]) / (b[1] * x + b[0]));
}

template <class T, class U, class V>
inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const std::integral_constant<int, 3>*) BOOST_MATH_NOEXCEPT(V)
{
   return static_cast<V>(((a[2] * x + a[1]) * x + a[0]) / ((b[2] * x + b[1]) * x + b[0]));
}

template <class T, class U, class V>
inline V evaluate_rational_c_imp(const T* a, const U* b, const V& x, const std::integral_constant<int, 4>*) BOOST_MATH_NOEXCEPT(V)
{
   return static_cast<V>((((a[3] * x + a[2]) * x + a[1]) * x + a[0]) / (((b[3] * x + b[2]) * x + b[1]) * x + b[0]));
}


}}}} // namespaces

#endif // include guard


/* rational_horner2_4.hpp
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
*/