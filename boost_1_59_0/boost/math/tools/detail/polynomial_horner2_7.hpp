//  (C) Copyright John Maddock 2007.
//  Use, modification and distribution are subject to the
//  Boost Software License, Version 1.0. (See accompanying file
//  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//
//  This file is machine generated, do not edit by hand

// Polynomial evaluation using second order Horners rule
#ifndef BOOST_MATH_TOOLS_POLY_EVAL_7_HPP
#define BOOST_MATH_TOOLS_POLY_EVAL_7_HPP

namespace boost{ namespace math{ namespace tools{ namespace detail{

template <class T, class V>
inline V evaluate_polynomial_c_imp(const T*, const V&, const std::integral_constant<int, 0>*) BOOST_MATH_NOEXCEPT(V)
{
   return static_cast<V>(0);
}

template <class T, class V>
inline V evaluate_polynomial_c_imp(const T* a, const V&, const std::integral_constant<int, 1>*) BOOST_MATH_NOEXCEPT(V)
{
   return static_cast<V>(a[0]);
}

template <class T, class V>
inline V evaluate_polynomial_c_imp(const T* a, const V& x, const std::integral_constant<int, 2>*) BOOST_MATH_NOEXCEPT(V)
{
   return static_cast<V>(a[1] * x + a[0]);
}

template <class T, class V>
inline V evaluate_polynomial_c_imp(const T* a, const V& x, const std::integral_constant<int, 3>*) BOOST_MATH_NOEXCEPT(V)
{
   return static_cast<V>((a[2] * x + a[1]) * x + a[0]);
}

template <class T, class V>
inline V evaluate_polynomial_c_imp(const T* a, const V& x, const std::integral_constant<int, 4>*) BOOST_MATH_NOEXCEPT(V)
{
   return static_cast<V>(((a[3] * x + a[2]) * x + a[1]) * x + a[0]);
}

template <class T, class V>
inline V evaluate_polynomial_c_imp(const T* a, const V& x, const std::integral_constant<int, 5>*) BOOST_MATH_NOEXCEPT(V)
{
   V x2 = x * x;
   return static_cast<V>((a[4] * x2 + a[2]) * x2 + a[0] + (a[3] * x2 + a[1]) * x);
}

template <class T, class V>
inline V evaluate_polynomial_c_imp(const T* a, const V& x, const std::integral_constant<int, 6>*) BOOST_MATH_NOEXCEPT(V)
{
   V x2 = x * x;
   return static_cast<V>(((a[5] * x2 + a[3]) * x2 + a[1]) * x + (a[4] * x2 + a[2]) * x2 + a[0]);
}

template <class T, class V>
inline V evaluate_polynomial_c_imp(const T* a, const V& x, const std::integral_constant<int, 7>*) BOOST_MATH_NOEXCEPT(V)
{
   V x2 = x * x;
   return static_cast<V>(((a[6] * x2 + a[4]) * x2 + a[2]) * x2 + a[0] + ((a[5] * x2 + a[3]) * x2 + a[1]) * x);
}


}}}} // namespaces

#endif // include guard


/* polynomial_horner2_7.hpp
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
*/