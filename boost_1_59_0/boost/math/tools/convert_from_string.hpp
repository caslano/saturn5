//  Copyright John Maddock 2016.
//  Use, modification and distribution are subject to the
//  Boost Software License, Version 1.0. (See accompanying file
//  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_MATH_TOOLS_CONVERT_FROM_STRING_INCLUDED
#define BOOST_MATH_TOOLS_CONVERT_FROM_STRING_INCLUDED

#ifdef _MSC_VER
#pragma once
#endif

#include <type_traits>
#ifndef BOOST_MATH_STANDALONE
#include <boost/lexical_cast.hpp>
#endif

namespace boost{ namespace math{ namespace tools{

   template <class T>
   struct convert_from_string_result
   {
      typedef typename std::conditional<std::is_constructible<T, const char*>::value, const char*, T>::type type;
   };

   template <class Real>
   Real convert_from_string(const char* p, const std::false_type&)
   {
#ifdef BOOST_MATH_NO_LEXICAL_CAST
      // This function should not compile, we don't have the necessary functionality to support it:
      static_assert(sizeof(Real) == 0, "boost.lexical_cast is not supported in standalone mode.");
      (void)p; // Supresses -Wunused-parameter
      return Real(0);
#else
      return boost::lexical_cast<Real>(p);
#endif
   }
   template <class Real>
   constexpr const char* convert_from_string(const char* p, const std::true_type&) noexcept
   {
      return p;
   }
   template <class Real>
   constexpr typename convert_from_string_result<Real>::type convert_from_string(const char* p) noexcept((std::is_constructible<Real, const char*>::value))
   {
      return convert_from_string<Real>(p, std::is_constructible<Real, const char*>());
   }

} // namespace tools
} // namespace math
} // namespace boost

#endif // BOOST_MATH_TOOLS_CONVERT_FROM_STRING_INCLUDED


/* convert_from_string.hpp
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
*/