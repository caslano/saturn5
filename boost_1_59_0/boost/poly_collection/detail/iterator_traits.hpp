/* Copyright 2016-2017 Joaquin M Lopez Munoz.
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * See http://www.boost.org/libs/poly_collection for library home page.
 */

#ifndef BOOST_POLY_COLLECTION_DETAIL_ITERATOR_TRAITS_HPP
#define BOOST_POLY_COLLECTION_DETAIL_ITERATOR_TRAITS_HPP

#if defined(_MSC_VER)
#pragma once
#endif

#include <iterator>
#include <type_traits>

namespace boost{

namespace poly_collection{

namespace common_impl{

template<typename Model,typename Allocator>
class poly_collection;

}

namespace detail{

/* (Internal) bunch of traits-grouped functions for const-preserving
 * interoperatibility between iterators and local iterators of a
 * poly_collection.
 */

template<typename Iterator>
struct poly_collection_of /* to be specialized for iterator impls */
{
 using type=void;
};

template<typename PolyCollection>
struct model_of;

template<typename Model,typename Allocator>
struct model_of<common_impl::poly_collection<Model,Allocator>>
{
  using type=Model;
};

template<typename Iterator>
struct iterator_traits
{
  using container_type=typename poly_collection_of<Iterator>::type;
  using is_const_iterator=typename std::is_const<
    typename std::remove_reference<
      typename std::iterator_traits<Iterator>::reference
    >::type
  >::type;
  using iterator=typename std::conditional<
    is_const_iterator::value,
    typename container_type::const_iterator,   
    typename container_type::iterator
  >::type;
  using base_segment_info_iterator=typename std::conditional<
    is_const_iterator::value,
    typename container_type::const_base_segment_info_iterator,   
    typename container_type::base_segment_info_iterator
  >::type;
  using local_base_iterator=typename std::conditional<
    is_const_iterator::value,
    typename container_type::const_local_base_iterator,   
    typename container_type::local_base_iterator
  >::type;
  template<typename T>
  using local_iterator=typename std::conditional<
    is_const_iterator::value,
    typename container_type::template const_local_iterator<T>,   
    typename container_type::template local_iterator<T>
  >::type;

  static base_segment_info_iterator
  base_segment_info_iterator_from(iterator it)noexcept{return it.mapit;} 

  static base_segment_info_iterator
  base_segment_info_iterator_from(local_base_iterator it)noexcept
    {return it.mapit;}

  static base_segment_info_iterator
  end_base_segment_info_iterator_from(iterator it)noexcept{return it.mapend;} 

  static local_base_iterator
  local_base_iterator_from(iterator it)noexcept
  {
    return {
      it.mapit,
      model_of<container_type>::type::nonconst_iterator(it.segpos)
    };
  }

  static iterator 
  iterator_from(
    local_base_iterator lbit,base_segment_info_iterator mapend)noexcept
  {
    return {lbit.mapit,mapend.base(),lbit.base()};
  }
};

} /* namespace poly_collection::detail */

} /* namespace poly_collection */

} /* namespace boost */

#endif

/* iterator_traits.hpp
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
*/