/* Copyright 2016-2020 Joaquin M Lopez Munoz.
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * See http://www.boost.org/libs/poly_collection for library home page.
 */

#ifndef BOOST_POLY_COLLECTION_DETAIL_SEGMENT_BACKEND_HPP
#define BOOST_POLY_COLLECTION_DETAIL_SEGMENT_BACKEND_HPP

#if defined(_MSC_VER)
#pragma once
#endif

#include <cstddef>
#include <memory>
#include <utility>

namespace boost{

namespace poly_collection{

namespace detail{

/* Internal *virtual* interface of segment<Model,Allocator> (please note that
 * a non-virtual interface exists accessible through downcasting). Member
 * functions have been defined to minimize virtual function calls according to
 * usage patterns by poly_collection. For instance, ranges are returned rather
 * than iterators to allow for caching of and end sentinel at a higher level.
 * Passed elements are type erased with [const_]value_pointer.
 */

template<typename Model,typename Allocator>
struct segment_backend
{
  using segment_backend_unique_ptr=
    std::unique_ptr<segment_backend,void(*)(segment_backend*)>;
  using value_pointer=void*;
  using const_value_pointer=const void*;
  using base_iterator=typename Model::base_iterator;
  using const_base_iterator=typename Model::const_base_iterator;
  template<typename T>
  using const_iterator=typename Model::template const_iterator<T>;
  using base_sentinel=typename Model::base_sentinel;
  using range=std::pair<base_iterator,base_sentinel>;

  segment_backend()=default;
  segment_backend(const segment_backend&)=delete;
  segment_backend& operator=(const segment_backend&)=delete;

  virtual                            ~segment_backend()=default;
  virtual segment_backend_unique_ptr copy()const=0;
  virtual segment_backend_unique_ptr copy(const Allocator&)const=0;
  virtual segment_backend_unique_ptr empty_copy(const Allocator&)const=0;
  virtual segment_backend_unique_ptr move(const Allocator&)=0;
  virtual bool                       equal(const segment_backend&)const=0;

  virtual Allocator     get_allocator()const noexcept=0;
  virtual base_iterator begin()const noexcept=0;
  virtual base_iterator end()const noexcept=0;
  virtual bool          empty()const noexcept=0;
  virtual std::size_t   size()const noexcept=0;
  virtual std::size_t   max_size()const noexcept=0;
  virtual std::size_t   capacity()const noexcept=0;
  virtual base_sentinel reserve(std::size_t)=0;
  virtual base_sentinel shrink_to_fit()=0;
  virtual range         push_back(const_value_pointer)=0;
  virtual range         push_back_move(value_pointer)=0;
  virtual range         insert(const_base_iterator,const_value_pointer)=0;
  virtual range         insert_move(const_base_iterator,value_pointer)=0;
  virtual range         erase(const_base_iterator)=0;
  virtual range         erase(const_base_iterator,const_base_iterator)=0;
  virtual range         erase_till_end(const_base_iterator)=0;
  virtual range         erase_from_begin(const_base_iterator)=0;
  virtual base_sentinel clear()noexcept=0;
};

} /* namespace poly_collection::detail */

} /* namespace poly_collection */

} /* namespace boost */

#endif

/* segment_backend.hpp
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
*/