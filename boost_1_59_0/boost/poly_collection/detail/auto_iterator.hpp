/* Copyright 2016 Joaquin M Lopez Munoz.
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * See http://www.boost.org/libs/poly_collection for library home page.
 */

#ifndef BOOST_POLY_COLLECTION_DETAIL_AUTO_ITERATOR_HPP
#define BOOST_POLY_COLLECTION_DETAIL_AUTO_ITERATOR_HPP

#if defined(_MSC_VER)
#pragma once
#endif

#include <boost/iterator/iterator_adaptor.hpp>

namespace boost{

namespace poly_collection{

namespace detail{

/* auto_iterator<Iterator> (for want of a better name) behaves like Iterator
 * save for the fact that it derefs to Iterator& rather than
 * Iterator::reference. This is useful to "lift" std algorithms so that
 * user-defined predicates are passed iterators that can then be dereferenced
 * internally.
 */

template<typename Iterator>
class auto_iterator:
  public boost::iterator_adaptor<auto_iterator<Iterator>,Iterator,Iterator>
{
public:
  auto_iterator()=default;
  auto_iterator(const Iterator& it):auto_iterator::iterator_adaptor_{it}{}
  auto_iterator(const auto_iterator&)=default;
  auto_iterator& operator=(const auto_iterator&)=default;

private:
  friend class boost::iterator_core_access;

  Iterator& dereference()const noexcept
  {
    return const_cast<auto_iterator*>(this)->base_reference();
  }
};

} /* namespace poly_collection::detail */

} /* namespace poly_collection */

} /* namespace boost */

#endif

/* auto_iterator.hpp
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
*/