/* Copyright 2016 Joaquin M Lopez Munoz.
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * See http://www.boost.org/libs/poly_collection for library home page.
 */

#ifndef BOOST_POLY_COLLECTION_DETAIL_ANY_ITERATOR_HPP
#define BOOST_POLY_COLLECTION_DETAIL_ANY_ITERATOR_HPP

#if defined(_MSC_VER)
#pragma once
#endif

#include <boost/iterator/iterator_adaptor.hpp>
#include <boost/type_erasure/any_cast.hpp>
#include <type_traits>
#include <utility>

namespace boost{

namespace poly_collection{

namespace detail{

/* type_erasure::any<Concept>* adaptor convertible to pointer to wrapped
 * entity.
 */

template<typename Any>
class any_iterator:public boost::iterator_adaptor<any_iterator<Any>,Any*>
{
public:
  any_iterator()=default;
  explicit any_iterator(Any* p)noexcept:any_iterator::iterator_adaptor_{p}{}
  any_iterator(const any_iterator&)=default;
  any_iterator& operator=(const any_iterator&)=default;

  template<
    typename NonConstAny,
    typename std::enable_if<
      std::is_same<Any,const NonConstAny>::value>::type* =nullptr
  >
  any_iterator(const any_iterator<NonConstAny>& x)noexcept:
    any_iterator::iterator_adaptor_{x.base()}{}

  template<
    typename NonConstAny,
    typename std::enable_if<
      std::is_same<Any,const NonConstAny>::value>::type* =nullptr
  >
  any_iterator& operator=(const any_iterator<NonConstAny>& x)noexcept
  {
    this->base_reference()=x.base();
    return *this;
  }

  /* interoperability with Any* */

  any_iterator& operator=(Any* p)noexcept
    {this->base_reference()=p;return *this;}
  operator Any*()const noexcept{return this->base();}

  /* interoperability with Concrete* */

  template<
    typename Concrete,
    typename std::enable_if<
      /* can't compile-time check concept compliance */
      !std::is_const<Any>::value||std::is_const<Concrete>::value
    >::type* =nullptr
  >
  explicit operator Concrete*()const noexcept
  {
    return const_cast<Concrete*>(
      static_cast<typename std::remove_const<Concrete>::type*>(
        type_erasure::any_cast<void*>(this->base())));
  }

private:
  template<typename>
  friend class any_iterator;
};

} /* namespace poly_collection::detail */

} /* namespace poly_collection */

} /* namespace boost */

#endif

/* any_iterator.hpp
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
*/