/* Copyright 2016 Joaquin M Lopez Munoz.
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * See http://www.boost.org/libs/poly_collection for library home page.
 */

#ifndef BOOST_POLY_COLLECTION_DETAIL_CALLABLE_WRAPPER_ITERATOR_HPP
#define BOOST_POLY_COLLECTION_DETAIL_CALLABLE_WRAPPER_ITERATOR_HPP

#if defined(_MSC_VER)
#pragma once
#endif

#include <boost/iterator/iterator_adaptor.hpp>
#include <type_traits>

namespace boost{

namespace poly_collection{

namespace detail{

/* callable_wrapper<Sig>* adaptor convertible to pointer to wrapped entity */

template<typename CWrapper>
class callable_wrapper_iterator:public boost::iterator_adaptor<
  callable_wrapper_iterator<CWrapper>,CWrapper*
>
{
public:
  callable_wrapper_iterator()=default;
  explicit callable_wrapper_iterator(CWrapper* p)noexcept:
    callable_wrapper_iterator::iterator_adaptor_{p}{}
  callable_wrapper_iterator(const callable_wrapper_iterator&)=default;
  callable_wrapper_iterator& operator=(
    const callable_wrapper_iterator&)=default;

  template<
    typename NonConstCWrapper,
    typename std::enable_if<
      std::is_same<CWrapper,const NonConstCWrapper>::value>::type* =nullptr
  >
  callable_wrapper_iterator(
    const callable_wrapper_iterator<NonConstCWrapper>& x)noexcept:
    callable_wrapper_iterator::iterator_adaptor_{x.base()}{}

  template<
    typename NonConstCWrapper,
    typename std::enable_if<
      std::is_same<CWrapper,const NonConstCWrapper>::value>::type* =nullptr
  >
  callable_wrapper_iterator& operator=(
    const callable_wrapper_iterator<NonConstCWrapper>& x)noexcept
  {
    this->base_reference()=x.base();
    return *this;
  }

  /* interoperability with CWrapper* */

  callable_wrapper_iterator& operator=(CWrapper* p)noexcept
    {this->base_reference()=p;return *this;}
  operator CWrapper*()const noexcept{return this->base();}

  /* interoperability with Callable* */

  template<
    typename Callable,
    typename std::enable_if<
      std::is_constructible<CWrapper,Callable&>::value&&
      (!std::is_const<CWrapper>::value||std::is_const<Callable>::value)
    >::type* =nullptr
  >
  explicit operator Callable*()const noexcept
  {
    return const_cast<Callable*>(
      static_cast<const Callable*>(
        const_cast<const void*>(
          this->base()->data())));
  }

private:
  template<typename>
  friend class callable_wrapper_iterator;
};

} /* namespace poly_collection::detail */

} /* namespace poly_collection */

} /* namespace boost */

#endif

/* callable_wrapper_iterator.hpp
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
*/