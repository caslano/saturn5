/* Copyright 2016-2018 Joaquin M Lopez Munoz.
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * See http://www.boost.org/libs/poly_collection for library home page.
 */

#ifndef BOOST_POLY_COLLECTION_DETAIL_FUNCTION_MODEL_HPP
#define BOOST_POLY_COLLECTION_DETAIL_FUNCTION_MODEL_HPP

#if defined(_MSC_VER)
#pragma once
#endif

#include <boost/core/addressof.hpp>
#include <boost/poly_collection/detail/callable_wrapper.hpp>
#include <boost/poly_collection/detail/callable_wrapper_iterator.hpp>
#include <boost/poly_collection/detail/is_invocable.hpp>
#include <boost/poly_collection/detail/segment_backend.hpp>
#include <boost/poly_collection/detail/split_segment.hpp>
#include <memory>
#include <type_traits>
#include <typeinfo>
#include <utility>

namespace boost{

namespace poly_collection{

namespace detail{

/* model for function_collection */

template<typename Signature>
struct function_model;

/* is_terminal defined out-class to allow for partial specialization */

template<typename T>
struct function_model_is_terminal:std::true_type{};

template<typename Signature>
struct function_model_is_terminal<callable_wrapper<Signature>>:
  std::false_type{};

template<typename R,typename... Args>
struct function_model<R(Args...)>
{
  using value_type=callable_wrapper<R(Args...)>;

  template<typename Callable>
  using is_implementation=is_invocable_r<R,Callable&,Args...>;

  template<typename T>
  using is_terminal=function_model_is_terminal<T>;

  template<typename T>
  static const std::type_info& subtypeid(const T&){return typeid(T);}

  template<typename Signature>
  static const std::type_info& subtypeid(
    const callable_wrapper<Signature>& f)
  {
    return f.target_type();
  }

  template<typename T>
  static void* subaddress(T& x){return boost::addressof(x);}

  template<typename T>
  static const void* subaddress(const T& x){return boost::addressof(x);}

  template<typename Signature>
  static void* subaddress(callable_wrapper<Signature>& f)
  {
    return f.data();
  }
  
  template<typename Signature>
  static const void* subaddress(const callable_wrapper<Signature>& f)
  {
    return f.data();
  }

  using base_iterator=callable_wrapper_iterator<value_type>;
  using const_base_iterator=callable_wrapper_iterator<const value_type>;
  using base_sentinel=value_type*;
  using const_base_sentinel=const value_type*;
  template<typename Callable>
  using iterator=Callable*;
  template<typename Callable>
  using const_iterator=const Callable*;
  template<typename Allocator>
  using segment_backend=detail::segment_backend<function_model,Allocator>;
  template<typename Callable,typename Allocator>
  using segment_backend_implementation=
    split_segment<function_model,Callable,Allocator>;

  static base_iterator nonconst_iterator(const_base_iterator it)
  {
    return base_iterator{
      const_cast<value_type*>(static_cast<const value_type*>(it))};
  }

  template<typename T>
  static iterator<T> nonconst_iterator(const_iterator<T> it)
  {
    return const_cast<iterator<T>>(it);
  }

private:
  template<typename,typename,typename>
  friend class split_segment;

  template<typename Callable>
  static value_type make_value_type(Callable& x){return value_type{x};}
};

} /* namespace poly_collection::detail */

} /* namespace poly_collection */

} /* namespace boost */

#endif

/* function_model.hpp
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
*/