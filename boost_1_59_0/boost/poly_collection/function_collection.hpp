/* Copyright 2016-2017 Joaquin M Lopez Munoz.
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * See http://www.boost.org/libs/poly_collection for library home page.
 */

#ifndef BOOST_POLY_COLLECTION_FUNCTION_COLLECTION_HPP
#define BOOST_POLY_COLLECTION_FUNCTION_COLLECTION_HPP

#if defined(_MSC_VER)
#pragma once
#endif

#include <boost/poly_collection/function_collection_fwd.hpp>
#include <boost/poly_collection/detail/function_model.hpp>
#include <boost/poly_collection/detail/poly_collection.hpp>
#include <utility>

namespace boost{

namespace poly_collection{

template<typename Signature,typename Allocator>
class function_collection:
 public common_impl::poly_collection<
   detail::function_model<Signature>,Allocator>
{
  using base_type=common_impl::poly_collection<
    detail::function_model<Signature>,Allocator>;

  base_type&       base()noexcept{return *this;}
  const base_type& base()const noexcept{return *this;}

public:
  using base_type::base_type;

  function_collection()=default;
  function_collection(const function_collection& x)=default;
  function_collection(function_collection&& x)=default;
  function_collection& operator=(const function_collection& x)=default;
  function_collection& operator=(function_collection&& x)=default;

  template<typename S,typename A> 
  friend bool operator==(
    const function_collection<S,A>&,const function_collection<S,A>&);
};

template<typename Signature,typename Allocator>
bool operator==(
  const function_collection<Signature,Allocator>& x,
  const function_collection<Signature,Allocator>& y)
{
  return x.base()==y.base();
}

template<typename Signature,typename Allocator>
bool operator!=(
  const function_collection<Signature,Allocator>& x,
  const function_collection<Signature,Allocator>& y)
{
 return !(x==y);
}

template<typename Signature,typename Allocator>
void swap(
  function_collection<Signature,Allocator>& x,
  function_collection<Signature,Allocator>& y)
{
  x.swap(y);
}

} /* namespace  */

using poly_collection::function_collection;

} /* namespace boost */

#endif

/* function_collection.hpp
FJ4ivtYAvBAE9Sg8veq8icDA+3z6AFSINwuFjOA7cHK4EzPj0VdnFxGWqPTFf0cMXgjbKOZ9h+dqhfzt0eiGHZQrzXJD3mlNAl6MvgsPb+a14A6m2/EnUVhVYe5/Ju9rVEAtBUER9+2XVgiWMnf2ArN75n6Q5IJcPkBzg0aTWSrkPx6tZoMseJmu8m2Upis2aInGx274OBJXxru+6yK4nqPrnIf8Xa8JOZtaSvx68gfF4xOI8bVXFIU+ETnNcDioqKEqpy1nJSSOZy+XsxeQGcYUuIUXfZzfn2/VS71yFxq1y7oLe0xG0E2saSXCdm9aJV6dKTv+BL02C5avMXZh/ptaAkECuhy+pNiXcdOk63HFJLAYYDobG569nA0+qqg+2Dp+fYKSh9WqFiS09PavpRXY4LfJi04jjYC/ohQvW/aqzrbA+Ds0bsvewC20cRN//lWSCjtguXXxb8B3Np+yGbqD491fjXPvBfiECHNa+b7IYOYnGp62A3sSAs7bNRw4UO8Dr3HlmvfywheRvVxKE3b8ba9x+jexI18oyh57pxbv7uyzHNoT5TKOJiH/9xilTS6jw874fh+P2vZ1jPCc3aAuoNi9h0LKYUSf4kJ9QnML707DEZ7T1BqW3x7GrM7lZnn2n/wL8dbc7L0Ar7Mo2ZvwTx3+2aAhGJrlmfvJgJXk+CnJAX9PJTm29D/GqdKdvVewWBagxeo5JWzyTCRRossOAMdbORy1bAAJLPbTQL2616RF56ZU7MlZJtRzXyd6bQp0xwqSQxXAkDEKO6/gm7qIrHVq6kFIpd4JA5ckp6JLy9INUImQj/cIhypCmTAPup3kKJIN3d/Sh4a3XONqmK4e7LN7DFee5KhKzZou9bKjsQsX7Ke7oz+X0vSOwCA78gqsfVlld9x42quXrsPgEdplgrDHnJyeVoaMUA+wkWPfWR/Bhukl/ijOhrfSemz9YQU91GRY+7f4wkON4Ly5h9twHnIdcl8E55EslO7GFYhJI41uMiStVyj6NsUOl/C5ggiQcuEmaw5FLDhMrAxeA51VSWdONuXNLEIoW9J+tCfNXm7OmJ0jPYLkCFx8336icitnsNUoUH440N6i5o+t23jkEHJc3jreP6kTureZ/LReBNoMjOYu0l3XKT7ZO73I8ozruq5ETbkJVL3pJNLxlNqP2DYMiVVW4xyTyuXPzAUkgFLI6QqoIhBJFUifi6Hny1bxnrPh1O1pZ9ugY/tBBR2KTCCspDIXYW9aU/iT8uH5g8ro6Uso/5TDkVhNDQxGYs9uReyToDcNryi92bBf1VnxcKxnGqd5NlCtvXhwRG3sF18r4OpwLsadn7xXVOFzH/U3fqOSgAWBZZjpcKuCVUQe0PzJo4pwHogYPVPdHkbf+LwVZAYpfXmqdV/mf46xmYJS71b82IVLVcwwDTLIhsV/peXCarq2AbilB3u0Tlkqo3aRCpkCA5ij7r8w/RiG/lW5UgLqiXcU/CjFEXVdEEFUavxRl7HbUrKJBOASHZ+RTEg91UACsMhcgvRy0TlULhf7l43Cqzyc3TinyofYHlgW+UdG8SwxSpY5MKQv6bZQC979/xkRGnzJLHHej2AERulXq2JuMQLNpEAr81B4zkiNROloIsf4Cy/Rjih9IdvaSijgx21ZbP8RakXMLHNOoyFCgS5F6hZqNHvskIJOSwfaL0ZIfrdf9bvwHiRr0rdvcEeTgpm4DULLlxpI8t+rJ33GLJ+DRvK+xQncLH8n5l1BbQZVmYLz6B2sEVaVQFdEwXJoAOo1Yt43yNEFVW5HBfBgA7GgC12qqyiCnKLBxFHBpuM3eAtKaJfw/RdBg78HL1N8oHXOrm1z2jHnQMw5tHXObpE5u0POn4tU8r8fOSIeQRanoGwh6k3PX6b47dIMqOioKJfnncGa8i6pjdZjVc7r0qogqRvOzuWhVGkoNHD3iwq7Nle0L8wXVnNiS0V2pM+QeVISWo1S8fo/k2tpBfRjDt7sb1jwunJNCc7+WznIvqJjLaAyAuvkXUbe4fAWLCUgC0GsxxuKlD5Iv9GHf1YpfaAGoaxk5HeLSX1w7BPhBcSPFAe/QCb0MYpPGfFrVip1J/xG3a+1qls2fPgX5SYWHMJfKKaYfDTvDFrMXJdMwiovNA9U0YwSAXE5EBoITET45nJSSvMihRF1eEPDxJznPJAzMa2qoIZyYdy3iBzY2U89SmefLm+/s4HK1oD4BqfIq2vCU2T8U2oVA3+jio2tqgCVO27eECiXpJZr/Kz9cnPUcvA+ovU2k6nVBX6trwMNr9kT1f1/2TB5DS0vYXkeO+8WYVcjWpEa02rchhHwgXW6EZcCQ26B51iYwRvJkXYohWU0XHpNrykeU2gcWS0UdNap3P4NpKbHwfQT9MJPfzJF5Ae5/xd8CijOX7tfI3Oi83xgI6xocdFMq9pb0Nc0SV3VvgaZaL+X+2bzle2JABmEfRrZWS8JALSO82CNlqiu0RI18sESv+A6rUWXb7cjYRku1H18v0o2WF5TtuO3aZTt+I2qv/kfyTK4tEHD4/HkjjK9pufOmpKDvJ490xrKDSmYiMv+RuYvpyp/Xk0uy41QG7m+SVNo0H25a06jangR4ozw62gMYH8aqAbA9bFCnYYZq0PuD42qh18jKywnLZzefDBY2ZEgT0uki1TIATpa2HWuo9tZL1KoWrqZvXMjvNNXIR+DnXxMwvO8UNDCj1xNWM2NuH3QTnWNMel31qBhAOQoiM2Ev9LgghrnQLGgEZDomtmgyZvJlE3zBhrfK40hG0dKoC939dvPljaispBf5XwrdF7i+G5+7mlhGy+MtnvfuO+9MT1I4cS9hItWRjjTbRdhlW5Kf8YoFPSkPXbDwj8ryIzWK8i8ii5To5ZDukaKzR2Vgw9C/gzMjjt3j+MZEDdyl4dC7RSVqnahupBdqPtn4fMEaF4EzcOD4rP4QTawNKRE1KncaGJn9nFLhAl6yHeaDKdeJcu/UJAe4osDr5Jzh8ufLOT/qFy4VkQ3sF0v5JNE8+uE/KW0kWuUnoJemWCeH0kKsQfFGXe//HsJd4vGyffj7epzLcvex7s2vfhmhWZmJU9nKRURTqKQwI19w/ZxY5+/jAzZhmGvkrY0nfPXYu5Sn1ucrYAkl33DKTGXe2DXkcWMBcoAJ9vRD9nrf5ZvtLBVWJFVm5vxiHNK7kLdGKfD6o6tWcU3RfgmWswp1YtYBfk6tq6MQL5Ogd76VYoOcTPv30vw7r+Bs1MqG3GZKpjM4fGql497coQyOZlNKuPK5GTyhSOX1FnJc1hvksOOF/HTHGUgL7J+lHn2i/4PuT9TP95fDdqat1P18T89TxJ5DnvYq7pX14Vs3mdKwz5vVjm29hVuip4NLKFhVZ8CPzxmDcYeeAVr9bzIj9cDnLufDanBdWHR/mopJ6ZUPK/kiONZ2Xch01hd2HHwD6VhCxh6+2r8X9PhN8Ojr3Auvw65/A9tD4g9gJwQMhkfYoFP0BiPjbHUXTRay/OKkS3c1hOfKQeJ1G5wfxr2XUn4gNFQnIm82rYOD4pFsy2vt7HOvcg3eN55GQ8L2enAa3qCs79nipY2mP/8MZrSjpJ7F9dGZ0HL/llRyPd3LDHkpmcsS8hNf0Tqrprs3b1wz8k/EV0p9qTyEzeuqqBNv8917g7gxyxoyXV1kPOm9ATpeshBH0bBh/70IWrJda6r0QFBlI/4nw2iwXehwXVVv0wnn88871T9EKzuvmT/+0aP6uzsn4Q4nVm+ivotnn9wndVZ3dlnze7ZP5Gnk5Afx31pvskncurJhD0kUOtwj1mhp2iyQwIoXn+JppVozEh2CuioyKouEQE2cWvb6t18fzpsbYtmU7xEztFqvVg2mo2C1LQTgT54NMa2s51We/NWByitKi0K+WMUt7UC9JalszjZTfAffcZaXsTDYsJLeAPT48mJrobpdo+hw/18bFnTyaldyC8BwCdZgkkWwQ79hnaj2UlUPAfOpmGdNV0sj4K1q6HiRX61n5i/T8j/ik/K0Uz0R453w6fc4SA83p5sxl4ab09lRFRpT+ZQUmkccvYp2fD7yPq3qfU/5Q3BomeoyrjIwv6NNAABxmBHUMMynd2A08zSn/RC/miAijl9Zl9h5e1B3MKw9BXTPoPVozmNId79N3If454I98PbeVv+4VcUv4kZDA9znIJ6HqB6phuFlZMw5kL2KTLGqNafU/4spR62cy8vIvXA7Mu6tM5nSfvRkXGrNArHVjyQLfikndHdtkcFmKMnP9TSk+lKIkbMrSVfr1SsJYVbgmqw3jjziieNiqXE7h4Y0NvkX9CvwCofZa9/zGmRnStXUEar/X/uuhZlW3df24Ncjoie5KFStJtMmh+uJJMmEBba0FDL78FtKpBlFs/yEmYpCRgJxk21lvyTUndl7eKow0nSvBtvdGGPVihg60lg6yo7TkWauxyn0I+rG2hmdXhMR4hz3Ay/QqBLyOFoKDC6HiXci5q2W9imNlvYkbKO/PmUrYiIy9PTLgqD5uA14h950OngzC7kFYfsT5pWQZcUOfeaVoCabsJjXDd2QA5Mdt5qlh05eK0Heor/CW9LZzk40AznFgmV8y2knL8BuXdxZ1DD/R50U3AWwf8toHtQNCC7fNHsMaXILeLISlFweJOm7UhpTpq2Wo4f70HWdxbJFS4WJeTjSaVgpeR0NeuFAh8uKUtV2/IMeGuqoYYnWOVR7sU6zcVS2kuq0AEIt0DffiK7seUntpFEnAPdeX5SptxDrCdnsEP4tsVvhOqgvFWOHwM1+b/XRLaF3WiqcQB2xkNTN0U2BdUK1IxTYCJvJsiPwwhYcZBtJUp3BoVBziK77CyiI4C8pS+f1WnUzS9HEev3KVoEnUU4/sBitXVpKQZ/60qPc5UBW6AXLz577YBP8QGfYjt2h0x2s0+pM2UqS96j2Lf80cDKvBPWyE5sYW9+giG19spA0TtFPh/+WdYr+uMLsp6oYHBbKljLFn1GVLBWKPgeLz2OXxpZw1R4+fg6ii8KE2E6oLwypcWfwNcDI2R0lUyVokHLSoFnV7CvsPxlUq6dWHcRMvYfdhBnFqmD2quM6PuPaSG2JWzPLsLbftAolahkeY/k9bQt19ij3v84wgJfhNiNKAkLW/bMp60aDZeUWpW0pF00XayIE/Kvw0iEGc6ciAPUaXQW9gWcmtPvkJww785aSnPTWrZ6e2TtIeUr4WN+/0OhXqOYIh1rqRk8mBjNHBfCN5AYtnFnc7USpYajOyN7F8Az4bVufrDRQi13pON7q/VSPJkcBTI5OlaTHBpmWQ35/wb56WakHhzxr8B7botJGuHvF6Sy/FhekXosr+dmovwiFHbjtilr5SLeS6EYraGz3Xzm26iVK6RRroaYrBjnIwgsoeAQP8exlh073S5EOrQezyBeuB8Veee0MpTuNJRYkqeW1XwggBWdNAxgvkqFef+P2m3h7R2RLUAxLRW7Wy32w4ftFpvdqthejYJ+oQAvE6HjnkvEgiXJRuddjgynRrJiXcWgx37Y3o5F4o5WtmeVen8kpfNIpKHd3N4Z0qKARak++kMqEehBjQ5VUs9/QPvAEQZ4NL6/tz289VbE3oQ3oIPOh9yO1eZ0EP14f+3s1bEgXYr8/UHpC11HwMn6IzRwxVnW+qPhGw18DXq14MAlggYf/d22jGGSPWJP2vE+R3ioP5a1LGk7SeO1vLsI0LXs/E6ehqt7Gz80fekjuksCMvGqdO+HHGECJ7Gd68PfvtscMWR9wMtTfZuDoYgb/JgzTaFq4A3FVtXaF2eO1TVzK/cT4ZdqWnYmWXDmdD2vhDheQZacMc5nCmHl2WJyjra6DNnwUUdWHSMdro3vtTjsDbKm+FpvkD4fcWtGYAQejriJG8HY6+RqNFAYNHtr7tKdOifuB3R+nq4R/bVAz8+ubPghlIeOwWNOvTM6zev/nJ8l00l9mwzfFiiGwRiowlvAjV/R3PcE71v6iFfnZa99RDJocwGNzplmlR3e8M26IBFmVLoNq/GrqyTa6jrdHIzPKKAePcuLSA+YZcN8pTo6Y7SJNrgfLODHE+X9+V5pUHHiyFJnD1uwbEVXa7AkgAcUxfTuUnNAvT2wjPtAH4MfSJENvbFG+Q01ws2c7LID1/gAUUxQxYNKNhzPx7UcKDU2uZmfSsf1xAuaiCWbASMZ3IVgtMmHmRakly2jdzIQUkZfqSOe+tESxOj7EbboA5zn+koxHJF17MkPSDY04gnjN/B+lgJScKrxO0X5qKOwkBhDRcxdqrkF8wqryvjFSOxcNdDzveHzQ7e9x80puHczf7vSlVDjvxbzxvtQcmc6NJ7Iqj9STTB17HgxXRqBNtIOysHjJWhmKOeX/rj2mVQFkfv22D2xQ58hTxz2wdV27rOC7x9P5N9fae87fnj2X/lkiVMVbdMmH+P3JNrl046CKiJOvJeGgjaxDrkYjFAK8LeGXIyX4u7zDZ52kvOTacnqNnyJr64BPz5HprQBX0T+Cjvyk/GoJUX9oANJZgzgXI5yg0Rd4kbVV6EfWSjq7bLhBSjpgGYHWeXYFc+RO637OR5t/Dqr3NXqjp8Lr2LQB3mnw1OgjvcvMQdD3ZVFBO6JNDRQmMj/CA4lIThcXRYJh/ocDoeTea3g8EUeweHbPD7+zyN/IVeiCgaZg4QCoLSBRrcNKjR6XFahsSwvDI1n8wgai/NaQePxPBUa9+SFodFt2b+DhgKLqRR0ThWpdIx2JNRjKhxmyr8o5J+gYYCgzZu5k58wKjEJ28td+/HWkK6QsdySqnE135UzU8hfQseIxgkvjKIHyzKrq3nCspGuZtuywa7mO5fd6Gp2CAWJtBUa/+h87gXKvFuBPx/miWZIDPjxvBc+NMDDTfiAJ8Di8eGgq3mSkB+FVoKV9XQEYoqwspIe7hfyP9Aqx2EwcLCwvRf0FTjAHfuHXFBgLzuEIrTjuZrtgmctPUzIWeRqHr/0aQDvRFdzspTk8n7qatYKy49ze99fnEoX+2AX93A7o4+V8bMlEv/qxYlj+iY6UOvfS1bdKuUET+z5HD2vYB3QuX8pt/HcDuUCG13N1iXzETJdADI5syC9B6a/CA96fEC3n+8lWPQsxnO2zXcJ+VXU50nS467me6Qprub7pLEuL9SjXXAr9zl28dYa2LNHaf4VBlm2ghq+VSMU4DFn8iYbwuG8AmtOCvJx4HM8f74fn9Ge8wmeicH7CiJQT5druC5fFQqeQPd4T+zt43XwY/Eq7ru+T1D96Zhdya60BIMF2fVOdJlcNEu5lClrG786xz+Pt/XNPGjrTQ7LHiDu/Ocw1m+962t9YCIfUPEyZSZ994vWA3Le5r+VV1I7R0HRs6S+xC+fp7wf3IoYmTbQdTkoFKRB5sJsPCU8TjLBX4s0DP5OkFLgr00aAH/vlPrC30eck3MvW6QeuZcnSELuZZvUKffynZIh97LDOQIqHztH8f7sNU85nvrkP0LOy76QxhDYFPYf3WqVswfSLXCDlYnhyrvX6hgfbwpt82xlmzbxyzj8d9KxopEap3ixTCvdDO2+OlcZ3QugL10s01GipCae2IKbz5iMcHeoydNJt4r98g8RyJIPsQfwUs2k8CTneJsDLMKS2m+T
*/