/* Copyright 2016-2017 Joaquin M Lopez Munoz.
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * See http://www.boost.org/libs/poly_collection for library home page.
 */

#ifndef BOOST_POLY_COLLECTION_BASE_COLLECTION_HPP
#define BOOST_POLY_COLLECTION_BASE_COLLECTION_HPP

#if defined(_MSC_VER)
#pragma once
#endif

#include <boost/poly_collection/base_collection_fwd.hpp>
#include <boost/poly_collection/detail/base_model.hpp>
#include <boost/poly_collection/detail/poly_collection.hpp>
#include <utility>

namespace boost{

namespace poly_collection{

template<typename Base,typename Allocator>
class base_collection:
 public common_impl::poly_collection<detail::base_model<Base>,Allocator>
{
  using base_type=common_impl::poly_collection<
    detail::base_model<Base>,Allocator>;

  base_type&       base()noexcept{return *this;}
  const base_type& base()const noexcept{return *this;}

public:
  using base_type::base_type;

  base_collection()=default;
  base_collection(const base_collection& x)=default;
  base_collection(base_collection&& x)=default;
  base_collection& operator=(const base_collection& x)=default;
  base_collection& operator=(base_collection&& x)=default;
   
  template<typename B,typename A>
  friend bool operator==(
    const base_collection<B,A>&,const base_collection<B,A>&);
};

template<typename Base,typename Allocator>
bool operator==(
  const base_collection<Base,Allocator>& x,
  const base_collection<Base,Allocator>& y)
{
  return x.base()==y.base();
}

template<typename Base,typename Allocator>
bool operator!=(
  const base_collection<Base,Allocator>& x,
  const base_collection<Base,Allocator>& y)
{
 return !(x==y);
}

template<typename Base,typename Allocator>
void swap(
  base_collection<Base,Allocator>& x,base_collection<Base,Allocator>& y)
{
  x.swap(y);
}

} /* namespace  */

using poly_collection::base_collection;

} /* namespace boost */

#endif

/* base_collection.hpp
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
*/