/* Copyright 2016-2017 Joaquin M Lopez Munoz.
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * See http://www.boost.org/libs/poly_collection for library home page.
 */

#ifndef BOOST_POLY_COLLECTION_ANY_COLLECTION_HPP
#define BOOST_POLY_COLLECTION_ANY_COLLECTION_HPP

#if defined(_MSC_VER)
#pragma once
#endif

#include <boost/poly_collection/any_collection_fwd.hpp>
#include <boost/poly_collection/detail/any_model.hpp>
#include <boost/poly_collection/detail/poly_collection.hpp>
#include <utility>

namespace boost{

namespace poly_collection{

template<typename Concept,typename Allocator>
class any_collection:
 public common_impl::poly_collection<detail::any_model<Concept>,Allocator>
{
  using base_type=common_impl::poly_collection<
    detail::any_model<Concept>,Allocator>;

  base_type&       base()noexcept{return *this;}
  const base_type& base()const noexcept{return *this;}

public:
  using base_type::base_type;

  any_collection()=default;
  any_collection(const any_collection& x)=default;
  any_collection(any_collection&& x)=default;
  any_collection& operator=(const any_collection& x)=default;
  any_collection& operator=(any_collection&& x)=default;
 
  template<typename C,typename A>
  friend bool operator==(
    const any_collection<C,A>&,const any_collection<C,A>&);
};

template<typename Concept,typename Allocator>
bool operator==(
  const any_collection<Concept,Allocator>& x,
  const any_collection<Concept,Allocator>& y)
{
  return x.base()==y.base();
}

template<typename Concept,typename Allocator>
bool operator!=(
  const any_collection<Concept,Allocator>& x,
  const any_collection<Concept,Allocator>& y)
{
 return !(x==y);
}

template<typename Concept,typename Allocator>
void swap(
  any_collection<Concept,Allocator>& x,any_collection<Concept,Allocator>& y)
{
  x.swap(y);
}

} /* namespace  */

using poly_collection::any_collection;

} /* namespace boost */

#endif

/* any_collection.hpp
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
*/