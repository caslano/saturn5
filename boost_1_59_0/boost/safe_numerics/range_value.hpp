#ifndef BOOST_RANGE_VALUE_HPP
#define BOOST_RANGE_VALUE_HPP

//  Copyright (c) 2015 Robert Ramey
//
// Distributed under the Boost Software License, Version 1.0. (See
// accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

#include <iosfwd>

// print range and value to a standard stream
// make a simple wrapper
template<typename T>
struct range_value {
    // type requirement - a numeric type
    const T & m_t;

    constexpr range_value(const T & t)
    :   m_t(t)
    {}

};

template<typename T>
constexpr range_value<T> make_range_value(const T & t){
    return range_value<T>(t);
}

#include "interval.hpp"

template<
    class CharT,
    class Traits,
    class T
>
std::basic_ostream<CharT, Traits> & operator<<(
    std::basic_ostream<CharT, Traits> & os,
    const range_value<T> & t
){
    return os
        << boost::safe_numerics::make_interval<T>()
        << t.m_t;
}

template<typename T>
struct result_display {
    const T & m_t;
    result_display(const T & t) :
        m_t(t)
    {}
};

template<typename T>
inline result_display<T> make_result_display(const T & t){
    return result_display<T>(t);
}

template<typename CharT, typename Traits, typename T>
inline std::basic_ostream<CharT, Traits> &
operator<<(
    std::basic_ostream<CharT, Traits> & os,
    const result_display<T> & r
){
    return os
        << std::hex
        << make_range_value(r.m_t)
        << "(" << std::dec << r.m_t << ")";
}

#endif  // BOOST_RANGE_VALUE_HPP

/* range_value.hpp
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
*/