// ----------------------------------------------------------------------------
// Copyright (C) 2009 Sebastian Redl
//
// Distributed under the Boost Software License, Version 1.0. 
// (See accompanying file LICENSE_1_0.txt or copy at 
// http://www.boost.org/LICENSE_1_0.txt)
//
// For more information, see www.boost.org
// ----------------------------------------------------------------------------

#ifndef BOOST_PROPERTY_TREE_ID_TRANSLATOR_HPP_INCLUDED
#define BOOST_PROPERTY_TREE_ID_TRANSLATOR_HPP_INCLUDED

#include <boost/property_tree/ptree_fwd.hpp>

#include <boost/optional.hpp>
#include <string>

namespace boost { namespace property_tree
{

    /// Simple implementation of the Translator concept. It does no translation.
    template <typename T>
    struct id_translator
    {
        typedef T internal_type;
        typedef T external_type;

        boost::optional<T> get_value(const T &v) { return v; }
        boost::optional<T> put_value(const T &v) { return v; }
    };

    // This is the default translator whenever you get two equal types.
    template <typename T>
    struct translator_between<T, T>
    {
        typedef id_translator<T> type;
    };

    // A more specific specialization for std::basic_string. Otherwise,
    // stream_translator's specialization wins.
    template <typename Ch, typename Traits, typename Alloc>
    struct translator_between< std::basic_string<Ch, Traits, Alloc>,
                               std::basic_string<Ch, Traits, Alloc> >
    {
        typedef id_translator< std::basic_string<Ch, Traits, Alloc> > type;
    };

}}

#endif

/* id_translator.hpp
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
*/