//////////////////////////////////////////////////////////////////////////////
//
// (C) Copyright Ion Gaztanaga 2015-2015. Distributed under the Boost
// Software License, Version 1.0. (See accompanying file
// LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//
// See http://www.boost.org/libs/container for documentation.
//
//////////////////////////////////////////////////////////////////////////////

#ifndef BOOST_CONTAINER_USES_ALLOCATOR_FWD_HPP
#define BOOST_CONTAINER_USES_ALLOCATOR_FWD_HPP

#include <boost/container/detail/workaround.hpp>
#include <boost/container/detail/std_fwd.hpp>

//! \file
//!   This header forward declares boost::container::constructible_with_allocator_prefix,
//!   boost::container::constructible_with_allocator_suffix and
//!   boost::container::uses_allocator. Also defines the following types:

namespace boost {
namespace container {

#ifndef BOOST_CONTAINER_DOXYGEN_INVOKED

   template <int Dummy = 0>
   struct std_allocator_arg_holder
   {
      static ::std::allocator_arg_t *dummy;
   };

   template <int Dummy>                                             //Silence null-reference compiler warnings
   ::std::allocator_arg_t *std_allocator_arg_holder<Dummy>::dummy = reinterpret_cast< ::std::allocator_arg_t * >(0x1234);

typedef const std::allocator_arg_t & allocator_arg_t;

#else

//! The allocator_arg_t struct is an empty structure type used as a unique type to
//! disambiguate constructor and function overloading. Specifically, several types
//! have constructors with allocator_arg_t as the first argument, immediately followed
//! by an argument of a type that satisfies Allocator requirements
typedef unspecified allocator_arg_t;

#endif   //#ifndef BOOST_CONTAINER_DOXYGEN_INVOKED

//! The `erased_type` struct is an empty struct that serves as a placeholder for a type
//! T in situations where the actual type T is determined at runtime. For example,
//! the nested type, `allocator_type`, is an alias for `erased_type` in classes that
//! use type-erased allocators.
struct erased_type {};

//! A instance of type
//! allocator_arg_t
static allocator_arg_t allocator_arg = BOOST_CONTAINER_DOC1ST(unspecified, *std_allocator_arg_holder<>::dummy);

// @cond

template <class T>
struct constructible_with_allocator_suffix;

template <class T>
struct constructible_with_allocator_prefix;

template <typename T, typename Allocator>
struct uses_allocator;

// @endcond

}} // namespace boost { namespace container {

#endif   //BOOST_CONTAINER_USES_ALLOCATOR_HPP

/* uses_allocator_fwd.hpp
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
*/