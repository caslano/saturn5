//////////////////////////////////////////////////////////////////////////////
//
// (C) Copyright Ion Gaztanaga 2015-2015. Distributed under the Boost
// Software License, Version 1.0. (See accompanying file
// LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//
// See http://www.boost.org/libs/container for documentation.
//
//////////////////////////////////////////////////////////////////////////////

#ifndef BOOST_CONTAINER_PMR_FLAT_MAP_HPP
#define BOOST_CONTAINER_PMR_FLAT_MAP_HPP

#if defined (_MSC_VER)
#  pragma once 
#endif

#include <boost/container/flat_map.hpp>
#include <boost/container/pmr/polymorphic_allocator.hpp>

namespace boost {
namespace container {
namespace pmr {

#if !defined(BOOST_NO_CXX11_TEMPLATE_ALIASES)

template <class Key
         ,class T
         ,class Compare  = std::less<Key > >
using flat_map = boost::container::flat_map<Key, T, Compare, polymorphic_allocator<std::pair<Key, T> > >;

template <class Key
         ,class T
         ,class Compare  = std::less<Key> >
using flat_multimap = boost::container::flat_multimap<Key, T, Compare, polymorphic_allocator<std::pair<Key, T> > >;

#endif

//! A portable metafunction to obtain a flat_map
//! that uses a polymorphic allocator
template <class Key
         ,class T
         ,class Compare  = std::less<Key> >
struct flat_map_of
{
   typedef boost::container::flat_map<Key, T, Compare, polymorphic_allocator<std::pair<Key, T> > > type;
};

//! A portable metafunction to obtain a flat_multimap
//! that uses a polymorphic allocator
template <class Key
         ,class T
         ,class Compare  = std::less<Key> >
struct flat_multimap_of
{
   typedef boost::container::flat_multimap<Key, T, Compare, polymorphic_allocator<std::pair<Key, T> > > type;
};

}  //namespace pmr {
}  //namespace container {
}  //namespace boost {

#endif   //BOOST_CONTAINER_PMR_FLAT_MAP_HPP

/* flat_map.hpp
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
*/