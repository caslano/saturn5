//////////////////////////////////////////////////////////////////////////////
//
// (C) Copyright Ion Gaztanaga 2015-2015. Distributed under the Boost
// Software License, Version 1.0. (See accompanying file
// LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//
// See http://www.boost.org/libs/container for documentation.
//
//////////////////////////////////////////////////////////////////////////////

#ifndef BOOST_CONTAINER_PMR_POOL_OPTIONS_HPP
#define BOOST_CONTAINER_PMR_POOL_OPTIONS_HPP

#if defined (_MSC_VER)
#  pragma once 
#endif

#include <cstddef>

namespace boost {
namespace container {
namespace pmr {

//! The members of pool_options comprise a set of constructor options for pool resources.
//! The effect of each option on the pool resource behavior is described below:
//!
//! - `std::size_t max_blocks_per_chunk`: The maximum number of blocks that will be allocated
//!   at once from the upstream memory resource to replenish a pool. If the value of
//!   `max_blocks_per_chunk` is zero or is greater than an implementation-defined limit,
//!   that limit is used instead. The implementation may choose to use a smaller value
//!   than is specified in this field and may use different values for different pools.
//!
//! - `std::size_t largest_required_pool_block`: The largest allocation size that is required
//!   to be fulfilled using the pooling mechanism. Attempts to allocate a single block
//!   larger than this threshold will be allocated directly from the upstream memory
//!   resource. If largest_required_pool_block is zero or is greater than an
//!   implementation-defined limit, that limit is used instead. The implementation may
//!   choose a pass-through threshold larger than specified in this field.
struct pool_options
{
   pool_options()
      : max_blocks_per_chunk(0u), largest_required_pool_block(0u)
   {}
   std::size_t max_blocks_per_chunk;
   std::size_t largest_required_pool_block;
};

}  //namespace pmr {
}  //namespace container {
}  //namespace boost {

#endif   //BOOST_CONTAINER_PMR_POOL_OPTIONS_HPP

/* pool_options.hpp
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
*/