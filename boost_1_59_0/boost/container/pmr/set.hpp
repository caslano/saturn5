//////////////////////////////////////////////////////////////////////////////
//
// (C) Copyright Ion Gaztanaga 2015-2015. Distributed under the Boost
// Software License, Version 1.0. (See accompanying file
// LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//
// See http://www.boost.org/libs/container for documentation.
//
//////////////////////////////////////////////////////////////////////////////

#ifndef BOOST_CONTAINER_PMR_SET_HPP
#define BOOST_CONTAINER_PMR_SET_HPP

#if defined (_MSC_VER)
#  pragma once 
#endif

#include <boost/container/set.hpp>
#include <boost/container/pmr/polymorphic_allocator.hpp>

namespace boost {
namespace container {
namespace pmr {

#if !defined(BOOST_NO_CXX11_TEMPLATE_ALIASES)

template <class Key
         ,class Compare = std::less<Key>
         ,class Options = void >
using set = boost::container::set<Key, Compare, polymorphic_allocator<Key>, Options>;

template <class Key
         ,class Compare = std::less<Key>
         ,class Options = void >
using multiset = boost::container::multiset<Key, Compare, polymorphic_allocator<Key>, Options>;

#endif

//! A portable metafunction to obtain a set
//! that uses a polymorphic allocator
template <class Key
         ,class Compare = std::less<Key>
         ,class Options = void >
struct set_of
{
   typedef boost::container::set<Key, Compare, polymorphic_allocator<Key>, Options> type;
};

//! A portable metafunction to obtain a multiset
//! that uses a polymorphic allocator
template <class Key
         ,class Compare = std::less<Key>
         ,class Options = void >
struct multiset_of
{
   typedef boost::container::multiset<Key, Compare, polymorphic_allocator<Key>, Options> type;
};

}  //namespace pmr {
}  //namespace container {
}  //namespace boost {

#endif   //BOOST_CONTAINER_PMR_SET_HPP

/* set.hpp
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
*/