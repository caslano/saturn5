//////////////////////////////////////////////////////////////////////////////
//
// (C) Copyright Ion Gaztanaga 2017-2017. Distributed under the Boost
// Software License, Version 1.0. (See accompanying file
// LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//
// See http://www.boost.org/libs/container for documentation.
//
//////////////////////////////////////////////////////////////////////////////
#ifndef BOOST_CONTAINER_DETAIL_IS_CONTIGUOUS_CONTAINER_HPP
#define BOOST_CONTAINER_DETAIL_IS_CONTIGUOUS_CONTAINER_HPP

#ifndef BOOST_CONFIG_HPP
#  include <boost/config.hpp>
#endif

#if defined(BOOST_HAS_PRAGMA_ONCE)
#  pragma once
#endif

#if defined(BOOST_GCC) && (BOOST_GCC >= 40600)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-result"
#endif

//data
#define BOOST_INTRUSIVE_HAS_MEMBER_FUNCTION_CALLABLE_WITH_FUNCNAME data
#define BOOST_INTRUSIVE_HAS_MEMBER_FUNCTION_CALLABLE_WITH_NS_BEG namespace boost { namespace container { namespace is_contiguous_container_detail {
#define BOOST_INTRUSIVE_HAS_MEMBER_FUNCTION_CALLABLE_WITH_NS_END   }}}
#define BOOST_INTRUSIVE_HAS_MEMBER_FUNCTION_CALLABLE_WITH_MIN 0
#define BOOST_INTRUSIVE_HAS_MEMBER_FUNCTION_CALLABLE_WITH_MAX 0
#include <boost/intrusive/detail/has_member_function_callable_with.hpp>

//back_free_capacity
#define BOOST_INTRUSIVE_HAS_MEMBER_FUNCTION_CALLABLE_WITH_FUNCNAME back_free_capacity
#define BOOST_INTRUSIVE_HAS_MEMBER_FUNCTION_CALLABLE_WITH_NS_BEG namespace boost { namespace container { namespace back_free_capacity_detail {
#define BOOST_INTRUSIVE_HAS_MEMBER_FUNCTION_CALLABLE_WITH_NS_END   }}}
#define BOOST_INTRUSIVE_HAS_MEMBER_FUNCTION_CALLABLE_WITH_MIN 0
#define BOOST_INTRUSIVE_HAS_MEMBER_FUNCTION_CALLABLE_WITH_MAX 0
#include <boost/intrusive/detail/has_member_function_callable_with.hpp>

//#pragma GCC diagnostic ignored "-Wunused-result"
#if defined(BOOST_GCC) && (BOOST_GCC >= 40600)
#pragma GCC diagnostic pop
#endif

namespace boost {
namespace container {
namespace dtl {

template <class Container>
struct is_contiguous_container
{
   static const bool value =
      boost::container::is_contiguous_container_detail::
         has_member_function_callable_with_data<Container>::value && 
      boost::container::is_contiguous_container_detail::
         has_member_function_callable_with_data<const Container>::value;
};


template < class Container
         , bool = boost::container::back_free_capacity_detail::
                     has_member_function_callable_with_back_free_capacity<const Container>::value>
struct back_free_capacity
{
   static typename Container::size_type get(const Container &c)
   {  return c.back_free_capacity();  }
};

template < class Container>
struct back_free_capacity<Container, false>
{
   static typename Container::size_type get(const Container &c)
   {  return c.capacity() - c.size();  }
};

}  //namespace dtl {
}  //namespace container {
}  //namespace boost {

#endif   //#ifndef BOOST_CONTAINER_DETAIL_IS_CONTIGUOUS_CONTAINER_HPP

/* is_contiguous_container.hpp
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
*/