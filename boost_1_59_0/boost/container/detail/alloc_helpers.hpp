//////////////////////////////////////////////////////////////////////////////
//
// (C) Copyright Ion Gaztanaga 2014-2015. Distributed under the Boost
// Software License, Version 1.0. (See accompanying file
// LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//
// See http://www.boost.org/libs/container for documentation.
//
//////////////////////////////////////////////////////////////////////////////
#ifndef BOOST_CONTAINER_DETAIL_ALLOC_TRAITS_HPP
#define BOOST_CONTAINER_DETAIL_ALLOC_TRAITS_HPP

#ifndef BOOST_CONFIG_HPP
#  include <boost/config.hpp>
#endif

#if defined(BOOST_HAS_PRAGMA_ONCE)
#  pragma once
#endif

// move
#include <boost/move/adl_move_swap.hpp>
#include <boost/move/utility_core.hpp>

namespace boost {
namespace container {
namespace dtl {

template<class AllocatorType>
BOOST_CONTAINER_FORCEINLINE void swap_alloc(AllocatorType &, AllocatorType &, dtl::false_type)
   BOOST_NOEXCEPT_OR_NOTHROW
{}

template<class AllocatorType>
BOOST_CONTAINER_FORCEINLINE void swap_alloc(AllocatorType &l, AllocatorType &r, dtl::true_type)
{  boost::adl_move_swap(l, r);   }

template<class AllocatorType>
BOOST_CONTAINER_FORCEINLINE void assign_alloc(AllocatorType &, const AllocatorType &, dtl::false_type)
   BOOST_NOEXCEPT_OR_NOTHROW
{}

template<class AllocatorType>
BOOST_CONTAINER_FORCEINLINE void assign_alloc(AllocatorType &l, const AllocatorType &r, dtl::true_type)
{  l = r;   }

template<class AllocatorType>
BOOST_CONTAINER_FORCEINLINE void move_alloc(AllocatorType &, AllocatorType &, dtl::false_type)
   BOOST_NOEXCEPT_OR_NOTHROW
{}

template<class AllocatorType>
BOOST_CONTAINER_FORCEINLINE void move_alloc(AllocatorType &l, AllocatorType &r, dtl::true_type)
{  l = ::boost::move(r);   }

}  //namespace dtl {
}  //namespace container {
}  //namespace boost {

#endif   //#ifndef BOOST_CONTAINER_DETAIL_ALLOC_TRAITS_HPP

/* alloc_helpers.hpp
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
*/