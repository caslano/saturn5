//////////////////////////////////////////////////////////////////////////////
//
// (C) Copyright Ion Gaztanaga 2015-2015. Distributed under the Boost
// Software License, Version 1.0. (See accompanying file
// LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//
// See http://www.boost.org/libs/container for documentation.
//
//////////////////////////////////////////////////////////////////////////////
#ifndef BOOST_CONTAINER_DETAIL_ALLOC_LIB_HPP
#define BOOST_CONTAINER_DETAIL_ALLOC_LIB_HPP

#ifndef BOOST_CONFIG_HPP
#  include <boost/config.hpp>
#endif

#if defined(BOOST_HAS_PRAGMA_ONCE)
#  pragma once
#endif

#include <boost/container/detail/config_begin.hpp>
#include <boost/container/detail/workaround.hpp>
#include <boost/container/detail/auto_link.hpp>

#include <boost/container/detail/alloc_lib.h>

namespace boost{
namespace container{

typedef boost_cont_command_ret_t dlmalloc_command_ret_t;
typedef boost_cont_memchain dlmalloc_memchain;
typedef boost_cont_memchain_it dlmalloc_memchain_it;
typedef boost_cont_malloc_stats_t dlmalloc_malloc_stats_t;

BOOST_CONTAINER_DECL size_t dlmalloc_size(const void *p);

BOOST_CONTAINER_DECL void* dlmalloc_malloc(size_t bytes);

BOOST_CONTAINER_DECL void  dlmalloc_free(void* mem);

BOOST_CONTAINER_DECL void* dlmalloc_memalign(size_t bytes, size_t alignment);

BOOST_CONTAINER_DECL int dlmalloc_multialloc_nodes
   (size_t n_elements, size_t elem_size, size_t contiguous_elements, boost_cont_memchain *pchain);

BOOST_CONTAINER_DECL int dlmalloc_multialloc_arrays
   (size_t n_elements, const size_t *sizes, size_t sizeof_element, size_t contiguous_elements, boost_cont_memchain *pchain);

BOOST_CONTAINER_DECL void dlmalloc_multidealloc(boost_cont_memchain *pchain);

BOOST_CONTAINER_DECL size_t dlmalloc_footprint();

BOOST_CONTAINER_DECL size_t dlmalloc_allocated_memory();

BOOST_CONTAINER_DECL size_t dlmalloc_chunksize(const void *p);

BOOST_CONTAINER_DECL int dlmalloc_all_deallocated();

BOOST_CONTAINER_DECL boost_cont_malloc_stats_t dlmalloc_malloc_stats();

BOOST_CONTAINER_DECL size_t dlmalloc_in_use_memory();

BOOST_CONTAINER_DECL int dlmalloc_trim(size_t pad);

BOOST_CONTAINER_DECL int dlmalloc_mallopt(int parameter_number, int parameter_value);

BOOST_CONTAINER_DECL int dlmalloc_grow(void* oldmem, size_t minbytes, size_t maxbytes, size_t *received);

BOOST_CONTAINER_DECL int dlmalloc_shrink(void* oldmem, size_t minbytes, size_t maxbytes, size_t *received, int do_commit);

BOOST_CONTAINER_DECL void* dlmalloc_alloc(size_t minbytes, size_t preferred_bytes, size_t *received_bytes);

BOOST_CONTAINER_DECL int dlmalloc_malloc_check();

BOOST_CONTAINER_DECL boost_cont_command_ret_t dlmalloc_allocation_command
   ( allocation_type command
   , size_t sizeof_object
   , size_t limit_objects
   , size_t preferred_objects
   , size_t *received_objects
   , void *reuse_ptr
   );

BOOST_CONTAINER_DECL int dlmalloc_mallopt(int param_number, int value);

BOOST_CONTAINER_DECL void *dlmalloc_sync_create();

BOOST_CONTAINER_DECL void dlmalloc_sync_destroy(void *sync);

BOOST_CONTAINER_DECL bool dlmalloc_sync_lock(void *sync);

BOOST_CONTAINER_DECL void dlmalloc_sync_unlock(void *sync);

BOOST_CONTAINER_DECL bool dlmalloc_global_sync_lock();

BOOST_CONTAINER_DECL void dlmalloc_global_sync_unlock();

}  //namespace container{
}  //namespace boost{

#include <boost/container/detail/config_end.hpp>

#endif   //BOOST_CONTAINER_DETAIL_ALLOC_LIB_HPP

/* dlmalloc.hpp
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
*/