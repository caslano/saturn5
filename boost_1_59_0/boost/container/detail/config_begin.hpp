//////////////////////////////////////////////////////////////////////////////
//
// (C) Copyright Ion Gaztanaga 2005-2013. Distributed under the Boost
// Software License, Version 1.0. (See accompanying file
// LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//
// See http://www.boost.org/libs/container for documentation.
//
//////////////////////////////////////////////////////////////////////////////
#ifndef BOOST_CONTAINER_CONTAINER_DETAIL_CONFIG_INCLUDED
#define BOOST_CONTAINER_CONTAINER_DETAIL_CONFIG_INCLUDED
#ifndef BOOST_CONFIG_HPP
#include <boost/config.hpp>
#endif

#endif   //BOOST_CONTAINER_CONTAINER_DETAIL_CONFIG_INCLUDED

#ifdef BOOST_MSVC
   #pragma warning (push)
   #pragma warning (disable : 4127) // conditional expression is constant
   #pragma warning (disable : 4146) // unary minus operator applied to unsigned type, result still unsigned
   #pragma warning (disable : 4197) // top-level volatile in cast is ignored
   #pragma warning (disable : 4251) // "identifier" : class "type" needs to have dll-interface to be used by clients of class "type2"
   #pragma warning (disable : 4275) // non DLL-interface classkey "identifier" used as base for DLL-interface classkey "identifier"
   #pragma warning (disable : 4284) // odd return type for operator->
   #pragma warning (disable : 4290) // C++ exception specification ignored except to indicate a function is not __declspec(nothrow)
   #pragma warning (disable : 4324) // structure was padded due to __declspec(align(
   #pragma warning (disable : 4345) // behavior change: an object of POD type constructed with an initializer of the form () will be default-initialized
   #pragma warning (disable : 4355) // "this" : used in base member initializer list
   #pragma warning (disable : 4503) // "identifier" : decorated name length exceeded, name was truncated
   #pragma warning (disable : 4510) //  default constructor could not be generated
   #pragma warning (disable : 4511) // copy constructor could not be generated
   #pragma warning (disable : 4512) // assignment operator could not be generated
   #pragma warning (disable : 4514) // unreferenced inline removed
   #pragma warning (disable : 4521) // Disable "multiple copy constructors specified"
   #pragma warning (disable : 4522) // "class" : multiple assignment operators specified
   #pragma warning (disable : 4541) // 'typeid' used on polymorphic type '' with /GR-; unpredictable behavior may result
   #pragma warning (disable : 4584) //  X is already a base-class of Y
   #pragma warning (disable : 4610) //  struct can never be instantiated - user defined constructor required
   #pragma warning (disable : 4671) //  the copy constructor is inaccessible
   #pragma warning (disable : 4673) //  throwing '' the following types will not be considered at the catch site
   #pragma warning (disable : 4675) // "method" should be declared "static" and have exactly one parameter
   #pragma warning (disable : 4706) // assignment within conditional expression
   #pragma warning (disable : 4710) // function not inlined
   #pragma warning (disable : 4714) // "function": marked as __forceinline not inlined
   #pragma warning (disable : 4711) // function selected for automatic inline expansion
   #pragma warning (disable : 4786) // identifier truncated in debug info
   #pragma warning (disable : 4996) // "function": was declared deprecated
 
#endif   //BOOST_MSVC

/* config_begin.hpp
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
*/