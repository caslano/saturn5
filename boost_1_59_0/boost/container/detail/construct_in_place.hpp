//////////////////////////////////////////////////////////////////////////////
//
// (C) Copyright Ion Gaztanaga 2014-2014.
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
//
// See http://www.boost.org/libs/container for documentation.
//
//////////////////////////////////////////////////////////////////////////////

#ifndef BOOST_CONTAINER_DETAIL_CONSTRUCT_IN_PLACE_HPP
#define BOOST_CONTAINER_DETAIL_CONSTRUCT_IN_PLACE_HPP

#ifndef BOOST_CONFIG_HPP
#  include <boost/config.hpp>
#endif

#if defined(BOOST_HAS_PRAGMA_ONCE)
#  pragma once
#endif

#include <boost/container/allocator_traits.hpp>
#include <boost/container/detail/iterators.hpp>
#include <boost/container/detail/value_init.hpp>

namespace boost {
namespace container {

//In place construction

struct iterator_arg_t{};

template<class Allocator, class T, class InpIt>
BOOST_CONTAINER_FORCEINLINE void construct_in_place(Allocator &a, T* dest, InpIt source)
{     boost::container::allocator_traits<Allocator>::construct(a, dest, *source);  }

template<class Allocator, class T, class U>
BOOST_CONTAINER_FORCEINLINE void construct_in_place(Allocator &a, T *dest, value_init_construct_iterator<U>)
{
   boost::container::allocator_traits<Allocator>::construct(a, dest);
}

template <class T>
class default_init_construct_iterator;

template<class Allocator, class T, class U>
BOOST_CONTAINER_FORCEINLINE void construct_in_place(Allocator &a, T *dest, default_init_construct_iterator<U>)
{
   boost::container::allocator_traits<Allocator>::construct(a, dest, default_init);
}

template <class T, class EmplaceFunctor>
class emplace_iterator;

template<class Allocator, class T, class U, class EF>
BOOST_CONTAINER_FORCEINLINE void construct_in_place(Allocator &a, T *dest, emplace_iterator<U, EF> ei)
{
   ei.construct_in_place(a, dest);
}

//Assignment

template<class DstIt, class InpIt>
BOOST_CONTAINER_FORCEINLINE void assign_in_place(DstIt dest, InpIt source)
{  *dest = *source;  }

template<class DstIt, class U>
BOOST_CONTAINER_FORCEINLINE void assign_in_place(DstIt dest, value_init_construct_iterator<U>)
{
   dtl::value_init<U> val;
   *dest = boost::move(val.get());
}

template <class DstIt>
class default_init_construct_iterator;

template<class DstIt, class U, class D>
BOOST_CONTAINER_FORCEINLINE void assign_in_place(DstIt dest, default_init_construct_iterator<U>)
{
   U u;
   *dest = boost::move(u);
}

template <class T, class EmplaceFunctor>
class emplace_iterator;

template<class DstIt, class U, class EF>
BOOST_CONTAINER_FORCEINLINE void assign_in_place(DstIt dest, emplace_iterator<U, EF> ei)
{
   ei.assign_in_place(dest);
}

}  //namespace container {
}  //namespace boost {

#endif   //#ifndef BOOST_CONTAINER_DETAIL_CONSTRUCT_IN_PLACE_HPP

/* construct_in_place.hpp
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
*/