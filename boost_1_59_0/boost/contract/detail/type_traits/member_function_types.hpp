
#ifndef BOOST_CONTRACT_DETAIL_MEMBER_FUNCTION_TYPES_HPP_
#define BOOST_CONTRACT_DETAIL_MEMBER_FUNCTION_TYPES_HPP_

// Copyright (C) 2008-2018 Lorenzo Caminiti
// Distributed under the Boost Software License, Version 1.0 (see accompanying
// file LICENSE_1_0.txt or a copy at http://www.boost.org/LICENSE_1_0.txt).
// See: http://www.boost.org/doc/libs/release/libs/contract/doc/html/index.html

#include <boost/contract/detail/none.hpp>
#include <boost/function_types/parameter_types.hpp>
#include <boost/function_types/result_type.hpp>
#include <boost/function_types/property_tags.hpp>
#include <boost/type_traits/is_const.hpp>
#include <boost/type_traits/is_volatile.hpp>
#include <boost/type_traits/is_same.hpp>
#include <boost/mpl/pop_front.hpp>
#include <boost/mpl/push_back.hpp>
#include <boost/mpl/back.hpp>
#include <boost/mpl/and.hpp>
#include <boost/mpl/if.hpp>
#include <boost/mpl/identity.hpp>

namespace boost {
    namespace contract {
        class virtual_;
    }
}

namespace boost { namespace contract { namespace detail {

template<class C, typename F>
struct member_function_types {
    typedef typename boost::function_types::result_type<F>::type result_type;

    // Never include leading class type.
    typedef typename boost::mpl::pop_front<typename boost::function_types::
            parameter_types<F>::type>::type argument_types;

    // Always include trailing virtual_* type.
    typedef typename boost::mpl::if_<boost::is_same<typename boost::
            mpl::back<argument_types>::type, boost::contract::virtual_*>,
        boost::mpl::identity<argument_types>
    ,
        boost::mpl::push_back<argument_types, boost::contract::virtual_*>
    >::type::type virtual_argument_types;

    typedef typename boost::mpl::if_<boost::mpl::and_<boost::is_const<C>,
            boost::is_volatile<C> >,
        boost::function_types::cv_qualified
    , typename boost::mpl::if_<boost::is_const<C>,
        boost::function_types::const_non_volatile
    , typename boost::mpl::if_<boost::is_volatile<C>,
        boost::function_types::volatile_non_const
    ,
        boost::function_types::null_tag
    >::type>::type>::type property_tag;
};

// Also handles none type.
template<class C>
struct member_function_types<C, none> {
    typedef none result_type;
    typedef none argument_types;
    typedef none virtual_argument_types;
    typedef none property_tag;
};

} } } // namespace

#endif // #include guard


/* member_function_types.hpp
8lpwRHxspu2sHINl2IHI2O10Th0i11jMJztRVScJklukNqCXHi3iXMiTT2ZKhw2J7yQw+sVmQG9gNOSM34JXYZDgRfhGmlmfbLfE3WS2MlgongUf78ngPWKepzIIPZkLzZlSNRYf2e5bb59yAdF4sArLzOfO/9cIoxLpMCHXvzxdB7+Eli5p0L5IwhATGwdwN9DkkIKpFBfnm/zLNyqYP3k0WLHmXsn0YnNay++fweRSn2DlWP/9HDaP+AM1nh0+DAFxCkZyJpSkEvLbXToeUAcjtbIBPCmMFaa9Q3HxCNCtnzQxKS2x1DK1ujcPzbAu/rQ/Us37rRtCFyXupAhATHnqeoJmPvbgzjMqoSZs8n+dXYhXGPEiNd8mUpvUdAUDHjekTYgyxKU0BAgCLadSJx850WTw0AgO4ST+v4UJQz3scq5bPDWS48KN2G1Vau1Z4SW4PfBnVAT76dG+NabqG2mVw0IUpZU0xSgiSYiRzvsCT2sFOHg7jIhKIAIgAeThbYLRG3TM9WMwIPWs8E1So1dx1PV+86wx50U6cckyNJgUKFSFLinzOGj+4CQKl31gqjY+GMInx9j057I5c40PacBbxcgZCemIBeZLKK8D1BSJ8D8hAJlQ+2NrSsTHkw7C9iv1MCuIEe0xiS8CJQaPRuQXxttLAhkfVpwIkYhsklI4cxALL07sKkM4SzEsM5bWCes6SSMy2c/TITVkjdBkej0iaXO+FasWbeLTJ+3jPALiNGSs5kisWcrkHWo8/1jN+JiPru/fo8GSmLEwVFH/e6u/pfX0tqcVk+PRcoe3FQH9eDDYAOy/y2dkDOx0HP+2v2qcxSey3a72Sy2+xyJA+qVeNpUQxTuo1BUHxteLDkOEbcAjixrt0V2AGlsLtPTlLzwVKeXn2KHYk0uCGLA03VqklDyO/3uzpe8fROjBBMLkUVpYvttIW1ctgM4JVQWFpDrhECoANGScA2895ZYQe8TEdCEUXFa7uwGPA0nimPtV9H1GBWjnan5HuHRpDSirlM9lUlYf3DpRwMeBNNiJCvXRr+WEpYWlNrMEmcTwSHaGYWrvYAkiwPiruXPjYTionVeN6j775Ctj2CRxX8ZIRQkXhM/S288FQQnGR5Tim0bZY9OzKpi555QtCsUnonIjMykQ18xO5Qa4XDMnydGeGPIkIJaxwxvMTbfZOQSoDofJStgw5k2RfRJH5XUGO+pTBGyyp4yPzHlDy6fa8JY/vNREvcah4AMdZ7P6ycMTYv8QiTq/9pL9C30rVyx33WAlo38i7997+lsuqA2NtzxPRTDKRTBegUQbNC9fdmz6VZbeVDUYuKQGn52O4cwFb5ylzEkVPB33Dijv/jLzkp7NlUylSUZTAiywNlgAyDqscbLwAGbYqLSo0NUYTbOU8yaCMRLnCcmP18tQziDeDdm3gBOtlp9YE/druIN7DgEOIk4kDZklp/xQdi1/GcywskJsKfMaDiOfAhaZYrcEJMVXUrJD44zY8a/g4ycj7+jwRnerPxmeeG4xYmkza6EynH69NQu6NIR7tSMjCnrkUtvXYgdmITM25tvmSzn/Ksu31/71ieal569fncbbgHMaNF/gGHCnODs1Dg76LXaKvDPE6ibDwPHqU2Dwv8EIfTr72hF/KuQvYjOXI/BwATg1BS6sJg5jQ8M53O3PoLNS4xU579mW8ZIElqOKm2KlWdTsJdmTHdXj7qr1vmxmeC3JKXMOALbPpdZvRlIgGexCTB6hFg7plU0RRRo64l8BoJZyuPLCQkX4IWPGVchXvSEQLSdwCtMAVJhcKeyAPJfE5/3cmezMj604L34gr20UAUh4pQ/IcqHyWZMAWAARAZwj9v9SFZukaGhZzUFtOfG3SEiArtBfh2i2fBjtruSzl72yM6yzvz2yjSW6gI27qqy7Po26zFV1mF2DrNWzf418CBy76B27lidBWu9B8Bvfyrgh5ZF9nwJ4TCUECqkZFKHz7YT4pCykQvID6ST6KPYEkYyVbkD12RyVKjE1VxULodkYNaEVfkJoxKHjhyVKf1jqHXgQcZ6Lz4OoRDZqOIc6ccuS+tOzJ/O2OtMTMQ/+O5THZJJ2FCyNDSuOnShZyFUMLZBs8JVUmhrjy09adFbWswLELwoUNdtSIu3izTucwFy46kD6nFoAE1pocV50c0qaeFsU+T7EQR6sNPkm9DPc9mEpi3Yc5YZJizk/jeYRcTtfjT530z1Hj8EMiY/pbccMuIE5a42pinaJEBBrvZJ2ak1TkaS3TGRK5+symZd7al3cI4o8dGMW4xkjYQFcpu4ija6WzAqED2Jq1M4rB9mOW81fJp3iKg9kSukx5dVxrniXAr98Wo6aKXzDqk18lSJPFu3++PG1zfdR6qr5sj6EBwMb+dKy+q3OIw58ipBALrXxdi4NX4Y52a6tFtY3JGng7TV9feteSQvX9vGwLZo+x81ERprYSw5xmp9xnJ3sZzi+CHLOBnXSmXbWendK6nTGvXVEGnLe2nJSOn7UG19McOxnLY+czByYgn2Mont8WnESdGPTePyK6uLmTFPx3PZ87H+HTXuvodAnUvFL8hQMx0b+jJe3dfc6bQ0K1O+n3bhrmQxCfBRKTHvv3n3YdUePhThCHoIuS9/pkqYqHj55huzSZKFPJ/N8vN7Mkrpm16+CVod4EK3t2LUJQ1ONR1m2FL/xoR5oQ8Vl6JatoPtL195keb4oHy9ULKdfgLacSA4LX2gqjxO1mfVuMRjZcc2fL6kvZ7R1YNDqdwSZbZ+4wSVw1GofASUydGau7t1FCGKtKlPN2jINL2j5CgOzNuOM/dMZ+kRWhiM4akSlClaLakCLlCnSK+3uoSn6VM+OFKjrtKpVCepfcft0oS70K1eUi146pe6qI+maZvkKeM16ZjhqcIdU7JeU5DMsdMwQnd0+tin6RjAlsK3gG0eqbR3AkzBjZ1lUFvspfO+RN++oCDY/i7lQ0/yodkEppJGoPzcphMUphuoqiMWqbGkpfmgpjCGLW2vbq5CEqpRQKYhTqjVQWlj+lTzbVT7u1Ppkau9k/OOTtQ6CQK1vShawVlEuEoN1kRcijnCsGiwhm+pE7bXCL5IxHBSlLdoKX5JoMRzQAEDKQYVDlGxEo2RDo9KXI94XfDrLssyr/irleQ3lecsV+unl1NEVec61v4hqrV3av7ztuSDKrayE44HAVX5gCgYo78eHmUnRCmCGW/MJco0BksHge/1j1SYl/u9q2G6BqeRO3pew8BbYs823VOjOcLkKsmyRj5NYSCtfm+2SLjABc5KYehbE9Ubz46pMBmj5weSPKOG9a0YN4mOKPmqtCW7MGaTQ/IVIM6XjcEJYyHskfOqsdccn/A/NW2JHuNJ4IZrNHNzFCLTv15D3KSTtdAqIs7gCRTtN/qQfY6zKS7PikoybGmGXI70Ji3v9ChrRg2UCb5G0iArt6ltS2coz7zLq+/QpzTEpXSgLN8XXoV7KJ8Z8w1qoHVJt683R7fHdiVhTUyACAdQCRkOAwiaDGAv1oznV7v8IKaexbHNcpnmmcClGlJUGEkZsW4pmLCn8qhgqBaTcyyMv2dd5XaJJn2LnIirPOZcPaJ4JkOieU1ay1JP+YjkyrSg9AYLEpm4csLaRVtJowpdnOTl9Z5nV+aOuggJIF+IOvCYwKxYGxWfCLoEtHawCVVi50MBzUTsQ1R3nMtvNfhUbrWJw7mMBg/K5yaEmPFLbzbV0t0BFOVW24VpVmVUDFcrYjTLzYanPxSh3fpfywvIv8FvtGAC6P0CAsHTOlqkCytwnx4eshtc5SupNMpjheYlwsbFgh7SkqaFlMhhkgpqIVMdQiSICokIHtiUg5frn98/P60zOr6+j+Y2vu14Os7NR7imn84z4dt1N0FsLh7HQ6k0ra3bfrDCIbI27nOCLUFtslg+0naI6PMybdDZcKwfmVeyNLRgG4JiaRA1vDDSe4uYCIDd1+ZI9BZrO2NHQOEhBdfAFCXqQfJ6QwU1uHw/j8+EUXbV4u9KB2Lpc95pegx7xf9HdH48NLZ6sb9MnSfLYI8KCXsELZEmBwARS61T+AJAAVKfo5VFE93Z+6RliyQRgT4+PCQYxqMi3FPgFPGywYFzwmCJ14HJnDhQITuHSOVL9jkoOVjwxShZbPTlKH/i8ABFsnh2AFrLBSKddCB8DJR5GcHyEu3NvKJRH5X/9PXD/ESCJF3XOSWYqUaar3ot1j4+QZWZsYndW6kgazC/+Qg+NR0eiU+X+Us7ZWdiudk+otqiZe000V2nrhCjLqmkNQ//LAEBKc3Jd/NKe6eTK7+OmnnmDCv7wkXC0eQimJsaxgzTfxCsTEPFUYeTdxum/kdP4B84l3ZPoDFEFL3BBnOFMq/+mRXTj1esxgLgsJ6dGdSQey1Az3owTNbXAU17Q34weYvyizGs9/HcHbj8U+UcDM4Px5TX/zUpEUqOiGNtfulCO90Areqe13mF3rsUgI0XHTe6BmxqC031Rr2fCs6qojfBbDGSM80j7g75qDIQ7HAlWoxzEIMO7dSb0lboL5c2mW/rfDOqydJcMcZd8AXiUsw/1446TzpCCTb1ir3tJTBgbVZbzoyGdUjUGEdET9ghb4dfuPcE5vVV6h4pxi4RqLOQXPyKaHGhBiYwGn7+GSzmbCTnr3Epa5zk9g8AqFuPBgOIfYdA6OBa/JrrzgZeAJz+D+mDO0fgGhGROD/OmkrL7EZCUPlsrtfJLVG1iba2ybFCyhqsFk1euu1uv/Wqnj8b5/1quANkv6fTNdHO6k6AEP8sm0PwQZdwPugEaYLBAzhZhrHpgDIaXdS44zLq36XYBiQJvg69EJsillLg2xCLOlmynSeORSoPvpgoRpcbqZeZu0H2v6P9cdn+Vmb0XO3Du+mD+Wlp+hmxc45kAkk/cB/Yt0fcxha8FbaSeOyKgvteeiUbA4jCE6Vy5ffwLIFGcXVY17X/o6yy/XmnyBJZ2MHBivPqenCmwqX55UNWvKO/Pn8UeDozVYkQyEpk3mmuzduo2ThwyvgNGXrXHx6lkAGjDGK7Hd3A3Ka/R06Ym/QyzOX49a1jfX+iVn+yrl3XuNJV+MN1MLhh1132xT8VVSsXHpet0s/d8iidMov7uJXMA5Oyq3iG/tOn1w7khrpNV7vp2seTW9ONuMOR+c8AO7oWOU9uQxNmEY1zzVOpM8mrFnexIam9Crm1KGu7ISmxIom34NLNht7cps7Bk5zdlf592C13QQ72kQz9+4QY293cSMicG8iMG8McqL8dACAdBjAPW0nwdBwi5shQRtSS4aNqtdhcxxRHwT/2O1RJYOL/NTd4FZPsUpuzdvIJAGnn1ne/d1IDXIzQYsvxMtcy/5iZacOxMPQ2/dgsQ5Z7DeDeswjVYPj1reDFYu7GgOz4bizW4gUXJFJt7+UKI4giLwPOv5rXyB25GBhYHhuhtQHoglje7lJQEzKdvFhcFEFpgOVuM0o3t2P40KtPgzvfGiv99rOh7qED4UQm5jsPQe48bc2rxx0hYXd2unNOlfXEI7uF/S+GHEu+k6kEUlelljT1rhnltuvdfEp11uXx5SplVQDmV2HUW3mV+7HCe7GC+LHLeLGoU353Fjw6z1TALSWmhmyHg5dfH0dVvQzVFKI3TEP4hwuNQ7cbNWH3V6CTt5+JmlTR1UnZ8L5+fUmvpwO+e+nGR1BSKKSlxt8MH5DY5ftE5eVMCw14IO80wKzHrHtC3fSnXGOs/ZyjjGt20WHNFxRYOPFPVMqox/3QV3q5Kp689cNM3Hdt2wVhY9XmtHuy9MOmUbeydh22TnJ28pu3wrfCF/vBe1HPnlhP8Xb3a2L7dSL45EZ/vNT7UUfPx38f54a9WaqhztxZx10Zpsnm4Kxnr9GXTumdAG27vXOS60D3+4k/wSErqnFb5ogXFgSc8bcDQV4wMNAqV4LzAXSo0VAE7RuNfYdFjkHq3mfrSWJUyXpXYb8hem5s58Fe5ZOGur8iiliuvjBgofwgWgPs9eSdvhY1WNRpvry51i5lsbhTNfl2Q+iAiLeDSU+N/xVPVZvu0mfn+4s0xFmJa/eVLWi0c/zavfvyqBb5kIymyChHNDJdVP3vfP/l6mn+gFi+MsS+g7Tr7EdFSTAvF/L13KwosMf8t26eTKEtX499Uz0+YMOZ2b8nK0VPLSmRwv+F8nH9/3LelYs7dFcFG/TRz/Km9lZqNK5Pe6BXoqdJvENVN06B64UL5WgRd6tXjfa/dz51wef7Zmx8IyttYO/CHdZ8/vxm4W6mbTJq+Fe5oFSUvMz8V35x88THnn5wcObofShyViLD7uU3UGMOSXx2vuPGHfV21hEcLYhpVHUedGcLbwtl9q1A+d0s4PCBYNr5wWRE8oJ2Tu4qdGHd4+yuPHZUIPV6BTAviJljXSxD6gTKc0i7IM/e2sqGRVUtTVZC475zhQf/7VxWnnkCfNYEvs28+HaQAMHmo2DKfb5aYjt93/bkirBaEF5/i+ehH5nsexbflbhThnF7yG1aSaHmJ/L/X0Tw/ZWM/ptBk9/8w8ZeQbNi+/zVtYT7N7XEzT7sDs2pt9BcthAtyHIbH+bUU3nSXZng9cXS2C84W3G1NgfnTWtqh19A/CR9iXitHy6tNL3XEZsTlrmh0ezkxTsoSKkQ30Fn21E0MW8xpfbqMxLpNrKbIa4LHxP9H4Ndaf1jY/rXz2wCpaV9jE4lCJYac8FYCTp+3KAvCjswQzBaNU4RpZvNf4buHzfFvEvv8CJreY40Y42jzMdJD5rEZLnOCOLN1eqP6kdhI22c1SUZackpXPlq9htvT5X7YseJuOxcpxFa39n+lv6zdovm+EnL6e7dKs7kyl8btVLcbkzno6rIH6TljI8GzrlUe9mZaOCWEDYTJrqLacx4uo3EA0LuKREmSpEMr0TfAb2prIfbRy0mCOg58J7HYwQ0UI5303z20r4BUES/46Jc2E2XS7KKJrSDQBM2XrTngvm9PQYOBSfrsNtvZYeziHEKDDrfzyyWrP7j+WgDmQ8ijccEOcys1h4oXHTOPt1a1KHG9Qpenytr5sBJ568H6sQSF9ToGXP1SvEa9fuUlm0Y/FT7s8d7WZtURQRdIujDno8R2cd7JxPby/hhE0XHC+xN9Vc9EPvOys51jndZCuF/OfTlnjZfwk+7BIXm/Qv8h9EG0SHPxkeRuQgirxgIkTFEIr/gUnZMiNunw32EgAOC+lE/dmNvWWUXjU4KDAIex/kvceolAOqgX3Qs/BwjTZugnndEjOGNaTj7mgFu6Eci1SRiRlMsgsFaWGtdZnxWdSfFwCS6W7FI5ZeSQZNLYC1AnsbgD85FZ2qYvKbfGRtCokjfSPickUYgMDRcJ1nlniXRBVkHdteNTywHUAgAA+gP8B+QP6B+wP+B/IP5A/oH6A/0H5g/sH7g/8H8Q/iD+QfqD/AflD+oftD/ofzD+YP7B+oP9B+cP7h+8P/h/CP4Q/iH6Q/yH5A/pH7I/5H8o/lD+ofpD/YfmD+0fuj/0fxj+MP5h+sP8h+UP6x+2P+x/OP5w/uH6w/2H5w/vH74//H8E/gj+Efoj/Efkj+gfsT/ifyT+SP6R+iP9R+aP7B+5P/J/FP4o/lH6o/xH5Y/qH7U/6n80
*/