//
// Copyright (c) 2016-2019 Vinnie Falco (vinnie dot falco at gmail dot com)
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//
// Official repository: https://github.com/boostorg/beast
//

#ifndef BOOST_BEAST_READ_SIZE_HELPER_HPP
#define BOOST_BEAST_READ_SIZE_HELPER_HPP

#include <boost/beast/core/detail/config.hpp>
#include <boost/throw_exception.hpp>

namespace boost {
namespace beast {

/** Returns a natural read size.

    This function inspects the capacity, size, and maximum
    size of the dynamic buffer. Then it computes a natural
    read size given the passed-in upper limit. It favors
    a read size that does not require a reallocation, subject
    to a reasonable minimum to avoid tiny reads.

    @param buffer The dynamic buffer to inspect.

    @param max_size An upper limit on the returned value.

    @note If the buffer is already at its maximum size, zero
    is returned.
*/
template<class DynamicBuffer>
std::size_t
read_size(DynamicBuffer& buffer, std::size_t max_size);

/** Returns a natural read size or throw if the buffer is full.

    This function inspects the capacity, size, and maximum
    size of the dynamic buffer. Then it computes a natural
    read size given the passed-in upper limit. It favors
    a read size that does not require a reallocation, subject
    to a reasonable minimum to avoid tiny reads.

    @param buffer The dynamic buffer to inspect.

    @param max_size An upper limit on the returned value.

    @throws std::length_error if `max_size > 0` and the buffer
    is full.
*/
template<class DynamicBuffer>
std::size_t
read_size_or_throw(DynamicBuffer& buffer,
    std::size_t max_size);

} // beast
} // boost

#include <boost/beast/core/impl/read_size.hpp>

#endif

/* read_size.hpp
z3PCr/4Ud8ieLTSDOjjNgnzx+kne3spvMn19cFkUTSp2XmI5dwhyDR78Fpyi7v491aMxwTVYm+t8QH0Wf2HoW7C2pntjAlqUhekKalnqhnJBc1mqU2OXCkpUJHXRhKOV1drqtfeTmGNPb4gKqrbAyZdbR8qeKB5iv+W355vyIYTuwo+NaBv9ae/+uag/LLXQH/CYLahXCSqNDeL8+XEiYFc+xrc/bqxmqrHhi7em0vJw6Maq2oeb8uxGDfTetmKqEzUxxyi6r6D+szusE8NeBxSEm8LPjRLoPXzFRCdKMI4oNCHeij+Ft4K9lZ4liwlo29y/erP83HApxUlSI7YfIY7nZHb0sMSQphpv8TUort9t5WdUCXwfn2HG+fbhu9BKF11SPSgT+6ONkqZrmdVUTclBMVNqBhAjaVo13iJMBiONu8HkpyW50+jn2NBQMSQUlE5+8hlyFiatqAmPZXrEX3aGVOHE5YzlBd2rIRJYGqOG9j2k4dablRwn6H3ktvO4G/CbXWx4YLMNMOuRbvpXR3Kc63LR7sb3SN5QbwztAcRHSERfHCNejUrdq2xW87iCb4yJaI+QTILaPpVWckSj9wmqz+MOwHtDaRraE9GG/8V4DVvdtSqojkWqYmg/wHs0k1OpEUWCVRO65Rl477ma6ZfewHlt24NL+83DmBzVvpTscxvBeZ80yepHqd/GTH7R1qrYEA7197+NWH+rtRGRIKpY9ddav43T5SEcuejnX2tJVqPVoa8YNmZa3hzo9uBCfMt0EzNalZ3OksziQGMjV94aFfUN6WlLtuAjWc2UhVYj3kBSFq/qzlklMv3QwnaAX6101FroPiBeFZa9SozbGxniJTKj9MF9micyhzMyZ9URT0xKom2TMzQ7zEsMU2xCrA2K5QD/u9JpZ3i2Ys7qJ+wr5JFCdwNxpeXfJi84s2kexpx51H8EYkr2X7gO6q5/i9A0zCs3PUQe4A5+GdOpRYSnhDXijZLxfBzTKWO4Z7DhCA+i8Xz/P4KHfwCFmP8ImJjsB5h3kDT7WomHsQ6UR0pkmPBSqkjrSZSSjPR0Qz1dqXdm8v4sqGDobW3+IPJX63eNJKPCv1ovDpQR/2bV06URraO+LJbL0rCFb7NSCZnNHLfeQmgTb/8tlFrg2xbV9mbKhSvc0LPd0L3qSsZLdIP0jmlEj2kurTSyNP6oEPK3Oq8V3v2tzmsF4tc67vJUl2Nvg1a5st5dlY+3jCrtrexQXdo5f8gepL30og7SA+aNH+Z9yIbE9NqNEVadEj59nUuHPu6p9QlXMGN4JVS9S6ga5+n+kM1Hc3mPHqTXkX0WUuah2kRSMYTuiV48UMIgtrqf+6aldYAn7YNhP4ZnQRzJUTvJqYvylzTVLTYIsXl0MT00xS+QQPAYkxjVLEnFxzDFUjG9Koys1NBWJ5quLM0t/B9iq38Rv8uTo3LONoJ390QNDxwwDXiz3vcr4dyMLTjihTmepuL3o2LewGNr2BDrFAVt7FudA96WTws3KiP8kqb/Yj4r7GH2v4r9uS5XJao2hi4W66zft/8+aPNybyvu5D1G3bus29HmP/0D4DR6v4oadxb5/Yt7D9lkhDQMHMJUnHrMnAVGXjgFg43IybP0wIr+2yamheiWjvfw+cgzXGiCaq4zpZpqcq0qMDt5t/nIy5AMs5iJ04kjxzWNvHXVwaU9v9LKHHa+anE6i9CnNmVhjC0rIpjbFQa14VoF3WHjWn3/RY06RPebxv6gQTpURxkDIMzDtFrSrCHJERmv3LV5e6A53d35wFeBz0xRb/p4SbAuQgxGSP8d2A8RRDUKbxJl3PlcYPqktBWGiuT/4U4shlCc8xHr19nmBPAVGvZ0R6GiCIjzPmKdn0lMPTL2BaK+ExAXfGTawhTx+3cMS+ncGLo3CvWDgLjio8fQXFSBz9OfAsvw3PjLaxGGP3fX5wLfJ4/FOf3vO8GnwX/Ro/40fXkMi/ZHBQOFn8UGOt7cYRK/kGy9GieY719p8234x6CpqjJVfi1pgf+N/Jnq4ejzO7CWVMLBnSqdfrwwR/1/CtJoP17IfQWiF2jwKxMN7Ui4X39XSVgVxBnAGcJJ6PjGEcsR2rG5/S/P0JuvT9HGJkgdVpVnJbAI/ywUMrSfK7lWH65UIig/kVeSezzPdJ3i0j22//wteDGtf90gYfjNGfxy/++FZlCh0CdS1oGuUzy6x7Gf/144N2Kkd9ed4ZUnZLRHHfe+yQhag/p4yxfwh8B/FRC/RULUcdcpBN0jQWeXcztG+kXdWWpF0K4PPe+u9S8ufQTQnZbH2Nw/FZW9A6MQv/xm/uGqWoZbhOLPfzAP7nl4Un9ePJugGH+su+B/ZpsjRr/+Y8ozHufs/vhKWDwNDvlV/wkZDRBuomGM8f7v1HdCn+pJ979RaRergI/+vy+0pEs1/JOW86ockvq6dHEQ3C3/Afj6/caXT/SvlFpFd7lNn5pF959R6cbG14+EwlSk+GOSEsyTSgrcJpvhLn+FRafUz6uJDuIrv3KWUcxzSbEt7VdWq2PCm0mxXSUilfljY65nj9swRwt5fii5s+ac7Cml38ymJbpTrcBh7yuKc6fGRJrkTrkGMx9wa/0FtNkimPMSjlloc+a0O4j7/gqv9xwWZz6INJnG55K+kxRf1G640Xv1ZCG+MhHenCPhuartrkXxK/wZ3vxSgzOnowv7CX1sr8JBXDcrJ1cEe99BnPuPIHzZ4+YmTl5DXr2JNOElHPTgj52olxT3jXlt4FSM5SDSbBr/NUyv+N0214Il/MG9CklxfzHme9rYCf2Y8OdQk2l0bmnu+Bjkv/bSvBvbNTjKSeAvUbt6D5u1S1Cc5iTcDLH+OPdh3byz6LuYCK8XY1lMLOf5MaE/8erE7FKDNacj+zXE0UJal/i/HcbV5jbQV5YDZMJtP05S/EFJ78PrxIjXHg8W8jjFg2PCaxvsTttksU3bNcy0s8v933cmWAE0CiF0smAdgnA60a2IgLr8X/944v/jhYoATQDtFKBcFqqRGWl9iPUfwM01xOMqf8DaEpwDH07nlQVgLgdCJwr27+BRjyXgcBJQLgHVSIC07sUacDjxD2BtAc7hCbvzyhwwlwGh4w/7T+CM5wHgZ07YeXoEdZvmC+ioQVl3f21ujP/3bv+1UAbpfyj8hz2bXt3OAfx2cTpPdV4LrQFzTRA6u7AOabidrnb/MaiC0Ol/BTidrsKAubcQOpTQDmnv/hnwfQacoEJv7HtV6TZKvOuU/AiYQ4fQ0YB20EXtdBX7d2ByE+O/WsN9YBjB6J0DGgBS/X8Cn0Tv3TnOELEiL4j6FD5j7b4x8oer6gicXxM6OiW6dn/3wBPyhN/zjPzPZsb4nWDz6cqOQKy5N0Y6pCGOEUR9bJ8LUYSmg38rf7ceyLzbxBEKt4buPv9aI1/GUFFIlcHWVjz7LEDMRLgU6BhJ1Mf1R6upr9X/EZy/euT4jLX2xsjnH4D4ZAfHpyujR5KQ81CiPtrPWFFvjHhfQQhRH+lnLP83Ro/EIeevIRD+exBE1If5GUv/1ecrCDQwbOatR9mEEwonhGbye9dzK/Tu72DA9R3pnFA4JTSTE35Po/C7TXihcFpopvJ3dDTytvyalgg44QVM9QB68Xf/lUT/YxL+38l4TSjcdzPqGKJPf1owioTQeO1uT3MrxzwmKl2M3wvjN9jNO+zWPxBEgfJvRWF8Vn7jhXW3Z7hlTAYkJPW8wxoc7o+JjiIl/huIiSIl/SuQ1OMXB4Mdt7Y2Bwb7YwI74OGw7jbeDPWjxkeRUhFKKPJHZvrgCd1aO3m+fgJigK9wmWcoKs+/iTwE9dzg/kMl5fFNLpSElASv5cNhSyWl7us0lD+85PPUW+QHeyRhQ4xMhEwyJoEnjPfHe+TfX0f9+SZZFP4hpoPw7j9g/+tb8z9McNH+gP+IxfgADSzy07/7T9gu6YvPVkbU40WMPz8YJPF8NyBA+O+NwdH+b/4j9m+S/b9jEpXtb2Yxf96TfNSHPgwz8EUtBX6+EvvD2HvzbeNB9Nw3+5ZfySeDql3hw51EjP+frOCoQeDTNc3/TDFJ5R1/OQHTD+Tjev9C/P9CBP8Rlb7eBAjUSrz9v0AC/0Ic/w2xvK0Ffnt0aZv3q6V8+/8b+vYGHEbU8Tcm8O8C+Sb5g7AduJgC/b+R6OKq6N9OV3+0P+J/wjBJXoS39EMeEWL8icFA0faggYZ3dxgka8Jb2iE+CDH2xGD6P4xv7jCI10i2tL/4/P0bmn9jdNzClfgrw5Tw+0eGJsHvuKUS7hMao8AEphbn7731652v6B1owLrDIF0z2tIO9wmLsWdqN//zuxuBT4/vB4C/GeUnn//KbuM0qdtgwjsMkie1O2/RdKj5YH7PAOECvegyc3H3+2XvnqE1/Ipf3u9pUI5XyGfqI3EajNEVMZyqaKlpK6mrBPa7K3eYpGuEREgTWldO9vs4aBN0F6sT+fpANtwY7x/79jTe1jmcW//amOvqrQgK00fA7MD42k3H+8bsl9G8NCG0zDq7P2TDHVrjaFSBSRl0PemnX5yIOTBnWMqAKOJ/I7rtIXjNPgwoBN+d8bt54aVlcXKLOLp83dhD7J3ADs1h+SBhThU5psgL1FX44IjoSLxB0vPHWzhpnL8U/NMejucY/b3aeGk5nNwSji6RG3t4vRNcoTnOH35bMe0dXRI39uh6JzRDc2pe/VJHjinjpeVxcsv83yh4/0yBa7AV9a8VNjfoI8MaOLkVHF3SN/Z4eyc8Q3MuPkjsUv+2Mqxu7Mn2TiS/9hRdwpwmckwVL62Ik1vF0SV/o9EjLEcF/Y8OlfxR0eR3ByXMaSPH1PHSyji5tR1d6jf2bHonFl6jQP9bgcf9LhvTLXrXusabQH1iRL8gxo+vQI3qqSa7kR6jy7bqnV1YkIM23ZaCv0F4xpt1D5Q8f8wBaUIdBPRNCczeVRBh2PlUqNFpAfrbEVkPAWOp3x+853CYZai/fSdr9MgJ5c+W++71M96lb0Jf6x/DFlm7nQW1r09Zf1agQve4jzb81FQgqHcvYRMA36Lak5ed3fOcJaSk62clBfPsRCuP5Mmp/8sfMjbp4H3nLULHbQfPOmjk4y0LS4AjwXC3Jx2KPw2z6QGdv5f5ezk/wCvtTnjck1GcrGs2Bpr/Qk5Hl1zrL4JwP6Nb/lnjAAfquq1JWP3ZjVYA8RjKH0CpAOUBZv0tvrH2FUEUpAqS4J/2ejiS4EfJvmyw9hEzxaZHxVz6hOcGgyc7AsJoIo7fGPIIz0e+qyf9oqJC1cG5ot2IiSb/8lG98+m8MOBhU0kwqCp+bfRbflHIA9lJyZcpgWp0B39OmvVnhw+Kdx8Pzvg0wkjKMX7pyXCu+TIcgCObrySmytyX8Phkm8qi8rX9OSlXvG7gcgKkG/iPdqB1aPaU92clllO7t1F287RPwecF1lFNXPv1mM1c+81hy3gNdu4+d0/7zZv7qZcKojDLGSGQNLreVSlxp8rESdIyFL92GumRG2N/PoEd9hwiabHnaG4n2hCCl2ehl2fhlmc3B171RNgV8M9uz/n76GHKvXr+vXqCm95u4gYkoYarcv6Hi9fwrB3YQE+/CgGvnYh3shYohQt+4BZ4jXP1VwPfo3iWy+HKLvIFv44/1YpXw2hwUeXSvUPzVfnql5XZ4Fd6deBKzWckUs4QNGXrfkWxUc/3SrHpPo7gPkkxPFJ0x3DVHiZl1P7/A5DhGO7Tx+SE2j/wCjDPXR7+pjuG6/T8vw8ARZ+xfoYYQ5NGooZzijNu/I8AM0vi04ucht4HvqjLl6t3YiDS0O3sPc8PRn7EO5j5FyoEUlXW3+jd5WuWuUalX7BIFImTuB9Fe/ImSZf/gH5J1TpD26iuno0sKdtjNurTf+jO2p1pS5D7hCLQQ05FATIwujRrecIM6G5FITJNvI8MKB3D3afgsxbex582tcYSfqTJYw66RggKYpqccB89aIa6VJQw0kOrx++1/w7OVOODCrLpeNFNfxVR0frSwCvEQZ+xShGl8rtGX486nBJ0wwldbn/eG4aZSELIBga/ZOEbLAf2mYr6eWlGVNV5oEYihlf1MvVh9GNp4xnbOL4CNE5IZR86/wNfQAErfsdLbeiZQC5t10t0+ZsXkWaSR5T9UOF9p7sQkZDuENKQnBDjEATUAr/ENqrwqy9V6YyzcdVnVZUCEX8UUadqPUO5XVHENsTIrq/MulomX/ShtfIsQHV63NTxLW3bbOl6ttQ9OcOzn0Ue4nDU4PR5ORNm5VY4X/2sg183DBgFvE8eWxLxY9cBwX6EPGPsNAvgAJgIr1utXUGoQizDV/a3dy+d11v7ci1Ulbei8y6FMk5GNxA9AGIBqVuddcBOi4B9QBLUMjwRz/ZRKk1ADQQ71OP6MvU6/aweekB9w0fvqsDZ0ZLKVBMpGq5jUcqmk1tqal4nG/j+4PzQKxl0KJTBn77wKo3WFR/slhe0jIz5hhffW4+ldMuwB38FfqE1BcV8jY/Fqw7lIL0ChA9/V+nErTic7m12ZUl6sx2uoiztFKvNqZsyMxC6Tzd4HdNHFuwLapdZMVwrsx4faGZjD/cVJoCdR+xcoDy7Mb5m4ko5rjJFnhMCNEDawM7DVqIImnmvn9rdtoQdkyAtSOQCO4le+/NHIVxmZdT6j1E3YduepsVLIkCfWxdbynHA3CLE3NcjkUx+E0LhqVU93EgtXPxsc30yJ27SiWyk9xEp2rjz2tYvR8g4MzBeOKwHjqufEMkgVg1tzf3HYFedjgPAqUhHU67t6VwlRp5H+MoonZnkp4Bd9xAUA8ROxIAgALPiKeQVgyakA0wnTYAXYJy50Qzqdp4WUAHRKgMGwAP6AIVHEXWdZlBL9fUyhvKlXEtDemT0ghsVNUl4jzjeP39WVO/iPzKvXwfoGwJLbTNEjGCXKc9k2ddtOn1/tRsovB4+Tkps6x72wCOn9UVMg3d/nsIBG5bDynrWAiZVMKenGLmiE/3d4k/3uCU1ZUZgQaYMKlUmqN1l3x1P0aFpxt0aU33ctBcpuhaoy9ACT/Uwuf0oE1AN1JXngXsFeUaoitd5Mvu8mUcySUVTn14LxBUA8Ay480P93K6jb6PSFXyrvtowSVr+STHzRg/AO5XqJbepRQI+QSMOjMujVVLzQYrmrbfNJni6Tjy6yuJJqWJJqSJJiJky8tkyXpPktvux1y5SELpgzogAqsTxz1cSZDkw9PuxGnuxcPuxOM25CLqTyQz7okm3Fo0GUMO6PKzrmUZwZWELgchnjlA/71lNmogmdMbvdCrfpvxqRiLaz4XPjK4QKXYouWY/qSzvz1RtVhAooWH/woeAwo+wcka3gEQkBMeHYHVJpwqmUx0c3VOMMNyuANDRP7Zt27Zt27Zt27Zt4xvbtm1bd85Ns153dtK0TZ/qp4YLPhbWGJAeFhUaO+MY0NS+jVtFtOLhLxz8FXvVtzMOp16PfQgWjqbmK7QvwAkdhV9Pk17HYeXvic1iE8hRq8vYhUFwBrQxubeCdkStQLtMr1lb+i/LOlqj2R/zubObAuUOOMF8HJNMBUbq/ipk7t+iXS9oh8P+jY5G211pkUaUWjxuUpzTYfylZrpbIaXdia64xewThAxpbf6U
*/