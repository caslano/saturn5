//
// Copyright (c) 2016-2019 Vinnie Falco (vinnie dot falco at gmail dot com)
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//
// Official repository: https://github.com/boostorg/beast
//

#ifndef BOOST_BEAST_IMPL_READ_SIZE_HPP
#define BOOST_BEAST_IMPL_READ_SIZE_HPP

#include <boost/asio/buffer.hpp>
#include <boost/assert.hpp>
#include <stdexcept>
#include <type_traits>

namespace boost {
namespace beast {

namespace detail {

template<class T, class = void>
struct has_read_size_helper : std::false_type {};

template<class T>
struct has_read_size_helper<T, decltype(
    read_size_helper(std::declval<T&>(), 512),
    (void)0)> : std::true_type
{
};

template<class DynamicBuffer>
std::size_t
read_size(DynamicBuffer& buffer,
    std::size_t max_size, std::true_type)
{
    return read_size_helper(buffer, max_size);
}

template<class DynamicBuffer>
std::size_t
read_size(DynamicBuffer& buffer,
    std::size_t max_size, std::false_type)
{
    static_assert(
        net::is_dynamic_buffer<DynamicBuffer>::value,
        "DynamicBuffer type requirements not met");
    auto const size = buffer.size();
    auto const limit = buffer.max_size() - size;
    BOOST_ASSERT(size <= buffer.max_size());
    return std::min<std::size_t>(
        std::max<std::size_t>(512, buffer.capacity() - size),
        std::min<std::size_t>(max_size, limit));
}

} // detail

template<class DynamicBuffer>
std::size_t
read_size(
    DynamicBuffer& buffer, std::size_t max_size)
{
    return detail::read_size(buffer, max_size,
        detail::has_read_size_helper<DynamicBuffer>{});
}

template<class DynamicBuffer>
std::size_t
read_size_or_throw(
    DynamicBuffer& buffer, std::size_t max_size)
{
    auto const n = read_size(buffer, max_size);
    if(n == 0)
        BOOST_THROW_EXCEPTION(std::length_error{
            "buffer overflow"});
    return n;
}

} // beast
} // boost

#endif

/* read_size.hpp
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
*/