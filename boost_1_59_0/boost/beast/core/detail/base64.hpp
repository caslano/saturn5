//
// Copyright (c) 2016-2019 Vinnie Falco (vinnie dot falco at gmail dot com)
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//
// Official repository: https://github.com/boostorg/beast
//

#ifndef BOOST_BEAST_DETAIL_BASE64_HPP
#define BOOST_BEAST_DETAIL_BASE64_HPP

#include <boost/beast/core/string.hpp>
#include <cctype>
#include <utility>

namespace boost {
namespace beast {
namespace detail {

namespace base64 {

BOOST_BEAST_DECL
char const*
get_alphabet();

BOOST_BEAST_DECL
signed char const*
get_inverse();

/// Returns max chars needed to encode a base64 string
BOOST_BEAST_DECL
std::size_t constexpr
encoded_size(std::size_t n)
{
    return 4 * ((n + 2) / 3);
}

/// Returns max bytes needed to decode a base64 string
inline
std::size_t constexpr
decoded_size(std::size_t n)
{
    return n / 4 * 3; // requires n&3==0, smaller
}

/** Encode a series of octets as a padded, base64 string.

    The resulting string will not be null terminated.

    @par Requires

    The memory pointed to by `out` points to valid memory
    of at least `encoded_size(len)` bytes.

    @return The number of characters written to `out`. This
    will exclude any null termination.
*/
BOOST_BEAST_DECL
std::size_t
encode(void* dest, void const* src, std::size_t len);

/** Decode a padded base64 string into a series of octets.

    @par Requires

    The memory pointed to by `out` points to valid memory
    of at least `decoded_size(len)` bytes.

    @return The number of octets written to `out`, and
    the number of characters read from the input string,
    expressed as a pair.
*/
BOOST_BEAST_DECL
std::pair<std::size_t, std::size_t>
decode(void* dest, char const* src, std::size_t len);

} // base64

} // detail
} // beast
} // boost

#ifdef BOOST_BEAST_HEADER_ONLY
#include <boost/beast/core/detail/base64.ipp>
#endif

#endif

/* base64.hpp
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
*/