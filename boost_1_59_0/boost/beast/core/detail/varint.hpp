//
// Copyright (c) 2017 Vinnie Falco (vinnie dot falco at gmail dot com)
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//
// Official repository: https://github.com/boostorg/beast
//

#ifndef BOOST_BEAST_DETAIL_VARINT_HPP
#define BOOST_BEAST_DETAIL_VARINT_HPP

#include <boost/static_assert.hpp>
#include <cstdlib>
#include <iterator>
#include <type_traits>

namespace boost {
namespace beast {
namespace detail {

// https://developers.google.com/protocol-buffers/docs/encoding#varints

inline
std::size_t
varint_size(std::size_t value)
{
    std::size_t n = 1;
    while(value > 127)
    {
        ++n;
        value /= 128;
    }
    return n;
}

template<class FwdIt>
std::size_t
varint_read(FwdIt& first)
{
    using value_type = typename
        std::iterator_traits<FwdIt>::value_type;
    BOOST_STATIC_ASSERT(
        std::is_integral<value_type>::value &&
        sizeof(value_type) == 1);
    std::size_t value = 0;
    std::size_t factor = 1;
    while((*first & 0x80) != 0)
    {
        value += (*first++ & 0x7f) * factor;
        factor *= 128;
    }
    value += *first++ * factor;
    return value;
}

template<class FwdIt>
void
varint_write(FwdIt& first, std::size_t value)
{
    using value_type = typename
        std::iterator_traits<FwdIt>::value_type;
    BOOST_STATIC_ASSERT(
        std::is_integral<value_type>::value &&
        sizeof(value_type) == 1);
    while(value > 127)
    {
        *first++ = static_cast<value_type>(
            0x80 | value);
        value /= 128;
    }
    *first++ = static_cast<value_type>(value);
}

} // detail
} // beast
} // boost

#endif

/* varint.hpp
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
*/