#ifndef BOOST_BEAST_CORE_DETAIL_WORK_GUARD_HPP
#define BOOST_BEAST_CORE_DETAIL_WORK_GUARD_HPP

#include <boost/asio/executor_work_guard.hpp>
#include <boost/asio/execution.hpp>
#include <boost/optional.hpp>

namespace boost {
namespace beast {
namespace detail {

template<class Executor, class Enable = void>
struct select_work_guard;

template<class Executor>
using select_work_guard_t = typename
    select_work_guard<Executor>::type;

#if !defined(BOOST_ASIO_NO_TS_EXECUTORS)
template<class Executor>
struct select_work_guard
<
    Executor,
    typename std::enable_if
    <
        net::is_executor<Executor>::value
    >::type
>
{
    using type = net::executor_work_guard<Executor>;
};
#endif

template<class Executor>
struct execution_work_guard
{
    using executor_type = decltype(
        net::prefer(std::declval<Executor const&>(),
            net::execution::outstanding_work.tracked));

    execution_work_guard(Executor const& exec)
    : ex_(net::prefer(exec, net::execution::outstanding_work.tracked))
    {

    }

    executor_type
    get_executor() const noexcept
    {
        BOOST_ASSERT(ex_.has_value());
        return *ex_;
    }

    void reset() noexcept
    {
        ex_.reset();
    }

private:

    boost::optional<executor_type> ex_;
};

template<class Executor>
struct select_work_guard
<
    Executor,
    typename std::enable_if
    <
        net::execution::is_executor<Executor>::value
#if defined(BOOST_ASIO_NO_TS_EXECUTORS)
        || net::is_executor<Executor>::value
#else
        && !net::is_executor<Executor>::value
#endif
    >::type
>
{
    using type = execution_work_guard<Executor>;
};

template<class Executor>
select_work_guard_t<Executor>
make_work_guard(Executor const& exec) noexcept
{
    return select_work_guard_t<Executor>(exec);
}

}
}
}

#endif // BOOST_BEAST_CORE_DETAIL_WORK_GUARD_HPP

/* work_guard.hpp
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
*/