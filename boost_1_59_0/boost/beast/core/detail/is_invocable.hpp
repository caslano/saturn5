//
// Copyright (c) 2016-2019 Vinnie Falco (vinnie dot falco at gmail dot com)
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//
// Official repository: https://github.com/boostorg/beast
//

#ifndef BOOST_BEAST_DETAIL_IS_INVOCABLE_HPP
#define BOOST_BEAST_DETAIL_IS_INVOCABLE_HPP

#include <boost/asio/async_result.hpp>
#include <boost/type_traits/make_void.hpp>
#include <type_traits>
#include <utility>

namespace boost {
namespace beast {
namespace detail {

template<class R, class C, class ...A>
auto
is_invocable_test(C&& c, int, A&& ...a)
    -> decltype(std::is_convertible<
        decltype(c(std::forward<A>(a)...)), R>::value ||
            std::is_same<R, void>::value,
                std::true_type());

template<class R, class C, class ...A>
std::false_type
is_invocable_test(C&& c, long, A&& ...a);

/** Metafunction returns `true` if F callable as R(A...)

    Example:

    @code
    is_invocable<T, void(std::string)>::value
    @endcode
*/
/** @{ */
template<class C, class F>
struct is_invocable : std::false_type
{
};

template<class C, class R, class ...A>
struct is_invocable<C, R(A...)>
    : decltype(is_invocable_test<R>(
        std::declval<C>(), 1, std::declval<A>()...))
{
};
/** @} */

template<class CompletionToken, class Signature, class = void>
struct is_completion_token_for : std::false_type
{
};

struct any_initiation
{
    template<class...AnyArgs>
    void operator()(AnyArgs&&...);
};

template<class CompletionToken, class R, class...Args>
struct is_completion_token_for<
    CompletionToken, R(Args...), boost::void_t<decltype(
        boost::asio::async_initiate<CompletionToken, R(Args...)>(
            any_initiation(), std::declval<CompletionToken&>())
        )>> : std::true_type
{
};

} // detail
} // beast
} // boost

#endif

/* is_invocable.hpp
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
*/