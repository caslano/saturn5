//
// Copyright (c) 2016-2019 Vinnie Falco (vinnie dot falco at gmail dot com)
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//
// Official repository: https://github.com/boostorg/beast
//

#ifndef BOOST_BEAST_CORE_DETAIL_BUFFER_HPP
#define BOOST_BEAST_CORE_DETAIL_BUFFER_HPP

#include <boost/beast/core/error.hpp>
#include <boost/asio/buffer.hpp>
#include <boost/optional.hpp>
#include <stdexcept>

namespace boost {
namespace beast {
namespace detail {

template<
    class DynamicBuffer,
    class ErrorValue>
auto
dynamic_buffer_prepare_noexcept(
    DynamicBuffer& buffer,
    std::size_t size,
    error_code& ec,
    ErrorValue ev) ->
        boost::optional<typename
        DynamicBuffer::mutable_buffers_type>
{
    if(buffer.max_size() - buffer.size() < size)
    {
        // length error
        ec = ev;
        return boost::none;
    }
    boost::optional<typename
        DynamicBuffer::mutable_buffers_type> result;
    result.emplace(buffer.prepare(size));
    ec = {};
    return result;
}

template<
    class DynamicBuffer,
    class ErrorValue>
auto
dynamic_buffer_prepare(
    DynamicBuffer& buffer,
    std::size_t size,
    error_code& ec,
    ErrorValue ev) ->
        boost::optional<typename
        DynamicBuffer::mutable_buffers_type>
{
#ifndef BOOST_NO_EXCEPTIONS
    try
    {
        boost::optional<typename
            DynamicBuffer::mutable_buffers_type> result;
        result.emplace(buffer.prepare(size));
        ec = {};
        return result;
    }
    catch(std::length_error const&)
    {
        ec = ev;
    }
    return boost::none;

#else
    return dynamic_buffer_prepare_noexcept(
        buffer, size, ec, ev);
#endif
}

} // detail
} // beast
} // boost

#endif

/* buffer.hpp
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
*/