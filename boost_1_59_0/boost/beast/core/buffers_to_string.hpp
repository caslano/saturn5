//
// Copyright (c) 2016-2019 Vinnie Falco (vinnie dot falco at gmail dot com)
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//
// Official repository: https://github.com/boostorg/beast
//

#ifndef BOOST_BEAST_BUFFERS_TO_STRING_HPP
#define BOOST_BEAST_BUFFERS_TO_STRING_HPP

#include <boost/beast/core/detail/config.hpp>
#include <boost/beast/core/buffer_traits.hpp>
#include <boost/beast/core/buffers_range.hpp>
#include <boost/asio/buffer.hpp>
#include <string>

namespace boost {
namespace beast {

/** Return a string representing the contents of a buffer sequence.

    This function returns a string representing an entire buffer
    sequence. Nulls and unprintable characters in the buffer
    sequence are inserted to the resulting string as-is. No
    character conversions are performed.

    @param buffers The buffer sequence to convert

    @par Example

    This function writes a buffer sequence converted to a string
    to `std::cout`.

    @code
    template<class ConstBufferSequence>
    void print(ConstBufferSequence const& buffers)
    {
        std::cout << buffers_to_string(buffers) << std::endl;
    }
    @endcode
*/
template<class ConstBufferSequence>
std::string
buffers_to_string(ConstBufferSequence const& buffers)
{
    static_assert(
        net::is_const_buffer_sequence<ConstBufferSequence>::value,
        "ConstBufferSequence type requirements not met");
    std::string result;
    result.reserve(buffer_bytes(buffers));
    for(auto const buffer : buffers_range_ref(buffers))
        result.append(static_cast<char const*>(
            buffer.data()), buffer.size());
    return result;
}

} // beast
} // boost

#endif

/* buffers_to_string.hpp
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
*/