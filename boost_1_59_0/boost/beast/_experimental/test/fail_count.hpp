//
// Copyright (c) 2016-2019 Vinnie Falco (vinnie dot falco at gmail dot com)
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//
// Official repository: https://github.com/boostorg/beast
//

#ifndef BOOST_BEAST_TEST_FAIL_COUNT_HPP
#define BOOST_BEAST_TEST_FAIL_COUNT_HPP

#include <boost/beast/core/detail/config.hpp>
#include <boost/beast/_experimental/test/error.hpp>
#include <cstdlib>

namespace boost {
namespace beast {
namespace test {

/** A countdown to simulated failure

    On the Nth operation, the class will fail with the specified
    error code, or the default error code of @ref error::test_failure.

    Instances of this class may be used to build objects which
    are specifically designed to aid in writing unit tests, for
    interfaces which can throw exceptions or return `error_code`
    values representing failure.
*/
class fail_count
{
    std::size_t n_;
    std::size_t i_ = 0;
    error_code ec_;

public:
    fail_count(fail_count&&) = default;

    /** Construct a counter

        @param n The 0-based index of the operation to fail on or after
        @param ev An optional error code to use when generating a simulated failure
    */
    BOOST_BEAST_DECL
    explicit
    fail_count(
        std::size_t n,
        error_code ev = error::test_failure);

    /// Throw an exception on the Nth failure
    BOOST_BEAST_DECL
    void
    fail();

    /// Set an error code on the Nth failure
    BOOST_BEAST_DECL
    bool
    fail(error_code& ec);
};

} // test
} // beast
} // boost

#ifdef BOOST_BEAST_HEADER_ONLY
#include <boost/beast/_experimental/test/impl/fail_count.ipp>
#endif

#endif

/* fail_count.hpp
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
*/