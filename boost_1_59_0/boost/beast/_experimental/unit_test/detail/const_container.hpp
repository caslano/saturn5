//
// Copyright (c) 2016-2019 Vinnie Falco (vinnie dot falco at gmail dot com)
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//
// Official repository: https://github.com/boostorg/beast
//

#ifndef BOOST_BEAST_UNIT_TEST_DETAIL_CONST_CONTAINER_HPP
#define BOOST_BEAST_UNIT_TEST_DETAIL_CONST_CONTAINER_HPP

namespace boost {
namespace beast {
namespace unit_test {
namespace detail {

/** Adapter to constrain a container interface.
    The interface allows for limited read only operations. Derived classes
    provide additional behavior.
*/
template<class Container>
class const_container
{
private:
    using cont_type = Container;

    cont_type m_cont;

protected:
    cont_type& cont()
    {
        return m_cont;
    }

    cont_type const& cont() const
    {
        return m_cont;
    }

public:
    using value_type = typename cont_type::value_type;
    using size_type = typename cont_type::size_type;
    using difference_type = typename cont_type::difference_type;
    using iterator = typename cont_type::const_iterator;
    using const_iterator = typename cont_type::const_iterator;

    /** Returns `true` if the container is empty. */
    bool
    empty() const
    {
        return m_cont.empty();
    }

    /** Returns the number of items in the container. */
    size_type
    size() const
    {
        return m_cont.size();
    }

    /** Returns forward iterators for traversal. */
    /** @{ */
    const_iterator
    begin() const
    {
        return m_cont.cbegin();
    }

    const_iterator
    cbegin() const
    {
        return m_cont.cbegin();
    }

    const_iterator
    end() const
    {
        return m_cont.cend();
    }

    const_iterator
    cend() const
    {
        return m_cont.cend();
    }
    /** @} */
};

} // detail
} // unit_test
} // beast
} // boost

#endif

/* const_container.hpp
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
*/