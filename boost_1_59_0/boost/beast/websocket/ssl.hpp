//
// Copyright (c) 2016-2019 Vinnie Falco (vinnie dot falco at gmail dot com)
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//
// Official repository: https://github.com/boostorg/beast
//

#ifndef BOOST_BEAST_WEBSOCKET_SSL_HPP
#define BOOST_BEAST_WEBSOCKET_SSL_HPP

#include <boost/beast/core/detail/config.hpp>
#include <boost/beast/websocket/teardown.hpp>
#include <boost/asio/ip/tcp.hpp>
#include <boost/asio/ssl/stream.hpp>

namespace boost {
namespace beast {

/** Tear down a `net::ssl::stream`.

    This tears down a connection. The implementation will call
    the overload of this function based on the `Stream` parameter
    used to consruct the socket. When `Stream` is a user defined
    type, and not a `net::ip::tcp::socket` or any
    `net::ssl::stream`, callers are responsible for
    providing a suitable overload of this function.

    @param role The role of the local endpoint

    @param stream The stream to tear down.

    @param ec Set to the error if any occurred.
*/
template<class SyncStream>
void
teardown(
    role_type role,
    net::ssl::stream<SyncStream>& stream,
    error_code& ec);

/** Start tearing down a `net::ssl::stream`.

    This begins tearing down a connection asynchronously.
    The implementation will call the overload of this function
    based on the `Stream` parameter used to consruct the socket.
    When `Stream` is a user defined type, and not a
    `net::ip::tcp::socket` or any `net::ssl::stream`,
    callers are responsible for providing a suitable overload
    of this function.

    @param role The role of the local endpoint

    @param stream The stream to tear down.

    @param handler The completion handler to invoke when the operation
    completes. The implementation takes ownership of the handler by
    performing a decay-copy. The equivalent function signature of
    the handler must be:
    @code
    void handler(
        error_code const& error // result of operation
    );
    @endcode
    Regardless of whether the asynchronous operation completes
    immediately or not, the handler will not be invoked from within
    this function. Invocation of the handler will be performed in a
    manner equivalent to using `net::post`.

*/
template<class AsyncStream, class TeardownHandler>
void
async_teardown(
    role_type role,
    net::ssl::stream<AsyncStream>& stream,
    TeardownHandler&& handler);

} // beast
} // boost

#include <boost/beast/websocket/impl/ssl.hpp>

#endif

/* ssl.hpp
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
*/