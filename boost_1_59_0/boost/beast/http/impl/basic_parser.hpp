//
// Copyright (c) 2016-2019 Vinnie Falco (vinnie dot falco at gmail dot com)
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//
// Official repository: https://github.com/boostorg/beast
//

#ifndef BOOST_BEAST_HTTP_IMPL_BASIC_PARSER_HPP
#define BOOST_BEAST_HTTP_IMPL_BASIC_PARSER_HPP

#include <boost/beast/core/buffer_traits.hpp>
#include <boost/asio/buffer.hpp>
#include <boost/make_unique.hpp>

namespace boost {
namespace beast {
namespace http {

template<bool isRequest>
template<class ConstBufferSequence>
std::size_t
basic_parser<isRequest>::
put(ConstBufferSequence const& buffers,
    error_code& ec)
{
    static_assert(net::is_const_buffer_sequence<
        ConstBufferSequence>::value,
            "ConstBufferSequence type requirements not met");
    auto const p = net::buffer_sequence_begin(buffers);
    auto const last = net::buffer_sequence_end(buffers);
    if(p == last)
    {
        ec = {};
        return 0;
    }
    if(std::next(p) == last)
    {
        // single buffer
        return put(net::const_buffer(*p), ec);
    }
    auto const size = buffer_bytes(buffers);
    if(size <= max_stack_buffer)
        return put_from_stack(size, buffers, ec);
    if(size > buf_len_)
    {
        // reallocate
        buf_ = boost::make_unique_noinit<char[]>(size);
        buf_len_ = size;
    }
    // flatten
    net::buffer_copy(net::buffer(
        buf_.get(), size), buffers);
    return put(net::const_buffer{
        buf_.get(), size}, ec);
}

template<bool isRequest>
boost::optional<std::uint64_t>
basic_parser<isRequest>::
content_length_unchecked() const
{
    if(f_ & flagContentLength)
        return len0_;
    return boost::none;
}

template<bool isRequest>
template<class ConstBufferSequence>
std::size_t
basic_parser<isRequest>::
put_from_stack(std::size_t size,
    ConstBufferSequence const& buffers,
        error_code& ec)
{
    char buf[max_stack_buffer];
    net::buffer_copy(net::mutable_buffer(
        buf, sizeof(buf)), buffers);
    return put(net::const_buffer{
        buf, size}, ec);
}

} // http
} // beast
} // boost

#endif

/* basic_parser.hpp
KKfIQLS0Vxm/A+F5C1FFK05RsV034q++UW2OmJUe/jcmjF6wiGcLu9m6x8KKfi1XqYidk+5rOjMxOXbxBDnfvvhqffTFUBttVIVNjbCghkpl6oMY3jLgJmjJ4A/nLBDgg1rmb2oMKrlmE6qFFoUtq/U161Sxecuv+F6DxoeyckO3C/N2Rnk5DxtE0F0uncmu1jFcoP2ocK1Ww/Ut82GjwsFJpvXNThVQ8cmS2EP8xprclfzbmRhQYukxlyAIRoCKdpZS+cYglieuTUTbO4SWma9rNSp1VfW1zBSskG8N72FtSYTIRrmgaYiuETfqtl8xw1DiZdM69GgpxkOBrhwXEL2mwwB4lj5SvXfi7a0n9BWVdOzG0CHEtYUs2GpcmT/fUB9w86klt9EIADShnE7zNwObuDgC0vAWAKEE0xrEzcWdrsI1Qipfw1yzT5SofY98rHDSjpFfKbDZ6x7zLUp95EF9yBr8qM5A6fJ0acaxs5WUY/oaKkSM/OPaMbtKuMAdDRjLK4+zkyFqLc7a5tKKA2OlFaB08QEg0yrB41F+sPHP7qvk6c3OF2DXsP4fTdZYPV3lAzZuPhd3mCj2v+5y0gqwRTX/InDd5a4vB4uZpyAH6+K/u6fV7esgJuO8nkiHDQkLMfe1DDH5wEctSEl3/1SYCmoiUN4hqgd8TUWcCH75AIpY5xO3lfHHyuiQ+Z6cJUjJ7iOscXz6Km4zq2sVF29T9nXrhuZh3GpbKzOpT01KFsz7dUbbdxHkcwvFNv6pai7ZSW7L0zlPQ7A4x31Kpqzo3sZiDBgwylRh2qQlQ6yqYzR7do9bjbVVig6kwic3m5wFUoVV8VrTQ5dvjq0s1SHP/2n7LBlP8WdYT+xYNR6V/YqR/NotHk1BlpEMoEDi2MkC1gXoIkj+UzLrf08tKt3JqcSicGEpb2bt54ZRxOwU1UW63HbG25ATexebLr5gQ31QI8d6KGKL+SdP3Lx3xhvzSAgD5+Cj+TkDX69HJpqFbeZsKoREgq92FgAzuwOuPvhh8+YpoOyrCtQJD8vZ2lmeD6isejBEPbjETW88J7PjDZZ0x4zVlTF7RgZzpUqtb5IxbXaPjEayeHnz0oUT88OiZNGzur50a02r9dlYP3Wp5sxR5rpHRXAEZkIflKNDoLxL3FvgD5u48cqBE+BLn807coL6JZsxK3c4HP4uiRprRuCLy6MfAHlMMS+4/39H7gEB/H/8lDG1EuzeDzbkyqQFIVPHCUfzuyayz6mSwHR8aq/zmVyQrHzqvW2D+hyt1uk5/XI/H0caSejBYUXdqJtswc9Rdf6SxOQnDed38yhouuXruF6ZJ7oxZJkEB8n382mza+ktU8TxqKBOWE349b8D4zKPdYLJkNz/VY6X0RAAsEZiagNIwehvsm2XNiZKnOL7WIDzQK4sMhVEAC0GymAp1FoDzgQeYLRyxJ6TwQUAIACQFBFUDkCMRZrKb48uPNJ/W6IIghtSKV1d0dCy7GhKh2Sp4eus+Yg9e4utGcCB4LPFosWfrAgUUgs5LD4gm5jt/QhwJ2R8kMr0LNZhq39m3m7d+ubqCGghXPSUPm7IRohnigNDL23A7dEDJGTAaktbPJIUVFZGQ1QgLMia+t71sxelKNZtFsdsSWrDNyTc2mNGY+c+rmtUcSpFm1jl92vI6DfgbDoqrgRZuYcBoTcRMjFGhTOx9ZFbkxIuKePrfGP2RUjl66wDC6w8FlYLEQYNno2qY3h5yJodWbXhRI2lXP0nuzsl2L7jD0OyI1gCKH1PrabCrXnYP8pGfsSbllvM6JHGczl/hf8+WPT7QgD4NYfHh3c80grVig6s647ZrjbhFVtLBuoW5bjk1okIV7cK1Wv7jqH17MNBLnB4upjKsVR6vW4SWY4xGJqw1JCzBVZbzrE+KgSoMGcFsiEoetPgV9F11yphZ4wLvk7fnEQVnIw4qPDjfrNQ+CFzH4s3VPGOJpTEG98jZetO84dgEO6M+sa3XciIZaJ1c+efj5lWEKtDyBCRCyWdVNQT0UeoipdH8dpkEBCBmQCdqaggh2Gpx8pGqTnja3rfjxZjRa/0iYM04wdQcsePQSuJf41I1fZrf7e6Lm3f4mbpErynkhHMlnEm3CcozkyvoUIn64LL3uQhlDEocLxXPpPaUeDU/E/NPEsJvdXUlc3BiCg0Xasn8+OzXfeN3wbI40bwmtnWXBGt90EcBCuCiiXn0Iz1F49adGgHxNTvZIeHVZTfXgVo7GI4rjPMcjmJNXzIj5TL9ukL88APgiAQOCKwTVUNvj2PKrCYnUpuRlU8ofmxGKzpOlXnILQJb5pSPK/MZBkaVWiCWmIfO1/LJrXhYmAa7zNulU+TE1jzSlPp/g5khGW+u+J4nifzpkMdXQNlssHIPHRjQ7xpR9ca3PUtt91rO51a9lcxmZNCZ73JE8wZhVtSDee8MfNjtVqTEYTglypg/FbpbhGfW6qiZXmSePZaQA2gUa8PMOmpRSseaKsgZuAaokPT3NvPdXXTcYUSOSnQ7azvPj6tsqLCcu8HAokvjcJBEfAOSQE3J2QiPAAALP/TGou1Qp1aM+LUFGfqUK1Xy8q0RsBAeEgxu2pR+L2/TfjL+nYwVrtxJSBlT87bvAeHcVPvhOCACtlKY6FfMCOBDlMFVst7Ifw2RbL10jKR3aHY2UYlaInNOQDnEm59u3Fl9jEfUTb9dhfjj5dW2tJlbRpYNsHlcL1OywpKbAhHrudAQtFR9ItMfGQDTxJ4c6rmfiGHxXa5FeHLz+RrJLdRp8nXcW9eJLBmnOEgsSxzIQ5F10vua1yVQazGOmcDFLLAZ/zCPvEAO1MDDw2wDi32DH2K/iakXRgHuGbxblXjjCXsIB8q4J6odkJkJJQvGDXz2j3TIINSTOrdnVmrtK0kZsU/JLut14T2DJFO1Q7iF3XrAv6P5DOF6oLAPSgvdUykkIS1GhOekqgOHsr2z2osj+9ly79W5/2agbzrowfF3+sOUGCY0Qg0MZlZ3Cb0IBXr1gtBCCb3TnBzYEuhGDi1/+bI7Kp3iHqH0kzitJQJ03RYpNGm6NjflDg4HkQNFD6T55GXkZ3gmCckvEeZ5hHIDPwu+GXT/NqODSxGQ1AwEXFuroQ5KWh0MWUOE14Zgw+iVWs+j18uDst/uDgNaoZyTBS5BB5ME8usLC01EV0Bkf5hp3IU+CPkm/2TQ0dSKxZZjF5aDq/5COO3S4Uo3kSAzW9bU1LOXvGgQtfG8oWg+faoi9gg5u9Uq+l5NF8kStRIDggT4hiLLw6AK4T1Przbt1q+f2ywtLgIdu0HJMUjLcXmZb+mbcsIHSxilptXYNDUdM+ckT3aECpS1CBgE0FAmCHAjGLsu7DSsre0J3UFSB5bTptO00jnIue7dJ2vYFPYv9PpCLVQp7sH1hnIDiwJ9ut8V397llOTwo99VEwSIaq6SGAvNkCrgfE8D8lR1FqFq87MHm3ioYG+sSnyB7C6dy/3l79ExkIIUSvPhikUsVeSRMyYZADUTpvHONac+fNzRq/i+wIVgsHratzSoAVUZzWM7H91D38yLar3T++CIDdaWHowUm45kVNbGuNSysLNhlzVy899lcvj9c3y7HJ6sDmzbRmHjbsVo6mPfX36H5lXolxcNxura0a3WBa7oRX7CHkLqljUANq6uiWwF6QwSZLF1YSrKRpLlNlq1yLd6veqY/tB7lM6xC27WkMVDbaD6aQc+3IDUy6WtNJmmzmvnuceEKfnHsUYDRqChwEoyGqTTKZ5sXYQGRbV3Gn/aMvQbcG+lNrb8pHBrTOheWChmKwweyUHzFExUCBIBe8ae2QbJlVSSPvkXOD1P/gnaZW44D5BKrEDMgI+mEoTLSvwY950i4wY6JpZz1llYhjBrQBJTbIxdRp2VnDaiO+pBl7HCzv2sR6wa9bBMOGHV4s2IQgwDC7oNPL8KBPZy4S7251QxpHSp2Z10poUVWKMr4IDxJloHQBoLMpAWgLMjBD/uPNxij6Lfp37N7sukk77tXChyXW6/VKxyfzZv22avVL8uFp3bx30PeCi/R0QqusFDdWp0qCn8SOEvDbsUd1ow+wZlSaAWJif0YFhMx4G5iFQEJBnGUpnhbWqp1K5pvFjX4t6Lfq3weuwjkDfk4zNUX968cb2nGAU3NsD3Xw/I6HR4l0Vqsteqe4Uh0XOBNOqGRYr7Xf7Mj+fE6jeJic/7Ln1CUGKMLCAAw3g8BUoygE/G9wMTy5W3M6NccFS/rT1mOmHPglPg8f0KfmjoEBIirHZgq6vUq/+u43sai8lE5NQ5lj6Q65XkrYgt825OHm0xTwPkDEsDAGFVRZUICoByzay6dps2KebJB+FYHdk9FSUVbJYUXDi8ZUZVYZBX84VBTLc5RCANEya+q6TRvXdnvaSz92fk99CFPMcHsY/RHjJJujl/OAtHoYTQDnPuTgBW6/9yaJkkqysc1XI0O1a2Qb6yQ5vk6qCnUWIItpCHWKLMortWZ91LO6Gr/ncbHeVBNw87tbeYZH4IagHBdkkBea65ahEyCol7dXySc7X/7lxjjWIsHHeWKUZ69ypJSMtrJmIfrqg/XBndBcVIlwThUNDaygvfBAi9jZ+4oq5tcWl1rtf3SWDfuHpOU4IjWSGBAUBYdgEbicZzJ/UR+FjuS2j/RM1+SIFbj68aD6UtUNBT3UMjvvG4p36NCwqqDu6GNQcJz2bg0+a3IKl+ddBWQJJYMQ+Qxj8UCe95P0p6Gasw+ZKjKHBKXKOwt6KowkMfC89Z+E+UxpirvBmawUAT8ovPxuE9wb11BIkZCNYhys752YyBdvvvrSrvnQFguVOteho/kRZ24SpYwLamfxgpgY+l3N6kQgBRZYCIwtqqSBy8L4oCxTQw9viXlT4SO8IkgVDg8cBQoZMHweJnAQSFARSxti1VhvQHhL12G+/PUcsEdYJwO668x4rr6BQjANHFQcUY8MIbaZ1NlcTrchSR3sQcCiswt7cSprrNP0gwKxlsqPa5lgfEXxXe3n5TCtkCFis041t4r315cCa1awsdFGdrMBe7LZeBkpSTS7W+6N3h8EIiSkYKiKVWkdQASsR7rzs4y6OrgHIUHXVoe6MAINt9HLmuvJqKFPiD4wvXU2N3lvmYjfehBmIQhwyQpj5KDNTa2r5EmL+xSrM0lHfQ7va88ZdWAKULS0lhlh3gQ3LBq05/Ez5bfmpR9lsOFJ4G6VCYIjckUZGBEPTJbU84OS/gb/czBAnMQRtZpFGsA9mDpYjr4Zf5z6m56kW4iPlZHfBIDo1LbE07XdltUauk7JkdZ2iRUI3S25SFFS0zTNnMzkKhKN0WFFcu3i0cCtXVL5SAGEMSJMDcpRdddZ2Mgen+1K9K0Ud2dP3p/ru/0QpZQW60rKbucDOyYHT+o86MSkCBrZQ7Vbyl4WkKrw+78xNCGd8YFrr29auVRwEQainU8Qo0mv3/3JQDL6cJAYsIYFFSB5XVN8kf+T9Myi18UAOb69HGDAYDoyy7G6orpBlq6lkVKrJvAnv0EcpkpySUcMDq8V1HL1ZzWKqo7Nosv6aJ3zVndxbSPmGz+MGbzpWD1bqATeoi20JcOnT6aGnrY1d6dz/Szcp1zu5qH/Hk5yEEOvxflbmImMYmSkhEHusJaG6NSLCFAm99dQbmmLEnGMRj0rZrwoxFnmEGwqbJOoQkNQNeHdoRKbvkra2iapPGg0rebO6MAWVkfoBL2eboEsTaXIkwGF/h9Ubb/weP9YImSZT20/QZep3WhPyyISvbE1gFBzcaN6HqFMjnnqdGKN1XnSAuJI1+XlmXMay3GG2AZ/NBvwxVqdp06FhTSq+UTflymb10GK6HsNKOUx/aqnDtad9otTPMTHMk+BPY0oypTsMGY5EPuWDucMwO3W83yXaggJk+DlIiglGx8q1yueuWyAty2WKpABvIzgVheIbGC0cuNATOp2W5dpUBD3OGMZPcAJ78dvDe1ssLOaB0DCKY67hRXVwlyz2YGgYjDpE/B1GrCBDbPZV/LQnAkxwK36ysmC2udkQA/hdtmhetIetMNnVet+e9w7hxDhi8VJSUmNVLMfqYU8bf9GexHUQZkQGTvlKvUTzBQdOnYSNyuQdOeVZaakQcCOqScn8ovnbrNxQ+FqYrSLbt4dRNKGLo+NjK3UQBszaHWjzeAxKaz1MyNUaObVQGYHqLbZ914P6OQrxDEcuLB2qQTKLLcUrP59Uev1kjZuzz+ZGaEnOio6/cD48Ks/BS7JARdYUDLe7ejrYCGupZjuE9mVesI7yTaAWCS7l80QC6+1Kq8sqSF10dh9764/9CVugwG9YpJ4s0UVNBeioxnLfTlOHHy7VdpIBarLgrE3QSlfve+Cu+rEhPMpo+cn7RDvIWKAuGBDwXwP1uNRhiWrWKwaaM3DaXxKm52vCoBNMZFcpfDR+HvMcP437WyjMEXXnnRDAzksh5ghOn2tGXkQDeSpm6eSsvvYbA0yR0U/tg6XDMADvwo3fKST6Sm5hQCuGJA57umtmCMRQxXk8KAclMBo5wlWjxC3jMvlXjP+ilraVBonHK0BEiXi7ijZjxjuNRC5GfMyPsupQMVMnyMIR46ZpBuvQxoo7HuZUT7fh99ERNGjT0DdLdIhZVNItNma5LAUyqkbZq2zP050N4Kt7O+aixut4bRYfA9Bn7gI5GlY+QWPtmkPKLhgcgIOdH7D8MExM7UmXZ2ujwq3+SV6vaH4qvSmDVVCQvNdJiezb1UbL9jm3jQfdOU9npILDwSTQkQ41wErNOtoOQL3lZcWdw6NAXsFsORCLwdXCnupsg4FfBigSXVueSCDXWzOoM143B1uYJvLRFlaH4fYELPWaVqYv3Rb37kfAwMQUzDGyWqxodimNHXBX9dDcucPkqa1+16bVSvdPT+NITD8AUjBV8K+Z/Dv9p012KZo/nPAbenq/uF+1Hs8x7WlSendtODO6kewzGPOu0OGOGdDisy1FjqO28GNsOoDjnl4F+8JBz/odP12G+MMg/NwCESKirwfCZu24OsrclKZRyxb2ZtblTOYH0Wl+OsQfp+sJYdLpcBj2xl47Xd3rNueeQ+e2q+VcTLLu8nfAHMAXCaJINES7Cuc0uwmUYKnYQOao9U0IwA1arIspBPU57qD+QZBDTh+JmyS5DHQe7OmoQduugrnsqk46JrNd1y/4FzJS1WB2EDkfjlnVCFK8qh+zkG0fO5Azku1aFq/vhHa5u4dsWyFmFarp8MDmO8hY7982UAC0P28UcIxORsCMCbnzFW6JQGaa3tEvwy7kJV+CeXibFFZL1x5dmgHbPHkXVj9HwHy5PcSoYV6ZXlGpA9th+XxpJ67XolRhzyxtBk7FPdc85x7WU6kZXHmpcX9e4aOQLImfyqnCZdFFATCqFGBXLpM1BA+z3uGgG5OepjL09LfChhYSdOjI5MkIplCnKiOyahaSLZhZvVECAGd7yjVEKAAkJGhWxdQTPZ/nmDLc9Ygla8+B1tf1yBWLL12y6BVWNDb4CW3G2npU4z7XVjHnkGm6T94f3wNjKA+bcn5asxnPbXug7dGwG34IASxmQHNoXcQSYcbY4wYMyE3AQgZxDkNgt9Jqs6Qg4sU9xArxvsnKASopyDkT
*/