//
// Copyright (c) 2016-2019 Vinnie Falco (vinnie dot falco at gmail dot com)
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//
// Official repository: https://github.com/boostorg/beast
//

#ifndef BOOST_BEAST_HTTP_IMPL_PARSER_HPP
#define BOOST_BEAST_HTTP_IMPL_PARSER_HPP

#include <boost/throw_exception.hpp>
#include <stdexcept>

namespace boost {
namespace beast {
namespace http {

template<bool isRequest, class Body, class Allocator>
parser<isRequest, Body, Allocator>::
parser()
    : rd_(m_.base(), m_.body())
{
}

template<bool isRequest, class Body, class Allocator>
template<class Arg1, class... ArgN, class>
parser<isRequest, Body, Allocator>::
parser(Arg1&& arg1, ArgN&&... argn)
    : m_(
        std::forward<Arg1>(arg1),
        std::forward<ArgN>(argn)...)
    , rd_(m_.base(), m_.body())
{
    m_.clear();
}

template<bool isRequest, class Body, class Allocator>
template<class OtherBody, class... Args, class>
parser<isRequest, Body, Allocator>::
parser(
    parser<isRequest, OtherBody, Allocator>&& other,
    Args&&... args)
    : basic_parser<isRequest>(std::move(other))
    , m_(other.release(), std::forward<Args>(args)...)
    , rd_(m_.base(), m_.body())
{
    if(other.rd_inited_)
        BOOST_THROW_EXCEPTION(std::invalid_argument{
            "moved-from parser has a body"});
}

} // http
} // beast
} // boost

#endif

/* parser.hpp
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
*/