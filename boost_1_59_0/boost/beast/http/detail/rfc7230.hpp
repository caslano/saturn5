//
// Copyright (c) 2016-2019 Vinnie Falco (vinnie dot falco at gmail dot com)
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//
// Official repository: https://github.com/boostorg/beast
//

#ifndef BOOST_BEAST_HTTP_DETAIL_RFC7230_HPP
#define BOOST_BEAST_HTTP_DETAIL_RFC7230_HPP

#include <boost/beast/core/string.hpp>
#include <iterator>
#include <utility>

namespace boost {
namespace beast {
namespace http {
namespace detail {

BOOST_BEAST_DECL
bool
is_digit(char c);

BOOST_BEAST_DECL
char
is_alpha(char c);

BOOST_BEAST_DECL
char
is_text(char c);

BOOST_BEAST_DECL
char
is_token_char(char c);

BOOST_BEAST_DECL
char
is_qdchar(char c);

BOOST_BEAST_DECL
char
is_qpchar(char c);


// converts to lower case,
// returns 0 if not a valid text char
//
BOOST_BEAST_DECL
char
to_value_char(char c);

// VFALCO TODO Make this return unsigned?
BOOST_BEAST_DECL
std::int8_t
unhex(char c);

BOOST_BEAST_DECL
string_view
trim(string_view s);

struct param_iter
{
    using iter_type = string_view::const_iterator;

    iter_type it;
    iter_type first;
    iter_type last;
    std::pair<string_view, string_view> v;

    bool
    empty() const
    {
        return first == it;
    }

    BOOST_BEAST_DECL
    void
    increment();
};

/*
    #token = [ ( "," / token )   *( OWS "," [ OWS token ] ) ]
*/
struct opt_token_list_policy
{
    using value_type = string_view;

    BOOST_BEAST_DECL
    bool
    operator()(value_type& v,
        char const*& it, string_view s) const;
};

} // detail
} // http
} // beast
} // boost

#ifdef BOOST_BEAST_HEADER_ONLY
#include <boost/beast/http/detail/rfc7230.ipp>
#endif

#endif


/* rfc7230.hpp
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
*/