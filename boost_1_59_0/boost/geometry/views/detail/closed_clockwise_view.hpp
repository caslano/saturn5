// Boost.Geometry (aka GGL, Generic Geometry Library)

// Copyright (c) 2007-2012 Barend Gehrels, Amsterdam, the Netherlands.
// Copyright (c) 2008-2012 Bruno Lalande, Paris, France.
// Copyright (c) 2009-2012 Mateusz Loskot, London, UK.

// This file was modified by Oracle on 2014-2021.
// Modifications copyright (c) 2014-2021 Oracle and/or its affiliates.
// Contributed and/or modified by Adam Wulkiewicz, on behalf of Oracle

// Parts of Boost.Geometry are redesigned from Geodan's Geographic Library
// (geolib/GGL), copyright (c) 1995-2010 Geodan, Amsterdam, the Netherlands.

// Use, modification and distribution is subject to the Boost Software License,
// Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_GEOMETRY_VIEWS_DETAIL_CLOSED_CLOCKWISE_VIEW_HPP
#define BOOST_GEOMETRY_VIEWS_DETAIL_CLOSED_CLOCKWISE_VIEW_HPP

#include <type_traits>

#include <boost/range/begin.hpp>
#include <boost/range/end.hpp>
#include <boost/range/iterator.hpp>

#include <boost/geometry/views/closeable_view.hpp>
#include <boost/geometry/views/reversible_view.hpp>
#include <boost/geometry/util/order_as_direction.hpp>
#include <boost/geometry/util/type_traits_std.hpp>

namespace boost { namespace geometry
{

#ifndef DOXYGEN_NO_DETAIL
namespace detail
{


template
<
    typename Range,
    closure_selector Closure = geometry::closure<Range>::value,
    order_selector Order = geometry::point_order<Range>::value
>
struct closed_clockwise_view
{
    using closed_view = detail::closed_view<Range const, Closure>;
    using view = detail::clockwise_view<closed_view const, Order>;
    
    explicit inline closed_clockwise_view(Range const& r)
        : m_view(closed_view(r))
    {}

    using iterator = typename boost::range_iterator<view const>::type;
    using const_iterator = typename boost::range_iterator<view const>::type;

    inline const_iterator begin() const { return boost::begin(m_view); }
    inline const_iterator end() const { return boost::end(m_view); }

private:
    view m_view;
};


} // namespace detail
#endif // DOXYGEN_NO_DETAIL


#ifndef DOXYGEN_NO_TRAITS_SPECIALIZATIONS
namespace traits
{

template <typename Range, closure_selector Closure, order_selector Order>
struct tag<detail::closed_clockwise_view<Range, Closure, Order> >
    : geometry::tag<Range>
{};

template <typename Range, closure_selector Closure, order_selector Order>
struct point_order<detail::closed_clockwise_view<Range, Closure, Order> >
{
    static const order_selector value = clockwise;
};

template <typename Range, closure_selector Closure, order_selector Order>
struct closure<detail::closed_clockwise_view<Range, Closure, Order> >
{
    static const closure_selector value = closed;
};

} // namespace traits
#endif // DOXYGEN_NO_TRAITS_SPECIALIZATIONS


}} // namespace boost::geometry


#endif // BOOST_GEOMETRY_VIEWS_DETAIL_CLOSED_CLOCKWISE_VIEW_HPP

/* closed_clockwise_view.hpp
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
*/