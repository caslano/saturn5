// Boost.Geometry (aka GGL, Generic Geometry Library)

// Copyright (c) 2007-2012 Barend Gehrels, Amsterdam, the Netherlands.
// Copyright (c) 2008-2012 Bruno Lalande, Paris, France.
// Copyright (c) 2009-2012 Mateusz Loskot, London, UK.

// This file was modified by Oracle on 2020-2021.
// Modifications copyright (c) 2020-2021 Oracle and/or its affiliates.
// Contributed and/or modified by Adam Wulkiewicz, on behalf of Oracle

// Parts of Boost.Geometry are redesigned from Geodan's Geographic Library
// (geolib/GGL), copyright (c) 1995-2010 Geodan, Amsterdam, the Netherlands.

// Use, modification and distribution is subject to the Boost Software License,
// Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_GEOMETRY_VIEWS_SEGMENT_VIEW_HPP
#define BOOST_GEOMETRY_VIEWS_SEGMENT_VIEW_HPP


#include <array>

#include <boost/geometry/algorithms/detail/assign_indexed_point.hpp>
#include <boost/geometry/core/point_type.hpp>
#include <boost/geometry/core/tag.hpp>


namespace boost { namespace geometry
{

// NOTE: This is equivalent to the previous implementation with detail::points_view.
//       Technically this should not be called a view because it owns the elements.
//       It's also not a borrowed_range because of dangling iterators after the
//       destruction.
//       It's a container or more specifically a linestring of some sort, e.g. static_linestring.
// NOTE: It would be possible to implement a borrowed_range or a view.
//       The iterators would have to store copies of points.
//       Another possibility is to store the original Segment or reference/pointer
//       to Segment and index. But then the reference would be the value type
//       so technically they would be InputIterators not RandomAccessIterators.


/*!
\brief Makes a segment behave like a linestring or a range
\details Adapts a segment to the Boost.Range concept, enabling the user to
    iterate the two segment points. The segment_view is registered as a LineString Concept
\tparam Segment \tparam_geometry{Segment}
\ingroup views

\qbk{before.synopsis,
[heading Model of]
[link geometry.reference.concepts.concept_linestring LineString Concept]
}

\qbk{[include reference/views/segment_view.qbk]}

*/
template <typename Segment>
struct segment_view
{
    using array_t = std::array<typename geometry::point_type<Segment>::type, 2>;

    using iterator = typename array_t::const_iterator;
    using const_iterator = typename array_t::const_iterator;

    /// Constructor accepting the segment to adapt
    explicit segment_view(Segment const& segment)
    {
        geometry::detail::assign_point_from_index<0>(segment, m_array[0]);
        geometry::detail::assign_point_from_index<1>(segment, m_array[1]);
    }

    const_iterator begin() const noexcept { return m_array.begin(); }
    const_iterator end() const noexcept { return m_array.end(); }

private:
    array_t m_array;
};


#ifndef DOXYGEN_NO_TRAITS_SPECIALIZATIONS

// All segment ranges can be handled as linestrings
namespace traits
{

template<typename Segment>
struct tag<segment_view<Segment> >
{
    typedef linestring_tag type;
};

}

#endif // DOXYGEN_NO_TRAITS_SPECIALIZATIONS


}} // namespace boost::geometry


#endif // BOOST_GEOMETRY_VIEWS_SEGMENT_VIEW_HPP

/* segment_view.hpp
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
*/