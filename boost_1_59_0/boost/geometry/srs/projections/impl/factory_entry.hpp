// Boost.Geometry (aka GGL, Generic Geometry Library)

// Copyright (c) 2007-2012 Barend Gehrels, Amsterdam, the Netherlands.

// This file was modified by Oracle on 2017, 2018, 2019.
// Modifications copyright (c) 2017-2019, Oracle and/or its affiliates.
// Contributed and/or modified by Adam Wulkiewicz, on behalf of Oracle

// Use, modification and distribution is subject to the Boost Software License,
// Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_GEOMETRY_PROJECTIONS_IMPL_FACTORY_ENTRY_HPP
#define BOOST_GEOMETRY_PROJECTIONS_IMPL_FACTORY_ENTRY_HPP

#include <string>

#include <boost/geometry/srs/projections/impl/base_dynamic.hpp>

namespace boost { namespace geometry { namespace projections
{

namespace detail
{

// forward declaration needed by some projections
template <typename Params, typename CT, typename Parameters>
class factory;

template <typename Params, typename CT, typename Parameters>
struct factory_entry
{
    virtual ~factory_entry() {}
    virtual dynamic_wrapper_b<CT, Parameters>* create_new(Params const& , Parameters const& ) const = 0;
};

// Macros for entries definition

#define BOOST_GEOMETRY_PROJECTIONS_DETAIL_FACTORY_ENTRY_BEGIN(ENTRY) \
template <typename Params, typename T, typename Parameters> \
struct ENTRY : projections::detail::factory_entry<Params, T, Parameters> \
{ \
    projections::detail::dynamic_wrapper_b<T, Parameters>* create_new(Params const& params, \
                                                                      Parameters const& parameters) const

#define BOOST_GEOMETRY_PROJECTIONS_DETAIL_FACTORY_ENTRY_END };

#define BOOST_GEOMETRY_PROJECTIONS_DETAIL_FACTORY_ENTRY_F(ENTRY, PROJ) \
BOOST_GEOMETRY_PROJECTIONS_DETAIL_FACTORY_ENTRY_BEGIN(ENTRY) \
{ \
    return new projections::detail::dynamic_wrapper_f<PROJ<T, Parameters>, T, Parameters>(params, parameters); \
} \
BOOST_GEOMETRY_PROJECTIONS_DETAIL_FACTORY_ENTRY_END

#define BOOST_GEOMETRY_PROJECTIONS_DETAIL_FACTORY_ENTRY_FI(ENTRY, PROJ) \
BOOST_GEOMETRY_PROJECTIONS_DETAIL_FACTORY_ENTRY_BEGIN(ENTRY) \
{ \
    return new projections::detail::dynamic_wrapper_fi<PROJ<T, Parameters>, T, Parameters>(params, parameters); \
} \
BOOST_GEOMETRY_PROJECTIONS_DETAIL_FACTORY_ENTRY_END

#define BOOST_GEOMETRY_PROJECTIONS_DETAIL_FACTORY_ENTRY_FI2(ENTRY, PROJ_S, PROJ_E) \
BOOST_GEOMETRY_PROJECTIONS_DETAIL_FACTORY_ENTRY_BEGIN(ENTRY) \
{ \
    if (parameters.es != 0.0) \
        return new projections::detail::dynamic_wrapper_fi<PROJ_E<T, Parameters>, T, Parameters>(params, parameters); \
    else \
        return new projections::detail::dynamic_wrapper_fi<PROJ_S<T, Parameters>, T, Parameters>(params, parameters); \
} \
BOOST_GEOMETRY_PROJECTIONS_DETAIL_FACTORY_ENTRY_END

// Macros for factory initialization
#define BOOST_GEOMETRY_PROJECTIONS_DETAIL_FACTORY_INIT_BEGIN(FUN_NAME) \
template <typename Params, typename T, typename Parameters> \
inline void FUN_NAME(projections::detail::factory<Params, T, Parameters>& factory)

#define BOOST_GEOMETRY_PROJECTIONS_DETAIL_FACTORY_INIT_ENTRY(PROJ_NAME, ENTRY) \
    factory.add_to_factory(#PROJ_NAME, \
                           srs::dpar::proj_##PROJ_NAME, \
                           new ENTRY<Params, T, Parameters>);

} // namespace detail
}}} // namespace boost::geometry::projections

#endif // BOOST_GEOMETRY_PROJECTIONS_IMPL_FACTORY_ENTRY_HPP

/* factory_entry.hpp
2UWq80I9bAzxmspK2ge8IenZmWCPpe1jQusRjUSN9r52NoAhNtxg+jtakXEGF83gPgZsw5Fdqrm0I6sR0Vndwfm8AyyxApFNUUTYEWGFsdPADJ3V9E+Zvt6VZKIMi/SKuHorAsPD8+HiSUi7wvPh1IdJEZ6Pu4QpuBkY8aON5PhycNWMKYd7hRGEuXNZA3nh+fBDTGwPtxAjb4Tnw/VSfoNrpPyGy4opuJAo5xNMFcUaRDqoF9qitXKVyVm0aL18KnfPIpL1JdmHfpRw8o8cZHakp/HKIHzManwR1osUBJZDaCeOeR6dISOozOiAvq7Hqh1QK4Nf/xDcnGok74ig6bFKhj91itE69jXarlPpQ7lyOaPgKN5a2kr7SfghEuKMZk5TM7TdUKmsxS1hRzhJT7RKb8qUPqWtiL82JfgjaaRdP2gaTNP08xv6SQXylPtxja9gLM+qPD0+7WSko8MuJvnCyDZpwjmb492Cirj1Jlo/lbacAtSUZgZT2PXS/JshxTi1jS03Rz4mPj8cR19q0hkK65bzXIvyAI5nCYmpqhSRgNQMep4WRWrpnihSTpkgDUhdriNViJpVHJlNcflMSBKlrj2M0m2EUvvBbqmnUbGpuGBNNWJLA6f25m6mmyvJb73Fn3xrIDO8Em7RKbgvG7mMFqwLr+BYnoJ7s5Fh7vHyFXy0U3BpNpIRXgmn8BRcpuXDhGYcSfJSxGlNLv0ar2TR37GBNMzM9kVYgWNpBPvT35KsxjlWzu+c2/6I/FDS7qMfpV1ZjUlJeslUvI6g0RIZ95CNUmcxEDPkIUAoToQjDgyGYX/uZriHihd3/KBR70pbZjM6GAaaJRlWecwUXoLLuuH5KIqp1bQ3q/FoMp81TC5QXBPVk+rTbM97GjAxQAgw62XOVyK+/0QOVb+aauLxz8qnrMY30MAe9Smu+BQbAv9qGgJxjFBpzpBJOjvj9GK//JRHL2fXD9oy5IZs/6WkyPjA2SBDYAg6HBgAMgSy2pENG33Oarwy+Sf4GGYQLEQzE7iuGsyWJ4xGRcnWnoHXI7TJ8DPw46SB4d16bgs8FSOpc1v4Qji4iyu4Q2M65BArULskX9G5jDPKZYq38qKgiTNeqaC/zoAdsX7HndI0v+1W9RiHEKYXf9AXd+lJ2nbGY9vxp0wxUge1z5VNlCmPGQdgkYeoZCpKKp9SQ/RjrNKHqqA9esinh+QpPBUB01baopTqn8qUvngnc+kV0IdzI/1xTCaZjpVe9AUitJ9QM0iEp1isxGWUPEQOpJUUt7xnxRyM0dA/eJIXnYu+eNvndfPtamY6JLnn4qCskHSBwvAqvnc/D5HKC+blgUrmN6C8L9Py3O31+z+DBpryaD/3Ot8Ii0VJD6+CdzX3Cfw5jxnrWLFu2w8gZel7WU+/RRCRezJyCXPV6NoAx8xmHp9jrp90frZpY3lVlFuUjGVtMiPp6EgK4TuaWSrtk2/K4OVYN8gbSuqKk8Tne03+uq137rpnl1wdA3RBrAgpTO77SOet5mIgUk2KY2NYCpd+zEvhWVq8kRF8ApB0xgo6+ctJIFqmp1QdjWjoVK0+/mRuavF2cdnvpTHC3tMY8fkq4yQ/t6e9L+DVtMgw3ZYfa/NRZQAJ0+TTi6Vq7iq2gBUG2QfBooxIaEbqw9IzgVtyRXr3Q3j/5l6CSVYBxDAGQQJpEPfxI49zbF/4Vii+BL8K7xLTr6JCjL+f/Sqo2va+VG2c7jVRkuA14VKDr9H/I+frXhPZuteEQ3pNKFBd06MHcoyiLT4tBnKp1FTDHjhzJS2LHdKyzQcTRVfSdnVCqiBqKqy52qJR4KGebj6ZPMhZfDX3Y77A7e61i4ohu3FyUqs/KVzRyTnK6oMekaJWCNXTpQY6w2PtOSFPh+o5aPUcDt4vkmVGrs04ez75UVfBlmB7RnjsZQNDFQdVpPA8PLcFHv6R8e61XSXUnylR9WWgKXbjR++GQ1PBYcUTNm8ZvSLRO+WgPlupCHZk9LMoWU9ZZO8Z7sW0oF79Jg/ukF5NpFU30sS8HjFSw8FcKdPDCCLtCw+bQaSztZEyiUS3THgB7wo+8w02J68IeTpx0iu+25PeM4ESx/vUx27NG8BE9eQrs4r3upfgJED5tVaRrXlyNA+Codfm6bk9apE+iTRtu7vWxaq2PEvlmIRqX29CWklSszVCsSIneH+uNezp8nJTodounGXXdnPaCxBMfFzzLUlbXujJONjqLbFN6n/pNmPXGSOuRokrxMHXmbi50fioRvjQKycQZSeGg0viqOqIpWquEc2fZqIKl7FKWsbwJ6sMVxwONv9YSQ2uwEzktQGBmI+RzNPyV5YkpmbhAExeidMAZIrZEU069EkVsUMnIveo7HQOLZo1LEewwWEh3Yp9yafEZ3RBPrTi5qZdSn6N+qizSVPOCXvs1A8i6lwOT7Li3xHwgBTqHhs6b9+akMMFtDrZdFxJDc52WgJ9ipvbX6ehlAFVx79/FJhGjo+b5KxiU0vEimW8Q1ydwgcoycV71T7Bu+2W4N0OC6JZd0lqDvYtufIunHX//rkMS7X6YchjF+M12r48Du1hZ/hJRq2x60fNT4zSB6t+KNeMISvjYustnUNzxWNXct21DqW/D5KC16u9nc3XwydTYerSbbdP6U3dz4uNw1wfVffr4oOuzI/JY25XP5Mdr9qEjmc1pfAhaumJrMbTEMhmO7Maj+HHY7asxnbcXaFND9ImdHKkOf8E8S8QlbeMY+FmNW5KZlE0370W0yOrEc6pRBZ3UoYFTC7J9KNSaBjL2l9Amxym49Tf0y2h9XyRjnbyoqzGe5P5SNxFO7xTJuvKhmsmVOckQ6kNnCvtjoaJ0yU+WJ9uMVw0i0S/lfxUxjm8aFOlf+PpHwyjE7UBtMXV81dC8IrVXHKqXtJH/2bQvzr6p+gZv2C/IHnrRJv3xGeVfElAGjwNh/8iccVKdrCML1auFwPp3KTOsSm5VZksF5E+6jf63pLzp/YZNj9cST8v+U86XNHgE/ahcnGNmPLPdAtVHKGWOUvHOVmjyqU2v+qO9aMKwCaSQ0JFGQnBdewXydZecIDpx35kCyu2UDhKIB2EH3/r9YT3bHTIJSGR47JTPQV+RHmcaaIMIfyrJuHyI6c41112i4idc6fHI1WkDpflGCo1UV5fnyhbSYtrZaIq/Twng2Aoi6sN1s1wIZ0crdMnrg4MR5MKuMzEaBl7tEwNY5T3Rjqi32AqcSpNYwaJtcQbgvKypsbuwCnr0i3tCtTt2LdH16YTKVR59zFe5qojmesfz/WMtc1spVhrOh7IEANqI5raQRwmhdYP28GLfG2f3I7RffxpHl27usGJ+GADfZsy2EPmHvk+Vd0wykbrpfX2KfESB9jlYo3Frn4xy62XmM2h9ZyOVBmutqjZSFilPQsTZ7U2YKqs0od+dtJPM3QTAoU+MuSoFnx1LUdiehUtWFpTDybfWa9unhIfUlS+FkPzjmpnDizamoRC7V3UqAwVnP+jESrYOPcJzV0v87SE5gJqAjtbx5gofRCmsDw3SVgWplkSRDBZBFm/ugiXhPoN9jRETguMVp9er7viwp0u2JUUuFB9Eq+Ca7cziMEkSrQcyM7wONQPvf5MH+ILicuXpFkixJPF/HAaZ6ZyxMRj+1akhdKIPJ2WO+uLtfA8TJvWccp26nFoAxZRiOPOh2bPCs2mN5hCrfPga4AwrWLcvYdxIx8/l0/9VgttOMA1DvJfwX8P898O/os0CNJtcKGFYyJ3c3NIC8jBJ++7BYs2NA+tlIU2bOFK2/nvbv6LGDLFW0PzduJp3j64aIQWHuSAsVP+t8Fi9xfMqxf3/iXDCBYLCrR6umEDC747h8lZFX5EUcfZirfSVvB8S9PWrEZ4e6l2dZI9dKONpmVq8A6bJWILTrdb1BuzQ3btRkdoXHYgRTT06dZIDUuDFAz506Y3GVipPomuB0W2aPjqkBZ+Gp2XsTuZBAf3R7Twmtd4ys7KI43g2k/oxZN8Ibv7HqL2I0prKkZHDCYQMlKnSPsuzSKeoq5sFD9mpMgebl87SotOU1Dk/M4uLVifY6FtcseU9kJqMW7R+NU0CzRCW0ZzJI0WcQZz0CnReYqMZOl+CxWdfSpdz1iwXfJ7bvGdlJgWzW38xmdjtnFHnKU+V9+3T5Lckxp8XBdf4Dtq+JbmiEk1RKxpLqccy+s3PHMlbpy+fhUzmKxq8OxckXYhhCQiu4V67/+e8LwYrFR4zj6qST+lWSnDryEMiFaXSIx3U3vJimfDYm6vVrb3rt7eunwWulb6O6mpS7ipUwOjTZ2rN/WldPUNUVM2pXLD89xUv6vk8Uwd8Te9OT83l9VYS6/83/mz/edzk3+KaXKE3uQibjKr8XIqSs3aqdn/4mbfuVI2OyjabH+92VQ0e4yazedmvWazDSkuvVm33uzeH5GM1Z725BY9RzMcBr//9yFNnrblxueN7xk4f/CW/23eqpPFe1lCOE3bx+1OHuDUZIsMvBGa7BpN/8ro31j6V64NGA+3ToTvF3dnyOjtyJI+2TWpdJuSJm7dj52INojjnMFIfRJLSh1IOpK3hgUfXwYU6c6rsTlpz/rkSIerqqCcEFNjz4snwUPUHSHmdKGXOR5A1ZGI5p7sypGHamwRwdz743kRbTpxVNpwJ6Hu9NKNWY1PMQuaDgv+UxU506lzg+dshVCSO388e7E7R5fJ3HXGJM7dTDJAslg40WIxwpa48Moq7vr8kOYr0/QIHDYZXSZHq+vEs1d8sZc+57w3VX7+6vyIeT/nmn8d0jYDKz5N2yFGfh/RJE30MR1OBUhbB6hKrFNFGkjzQfNC+ldE/0ro3yiW2r1SHixC1p0CZMYmscH9hzmc9zX0JPP0p8Flq4n7iLv6EVXctdkB6/zanKy3PTlZayp402nx6nzKMf2w5q7NVQbKEdICueX0iXeJN6Z3gWEtkt47vWeXKlTjskv5Z6zd8KemenHZq/T6s6pwxQJRS4IpxxkejeTV4dXYaaq1wCKp+EldmspJXbpa/H0LCcMNB6ShosZ/mrPgslsNTBQLROnSdBwDXtyVTvOFrVSBFLa2efH1JH0NB8Gmi4+TvHqFu96mXMZfkv5A9TrkMFfMF69PkKGV3e9gY1LKwp75MKqlP0vb7zXaTPNOxqp5xK2XFnVo1Np73NDal9FQcTMpKs83l7YGXhO/SE2xzN1o4QCH1PSDX9Bweuar5Z1+V/jmAxMqvapnAXrorSs9oaRVo5GZaMQzn+PfUHGZ53KBWEXyrHhyRYYlltfPbkqDGpOGPcAQB4jOdc8RnbcuB52pr/uzGh/knBekNU3nRI26qUocpeohz9LSzVmNFZhYoOdMZyhwIBQ4SFp7KKBnFQ6/I9i1E6RHP1aIEa8jClh4NcgZauiGZtYXMGaTQmbn+ObU2//+PfUETmjVuJyw1M/3A1i1DHuWe3mcJ/Uj6U9T0mpQ/jco71neciDZb4XjqKpispa2zE5Wt6hBCCDqY7OsLWqFCAU72T8EU1r9tqDjRmrjevUmu/q4rXgX7e/PvxeqeEn9ADv9ZhRRUbxARRP+pGB7cqVa8RKR/mCZt1pc/3263lJBR5MWWAf71nMMjIEUVBxQjxV0FAQO+pOsgcMF71k9B6up/lLqwAGRicqsMeGeshyr+aLpNRqrva/QWMVMlycaabo8dEkHC+FZjSfBwpEayhtPGqbcgy9Rs13wpqCJBAV4G5UWh6yGTGBIR+q4ehLvI/3UcrsK8dqp/spZWuFQhuKGwyE4IOyAjJ77Jykw2i3iVWpDbvlyChwOpoG59lG3iKvRl9QafFsi13XkAwnNsG2KDdHS/am0KYU51v75CZpyXy6jKYdkzi9v4bPfezhrkrYIWTbgPtqFRDYd4j9IAth1LOuJ61j6/e7h8mBXp5Ib7Po+q6nETLQEb4d2ONqXns5aMJRfM26vJck9MD36Clyx/ZRFFj3GjJ2azVrcEqqw045jKz0dyZSNcqYPHHtBGq2qUoeC5P4McM+PqTGk8+E0RECMGJPe/gLGvyP46k728vAI2RjAklBPki/ey8QmWkVHxKp5OtSGDqoMS5feZF0UXZiukBXWhBsdjtonmMCZ9FEaMCYRfoDBVRW7PPyJpMpjH9VzGGyim7YfUbUsw5KYPbhpLsYhkBLcokXOLVdyy5W+5eVKWlDYAof9xyLp/u8iqf7OSLL/ezELgSxipOoxP9J49l+K8eSNGFcjbh0mw8KrqX4NnqUdZsdYfu3SLy7c/zn2LEK3dd52nS7aIgQSFG8uzUjIBQEa8fRQu7LWeOz+ZFyfGXR7/ZwGhyVrTXNgSJNWf3awy6n0mU5UeAj+o0zCxZyE3tSvwnO7LKb5MMHKOzXWJMn5lL4V4+akWWrUNjH4L9gqlKJwxdJK/2StzkZ7aD8kdUFz4lH6GvYsjV5v5bfa/6E6Zm43+MzpKuwIaNKnSGmHmXAgj+DD+gjyjyLszrBJqhthlcxsjLnDY1B82cuguLFmiAXsLT09q46GsnRjIGUtBsKLkdiZF9FCtXxFZVKnUois7x2VTJj5xjRzvwziY8bAiBkZoi1iI2Z//X1GzNKR4xbiD+LNNppMqX9InEw320ufgRDQkN20q96hXl2vpF2vWgKnoeZT388Crym3i486YKMoi1d8K2Wa527imPa5LZAfKsUtFx6mnbB7a8IJhkNlxRtyb3XI06VcGl7FWX0rOjWjkbCn0wvjtbpZvDDhWzRS6rErZ8EXPrCHZvoUtKl6OiPHE1T73RaLpUeC7dDcth6voaSLEbNpa31kVuQiXn032mkjUzKD77ax9seDT/2kDoXmsqzUdpRnxS5pNJWLedFsXszpYH1bxNtUwpcil77MTw+7aaJJBZOH1oVUrJW+RFZx7cckBbwKWcQSyWplbZmv5Z2m99EGH9YbpEnoa0izRNcGTa3tT5CKPO6lDJkGSWw7KrMftKZOs91ZH3wVG7Yl+Cp7NIcXwqYrZh2hIq/a+MNWDVFc7ZwICWWI8F+/FJNHYjlaFy/qrctGOdl6t7oQLUC/Vvt6tQk22bjMUsEGmxlIbQjesUNc3kE73EKz3bUdptbrz117JQSarhfl7oJIyDgtdU8hgeZVDrxs4xR7uF4KGSZUeyBUexCJyGsPS13Er4h9P9LO23VLqGEfLRxSY/qS+PrpI2mW1j6uLqLahzSRtwKVKn9SNRrxZV5j8b6LFVfj65pG6gzSIYS4Q2I4cWkZsNbvrPJdka0bm9loziVwZ6yqpkpc3WkUxDoRW16M5380z0g++1Gpcz/iVO5Tn0TB0s3KHe5AdkP/6mqfLbblkCcbrr8W9WkUq6r2a9XVXmTgtooSgOHX1ViHbdX0n99WXSU66EPpfuKafaoxLbHxqBtvi1hpmcQYkGiARiDPuzJUDekD1p8PBBj+Qzr8jVRpY8KippLncM1BZs0sXFzkg5TLvyeBOVOtsPMGIvJy9ZQfsayBKgzkBrLNBlIc3ENwIMwSAODY2NjJxsnGtm3btm3btm3btm3bdvLnvcNX1TU1t+6p6b60xQZPcXoYxo5o+XZ+5kX3upmuWMxX2Q8czddJi19LaOF0I0gGTnw8q1tCtTyPwnnFUhxbodri
*/