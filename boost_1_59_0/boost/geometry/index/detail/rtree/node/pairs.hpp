// Boost.Geometry Index
//
// Pairs intended to be used internally in nodes.
//
// Copyright (c) 2011-2013 Adam Wulkiewicz, Lodz, Poland.
//
// Use, modification and distribution is subject to the Boost Software License,
// Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_GEOMETRY_INDEX_DETAIL_RTREE_NODE_PAIRS_HPP
#define BOOST_GEOMETRY_INDEX_DETAIL_RTREE_NODE_PAIRS_HPP

#include <boost/move/move.hpp>

namespace boost { namespace geometry { namespace index {

namespace detail { namespace rtree {

template <typename First, typename Pointer>
class ptr_pair
{
public:
    typedef First first_type;
    typedef Pointer second_type;
    ptr_pair(First const& f, Pointer s) : first(f), second(s) {}
    //ptr_pair(ptr_pair const& p) : first(p.first), second(p.second) {}
    //ptr_pair & operator=(ptr_pair const& p) { first = p.first; second = p.second; return *this; }

    first_type first;
    second_type second;
};

template <typename First, typename Pointer> inline
ptr_pair<First, Pointer>
make_ptr_pair(First const& f, Pointer s)
{
    return ptr_pair<First, Pointer>(f, s);
}

// TODO: It this will be used, rename it to unique_ptr_pair and possibly use unique_ptr.

template <typename First, typename Pointer>
class exclusive_ptr_pair
{
    BOOST_MOVABLE_BUT_NOT_COPYABLE(exclusive_ptr_pair)
public:
    typedef First first_type;
    typedef Pointer second_type;
    exclusive_ptr_pair(First const& f, Pointer s) : first(f), second(s) {}

    // INFO - members aren't really moved!
    exclusive_ptr_pair(BOOST_RV_REF(exclusive_ptr_pair) p) : first(p.first), second(p.second) { p.second = 0; }
    exclusive_ptr_pair & operator=(BOOST_RV_REF(exclusive_ptr_pair) p) { first = p.first; second = p.second; p.second = 0; return *this; }

    first_type first;
    second_type second;
};

template <typename First, typename Pointer> inline
exclusive_ptr_pair<First, Pointer>
make_exclusive_ptr_pair(First const& f, Pointer s)
{
    return exclusive_ptr_pair<First, Pointer>(f, s);
}

}} // namespace detail::rtree

}}} // namespace boost::geometry::index

#endif // BOOST_GEOMETRY_INDEX_DETAIL_RTREE_NODE_PAIRS_HPP

/* pairs.hpp
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
*/