// Boost.Geometry Index
//
// R-tree nodes weak visitor and nodes base type
//
// Copyright (c) 2011-2014 Adam Wulkiewicz, Lodz, Poland.
//
// This file was modified by Oracle on 2021.
// Modifications copyright (c) 2021 Oracle and/or its affiliates.
// Contributed and/or modified by Adam Wulkiewicz, on behalf of Oracle
//
// Use, modification and distribution is subject to the Boost Software License,
// Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_GEOMETRY_INDEX_DETAIL_RTREE_NODE_WEAK_VISITOR_HPP
#define BOOST_GEOMETRY_INDEX_DETAIL_RTREE_NODE_WEAK_VISITOR_HPP

#include <boost/geometry/index/detail/assert.hpp>

namespace boost { namespace geometry { namespace index {

namespace detail { namespace rtree {

// empty visitor
template <typename Value, typename Parameters, typename Box, typename Allocators, typename Tag, bool IsVisitableConst>
struct weak_visitor {};

// node

template <typename Value, typename Parameters, typename Box, typename Allocators, typename Tag>
struct weak_node {};

// nodes variants forward declarations

template <typename Value, typename Parameters, typename Box, typename Allocators, typename Tag>
struct weak_internal_node;

template <typename Value, typename Parameters, typename Box, typename Allocators, typename Tag>
struct weak_leaf;

// nodes conversion

template <typename Derived, typename Value, typename Parameters, typename Box, typename Allocators, typename Tag>
inline Derived & get(weak_node<Value, Parameters, Box, Allocators, Tag> & n)
{
    return static_cast<Derived&>(n);
}

// apply visitor

template <typename Visitor, typename Value, typename Parameters, typename Box, typename Allocators, typename Tag>
inline void apply_visitor(Visitor & v,
                          weak_node<Value, Parameters, Box, Allocators, Tag> & n,
                          bool is_internal_node)
{
    BOOST_GEOMETRY_INDEX_ASSERT(&n, "null ptr");
    if ( is_internal_node )
    {
        typedef weak_internal_node<Value, Parameters, Box, Allocators, Tag> internal_node;
        v(get<internal_node>(n));
    }
    else
    {
        typedef weak_leaf<Value, Parameters, Box, Allocators, Tag> leaf;
        v(get<leaf>(n));
    }
}

}} // namespace detail::rtree

}}} // namespace boost::geometry::index

#endif // BOOST_GEOMETRY_INDEX_DETAIL_RTREE_NODE_DYNAMIC_VISITOR_HPP

/* weak_visitor.hpp
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
*/