// Boost.Geometry Index
//
// R-tree node elements access
//
// Copyright (c) 2011-2015 Adam Wulkiewicz, Lodz, Poland.
//
// This file was modified by Oracle on 2021.
// Modifications copyright (c) 2021 Oracle and/or its affiliates.
// Contributed and/or modified by Adam Wulkiewicz, on behalf of Oracle
//
// Use, modification and distribution is subject to the Boost Software License,
// Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_GEOMETRY_INDEX_DETAIL_RTREE_NODE_NODE_ELEMENTS_HPP
#define BOOST_GEOMETRY_INDEX_DETAIL_RTREE_NODE_NODE_ELEMENTS_HPP

#include <boost/container/vector.hpp>
#include <boost/geometry/algorithms/detail/expand_by_epsilon.hpp>
#include <boost/geometry/index/detail/varray.hpp>
#include <boost/geometry/index/detail/rtree/node/pairs.hpp>
#include <boost/geometry/index/detail/translator.hpp>

namespace boost { namespace geometry { namespace index {

namespace detail { namespace rtree {

// element's indexable type

template <typename Element, typename Translator>
struct element_indexable_type
{
    typedef typename indexable_type<Translator>::type type;
};

template <typename First, typename Pointer, typename Translator>
struct element_indexable_type<
    rtree::ptr_pair<First, Pointer>,
    Translator
>
{
    typedef First type;
};

// is leaf element

template <typename Element>
struct is_leaf_element
{
    static const bool value = true;
};

template <typename First, typename Pointer>
struct is_leaf_element< rtree::ptr_pair<First, Pointer> >
{
    static const bool value = false;
};

// element's indexable getter

template <typename Element, typename Translator>
typename result_type<Translator>::type
element_indexable(Element const& el, Translator const& tr)
{
    return tr(el);
}

template <typename First, typename Pointer, typename Translator>
First const&
element_indexable(rtree::ptr_pair<First, Pointer> const& el, Translator const& /*tr*/)
{
    return el.first;
}

// nodes elements

template <typename Node>
struct elements_type
{
    typedef typename Node::elements_type type;
};

template <typename Node>
inline typename elements_type<Node>::type &
elements(Node & n)
{
    return n.elements;
}

template <typename Node>
inline typename elements_type<Node>::type const&
elements(Node const& n)
{
    return n.elements;
}

// elements derived type

template <typename Elements, typename NewValue>
struct container_from_elements_type
{
    typedef boost::container::vector<NewValue> type;
};

template <typename OldValue, size_t N, typename NewValue>
struct container_from_elements_type<detail::varray<OldValue, N>, NewValue>
{
    typedef detail::varray<NewValue, N> type;
};

}} // namespace detail::rtree

}}} // namespace boost::geometry::index

#endif // BOOST_GEOMETRY_INDEX_DETAIL_RTREE_NODE_NODE_ELEMENTS_HPP

/* node_elements.hpp
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
*/