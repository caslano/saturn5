// Boost.Geometry Index
//
// R-tree queries range adaptors
//
// Copyright (c) 2011-2013 Adam Wulkiewicz, Lodz, Poland.
//
// This file was modified by Oracle on 2021.
// Modifications copyright (c) 2021 Oracle and/or its affiliates.
// Contributed and/or modified by Adam Wulkiewicz, on behalf of Oracle
//
// Use, modification and distribution is subject to the Boost Software License,
// Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_GEOMETRY_INDEX_DETAIL_RTREE_ADAPTORS_HPP
#define BOOST_GEOMETRY_INDEX_DETAIL_RTREE_ADAPTORS_HPP

#include <vector>

#include <boost/geometry/index/adaptors/query.hpp>

namespace boost { namespace geometry { namespace index {

// Forward declaration
template <typename Value, typename Options, typename IndexableGetter, typename EqualTo, typename Allocator>
class rtree;

namespace adaptors { namespace detail {

template <typename Value, typename Options, typename IndexableGetter, typename EqualTo, typename Allocator>
class query_range< index::rtree<Value, Options, IndexableGetter, EqualTo, Allocator> >
{
public:
    typedef std::vector<Value> result_type;
    typedef typename result_type::iterator iterator;
    typedef typename result_type::const_iterator const_iterator;

    template <typename Predicates> inline
    query_range(index::rtree<Value, Options, IndexableGetter, EqualTo, Allocator> const& rtree,
                Predicates const& pred)
    {
        rtree.query(pred, std::back_inserter(m_result));
    }

    inline iterator begin() { return m_result.begin(); }
    inline iterator end() { return m_result.end(); }
    inline const_iterator begin() const { return m_result.begin(); }
    inline const_iterator end() const { return m_result.end(); }

private:
    result_type m_result;
};

}} // namespace adaptors::detail

}}} // namespace boost::geometry::index

#endif // BOOST_GEOMETRY_INDEX_DETAIL_RTREE_ADAPTORS_HPP

/* adaptors.hpp
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
*/