// Boost.Geometry Index
//
// R-tree destroying visitor implementation
//
// Copyright (c) 2011-2014 Adam Wulkiewicz, Lodz, Poland.
//
// This file was modified by Oracle on 2019.
// Modifications copyright (c) 2019 Oracle and/or its affiliates.
// Contributed and/or modified by Adam Wulkiewicz, on behalf of Oracle
//
// Use, modification and distribution is subject to the Boost Software License,
// Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_GEOMETRY_INDEX_DETAIL_RTREE_VISITORS_DELETE_HPP
#define BOOST_GEOMETRY_INDEX_DETAIL_RTREE_VISITORS_DELETE_HPP

namespace boost { namespace geometry { namespace index {

namespace detail { namespace rtree { namespace visitors {

template <typename MembersHolder>
class destroy
    : public MembersHolder::visitor
{
public:
    typedef typename MembersHolder::node node;
    typedef typename MembersHolder::internal_node internal_node;
    typedef typename MembersHolder::leaf leaf;

    typedef typename MembersHolder::allocators_type allocators_type;
    typedef typename MembersHolder::node_pointer node_pointer;

    inline destroy(node_pointer node, allocators_type & allocators)
        : m_current_node(node)
        , m_allocators(allocators)
    {}

    inline void operator()(internal_node & n)
    {
        BOOST_GEOMETRY_INDEX_ASSERT(&n == &rtree::get<internal_node>(*m_current_node), "invalid pointers");

        node_pointer node_to_destroy = m_current_node;

        typedef typename rtree::elements_type<internal_node>::type elements_type;
        elements_type & elements = rtree::elements(n);

        for (typename elements_type::iterator it = elements.begin();
             it != elements.end(); ++it)
        {
            m_current_node = it->second;
            rtree::apply_visitor(*this, *m_current_node);
            it->second = 0;
        }

        rtree::destroy_node<allocators_type, internal_node>::apply(m_allocators, node_to_destroy);
    }

    inline void operator()(leaf & l)
    {
        boost::ignore_unused(l);
        BOOST_GEOMETRY_INDEX_ASSERT(&l == &rtree::get<leaf>(*m_current_node), "invalid pointers");

        rtree::destroy_node<allocators_type, leaf>::apply(m_allocators, m_current_node);
    }

    static inline void apply(node_pointer node, allocators_type & allocators)
    {
        destroy v(node, allocators);
        rtree::apply_visitor(v, *node);
    }

private:
    node_pointer m_current_node;
    allocators_type & m_allocators;
};

}}} // namespace detail::rtree::visitors

}}} // namespace boost::geometry::index

#endif // BOOST_GEOMETRY_INDEX_DETAIL_RTREE_VISITORS_DELETE_HPP

/* destroy.hpp
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
*/