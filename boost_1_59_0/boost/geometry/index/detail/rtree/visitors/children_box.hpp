// Boost.Geometry Index
//
// R-tree node children box calculating visitor implementation
//
// Copyright (c) 2011-2015 Adam Wulkiewicz, Lodz, Poland.
//
// This file was modified by Oracle on 2019.
// Modifications copyright (c) 2019 Oracle and/or its affiliates.
// Contributed and/or modified by Adam Wulkiewicz, on behalf of Oracle
//
// Use, modification and distribution is subject to the Boost Software License,
// Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_GEOMETRY_INDEX_DETAIL_RTREE_VISITORS_CHILDREN_BOX_HPP
#define BOOST_GEOMETRY_INDEX_DETAIL_RTREE_VISITORS_CHILDREN_BOX_HPP

namespace boost { namespace geometry { namespace index {

namespace detail { namespace rtree { namespace visitors {

template <typename MembersHolder>
class children_box
    : public MembersHolder::visitor_const
{
    typedef typename MembersHolder::parameters_type parameters_type;
    typedef typename MembersHolder::translator_type translator_type;
    typedef typename MembersHolder::box_type box_type;

    typedef typename MembersHolder::internal_node internal_node;
    typedef typename MembersHolder::leaf leaf;

public:
    inline children_box(box_type & result,
                        parameters_type const& parameters,
                        translator_type const& tr)
        : m_result(result), m_parameters(parameters), m_tr(tr)
    {}

    inline void operator()(internal_node const& n)
    {
        typedef typename rtree::elements_type<internal_node>::type elements_type;
        elements_type const& elements = rtree::elements(n);

        m_result = rtree::elements_box<box_type>(elements.begin(), elements.end(), m_tr,
                                                 index::detail::get_strategy(m_parameters));
    }

    inline void operator()(leaf const& n)
    {
        typedef typename rtree::elements_type<leaf>::type elements_type;
        elements_type const& elements = rtree::elements(n);

        m_result = rtree::values_box<box_type>(elements.begin(), elements.end(), m_tr,
                                               index::detail::get_strategy(m_parameters));
    }

private:
    box_type & m_result;
    parameters_type const& m_parameters;
    translator_type const& m_tr;
};

}}} // namespace detail::rtree::visitors

}}} // namespace boost::geometry::index

#endif // BOOST_GEOMETRY_INDEX_DETAIL_RTREE_VISITORS_CHILDREN_BOX_HPP

/* children_box.hpp
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
*/