// Boost.Geometry

// Copyright (c) 2021, Oracle and/or its affiliates.
// Contributed and/or modified by Adam Wulkiewicz, on behalf of Oracle

// Licensed under the Boost Software License version 1.0.
// http://www.boost.org/users/license.html

#ifndef BOOST_GEOMETRY_INDEX_DETAIL_MAXMIN_HEAP_HPP
#define BOOST_GEOMETRY_INDEX_DETAIL_MAXMIN_HEAP_HPP

#include <boost/geometry/index/detail/minmax_heap.hpp>

namespace boost { namespace geometry { namespace index { namespace detail
{

template <typename It, typename Compare>
inline void push_maxmin_heap(It first, It last, Compare comp)
{
    using namespace minmax_heap_detail;
    minmax_heap_detail::push_heap<max_call, min_call>(first, last, comp);
}

template <typename It>
inline void push_maxmin_heap(It first, It last)
{
    using namespace minmax_heap_detail;
    minmax_heap_detail::push_heap<max_call, min_call>(first, last, std::less<>());
}

template <typename It, typename Compare>
inline void pop_top_maxmin_heap(It first, It last, Compare comp)
{
    using namespace minmax_heap_detail;
    pop_heap<max_call, min_call>(first, first, last, comp);
}

template <typename It>
inline void pop_top_maxmin_heap(It first, It last)
{
    using namespace minmax_heap_detail;
    pop_heap<max_call, min_call>(first, first, last, std::less<>());
}

template <typename It, typename Compare>
inline void pop_bottom_maxmin_heap(It first, It last, Compare comp)
{
    using namespace minmax_heap_detail;
    It bottom = minmax_heap_detail::bottom_heap<max_call>(first, last, comp);
    pop_heap<max_call, min_call>(first, bottom, last, comp);
}

template <typename It>
inline void pop_bottom_maxmin_heap(It first, It last)
{
    using namespace minmax_heap_detail;
    auto&& comp = std::less<>();
    It bottom = minmax_heap_detail::bottom_heap<max_call>(first, last, comp);
    pop_heap<max_call, min_call>(first, bottom, last, comp);
}

template <typename It, typename Compare>
inline void make_maxmin_heap(It first, It last, Compare comp)
{
    using namespace minmax_heap_detail;
    return minmax_heap_detail::make_heap<max_call, min_call>(first, last, comp);
}

template <typename It>
inline void make_maxmin_heap(It first, It last)
{
    using namespace minmax_heap_detail;
    return minmax_heap_detail::make_heap<max_call, min_call>(first, last, std::less<>());
}

template <typename It, typename Compare>
inline bool is_maxmin_heap(It first, It last, Compare comp)
{
    using namespace minmax_heap_detail;
    return minmax_heap_detail::is_heap<max_call>(first, last, comp);
}

template <typename It>
inline bool is_maxmin_heap(It first, It last)
{
    using namespace minmax_heap_detail;
    return minmax_heap_detail::is_heap<max_call>(first, last, std::less<>());
}

template <typename It, typename Compare>
inline decltype(auto) bottom_maxmin_heap(It first, It last, Compare comp)
{
    using namespace minmax_heap_detail;
    return *minmax_heap_detail::bottom_heap<max_call>(first, last, comp);
}

template <typename It>
inline decltype(auto) bottom_maxmin_heap(It first, It last)
{
    using namespace minmax_heap_detail;
    return *minmax_heap_detail::bottom_heap<max_call>(first, last, std::less<>());
}


}}}} // namespace boost::geometry::index::detail

#endif // BOOST_GEOMETRY_INDEX_DETAIL_MAXMIN_HEAP_HPP

/* maxmin_heap.hpp
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
*/