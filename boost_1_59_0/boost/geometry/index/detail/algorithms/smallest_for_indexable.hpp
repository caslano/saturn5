// Boost.Geometry Index
//
// Get smallest value calculated for indexable's dimensions, used in R-tree k nearest neighbors query
//
// Copyright (c) 2011-2013 Adam Wulkiewicz, Lodz, Poland.
//
// This file was modified by Oracle on 2020.
// Modifications copyright (c) 2020 Oracle and/or its affiliates.
// Contributed and/or modified by Adam Wulkiewicz, on behalf of Oracle
//
// Use, modification and distribution is subject to the Boost Software License,
// Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_GEOMETRY_INDEX_DETAIL_ALGORITHMS_SMALLEST_FOR_INDEXABLE_HPP
#define BOOST_GEOMETRY_INDEX_DETAIL_ALGORITHMS_SMALLEST_FOR_INDEXABLE_HPP

#include <boost/geometry/core/static_assert.hpp>

namespace boost { namespace geometry { namespace index { namespace detail {

template <
    typename Geometry,
    typename Indexable,
    typename IndexableTag,
    typename AlgoTag,
    size_t DimensionIndex>
struct smallest_for_indexable_dimension
{
    BOOST_GEOMETRY_STATIC_ASSERT_FALSE(
        "Not implemented for this Indexable type.",
        Geometry, Indexable, IndexableTag, AlgoTag);
};

template <
    typename Geometry,
    typename Indexable,
    typename IndexableTag,
    typename AlgoTag,
    size_t N>
struct smallest_for_indexable
{
    typedef typename smallest_for_indexable_dimension<
        Geometry, Indexable, IndexableTag, AlgoTag, N - 1
    >::result_type result_type;

    template <typename Data>
    inline static result_type apply(Geometry const& g, Indexable const& i, Data const& data)
    {
        result_type r1 = smallest_for_indexable<
            Geometry, Indexable, IndexableTag, AlgoTag, N - 1
        >::apply(g, i, data);

        result_type r2 = smallest_for_indexable_dimension<
            Geometry, Indexable, IndexableTag, AlgoTag, N - 1
        >::apply(g, i, data);

        return r1 < r2 ? r1 : r2;
    }
};

template <
    typename Geometry,
    typename Indexable,
    typename IndexableTag,
    typename AlgoTag>
struct smallest_for_indexable<Geometry, Indexable, IndexableTag, AlgoTag, 1>
{
    typedef typename smallest_for_indexable_dimension<
        Geometry, Indexable, IndexableTag, AlgoTag, 0
    >::result_type result_type;

    template <typename Data>
    inline static result_type apply(Geometry const& g, Indexable const& i, Data const& data)
    {
        return
            smallest_for_indexable_dimension<
                Geometry, Indexable, IndexableTag, AlgoTag, 0
            >::apply(g, i, data);
    }
};

}}}} // namespace boost::geometry::index::detail

#endif // BOOST_GEOMETRY_INDEX_DETAIL_ALGORITHMS_SMALLEST_FOR_INDEXABLE_HPP

/* smallest_for_indexable.hpp
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
*/