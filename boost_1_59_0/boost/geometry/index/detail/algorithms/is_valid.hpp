// Boost.Geometry Index
//
// n-dimensional Indexable validity check
//
// Copyright (c) 2011-2014 Adam Wulkiewicz, Lodz, Poland.
//
// This file was modified by Oracle on 2020-2021.
// Modifications copyright (c) 2020-2021 Oracle and/or its affiliates.
// Contributed and/or modified by Adam Wulkiewicz, on behalf of Oracle
//
// Use, modification and distribution is subject to the Boost Software License,
// Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_GEOMETRY_INDEX_DETAIL_ALGORITHMS_IS_VALID_HPP
#define BOOST_GEOMETRY_INDEX_DETAIL_ALGORITHMS_IS_VALID_HPP

#include <cstddef>

#include <boost/geometry/core/access.hpp>
#include <boost/geometry/core/coordinate_dimension.hpp>
#include <boost/geometry/core/static_assert.hpp>

namespace boost { namespace geometry { namespace index { namespace detail {

namespace dispatch {

template <typename Box,
          std::size_t Dimension = geometry::dimension<Box>::value>
struct is_valid_box
{
    static inline bool apply(Box const& b)
    {
        return is_valid_box<Box, Dimension - 1>::apply(b) &&
            ( get<min_corner, Dimension - 1>(b) <= get<max_corner, Dimension - 1>(b) );
    }
};

template <typename Box>
struct is_valid_box<Box, 1>
{
    static inline bool apply(Box const& b)
    {
        return get<min_corner, 0>(b) <= get<max_corner, 0>(b);
    }
};

template <typename Indexable,
          typename Tag = typename geometry::tag<Indexable>::type>
struct is_valid
{
    BOOST_GEOMETRY_STATIC_ASSERT_FALSE(
        "Not implemented for this Indexable type.",
        Indexable, Tag);
};

template <typename Indexable>
struct is_valid<Indexable, point_tag>
{
    static inline bool apply(Indexable const&)
    {
        return true;
    }
};

template <typename Indexable>
struct is_valid<Indexable, box_tag>
{
    static inline bool apply(Indexable const& b)
    {
        return dispatch::is_valid_box<Indexable>::apply(b);
    }
};

template <typename Indexable>
struct is_valid<Indexable, segment_tag>
{
    static inline bool apply(Indexable const&)
    {
        return true;
    }
};

} // namespace dispatch

template <typename Indexable>
inline bool is_valid(Indexable const& b)
{
    // CONSIDER: detection of NaNs
    // e.g. by comparison of b with copy of b

    return dispatch::is_valid<Indexable>::apply(b);
}

}}}} // namespace boost::geometry::index::detail

#endif // BOOST_GEOMETRY_DETAIL_INDEX_ALGORITHMS_IS_VALID_HPP

/* is_valid.hpp
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
*/