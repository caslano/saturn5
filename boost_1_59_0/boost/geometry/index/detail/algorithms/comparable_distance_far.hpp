// Boost.Geometry Index
//
// squared distance between point and furthest point of the box or point
//
// Copyright (c) 2011-2014 Adam Wulkiewicz, Lodz, Poland.
//
// This file was modified by Oracle on 2021.
// Modifications copyright (c) 2021 Oracle and/or its affiliates.
// Contributed and/or modified by Adam Wulkiewicz, on behalf of Oracle
//
// Use, modification and distribution is subject to the Boost Software License,
// Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_GEOMETRY_INDEX_DETAIL_ALGORITHMS_COMPARABLE_DISTANCE_FAR_HPP
#define BOOST_GEOMETRY_INDEX_DETAIL_ALGORITHMS_COMPARABLE_DISTANCE_FAR_HPP

#include <boost/geometry/algorithms/detail/comparable_distance/interface.hpp>
#include <boost/geometry/core/access.hpp>

#include <boost/geometry/index/detail/algorithms/diff_abs.hpp>
#include <boost/geometry/index/detail/algorithms/sum_for_indexable.hpp>

namespace boost { namespace geometry { namespace index { namespace detail {

// minmaxdist component

struct comparable_distance_far_tag {};

template <
    typename Point,
    typename BoxIndexable,
    size_t DimensionIndex>
struct sum_for_indexable_dimension<Point, BoxIndexable, box_tag, comparable_distance_far_tag, DimensionIndex>
{
    typedef typename geometry::default_comparable_distance_result<Point, BoxIndexable>::type result_type;

    inline static result_type apply(Point const& pt, BoxIndexable const& i)
    {
        typedef typename coordinate_type<Point>::type point_coord_t;
        typedef typename coordinate_type<BoxIndexable>::type indexable_coord_t;

        point_coord_t pt_c = geometry::get<DimensionIndex>(pt);
        indexable_coord_t ind_c_min = geometry::get<geometry::min_corner, DimensionIndex>(i);
        indexable_coord_t ind_c_max = geometry::get<geometry::max_corner, DimensionIndex>(i);

        result_type further_diff = 0;

        if ( (ind_c_min + ind_c_max) / 2 <= pt_c )
            further_diff = pt_c - ind_c_min;
        else
            further_diff = detail::diff_abs(pt_c, ind_c_max); // unsigned values protection

        return further_diff * further_diff;
    }
};

template <typename Point, typename Indexable>
typename geometry::default_comparable_distance_result<Point, Indexable>::type
comparable_distance_far(Point const& pt, Indexable const& i)
{
    return detail::sum_for_indexable<
        Point,
        Indexable,
        typename tag<Indexable>::type,
        detail::comparable_distance_far_tag,
        dimension<Indexable>::value
    >::apply(pt, i);
}

}}}} // namespace boost::geometry::index::detail

#endif // BOOST_GEOMETRY_INDEX_DETAIL_ALGORITHMS_COMPARABLE_DISTANCE_FAR_HPP

/* comparable_distance_far.hpp
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
*/