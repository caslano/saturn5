// Boost.Geometry Index
//
// squared distance between point and nearest point of the box or point
//
// Copyright (c) 2011-2014 Adam Wulkiewicz, Lodz, Poland.
//
// This file was modified by Oracle on 2021.
// Modifications copyright (c) 2021 Oracle and/or its affiliates.
// Contributed and/or modified by Adam Wulkiewicz, on behalf of Oracle
//
// Use, modification and distribution is subject to the Boost Software License,
// Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_GEOMETRY_INDEX_DETAIL_ALGORITHMS_COMPARABLE_DISTANCE_NEAR_HPP
#define BOOST_GEOMETRY_INDEX_DETAIL_ALGORITHMS_COMPARABLE_DISTANCE_NEAR_HPP

#include <boost/geometry/algorithms/detail/comparable_distance/interface.hpp>
#include <boost/geometry/core/access.hpp>

#include <boost/geometry/index/detail/algorithms/sum_for_indexable.hpp>

namespace boost { namespace geometry { namespace index { namespace detail {

struct comparable_distance_near_tag {};

template <
    typename Point,
    typename PointIndexable,
    size_t N>
struct sum_for_indexable<Point, PointIndexable, point_tag, comparable_distance_near_tag, N>
{
    typedef typename geometry::default_comparable_distance_result<Point, PointIndexable>::type result_type;

    inline static result_type apply(Point const& pt, PointIndexable const& i)
    {
        return geometry::comparable_distance(pt, i);
    }
};

template <
    typename Point,
    typename BoxIndexable,
    size_t DimensionIndex>
struct sum_for_indexable_dimension<Point, BoxIndexable, box_tag, comparable_distance_near_tag, DimensionIndex>
{
    typedef typename geometry::default_comparable_distance_result<Point, BoxIndexable>::type result_type;

    inline static result_type apply(Point const& pt, BoxIndexable const& i)
    {
        typedef typename coordinate_type<Point>::type point_coord_t;
        typedef typename coordinate_type<BoxIndexable>::type indexable_coord_t;

        point_coord_t pt_c = geometry::get<DimensionIndex>(pt);
        indexable_coord_t ind_c_min = geometry::get<geometry::min_corner, DimensionIndex>(i);
        indexable_coord_t ind_c_max = geometry::get<geometry::max_corner, DimensionIndex>(i);

        result_type diff = 0;

        if ( pt_c < ind_c_min )
            diff = ind_c_min - pt_c;
        else if ( ind_c_max < pt_c )
            diff = pt_c - ind_c_max;

        return diff * diff;
    }
};

template <typename Point, typename Indexable>
typename geometry::default_comparable_distance_result<Point, Indexable>::type
comparable_distance_near(Point const& pt, Indexable const& i)
{
    return detail::sum_for_indexable<
        Point,
        Indexable,
        typename tag<Indexable>::type,
        detail::comparable_distance_near_tag,
        dimension<Indexable>::value
    >::apply(pt, i);
}

}}}} // namespace boost::geometry::index::detail

#endif // BOOST_GEOMETRY_INDEX_DETAIL_ALGORITHMS_COMPARABLE_DISTANCE_NEAR_HPP

/* comparable_distance_near.hpp
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
*/