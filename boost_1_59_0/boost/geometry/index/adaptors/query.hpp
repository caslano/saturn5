// Boost.Geometry Index
//
// Query range adaptor
//
// Copyright (c) 2011-2013 Adam Wulkiewicz, Lodz, Poland.
//
// This file was modified by Oracle on 2020.
// Modifications copyright (c) 2020 Oracle and/or its affiliates.
// Contributed and/or modified by Adam Wulkiewicz, on behalf of Oracle
//
// Use, modification and distribution is subject to the Boost Software License,
// Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_GEOMETRY_INDEX_ADAPTORS_QUERY_HPP
#define BOOST_GEOMETRY_INDEX_ADAPTORS_QUERY_HPP

#include <boost/geometry/core/static_assert.hpp>

/*!
\defgroup adaptors Adaptors (boost::geometry::index::adaptors::)
*/

namespace boost { namespace geometry { namespace index {

namespace adaptors {

namespace detail {

template <typename Index>
class query_range
{
    BOOST_GEOMETRY_STATIC_ASSERT_FALSE(
        "Not implemented for this Index type.",
        Index);

    typedef int* iterator;
    typedef const int* const_iterator;

    template <typename Predicates>
    inline query_range(
        Index const&,
        Predicates const&)
    {}

    inline iterator begin() { return 0; }
    inline iterator end() { return 0; }
    inline const_iterator begin() const { return 0; }
    inline const_iterator end() const { return 0; }
};

// TODO: awulkiew - consider removing reference from predicates

template<typename Predicates>
struct query
{
    inline explicit query(Predicates const& pred)
        : predicates(pred)
    {}

    Predicates const& predicates;
};

template<typename Index, typename Predicates>
index::adaptors::detail::query_range<Index>
operator|(
    Index const& si,
    index::adaptors::detail::query<Predicates> const& f)
{
    return index::adaptors::detail::query_range<Index>(si, f.predicates);
}

} // namespace detail

/*!
\brief The query index adaptor generator.

\ingroup adaptors

\param pred   Predicates.
*/
template <typename Predicates>
detail::query<Predicates>
queried(Predicates const& pred)
{
    return detail::query<Predicates>(pred);
}

} // namespace adaptors

}}} // namespace boost::geometry::index

#endif // BOOST_GEOMETRY_INDEX_ADAPTORS_QUERY_HPP

/* query.hpp
ud+gwxCrR9/oOASkg7atkeCiuPHCOcftxrgBdlgNrCEbicAx1Vu5arOlGPs+1jE5CWkjShyrenr9bE6VT52TQAOkmoseDjKuBQ1qwUCthOv6hYLr/TS8llg1nr/lNsL18oJlb3/zdztM4ePozxECbrkSnrTSKQ+bYETMHMgxz6+APgKn7UvRLBkEhPtfOoepbpYOuqfLl6ya7sEFxdjzUh7zUntzrWdxc8zlDklKnCpqzbneipd9sVoWuyGzI0LGC3PPt1hxAJGvAdgXG40hfhkDl63q//eCh/8D31L/X/PYd33Kjv/TPPawf8+3uFhihO5jQBSaiVWT8Ju/3F9+6o7SwIgrpAYVUrQM94VHVFW5w3mIFmaAB6irgDGfMXKSV5YvUucmSSIF7LblOikB+aozvTvkhvM3GvYvwWMd4QErwb52+Fz5wgeyWvG9bZfaQdzTCMD1kSEjpk2fT/FyVOHMusn2mdYAfPdAu038fYCCbQkfh1qJXv87P5/yd4D813sZzELa/of3Av75bx6ZmCQVNc+AKLL1lBjvOEUI7xvT8vVz2RaUj0a1ZxwZEwr0h5NMbehcvDT5iWTBsPPHgBtdcuWUC0HcAHl1+F1hF3VT68zlOVJJU19L8oFD92lBrXeBwuNuvLSYgP2WfgUfU1ETtJBu4idpmdT0KdrB3MbbQNgR8XjH616x9uEfpSyNA+TtEc/BWuNtwh6nc6FGehXOJRWlo/MHlEzSc4Fl1SBbIlPI5kB1gcJHTuwrik25ebl1pIbATTnv9y4Tjc8Drh7h17EYOnQy8lvhrY5hZXAxlBp7AV8INa8L/DapagI/54dGYTZIiAE4ZQk7CTdzKBfUxoRzP/yVOfu++CdDfDH4lKTbu6kPTxHJXmM6Gr4quv76rXV9SaCj1qsB+FGkOc/NNmDiqfo6/0Rk4QnpAGBc9rqAkr0S7yZKukCcv3ADeJEc4o7kOXAe2Nauu7HzfuM/UkWnY3VFX24f9prSmgCsJj0VyRESy+yUUBricIYTk/jQ+VbVJYWEPY14dXNyzL/4ZkyqLMAR1CzSkYN2g5HRLDdupc5NO4pdZXCaG7py7yzUt2YHaSMfO9wsRl9jGYEL4dAMFsmaCSzV2eaN9X+3Hmc75E7Ct4zQYQ+avGbE6gzOHvfgwg/7hECEN9y20wOzMc6Eq6vsHjWp7rVazAlMDDegbwfJRN6cXbmMujqnzS/PI4/V7q4mSo65NOglnoUEI9sCp+J8/nWzC0ojmWG17rvYfsVYKvQPGbJ5hzAlHO/kENxR+J/0Z8D+lx4y3vzk/E/2JfzvdUyR4e1ovgDEv9eQ57wRmTgtiejeVDBmt5A0Z00EjxSq2xF+zSQl/CRI+IVyBFDotp3YjTPLSdx/nyCxvfa7uYCy+kGdPLFuWP8ncv1jH9f/kisNJR70P8gFdfvvfTsvNnQU1sTQwa4dNLi3vu4KiszLH4na72oUfpZmrqZmxsDqwhKlgiETvjs8bYRYN5IEALloNJESyNUZURWc9y1cZKeBj7V//IK2pt46JyC3SRUg6M3SwmMM8vbPZAri8d/I7jCB9gKFsT0/NWD+k1McjqbX5GV5e9VHgFZWS0SRkKn3E6396YS8hAqVZ90CMkWDsrmqWPbBToVCwvlnb5aOTK72zgLI6Q7Wubk/d8p5r8cWdFKlrnCUFatUM2xS1MZiuBIFYa28Qe5sE7Xt+dWQz5I6CDTYYfTJWkf4xtetA3aHubPbQrDOvZV2DcaWjEDNZqFt59P19b3V7xqd7uy/bhBXJtfYII/4+FFdtPbnM/gZDtebvaUB7hBH3KhRXVphBoVy/EcpXbS2FYE4SOB1HEOLDQK4OfqNs81BUR/XL8XHqrxHKmBeGrK1c3c6O50BZSEKCJkmGF7pGOfNa1OxqpVaWgXfV3jnBxPJmJuwk+xsvBJ6s81gvfjSvH/bEc/HJ7Y/aEDLvp8OpRynYQE2jmBzb5VlIEwYs72sW6Zccm/1mZjcxkDYyEPo6/7aNFwrenTVYLXcU2bcX2zDTP14v+aDUj3/ZosLQf7aRLh89lYPX2qu3ypE88pKvXz1ZGJrDV4cq2wNjiElsYUOypn6CaWytsA+/g7Ska2HTjDXLBwVuc8EPdND8+psFFW5g/2dZISGI+IEEQTzw12R1kvjeHlubAvN1XJx6LtQC6ke3419JsutxmabV3o3uTRJRBa0nZxC7628a5oRdEByV3demsxO1ip0o6MQ9Gtox05hNyeO1/JWaH/4lseiAagfADJbh5zKgFChZvGE8ga8b6HYWO8FCC5OF/y6aB3PVyZE4X40TmI1PbC/Or+Efzi7JACXgpi3CG0ZQ3gc0RmkEOXMY8fJfVevrkmyrCm0QCcCEIfoVhKoh6c9ZDV0df0hy9NMwb1Vr2cFUqhKKLh44ZLIVhLHolAzNqbQWDiQl4ZqrbbJzrwiREiSzska05D2Ol4/M2MYU6fta1OOfjWBdBwRmunN0Fwzae9me7my03E+htjWIfhZNWex8ZvwP7W+4M5QSq34M6vuu2o8KyCFUGXDtJT9pU7W5IcGEaDWGfXzNE7W/r6oLuVGh0BsGyAU2NTjvTU6W74FKlhRRXRNlC+Xh8iYujSuRhILfAv+tl2tkTsYPo1J46Wxu1xu3ThITjs43WwUlelIrQykFMQosIXO3mRFwM9ixULp1R6uO8OmuDoE3dMDuN4F+klky8hQNr3afIrxpszsWT770gU3VXtdKW/qXoZUaCOB6+H8xm9UFTcrjOSVrlOb/CR6c7vQL6ERMCQV3aXFsczpgsVhmkbOIPUw20yKspGMWEoY2ptW7F9okwzv7G4PiRKAxshQ5N6mf7J24A9HUlZ8lQVK6pX+ayZysefhvp/CK/0nAY60RpiSvn70gnPrdPMY5+P9KS9VaRq29e9i++O1QurH88cff1IYfEntlRhOhpjvrZRrfiEclUiCGVBB/u2MpQqU+kcv2/mMqFQNBAvdcfyTwrtoHc6BqEplldBF/moXlhXa3OFp3JFvhuy5ymwlsS2yWICTBFoUwEd20aqrbKMhYrrSI+5tC8lSHq8hD0nTeS8aJ0potU6IY76y1uvLVHvDNJSR6kpitxyv+etWX31B56ZBJ373r4p0T9Z2dWnLFrVD/ss0wsrqSsYRMnWpDU7WiK1TVytXc1G82uNgAslKVuPuL8QPDbglY0iE8IRgFYO6aO3OQ+htcIYmWxO7aEuW8yN01J1/hmmT2Yd3TcA+rl0Ul/hyqOJIakBIbhlXBba+ZfhXypcwmr6y8i735SMwJAb95GXJVY7UO1k7N8p4kFhSZ9xh9NLArGAxcGmT8i6wgVkacqeQNF23la38thJjzsfm+G6zsjpVL7zy2Wa1rsY3nw/qQDNJ+1LGiWHprcOXRW1PXnj+NERDhvLfRd9F5mnRvZnRnyPQEmkC56WxreFhe0+kqKSUy0QGqqRU0j/dDNbVaBodPPtJ/NrU39x0NjrkI+HbRdvKJxuEHZmVyEb8bQJdiTrkvOZlqLGKJZGiJ2u4W6udcz4CktQAFEFUwS3058VvgFaoGZzvXfzB5pV+puHh7YULnMixrOz0DQ/fIsY/MSiV4DMiR81RSm0dvi46vrMubS3uarhNNgNDbeSxW/vgCZzFLW6vdTD9nmJ9QZd5Vj70jDDxbCcsr7Lps+b8CuMycnllHWreGZXgVpRsUGf5BqR9DTeXazKvL44oqWIEr/Q9jbfPfYLSr8IuVQixLeO3xc8r89kyvv5PDMFvy/OymKoumhCzKvBWycaE/0fGdt4VC8g46aeaueaXrp9ONqfwcBETIltdk83ONx0Y3zaoUf7QnVh0q+hPcbLmuTX63bitZnwaf5KT3VsV2Vx8t3HZPBvqH9/ms9n8eH5qqhf9Xdjfj6kqgqFCv7fys7n43P/4q8y3dfi2OD71o+lb/q1m55eHsPsLC0+LAMqA38JUJa+K2fdWXTb5BhhW91ZVNhgcznrkOTY6B2sDUV5FQ7PN9G/OuQYYKjReb9hbdI7nDpW+XV4rzawmvXlNWc5r5XA2hh9dG3UP3+aW1OWVaHPhYMH9j7Bd26qvrEvNEv+kZtoku3z/nmqL7kL19dGpS2u19v7izNNC5SXi4N5q77sRSOq6eF48fJfm8Xqrs2H+VrKu/bXEf1JfnZ2iCm04i7RSvw2hykblUPW16bvgongBbRFdF1u1nKca7aPdmeJbrF1atd9ZMJaGHjehRC7XPvHa87suNmrbT9c28drLuxrTPfOLGN+cHaLwWm0uODb3zDG82smGLrNsfh0u1/5X+r+jBlF47TYXjx07xy2e7V5ReGHf+bfKnZI92/WGopaaNY6Wa5+d33A5kbesMw2GdtcqHc5VPdsTo/ACbEL2lv1enPOj8Optmudr+54udHE5Wbbgh2pB7v4rOlgreHeRg8tJsoX9x2mtxqZ5tjb/+qIGlxN3C36zdu10bYfTWcKL03XIutIm5HLZ6uGCArc9sguv2uDX+Ro/u7NsF16IQfNUc77TeZEXp/aQ9fJ/RdWHrFeb853PybzaPaK04m1Ed5at7i+G8drZty4zDJYO1jYcztM82x2itJJtXCZrLe4u6Dic8boKDTxuL0rw2n9vXZYYvD3R4q3F25wsZ3lKDD3ua3A0kW/N1nK/JEVdjDRzniw7Pf8r5mgp86/f/T8zq5f/b5n/T1n+L1d2vuq/ewCAQ0ut/XOULc226AGusm3btm3b3mXbtm1X7araZdu2bduu2uX+zrn3db/ufrfP+6PXyhi5IjMjxsxYETlmzPzFnP+6pDT2X2d/IHRMHj2lqv50/gd+6F8cp/C/9UeVSvKN/8mfIf5/zRubNeXsccUQfZfV+A6b6RrdgtC0Ijn/Go5DtyNHCgB0nSRmaqOHFfZEfEBRTUJxkBIRKNkJiQWtURp3mt35Wzo5n2amsvCi6823K/ltrE9cpy8rXq3CAHuLs/yr+w4RtHLzZqKOMcfHpj5P+xCiu3wf+qOecdPTclVVVYCKVXB+PFgHBwdAPbrTxu3hvjcCkhgSQNDRd2/5hhq/6wMw6+8Bj0VG1RczxTVlymicUpwgleFM8JsjoAoAOy2giQhQWmaPVCSopwYlnIMbolUd4renFgTMfyYOI/ZPYa0hooWXPgrwMrO6U48hDhl+94GDBhJNfVwZQp6QuwBDQ24LEqMQlW2CUW+YjKEmMMKIF4E64ipYLj5TSS6iTgF7vV+zuNKPvry4nROv4mmlGfn7E0yxJ3R2fkT+sQRW203SCebU75uZGTUBFGxep6laRGONMnVs260dVdrnXSiXBn+83g6KvyBHmWN05+vh5MHdH4xiEJqNOdaGvxLwARdILsLaXVkZmgs9+PA2suOfrm1sDOzs6DtYMofsawXREqzuKHIksWZrfVyvGtzNdMdOlOQ+jjXgSmURWUP6OD2YmV1P746utT26jR0GCZzy5bg79Gj573/ZgMdut5EqQH+FUC9ZH05UyslVU2v8GX6j/l3LplWojdeomwBZ3bvPnF4m1/8jfvWPylt7XEM1WtGzpQigdr+/wIlG1HPDmy+uLbgLh1az8/FIt/mjfV5fMcClMUNedMN9Sq/ItJ4XdfC8Ks+R+wkQjIAsmDPBZDY8MPOzlLUtEkZZTYe6WYrradfTTQoKNAbros5BKD/BLtWRw8cA+xMQQKka8xp4GQZ2MPJWlWKmlekkDImdSEoCCyECGzYo3ifRvTOl/ZOPAoAOEh4S5+QRkOj1jxocFIEFDxZXc/PayNfSMTCQyDJDxAns+ftgjXeKdbPdDXM6ckf3HsU7ef9xuarpWYmDfDCerMcnIBD+er3zHGNES09/cH+IhwzQ1NMDQSKSEq/Wbp8Rhti+sTpe8P96gxC1uaxJFhxrgHVnZw+ScUfnJvztpN+skF0zMlxChvvq1V9iixqc0T9Vrc2BJI4qxsnNDU9MSlyYWFn+UwlrTTe0MVECxzIkXV2nS/WLpm5Fnd5WjFzJmWcPSr58NNS61ZcGBlNFmIE3P2IweRM6I9RIrI+YrtxwjJQTiNLBmE50Q2yK1nB/oqQakthaR2LKhpA2VQbH2DDGcprJOZRpn5NX2NswzEil3WV/zhamuI9KL4si1by6aelQUOx8QaxXbIn+QBkPJt3MmHDqupwRlF23nRUHBT0S23+z6uMFrQEmVYanFoBFqSfEUJYXNVAyvVG96fF8YV4shcw9Jhz7bY5ue/skmwTKYPAd0qzTaj9T8gPWuIk0dgDVIPP/OWH9PzxvIP6V/v28GVLWWPyf5tH2/zWP9p0hgg9hRBSc380yS5q31owOX7ziWgvu4+KUu7TGCM4zUR6mBoXa3zT3A2iePDM6b+EQQ6kZvfsJ/5M722EYKTylTZ942Yw08wMKcDxjcv7tfUj/Ko4q1UqZFFEhTP8M3K6qGnrn8gEhRkc/b5Vf0PKfuff/kv9f/kxkGPtC/if5Nf9Lfr0ZJrg+Rliweeul6XdM4UGL4FGAcB8m7e327xaOnvOaZnRFtW1bs6QAnAznDh6AqKhZXAU3aJu3WuzNiY47AstHeSacFJIjJTHptqDZTfcuAsJ4CiXzPdVS23/0u/Kv9VcI/5azqQkY7/+nnJSzy0n1cH2EiCDxEcP6ikx1lYS+985C7ITFESk5uh11phTu6UPg1c205Sva0no63gJkeAFaWMY1puoBsDFM64e2rzkGUg+jaRCI+62TEpwJ+L53wOLWHkK/2Zeu/6Oc8AAAEOq/+wOOE0TG/+TPgtBYUlkOAPAiAwACggGAt59/9mcAgCsTAHChCwBwpwMAGHbPfCJA/xSS/y9bR5eOTKWJBtp3T7PC9o3LbpltE1tuJiT5gShkBIgrKWdqAOcjBKc7KTyuqAMxPDCWRVDBQTThgSAonlREVAEIFDv5r5i9guGnw56KmfXJ/vX45td1V+vV7lzUnJqO1lnuy693N72BrryPm/inm+4PTj6ewZpVRAGfr+zZcxUFX9BWfH+BGlzddWmHw3e0z/tZ/1yo3ufP1+fzUoE4HQIPWG65jJXSTS293iSunU5vDA4BD5TvK8juWiAAPPw/bZL8S2DgaWE7RRslDjritRNqebByJqQC+hk/+WX8opTKgRSJoC4ZEphAzHSuVmRhjPmyjFC1dJtbXuWkTOqeH48NGwLwZ3zQfUya8rO4hABt4XiUtGKVsMZNW8L35GzZ/fKsG2m5E+jC+3MMl0tpAl8ILcBMgDpOPP7cwl071tx8LYY/W2k7wFefhWhbX/QCbhTz7GxJxSFRY1/itCP/oP9NPzBcpTvAkZ7kghUW8byuBlG6KM2ltLfcCRRwKmghwa8vPtpB6IxwGPF8GMoJDYTUM01kzuUFbDjqfAaYEInApcpa4/89gQ9lK5bqi6ylcr7DUMJr8QsNwANdjIiIw/WxxvEcZ4LqiAHlFISnXjImAg2YpfRVXXsFa6ddul1O/CiZSMgBOZ+CVx9ZD8ardjwJlzIHKyjnwqgAxMgVJxt3EbjcfQ0jxQyCDArUBL8op35uPbTJPE3gvZm1llBBohZUhvfBk4kBcq+W6vPz0u2BgF/eCbArdWnHNqgCwsfht2UEkvFiQsuMpWdwjbnPrxC9gWh3+EAPJGDp
*/