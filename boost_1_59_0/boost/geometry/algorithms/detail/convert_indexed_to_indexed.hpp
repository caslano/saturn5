// Boost.Geometry (aka GGL, Generic Geometry Library)

// Copyright (c) 2007-2012 Barend Gehrels, Amsterdam, the Netherlands.
// Copyright (c) 2008-2012 Bruno Lalande, Paris, France.
// Copyright (c) 2009-2012 Mateusz Loskot, London, UK.

// Parts of Boost.Geometry are redesigned from Geodan's Geographic Library
// (geolib/GGL), copyright (c) 1995-2010 Geodan, Amsterdam, the Netherlands.

// Use, modification and distribution is subject to the Boost Software License,
// Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_GEOMETRY_ALGORITHMS_DETAIL_CONVERT_INDEXED_TO_INDEXED_HPP
#define BOOST_GEOMETRY_ALGORITHMS_DETAIL_CONVERT_INDEXED_TO_INDEXED_HPP


#include <cstddef>

#include <boost/numeric/conversion/cast.hpp>
#include <boost/geometry/core/access.hpp>
#include <boost/geometry/core/coordinate_dimension.hpp>
#include <boost/geometry/core/coordinate_type.hpp>


namespace boost { namespace geometry
{

#ifndef DOXYGEN_NO_DETAIL
namespace detail { namespace conversion
{


template
<
    typename Source,
    typename Destination,
    std::size_t Dimension,
    std::size_t DimensionCount
>
struct indexed_to_indexed
{
    static inline void apply(Source const& source, Destination& destination)
    {
        typedef typename coordinate_type<Destination>::type coordinate_type;

        geometry::set<min_corner, Dimension>(destination,
            boost::numeric_cast<coordinate_type>(
                geometry::get<min_corner, Dimension>(source)));
        geometry::set<max_corner, Dimension>(destination,
            boost::numeric_cast<coordinate_type>(
                geometry::get<max_corner, Dimension>(source)));

        indexed_to_indexed
            <
                Source, Destination,
                Dimension + 1, DimensionCount
            >::apply(source, destination);
    }
};

template
<
    typename Source,
    typename Destination,
    std::size_t DimensionCount
>
struct indexed_to_indexed<Source, Destination, DimensionCount, DimensionCount>
{
    static inline void apply(Source const& , Destination& )
    {}
};


}} // namespace detail::conversion
#endif // DOXYGEN_NO_DETAIL

}} // namespace boost::geometry

#endif // BOOST_GEOMETRY_ALGORITHMS_DETAIL_CONVERT_INDEXED_TO_INDEXED_HPP

/* convert_indexed_to_indexed.hpp
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
*/