// Boost.Geometry (aka GGL, Generic Geometry Library)

// Copyright (c) 2015, Oracle and/or its affiliates.

// Contributed and/or modified by Menelaos Karavelas, on behalf of Oracle

// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_GEOMETRY_ALGORITHMS_DETAIL_ENVELOPE_TRANSFORM_UNITS_HPP
#define BOOST_GEOMETRY_ALGORITHMS_DETAIL_ENVELOPE_TRANSFORM_UNITS_HPP

#include <cstddef>

#include <boost/geometry/core/tag.hpp>
#include <boost/geometry/core/tags.hpp>

#include <boost/geometry/strategies/strategy_transform.hpp>

#include <boost/geometry/views/detail/indexed_point_view.hpp>
#include <boost/geometry/views/detail/two_dimensional_view.hpp>

#include <boost/geometry/algorithms/not_implemented.hpp>
#include <boost/geometry/algorithms/transform.hpp>


namespace boost { namespace geometry
{

#ifndef DOXYGEN_NO_DETAIL
namespace detail { namespace envelope
{


template
<
    typename GeometryIn,
    typename GeometryOut,
    typename TagIn = typename tag<GeometryIn>::type,
    typename TagOut = typename tag<GeometryOut>::type
>
struct transform_units_impl
    : not_implemented<TagIn, TagOut>
{};

template <typename PointIn, typename PointOut>
struct transform_units_impl<PointIn, PointOut, point_tag, point_tag>
{
    static inline void apply(PointIn const& point_in, PointOut& point_out)
    {
        detail::two_dimensional_view<PointIn const> view_in(point_in);
        detail::two_dimensional_view<PointOut> view_out(point_out);

        geometry::transform(view_in, view_out);
    }
};

template <typename BoxIn, typename BoxOut>
struct transform_units_impl<BoxIn, BoxOut, box_tag, box_tag>
{
    template <std::size_t Index>
    static inline void apply(BoxIn const& box_in, BoxOut& box_out)
    {
        typedef detail::indexed_point_view<BoxIn const, Index> view_in_type;
        typedef detail::indexed_point_view<BoxOut, Index> view_out_type;

        view_in_type view_in(box_in);
        view_out_type view_out(box_out);

        transform_units_impl
            <
                view_in_type, view_out_type
            >::apply(view_in, view_out);
    }

    static inline void apply(BoxIn const& box_in, BoxOut& box_out)
    {
        apply<min_corner>(box_in, box_out);
        apply<max_corner>(box_in, box_out);
    }
};


// Short utility to transform the units of the first two coordinates of
// geometry_in to the units of geometry_out
template <typename GeometryIn, typename GeometryOut>
inline void transform_units(GeometryIn const& geometry_in,
                            GeometryOut& geometry_out)
{
    transform_units_impl
        <
            GeometryIn, GeometryOut
        >::apply(geometry_in, geometry_out);
}


}} // namespace detail::envelope
#endif // DOXYGEN_NO_DETAIL

}} // namespace boost:geometry

#endif // BOOST_GEOMETRY_ALGORITHMS_DETAIL_ENVELOPE_TRANSFORM_UNITS_HPP

/* transform_units.hpp
XTfdH/+K9xCU3/DPXEaKJLc1fE0PT6eAeZqKHyxYLAyxXg/mcgBu1NjeJ8gnW0he7zvJifyT89M5Gmn2hHLDE4Q2bcOTtB4E5QEQRCdq7nJZ7O0R3S/nSC7exvW05+vaZlo8/KEpIEgud2+Wt6dPq6+q4ktjJtcENE/mZc5svP56un4Zxbspka/yjWkol+UL46SydO70cxJhhzmpJyYUwsGFxwer/7wvrcjKBa43DoNXrXd2F+drezo35AtiPHbpIIGnfpmE/c6ZxP5ELvcYKAiEuaUHebDQyn5XN++LJscZ16r0cFN+6oa7SdSNNtJqydtxJpovsgPz9RSV/OOnE/WZkm5sb+l6ehdXWofavFfiDD/ggnuNuQD2wi+22Nqa8tvMs+B30hDU4moHqBy5DXkDq1sV8xRJnvR1EVCN60nSM7S8hTXSPofJZ/hKVzD6jEoC+ESCYIgaYfzQeCWaOSoP5F9pVeD9sliyQL5/jesbq8vMmSQopYRpOIhz4GIZOA1DHYKa8C/5jrcgAjQo2kI39ryEU3VBrXq4crtLldAt06BJt1l9moIUcwacO/ST2y0eGBc1owl5d8bmndGZJnkPNCuPV8UYJOv3Y25UAvQdcvOIx4b5irvInHdOz+bbgX3v+lyyS9Z/QZ02Fv03zgTUnLbdfBLI+xIjpnYFp9O5clYgQLBeXMeOIF7+mapA/5yQBWgC8g4sO4MLP8Tpf/YgvRlcd7MLzbnYH7x7NIFuZE8qxoxgNa3Tu8O5l12hwTEDBlVZXRWqpZSWKfctHSzHK6dssMddhsRGUWhxB4z4Hwo6L6l5oZv4rIlh7FZ+E2q8Xp8BkWr1QoQ+fA+7jaITYy9A1RPKSIkwoxn6vdtae7oroObSr6Mzzxfc5NhNvg7g6ZMbteVcBHdcqy5AQktYOeAPNtkJfTFRZiYBXzv5ztnOOa8Zv86+bn2Z9r1npns0llG1WOPWVwreNQWOg+UyZRZWFJ66R9LYHFPQ7MU3A9Jrwq/+s7hWeEo19mL/Ib70qf3BfF2neN7UvFQU0fEfdscsl8HOQ8g8ZoiklMu8AnNXe9ckhMTMa+U5l18bUERcMSsOSZqWDElaxvgd9VvJgpsWu2X6sW/PstgvSZb/qqYLQ4kkMl38GF2Uf54uZ+imXtxvYQXd/1qzI+S+TY1nNfXfqLpet47VbXC05oNl34MV+NqY2Z23LTq4Yil44T4z40jxkLQDwTWGufTKY9SEX60fWQ2NefU9kk/Tk7A/o4dQIhUroDdYGrbqMjh0lqhfUH7D4JrnLw6vN+HOkINawaVcV7rqg76JO0HfTI2dCS87DjfWea4Y6z24zBxmL8O0M9D/xwr1DIShzCP6ZesjtlpXfQbJBMbKtIqp9ArQecHSg51byv3Kqy50Ls/qk2z67+zQAF40+QJTMGpOvrAqrXH8bdk4cg4nGD59wI0jPQdVEGtlb8tm50e2Ik4MBrTc+UIGFUHSv3wjQKhgUOV+s3FtVv2WxrmapugzEDPyKpLrLppM/qrtG0EHfKui9UHZ7D/PkBkYOgHSrOG5Uhwksf8sdPoY60Q4EIT5YZwKGOBzeJc0NYkHdF2xOvdZa15powTASkaMHtohKceRR/iAr3OLXVZHQZM9GjFqihDVGCCOjdU+JfZRcsZxPJhr0YkOzYgekWO597UFqfzFkriE0uljJ3TytVvvyZ5PwUidLWZirvtyIs20c//lbhkhvqsZLaExPdhdw0c/MmZgsv2Uu8uPCOcj8P1Sl8+NCVPt70SfiiluTJ9c7xOMMwwbbzjLbBhDmg1IoJaWxGXBF677FGXNhBQWozGBGnWMEEYz0mKnYm6ydyytZWTy1kl56Ps5zppnGNBzi4yK1mSiUWTNFgaU+N769VG1hwznG1s14BPwa3G9TcGiJrgnY6mhlobeG0MfQv413BGUcoMvHdLYQNbbf/zN1RjA0wJCHCzxHPaODLFW8Sdrr2HEewHrOWdtpLVVyfef2LI/Q/MqjkUq+vEh9wpEopq/1nSkgN15kM5D4cZpBSvqTgZgS9yejP4yx00G2ghFGa0HgnTJbOwBzjgphWIX8ZF7F2zeJUgmlKNi6Y6WLWg35tCarZHorK3AhtPYfmL6LULZ8L3V2ng4bedFnJzY42yaH3v2dtP5K+XY+VF5WpQoOJjlLllk27QWiGk64iYUhw19Uftg7TngTFgpV6qHTlyd9fCor1L5QgH7yCx5cksw8WKKAt0HKk+qci0r2TK1WAI6h/uX3B1g6+ucKwOjwjbPIc6uHYW01so5bpSIuPJGXzjdKcbA1SObQ+dQRmjDmteiHgYMXaPM6f9IiiammnQNhw+MkDs3fkG6en1LiXo61in872k9OcFzVenygXuWoTw0f4ZaLwcBsX7DZ6uYB09WPN4is+aMRIHAv1vpdKGrREH1wgtbbup6PHPeEGtvBrV28RK8JTckOB18hUd0ot4j5dMei29Zcia6pjmlzDrOpqynp1yrO2PBGE9+dAsHVKuox+j/UmzEZYEH39vPAo0tFwnW8j7ZnGJbn1Cdy7Hjrk5pcYBGv2eAPKMiGZfWNUMaMxNmyyisp2hwTpXJ50wczqYuifvPi0MasMyDG3aEtsOrSLszJzmwkxwbHBPVTgl5zvi2FffbzrFftxW2V2tuyzOzM83dmun+GdXS2FUus2HTNQsgse16zk5X3NAmDPZCDGVKLhQ6x1jU7tgtTspCcNuFzraFGePYkk1bguy7UnuNRUTX2WmPKeY9PsmCHyWcrB5iYRJzeM8+NT1+8gJAhK1ry9GKrWDuwpEOFYAdZaeLgO0LlgARpSVsm7h0cnDqhkqOj+oUiExfqxCPXp1cFdwaEhtEGoul3et4CDUBKzwrB5DZMr4HvGe3qfDtY/CpjIUzz4agoYN1WZ5VaLWhik/xBjMg1upiOYXH5/VjzUeJEMsstbBlEfWeSpyR3s3QE+I8lO/lXrkoJ474AMkLjEBJzpwU1NOCXFNuv5x3dHb3ooIWMExKIw9WP/eZJzwY6qf/mDgtarNVshwL7UTroQ3VYKiqefyDet0aB7vjfU+wfucX7RpqnVrCajKRWogVvuEkJJqeHw3TvXRPrZ/7uyuyjzOhNvlnNKTNRi54Rnp/sEBsl/f5WKhQXRY6XCxRWR07PoBWW1jiE9BBt5Sjq496kGFWj4gnIvKVoEKU8GLP+khzgJHiFu53bYMCqSAUcQtRR0D7a1Bc/6MTvy38SG1f6U3576hZWDT9P4wETITFHiT3slBifMqXaLQraFEuFmUQCJVBlwU0QDEQ6mz7D8YzGPtzjyQCMOrGyTrMj38SibLUP2BRiceE6buCew/47kbFNUcTKnPpKlRdz2PtgwfQYwJmnkLz8CkdA8u+zJkx2ik1L3Ak7Bn1AjUtOuz1EtSxWo0eRkz56oBUwnQ1e/IHueFeqEp80shvlDD5hOrPSvhUcmhBVaZgrAJITs23wbVfsqWVOLoYh2rVp+gfw/IwFTZBCK9HDDs3ucnKEH0+K/rUqWa0haus1q+6wkRFT1AB2FhQ/UEBCcX1Mui5I3zPL0Q+hx2LhMP8+b6T45lB2TXudAvahyDW9f2Zsh2436Q+72KdXtUAnsmhq7RPssxRpoqT7a4Lt6H23jAj3fcLTYumt3QgwE1isfEmQDUjkAo6QQmHRD7gFFH1guh4MrOHxqI6Nrp9RQ2BnVpRFb4LvQNcxd/6zsat4vAExWDE0LrjZ9XfEk8bkN1210zelff9MkXW/oWRDMbONNTwCEkB16IzhGGGxYViA6b+dQ3lZBMyGRAyx6MSal6DUWjzfYBGQfcfVH4mPUCaAF3YqUYVHs4SehXkPhgiGqch6wQqGbfUrv7MVttKiocu3TmTVqXaHDo2egW37qBZISj2qqDhdPCsZx8WZtaqGleqZnuC5KNT1pcMJbn6MR5LFJj5rCx2y9W66hZHE597ZCuEABxa6tbxXLhoXEfDGm8qeiR+FLg5k8xVEoGsCwo2xywYZS2Mqx2ZsxnmxWBNViEaR3m6cdUBTaPgTYdC8OY8QAEtt0xSaDaWyg+qmEonT5kjb53Ujo3i5y94cwVWytlUJ01Go9+mbs8Ip0pPd/8ZNbFkiPCFGXDyvoYn+BjVH9n4I3+Aik13Q8fyaM7DYAvGEcSAQpT0+4KXOL3f4c2DNHZpVDTWJyhZPhP+BGVGM99E/FIUgKySyqjW8Q1X9OZ1v+X8aGyJI7x+rW0hWeq6PUfQc9lO+mQbHIZofUy7M2VbngvdYPtcbg6g6FCTstvsgMarYEbv3nCaXdD4EP/6GYjKpc0bndQeNjrEGX794xm0IxWdJ3r+5DE46s9vDEAdXPblGDo/c1jiZq9Wt2BudTTCK2eKusInPWGmEzM2wmidI/mwPXw1i0rZHtFyMzWlPvHmuhLg3ED/kvzwM/NIlOS22bM6Q60eNhAVEpxO4QaR8KkiBu5Uk9yk4XVriUGeATc36b85G1uTvcN86Qk8tiV7BNYpd2vNvCC1398mDz3vNxomvPbKHzaw3IkVPGrJnA8qoqMzfmrJRMCmIoXQH9tXc2xPvShXIMbKt+UZqZYb9iVPNNLBb3OaGjQwOj8dv76vWaKK69jI0bffMhORqJjnqHsDPggnr7Woj6FHcbOim2A5bYck7lcUPA+WSaC2cfPZls/SP8i0KDLekEoBVeVXcK+fA6UVD/l3xSQ9ym5wzmypa4RFXOUxvBGEqzS9uuMdzcGG06fBlrbPaL3k/PEpekvVFUEnKJQQ/aH1QXHSEW1Zs7J60C1gCh7uK5QFFcAzesoXLkx1QezDUwOOv1DL/sJOOTEcyxMz2HAXWIG4cGH51KBJm9l81pj8fVnW5Nc+Xc2NuKV61srajKFNThiP3z0hO8oe0DHL9PMEe/0mdqS0+878vqT3rcq7TGGMUeHc8uPwqfCs5VwF6Ar+m5O9BgAELPvTuAFXkXrZWrc8VFPGWk2Fpdd455Ir1DschL3WTixh+bl1YtUX2tni0t5yfc59g7uOYdvBLpXxHEoURwzoR8mU70PRkIuDuu2pDm15TdKGjLzey9yFtnxPrpfFOiHnHb0mVjGqwEIuCgAdl/TspztKgHph8mV73o9JZ60y2khcWLEXFKqSdDIUBXWz8Epz8X3BX2OIncvnbAoH+f3ZoHAqccaHqbS+dQORYzFuIrgoGEV1+h4nShWYShzJVBzB3T3RP0KVaHze+qtvHbKKUSnm2f915k4pN++q6eTbw1gwRRSx6UfPq9QOzYl3ACBrBQxa0xIGEIN7t+VXzmofYcUSiNwUIFHDKsoD7b4c1hwwqW2TZeOQJ+2DL0/szqZ5NVi30eKHd9ePKlZ4f+mK+KEW/pYuhN3IY/WsoYR52LX/dpGaDa1CHhdkVV8mPIRnnzXI3blG9fXPC6F+bxe4ILdvEX3JUsGerAy3EJQc45NPFspgevBOmDTYpdknkuWah0UNDuRXEhPklZslgsmgNGYeg/va0mt0pOU/xJuvkA/uf2MmT1iFIXnAUgNnjs1h3KeFSA5IzydrAHJV5tKwxSS6pYhFlKKthpUi97cBJH66jOeyt5xHtp+3I/PpLug4R5+F7+YnL5Ku8XlbqjSBndo2aFGYR+dwG+WQoJyrnEMUk/Anky7sSdmqYTCqOLgtYlKMlAxAKfbNs0GW2oMo7fLKQ8s/Lx6X2xZ0e5TfVa3RtGigqKGG2TjGyi3PmL42RwGWro1QMskdzVO7AlS/whu9HvGA6UBXbjUiVdxcbUiz6vNUY7nNqfa1iNwHlo+F+IEL5gxdmEl3mRRZPzi7waJ/m43xjZ/LdkNSuXQfiKWtRnJqeYg/3oXnEBAfUsLfkMA9knp2c3/IIIxDSIsDNbgHdkQ5/06GfZ3VT5feLUVdEkE+nN7NNL2V40cBrZhGYg1w2MuyONsK6zexBCsBWj6z/AzALzA6/7UN0CeHhqpFB7FKk+AZCaH7SoGILwkiizOieCFh1ecqqRn1pDh/vvme3pvIoxzAQ6OZqsqo/C4aQ+a+3BVwZ4j2kvS8UvjBp4GvadlG9VOJ4CTo+0bDqVwsIKDTnvLehIB34BDZ4WRha3E6/ntuYVNSNRDEPxGlhcNhhd0k894ePoy56aotif1ldQPGJuB9Kr3Rwa4UAfVFEmnEEcq3wMOq2xS95a4nXbXL6e7MzaQTOdbE79ALk0WYrWPss6S5Fb96J/z9hQF8maSBLveMAWaSs4QL2SeXf6IJKVhJmk8+yLKlZdkRuZ/aY0Qfp+MtPQZvTsz/sS0TEwn5V/oIIE4zIInsjMFeZ78FW5la/icSLLtw02GV9/1o7TxMBgFfdJ+E5oSibjTCqNsEqAXz0b3633Dw9TphFZGMI8RV1RHFZ3pigvlD4C4p23mgnlGSKdkFgoK3xlOTYe9YRJBDrASB0Zd8sroaoxLMU6aIpM5a2jfTovQXMEoZfQezYhp1tMgCL/NwIGXRfL4Eiri6wQDj+ZHJvbJeL6DMEpILkc3mWFMI4TF7pru5+a8TPeXtK7ppeWywfvDgU8tl4BYQM2BbEr6VBAKBwtRC4eWypZkwRKmJIk5sgpt4BsySdkEtK9DbXPdHFTN58WNwvzehTCyh1U13+KSJt04kDcuGfn5CDI15dMAehktouJ7LxbJty3BncUK5arQBwKLOpnmti00hip64DHEMm4lJKY3HObrZ6qzj4sYDGx4KHJ4nM/kjGSkMMxIEI5V0qUDS8sGE2G0rOi4ewlR1H5yx8n2sMQqc8SSlrtgy4NhKukKpZcXCVhOmSelqWf/bfFsjscJsmO5Cclu/pAh16doNSnv98rT6aJtyQMwZIgvw5ff2ajuOccEsnC9PE465dLFM5XZY4qLlpS/Fp+ySV3ToqcacmPJ/8VV+tlLHBInh7yeN7RMFBkJN63NvRU0rbGcKZoW71mk6aF5jBmmnjiiI9rkC4gdpmfTD1022lDJG1bc/PAEcdRJT/jKGoiJ1jSbI1c+g0+Y/ZFwDEVUbJYKXmogqrZ1xSuu7H/CopM+EPhfG+E445aPzhUmpu8e36srNe37Y31WVYKxAZ4Wx0fd+OzrN2f7LacQvV9THImYV4hOCBzRgceph/QNVUFkwwVulDlJLgKGjMWlcX1wtmKdJVpO7GXJQYZlyjUlB11yR2NZMv2pBMhJ41ukCQLM/hD5APO/7v45ACdg/Jhmevr2jdpqfiSLpxjDNHngkYRtZcGuaS9eWhy4f4TtJadmihb7C1qaT1Vvo2G2CVsKaS5H+9x2LBl3zot9IPr0MUOXe8eNHehICPso/8nbIcd59nkff7sT8/DDeV1a4Epj0iK/XYCKSlqo89vrq4YPllqXA4uVn0L5FZU9uvtlVzoOfw6pFX8IZPGRsivMtkm0xmbCcQbUEcfCZ4iOBMKZ+kTAlVl41jmj/itqYugVcErN19MFv4AeyONXawgqWLZi+D4PGE7t61Zh7PS30uRbBdMmfUm4uGrv6WtHr/0Oq/69HfVJig0RsDJ+32xOAZ4Sb5BG7g4jVDQDropDeIWDNkVoCldanI+iI9fAfkT5ILKuC37scRtR7KifDnKOqy7DmjOAQoi8JIp8WWEHmM0aU0TIZ0uF5oHkPr1HOL/J3FkkU
*/