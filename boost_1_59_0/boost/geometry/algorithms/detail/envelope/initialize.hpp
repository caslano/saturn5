// Boost.Geometry (aka GGL, Generic Geometry Library)

// Copyright (c) 2015, Oracle and/or its affiliates.

// Contributed and/or modified by Menelaos Karavelas, on behalf of Oracle

// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_GEOMETRY_ALGORITHMS_DETAIL_ENVELOPE_INITIALIZE_HPP
#define BOOST_GEOMETRY_ALGORITHMS_DETAIL_ENVELOPE_INITIALIZE_HPP

#include <cstddef>

#include <boost/numeric/conversion/bounds.hpp>

#include <boost/geometry/core/access.hpp>
#include <boost/geometry/core/coordinate_dimension.hpp>
#include <boost/geometry/core/coordinate_type.hpp>


namespace boost { namespace geometry
{

#ifndef DOXYGEN_NO_DETAIL
namespace detail { namespace envelope
{

template <std::size_t Dimension, std::size_t DimensionCount>
struct initialize_loop
{
    template <typename Box, typename CoordinateType>
    static inline void apply(Box& box,
                             CoordinateType min_value,
                             CoordinateType max_value)
    {
        geometry::set<min_corner, Dimension>(box, min_value);
        geometry::set<max_corner, Dimension>(box, max_value);

        initialize_loop
            <
                Dimension + 1, DimensionCount
            >::apply(box, min_value, max_value);
    }
};

template <std::size_t DimensionCount>
struct initialize_loop<DimensionCount, DimensionCount>
{
    template <typename Box, typename CoordinateType>
    static inline void apply(Box&, CoordinateType, CoordinateType)
    {
    }
};


template
<
    typename Box,
    std::size_t Dimension = 0,
    std::size_t DimensionCount = dimension<Box>::value
>
struct initialize
{
    typedef typename coordinate_type<Box>::type coordinate_type;

    static inline void apply(Box& box,
        coordinate_type min_value
            = boost::numeric::bounds<coordinate_type>::highest(),
        coordinate_type max_value
            = boost::numeric::bounds<coordinate_type>::lowest())
    {
        initialize_loop
            <
                Dimension, DimensionCount
            >::apply(box, min_value, max_value);
    }
};

}} // namespace detail::envelope
#endif // DOXYGEN_NO_DETAIL

}} // namespace boost::geometry

#endif // BOOST_GEOMETRY_ALGORITHMS_DETAIL_ENVELOPE_INITIALIZE_HPP

/* initialize.hpp
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
*/