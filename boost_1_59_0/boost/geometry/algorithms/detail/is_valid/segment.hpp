// Boost.Geometry (aka GGL, Generic Geometry Library)

// Copyright (c) 2014-2019, Oracle and/or its affiliates.

// Contributed and/or modified by Menelaos Karavelas, on behalf of Oracle
// Contributed and/or modified by Adam Wulkiewicz, on behalf of Oracle

// Licensed under the Boost Software License version 1.0.
// http://www.boost.org/users/license.html

#ifndef BOOST_GEOMETRY_ALGORITHMS_DETAIL_IS_VALID_SEGMENT_HPP
#define BOOST_GEOMETRY_ALGORITHMS_DETAIL_IS_VALID_SEGMENT_HPP

#include <boost/core/ignore_unused.hpp>

#include <boost/geometry/core/point_type.hpp>
#include <boost/geometry/core/tags.hpp>

#include <boost/geometry/algorithms/assign.hpp>
#include <boost/geometry/algorithms/validity_failure_type.hpp>
#include <boost/geometry/algorithms/detail/equals/point_point.hpp>
#include <boost/geometry/algorithms/detail/is_valid/has_invalid_coordinate.hpp>
#include <boost/geometry/algorithms/dispatch/is_valid.hpp>


namespace boost { namespace geometry
{



#ifndef DOXYGEN_NO_DISPATCH
namespace dispatch
{


// A segment is a curve.
// A curve is simple if it does not pass through the same point twice,
// with the possible exception of its two endpoints
// A curve is 1-dimensional, hence we have to check is the two
// endpoints of the segment coincide, since in this case it is
// 0-dimensional.
//
// Reference: OGC 06-103r4 (6.1.6.1)
template <typename Segment>
struct is_valid<Segment, segment_tag>
{
    template <typename VisitPolicy, typename Strategy>
    static inline bool apply(Segment const& segment, VisitPolicy& visitor, Strategy const& strategy)
    {
        boost::ignore_unused(visitor);

        typename point_type<Segment>::type p[2];
        detail::assign_point_from_index<0>(segment, p[0]);
        detail::assign_point_from_index<1>(segment, p[1]);

        if (detail::is_valid::has_invalid_coordinate
                <
                    Segment
                >::apply(segment, visitor))
        {
            return false;
        }
        else if (! detail::equals::equals_point_point(p[0], p[1], strategy))
        {
            return visitor.template apply<no_failure>();
        }
        else
        {
            return
                visitor.template apply<failure_wrong_topological_dimension>();
        }
    }
};


} // namespace dispatch
#endif // DOXYGEN_NO_DISPATCH


}} // namespace boost::geometry


#endif // BOOST_GEOMETRY_ALGORITHMS_DETAIL_IS_VALID_SEGMENT_HPP

/* segment.hpp
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
*/