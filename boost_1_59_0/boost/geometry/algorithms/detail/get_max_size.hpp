// Boost.Geometry (aka GGL, Generic Geometry Library)

// Copyright (c) 2014 Barend Gehrels, Amsterdam, the Netherlands.
// Copyright (c) 2014 Bruno Lalande, Paris, France.
// Copyright (c) 2014 Mateusz Loskot, London, UK.
// Copyright (c) 2014 Adam Wulkiewicz, Lodz, Poland.

// This file was modified by Oracle on 2018.
// Modifications copyright (c) 2018, Oracle and/or its affiliates.

// Contributed and/or modified by Adam Wulkiewicz, on behalf of Oracle

// Use, modification and distribution is subject to the Boost Software License,
// Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_GEOMETRY_ALGORITHMS_DETAIL_GET_MAX_SIZE_HPP
#define BOOST_GEOMETRY_ALGORITHMS_DETAIL_GET_MAX_SIZE_HPP

#include <cstddef>

#include <boost/geometry/core/access.hpp>
#include <boost/geometry/core/coordinate_dimension.hpp>
#include <boost/geometry/util/math.hpp>

namespace boost { namespace geometry
{

#ifndef DOXYGEN_NO_DETAIL
namespace detail
{

template <typename Box, std::size_t Dimension>
struct get_max_size_box
{
    static inline typename coordinate_type<Box>::type apply(Box const& box)
    {
        typename coordinate_type<Box>::type s
            = geometry::math::abs(geometry::get<1, Dimension>(box) - geometry::get<0, Dimension>(box));

        return (std::max)(s, get_max_size_box<Box, Dimension - 1>::apply(box));
    }
};

template <typename Box>
struct get_max_size_box<Box, 0>
{
    static inline typename coordinate_type<Box>::type apply(Box const& box)
    {
        return geometry::math::abs(geometry::get<1, 0>(box) - geometry::get<0, 0>(box));
    }
};

// This might be implemented later on for other geometries too.
// Not dispatched yet.
template <typename Box>
inline typename coordinate_type<Box>::type get_max_size(Box const& box)
{
    return get_max_size_box<Box, dimension<Box>::value - 1>::apply(box);
}

} // namespace detail
#endif // DOXYGEN_NO_DETAIL


}} // namespace boost::geometry


#endif // BOOST_GEOMETRY_ALGORITHMS_DETAIL_GET_MAX_SIZE_HPP

/* get_max_size.hpp
P6pxZO3CTZEuK4ISwRbx7kH8NSFyObb6uOJHgMc2AjyYCVuyqHGKNGdWEr2J4qYaGpTbB3L6SOAQlexFDMuEByMtSr7pTmK+4GufjOzA6xXvce+2iSsUT5ltoSmVAh4wbMSnipaO9tq8fA1TtMDH5+iwTbom8FbdM86WiXwEokc3oMwRU/FoQgKYFcRziAlHF7fEoVfa/3hcUoUtKEjPipKKExHNVNdikHNGy3Dh5yH8i6nYNybT/HftUJ21mCBr06Xr3VguyjbhvIhhdLhPkVemUvYB8xpnxn+4td/mcFLvadUVu6GUcKBQFJuIjGTi+rj3ifx56uBf+YOns/N4No1+C9R3c4trbMmdvUPJquigtLKqmVvxAVi23jUfbxMcsa/Tm9YMqveHQwPeHbM6a7mcH7Oa9TEGbqRL/sOeCyN6OxgVsGLeLipF80BiulR63WPx6Sqa7jAEeypKy6nm8jXJqyoWyVghod5Wjx8NNWoqZhU9yMrDhBByhmtYK+EJuI0AJL6A/0tP6FUVS/494O3QD+WXmDhzEkZH9SG8QkQv139DqoRr6Xv68QRY9MxaAbHp6aTqaUUpWk45oo30D1xVMyWuamAnyQkl1oWyCosWT+NFdcbHrHL4QTm56sjvSXUaELc7whFYoBGdx6r94cSB6rvulYorrxiDxfdxRZUgov90UFr+YSNLqDtFwqBtV4fEli37IX8qt+slu38Rm1nSL7KBd6mZQCFDsP3Dc6Enfc0YYwlW7wNoFVAvea6L0mV7NUCjsoIm4LoaoRRX6ToSDkI4QHpHyGRgu7sEytwvWGlOzWplxRa6eAPUyg71we7V3MbwrWzrWMT8LhfXswGFDk9DLC9tGAXi8MDPFwS0bjuKnsNmbrjEAlbtbuvwlHK2d5bzVpnr73WOrMOe2DaytGxk3Qpx7vBQN07NbOfnGDm+VgWIeymvBPB9qayUcNWC2USKU+H6JaGmwv9B9zN9Y4szRH4bdce+e5ZqtjhOzLiUaFV9TxBzvAZJ6lZL9s2b4FM+xhsclFN276XsrZgA29+vo7xVPS5Veddwe+N1SCcZ0/1XURnA8XU2TYHDoi9mLxflyuyw5vTe08OSsLHaL/YPEFeymg1oTQ/BUSE4tXqKlzu/ASurmkIO9oRzoPcBgJ8ifs5huprc7nJDX/s4ge9HlbMGo8u4opU6upeN5D9AkWqaPXE3WiFXkq/eDkpL/xHhBKxEK81j+BCAKpSZ/TwFV7hCLjcg9wynXPXdaYncNdBTuuxqlq/pTLK30qKxOY9cPBYDBIb/tjycPkUQNPrvWvNBfYjQTEMeWvSYFZGHadLkTT3XMKeFIJL6Y+zZpqb7lsXtKom36B3DXqxIjhNYIu6QWOWOoQQCQ7nsTFT3e8LHPc0zx+jwN79QFvp0WLfTa8c9UbZpbkGT8b2IPUY26sAatWE8gdGJHbv3HIU6T+eo2dHGntj3hiZ4l1KCMcE18eF3xe7YqiZ85Y+ZKr4ouLWBBaKHTwdQSKsb4NqtoSRRTUdpXVxV9ca3NQb3q8DZxGDTBYz4GNnNQNzl/p1kmujjaod9wT5fv22qAxQZDRy8+SHeJKzEk2uxKCT1JyVQgbgVDaiub/fc/weLsPDfLT380VbVHURG7xxDyZwFGP3DIJHb8V7lJt2Gvibbt9HnsFUbr8f0SyRGX+rAbikK+4s5dw/AilrtPbrvC0/ezgjFPRMiVTJiS5kEsOSP8FxFZOqxeq5VNmQZIdCJf4UG0ldsX67UROLXOs8yBqr2wC5A/FiIvWVIqHOq2JO0eEgNsE8Y7TtaPfmVH5t7v08cw1lPJ16c0VTdCwBw2L7GlHE4ximmiY2U8ys4wr4VjpcvIq56IiWdg6l0JFhW9ZUy9cZ3Oa1hIU9uwdJF8G6JGd4XKOMcNvRmEwWnE0I2eW9vGOKy3n+F6bMpVPwDA/A1+5ZsnkCqnJHIZHGNrOp1ajUBqrCwYP7qsE9CwbnceOziIY9aQXLFL+68WJSLZR4kc6EYLFPoZyFabHrg0qHVdWIxR//5fSLr7K1C1pmNTjCsnOwpKb/DW/X06Zd9JJ6y0OiVMX/x9VgxA7v0ffbdbXoc9VNXpzfUBCvD8b316Hr7/KMPvHDem1mkhzJLXucYg+l64YeqEvzXnifEhWG+KHE9zSYDySuxgGWBQAtVRhXvuDK3XLVwo5/MGqvl/6z7ynhHUQ9AHzZ2+wJcndYDuLBexh+Baoa4+POu00QhC+4u+MtcWWJGD/Xp5onNZuYGQT+qjgFJB0SJJn6RkofQbORQ68njU3X9nQoNynNEgVgL/kv6ELSO/PP8QubXOXK4b6NaH6TWl3SJUi/GIH8oDQ5UNpHPunVZX46gNKDnQ/kgnC/gWTSH19A4tYRfoF5iQxMU5N7Dv5eJLmOHTcTPqjdsE3pB05eydbwRMQz5T6Ib4JHYu8oAwgHdxKivR15Ik/CpRNDMTL+IdxQ/QwsSxdI4cr0wWP1YswpOXUjLNOMNB2tZ88wq2ENN2jj18SuDu6pt/YIQncnp+d4yn4EROf/5e56EmQqFwwbnZzSsuLn4RiylA0+vE5k3VV0DtnJMRY90DWM7tBfzonZDFxICduc26rPZRPo1b7XhQjcR5juYaq5c3eTxU2Qv9V/qfw+FZRepQxeG4Q9+e6yF3QPTvZ6FCJH4XpawELexYQCRB0jjxTxpKqHldERpy81gLB5eCS7qVMygNJRLEKf2fOBEgNvNFkwEJ3Tb5E8hjSshHklR5D5fHbDggOAg/6pzdM9C0bKfBHnmJFLY0Q9jVhVs80wvZx5BJzxM40XFcfp4VYEjv1BPvGK8BiW2/adYLgCWcGISdOb6nhQF3cuwDl22NOnIksEA9rwhd9NiJ4R2gY8FxAQOYZKyYDS8t9LI+tCaSaMESOrjVPa/PL6H3cCiAl3BuXLq8ombY3KCVuYzVS/LfFObYE21c9l0bvG3VRcjRlTgajF1IpvpWuMXACw1ORXO8T80FRrAxgc7gJ47/W/1xUSjV86UxPG4CeuMPFRLj4uBXCU8fImSd9CkUpfUBhIenfYOpN3mPGYO6Hk5I51OnCvpXrNFkmMXbX81CBsI2u4SmRdRneXouJO9EHO2ExQs1ljljaQBxPhFYasxmP5DyNcIiK4Aq6tIeHROMaA0j/7pzCswbsfXmYHkxJ412b7HISx8aYRAaUr0WHBGVav/pHYPq0c/y0sL9XLKLp23i8QAOuMHNHdM4R56Z+sLEvkcv/knwc7jTyegF/vZZQUHm93d7+uEGK2WifaB7DaGM3LeV/FuXZq452nXDA4V1bIyqxvkIqOekb4p31aucMX+awncqpDVSby6rP95Xwy+ae4WRcoWvmFwDv8FpZfRMTbwcxRrfGK4dTEcOyecOnjDrxVSZ5gN7E7wZm/DSMC2fPxRqV1QCbO4UZnnUy14UGI6OvmF78qJhHZQPx0Sfv+P+Aj8IP8Vfknzv7xw8QaIN7mMiF9CuJN0NLgsv3VJb96P0fDZzsTbZ7cyqQO+fSwaKun/epHdwYGW0UL1mk29uj5rMy1KqtqHfDqhf6gPkleLB3NdDYdegfr9+HN+332dj973dokeurB8J1FTF4KFraqq5J9+5UILPX4BKb6lLnlSaGT/DQ7il90Y62NdKgBMn00W9SMWlHLhrTFHhE/rBWxpktjpY+0jNnBzHugMO7fMTaVxWyE/ny9CYrNzrMcXtrDsn5brMhXRUdZgwR43PATt5Qyc+0QKCzEknetKh7H1CrU5rI3eJ/ZLrwBdlE8CZmaigMFgWFsRCBo4WQ3mHhm/qq9lK4pa9tdCenSBjNJ/LeGNMcbjnTT34r0ORlGN+NcSwqlNWsnXzqKazw5XtRoi041cSZ5p0DUWv3l82shsjFtLcHGkU5gOcMJhizlF1W8Vi4BW5NbOink4lhnDznlN8JM1srbWFApc3MMfl9/DL/qnOl7VkMwsmhVK/GNyHkz4h3s7Ph9ee5QoH4/2A3GTv/Kvz6gqSnCJQTRvRPbkF+dML8jXQiPGTX7SAUxmhunCUCpslWgdoZaupj54+4q2s1EFvZG/w8wh90C18tOpso+Sy4nCrCDvvxtQFCC8VPduf58005xNEkRUt8ARfriSqeEklWCzOHew7ztN41rNbSrxqrgwWy6o14Lzx3n2AWwXpy0ucm6flawj0cshLxT7ingJ3u1CTfGU6dDli5qDi50PsKULXI/oFFqBY+LKI9zqBi5SV7k8OzMfXXtntn9HE7hnraG/j+QdLJ6IRTspiFV0rsmA7ZUOauFbncfmqDdP9641vUH8vjRiZ7TjbpqM4G8u9bVJW5gz89YAoePY9EEloH6Wcrg1+qGVm1WfMivfrajYML7jHb7t8x2/+kRbejCvcV91EDemg94hzr/ZGCChsNG6aOZsJSmyF2I+0OgEDFq2qpcMYSv/eTq5S4JX4zb0i3ZvfNSmd3l9okWD2sK/Bqf/AnbGxt+fqPgMT+t1o4ZmBNbXX5JCZhh5zsB2t0M2ahKwqKhLwgbjriIfuhYthMTccdj2668crubQf7wH0EG+ibKWdX6jp19KMZPpW4rgbzZ31jK4v4lBlekke7GzvZ+jw4HiHKToxs70QY5Py9GkYZt36es0xPZF3oRGSbAE+2+kfO+5RZz55nXhTNMlaCWT/DSLjNiX96XQRN9FNfKsNtEKjiyLHiNYNRUPlXIpEvGPdvHiPMCG8/O5UOZ03+sqBipI6N2esNEQsrFiNusWEoluDJLq5IpH6/g8VjvGO4paHioZSUoOUfmy3cWNq1byprMEvCke4fzTGX+QsC3W4/LTgIQVM0ADMyXd3TWOGCIfBLfkY/5n4PsfTG+6IbreP/9+4GwIwdX6PER3PqL/gNZfxnXnDu/P/hOnpFpsC3MdpH/vxxcni9RlGQbS8N0g/mg1BH2WezLmX0I371afnJDxOACfVMQdUC/u3FdLVldF0UVhmtSNZTtWpJnsSE2gbrZol7HEJUA5jKe8QKbf8fbF1xNzR7jTbUqPWc5jccCh06G3Yct7rtcz8M4y9VJCKzv/OAKMD2zdruXJCXPF1Ms1bOKNDcnCCUzgBev8iXqW0MhpqhzY0Ad4UvBtSAWtri4/0PsicjJzA9JSGt4S2YigdKLHC+0HGufybY+ptZOmz+h7m09CGLNkXv/6IogQQKH9h0GnxpBKs6B5rPrmhX4G+k3u34iCKB0exE+Q/D2x1JCsjkrcP/6bTq4FYUywb0ZIUHeEV3eVLvfcsF/il21xKVcUhBq2ESNvDYmsmhgc2ROtoSeBqou8l/RgO570Lt3CkFrk92HtwTsPoRHRlMfN9Nbk7QZDt+ASPT/fHVfEIhEHeFALxB8ZGwOCfFs8iOk4n+HBNZc4fQ1GUhBycbHlAy71oMeMDl1cforGmH7gZ16bIunRIs4yo8pY+dacnfTpK3CTkCN24vls2qvWCp0OU4VgeDkyTY9/36xGj8R1wn3NPbjKBp/XPTIac69NjroOTT7YFoBDdThZt7Iv07stP7ix0lx88FlH4iGqtmEBzwjqaJh+ZDaxI3BP1sfjzCFXq6FKcd2Z/NFDJXfV2WywW19FYrCpDy/uQkCyoa6KQLKh8aIoaV8mGdPYTPpsp4SY66IDmxtCco2fc/Zc6azIzeWXebuOBk9w9k+zGhd1vMoeYio1LBdiWsrNnQLhdz5/FtuabKTsXge3qa8i2nU2EBKz8q5V2qCVoPV1RO7tkGyBQLGRYNpdPuiIOZtZhzbcezWgeT3NYtCSA9zbe8uDW48yhyoDdnZZws3lwbD6nmSqLEQPiJ1ANDzMsqptCjcHjF8ITX5mxV9aua/6SrZTFQJjQ6VdKXn/JEwscRPF94sGWjjaaUjrbi3zYoCtAsoxf9WWwf37v2e3NXotk3ugt3z0b9qGtmlBvpW+xrXKCRdQkjxmv7wJooqtyo6PpQkflqlC0wu1XgN6dJhNuoNbVSTPRJE4Z8bhA5MamygkwOtOY8GUQtF2T0XJfrunqZXv8IKXPCHH5zkMMqr7mjEErhoax25Q8i0TRlsok7vNH5jkmCFlaZVSBINtJr79pWwrXye3dQpUDSip40D7WFJZrqYDOymo+xfjrm2rlTWotpwaBm6G0MvWSBHI4M2m8YDV0SkLklNTPIHZRXRqciBlK2U80CfS8mQi+bqjoRIs3EwFajg+DxxD9SRfBKZJbe73v/o6NLw7iak3uBrxhzXwBNM5Errv9mZLGMOGGjbWasIHejtsuGZf7PRsOTu01aoShhO9G43B4TIEolQxqIfZP5h6TZTaCGGc6oiIB2XNu7zNHJwxGIQJY11yqig2TWKClv+ozLG6FR+q6o28duARvfCgzgTxlsKjxhl3argzl6zRk9Mb01DjNfW0QTKSk6vdVnG1ciaEmyur0doxhcDLucg5HFBLfn9SFl0e3BDh30VxpIiFgIXFws9eg7AmFACnSXRvMvThl4Jg2j8hAXTmDwSqMbcCD+d4Qtyrt7jIEdlLHz1UUa6Nqk+qvFEOrKV1GtF+VZyQyafXb9eF59doV9rlXbxupuZepQs6ZBaeLBfeFRkuPKn8H66FKbCJ0el30D27e3YHdu5QG9Pj9zyjlIzx+ADVHDc01IZijdnzEV/LjXs9puu3XsDvzrlsm27eGGOXwKh9vl+nraBHCVXNRBXC3xbbfI3hBmTartMlt/pVUhSpo1uk99z+L7qio10GmZ+F6CRf6Edb2fFen4yv2fCvy/2BSaUHupwkPhMvmAZor29MnVPxpFHlHkTFxMNWbYOvzQsa9F8T6zXaK33W4FYNxWZCBBDTXMwZcPEyFDiFD5QeHMk6j8aajGEhWJcprmfmY84h2bHBlHYEN5DDvD5/VviCxoUiE5uy9DE5g/RrrHPjqilun5CHD4nvxjAjKcJ1wiSOzPoSmuxe9yfEn5OjT+aXsTQECsu9zEJQoQjfDJpJIRAkM77+XBL07OFDE5lgp7EEzvHf2cAjy0obwxtBE8LbzuFrBfVykp1ivAQUt717LrpA37kAjElmW0JCjgf64IJucbRjio6t7gRalW5654BFQEZBU7zfUQfyXqROlGvw6VCZSvUxa7G+BErfxFUf7NjGkWZRwpB3yN8HL4bKJGF3zNSIVCZn8WHMyKhE6fIlSvxajK8jTHJ7sIt5TcNecK9lFxdM+riDopZPEk4PH0VLL1FfFQWQYug5942h3Jx+WpKqhshcUY2kFzNpRD5ViC1IKPgqyKuMeH0lZUNuTyb9AokDIp4fGKtBdL8F27n4x+mDOF8jx3yCJvghPg/JVrxhW9c3wMxemR9FnJERTCS8eYzRZrNcXQ6/79/fX8CS//4D+gP8B+QP6B+wP+B/IP5A/oH6A/0H5g/sH7g/8H8Q/iD+QfqD/AflD+oftD/ofzD+YP7B+oP9B+cP7h+8P/h/CP4Q/iH6Q/yH5A/pH7I/5H8o/lD+ofpD/YfmD+0fuj/0fxj+MP5h+sP8h+UP6x+2P+x/OP5w/uH6w/2H5w/vH74//H8E/gj+Efoj/Efkj+gfsT/ifyT+SP6R+iP9R+aP7B+5P/J/FP4o/lH6o/xH5Y/qH7U/6n80/mj+0fqj/Ufnj+4fvT///uj/
*/