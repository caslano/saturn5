// Boost.Geometry (aka GGL, Generic Geometry Library)

// Copyright (c) 2007-2014 Barend Gehrels, Amsterdam, the Netherlands.
// Copyright (c) 2008-2014 Bruno Lalande, Paris, France.
// Copyright (c) 2009-2014 Mateusz Loskot, London, UK.
// Copyright (c) 2013-2014 Adam Wulkiewicz, Lodz, Poland

// This file was modified by Oracle on 2013-2020.
// Modifications copyright (c) 2013-2020, Oracle and/or its affiliates.

// Contributed and/or modified by Adam Wulkiewicz, on behalf of Oracle
// Contributed and/or modified by Menelaos Karavelas, on behalf of Oracle

// Parts of Boost.Geometry are redesigned from Geodan's Geographic Library
// (geolib/GGL), copyright (c) 1995-2010 Geodan, Amsterdam, the Netherlands.

// Use, modification and distribution is subject to the Boost Software License,
// Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_GEOMETRY_ALGORITHMS_DETAIL_EQUALS_POINT_POINT_HPP
#define BOOST_GEOMETRY_ALGORITHMS_DETAIL_EQUALS_POINT_POINT_HPP


#include <type_traits>

#include <boost/geometry/strategies/detail.hpp>


namespace boost { namespace geometry
{

#ifndef DOXYGEN_NO_DETAIL
namespace detail { namespace equals
{

/*!
    \brief Internal utility function to detect of points are disjoint
    \note To avoid circular references
 */
template
<
    typename Point1, typename Point2, typename Strategy,
    std::enable_if_t<strategies::detail::is_umbrella_strategy<Strategy>::value, int> = 0
>
inline bool equals_point_point(Point1 const& point1, Point2 const& point2,
                               Strategy const& strategy)
{
    typedef decltype(strategy.relate(point1, point2)) strategy_type;
    return strategy_type::apply(point1, point2);
}

template
<
    typename Point1, typename Point2, typename Strategy,
    std::enable_if_t<! strategies::detail::is_umbrella_strategy<Strategy>::value, int> = 0
>
inline bool equals_point_point(Point1 const& point1, Point2 const& point2,
                               Strategy const& )
{
    return Strategy::apply(point1, point2);
}

}} // namespace detail::equals
#endif // DOXYGEN_NO_DETAIL

}} // namespace boost::geometry

#endif // BOOST_GEOMETRY_ALGORITHMS_DETAIL_EQUALS_POINT_POINT_HPP

/* point_point.hpp
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
*/