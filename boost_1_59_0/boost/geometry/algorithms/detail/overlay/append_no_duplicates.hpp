// Boost.Geometry (aka GGL, Generic Geometry Library)

// Copyright (c) 2007-2012 Barend Gehrels, Amsterdam, the Netherlands.

// This file was modified by Oracle on 2018-2020.
// Modifications copyright (c) 2018-2020 Oracle and/or its affiliates.

// Contributed and/or modified by Adam Wulkiewicz, on behalf of Oracle

// Use, modification and distribution is subject to the Boost Software License,
// Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_GEOMETRY_ALGORITHMS_DETAIL_OVERLAY_APPEND_NO_DUPLICATES_HPP
#define BOOST_GEOMETRY_ALGORITHMS_DETAIL_OVERLAY_APPEND_NO_DUPLICATES_HPP


#include <boost/geometry/algorithms/append.hpp>
#include <boost/geometry/algorithms/detail/equals/point_point.hpp>

#include <boost/geometry/util/range.hpp>


namespace boost { namespace geometry
{


#ifndef DOXYGEN_NO_DETAIL
namespace detail { namespace overlay
{

template <typename Range, typename Point>
inline void append_with_duplicates(Range& range, Point const& point)
{
#ifdef BOOST_GEOMETRY_DEBUG_INTERSECTION
    std::cout << "  add: ("
        << geometry::get<0>(point) << ", " << geometry::get<1>(point) << ")"
        << std::endl;
#endif
    geometry::append(range, point);
}

template <typename Range, typename Point, typename Strategy>
inline void append_no_duplicates(Range& range, Point const& point,
                                 Strategy const& strategy)
{
    if ( boost::empty(range)
      || ! geometry::detail::equals::equals_point_point(geometry::range::back(range),
                                                        point,
                                                        strategy) )
    {
#ifdef BOOST_GEOMETRY_DEBUG_INTERSECTION
        std::cout << "  add: ("
            << geometry::get<0>(point) << ", " << geometry::get<1>(point) << ")"
            << std::endl;
#endif
        geometry::append(range, point);
    }
}


}} // namespace detail::overlay
#endif // DOXYGEN_NO_DETAIL



}} // namespace boost::geometry


#endif // BOOST_GEOMETRY_ALGORITHMS_DETAIL_OVERLAY_APPEND_NO_DUPLICATES_HPP

/* append_no_duplicates.hpp
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
*/