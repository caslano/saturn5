// Boost.Geometry (aka GGL, Generic Geometry Library)

// Copyright (c) 2017-2017 Barend Gehrels, Amsterdam, the Netherlands.

// This file was modified by Oracle on 2020.
// Modifications copyright (c) 2020 Oracle and/or its affiliates.
// Contributed and/or modified by Adam Wulkiewicz, on behalf of Oracle

// Use, modification and distribution is subject to the Boost Software License,
// Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_GEOMETRY_ALGORITHMS_DETAIL_OVERLAY_NEEDS_SELF_TURNS_HPP
#define BOOST_GEOMETRY_ALGORITHMS_DETAIL_OVERLAY_NEEDS_SELF_TURNS_HPP

#include <boost/range/begin.hpp>
#include <boost/range/size.hpp>

#include <boost/geometry/core/tags.hpp>
#include <boost/geometry/algorithms/num_interior_rings.hpp>


namespace boost { namespace geometry
{


#ifndef DOXYGEN_NO_DETAIL
namespace detail { namespace overlay
{

template
<
    typename Geometry,
    typename Tag = typename tag<Geometry>::type
>
struct needs_self_turns
{
};

template <typename Geometry>
struct needs_self_turns<Geometry, box_tag>
{
    static inline bool apply(Geometry const&)
    {
        return false;
    }
};

template <typename Geometry>
struct needs_self_turns<Geometry, ring_tag>
{
    static inline bool apply(Geometry const&)
    {
        return false;
    }
};

template <typename Geometry>
struct needs_self_turns<Geometry, polygon_tag>
{
    static inline bool apply(Geometry const& polygon)
    {
        return geometry::num_interior_rings(polygon) > 0;
    }
};

template <typename Geometry>
struct needs_self_turns<Geometry, multi_polygon_tag>
{
    static inline bool apply(Geometry const& multi)
    {
        typedef typename boost::range_value<Geometry>::type polygon_type;
        std::size_t const n = boost::size(multi);
        return n > 1 || (n == 1
             && needs_self_turns<polygon_type>
                         ::apply(*boost::begin(multi)));
    }
};


}} // namespace detail::overlay
#endif // DOXYGEN_NO_DETAIL


}} // namespace boost::geometry


#endif // BOOST_GEOMETRY_ALGORITHMS_DETAIL_OVERLAY_NEEDS_SELF_TURNS_HPP

/* needs_self_turns.hpp
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
*/