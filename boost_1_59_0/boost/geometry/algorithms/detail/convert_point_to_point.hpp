// Boost.Geometry (aka GGL, Generic Geometry Library)

// Copyright (c) 2007-2012 Barend Gehrels, Amsterdam, the Netherlands.
// Copyright (c) 2008-2012 Bruno Lalande, Paris, France.
// Copyright (c) 2009-2012 Mateusz Loskot, London, UK.

// Parts of Boost.Geometry are redesigned from Geodan's Geographic Library
// (geolib/GGL), copyright (c) 1995-2010 Geodan, Amsterdam, the Netherlands.

// Use, modification and distribution is subject to the Boost Software License,
// Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_GEOMETRY_ALGORITHMS_DETAIL_CONVERT_POINT_TO_POINT_HPP
#define BOOST_GEOMETRY_ALGORITHMS_DETAIL_CONVERT_POINT_TO_POINT_HPP

// Note: extracted from "convert.hpp" to avoid circular references convert/append

#include <cstddef>

#include <boost/numeric/conversion/cast.hpp>
#include <boost/geometry/core/access.hpp>
#include <boost/geometry/core/coordinate_dimension.hpp>
#include <boost/geometry/core/coordinate_type.hpp>


namespace boost { namespace geometry
{

#ifndef DOXYGEN_NO_DETAIL
namespace detail { namespace conversion
{


template <typename Source, typename Destination, std::size_t Dimension, std::size_t DimensionCount>
struct point_to_point
{
    static inline void apply(Source const& source, Destination& destination)
    {
        typedef typename coordinate_type<Destination>::type coordinate_type;

        set<Dimension>(destination, boost::numeric_cast<coordinate_type>(get<Dimension>(source)));
        point_to_point<Source, Destination, Dimension + 1, DimensionCount>::apply(source, destination);
    }
};

template <typename Source, typename Destination, std::size_t DimensionCount>
struct point_to_point<Source, Destination, DimensionCount, DimensionCount>
{
    static inline void apply(Source const& , Destination& )
    {}
};


template <typename Source, typename Destination>
inline void convert_point_to_point(Source const& source, Destination& destination)
{
    point_to_point<Source, Destination, 0, dimension<Destination>::value>::apply(source, destination);
}



}} // namespace detail::conversion
#endif // DOXYGEN_NO_DETAIL

}} // namespace boost::geometry

#endif // BOOST_GEOMETRY_ALGORITHMS_DETAIL_CONVERT_POINT_TO_POINT_HPP

/* convert_point_to_point.hpp
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
*/