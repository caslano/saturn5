// Boost.Geometry (aka GGL, Generic Geometry Library)

// Copyright (c) 2007-2014 Barend Gehrels, Amsterdam, the Netherlands.
// Copyright (c) 2008-2014 Bruno Lalande, Paris, France.
// Copyright (c) 2009-2014 Mateusz Loskot, London, UK.

// This file was modified by Oracle on 2013-2017.
// Modifications copyright (c) 2013-2017, Oracle and/or its affiliates.

// Contributed and/or modified by Menelaos Karavelas, on behalf of Oracle
// Contributed and/or modified by Adam Wulkiewicz, on behalf of Oracle

// Parts of Boost.Geometry are redesigned from Geodan's Geographic Library
// (geolib/GGL), copyright (c) 1995-2010 Geodan, Amsterdam, the Netherlands.

// Use, modification and distribution is subject to the Boost Software License,
// Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_GEOMETRY_ALGORITHMS_DETAIL_INTERSECTS_INTERFACE_HPP
#define BOOST_GEOMETRY_ALGORITHMS_DETAIL_INTERSECTS_INTERFACE_HPP


#include <boost/geometry/geometries/concepts/check.hpp>

#include <boost/geometry/algorithms/detail/disjoint/interface.hpp>


namespace boost { namespace geometry
{

#ifndef DOXYGEN_NO_DETAIL
namespace detail { namespace intersects
{

// Forward declaration
template <typename Geometry>
struct self_intersects;

}} // namespace detail::intersects
#endif // DOXYGEN_NO_DETAIL


/*!
\brief \brief_check{has at least one intersection (crossing or self-tangency)}
\note This function can be called for one geometry (self-intersection) and
    also for two geometries (intersection)
\ingroup intersects
\tparam Geometry \tparam_geometry
\param geometry \param_geometry
\return \return_check{is self-intersecting}

\qbk{distinguish,one geometry}
\qbk{[def __one_parameter__]}
\qbk{[include reference/algorithms/intersects.qbk]}
*/
template <typename Geometry>
inline bool intersects(Geometry const& geometry)
{
    return detail::intersects::self_intersects<Geometry>::apply(geometry);
}


/*!
\brief \brief_check2{have at least one intersection}
\ingroup intersects
\tparam Geometry1 \tparam_geometry
\tparam Geometry2 \tparam_geometry
\tparam Strategy \tparam_strategy{Intersects}
\param geometry1 \param_geometry
\param geometry2 \param_geometry
\param strategy \param_strategy{intersects}
\return \return_check2{intersect each other}

\qbk{distinguish,with strategy}
\qbk{[include reference/algorithms/intersects.qbk]}
 */
template <typename Geometry1, typename Geometry2, typename Strategy>
inline bool intersects(Geometry1 const& geometry1,
                       Geometry2 const& geometry2,
                       Strategy const& strategy)
{
    concepts::check<Geometry1 const>();
    concepts::check<Geometry2 const>();

    return ! geometry::disjoint(geometry1, geometry2, strategy);
}


/*!
\brief \brief_check2{have at least one intersection}
\ingroup intersects
\tparam Geometry1 \tparam_geometry
\tparam Geometry2 \tparam_geometry
\param geometry1 \param_geometry
\param geometry2 \param_geometry
\return \return_check2{intersect each other}

\qbk{distinguish,two geometries}
\qbk{[include reference/algorithms/intersects.qbk]}
 */
template <typename Geometry1, typename Geometry2>
inline bool intersects(Geometry1 const& geometry1, Geometry2 const& geometry2)
{
    concepts::check<Geometry1 const>();
    concepts::check<Geometry2 const>();

    return ! geometry::disjoint(geometry1, geometry2);
}



}} // namespace boost::geometry

#endif // BOOST_GEOMETRY_ALGORITHMS_DETAIL_INTERSECTS_INTERFACE_HPP

/* interface.hpp
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
*/