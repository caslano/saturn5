// Boost.Geometry (aka GGL, Generic Geometry Library)

// Copyright (c) 2014-2021, Oracle and/or its affiliates.

// Contributed and/or modified by Menelaos Karavelas, on behalf of Oracle
// Contributed and/or modified by Adam Wulkiewicz, on behalf of Oracle

// Licensed under the Boost Software License version 1.0.
// http://www.boost.org/users/license.html

#ifndef BOOST_GEOMETRY_ALGORITHMS_DETAIL_IS_SIMPLE_MULTIPOINT_HPP
#define BOOST_GEOMETRY_ALGORITHMS_DETAIL_IS_SIMPLE_MULTIPOINT_HPP

#include <algorithm>

#include <boost/range/begin.hpp>
#include <boost/range/empty.hpp>
#include <boost/range/end.hpp>

#include <boost/geometry/core/closure.hpp>
#include <boost/geometry/core/tags.hpp>
#include <boost/geometry/core/tags.hpp>

#include <boost/geometry/policies/compare.hpp>

#include <boost/geometry/algorithms/detail/is_valid/has_duplicates.hpp>
#include <boost/geometry/algorithms/detail/is_simple/failure_policy.hpp>

#include <boost/geometry/algorithms/dispatch/is_simple.hpp>


namespace boost { namespace geometry
{


#ifndef DOXYGEN_NO_DETAIL
namespace detail { namespace is_simple
{


template <typename MultiPoint>
struct is_simple_multipoint
{
    template <typename Strategy>
    static inline bool apply(MultiPoint const& multipoint, Strategy const& strategy)
    {
        typedef typename Strategy::cs_tag cs_tag;
        typedef geometry::less
            <
                typename point_type<MultiPoint>::type,
                -1,
                cs_tag
            > less_type;

        if (boost::empty(multipoint))
        {
            return true;
        }

        MultiPoint mp(multipoint);
        std::sort(boost::begin(mp), boost::end(mp), less_type());

        simplicity_failure_policy policy;
        return ! detail::is_valid::has_duplicates<MultiPoint>::apply(mp, policy, strategy);
    }
};


}} // namespace detail::is_simple
#endif // DOXYGEN_NO_DETAIL




#ifndef DOXYGEN_NO_DISPATCH
namespace dispatch
{


// A MultiPoint is simple if no two Points in the MultiPoint are equal
// (have identical coordinate values in X and Y)
//
// Reference: OGC 06-103r4 (6.1.5)
template <typename MultiPoint>
struct is_simple<MultiPoint, multi_point_tag>
    : detail::is_simple::is_simple_multipoint<MultiPoint>
{};


} // namespace dispatch
#endif // DOXYGEN_NO_DISPATCH


}} // namespace boost::geometry


#endif // BOOST_GEOMETRY_ALGORITHMS_DETAIL_IS_SIMPLE_MULTIPOINT_HPP

/* multipoint.hpp
s0visP4FlhF87j5Ahtnbtv1tX5xsPwi1H0UXbBr3k32ZTqRzwYhaXpvWs6HpzqJ0S0God41BIHGFvVRqOT4xIWhHf2hGfxg5TJ/5PSxYJgDFov6SChbi8qyr+eJiXEXx5do3XTFs1emxr5/tzU3HRLPqgcCtav+o20saoxeCfR6N+uvhlOgGgzFtfDembQGeaWjmBLSXjL5/xM0QwvZ8NEKObGEK4S47HPTQpTq7hYq/pM0VfVBDi1tjlXjaATNeKdhXISZd5FV/2Z2UwWZYD+ROhxjdprFqlBHfYK7S32t/WF99TIusv1+MOnHIBIDPTqMdKmNx3lDBoVLD4pKDsTFtCK0PcDsNcAejPNZWKLzfE/iSA+ca1pRZvFkiZ/IvY3WkI7nQzGIOddpGWs6wnJBidyagb7MgTnTWANw4otbe6xK+VDbzk7ze6Bbf1gM/vzh4t/YMpe8YWtJiycCFR5kxnODNDN7rEpC2mFOCt+rflt7BRBDOxU0NGkFkZmwtPMrj3BfZ4zdM8Yg+3mCvb0uyxwDFVDjpNNjBJVf8wPepRZQvC/73j5ZqH2h35aXmW2lTcTCMdAJITJZ/6uBYsJSu/BjgzH9Io0nqkRCZ8rk3CmIYmuuziIQkgNglJh2YEPS61Wn2gS+6n1oeBUlUJZHyIMNBHxVhA2meHS9ihTbwmYMR2X80rW6Y4ohXv18qc6VNp434lnW9rp50RyvpYkQ3Dzc+g0o/guW+rT0pd+cMjBbjWWqmdaIaMD4HbqCy9NmRbyj18ejF0XyTuq3DPlTuSrU++xvTmbsUEy3po/xzphsB7MZ2P++rAG+IwcJW2eLtkN0AoOP+yFeWhdoNCCadRzNTsygct3I7bmIIdIYXD+RqJ/XTtQUs2BUZUGjcgoKL1soTZKbDsgGe8+wFTyrRFUZSxNhl7MOAZz0Nle1Ghrf3VSIw4CQxBrBERgDOIE4M9gkY/dvnJCS9zxBAiVKmRkHRIdWarFqUfGLKyTfCwy1h6oXuwUYsU9d/w8ecDvgIS/IAyLME6K8J3JdjuKBxoB4y9XCHyAGXR6x+cGJm0NHkZTAI7g5+6BCtaismqx2WSywbSe4ZhBu9YHI9lEeNRdzBsN507h+WAcWVnRRtYHaUvCWzIEXv/3NWsF/Fs5Ln5yRUf20+zihlaIda6QrpS78ccIlcx8d+YV6vAQ5GPUsP3IozmzQ8JrjBPqYIXoTibtjETo6RqlIGmSFMSYHL7qC5Ah0FWgp+glXvlIQuqql1ExxkV34QMUO+2oBtoE2N0co8oQZa2C7FmDBKJ0mKVIOdttuCTZ8+YS/L6NfepV5JkzqUCcsrfZs1t2bBSTVQuIByi2MpbtSpz+e1l5dnibcA9sDxokvMuFdQvvgTlw61p6FR7wgLhwlHAI2KXT4PNfAW0vyGQ66fp4+gkQLufMwGcdebiVPNNensCn4763ABcqWNnr1vni3c7x2bijUNQLmbchrMNIi1zPih6e9mGxRjzYffh7b71fFiAGKLvmmBWOnAxtkjvWHoyNj52knM6bXrDDThms1aFy3oRV+AyLCGRa5qVq9bNdI6AGCs3McbsduRDuDb0wY8MFbZKpV2RKF8avIHoFduqK1utYUR3Ap9yDZJ+aXYQXkxL5Tu88Ci+8RPTP8y12hrcGF4MrdJX1TzkGK53QB4Gogx44oqbM1N6dGK30M8E+t2/u/K7VOJT2zqDK9cVkDvz2aejYIVtFPDP/5HL4mwMVO9QqyjiqWDwaMV2C4L50J5biR5wSblF8wCGYMp2BBA9myUQ3QG1cRBNkJcpyiiE32HFwh1OpMbAwg72e+avzPZPGHyITKCJgtFPQKR9jMZg5E73x6GGvd8cjqp/PXkxcji+zsKMBpecGcJivr093fF7RgUGLfA6U5Gkt/b85bcHV5DROmSSC06AM8QbMecr1XD61DhjeOElGib8gSruSXPofv+hSZb5YPyK1mSGJaR0fV/q51ykRP1Yy9hW04x6kUoyMocMvbX6Xh8MbOtELJ+jATaAr0/MYbJaGYUxDzT5ByYCRtBuEwbZEHL9ow4U67p8d+oAN3ZBBtL2RgG47yS0iHZMucJ0bFxRy6MCSDCEZjzfIGPeTTM9nMs00TzsTlb93IZiRoowaeZ+3YoW/Q0AUvvLiSMGIeK2MWBw9lKbhvL6BBgxxhN1UGIwZnY20x08lzSSXFOcpiKxn6mBSGkJSwcnFpAZnwbB3t1kskDXowNBY9zWJkUABZX5AjmCcv7QJFQbAKpIAqme0nv/Pxwou173BbvzQEoSLhSmjRWWdepU3XxYGoIwq4xuIYJXWFU2thTdp0dyNaGwksGcf11LlV7USxmDLrHwgNV1DiV3t6AIJk389yb90gFWh4qZMw6g4Ru2wEWLIn3mmjvwQ4xyXmAgEMPti5l9Mmvt7wJPge+LKSx09/2kUVkwDE/qEvpr6BUMwMOFuYFOGWL6vsIMSoQadQ3H3sKjzr9AOtSiY56bugGbxVxLs2fPZks8Tb3l9X2VBc7vsEeYWH+THxyOHY5AbsV9kAVRz4Ja0Jhy6R/U/UGdX2PPhe0PRRlVIBhwGmPBfCRqTa8zEiM5oCPwj2ITDPxnlgak5sSreMlmtMBsougFXHRRVwkRN/Dc/uUIaF8VRQ64GBuWYH8QPN5X5yKdeOUFXYhSMVpmv2Tq5a/o22lPJiNb7LMn31R3itHn4VKY0ygoF1iIsRHHPjyMFu+RRFNJVmclFKYij6uXilPT7aEVyCvznQ2qyyxqgzEdMA7pUw4+R8AKoDVfzsoS/9lB/llubL0Xx55WuC2thsM2TR5AjclidArzXHr4PS1vsLK+usie3Wpkpksd9k0TLxg8FYfCR2QWySPJZVoRjUWnQoGsbo0fnGJ+1j8hLJKi/JnTjVX2OSSbW0oB2D6vdimuJVKvYZV2PIvh4PQ6S10KVmUYYf/7NM0E8xrThAwzcmKkNXNRZ6tsNwyBrk5LLWH+W1EXbVKyzvwo9zAXyaKFiZUVblUma8YYInbaKa9IaOrcLpZEFk7Vg3CwdmN/bUX5eVVLpMykb/xXSpVvVd/ikLa+2lwFp07aXiWLrMU8SsAfeKib+N242i0G/Rqs4m0m7O8pN20X6rGYLTOvVCQDKdRVEgC6S5MLWQRon4erveyhmvQaCvKC9a3UcjiKElWzJiVqM7tFAVvFkpVhpOWSVZp02eTd258zvcLmuJKKtiGbDTsgsLAEizZVuyuWgxbAM0IuTuGRehqveqdW5Lck3DnJfT7WNc7Vb+PnFZSNknkt9zE+r8quOHXxZ83xJ8tQmjHe8EKdkQfZ79a6BmsdsMoR2Zh/vB2dIivRK600mSkPSIBAxd/9ThkbUe8upqoeAEQrUrh7KEVBrXCcsCaSmWMaM5LqdcUW3WarOExdxq0WWsCjJxGhYkEqMjWiTITiHiePkJy4JV8B5T0G4CjjlnMqxRRtE/W+JJOF3m+A9FVdcJtYrOjEaPUI7RvkdoVRN9eJ0ye2EG5exlg98LNjtZca4L5XZe0qzH1QELJgMyhYd5DAsIXvxk38bF+HnyTsjo0fUVIz003YsSnl3xWFQxrL49Z0fJN2JJUxZOyJQU9+0o97UGWXhpdR9k3SQ0f5sufPYey/kiWXk0Sc1A+L0gDSnuTZdHPQiW/sAZI+DZxvk6K7HyBxOCv4qkEx5FYcDw7gMGSarfJEhssHWbkv4JWAx+2CVzBh2FRNLI4x+bg2YhlBWGhpuQfIFmLvD2tt0qRNjpzAMTiZwQTt0E0RL+KyXhSoLH1CVkZpUy4vy1xGKdIAt/BjDBYv4nfN3W0sYSO1r64mBL+k9zpvx+8QmJFePs2sR6vkz+aMMq+Ia89Y1DfpIXw6HO+cC0+ffqfXQsg+RFYgnTA+gDRyoCITK0SLVHxDNvqLHFxqbxIh81gKIwVivM8k/pV+JNrUgv5w9UppLOX7KOWPv67T4h0dpJ4RcY3LPrBWsgeuobsoYIdyRP1Og2IXp6kXlh/McEmoCIi2awtoVq9VUBwfxJUK+Q10kUSwjsafxKHcNzMWSmmMJWyK6g3C6vSF5ElgYYU0rqEEkKBIMeELWmKVhQUOI8OmKi6RSpk6YIDS6AeJUPaQegnbEsvCLTclEBL4kjL4fAqp+q1KYD/TKgicwTus8IwuYGg9EwuOt7CaWoGapmBhCdL0Y+mJYBZmGRpuT3FSDGIkCzl4/4r4SsgzEM8DS6Ri/f13h2kPlRv9NKWVkbDIMqJIzSlkcklSCMSTzkaA2I9pwDyzW6w0YbHNFh17uwGtEHl6I9YyWnjP7ZaTNL4RqqouFLwdfHnDfGHKHb4jHottFDjaNpgMk4FqquGqQqgzZ61gjVemLqn5Pon7aJKZmNBK5UjRN0Nip4dxCvXEbCL3YpoHK6ENdTsHGJmIClrhGlXie6IY4ToHE7lyTgAQOka5MQXCqJiPBRZNc2kXibldK0wzOLyBwKlFsEEAiaCQCePH1RSt/fy1685rffgCYoZV543qDRqV9E2YExqQ/KkgGGGieGkLAdAgJnegKm0pvhOKTZzOU1sNjwE42O7AIFnE5buEEQ4B1mtZwTdFjYTotbtAk+3Jc/EAlOwlBNPSeMHCM0ejLgNiGlzp3neB/HMCXjrA7pbhxAvgJfh4GNFtvx0VGKVu4OOxhI87N5xNM0zE5KL4xG7a7fiAQzoT6EhIDd5nxYYnpVELr6RZMu4N9WWMaXFIBjenwnisCuJYEyU136aIBhNL//TBGObIBFt4s8O8WcQvGIV/zzBKHaHiVrUAYJRpew6TYgrsLkR676ITpyK0wlEh9how2GCsp/BuMsB/8iVQlxIobyPJ4Hy8iTTxmXnBhELI5J+7E8xLFoT0nnj7VSyR6Rx01ooHR1laBOZ2ISa5Zm4BuMZU6oZ6ZyJdA5EKqVCeh09hAFnWdWm9/ojHReDmM50Xm5wJ3ZfwZ/8zyzcZG4qP6Q9hh0z8a5F0O/5z82HVnA9E42kGY1U8FJ4X75bK959QbyL+3U+vrrBGAB0Xm0qfa8/aLw7LvGuMvy7mxLvpqW+e+QN8e78gvka1RAYvIqPXJRqx0qsGplgUh2NF/E70Fs49hnS5ZkxKxV8BqoLl4SHYMwCWye/ozo7gMShHLEMWipljJhqjx7i+67NMlXnLq6ICqwNATrwbOB8n0Ysy39a2uex1nQdvArkIbLHrglk7hKvZAhqTCnW9jbMAwRFhK82S40+ixBLV+CKChJSWp0WhAb2UI733iuwjCw+EAKeG1M+O6+EKzS8ajN/GwYXuxLIe6WaJR6rtiQ/t05IFCkiOHYOEkv1z4aRWE7mGKlkDRfg6L1n5qFDk9OzD6AslLBTfB115ZKDK2ZbheTcjLSw5KRW0quVnNFK+qMqll8tMJQM7yL9SgfGs1AR7j64M5cs1uYWa3Ot2lybSOc1NT81rYrMZnSObcdG7gl7ypr6wsU++lU/mz1GXeduwWJLcbFwFFvg8i4aWG3RFg3cs/LgAgYCc8kAqVjOdufPqVkSnW3TFze1r0zztO/bzXfdOCiTSwhT+Hu/5lYyRJaaiRjdHKUIn6jaz12YBXROOWZEu7c/Wmw241POxVrAumRw5cG8eOXBflRklNgrQlpJt7fE5ngClypSbzOJHAOo1EYbr6HUxqx8rKxcgtbeyu5258+tZbvOdlva0fLwjgWQ1u+UiqOV6ZH7jptiFs1/HMfiPwFI7T8BXHaZXKO5ceOvrh5HjZF6LFrPsQaTKerncSVR/THdfwLejKqctEP+7obtrKR/iaj/B3t43y67iT91w6CavE50wPfV21c/XOY56jtf94B3kb1uWQU7C0v1LR8FOdUvYGtpBNlb2CxX/qwcX/fqNNZd5FPtDUdYFwz1Dhkx8RX2pHjwUdTXi0rVTO21nNZUwKje6PdzBFL57Q37Fi8giHPTDUODBFJLcnnacYxBwGpk9IPVkymvzCAdjD7uBG6ZL/J3y0n4uzFTdGtBmkzvls0XOjLgAkVZ/gXkPk97QeSArq2arRU6vauyHY3IkZAt94fCd89IbgMsoFsXgnceJW7OLRW1poFb8a6yOhofRSH4oq6M8S4P1I1EBXiEO2O3sOUBIoK9DXcYqcR9vatHivPJrEysiEYoem3b3tN6tKiXzUVbHxXnsuzzdax+pgclXO/bAapJMR6+V/Tkkrk5T5mJrFW+qCuRG+GX4YswYhoXghOjH42cPMhTLQ/IvgLQV8/7gkezUy6eEntBPIsPau5AgIn5Bk8TZzcSZud44jGpffIWFqsjvKsCq6fSfNudxtiJ6QQ+DejPW2LwakUVgk+OoBODymZHVhWnqZkAbXW0RxerxHeMzjAlRroRnjOKlQXJ7hMIChM9n2D9mw7ARV0QsAB2i6P1KzoZBrPlu9/Ed7HixiqniIO49j+GEtJSqowZ/Xlb3NeNy7qU6Vg3SviImhYPqpkugvfrbZ52dsrbYK82Y5Ezf78+bjZQNs9RrcHewR2R42bNb/OdV6ay9DJKo4QlYoK5rLvpqHIt0hRlFAWoBqdjgAI+YcEY5v36+jWUlesMpdHxbaQKlI1PxcNvMXs8W9NOCUaUUdAYVp3fO++CzlrJUW+fMoLnFODT28TT8yJLgXFv3UbnRDVslhaRO70hV3GLh7zhWuVKLVxrPBSSEaiyRNqb2+LeADUi/NODaZLPxCzwFwbwzUgDsJBjB89prkZjj6yqMal3ybp4LVTAdUAOTgvXKDnG10Tvw3Qbqe83KbdEKFTVpFwP/O34kTS5q2WhBYxthas2uBqvuBBpcJuUbHp1jP6IXcCHu+/CIZwxQc8GwMbIvkDcqrRSotF9Q2qhULbW6M5D5EFvnGFXirI/oXj9S1u0GXEpdj9mOqNDuKBJDy+XMZ0PypjO3LaUkxCrfMCF5Mra6s1GpGd7pN5pokIg0aKFKY88Q1GdItEUYo4F8Xa/KGoW+1/+5HVDUs+WGTnYaGQzYGR3y5HNjI8ssjunLD6ysWJ+ZfE+xxnD2h3Zq8fLArCu2Gl+bWp/7Ely1WqvaHq/4Wo4OSb4dtVfzX4uDrhmn2pTbAW+XXX/C+2IVGeffOmLisgfYRRHVxGCM7jxRblYmwSC+/Wt20iH+iow8MGXZV6jW6JbyOdimPLyNyM0/SdTSplfxSLECxYohPnUosDlGhGuAe9ZPX1wZgN6AbRpODI5KfK7TX3KqAp93PocUQdVtEYF7PFYfnUzHsuDUhGEGG2mJl25t4zfky67OApdVLqS6hKupwzkoukF0HZeZLViUr4U+bZiqDZr4nvd7utSbOxy2Ar6vJolyXldKJsdPhWiMtFFsPeSNlyL2RTfk8o/tSMFIQDyp9wEcnuDnUfRYaBLmeANu5SraFeG5KZcPiJpU6YklUKe0dPnJT6x4RZgRG6VPOMNSA+JbURA2LdIQGPm2iLxSN17S6gcO/931+C0lQkUvw1Q/C6J4rfrarbAcmwbE8vaRaz3+mdE7uaxBm6/I0KYnVRp+W884BqEmCmVqm1lwMnBSXAEmEY/F0qq1UYQ32DcY08jdfDsA+nwmQ6DSXmKIqjUE4J/MTialmT0ue8VRB8r5smHrbRI8ov3pthfqC/gLZO7U4+zy43e
*/