// Boost.Geometry (aka GGL, Generic Geometry Library)

// Copyright (c) 2007-2015 Barend Gehrels, Amsterdam, the Netherlands.
// Copyright (c) 2008-2015 Bruno Lalande, Paris, France.
// Copyright (c) 2009-2015 Mateusz Loskot, London, UK.
// Copyright (c) 2013-2015 Adam Wulkiewicz, Lodz, Poland.

// This file was modified by Oracle on 2013-2021.
// Modifications copyright (c) 2013-2021, Oracle and/or its affiliates.
// Contributed and/or modified by Adam Wulkiewicz, on behalf of Oracle
// Contributed and/or modified by Menelaos Karavelas, on behalf of Oracle

// Parts of Boost.Geometry are redesigned from Geodan's Geographic Library
// (geolib/GGL), copyright (c) 1995-2010 Geodan, Amsterdam, the Netherlands.

// Use, modification and distribution is subject to the Boost Software License,
// Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_GEOMETRY_ALGORITHMS_DETAIL_DISJOINT_BOX_BOX_HPP
#define BOOST_GEOMETRY_ALGORITHMS_DETAIL_DISJOINT_BOX_BOX_HPP

#include <cstddef>

#include <boost/geometry/algorithms/dispatch/disjoint.hpp>

#include <boost/geometry/strategies/detail.hpp>

namespace boost { namespace geometry
{


#ifndef DOXYGEN_NO_DETAIL
namespace detail { namespace disjoint
{


/*!
    \brief Internal utility function to detect if boxes are disjoint
    \note Is used from other algorithms, declared separately
        to avoid circular references
 */
template
<
    typename Box1, typename Box2, typename Strategy,
    std::enable_if_t<strategies::detail::is_umbrella_strategy<Strategy>::value, int> = 0
>
inline bool disjoint_box_box(Box1 const& box1, Box2 const& box2, Strategy const& strategy)
{
    typedef decltype(strategy.disjoint(box1, box2)) strategy_type;
    return strategy_type::apply(box1, box2);
}

template
<
    typename Box1, typename Box2, typename Strategy,
    std::enable_if_t<! strategies::detail::is_umbrella_strategy<Strategy>::value, int> = 0
>
inline bool disjoint_box_box(Box1 const& box1, Box2 const& box2, Strategy const& )
{
    return Strategy::apply(box1, box2);
}


}} // namespace detail::disjoint
#endif // DOXYGEN_NO_DETAIL


#ifndef DOXYGEN_NO_DISPATCH
namespace dispatch
{


template <typename Box1, typename Box2, std::size_t DimensionCount>
struct disjoint<Box1, Box2, DimensionCount, box_tag, box_tag, false>
{
    template <typename Strategy>
    static inline bool apply(Box1 const& box1, Box2 const& box2, Strategy const& strategy)
    {
        typedef decltype(strategy.disjoint(box1, box2)) strategy_type;
        return strategy_type::apply(box1, box2);
    }
};


} // namespace dispatch
#endif // DOXYGEN_NO_DISPATCH


}} // namespace boost::geometry


#endif // BOOST_GEOMETRY_ALGORITHMS_DETAIL_DISJOINT_BOX_BOX_HPP

/* box_box.hpp
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
*/