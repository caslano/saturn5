// Boost.Geometry (aka GGL, Generic Geometry Library)

// Copyright (c) 2007-2015 Barend Gehrels, Amsterdam, the Netherlands.
// Copyright (c) 2008-2015 Bruno Lalande, Paris, France.
// Copyright (c) 2009-2015 Mateusz Loskot, London, UK.
// Copyright (c) 2013-2015 Adam Wulkiewicz, Lodz, Poland

// This file was modified by Oracle on 2013-2021.
// Modifications copyright (c) 2013-2021, Oracle and/or its affiliates.
// Contributed and/or modified by Adam Wulkiewicz, on behalf of Oracle
// Contributed and/or modified by Menelaos Karavelas, on behalf of Oracle

// Parts of Boost.Geometry are redesigned from Geodan's Geographic Library
// (geolib/GGL), copyright (c) 1995-2010 Geodan, Amsterdam, the Netherlands.

// Use, modification and distribution is subject to the Boost Software License,
// Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_GEOMETRY_ALGORITHMS_DETAIL_DISJOINT_POINT_BOX_HPP
#define BOOST_GEOMETRY_ALGORITHMS_DETAIL_DISJOINT_POINT_BOX_HPP

#include <cstddef>

#include <boost/geometry/algorithms/dispatch/disjoint.hpp>

#include <boost/geometry/core/access.hpp>
#include <boost/geometry/core/coordinate_dimension.hpp>
#include <boost/geometry/core/tags.hpp>

#include <boost/geometry/strategies/detail.hpp>

namespace boost { namespace geometry
{

#ifndef DOXYGEN_NO_DETAIL
namespace detail { namespace disjoint
{


/*!
    \brief Internal utility function to detect if point/box are disjoint
 */
template
<
    typename Point, typename Box, typename Strategy,
    std::enable_if_t<strategies::detail::is_umbrella_strategy<Strategy>::value, int> = 0
>
inline bool disjoint_point_box(Point const& point, Box const& box,
                               Strategy const& strategy)
{
    typedef decltype(strategy.covered_by(point, box)) strategy_type;
    // ! covered_by(point, box)
    return ! strategy_type::apply(point, box);
}

template
<
    typename Point, typename Box, typename Strategy,
    std::enable_if_t<! strategies::detail::is_umbrella_strategy<Strategy>::value, int> = 0
>
inline bool disjoint_point_box(Point const& point, Box const& box,
                               Strategy const& )
{
    // ! covered_by(point, box)
    return ! Strategy::apply(point, box);
}


}} // namespace detail::disjoint
#endif // DOXYGEN_NO_DETAIL


#ifndef DOXYGEN_NO_DISPATCH
namespace dispatch
{


template <typename Point, typename Box, std::size_t DimensionCount>
struct disjoint<Point, Box, DimensionCount, point_tag, box_tag, false>
{
    template <typename Strategy>
    static inline bool apply(Point const& point, Box const& box,
                             Strategy const& strategy)
    {
        typedef decltype(strategy.covered_by(point, box)) strategy_type;
        // ! covered_by(point, box)
        return ! strategy_type::apply(point, box);
    }
};


} // namespace dispatch
#endif // DOXYGEN_NO_DISPATCH

}} // namespace boost::geometry

#endif // BOOST_GEOMETRY_ALGORITHMS_DETAIL_DISJOINT_POINT_BOX_HPP

/* point_box.hpp
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
*/