// Boost.Geometry (aka GGL, Generic Geometry Library)

// Copyright (c) 2007-2015 Barend Gehrels, Amsterdam, the Netherlands.
// Copyright (c) 2008-2015 Bruno Lalande, Paris, France.
// Copyright (c) 2009-2015 Mateusz Loskot, London, UK.
// Copyright (c) 2013-2015 Adam Wulkiewicz, Lodz, Poland.

// This file was modified by Oracle on 2013, 2014, 2015.
// Modifications copyright (c) 2013-2015, Oracle and/or its affiliates.

// Contributed and/or modified by Adam Wulkiewicz, on behalf of Oracle
// Contributed and/or modified by Menelaos Karavelas, on behalf of Oracle

// Parts of Boost.Geometry are redesigned from Geodan's Geographic Library
// (geolib/GGL), copyright (c) 1995-2010 Geodan, Amsterdam, the Netherlands.

// Use, modification and distribution is subject to the Boost Software License,
// Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_GEOMETRY_ALGORITHMS_DETAIL_DISJOINT_POINT_GEOMETRY_HPP
#define BOOST_GEOMETRY_ALGORITHMS_DETAIL_DISJOINT_POINT_GEOMETRY_HPP

#include <boost/geometry/algorithms/covered_by.hpp>

#include <boost/geometry/algorithms/detail/disjoint/linear_linear.hpp>

#include <boost/geometry/algorithms/dispatch/disjoint.hpp>


namespace boost { namespace geometry
{


#ifndef DOXYGEN_NO_DETAIL
namespace detail { namespace disjoint
{


struct reverse_covered_by
{
    template <typename Geometry1, typename Geometry2, typename Strategy>
    static inline bool apply(Geometry1 const& geometry1,
                             Geometry2 const& geometry2,
                             Strategy const& strategy)
    {
        return ! geometry::covered_by(geometry1, geometry2, strategy);
    }
};


}} // namespace detail::disjoint
#endif // DOXYGEN_NO_DETAIL




#ifndef DOXYGEN_NO_DISPATCH
namespace dispatch
{


template<typename Point, typename Linear, std::size_t DimensionCount>
struct disjoint<Point, Linear, DimensionCount, point_tag, linear_tag, false>
    : detail::disjoint::reverse_covered_by
{};


template <typename Point, typename Areal, std::size_t DimensionCount>
struct disjoint<Point, Areal, DimensionCount, point_tag, areal_tag, false>
    : detail::disjoint::reverse_covered_by
{};


template<typename Point, typename Segment, std::size_t DimensionCount>
struct disjoint<Point, Segment, DimensionCount, point_tag, segment_tag, false>
    : detail::disjoint::reverse_covered_by
{};


} // namespace dispatch
#endif // DOXYGEN_NO_DISPATCH


}} // namespace boost::geometry



#endif // BOOST_GEOMETRY_ALGORITHMS_DETAIL_DISJOINT_POINT_GEOMETRY_HPP

/* point_geometry.hpp
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
*/