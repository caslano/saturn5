// Boost.Geometry

// Copyright (c) 2021, Oracle and/or its affiliates.

// Contributed and/or modified by Vissarion Fysikopoulos, on behalf of Oracle

// Licensed under the Boost Software License version 1.0.
// http://www.boost.org/users/license.html

#ifndef BOOST_GEOMETRY_ALGORITHMS_DETAIL_CLOSEST_POINTS_UTILITIES_HPP
#define BOOST_GEOMETRY_ALGORITHMS_DETAIL_CLOSEST_POINTS_UTILITIES_HPP

#include <boost/geometry/strategies/distance.hpp>

namespace boost { namespace geometry
{

namespace detail { namespace closest_points
{

struct set_segment_from_points
{
    template <typename Point1, typename Point2, typename Segment>
    static inline void apply(Point1 const& p1, Point2 const& p2, Segment& segment)
    {
        assign_point_to_index<0>(p1, segment);
        assign_point_to_index<1>(p2, segment);
    }
};


struct swap_segment_points
{
    template <typename Segment>
    static inline void apply(Segment& segment)
    {
        geometry::detail::for_each_dimension<Segment>([&](auto index)
        {
            auto temp = get<0,index>(segment);
            set<0,index>(segment, get<1,index>(segment));
            set<1,index>(segment, temp);
        });
    }
};

template <typename Geometry1, typename Geometry2, typename Strategies>
using distance_strategy_t = decltype(
    std::declval<Strategies>().distance(std::declval<Geometry1>(), std::declval<Geometry2>()));

template <typename Geometry1, typename Geometry2, typename Strategies>
using creturn_t = typename strategy::distance::services::return_type
    <
        typename strategy::distance::services::comparable_type
            <
                distance_strategy_t<Geometry1, Geometry2, Strategies>
            >::type,
        typename point_type<Geometry1>::type,
        typename point_type<Geometry2>::type
    >::type;


}} // namespace detail::closest_points

}} // namespace boost::geometry

#endif //BOOST_GEOMETRY_ALGORITHMS_DETAIL_CLOSEST_POINTS_UTILITIES_HPP

/* utilities.hpp
YKZfTgmSgF4aYuygqTjt4c9nXFSsmSyKKmNYUcCgWuIS6hrJKe33rhh2aeMGf9YN12zYK9vXlwB5rZiNAOZWnMW26z0m2W+J4VGAPwX7qvA4FsIKUa6r/qxof/hn/jOipE2hopoiKqszKzIUQCF6tClRFpYIDcBYR0CNPp/z4cXusATTceZaGINAVwNE7jPx2vK4V7/kmVeV0Lc5SfjLMcqkRZCTatmP30g6+rwXTAqYytFKEnv1uhB6M5wHO3l45cxkXZZk8NF6ipFZlHAYYj9aZ06MnJgV9Mnmdtl925gGweyM3rPs0vBlqbeqRct2UsSyrXGJOv9UJogdyXixezXjpslvbs0xxt9HvPe3wD6lOJ/fZicazlH2vI4zW3LVkE6clMi7QioPrHZRQQOHhUjfr5wL7hLJkchd+TFVW+PSmze+37zxyBJGDazq1JvXvexAQhAJk0FO6nX9XntKog3XCpR6mEi41qV3x7MIinF1hOBYX6uyaGYtda+cUpSCUZX3trYzNUGaDxgMxB9lafJJVCwHlMHcGShqJ3BVc5TzXLrf2QC87u/GskYQiIdOW+UOiB6MrAYKSh4MNe24bDWtGndEk3XWcbFAvs1BujQumzNAZFT0Xhx9LpHB6fihPuzt+dV5VVtl3Yy8Hu21/Mq6cL3uYsNWsHwXBWxEur9JWKpdSSq26F21zbiSVmsF7S7KlXJ5iToUlNS16oJ6UXZUtN3gNFqkdVBAIJHPp7QLUPDnR/+xSPSnhzvlEndmk51Uxbtlw/u5i4MO1bB80Cl09AqteenN8css2SIoRmmZprT+gu71qVggT6p6R/BhKBlsPKUGMkATMVy6RKg1DC8DRQZ3XTSwdRRd63ifGB8vL5xAEJbsM4JsLRziKiGoaX/s6N9zXfaf96x1AdvDiExdXV+O69TA+1dU+rz5LFqRKXVd2zb3FEE8DiB3nyBY+WfhwmsmBfVaFKAEx/fWrfaYuutIU4BQdcXC2Z3M2hAxPI5E6ghzlwCR/RpAg9EiVvdofhwb+RaOaWVk9B6Y6XCIRRmuoHog4t0V2sqqSwxfU0JZ7k1DenJDJOAX7692jriYnyIZfZB2d+M99IFhnKdljfMqj30V+ksgVYPINMAO6YIuGQxhlJpihG/0WJBov11c5G5KWhwfuchBHulXPX9psUcac+gh3NWUO1ziinuODUWzf6q1LICNXaMkIdcMVJfj20RnX2Enmlg55JtKa1mXEvuWbZHg6eIatHJJbZHFZhOtqn+YBNQu0KQxWav3+zBNKLu5XPrLi4LZ7RR2syt6PVC9lLvfcFXNErdLqmeIuiZZrgJPx+bfClkXf8rxj26PjR76yvFXq+x0K3otYno0bBKrJobT0qbktE9izUK0uI5wglTJKuzMRox2gnwWj+UwHd6h/6BCom/YgUrPlzRPOSVal05X4NmE9oQTASOntITKt4lQBorQIUAWkalwnU2vDAJMzL9CVJPfw3/nqRAzUQr3KUHjV6jxK6J/hetLmzVSZTVtYNiXN6yXvYjGKBSd4oksitMaVevUgNPLwy/N6h2GROSZxUEF/t18Uv1QYfizWomcPKiLdDIp2ko3i8kCFm1iv9BLX/0Gi3RT9Ylf+GmonrOdUlRLVyuXqV6pAFSbMsrRy8S0zBjR/monj3FTGIVBOvTW6zHJ4jyNOM8QLLiwZRGNCnkEyvhwAg95wMkU7L679VagCx3mI+gDv+gq/231L2Xiv52W/3Zchv6Eo/jj2dBRqNjaRbqfgRsHmC2BYkPmWNGkMVnAQpmwFbRHmNRyeNWS4scY+QYHln2iyoM/WJrVBjuya2+kSJiIX3MGPFlk/YvYXp/Ssh32FcwT0WtT0PthJ1xIWhcU+e9UkRwfWG+lo54fiaRWQCDIdEn/XpmiQpMmzTlTQFpBKZeaUjSsdk37n4aaya2RR5Bz66jL5pQmofg3pqeZAtn1bi/kMGSccFoOqCBCqiCi8nbGl3r7m0pXdbKDT7/dXSfZTJCt6xx8idlJp9yXtN2Ll5MrmFLLvmED5mZK6KS4l2JZ/5+3GBOmV1dvkOVJv+w/adkylNRs5UiLnoS+O/b/kGzG9q62aDx085YAWr5Kh2Jrro0+RK6dQShwxawAACz/0y0MYrki0UjyYXL0MyOEYJnTxItxfBAmUU9CpC7NKW2plEu4qhjAPElRGYeZuHs2DBFGMWJLMaitC9RaCpvVR8qJX+kWErsh2Nqz+LQKSchNgnUwZWBt9ktlZ/TNTa6yFHn9M9EsxQJM0JX5J4s4U/Zu+YzQHqV2FsmfFb4tVHngb+iA2AbQsy1GfKpVNiE4i0zqZXHXWIM8DMOBe3LUOGhyN7ublmJ7xX9KjQbWE54yG5NtlXT7A8nJDPIR592Q4QFVorvqJHig48J42FT2Yz2Ca+BqKHJGaXxamkHNrlhhXUMwr6PipIMSzHQal2DgJ3rvnFCHMw+YZnyS0r/JC13OA1NMwsnz0G0A2RcAQrPxlNnmIFQbUqRUlqAi0tBj4KoyDW51MfbHBAZZJgJ3B0Z4ybpsSdHSSLhMF5x8VUNs+0qa942ZRt2zxIq3/C1WMV2YYqTln7Sgs0WY6iJJ0w6pxxnTA+FSwP5oYySCjTCoVkKvSOwbz8YikWpV5bSeSVFWYTRVQSixNLj6027yxjxf16YyDCk0J5xvrPoMMEkkgszfZaXDSi15pfvRJT9MFLnBSxolqqRprszJi9wkaYmlGUcu9BmEJ6vAdE7BeLbr6ZCFDCj32FYw5CyaX7aEDCKgSMWC5AukvrZn7bo0IXRgy3B9S8GdZ38rhCeN+KxHR+uo3wtGNWcnl9LBv1TkyltRaiHZdnWSVF2jdg187YR5so60scUIOZ4hkA/45LvBa+zJDG4xLcMi7D/sSf3IbmHv18YBb7urSe74wGGDsKF/aeInUxGmRntxq+UtR+z1toKqEkJjeGiyVcZ9iITCHvt28ceTmaoVb3it8N9gnKfaVmmRFLu4tn0+ViKhVZlKN0jP4h18UcjlbyyBbMxm/sOyVA1cRo65vy0//cMio5HgHO04SbBrIIcEKQAGTnDeK9cjFrUCKZb3vhj1aGvOsTZqtvucKK3m+HgYwh2JEvOEWkGnTN/8ZNmIUaEQpWeIiV3vMinsJCMsy4nf7WZoSgN+k9sqPJHrh1WDNtE2OD+nWY3POkFdydiAagW7Xfjg5FNjv0Y9CWWUqBn8h/pSPJZl4BPny8ZaWmiNE89QaKIsg+pEwl4Ni2S2q4+yMeMF01rzZ2BxAYpZX9ZrH/fs1Dc+jpuPF1lLo5s7Ng+HV0Lu+pj8XIQBERW/XRvqMmtkksbE1AIzZMUwfnmc66dlBqm2dwto36h5WR2ttMd8YceDe30uGj0OJSHYzRM/E/cx1IN0WGtwc3PJvq5ziENPryfv5avHQsn76hYlrCi0gd23QyW1N9WsW7reNKVavFcFWGP0wE/JGjOM9WOxl/FQcodrzBIqgzRWvvaDs6mqm/VUhZxAcGtYOCPEHFtNTCMgA1r7mShJr3Ky2n7Wn6LoDELJgO2ihxUDZAD7K0vwZ+JsV/ldjbJDFXNIel95Sp3S5L0I68zCv/8TXvO0DU0WsC+DZvd26V9T6HljjzgmnPWn+ywnfFTT4EEPfaz1AbJQLCqEiurMOHCxAhUWg8eTbb8uuyWCWf05IKT3UsGDBJN345gG/MkVgpvDppqg1vz4VR58AxhzLwDZKkczJ527QCvu7lXWWLkL4LdafRh7ykuFpfKKyD84S8llIk6C+uWmsi3dOx2IetccF19MntYVyGfLTYpMq+d6JM5zyJrhkvcYebGsq+JORbi9mj23DXL1FHin6UOwF5FKqXumt8IvoCoV5EXWDFXoh2rNXgYKxuF2fMRTppShTc5+Qh8w9enhAexYX2uFUQ7h5jhcXbhd3I3zY7lcuc3jx1Z9gNSFR3iyg/6lUvK4bUJq6zoLT+48lTWlmO0lNLMIHSU6m3VyhE/7NT76zI0qjyUexyXzWn0z1wl9bzwsIbkRjPdXvf5FDoE6aVbm5b/ujFNv0hJGvLRx+Qobo5y4HoqTvDhFt3NSGk0YknuUvCIMk7oxdHFdQlXzdeegPKDYxXi5OhJvPb2e7tS2LO5TRTphWtBHCBoP/RtgDKJNHl2BXN7ztDpdS5PqM7T4xcNGi77B4M0+AgJmV0gbcZa4Fq+K6/0VYRgMuGQmBcI9/iX1urSKo/u3GRDCU+nECrTGYRvNJdqHT0KofVoUuuuKjmjJWR2l5GKep7VFThzEiRjZF9EvTwC4mvp23HRlz7Pxgf3PFoML11mSAajEtm/Nzjw47FJkFl7T975ODyjlLK3k4EPw1Mxr5hW33b66nQMPW5ozQjGFX9FKGvoZjB/ddCGI4y1aNRk/KmEmOzfMWxGqboHmJrhbk1qc3TJoSJhraNUxc59UJxx3fxT0MxnEaB9dc8jLZCnhkUgZiJVo8A4zYkjRlnLbHvpSogGypReUyti1UD7vaxIDy6RQ09wkZ5Jt+8TbZAzz8zwiBI/79F/Ic9QiHNfNOetKGYkbtIWRsgylKOK4aOr3eG7haO1nUvsZ0uqDKrrx4PigE0wmUBF3FpQjiugLkPRKJNXhdX0oh6ntvAALJMNXA+sXxx9xL2c1ziwFajaZCXztCywsnQMpd2rD9jT6ceto4dD2R2eF5O8hhW7x74uprrJwDzNmguQN7hmk0ap++v9lVaeLspPTADrsi6oJf46GXBIxoOa3NgWlzFPwLVtNnJly2S8Dxk7i4HYTWjCQV90C3AG3lKBd6oczqdQxzgglhCTHsjfKi1VQpdRg0eiEU3Y3JKs/kpqQjg3sMoKBR0yhaWmLsnvfAJ0LGEvr7F3dN8Th3Zl8x0JPw1YOosmoR49TSO34a5FE6s3UXiQSdVlIVf7UfaBy6OwTey7Ph9YVBPRwpjudbNHM9Jwj34o9YNJf7clpIBpHc9L91Z12GNxyiBWru8NwAvgxmrq7YP0GHYlt+mcht/tTt7pLiYMl2pQF/nFY7T+4CalFbYEipO1d8ToFEoXHyIei9yGHx8bPs3LTdCqNDevaaI+ipGJA+fcw4lbuEJ78YLDiscB4gD5J7QhRgaquVHTo7b6SiYjHWSTLuJCWYxtjCR28LLwvZ89CmXIHJ4/V2I+mRIGocmLTBZ2lfSkW1QejkiLlZaIo28hC+DOzNlFNgsS4EhL4x+9OgUJzzSoEq+kTyokYeQ4/ksvTwDbYJSX9jYL+ogkcXDC/NndlNoxz8hl0xCe1kqVhapnCNgNib1l5QuoPGHtKpETSHvNrP7F/RBbt94BfWTj/7a7j3TExzw3QJaqQjD544GgsMVtked0YkkNtAlrGng8uq4zoFjLfHGOQpaOMu9aHWZHiVYb9tpWya451D83nn4/hmJEi7RZg0T1gz3+pt07aBnUNgSr1i6vifRJ3OylmFyJFIxX2TWLvVCx/ykBuWQ4MjBF8F7NeYYGFpUiPiD17NvUJ+LCz6D+17ICapKxe0kOtSBkjFu6J+QLgOrKGxbi/JKfmzTMEcTfP1RKTTnW7O1BnEZmjdgmS5a/p+gy32kJJu3S6uMgUrC4AQcx5pkzY8+DQfbV4+6i2Np/LDAzWBkRwfEeQlr7WI8WnNGU5Z7KRtAXu2/ZfUV0PjEKygHKJnUGugq4wpmwttxe0ybqT7g4Sq9luqq7NvMTUi6Hhzj2b94tlWdd3HCxeB1tLb0Wvj7BNXtKVVsnPP6ZfFfbyVVeD2RspPvI7GLe1Jf2ywQ8dViL4Y2fRT6fzgQXjmlh4U3EoTRV5Y84DIgeHSH30l7oGmbev/Bhr3TBDqE8f+bBs+TZ818r5DGV9hs55a0MZ3j8lXx2Ob2dXN+QohD2W4U95NH2WydO16vDyvUt85Dfhyxv3O2h9wzOHwupSi611jZTYPABV3kjLBzf2vK267QJYTu98PD/wejzLKPRm/TF0bhzF+it6HgDGlkMq2x7cpEX7Hxm6tZ6iIEhbjn4uGiTIgmj9GRHpV/sPyz35X8q5BtYoS+XGJAymML8iYAHO4wUKL2BsqGbGn3kZwqwM2VUr4X1w+AUHD0XAeZ5p8AdS5YimmMWu5qrixrRa16uv2akI/C7ZdWNSMu+IidCKOwP2ubAYDz4Q/nmWvfVQ0hQM9+K+MA2bPUYc7iAJb7b8YYcxS5ajUa7w9DNkrhb7HXcUNCUuGutX43zrRSVZvnHq0N89pJRzy7WDqlvb3Iggh8U21yo+byAim1OKsHYnk0jBrkei0tIyVE6YCIv1yigRpL1klkv2MOg43YSwjxUv/XiV402MKlM/2nQ4TI/PXzADEjzZ6GMzF1HJvZ9adUW2l0JuF58pe8nbOeX8G3/lk/CeoU/UYiOTZFCPs82NDHfms7SuFa4jWFq2HoJkaiAQhihPm7MhiijV6cW030OpVGsjnvoOOkzkedPah/rlFPCj4T4DSpNoFDpvWIcwVp/8vcUvAxbus49CXQWO6Xj+PO4gIphgJe2gWT1vnkTlk3m+Ig9cNiz6sK8eMVzCEboH9FQ6JFkNU45hX7+eRyrdtus8gxp1aDGLVeFNZxfrCnf9FaO0VGgQFm1WQ+dhTHAZG4UvaQ9h4Qsw9Y6Ui4cJ7G2lIuWXeFZISF7G5dd2sIT50nnOi080ADbHm8sCfzomRANlfJyOKWlcacge6kZmZ7+NGv2XJu9DQwQsLSWBfZ0hYW4QkCSQffHakKwZt3ZsgpeR1DFlQ+cEC51VWxpkNuyYNjCjmzY/fSe3KKfsLa5sAqVndv3O4jvIpnDxYwN5EMtMDEKMeTe5TTrxnJyxgQ9Nk+1wjQwChGgV4Q/GAURAvq5uld/vDYgbfO0i0eiGN3R5Bczm8vRNf4Z8PWQexHmV4LaQj2NBQ2ZmFghqB6MOANMHwwAwuC8NAIYdW/GojXGBYEvWCqbxrU2xfSZqtcRLk+SGQ9daCqR9iFjrgqOSoGtuh5ZH3QmaStvNXOI6n7U2teoIOYitZVlMGJjxbWOk4TG8V5sbmzjkrWTnegDRiy6BJ3Iv39TVA9vvCv2D7DBhtBHltaZ49TDixMDr91jEvBeYUrZjExPH6KQ2v0t+JyTXBVfVX7uqZRYK3zzLoMqA7Cfl0W4/rXGma0dbyIJczaK0ejo54TKToICaZHs3Ock3376nR9E+WRL4kZX2xR0Ko1R+WvVzVVg2Viin+36DgltM36adWfBSQvuZeGJx3LcdlgHfFg7IpcyN3mSKum8lUKGtSKBQTi0rKVePrIrUgAegyS1sSI5PBBlbh+Ar9hR87Tp/uUHbK68hXWXsR4IG4K/U752ptROzfKNyKfjpcUoaunUeshEvl5MPC6pcx6ZceWzZpT3usFG7cGhuo0ZwtuL6lihrk8YNpVUGxoF7ExtJmjJcDVfJN09x/O6gijvfxb5O8HyZa4BplF3NqWtVKsRoTl4Kd1NAGWTDVZCbyfNHotpXdAMuZuHakdByHr6OTrXQ8GM5eoRrttyR9PyFZSgczbfMu9lwazC+y5bRF4ctiBhx5IPKPT5GFyzmvaDxHNlEuNJZijDNhowIl1hxhGgtgQBg/XvRGnBMo+VOiZfKk8rV5KR9zhsowyRSVqDM
*/