// Boost.Geometry

// Copyright (c) 2017-2019 Oracle and/or its affiliates.

// Contributed and/or modified by Vissarion Fysikopoulos, on behalf of Oracle
// Contributed and/or modified by Adam Wulkiewicz, on behalf of Oracle

// Use, modification and distribution is subject to the Boost Software License,
// Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_GEOMETRY_STRATEGIES_SPHERICAL_DISJOINT_SEGMENT_BOX_HPP
#define BOOST_GEOMETRY_STRATEGIES_SPHERICAL_DISJOINT_SEGMENT_BOX_HPP


#include <cstddef>
#include <utility>

#include <boost/numeric/conversion/cast.hpp>

#include <boost/geometry/util/math.hpp>
#include <boost/geometry/util/calculation_type.hpp>

#include <boost/geometry/core/access.hpp>
#include <boost/geometry/core/tags.hpp>
#include <boost/geometry/core/coordinate_dimension.hpp>
#include <boost/geometry/core/point_type.hpp>

#include <boost/geometry/algorithms/detail/assign_indexed_point.hpp>
#include <boost/geometry/algorithms/detail/disjoint/segment_box.hpp>

// TODO: spherical_point_box currently defined in the same file as cartesian
#include <boost/geometry/strategies/cartesian/point_in_box.hpp>
#include <boost/geometry/strategies/disjoint.hpp>
#include <boost/geometry/strategies/normalize.hpp>
#include <boost/geometry/strategies/spherical/azimuth.hpp>
#include <boost/geometry/strategies/spherical/disjoint_box_box.hpp>


namespace boost { namespace geometry { namespace strategy { namespace disjoint
{

// NOTE: This may be temporary place for this or corresponding strategy
// It seems to be more appropriate to implement the opposite of it
// e.g. intersection::segment_box because in disjoint() algorithm
// other strategies that are used are intersection and covered_by strategies.
struct segment_box_spherical
{
    typedef covered_by::spherical_point_box disjoint_point_box_strategy_type;

    static inline disjoint_point_box_strategy_type get_disjoint_point_box_strategy()
    {
        return disjoint_point_box_strategy_type();
    }

    template <typename Segment, typename Box>
    static inline bool apply(Segment const& segment, Box const& box)
    {
        typedef typename point_type<Segment>::type segment_point_type;
        typedef typename coordinate_type<segment_point_type>::type CT;
        geometry::strategy::azimuth::spherical<CT> azimuth_strategy;

        return geometry::detail::disjoint::disjoint_segment_box_sphere_or_spheroid
                <
                    spherical_equatorial_tag
                >::apply(segment, box,
                         azimuth_strategy,
                         strategy::normalize::spherical_point(),
                         strategy::covered_by::spherical_point_box(),
                         strategy::disjoint::spherical_box_box());
    }
};


#ifndef DOXYGEN_NO_STRATEGY_SPECIALIZATIONS


namespace services
{

template <typename Linear, typename Box, typename LinearTag>
struct default_strategy<Linear, Box, LinearTag, box_tag, 1, 2,
                        spherical_equatorial_tag, spherical_equatorial_tag>
{
    typedef segment_box_spherical type;
};

template <typename Box, typename Linear, typename LinearTag>
struct default_strategy<Box, Linear, box_tag, LinearTag, 2, 1,
                        spherical_equatorial_tag, spherical_equatorial_tag>
{
    typedef segment_box_spherical type;
};

} // namespace services


#endif // DOXYGEN_NO_STRATEGY_SPECIALIZATIONS


}}}} // namespace boost::geometry::strategy::disjoint


#endif // BOOST_GEOMETRY_STRATEGIES_SPHERICAL_DISJOINT_SEGMENT_BOX_HPP


/* disjoint_segment_box.hpp
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
*/