// Boost.Geometry

// Copyright (c) 2021, Oracle and/or its affiliates.

// Contributed and/or modified by Adam Wulkiewicz, on behalf of Oracle

// Licensed under the Boost Software License version 1.0.
// http://www.boost.org/users/license.html

#ifndef BOOST_GEOMETRY_STRATEGIES_LINE_INTERPOLATE_SPHERICAL_HPP
#define BOOST_GEOMETRY_STRATEGIES_LINE_INTERPOLATE_SPHERICAL_HPP


#include <boost/geometry/strategies/detail.hpp>
#include <boost/geometry/strategies/distance/detail.hpp>
#include <boost/geometry/strategies/line_interpolate/services.hpp>

#include <boost/geometry/strategies/spherical/distance_haversine.hpp>
#include <boost/geometry/strategies/spherical/line_interpolate.hpp>


namespace boost { namespace geometry
{

namespace strategies { namespace line_interpolate
{

template
<
    typename RadiusTypeOrSphere = double,
    typename CalculationType = void
>
class spherical
    : public strategies::detail::spherical_base<RadiusTypeOrSphere>
{
    using base_t = strategies::detail::spherical_base<RadiusTypeOrSphere>;

public:
    spherical() = default;

    template <typename RadiusOrSphere>
    explicit spherical(RadiusOrSphere const& radius_or_sphere)
        : base_t(radius_or_sphere)
    {}

    template <typename Geometry1, typename Geometry2>
    auto distance(Geometry1 const&, Geometry2 const&,
                  distance::detail::enable_if_pp_t<Geometry1, Geometry2> * = nullptr) const
    {
        return strategy::distance::haversine
                <
                    typename base_t::radius_type, CalculationType
                >(base_t::radius());
    }

    template <typename Geometry>
    auto line_interpolate(Geometry const&) const
    {
        // NOTE: radius is ignored, but pass it just in case
        return strategy::line_interpolate::spherical<CalculationType>(base_t::radius());
    }
};


namespace services
{

template <typename Geometry>
struct default_strategy<Geometry, spherical_equatorial_tag>
{
    using type = strategies::line_interpolate::spherical<>;
};


template <typename CT, typename DS>
struct strategy_converter<strategy::line_interpolate::spherical<CT, DS> >
{
    static auto get(strategy::line_interpolate::spherical<CT, DS> const& s)
    {
        typedef typename strategy::line_interpolate::spherical<CT, DS>::radius_type radius_type;
        return strategies::line_interpolate::spherical<radius_type, CT>(s.radius());
    }
};

} // namespace services

}} // namespace strategies::line_interpolate

}} // namespace boost::geometry

#endif // BOOST_GEOMETRY_STRATEGIES_LINE_INTERPOLATE_SPHERICAL_HPP

/* spherical.hpp
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
*/