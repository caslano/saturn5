// Boost.Geometry

// Copyright (c) 2021, Oracle and/or its affiliates.

// Contributed and/or modified by Vissarion Fysikopoulos, on behalf of Oracle

// Licensed under the Boost Software License version 1.0.
// http://www.boost.org/users/license.html

#ifndef BOOST_GEOMETRY_STRATEGIES_CLOSEST_POINTS_SPHERICAL_HPP
#define BOOST_GEOMETRY_STRATEGIES_CLOSEST_POINTS_SPHERICAL_HPP

#include <boost/geometry/strategies/spherical/closest_points_pt_seg.hpp>

#include <boost/geometry/strategies/detail.hpp>
#include <boost/geometry/strategies/distance/detail.hpp>
#include <boost/geometry/strategies/closest_points/services.hpp>

#include <boost/geometry/strategies/distance/spherical.hpp>

#include <boost/geometry/util/type_traits.hpp>


namespace boost { namespace geometry
{

namespace strategies { namespace closest_points
{

template
<
    typename RadiusTypeOrSphere = double,
    typename CalculationType = void
>
class spherical
    : public strategies::distance::spherical<RadiusTypeOrSphere, CalculationType>
{
    using base_t = strategies::distance::spherical<RadiusTypeOrSphere, CalculationType>;

public:
    spherical() = default;

    template <typename RadiusOrSphere>
    explicit spherical(RadiusOrSphere const& radius_or_sphere)
        : base_t(radius_or_sphere)
    {}

    template <typename Geometry1, typename Geometry2>
    auto closest_points(Geometry1 const&, Geometry2 const&,
                        distance::detail::enable_if_ps_t<Geometry1, Geometry2> * = nullptr) const
    {
        return strategy::closest_points::cross_track<CalculationType>(base_t::radius());
    }
};


namespace services
{

template <typename Geometry1, typename Geometry2>
struct default_strategy
<
    Geometry1, 
    Geometry2, 
    spherical_equatorial_tag, 
    spherical_equatorial_tag
>
{
    using type = strategies::closest_points::spherical<>;
};

} // namespace services

}} // namespace strategies::closest_points

}} // namespace boost::geometry

#endif // BOOST_GEOMETRY_STRATEGIES_CLOSEST_POINTS_SPHERICAL_HPP

/* spherical.hpp
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
*/