// Boost.Geometry

// Copyright (c) 2021, Oracle and/or its affiliates.

// Contributed and/or modified by Vissarion Fysikopoulos, on behalf of Oracle

// Licensed under the Boost Software License version 1.0.
// http://www.boost.org/users/license.html

#ifndef BOOST_GEOMETRY_STRATEGIES_CLOSEST_POINTS_GEOGRAPHIC_HPP
#define BOOST_GEOMETRY_STRATEGIES_CLOSEST_POINTS_GEOGRAPHIC_HPP

#include <boost/geometry/strategies/detail.hpp>
#include <boost/geometry/strategies/distance/detail.hpp>
#include <boost/geometry/strategies/closest_points/services.hpp>
#include <boost/geometry/strategies/geographic/closest_points_pt_seg.hpp>
#include <boost/geometry/strategies/geographic/parameters.hpp>

#include <boost/geometry/strategies/distance/geographic.hpp>

#include <boost/geometry/util/type_traits.hpp>


namespace boost { namespace geometry
{

namespace strategies { namespace closest_points
{

template
<
    typename FormulaPolicy = geometry::strategy::andoyer,
    typename Spheroid = srs::spheroid<double>,
    typename CalculationType = void
>
class geographic
    : public strategies::distance::geographic<FormulaPolicy, Spheroid, CalculationType>
{
    using base_t = strategies::distance::geographic<FormulaPolicy, Spheroid, CalculationType>;

public:
    
    geographic() = default;

    explicit geographic(Spheroid const& spheroid)
        : base_t(spheroid)
    {}

    template <typename Geometry1, typename Geometry2>
    auto closest_points(Geometry1 const&, Geometry2 const&,
                        distance::detail::enable_if_ps_t<Geometry1, Geometry2> * = nullptr) const
    {
        return strategy::closest_points::geographic_cross_track
            <
                FormulaPolicy, 
                Spheroid, 
                CalculationType
            >(base_t::m_spheroid);
    }
};


namespace services
{

template <typename Geometry1, typename Geometry2>
struct default_strategy<Geometry1, Geometry2, geographic_tag, geographic_tag>
{
    using type = strategies::closest_points::geographic<>;
};

} // namespace services

}} // namespace strategies::closest_points

}} // namespace boost::geometry

#endif // BOOST_GEOMETRY_STRATEGIES_CLOSEST_POINTS_GEOGRAPHIC_HPP

/* geographic.hpp
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
*/