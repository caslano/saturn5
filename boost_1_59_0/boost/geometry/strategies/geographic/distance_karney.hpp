// Boost.Geometry

// Copyright (c) 2018 Adeel Ahmad, Islamabad, Pakistan.

// Contributed and/or modified by Adeel Ahmad, as part of Google Summer of Code 2018 program.

// Use, modification and distribution is subject to the Boost Software License,
// Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_GEOMETRY_STRATEGIES_GEOGRAPHIC_KARNEY_HPP
#define BOOST_GEOMETRY_STRATEGIES_GEOGRAPHIC_KARNEY_HPP


#include <boost/geometry/strategies/geographic/distance.hpp>
#include <boost/geometry/strategies/geographic/parameters.hpp>


namespace boost { namespace geometry
{

namespace strategy { namespace distance
{

/*!
\brief The solution of the inverse problem of geodesics on latlong coordinates,
       after Karney (2011).
\ingroup distance
\tparam Spheroid The reference spheroid model
\tparam CalculationType \tparam_calculation
\author See
- Charles F.F Karney, Algorithms for geodesics, 2011
https://arxiv.org/pdf/1109.4448.pdf
*/
template
<
    typename Spheroid = srs::spheroid<double>,
    typename CalculationType = void
>
class karney
    : public strategy::distance::geographic
        <
            strategy::karney, Spheroid, CalculationType
        >
{
    typedef strategy::distance::geographic
        <
            strategy::karney, Spheroid, CalculationType
        > base_type;

public:
    inline karney()
        : base_type()
    {}

    explicit inline karney(Spheroid const& spheroid)
        : base_type(spheroid)
    {}
};

#ifndef DOXYGEN_NO_STRATEGY_SPECIALIZATIONS
namespace services
{

template <typename Spheroid, typename CalculationType>
struct tag<karney<Spheroid, CalculationType> >
{
    typedef strategy_tag_distance_point_point type;
};


template <typename Spheroid, typename CalculationType, typename P1, typename P2>
struct return_type<karney<Spheroid, CalculationType>, P1, P2>
    : karney<Spheroid, CalculationType>::template calculation_type<P1, P2>
{};


template <typename Spheroid, typename CalculationType>
struct comparable_type<karney<Spheroid, CalculationType> >
{
    typedef karney<Spheroid, CalculationType> type;
};


template <typename Spheroid, typename CalculationType>
struct get_comparable<karney<Spheroid, CalculationType> >
{
    static inline karney<Spheroid, CalculationType> apply(karney<Spheroid, CalculationType> const& input)
    {
        return input;
    }
};

template <typename Spheroid, typename CalculationType, typename P1, typename P2>
struct result_from_distance<karney<Spheroid, CalculationType>, P1, P2 >
{
    template <typename T>
    static inline typename return_type<karney<Spheroid, CalculationType>, P1, P2>::type
        apply(karney<Spheroid, CalculationType> const& , T const& value)
    {
        return value;
    }
};


} // namespace services
#endif // DOXYGEN_NO_STRATEGY_SPECIALIZATIONS


}} // namespace strategy::distance


}} // namespace boost::geometry


#endif // BOOST_GEOMETRY_STRATEGIES_GEOGRAPHIC_KARNEY_HPP

/* distance_karney.hpp
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
*/