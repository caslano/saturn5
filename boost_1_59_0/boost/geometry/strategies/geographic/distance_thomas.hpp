// Boost.Geometry

// Copyright (c) 2007-2012 Barend Gehrels, Amsterdam, the Netherlands.

// This file was modified by Oracle on 2015-2017.
// Modifications copyright (c) 2015-2017 Oracle and/or its affiliates.

// Contributed and/or modified by Adam Wulkiewicz, on behalf of Oracle

// Use, modification and distribution is subject to the Boost Software License,
// Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_GEOMETRY_STRATEGIES_GEOGRAPHIC_THOMAS_HPP
#define BOOST_GEOMETRY_STRATEGIES_GEOGRAPHIC_THOMAS_HPP


#include <boost/geometry/strategies/geographic/distance.hpp>
#include <boost/geometry/strategies/geographic/parameters.hpp>


namespace boost { namespace geometry
{

namespace strategy { namespace distance
{

/*!
\brief The solution of the inverse problem of geodesics on latlong coordinates,
       Forsyth-Andoyer-Lambert type approximation with second order terms.
\ingroup distance
\tparam Spheroid The reference spheroid model
\tparam CalculationType \tparam_calculation
\author See
    - Technical Report: PAUL D. THOMAS, MATHEMATICAL MODELS FOR NAVIGATION SYSTEMS, 1965
      http://www.dtic.mil/docs/citations/AD0627893
    - Technical Report: PAUL D. THOMAS, SPHEROIDAL GEODESICS, REFERENCE SYSTEMS, AND LOCAL GEOMETRY, 1970
      http://www.dtic.mil/docs/citations/AD703541
*/
template
<
    typename Spheroid = srs::spheroid<double>,
    typename CalculationType = void
>
class thomas
    : public strategy::distance::geographic
        <
            strategy::thomas, Spheroid, CalculationType
        >
{
    typedef strategy::distance::geographic
        <
            strategy::thomas, Spheroid, CalculationType
        > base_type;

public :
    inline thomas()
        : base_type()
    {}

    explicit inline thomas(Spheroid const& spheroid)
        : base_type(spheroid)
    {}
};

#ifndef DOXYGEN_NO_STRATEGY_SPECIALIZATIONS
namespace services
{

template <typename Spheroid, typename CalculationType>
struct tag<thomas<Spheroid, CalculationType> >
{
    typedef strategy_tag_distance_point_point type;
};


template <typename Spheroid, typename CalculationType, typename P1, typename P2>
struct return_type<thomas<Spheroid, CalculationType>, P1, P2>
    : thomas<Spheroid, CalculationType>::template calculation_type<P1, P2>
{};


template <typename Spheroid, typename CalculationType>
struct comparable_type<thomas<Spheroid, CalculationType> >
{
    typedef thomas<Spheroid, CalculationType> type;
};


template <typename Spheroid, typename CalculationType>
struct get_comparable<thomas<Spheroid, CalculationType> >
{
    static inline thomas<Spheroid, CalculationType> apply(thomas<Spheroid, CalculationType> const& input)
    {
        return input;
    }
};

template <typename Spheroid, typename CalculationType, typename P1, typename P2>
struct result_from_distance<thomas<Spheroid, CalculationType>, P1, P2 >
{
    template <typename T>
    static inline typename return_type<thomas<Spheroid, CalculationType>, P1, P2>::type
        apply(thomas<Spheroid, CalculationType> const& , T const& value)
    {
        return value;
    }
};


} // namespace services
#endif // DOXYGEN_NO_STRATEGY_SPECIALIZATIONS


}} // namespace strategy::distance


}} // namespace boost::geometry


#endif // BOOST_GEOMETRY_STRATEGIES_GEOGRAPHIC_THOMAS_HPP

/* distance_thomas.hpp
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
*/