// Boost.Geometry (aka GGL, Generic Geometry Library)

// Copyright (c) 2007-2012 Barend Gehrels, Amsterdam, the Netherlands.
// Copyright (c) 2008-2012 Bruno Lalande, Paris, France.
// Copyright (c) 2009-2012 Mateusz Loskot, London, UK.

// Parts of Boost.Geometry are redesigned from Geodan's Geographic Library
// (geolib/GGL), copyright (c) 1995-2010 Geodan, Amsterdam, the Netherlands.

// Use, modification and distribution is subject to the Boost Software License,
// Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_GEOMETRY_STRATEGIES_CONCEPTS_SEGMENT_INTERSECT_CONCEPT_HPP
#define BOOST_GEOMETRY_STRATEGIES_CONCEPTS_SEGMENT_INTERSECT_CONCEPT_HPP


//NOT FINISHED!

#include <boost/concept_check.hpp>


namespace boost { namespace geometry { namespace concepts
{


/*!
    \brief Checks strategy for segment intersection
    \ingroup segment_intersection
*/
template <typename Strategy>
class SegmentIntersectStrategy
{
#ifndef DOXYGEN_NO_CONCEPT_MEMBERS

    // 1) must define return_type
    typedef typename Strategy::return_type return_type;

    // 2) must define point_type (of segment points)
    //typedef typename Strategy::point_type point_type;

    // 3) must define segment_type 1 and 2 (of segment points)
    typedef typename Strategy::segment_type1 segment_type1;
    typedef typename Strategy::segment_type2 segment_type2;


    struct check_methods
    {
        static void apply()
        {
            Strategy const* str;

            return_type* rt;
            //point_type const* p;
            segment_type1 const* s1;
            segment_type2 const* s2;

            // 4) must implement a method apply
            //    having two segments
            *rt = str->apply(*s1, *s2);

        }
    };


public :
    BOOST_CONCEPT_USAGE(SegmentIntersectStrategy)
    {
        check_methods::apply();
    }
#endif
};



}}} // namespace boost::geometry::concepts

#endif // BOOST_GEOMETRY_STRATEGIES_CONCEPTS_SEGMENT_INTERSECT_CONCEPT_HPP

/* segment_intersect_concept.hpp
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
*/