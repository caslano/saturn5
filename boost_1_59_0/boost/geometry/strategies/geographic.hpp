// Boost.Geometry

// Copyright (c) 2020-2021, Oracle and/or its affiliates.

// Contributed and/or modified by Adam Wulkiewicz, on behalf of Oracle

// Licensed under the Boost Software License version 1.0.
// http://www.boost.org/users/license.html

#ifndef BOOST_GEOMETRY_STRATEGIES_GEOGRAPHIC_HPP
#define BOOST_GEOMETRY_STRATEGIES_GEOGRAPHIC_HPP


#include <boost/geometry/strategies/area/geographic.hpp>
#include <boost/geometry/strategies/azimuth/geographic.hpp>
#include <boost/geometry/strategies/buffer/geographic.hpp>
#include <boost/geometry/strategies/convex_hull/geographic.hpp>
#include <boost/geometry/strategies/distance/geographic.hpp>
#include <boost/geometry/strategies/envelope/geographic.hpp>
#include <boost/geometry/strategies/expand/geographic.hpp>
#include <boost/geometry/strategies/io/geographic.hpp>
#include <boost/geometry/strategies/index/geographic.hpp>
#include <boost/geometry/strategies/is_convex/geographic.hpp>
#include <boost/geometry/strategies/relate/geographic.hpp>
#include <boost/geometry/strategies/simplify/geographic.hpp>


namespace boost { namespace geometry
{

    
namespace strategies
{


template
<
    typename FormulaPolicy = strategy::andoyer,
    typename Spheroid = srs::spheroid<double>,
    typename CalculationType = void
>
class geographic
    // derived from the umbrella strategy defining the most strategies
    : public index::geographic<FormulaPolicy, Spheroid, CalculationType>
{
    using base_t = index::geographic<FormulaPolicy, Spheroid, CalculationType>;

public:
    geographic() = default;

    explicit geographic(Spheroid const& spheroid)
        : base_t(spheroid)
    {}

    auto azimuth() const
    {
        return strategy::azimuth::geographic
            <
                FormulaPolicy, Spheroid, CalculationType
            >(base_t::m_spheroid);
    }

    auto point_order() const
    {
        return strategy::point_order::geographic
            <
                FormulaPolicy, Spheroid, CalculationType
            >(base_t::m_spheroid);
    }
};


} // namespace strategies


}} // namespace boost::geometry


#endif // BOOST_GEOMETRY_STRATEGIES_GEOGRAPHIC_HPP

/* geographic.hpp
A+vPn09vb17e7PB6y0M1g9xgRsS5YlRjOfBHrFOvtEk8HGZyllC64gmh4BOwBXdaMIROZayBstSV523pB0M/bdo3zqurq2coSgk7B7VaZcTzSy6DyHKEDKENGeixIOj6iYS1Z7attVXaVFUn0Bo2PIBSUpPBIwsiIgeEgJ5r0X9+bolTff/Xmz+/x81urMfJLCvxaSfHj5kACQcgGEh5+ECCQkmOGYQYFcIJQz8ciJFqe8pf4NQQB7k7iBBN1aG4soziaBOYzF1QKANOGAniEHHKWMLO64SC311Q5mdyXV0Ha1Vj3MH1lBIFhCblKevVF8usLRng42Bq5xUtMt9TG8t13Te5/0kfAC1jL/4g6Pzs/72P1f/i9BFu/3mf/zVJKfh6Mud/eLeo0Fm8ndwIr5FN/xPao7v7vn7n45gTZ+/l4p6o+/l0K8iYdmOrG8vDZev2i/VFLqkfY4J66LFNjlKl7i9Zua2HfCjfWBTVBGnBDfac03Z5QFlZuNR8lMs6RAotGKmlkkrU74bJ1M2GCvz7of0wSlonOQpWOdWU8lFLTbGM48cJ6SLtvPSSlxAbUWLRug2HxYbJLVBHpcocSKHVGVAn80hRkuOWKP6Q8FpQmaTUFkGxCBBFytXsGRkqTzqFB1F0S4de/pIvyVrQ9QewXdg1aiEKw+yFm2Z1kEfft4QA8+YQfJS7y3mk71W6AhL+IB844tEPeAy9O9tuVNy3dhIXtA23/cQeo1S8j0I0PFY4lIJE/JSbAjWh3AMlzyiiIjg2BwtXAVSAVJw1GJR0DDBGzB+vcW2Ax2UDITLPhGoufFz9hAwkIFDG8yIUm9yEcOmvDzDzbX4qgC7O3kOvhYdIerb1sqlnb1kcGdzT8nb2Ux0kdH4HzJO6Mj6AaheT8Zp/laYg2sNVYYA+SaORj7cfmkRgkYYY7pYj5LRUBNCBDdkKF9GBEBNwV9wgu5Clxt3soDFPDhhlwa2/1MqNRAEzxmEaCPtnEcCNPY8ozPgI5/9ZgLUwbACSsSE50NqVAQLgQJryRmo8TW5YzafvvHGZINlswpAeXtBoCiMNDcegMey6VpNMdlDiNB1cmN1GgkoSX0drh/f395kPsPQsebQxemRq8F9kTWyMI8YqA22zEYasGAYUBw3xyYkvUBLCnBSa3W+jTl6qCwnRZIrJk8MvT7RETWCedZQ6xBkuzHyzSFNs5gCypOztkG3Y6YiQMD42tBSyEOhU83DKQK/Ziq6wEAcVGhq6AFKKT7lM4KeLiylTWd3t03LSEhcOxt9ykDK1hmw2RHDKmY5FEVt609KF9Smebz8QXadekYVo7U1YaFZbuOR91qlUGngaRO4+Cz9jX20nmI9F6ez5m/X4WMN+cuYhVOulHnDJdPdsHdvWU1TCiKYhF/Z6Sq8vduZwDg+O3CmrNYuy8c4xhqUO8JwaWOmc9jjBaonQM+KlKyaqiNSlgcDcBBlV2YK90h9QcKa/OdY4L+GHZxHgklGnPntIpsoK+XX2ysEE8qdIlBckQtniusH2urGoJ9i4EXsldd36vmZN6XHaiPqOIsMW8DW/q/1TH644oobDfM9K3dcCQBcy52hUrSKbDVRtLoj+f+qoTsC4QwWAEJ+VppjUhjPkK4as6hXyH+b5TeBxkrY+DrVr36zZElORE54grLpzvsJlJByJqA2u4pq3tNryzphUz7h57V/y/DlPpmfO4L6h/N2/xXhXKGiTZPu94f8ON6d/NyaVTVdoAL2VFq8/2M/30TvXCv0XDOtraE7gu7H7a4gIBPC6IMv4iRFQ7/Ml6v98W64e0vk+Nb8cv8PL4P6p4vN8xugHvisOOiDL2PuwCugLamvH6r8JZfwwBQ9o3/F7504issaJLTkBBBi8r69+Hbeu6r8377xeGvTa4SjaP9t/70IJvmxI3VX7P4T3vxO38odCXfnfdELV99xNapABNvu8y5OzGNhAh/lSl2p12tu3uQpYykX0fw6Hitl3OPHARpaWCRkiLx/At90i1CNaGIigESPr1eXkxIbMi16utD0DUDYpXo7pAEfuG60kNZ5Cyelo853nPqqI+5BLy9zcoQg6fm8N1qISdgvca4pBbah1cxJHfK/f8J83xzhryN44782NhcCnq828WITMzHITPwEO8NIPiw/djhy6CRsuPDynDLDBudEwcGdLLiI80IKQgmYlbs2AVr7Tw7pJEAnzfe5K/HU/FcPVKWbsXT6y1GDkX1qV+DqEWgb2EqhSXHBMztQZTPBctKnZaU6CeO2XXGgwcrTByCcHbRC4WLSyrXVOIWrWjq31Tp8FkhtGHh4cNCdCDnmJ6dZ+TfVqjOmz41OJhB7qgcvCdzE9OcEkveEBo8vmO3JOMvun3BBX8xVN+ocddocdmyVV5ErnrYOV7jdBB2LyrwyQ6lf1hh439+s78bVOk2oSvGVkmm6d6vGCtbbtoOIOjnNgGFXcEDvusNZTcSs76902Ju/I57O8C4nFCKH4mqsyWoUA2el8/7yjutuv8OgiZ0NxlgtG5ihYgP/X9VXcs8KYmrzJja7ttD5l/anU23uzg/K6u+iyZMtkYdPC0qL6T39G6jgP3SPomKWTUfFUoo0cotX+3uD7s4dAwDRMWhF/9ZzD1VgMj5SVvvELgWxT38q6OUCSiC6F0gOaRnaHpvsQf41bJbWJ+L2lHkvjKCUQPSCoY197Ne6aYMp6Xe1ZcVlrZJRacHDq998C+HVjBHASq/XwA+FeNgd3/onK0LG4o506Ot1cGTpUoE65pavtBpWmUay3Ld1C1eboF0faYI0+6wczR/eEnwzlJMl2iZP41oWQKFXwbkNogTkR1yM+9BvaAmk9npaBN0HPjpQ8gZZId4171lUwVA+OxjPfIC29xn9SZ0gnmXAMBg1G5TowrYvBvNVbSmzOoBJEyGnxdMKuKRvRFBKFaz6GSTrH+pvxVGKduDU55ojyYdQZevpnrdRQimfvGOoC7RpdZCS2Eh67aGPr21PHoBuvaWZ5BnNq6q0UJNNTzThhV7JnvA5wUPrkyEmmOLM8V6g/UX/2MijPJzjnX/6oQqk677XJuv+xw/wVmtwAwdWui/68PODY9T9TZwf88wrH6cpEcszL4VTuHzP8glt/hNtP/9jxlI3sVHj5XF4TMJ4E7Jr2u6yTbsk3key4//rD/pIIweWO201LQjDOi/RZWxoyLN1tiZv+mlt3zdlou1jhBm7uZ1qdN0OpVNuFJwDyvkI4tcq1KGqJeKLmS74p5MsVVDjzYYUaaFRpp7LeMgrdgigVPmPuKNQ9kqRFS5lEg0/9N0ZWH0cc7XwP+H/AziJDwieOZ8U8iMvTNjYRtU88z9JPF8fnPlYsD04/QpY71V0JNfj0CSTsVI+YfZlm9O2WDHTCcrmzaOp1bVN3iJ+0DaMDBHhyUhhJ1bzOXS5TwtmzelHWEyuG8WwiWkPO/lq+Wx1mzR3I6++bPj5Q027Eyy5ZeRkpv65HqcfKuaXHrzLJ0zYR1U91yijOWIpteVT/vUHNmbnqszjBDml2adWPO5QhVRsrcaJ3dAGVmGp00Z/7+AN2FYpwK0S3v3m/qSRaddyX9bJbd30w6Dpmq9zI88cJxZpVeBf3XkCVmx2GgsWBv3uNdsgMb7/pN2/NIOaq9ghr1Y5J4kMipHxjmxQsTduMscLF/T1JPt8SCXGOseXMLLsEzUpeHGc5QRbB38OtpubGBe6+CLnirkTJPx+63Bgi1Kd0AdDeED5X4IoLmOCY1uDtDi9Hi/9dO2P9h3aWd4QVcYRsJrn+sgD+79p57V/tDPfftXMJF9s68j0YhhU1TF0j2CxZMFeVnD5kK9skE94vgZk1Wsffo6dR9yGKo9R2RyONYzJbL91klX50aZYhKhlm9ltQIjEYDFcsVkS2g/8zeF5tGqZTIJrY2oeRDZh5FuQTSKvveztr1/e+bMXKe/1b38ungKa9FqXWxk49Gke5pJqsoxaJBwsLV3WgOUx+ybc4Vf1U2/P79Ubw+wDpaqf/2xZ0oPqfOdTWnesLDW0cHR21Cz5WKnx+fYOZEDPbNV77S/4vLXT/r70zz39vB8+xjihZ89zx/z7pUePnb+at/X1loaEt290no09NYRRMZlLE3vknEuF9BAtocDdj6MsyyjGKHHE/GALOm6BAQsIMniOEKiWCjwyCNyXMEffzINvmfH9qssmE9LLOzdztTfn6ne/bh8teTcP1+aLJkTjPjaissr2qe9s5737Tv9xq10o3ttqRvW50uQNX4+D/XPAIFj2PVvhkffKzfEXzfxzm7FtusQdspXmAcyW0uF/Jdc3FtvkXcjag5nf/6eLx3X/v3TJ8t6vwaxv53e91XUv0WfrsQ0kbYPQp+W18G9//+mSs4Du36jcSu/Ma1c5/x4pDjzczrNjCtC2rjc429DPPeqkup/Sb05tIgPHkKYe6CTRWOG0ePdO4ZfIp8qT/5pAyr/+ZrP/ul4IAvOCHgXsInd573PNn6fn3/e6eW/2Z2iDyqSlWirjwzC96WPkVr3VtsZnot2bYLkymWarL4RZTf3oNhKpxlLMS07J5mqR9veuOp7UNKK/X/o9fd92BeiRyPe+G11f1TIhudLE6g7smlhSdI3mWRpp/mJfSHJRzMeje73ukdhe4QdbfPDda56Hzv2xZFxvffCgpZLUoibO1cWgqbdTGNtfrRWX8TX3z91zAHj3qrtSjB4eL5hOGDYswGqenycLDQwodWG2pqBLJ83FrOChS7YWKF9sK4A7o4Sw3gtIqmKfF1HAokqvtTFph+SDYsyZJPc65SUx7M31KL8zKBsUCMMXpoixM2yf/TK2EySAt44uXCa3/XtDmehzzIbi3tQYZ7dBsmGjOpCgBNzapxcWtlVEprgiR2avULZZJFkHid5Efh75s9GKmrUsttWkc18pO3qqybjGNmwKGZbVhksssoXdTdH56WK01d9tuZ/P2dWDCZ8gth2i5sqaNBtBYmdJkp6ZJVlgOJDdJTGAKoK6Pd5RKB8Z/W5TuuQWn4UyWHZmIo0SXpAyTboUVkXoPIxQnOUfNeGHg2cq04jkulq/K8YKM5kHYGOmW92/c+a+iRyRQqBQ7sq+G8CXSHKROpIxhjc2rnISC30z1e8ZnGzwjX+BUbhbdFCkCcRe05Tt+0HUJ5X2ioqZWxMRCmr7WGNDI59dPnoDGL7eu/dL0RYPpDl3mbLqZMAw9grEClVmJMpNS37Ok2Xmt9b65GMkyeUTteTsVreu1FRI9EitMW1GUQ0c0TFR0azmLPkOsZTAsgm96DKhluEjD9JVPTtOqbc3YhraacZ7OihODJVGIqR5USmWXpjBCHSWNPpgjaPRyLEfEaYtOjrJwfOiMPJVFu0TRvMrUfrjhV+SyUnau/ptcj6VNLWqqRozXCbfsz/++aLdy0/EYtBxKuBxq49T8g+1A6wY6R72tEuEU6PR01aKZqSsn4Gn0kwe+daVtaK+OQq7id45kcvlcbI5JVgax8w9yKgJVuUy7hwlK2UBoKO4H60IGIOk8tz94zxqxvIpEci66rZPW6J/CIqbABHIkWxvECwq+Qg5DBSrINbnYNLcDUjm36mpTbTSSUFpi1CUh6WhLjkgXMWmPbUwUqSNiGTbJ9hjMck806Eto7n4iXEObcpiuN9qosNyz+5AYOmAkPHFB6E3A8pKFYrAFfTVmUdi7tXJjAnSFeiFMyh6uw48kyOwzEpVIlNEHajAUdOGoGGiIIrPapyBTTujaz86dIabdSas0S71+q6pWDrXP+gRwxBIK7AjY39rrcpOhpLjbcQ7mIeit4KkEyUEgKeTkZr/nxaa/mB8mONXktdhCIVOOoFMrkG1lpUrenwhHK2RIdFWtm6w5DhUrBVl25KBhWtlqd7igqHGjFD3/OCXdB0JZclO2B9q1jWYhM7B486g8avugUZdKKI5H9aH/yaBv7Xt8HZ06j4WNyWYWH1Jbrv5UrDXYOAMTk3KSwPrxiy0UjA8ZpRltSyFZO2gKRXw5IDUJsirKgsOZnKHntwJySpciBbQQeNqAXrbOr6sXU+MNE+u+szji1KAm5tJ1GwkuAPXxO+/PvNbHbk1Ezi3GG2JGZg4GkVBVSLQ9xVTFy4xMZDfVHX5LfSH/3L/0ZRi1q7FYLsC6EDtmj6efDrTRsA26rWsBhIFacKz2BXTsNoGkuIWrCyWl5L9IOn/YRikEluTwSs1BUl8IkbgiVEHVag20aojVNB95kmCsNDDrzvmbZqN+MuOGVuTOiilaG6kV8doM41/Q7feNACziBzgwsdk4pwgYCxyw6rsqnMOWtBsIl1o8a/tvf2BzVf+I+bVSWQnrPgNh2i7Cbu2Ul9+0EqvnDofctGze5Oq4m6jIufql8Dt99uPvGjT7agEEv6idjxKv9gNF0xkoeovaNoiArY6ZP5vbjFcjQesRKQSzYCqHdTXqb41tgxVfnyYoQuoVNmPng5k+W8z1Y/i1fHfjUIeGK+aT/Jk8gxwR+Zl+L80bbevQSWfjdbDkytznOmsfI9KfK1Sqq9fLHS2bjwrf7zt9t/f5n3hz+Eex9iC+olrxIQ9UDs5DeuZ4HvRXXQe39sNmPlksBund61hAModXu+g3+3f8zwfOvsed7zu0uc/1vTiFrw8i/0VOok2/u+6vdZX3/ucjhc039xEWMtwC0l/DCQSSo/j0DPt1G9CHcyxhXUjurpSBEDHCncIiqVVl0OqXyXP9D08K/P7X4X5X/v67FB/r/usoTiN3GzvveZ/xBJsRQ1XeIJToU/CcN4YLpMq+IOSqjoTs+9HUW9aVS1i7E6nyiyNvc+qsqCOHS8RynbvASZylKowJ3p3G5852/GFawffoVQHoC1gtdp/Lwe2teCXZ8RW8FV3qYuEwbbYhEaaI3AT9XlqptornrD96FWusiriuMSysuZsy9BaikBZKNUnbgT9IJU1TFWVSg+jGqeJ5/hDFTzkyu9fe1pGlkYZl7rA5YDPSoo2rNzhYy3WQ/wgE70S8xMOH6b2+t871uoDdPi5hV+nOqVbaYFLFEpiQMbxYUUVsaZoip9iTXoJWC3148QRG2jET8hyM17JqrImizgzPR4MybiU441a1Okg+tvquLMo7a87SbdWfls+c73cvZ9aOq/z1iRLUicuskij7PTytF6usqu6VVFVk+T3KTaITzR/PiMGsajUeoW5h1EOlPBoMw22c2OBwLD8Np3v54PmY0kPhWU6uO82rfdJhbf/iLmodMmHXVFvZ5PQ0UtlfWDUPtErh76KJpeyWh+X3JGJxuFtL3FO3xr3gQLeTFsNi095TbxnU/CyJXpnj5aHP96KkKMSRm+wWLr9bcuDIanaXFqZt4NVNi0wDLKqqH+E/6OZm1YOa9qujsneyBJ+OJGNiQUcOuAt4VgS784dgKtYe5MLPK3oY8amuLjvFFcGJ4qaojpY9VLswrlivQrW68tu+H2d1qyN5kDQ7CYaTOJgWJulRW/3dmqyaUykz4CXBWrLY+RxG8drxJBEV2kIJz+eeHNHBtDCCGg3WoVviTYBeanIuMdNJE1F9ytf/045gTS/fSSugIzAsEdxol7dcmXdJ+PHLDQdO/HH7t7FVFm6uc2YW6qiwKQqt88cv5seqq0WryCKExrefSeG0
*/