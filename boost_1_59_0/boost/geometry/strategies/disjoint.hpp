// Boost.Geometry

// Copyright (c) 2017-2020, Oracle and/or its affiliates.
// Contributed and/or modified by Vissarion Fysikopoulos, on behalf of Oracle
// Contributed and/or modified by Adam Wulkiewicz, on behalf of Oracle

// Use, modification and distribution is subject to the Boost Software License,
// Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_GEOMETRY_STRATEGIES_DISJOINT_HPP
#define BOOST_GEOMETRY_STRATEGIES_DISJOINT_HPP


#include <boost/geometry/core/cs.hpp>
#include <boost/geometry/core/point_type.hpp>
#include <boost/geometry/core/topological_dimension.hpp>

#include <boost/geometry/strategies/covered_by.hpp>
#include <boost/geometry/strategies/default_strategy.hpp>

#include <boost/geometry/strategy/relate.hpp>


namespace boost { namespace geometry { namespace strategy { namespace disjoint
{

#ifndef DOXYGEN_NO_STRATEGY_SPECIALIZATIONS
namespace services
{

template
<
    typename Geometry1,
    typename Geometry2,
    typename Tag1 = typename geometry::tag<Geometry1>::type,
    typename Tag2 = typename geometry::tag<Geometry2>::type,
    int TopDim1 = geometry::topological_dimension<Geometry1>::value,
    int TopDim2 = geometry::topological_dimension<Geometry2>::value,
    typename CsTag1 = typename cs_tag<Geometry1>::type,
    typename CsTag2 = typename cs_tag<Geometry2>::type
>
struct default_strategy
    : relate::services::default_strategy
        <
            Geometry1, Geometry2
        >
{};

template <typename Point, typename Box>
struct default_strategy<Point, Box, point_tag, box_tag, 0, 2>
    : strategy::covered_by::services::default_strategy<Point, Box>
{};

template <typename Box, typename Point>
struct default_strategy<Box, Point, box_tag, point_tag, 2, 0>
    : strategy::covered_by::services::default_strategy<Point, Box>
{};

template <typename MultiPoint, typename Box>
struct default_strategy<MultiPoint, Box, multi_point_tag, box_tag, 0, 2>
    : strategy::covered_by::services::default_strategy
        <
            typename point_type<MultiPoint>::type,
            Box
        >
{};

template <typename Box, typename MultiPoint>
struct default_strategy<Box, MultiPoint, box_tag, multi_point_tag, 2, 0>
    : strategy::covered_by::services::default_strategy
        <
            typename point_type<MultiPoint>::type,
            Box
        >
{};

} // namespace services
#endif // DOXYGEN_NO_STRATEGY_SPECIALIZATIONS

}}}} // namespace boost::geometry::strategy::disjoint


#endif // BOOST_GEOMETRY_STRATEGIES_DISJOINT_HPP

/* disjoint.hpp
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
*/