// Boost.Geometry (aka GGL, Generic Geometry Library)

// Copyright (c) 2008-2012 Barend Gehrels, Amsterdam, the Netherlands.

// This file was modified by Oracle on 2017.
// Modifications copyright (c) 2017, Oracle and/or its affiliates.
// Contributed and/or modified by Adam Wulkiewicz, on behalf of Oracle

// Use, modification and distribution is subject to the Boost Software License,
// Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_GEOMETRY_STRATEGIES_TRANSFORM_SRS_TRANSFORMER_HPP
#define BOOST_GEOMETRY_STRATEGIES_TRANSFORM_SRS_TRANSFORMER_HPP


namespace boost { namespace geometry
{
    
namespace strategy { namespace transform
{

/*!
    \brief Transformation strategy to do transform using a forward
           Map Projection or SRS transformation.
    \ingroup transform
    \tparam ProjectionOrTransformation SRS projection or transformation type
 */
template
<
    typename ProjectionOrTransformation
>
class srs_forward_transformer
{
public:
    inline srs_forward_transformer()
    {}

    template <typename Parameters>
    inline srs_forward_transformer(Parameters const& parameters)
        : m_proj_or_transform(parameters)
    {}

    template <typename Parameters1, typename Parameters2>
    inline srs_forward_transformer(Parameters1 const& parameters1, Parameters2 const& parameters2)
        : m_proj_or_transform(parameters1, parameters2)
    {}

    template <typename Geometry1, typename Geometry2>
    inline bool apply(Geometry1 const& g1, Geometry2 & g2) const
    {
        return m_proj_or_transform.forward(g1, g2);
    }

private:
    ProjectionOrTransformation m_proj_or_transform;
};


/*!
    \brief Transformation strategy to do transform using an inverse
           Map Projection or SRS transformation.
    \ingroup transform
    \tparam ProjectionOrTransformation SRS projection or transformation type
 */
template
<
    typename ProjectionOrTransformation
>
class srs_inverse_transformer
{
public:
    inline srs_inverse_transformer()
    {}

    template <typename Parameters>
    inline srs_inverse_transformer(Parameters const& parameters)
        : m_proj_or_transform(parameters)
    {}

    template <typename Parameters1, typename Parameters2>
    inline srs_inverse_transformer(Parameters1 const& parameters1, Parameters2 const& parameters2)
        : m_proj_or_transform(parameters1, parameters2)
    {}

    template <typename Geometry1, typename Geometry2>
    inline bool apply(Geometry1 const& g1, Geometry2 & g2) const
    {
        return m_proj_or_transform.inverse(g1, g2);
    }

private:
    ProjectionOrTransformation m_proj_or_transform;
};


}} // namespace strategy::transform

}} // namespace boost::geometry


#endif // BOOST_GEOMETRY_STRATEGIES_TRANSFORM_SRS_TRANSFORMER_HPP

/* srs_transformer.hpp
LnfGxyIe2boZACBz1qhxhuihewDRXFPUJuu9eSv0U+LuXebuOCTuPV/taagdr9MDB8TE723dclcfsxPLTHhhKGLdKEP1ZYgPU7CX5DsZP0lbgwcav/bxteqrwHqKdWWWfzt8kPcq6eKZTU4bNhTYU0IiW1pBUBu0xaglXvwfp02Xl6t2JvRMxJYeExyRAwGnchfthtLFOvNHusGW3zuZ1dwrFlDrJmpLZFQMhcXs504bOhTCRXqDsQJafH0U0cJ1CjJMD51Nf50gHsB0ziNixUn6lFsPupwlCGvn3Os85vxOm+cq10bJLVCbM8dKcUp7rwJ3oumnZ9gIyk41wCZG7It2wKJSbHs33bbT+CNCB4mad7oMKV8gTd5ajgZjV/tAkJ9hrIUYSZjGyj0U1t/jfDaBTmLIHy/OPxKaqNfTpaLPdus36Y0AH31kOhRM8DftjNaCc7MpLmA4M6u2MoTQzv1cKEvhRIJ8fYECOufQd+oDWb21cgdRiCKO3gXE7jameKN35BpEVWIzppVjyGJ4GadT4tyQYOyRMctYjrBDkimGwG28i5BKYvvbXYxdPFXLoNA0z1pqnyXAbwR3gjyYnP4nPkcqDF7q+QrhNeOlUhXwVM9XMAOOj6/IfYle/dx8pX5VsfA5ug9b9+9XKJ4sr5j8LKs++koVPgckAuCVJ6NaYRGkmkp1+xbDw0u9SFoNSxNZMZsWdtizpsbGFXHGHRFXaZBNOd1G9u1NnLc7weH8EcsVJpKF/FVD9XlufSyhUHF1uq0ACRYIDX+Fz6OG+GRaF8jbMRlkdAPCH9ii2wHYNuWycGwZbIFF/5+eYZSpeyN2AtwpLrOE+kX5jCQYDZEWzldEIBJsrKZ2twDYqA8XhMS1b7E+uze9bBA6vbTAC6yGvhje2uGtiHqCOcBJ3LDTxC1xA0hz9Z//gVKGk3ANXJ5IwlUgAy0iFMRrtg5WK/Gs5eCUPj3iyD9B0EAFjksVYGYIASrhg3XGIZNzWSc/iwpzMWdB8Ui8iyO4mftkPn3WguCBSBLPS0EjmPMrDtjomEAsgBW8MyVsrrUG+UZ8CK/C1XqhW7frY2Ml7VOMYKbuP57nb3d20lK0EFUjNij/LzNEv19n2PbsFLfcbUF4z1C8ofw6/RjUiTCkTAmhrveCsk3GyiLqmgOzPThiNC1wEeaGsDaNbp3+406qNDlHX9aMuGE7nnRwnFE8WYwjL+fNLicCJXVok4foW2BDUrCbyuwG1Z08RKplH1whLSaS+FAukSj+Y2J9HluWWB+wp3KJMuHTtKWO7dQf/JTw+9BCDkyqZLOO0mO++zi6Ab82qpvHLy7Xn1aA4yflKhcEZVWckxrv4ikVfxW/SUwbSnToo82sLOxPHfoqZm6cbBJACO1mOqRnA2E6hH4yAdFc8WeS9d606mUR3LOnTwO224qROKJ1Ej+WkMLNunck6z7yPXVH9Kxr7pzVcu8P0ht9i1k96g6Knz/VZcTT6G3wHsLFZ32p9Q+J6U7nL4H1gq3PQruZC9Ru4Q7uzj+Wmt3J4Cl4+W2cFixk4mE31uZytl3eh7uk6dew5FxfYGzhWHjZLrqPbsC1LaVD0fbhSRANR/oT8s1efXiA9/7qul9CNckOzU9jexfjjGa3OtBEzpdgCDLOUf4ph43jnJaBX5PBTY3s3MMy0mqPEKzZbn7aHJTCADI8t+Kgn6qIMJKmDL7HZpOR32XcZ6W3TxUykBGCgE7jw5Ny8cqvsNV6ZowVm492ma4bE3okiuXQlMfEWzFJvDsTxDuSH5vnopki/OtML9d4G0XrPNpi7B5tMfYZCXbrENOVySYiZuLAZNlOSZiUB0KS8Nyim+vTV/eGLRiN3xaSSurhZ7+FyjV+TUhSpl7mW7V/SNKj/z5zVnEX1repfIa+c5qJ8YpYxRB0G7dmajd7qUc3hVJyyELTxDE9j8EMt9MLrB1xivylYCndKRkhwZuE9FGsIpiXSfJd3nfhvN3BKSHxiye7DJlQmpi3MHj0ee+ZSlNx1ZouYprrAAos9dN7Df/oAm9sO8djvFgrd5GQqJVnamswa9oansE1rfxX8N92/ovAxiScM12CNfma4/y4k3fF3WeM2DIwOyzEtW5It0kLHm3GvCUzFI3PW7Q1HE5xDVxstDVwwL1fW4NIjsJLUlFsMT4Z1NbUcCEOF8cwF7kvcl9xcVhbs4lfbOa/7PS8hqNDruHQjWuYXq15m//WcmUQ5+gy9M+ILkNnDW3NNn5fx3+xobQZ8+uZ7Nv50TzuWg7w+W6R8x74z0UArZ3JXc1bP1PruauXMN9m8Xh1b3QZMhU6SHSMHxpjE/t6YKQDdxvp7jV6IzWGM3Ym+D6kW1Ozornm+DkHr7mUb76b0H9jDc2Q0uI9YldTpv/T9ek2uU5s/jpr6hlWzxM5UrZ3GWJCrcVX8/Y6FXsXkBDiMMycZ+bDBkkIQsVhcfz1BL4bBOvNJhr2EaUgOrNTBovf2iQDTEIYXm+hDpKLEQ65hcMhd2rRUiaQ3Vp0Ol0gImwy6jbjPnwv/0i4YKcyN4n+HjTpySTqASzoj5O0dFwr67Q+cjzIdjj8kV4IMtUJi+njkiOV3MJ+MDC3PM1M4NBoZbddGRS5oJj+VYzYy0m1+1V2GRFnKZPq61/rkrqtRKDdYwu3Pw+k66nGsTx/LRORk8RbVDS6neklTv7c2jJcE5dJTFrj7sWoRPDixuYfz51dDAPhoPGpxHGb6Ibk+SuTd1V18waLuXO6jIrFT8Jb3ci24UNGduenqA3gRe1lgM/y6j1q35DE33P+4wBXt/URmy3lFKAdqj7iV7bX8LwSjBd0KTOvX4N+qTPpq3J3cbTOgi/UYVGjt5IfNbKUS02OC/IIc8yInE1TM3Rjcmq4z2wr9a/8Pb5l2HwQHvgi/rH8iLLXyO4GrwG7kyX8yJyO7bzDSBDsSozhD986EFfrd+CiIv0TNMyz5F+AwiOeqq+A259wm/5Q0NF5qmDrFt2KXev2VDOVfBfoQ+L0h6vNzKtViJPNfG/hNKmaQFdi/o78I0EYYJUdl8CkpxcTLTpO7JLaYQSzCKMrcpwbsWxba5+EtjyHWtUHTZ2KE3aS7YwxS+YAxKgekulQxSneYLH4tsqkCdf6/J3KNbIZuDLI/SlOv0yo8VcYKxIzvwqPwQ/XOG1tL3GMBPP4dvlCyZZk+/zd6oVmzZ1Us20WFYMC01P1oIybYAvLWVxMkNBWykpyk7Xhvleg76LM7JRyMfFENhCmFoeZNndM0zeDOOtP9q7DMuXB2awFp3/SP9OdROVbTCz4IZoNizTYn15hmzpV87dKQ3gAM7yAovPkCPoUy+79ucNBz5s56mtd2xE7FMDCri/ERHiqEAiP7hcqSEHtjc5DaGdEI/VUv499FZ1vismj9UCr8dYQ88x1LcJ79EJAryVyPpU0Meclpy36CsoTwmlte5QrOtTP9egQKYkcQJxqmHhWtnK/W5Tt9PT9fGOydmOi1xcbbzGndHJ9glPq3cGa3jQx7A5CR9xvmIATaNnok9QvyMRQ2dMU3U4sd9tJOaanPFV9oMWmz8XeGgk4kMbTSt+IPabzwq6qSbcVC/8XBF5jcuODvFOpEb2zPg3XPBCeWfCvGr+HTx/rX2iiedALVjuBrjNJ8LKD5QdnTijRxknHU1ky9Wd6QBAv2Ai9TUhu74Kd6u26v8U3SvXLEKKstglKOQkRFwmy1faQ+BIWo3MSho/EMnO31vJELOgdSUO2mrnQt4qELcm71SmWMhBaTunpJgSZm2rnIqghCTZPKD+R8soqObPjUows6Vu8jcA7b3Qo+Faj2PGY1KnyG+RLpM2nLgKcSxE/VQM0PzWtymcLn1BsobDSe/dExdbWlm6zLdwq0XzVpnSorPPrJvsmzvdUP8cS8EbNvwkWySam8G8siAIdqx7dv6kg2sn1aAF5lbQn5vfYd18tZAmhI7k3qup+eTONdbzsdlJ8HpmAvQtN2HvilQTsxf4F2FPcxQRt7Qh7Nd5Nj5ONRmdupv9rbfqYcU0yK/fqRV8vBB4uTTQ70Gx2eLLZsf/CnlyLDNOwsPIf0v1eJF/wH2LyfVgPrBVdiF7l3wyWFu6cJEodEh0vIHj7aocyIGIzQfhzmoG2mb0A8avtnqppvbD9qMmN3KScPzRJsHdGuUz3by7YrQzxzXYrg3yzXcoAfSEweb1/NXNh/qXx9GhgqaGpqy16kL8HFGHVDk1dpQVW+tTVnqq/wyTXCBfs91S/BMoSWIsIouomQ90I85cOGTr77R7CWMmTWA/NX1tw0lPFBnxJLC9XLP9JCY+aWoMyBxNllthl7DfOyxSoBf6xHm2yWelFl1/vlI+Y4qm1cp6/anPww6pEY1h3NNKBZnBT0KH+QlffBgFohnt6ZXMi/Z9UhkEPzXkBt2mVdVrlLq2yQTJrbH7fbKjbrPgF6ia+B8AGm5iR8uhqTb0f+4oohJ07xrMVsYctMmbNm9echpEL5DRgDm5nbJJgBxAPIDG0DB4a7YXU92qo5yg7E6PsVH16Za1ZWNI44oJ428vJVAanzrbSp96PPU/rHE/LN7TKtyF/8jSkzI85DecM24xssJZ7sSkv0FLQMH8KZri9KBbYxrOcnEytsl2r7NAqj2uVncbykRwHhlrcltqimsXP2nt8hbbO25p/VUE9DSSwOSx8v3XaQuauuGId7QofA+dmkUsv2kbKm4hd9KdbzO619hRI2fo1dmRNUgHJUnRljRkw6qypSwVheI7pg8Dw1hgrMNfV/hqlD6HJfSecWJJ8kx6YS+Spev8cYEwuU72n+kWmO9GZb9us3DPUlVE9FufS762uppvrRpNl5bNMmV5eMN/463GSkF4L9BfvY24p2djmIFKhqe2Wgn+9KFnltFWgZMQuQ4OqaxftBu5lakqfWR+U+G29mLgGgZ/F9pkcfues5ZKmDTptgF48tkZJb0yrtbFPJPRniLewXwwoOiNNgRlED8lxZ5tJyE0OwBzq/2cAK3/rTC0SbMtnpmCpbX4v+utcMDD1ZYQB5g4acxLHIzhqDSE+ZQqVN5Qf+tSV6tX6W5Ar9K0jwDpbuPiO36XbNH6h8QtOX+RTV3mq10PMM0sNfTGdvzL9N075kidmrxgj+Iyu8hJ1+SXqShn3iwmfulyvXJnH7eZxuwhXjBwFRDiYauyTQh8WNxziW0ZIET/Sq8msAuq+iE28MAtMwvLYVuaGVARg16I8Dv9KLYqW15/w1yxUB4v77z+/QBS9HPTPFh/FNKaKacySmL9KdmAco4MluhNOcTR7oxw8sKkvdiWNXIdVgjHJlLo3cSNeNYobvjaMFO3aiFSlsqUoZ5uPgcYWpqVNLyZo6TdfOWy+eSSLgGIUM8/VE02duwNMXGaGFmOYgp+d6ZjAAfFpXmXEG+W6gi9ImFgMhYfT3xHJ0phV0xtNPs3k0sJi/MNdhkytIStOUyf6KpuUG4m10xvyAqjJOTX0QEteQMCB6vzt/PehLqN+cZWpGOGMpX+ZIb5+IqG76+ErSKxdzN9KW10/ZiFlS4d43s1veltnl8IoWcx8oYu9/JvomeRWTdyaTcKpK/9I3KlPyy2YkaummSfxiWUMf09/ZHdOBPVTVrKmRHfm5vbUaprdYTzRmkT1fXzvYkOozsQHefyPy+/hwGY7FFG2sHoNC1GPDvJG0ng1s7CanAs0useucdYR85gAeDNxasMvwjTIyyUQeBPVCDVt4Lajfz/Ts965Zx1qZn4dNDhnHUukw0RZHks8vVaCjL7fPslFUHDVpEzd324nsen4VZPcYuIquSswut6PpxwxRNvHnZPZS/M3SH4y/0S4YLc6zGQpD65KbIMv/+GwFeyWaQqIvfNUx5kKNGNn9syeZe0A2pl/LSe06wRdBseWsjhyBFFzBASb7dwUoxWqoDbL9A2chTbluG6WKrm8XTS7E81MjWUNEkGZrjPip3NPW6FGiYDo3vXrTaejXRIjEau93lgB1ieeJ0afv7BZEukMULjQnpKm4IN5KZJPtH1eiqaegLJypcj+ivEspOFrXFDRg1YeYfhkw19L1yXhM1MfE+QLNwPxYVCy406TLUSVbVpZHTyhyxokPsELImC1M0AFM5mRcct61XsAY+nIPEHsQtk+rewAcrWVNZnTPZ5THfQ1PoWfZVOk38Eu41M9sM8ZoA2S+Tw1A39bndB+YJMe6IhlubWSzXrJ8bySQwcNreRtvWSlvoJX7EDMv8l5MKhVLtdKavFp5QG2Jk2PONpK2Zl3pV4L9BIfy4fa4/RSN9G7m2KB1cglE8w01M0x/2oi4gnWNpPv5UDU/tWGupswQlucGhNP39iFOFqVfYnl+tzBJlckSBBnRp8xNrMi8arfgDPQAktIaJ4oQeWKOawbdEVnLqW1W1Lx47n0sL98mEtERD4YNsdS60drFyKZECqsok/48IVmKwK00P0dnqooqFrm9fp4qJ+L9EB7LGvwlGARQ+6nPIRmawg0FX3bAkz5OvTAAWcDFT+et7coiAD8O4PfUyWz7UKGtA4ios4dQNzBorzvLd2Pw9vogeWgACUdebJCnv+Q8+CU76vTp43xEFUIoOjyoiB16nvK9pfnTFbZpv9P910RT3wGTYoOC72swXrZ8inU9/M37op449dyy/uoDBrFBHU49xadt21P1efQ9mWUtn3OIz6gD8UScP7x4wnk8fFZHyExfhV09dGW79qeY6mNgLsdAI96HcHzVuqPpV/F+b3/hGjf8Qd0tgUjEtr0vV/KTHzpdPwH/Bn0qoOW4vwfSfbsVLRuQNytB1aKlSu6jMRJ2lTFYmL40CAzWnci2pk+91ZjeHXVv9K84soyYp+eOpd9AhW9SvTG22p6G28Rp6fTdRWuD4ljuI7iukFcvgJn8vjCT6lB/C+h/9fR/4fM64fMexPP3ddDbfiZTAS5SRx9tsvIP+F7S0aB7OUwDwrnnIcWhyXnWGjiMC6zTVPrZFIYidxoAD6/21P1NxDJSrdDKhB1f5MeIG7mALE5mlpbsMNTBX2C8RZv/pErcI7Bm/7OWZI+bAal+qVd5q9qZuKTQqEkNlSb8t4CNtPLDuWpB/LK9uWpIq+slThn3Z6ntuSVNRPfXbJ6ChEgxEaorLUpDv0/etlm3Zm/xxeo9azcgey6NZwdi08D1Y26vyZPXZvnX62Orj6h3sVh2BAU4GFGOz+WqdXXt33BUEz0vFb3H8rz78sLtLddyVKD20ESt4funYHjzgbtTnf8Uv1Odx7hjgZC05onfgGXcROEaZPd8TTkvUyvPqGMpMe9lMF4qaCIXemrT87MIxZwN9HX+DB9souYQZgi7I73Rlk00alNzkSgwQ5tskuKIzgh5SzfbwdDkSugY8meTWDlU99Wf2AN5i8P8WDQpB7O1D2RLGTnCrvzCOvQJt4UEr++N4UfX/ZID9ZjZCorlzAs+MXyxFHU0ocQ/3bqVBK7Z8E0Jox8JNBrT7dg63xs53m1B8x9+1vy/CIykFlhNsVokgxxK2xF/M1O2qPhcFh88bMkt3RkdgrvOfwsXrhd/wyCLwFvWWvPfuBzJkg+/6vEeLY9aKqdKgWUAmvAPo0fdZwE5JKeOiFj+YOsQjiul7RD8/1Z3ucFTZV9Y5kO
*/