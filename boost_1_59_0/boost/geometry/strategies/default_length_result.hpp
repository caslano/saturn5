// Boost.Geometry (aka GGL, Generic Geometry Library)

// Copyright (c) 2007-2014 Barend Gehrels, Amsterdam, the Netherlands.
// Copyright (c) 2008-2014 Bruno Lalande, Paris, France.
// Copyright (c) 2009-2014 Mateusz Loskot, London, UK.

// This file was modified by Oracle on 2014-2021.
// Modifications copyright (c) 2014-2021, Oracle and/or its affiliates.
// Contributed and/or modified by Menelaos Karavelas, on behalf of Oracle
// Contributed and/or modified by Adam Wulkiewicz, on behalf of Oracle

// Parts of Boost.Geometry are redesigned from Geodan's Geographic Library
// (geolib/GGL), copyright (c) 1995-2010 Geodan, Amsterdam, the Netherlands.

// Use, modification and distribution is subject to the Boost Software License,
// Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_GEOMETRY_STRATEGIES_DEFAULT_LENGTH_RESULT_HPP
#define BOOST_GEOMETRY_STRATEGIES_DEFAULT_LENGTH_RESULT_HPP


#include <boost/geometry/algorithms/detail/select_geometry_type.hpp>
#include <boost/geometry/core/coordinate_type.hpp>
#include <boost/geometry/util/select_most_precise.hpp>
#include <boost/geometry/util/type_traits.hpp>


namespace boost { namespace geometry
{


namespace resolve_strategy
{

// NOTE: The implementation was simplified greately preserving the old
//   behavior. In general case the result types of Strategies should be
//   taken into account.
// It would probably be enough to use distance_result and
//   default_distance_result here.

} // namespace resolve_strategy


namespace resolve_dynamic
{

template <typename Sequence>
struct default_length_result_impl;

template <typename ...Geometries>
struct default_length_result_impl<util::type_sequence<Geometries...>>
{
    using type = typename select_most_precise
        <
            typename coordinate_type<Geometries>::type...,
            long double
        >::type;
};

template <typename Geometry>
struct default_length_result
    : default_length_result_impl<typename detail::geometry_types<Geometry>::type>
{};


} // namespace resolve_dynamic


/*!
    \brief Meta-function defining return type of length function
    \ingroup length
    \note Length of a line of integer coordinates can be double.
        So we take at least a double. If Big Number types are used,
        we take that type.

 */
template <typename Geometry>
struct default_length_result
    : resolve_dynamic::default_length_result<Geometry>
{};


}} // namespace boost::geometry

#endif // BOOST_GEOMETRY_STRATEGIES_DEFAULT_LENGTH_RESULT_HPP

/* default_length_result.hpp
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
*/