// Boost.Geometry (aka GGL, Generic Geometry Library)

// Copyright (c) 2015-2020, Oracle and/or its affiliates.

// Contributed and/or modified by Menelaos Karavelas, on behalf of Oracle
// Contributed and/or modified by Adam Wulkiewicz, on behalf of Oracle

// Licensed under the Boost Software License version 1.0.
// http://www.boost.org/users/license.html

#ifndef BOOST_GEOMETRY_GEOMETRIES_HELPER_GEOMETRY_HPP
#define BOOST_GEOMETRY_GEOMETRIES_HELPER_GEOMETRY_HPP


#include <boost/geometry/core/cs.hpp>
#include <boost/geometry/core/coordinate_dimension.hpp>
#include <boost/geometry/core/coordinate_type.hpp>
#include <boost/geometry/core/point_type.hpp>
#include <boost/geometry/core/tag.hpp>
#include <boost/geometry/core/tags.hpp>

#include <boost/geometry/geometries/box.hpp>
#include <boost/geometry/geometries/point.hpp>

#include <boost/geometry/algorithms/not_implemented.hpp>


namespace boost { namespace geometry
{

namespace detail { namespace helper_geometries
{

template
<
    typename Point,
    typename NewCoordinateType,
    typename NewUnits,
    typename CS_Tag = typename cs_tag<Point>::type
>
struct helper_point
{
    typedef model::point
        <
            NewCoordinateType,
            dimension<Point>::value,
            typename cs_tag_to_coordinate_system<NewUnits, CS_Tag>::type
        > type;
};


}} // detail::helper_geometries


namespace detail_dispatch
{


template
<
    typename Geometry,
    typename NewCoordinateType,
    typename NewUnits,
    typename Tag = typename tag<Geometry>::type>
struct helper_geometry : not_implemented<Geometry>
{};


template <typename Point, typename NewCoordinateType, typename NewUnits>
struct helper_geometry<Point, NewCoordinateType, NewUnits, point_tag>
{
    typedef typename detail::helper_geometries::helper_point
        <
            Point, NewCoordinateType, NewUnits
        >::type type;
};


template <typename Box, typename NewCoordinateType, typename NewUnits>
struct helper_geometry<Box, NewCoordinateType, NewUnits, box_tag>
{
    typedef model::box
        <
            typename helper_geometry
                <
                    typename point_type<Box>::type, NewCoordinateType, NewUnits
                >::type
        > type;
};


} // detail_dispatch


// Meta-function that provides a new helper geometry of the same kind as
// the input geometry and the same coordinate system type,
// but with a possibly different coordinate type and coordinate system units
template
<
    typename Geometry,
    typename NewCoordinateType = typename coordinate_type<Geometry>::type,
    typename NewUnits = typename detail::cs_angular_units<Geometry>::type
>
struct helper_geometry
{
    typedef typename detail_dispatch::helper_geometry
        <
            Geometry, NewCoordinateType, NewUnits
        >::type type;
};


}} // namespace boost::geometry

#endif // BOOST_GEOMETRY_GEOMETRIES_HELPER_GEOMETRY_HPP

/* helper_geometry.hpp
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
*/