// Boost.Geometry (aka GGL, Generic Geometry Library)

// Copyright (c) 2007-2012 Barend Gehrels, Amsterdam, the Netherlands.
// Copyright (c) 2008-2012 Bruno Lalande, Paris, France.
// Copyright (c) 2009-2012 Mateusz Loskot, London, UK.
// Copyright (c) 2014 Adam Wulkiewicz, Lodz, Poland.

// Parts of Boost.Geometry are redesigned from Geodan's Geographic Library
// (geolib/GGL), copyright (c) 1995-2010 Geodan, Amsterdam, the Netherlands.

// Use, modification and distribution is subject to the Boost Software License,
// Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_GEOMETRY_GEOMETRIES_MULTI_POLYGON_HPP
#define BOOST_GEOMETRY_GEOMETRIES_MULTI_POLYGON_HPP

#include <memory>
#include <vector>

#include <boost/concept/requires.hpp>

#include <boost/geometry/core/tags.hpp>
#include <boost/geometry/geometries/concepts/polygon_concept.hpp>

#include <boost/config.hpp>
#ifndef BOOST_NO_CXX11_HDR_INITIALIZER_LIST
#include <initializer_list>
#endif

namespace boost { namespace geometry
{

namespace model
{

/*!
\brief multi_polygon, a collection of polygons
\details Multi-polygon can be used to group polygons belonging to each other,
        e.g. Hawaii
\ingroup geometries

\qbk{[include reference/geometries/multi_polygon.qbk]}
\qbk{before.synopsis,
[heading Model of]
[link geometry.reference.concepts.concept_multi_polygon MultiPolygon Concept]
}
*/
template
<
    typename Polygon,
    template<typename, typename> class Container = std::vector,
    template<typename> class Allocator = std::allocator
>
class multi_polygon : public Container<Polygon, Allocator<Polygon> >
{
    BOOST_CONCEPT_ASSERT( (concepts::Polygon<Polygon>) );

#ifndef BOOST_NO_CXX11_HDR_INITIALIZER_LIST

    // default constructor and base_type definitions are required only
    // if the constructor taking std::initializer_list is defined

    typedef Container<Polygon, Allocator<Polygon> > base_type;

public:
    /// \constructor_default{multi_polygon}
    multi_polygon()
        : base_type()
    {}

    /// \constructor_initializer_list{multi_polygon}
    inline multi_polygon(std::initializer_list<Polygon> l)
        : base_type(l.begin(), l.end())
    {}

// Commented out for now in order to support Boost.Assign
// Without this assignment operator first the object should be created
//   from initializer list, then it shoudl be moved.
//// Without this workaround in MSVC the assignment operator is ambiguous
//#ifndef BOOST_MSVC
//    /// \assignment_initializer_list{multi_polygon}
//    inline multi_polygon & operator=(std::initializer_list<Polygon> l)
//    {
//        base_type::assign(l.begin(), l.end());
//        return *this;
//    }
//#endif

#endif
};


} // namespace model


#ifndef DOXYGEN_NO_TRAITS_SPECIALIZATIONS
namespace traits
{

template
<
    typename Polygon,
    template<typename, typename> class Container,
    template<typename> class Allocator
>
struct tag< model::multi_polygon<Polygon, Container, Allocator> >
{
    typedef multi_polygon_tag type;
};

} // namespace traits
#endif // DOXYGEN_NO_TRAITS_SPECIALIZATIONS

}} // namespace boost::geometry

#endif // BOOST_GEOMETRY_GEOMETRIES_MULTI_POLYGON_HPP

/* multi_polygon.hpp
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
*/