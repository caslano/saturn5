// Boost.Geometry (aka GGL, Generic Geometry Library)

// Copyright (c) 2010 Alfredo Correa
// Copyright (c) 2010-2012 Barend Gehrels, Amsterdam, the Netherlands.

// This file was modified by Oracle on 2020.
// Modifications copyright (c) 2020 Oracle and/or its affiliates.
// Contributed and/or modified by Adam Wulkiewicz, on behalf of Oracle

// Use, modification and distribution is subject to the Boost Software License,
// Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_GEOMETRY_GEOMETRIES_ADAPTED_BOOST_ARRAY_HPP
#define BOOST_GEOMETRY_GEOMETRIES_ADAPTED_BOOST_ARRAY_HPP


#ifdef BOOST_GEOMETRY_ADAPTED_BOOST_ARRAY_TAG_DEFINED
#error Include either "boost_array_as_point" or \
    "boost_array_as_linestring" or "boost_array_as_ring" \
    or "boost_array_as_multi_point" to adapt a boost_array
#endif

#define BOOST_GEOMETRY_ADAPTED_BOOST_ARRAY_TAG_DEFINED


#include <cstddef>
#include <type_traits>

#include <boost/geometry/core/access.hpp>
#include <boost/geometry/core/cs.hpp>
#include <boost/geometry/core/coordinate_dimension.hpp>
#include <boost/geometry/core/coordinate_type.hpp>
#include <boost/geometry/core/tags.hpp>

#include <boost/array.hpp>

namespace boost { namespace geometry
{


#ifndef DOXYGEN_NO_TRAITS_SPECIALIZATIONS
namespace traits
{


#ifndef DOXYGEN_NO_DETAIL
namespace detail
{


// Create class and specialization to indicate the tag
// for normal cases and the case that the type of the c-array is arithmetic
template <bool>
struct boost_array_tag
{
    typedef geometry_not_recognized_tag type;
};


template <>
struct boost_array_tag<true>
{
    typedef point_tag type;
};


} // namespace detail
#endif // DOXYGEN_NO_DETAIL


// Assign the point-tag, preventing arrays of points getting a point-tag
template <typename CoordinateType, std::size_t DimensionCount>
struct tag<boost::array<CoordinateType, DimensionCount> >
    : detail::boost_array_tag<std::is_arithmetic<CoordinateType>::value> {};


template <typename CoordinateType, std::size_t DimensionCount>
struct coordinate_type<boost::array<CoordinateType, DimensionCount> >
{
    typedef CoordinateType type;
};


template <typename CoordinateType, std::size_t DimensionCount>
struct dimension<boost::array<CoordinateType, DimensionCount> >
    : std::integral_constant<std::size_t, DimensionCount>
{};


template <typename CoordinateType, std::size_t DimensionCount, std::size_t Dimension>
struct access<boost::array<CoordinateType, DimensionCount>, Dimension>
{
    static inline CoordinateType get(boost::array<CoordinateType, DimensionCount> const& a)
    {
        return a[Dimension];
    }

    static inline void set(boost::array<CoordinateType, DimensionCount>& a,
        CoordinateType const& value)
    {
        a[Dimension] = value;
    }
};


} // namespace traits
#endif // DOXYGEN_NO_TRAITS_SPECIALIZATIONS


}} // namespace boost::geometry


#define BOOST_GEOMETRY_REGISTER_BOOST_ARRAY_CS(CoordinateSystem) \
    namespace boost { namespace geometry { namespace traits { \
    template <class T, std::size_t N> \
    struct coordinate_system<boost::array<T, N> > \
    { \
        typedef CoordinateSystem type; \
    }; \
    }}}


#endif // BOOST_GEOMETRY_GEOMETRIES_ADAPTED_BOOST_ARRAY_HPP


/* boost_array.hpp
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
*/