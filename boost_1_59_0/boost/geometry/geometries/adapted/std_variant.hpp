// Boost.Geometry

// Copyright (c) 2021, Oracle and/or its affiliates.

// Contributed and/or modified by Adam Wulkiewicz, on behalf of Oracle

// Licensed under the Boost Software License version 1.0.
// http://www.boost.org/users/license.html

#ifndef BOOST_GEOMETRY_GEOMETRIES_ADAPTED_STD_VARIANT_HPP
#define BOOST_GEOMETRY_GEOMETRIES_ADAPTED_STD_VARIANT_HPP


#include <boost/config.hpp>

#ifndef BOOST_NO_CXX17_HDR_VARIANT


#include <utility>
#include <variant>

#include <boost/geometry/core/geometry_types.hpp>
#include <boost/geometry/core/tag.hpp>
#include <boost/geometry/core/tags.hpp>
#include <boost/geometry/core/visit.hpp>
#include <boost/geometry/util/sequence.hpp>


namespace boost { namespace geometry
{

namespace traits
{

template <typename ...Ts>
struct tag<std::variant<Ts...>>
{
    using type = dynamic_geometry_tag;
};

template <typename ...Ts>
struct visit<std::variant<Ts...>>
{
    template <typename Function, typename Variant>
    static void apply(Function && function, Variant && variant)
    {
        std::visit(std::forward<Function>(function),
                   std::forward<Variant>(variant));
    }
};

template <typename ...Ts, typename ...Us>
struct visit<std::variant<Ts...>, std::variant<Us...>>
{
    template <typename Function, typename Variant1, typename Variant2>
    static void apply(Function && function, Variant1 && variant1, Variant2 && variant2)
    {
        std::visit(std::forward<Function>(function),
                   std::forward<Variant1>(variant1),
                   std::forward<Variant2>(variant2));
    }
};

template <typename ...Ts>
struct geometry_types<std::variant<Ts...>>
{
    using type = util::type_sequence<Ts...>;
};


} // namespace traits


}} // namespace boost::geometry


#endif // BOOST_NO_CXX17_HDR_VARIANT


#endif // BOOST_GEOMETRY_GEOMETRIES_ADAPTED_STD_VARIANT_HPP

/* std_variant.hpp
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
*/