// Boost.Geometry (aka GGL, Generic Geometry Library)

// Copyright (c) 2010 Alfredo Correa
// Copyright (c) 2010-2012 Barend Gehrels, Amsterdam, the Netherlands.
// Copyright (c) 2016 Norbert Wenzel

// This file was modified by Oracle on 2020.
// Modifications copyright (c) 2020, Oracle and/or its affiliates.
// Contributed and/or modified by Adam Wulkiewicz, on behalf of Oracle

// Use, modification and distribution is subject to the Boost Software License,
// Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_GEOMETRY_GEOMETRIES_ADAPTED_STD_ARRAY_HPP
#define BOOST_GEOMETRY_GEOMETRIES_ADAPTED_STD_ARRAY_HPP


#include <boost/config.hpp>


#ifndef BOOST_NO_CXX11_HDR_ARRAY


#define BOOST_GEOMETRY_ADAPTED_STD_ARRAY_TAG_DEFINED


#include <array>
#include <cstddef>
#include <type_traits>

#include <boost/geometry/core/access.hpp>
#include <boost/geometry/core/cs.hpp>
#include <boost/geometry/core/coordinate_dimension.hpp>
#include <boost/geometry/core/coordinate_type.hpp>
#include <boost/geometry/core/tags.hpp>


namespace boost { namespace geometry
{


#ifndef DOXYGEN_NO_TRAITS_SPECIALIZATIONS
namespace traits
{


#ifndef DOXYGEN_NO_DETAIL
namespace detail
{


// Create class and specialization to indicate the tag
// for normal cases and the case that the type of the std-array is arithmetic
template <bool>
struct std_array_tag
{
    typedef geometry_not_recognized_tag type;
};


template <>
struct std_array_tag<true>
{
    typedef point_tag type;
};


} // namespace detail
#endif // DOXYGEN_NO_DETAIL


// Assign the point-tag, preventing arrays of points getting a point-tag
template <typename CoordinateType, std::size_t DimensionCount>
struct tag<std::array<CoordinateType, DimensionCount> >
    : detail::std_array_tag<std::is_arithmetic<CoordinateType>::value> {};


template <typename CoordinateType, std::size_t DimensionCount>
struct coordinate_type<std::array<CoordinateType, DimensionCount> >
{
    typedef CoordinateType type;
};


template <typename CoordinateType, std::size_t DimensionCount>
struct dimension<std::array<CoordinateType, DimensionCount> >
    : std::integral_constant<std::size_t, DimensionCount>
{};


template <typename CoordinateType, std::size_t DimensionCount, std::size_t Dimension>
struct access<std::array<CoordinateType, DimensionCount>, Dimension>
{
    static inline CoordinateType get(std::array<CoordinateType, DimensionCount> const& a)
    {
        return a[Dimension];
    }

    static inline void set(std::array<CoordinateType, DimensionCount>& a,
        CoordinateType const& value)
    {
        a[Dimension] = value;
    }
};


} // namespace traits
#endif // DOXYGEN_NO_TRAITS_SPECIALIZATIONS


}} // namespace boost::geometry


#define BOOST_GEOMETRY_REGISTER_STD_ARRAY_CS(CoordinateSystem) \
    namespace boost { namespace geometry { namespace traits { \
    template <class T, std::size_t N> \
    struct coordinate_system<std::array<T, N> > \
    { \
        typedef CoordinateSystem type; \
    }; \
    }}}


#else


#warning "This file requires compiler and library support for the ISO C++ 2011 standard."


#endif // BOOST_NO_CXX11_HDR_ARRAY


#endif // BOOST_GEOMETRY_GEOMETRIES_ADAPTED_STD_ARRAY_HPP


/* std_array.hpp
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
*/