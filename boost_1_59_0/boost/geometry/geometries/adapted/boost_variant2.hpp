// Boost.Geometry

// Copyright (c) 2021, Oracle and/or its affiliates.

// Contributed and/or modified by Adam Wulkiewicz, on behalf of Oracle

// Licensed under the Boost Software License version 1.0.
// http://www.boost.org/users/license.html

#ifndef BOOST_GEOMETRY_GEOMETRIES_ADAPTED_BOOST_VARIANT2_HPP
#define BOOST_GEOMETRY_GEOMETRIES_ADAPTED_BOOST_VARIANT2_HPP


#include <utility>

#include <boost/variant2/variant.hpp>

#include <boost/geometry/core/geometry_types.hpp>
#include <boost/geometry/core/tag.hpp>
#include <boost/geometry/core/tags.hpp>
#include <boost/geometry/core/visit.hpp>
#include <boost/geometry/util/sequence.hpp>


namespace boost { namespace geometry
{

namespace traits
{

template <typename ...Ts>
struct tag<boost::variant2::variant<Ts...>>
{
    using type = dynamic_geometry_tag;
};

template <typename ...Ts>
struct visit<boost::variant2::variant<Ts...>>
{
    template <typename Function, typename Variant>
    static void apply(Function && function, Variant && variant)
    {
        boost::variant2::visit(std::forward<Function>(function),
                               std::forward<Variant>(variant));
    }
};

template <typename ...Ts, typename ...Us>
struct visit<boost::variant2::variant<Ts...>, boost::variant2::variant<Us...>>
{
    template <typename Function, typename Variant1, typename Variant2>
    static void apply(Function && function, Variant1 && variant1, Variant2 && variant2)
    {
        boost::variant2::visit(std::forward<Function>(function),
                               std::forward<Variant1>(variant1),
                               std::forward<Variant2>(variant2));
    }
};

template <typename ...Ts>
struct geometry_types<boost::variant2::variant<Ts...>>
{
    using type = util::type_sequence<Ts...>;
};


} // namespace traits


}} // namespace boost::geometry


#endif // BOOST_GEOMETRY_GEOMETRIES_ADAPTED_BOOST_VARIANT2_HPP

/* boost_variant2.hpp
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
*/