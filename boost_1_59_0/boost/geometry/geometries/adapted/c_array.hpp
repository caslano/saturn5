// Boost.Geometry (aka GGL, Generic Geometry Library)

// Copyright (c) 2008-2012 Bruno Lalande, Paris, France.
// Copyright (c) 2007-2012 Barend Gehrels, Amsterdam, the Netherlands.
// Copyright (c) 2009-2012 Mateusz Loskot, London, UK.

// This file was modified by Oracle on 2020.
// Modifications copyright (c) 2020 Oracle and/or its affiliates.
// Contributed and/or modified by Adam Wulkiewicz, on behalf of Oracle

// Parts of Boost.Geometry are redesigned from Geodan's Geographic Library
// (geolib/GGL), copyright (c) 1995-2010 Geodan, Amsterdam, the Netherlands.

// Use, modification and distribution is subject to the Boost Software License,
// Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_GEOMETRY_GEOMETRIES_ADAPTED_C_ARRAY_HPP
#define BOOST_GEOMETRY_GEOMETRIES_ADAPTED_C_ARRAY_HPP

#include <cstddef>
#include <type_traits>

#include <boost/geometry/core/access.hpp>
#include <boost/geometry/core/cs.hpp>
#include <boost/geometry/core/coordinate_dimension.hpp>
#include <boost/geometry/core/coordinate_type.hpp>
#include <boost/geometry/core/tags.hpp>

namespace boost { namespace geometry
{


#ifndef DOXYGEN_NO_TRAITS_SPECIALIZATIONS
namespace traits
{


#ifndef DOXYGEN_NO_DETAIL
namespace detail
{


// Create class and specialization to indicate the tag
// for normal cases and the case that the type of the c-array is arithmetic
template <bool>
struct c_array_tag
{
    typedef geometry_not_recognized_tag type;
};


template <>
struct c_array_tag<true>
{
    typedef point_tag type;
};


} // namespace detail
#endif // DOXYGEN_NO_DETAIL


// Assign the point-tag, preventing arrays of points getting a point-tag
template <typename CoordinateType, std::size_t DimensionCount>
struct tag<CoordinateType[DimensionCount]>
    : detail::c_array_tag<std::is_arithmetic<CoordinateType>::value> {};


template <typename CoordinateType, std::size_t DimensionCount>
struct coordinate_type<CoordinateType[DimensionCount]>
{
    typedef CoordinateType type;
};


template <typename CoordinateType, std::size_t DimensionCount>
struct dimension<CoordinateType[DimensionCount]>
    : std::integral_constant<std::size_t, DimensionCount>
{};


template <typename CoordinateType, std::size_t DimensionCount, std::size_t Dimension>
struct access<CoordinateType[DimensionCount], Dimension>
{
    static inline CoordinateType get(CoordinateType const p[DimensionCount])
    {
        return p[Dimension];
    }

    static inline void set(CoordinateType p[DimensionCount],
        CoordinateType const& value)
    {
        p[Dimension] = value;
    }
};


} // namespace traits
#endif // DOXYGEN_NO_TRAITS_SPECIALIZATIONS


}} // namespace boost::geometry


#define BOOST_GEOMETRY_REGISTER_C_ARRAY_CS(CoordinateSystem) \
    namespace boost { namespace geometry { namespace traits { \
    template <typename T, std::size_t N> \
    struct coordinate_system<T[N]> \
    { \
        typedef CoordinateSystem type; \
    }; \
    }}}


#endif // BOOST_GEOMETRY_GEOMETRIES_ADAPTED_C_ARRAY_HPP

/* c_array.hpp
4rDN9L64B0wRRMDDtOhM9GB3rlU9is9ik3dnkEhBarB26YCanzg3UCFgFjC6R6VweGDU1lAgbXM+NY8LL++koSFX9ioMq8cm6+UNZcnO6f0MZzfJJCu8v1R505ng2qQGIelQxpRglJtXzjeiRBJxy7pmlxmzgDxfAuRZwb3s+4QF5H75Q59xYXNZN7oiH+E/KpAg1H4aXAoIqdnHW8O6S5Tf8Na1zzZ9KaEi7HIDw9fI62hG6YZ70fuVN0UrYzEtQxGTQcNIN4ik3ryUVT5hqOAWw1TzBSeoCX/mjvhpV/iU9Qw0ykDY+VKbUSK7wpQsJmMvPbZlP2RLwbDobh5NC/U6gAQTlBQr8XeUUylFFQLg1TYs232wXJQyFDHl0twPQeKVEBB0+ygN0h5KZH35VdFHGYc7/OQw6+A1MaqwYjAMt74piasgFqfZNZrbz7p61m9t1QvjFXIyvsvPdyPHFp0xeEapqkPOguZyHUSUbqSdx3l5+KhjC/lKPG0rOuyQp63vwT0++BwO/he/SOhNviOgTVahfTYHQPXPtb8KEsmKiUt+TiY/bsaUxNVXAUZ6lf5zeme8A0YSzpQ02sokxJj4wPF+96HiIbnAeody6w/60K3kiUe0fxHO503fpAkuFusvaLrnghm6c2k3u097Zr1mBKfnFiVRz6PlM4MP3p/71C93jQ8ArxkeBP1Lo5h+wabs+Hns2SAElZ+/QVsznGw0gDD+xmRAidbhoPktd9erAXYyEbCr5b7d+CmNmmqVttRpDoTVfB3l+U/FSzaBhOfsymFsHRBsCxT1bckF32ixcpmfOf7b7ptqz6GEzDhFe5G2KDFL1Da3qKNqisZQEjSYrLe25hmxUxasFeXGFHo9vw++tIWknanIgF78pI0ptn1VwOYXjIUQZ1qS0Ni7IUD5a24jq7zRWdG+HHVwNPAeG5ePDrrSVy127P3XQ1+pIGjf8apx6C9JLs3JjkDAuXTu1iYGi/QUN70wP5makUvAOqpcftoUodTxvQUU7417bOO5HtPMdKVXRo6Vvu+LKbuGGMqIqZ7lHaEjARtRNnkf85PVad25g/02bSGmmtC1k0agBaJ+REpOO/kfGDF07ckjCI/kTyKFVWO/f81+Rnx3SXsbeUdquvXMQdGEE4lGSoqy51xMJN0hmHYL6ExGRkbgqCwK+RWECOEXPx+65gueelMm2IvgbYWiGYSgFaj84Bw8MvzzLpJfKEFxhYR84wwMDCelP1sL3hYWpgYcCe4TRStZX73Jg8PraUjLRwJBsBVtX82xaD7egaJSmH3hERGEUvjHI2o4OV7sIkUHOVZXFO0j4DN0QlR1YkklYpDt4fN9XJPPT09a1+uLxN2qxjLuK5nhckCiZ2S5SjRQXtJ28eR4ZApFRshwO+eWCRs3PzkAbxUWw75ZdE1ErK8p4RcOBkLd4GGQuzGzIiasdN35O83wf46s37zh5EaDvrH+xcnPvTMnnIb5WgL4JQEc8qjbUTqDp3P/RFoJZ60T0NbzSIUg6L00dxgoyZCf/dLeftd+3/5U/qK/xHBLcmEgSUEHupopOF9KNJAA9uFs/o4f+wUJSJWT3zZZAVtcbgIDjlmmtnqLQtb5o7nJ8sSE7ofHUrli9DGvRH+4YEJiIJTeMtFbmz3aYWDybs999MjDJPX4POzcLyc7hHMFg6U+l/WgISmWEzY8aUPDwL36VzNIsiY8eJABnuOqOOjKp1Cok/kefTsFYe2DrThEaeWQvm887+PeIdzf5XgDc/XD/AYoqKmF4d3U4U2Fj4UDpb8lrR304NQ2qft07rC64RFdfZUm0CvWn6LYTQO1EH8ZGMLS9HjL1J4MI3lxluQ9rLw8XkuGb9hW92SGBoylsA84EloRrKn7RdC4tni7k3/sHP6+bsJ/TcSimqTA+6fFQt8PskgV2j6cxMhJKB5PN57LnPPJJFzC1T2lNz89mS+O1/UwuPg+E59ZVypKDmOY+pZO8tM22W+WgML18y6u3xJPp2dsejE6QU9YmvMZt/N0ss1hALeDX1CxA90/PupUFLJgeIdLX7QVPJ7Dc+rmWySzM6WkGthUxW4bsXe97D80KAgqBGSZkpp5sGLVSVG7PZ7IxteSCL8SDGs0kYI7+5FStKaqJZwrTSYFqUrxYndl9DuuH8yNNRZOG3T0lkiT3QeR1R2DIIyMbb7UsDN2LQ3SuvRCYcKvl5zP0nhfnZzzzvS/BWSV87fhMfl1+YdfyAURJUoD/U7F/EazZv3+G5jvUN1wq0wy6/UBqhxrstU1Yk4NQ0kvyGkpnf43CLjYzNNGy1UBIJTev68I7ecdknF6LIAYaRJGluVdGbojJd2htITKx9VZ+h4qa11GnUE8jO3kPg8RSkOB9NDHPI8sKSERibKhRDFZ0FQEb3LaG5NOAwErGKoss1TnQg1wQnGoiw7nhvunt67rZEbTbd8+RfztXFuyr42plbxS2t8BiFpow1BEl9xTrj172TYTBTgeeNEZf6PT9d5u6q7b7+St3VFFGnOR4Lm6ATiix5YCUtk3PCfCRjhDJzToiiECIwyjh7n27IlGw6RK2La0W5Oe/jqCXOSFB47RLcDE1jrQ+HMtb3bNWlWtjeEkq7+WE/KjY4t05UmP6jB1U2wIjNBO/42rpWgbmTBhBPqw3Ztd+JApDGNKdnSju0V3TeqHpcqnJcqif9qN7jnSgnKTowYi1w8COouodVAw1xYCoHhGhzMQKxPLyGBuMiVjeILRvuV4axxdqHfi7sldM7kTadPDmN2FwsWmpyjudCzeNtf3btEdLu1M3RyDFOaOJx/mm16XkfRPptdX1XtdQJK7Qzo9SyfXyHKU9senIgB8CJJISDvqsimRy9B7pilG0O4YZXDwNfe3Q5CqzT+8hXbK5ia48/irAVGXmmPzGaqVws4+MWevjzwXMOJvYIqasultWkKtm7mBb/v7WHkGEwCuqcam6pAJG35eFKjyDhCyDeF2o/w6DO3UCg300nauTy9x2XBgenSR94PGB1y8J0s1b/2AHJ9wlQp6VS+657WYfbi8NSFNbG2zJdZAgE/pSMWSCYGzj6QOx2NksY9+LTW4m07oUJnSAJ+0waR2TOOdYjw7BQAskYQXMo+MlSNqkZicfMw7N52WQ2hm6yGpC3Ab/zOWcQbcCGK+q60w0cjfkQExJBldKC0NW+m1FXn3ov+mfTonq5WkAu11HGGTpbHBX2Y2EbCjS2V17z+nuPRpvFJQbPR4sNdwANDPcpK/kLIPlcW3/7bCcDPHuXPsXfNjd+nc/0n10wgHNmpevnDuHwRmBSosbD2RcsyZBITfCqfb5ua2Xi0uE+8Cf5zc9yuSgmolaXkOAl71aBWyc821egOgeGaiIvTC/SHrO3CvedbzfdwrmgR+iS0teHsbBDHRccd2yBkyN8+ALsRdkVgmpBuDW6fnB4Chto7i9lx9oyYfmDejz4NGL+lJSavsKsvFjFzW6O15/UKxHKMVyDTK0sG+3Ym5PVLonpdBXBSJ43DocahLFQ2Yr97Qo36u+MwZ7MOkqXFdj8cTSzXixrMVrkzYo8foZGpo12WMg/qQ0c7HFm3yS+/YqzxoWEGkfvbpbHNytlS+JFLG9vmC79ousEGrA3kUYOCNeISdFOvZcB55Eat1dLlat7EoPGmLg9vr1+Na4+XTPaeH3+iT/Wu+rz6oH1X82qID5fR7MwGsz7dR75TJHRT92A2j0cHgVm/tegWhPtC6af9+YLMt4vThg97tKAunqL27smFuwlr4aq4Dw/+rPpMKeDbMAdbPjQM/ulEFDScsXIilJYNY2doxBNDvX2akcP+cmvUOi1Nse2CmIFNq1VUhonbzMhpRCWLWH18FeUsEvvPq4LzOYV/+FCOBy63yPffoP14i//vcBo6jftRX5ST+E+nWJHECly24n396stNrE3I+Pz9PEB1WzMVIKRnETL9OW+Juxv1PRydWkaIqOrL+pOJVYY/MRe2EZ16e+w96iiJBOeKDibn7Cu/+nDuB97c2a+5gIM7qKeaMUfHMS1Tqa2iEv4Vib+dmDBmsczrzuVGGgFq7fCR0JesZFTJkMYbiKtN6bXyhtr0d4X2GMBq12iquV8aA12ET009OjV/hsYFWM84Albf2ABhBc6AFszPhxGGJqwHwM+EoY/XT6ZLQG/FeVzNz6sEfZtw0PnEP432ojcCPIKB/snUkt4l8r4mbL90UoMMhiPZ6EMKZ4MV0orBqKE6wnW+YHz2L7zbZCiJPJbpxqPnjZ0Zin9MwYEq9ytOpWk1vaySPLyWKFmus/fnKbeZKcNeNB6XpBq7qxVa1LYWCnoO31+zGEIuN01UNuYtdMfZkzGBK2ojNof5f/a3Kps6LtOrPl6WbpcsN1QjhJWiJaSpWxpxIzXnja56ik5HMimwlJHZb8U53FstQ5nCqnGeY4FIbqRJUebM/B4liUoBzq9LUs4xLDKwVcIdqGrbf5uk/zsc9n3t1LhHNJpFBSLFuk4R91+4xkVuI1GAfbo6J4vsHA7BXg8eWAdDoLydsnI1Cw/fyM+Vzo6LLE+SRj48GeZS2MyzfukKgiUwer6KTZlPj8F1iKfaJnSucAkYp6IhCgVruSrDEQ0zJ+N/xbR1SnhqYn4E1QVXRy+0VdbdCFjdR7VMylzGXKqsE6RFhCSjtzx4I7g32JiNGSQVpKRj3TcNcGoGQksnO+LOyR+1c/F2rRzJN56VcUERR5R5gQThnrQl2jmBH3kZUUEF+nOllGYkDEC8+DZ4C10g1BxDZJH8xEbhQ6EC34iST/uV1qe6D5KR2WlI3Z7NpkJjuUVgOy1j4nzTkEDvWvs/qdXH3KQqiqvF+LKZ+HKTGK2VFk1m//mjsaDncCgaE9NjfBHA6u3drPXZ17fnjNyjCkR9xLsksDMr6q+HlDunj4b7FtH1Ff3HOi4pb9V+EJszwptJ59aXAzqj7IhO5Ifh6/Tn/SKN66huwiF177zXtvsU5xr10RdGeGNtGpDxsJc4c2iTL2iMBicK+RZwjb9Z0T/2VLM6vty8Kv+M4DOW/e7GWcVbdQYJmdt4YU6mQnVa6jAAv8BxX/xECMO8O2ZBceYJugG6iIk/f+9TadIz+HPH67V9P55+n6YelldIcg7UN2uPrWC4DrsauOylchi0ZAKQD+lWrltaleGUvqgeNp+8n40aEbd4HOY1Ti3D1Ciaa4njAIGt8HOR9xn72XOWtt1U9Ire6RDP65AGz/XWI2XhFe7G7LIiEOF69Hl8co1hqLv1heU/wFW4R+kvnKiiC3nv9dlq+ea2Gltdtc26dOruUeVYwUhq5X1rS5bZ7p8xa+RdkvJftYuWesRJaxX7nHknrAzW2cX09leVKctcWi8yNpCrnOVh4gEO07Q9AbPDQYHAnBegsuQ007HU1fI4zlUw+MjCQNrpEwuvwa80OzSo4vhYTA7m1HVz18TKgNNm9LiN1yxVBDg2ecwS/suXTqBAcVBvQE8CFRL6Sz2haTfdFBZH5mWJe8GPW/TBN82MFiN3oiliHguVrSTf5rZoGW/3WGsWURY87mhKj+mW6iYWjujx4Q93c8I0Rv7I5uVd5MQsnHA5E0wArXdAEEaJwA0AvdkFwSOAZNq12qDNjL31tFh4gD8B95an7x6JGcdqINWd3VxyJFZ6Se1cP9w5tsxFYjXC9teog8RxpqX7tLOBvzRhesxezKOUfwLtyZuEPnVTlaOGdVp24pmKBwbYlYe/IQgDx+cNGkouAOVlkfqokLuqg0emnudercb9Z4GDpFWbfNj2zb6s+2cKibKCgOPlelzLPUbWCSczincr7GwuRFWCX39BG4aQ6cuiSROZQN/PdRjY/6swP1VIThlOjVRtDNOJDC7F0lyU5ObqwXvzGvCiogrt+OeiaWaA0rhxgkn0kddkony8/Z725GKmA7+coGq2Y072DnHcWuuvwIMQ2iaCTM+RaHaUXu6lH4D1QAxC6IzD6zIhKztbDngUCkR1G1fiAFOjCwFmFwdOb/ijxIfzv3lUdgE1JnRsGNsiCleJ3KJVTFKNbCSwMJBXj2GKSafOMcJ1YyiUmx2LWzXd53/3Xc238saORWnlG6U/Nz16At92bEjglqKG5SfyRjs6VdVPNqVGF/KUtkXCP+WI1416tKanAHE/DhWSn9ybmtdQd2f3jHBMhjjVUErzkVopFyhXMeQymw9tFyqClf666nh4ca4ctu2djGDVikQHsgCwcfvR9wHo3/b/LS6B7y893qy5Mfc/NLLRFkSNiUFidfbf4xncs0S47mgQYjNiXudT7AVe9INb8NOd3elbYnxBe+mTRYsaFbsRiuc5xx1uIGMkc+ajaf5xqEQW0CKrOQFOEHof/Pp6ZX5iHd7io3x9Crh+UiDXbZcgBLm5xY8JtzjxOxIztQiNGe3huLYotfubFlby4MwSZD8ZIUqKA+0SnBHCv7KOn+KEKm25fpgjyPKQ0ScvsG111zf0xQ7GwI+toQNoOxihj1uCiDaqyT42gX0MUnBtjc+K1W3jrAKx88bZkUKDsmmIxQl3A8hN6Z9zjQ3A/xboLu1HC8j4Nr9Vlv+26ifqQCAhIYYEA9C90Lq4OtI0S03lygNghaAjIVDk0kGV6gy9jYcqiQi8DtzDCnPNbOCiV2lseA6+q7XT5Pez4GkzkSyopqQlAglyAuClg3sVj65LoAviQolLlInMEBc2uqKDdXJd3lFqSVxlpz0Sj/e2ilEd4g2cP4Y3R55fN0PVEBympdpVj3mujfb6l6SuFw7tYMQOadlRqnougBKyT/pnoHIm+cVvLPIHtbXXdaqRkz/0TYBNiIMIE5vBqAkE6Wfd/rIau7twZHeZdsF/1Ntc1b6k1b3uwLmfE428SUjkpAEJ8OhhLKdjUJZi4iW7tx1/cotXDUkd/pbdWctayx2rgdilGrhHEYnfpJ5g3pQhd4dnY7mE7iWyG2rcrN7hIsQbt7sHxWw3Yag7MdoZ6L974OVmsl79PQioAzR+cyGVf7L8tKMlvb9bZhyfZe6m4Sifx7bT4xDMGS9UoOaplnUQSUAYb2TiuAIDxaFRDKZ537K60tIbZEorHBw/FXUCGjmrKfHyOhnkPJnUsG2bgIzEeGl5y8bkh2lRhinJoPsJQ8MBFKMNMNj1sq/e6X7g3tgCuMxIu1oBhK5iQUHSnVfh0NzMP0K+p8rPSVjjakrmRKZONcceMAVopQg9nXORatyy7HuAGysTlZGMnpmALomN98jxmzx1tU2oIYE3Dpl7z8qdKzL/Hi89EiiC2vtylZLQEGE1SGDdhvMOX5wC1wY0YjZFdpErr4/Y3PzpY6HTiAYOYMCwWPVWKTynvQ0wW44Xp08EbL3tabwXQ42KjS64SJifCJ/nxLer+JDT71/U8IAQ5k0hEW8jFX+M8T4jVaRFh4Xb28CnpcpB00zuKHQkc/EOGrvqN5fOkSUOMa4dsE8i+AwH4VZGUJGr5ZnZJypBmeaCbS2Zo1W0fZnzkFhOJdawTMgo/nAu8vq98aAcyR/LPnEOmNYcDx52d6zjXoZ3EsFDKRVPqaUquony4S0yS7EjrAYkscLhT6ikN2DMcyZJkXQS2lMhFS0uMd19xWn2r06V/ObqVqYIy93nGlUcWIvMdJ3Ny
*/