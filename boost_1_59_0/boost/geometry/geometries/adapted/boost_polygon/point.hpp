// Boost.Geometry (aka GGL, Generic Geometry Library)

// Copyright (c) 2010-2012 Barend Gehrels, Amsterdam, the Netherlands.

// This file was modified by Oracle on 2020.
// Modifications copyright (c) 2020, Oracle and/or its affiliates.
// Contributed and/or modified by Adam Wulkiewicz, on behalf of Oracle

// Use, modification and distribution is subject to the Boost Software License,
// Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_GEOMETRY_GEOMETRIES_ADAPTED_BOOST_POLYGON_POINT_HPP
#define BOOST_GEOMETRY_GEOMETRIES_ADAPTED_BOOST_POLYGON_POINT_HPP

// Adapts Geometries from Boost.Polygon for usage in Boost.Geometry
// boost::polygon::point_data -> boost::geometry::point


#include <type_traits>

#include <boost/polygon/polygon.hpp>

#include <boost/geometry/core/access.hpp>
#include <boost/geometry/core/cs.hpp>
#include <boost/geometry/core/coordinate_dimension.hpp>
#include <boost/geometry/core/coordinate_type.hpp>
#include <boost/geometry/core/tags.hpp>


namespace boost { namespace geometry
{


#ifndef DOXYGEN_NO_TRAITS_SPECIALIZATIONS
namespace traits
{


template <typename CoordinateType>
struct tag<boost::polygon::point_data<CoordinateType> >
{
    typedef point_tag type;
};


template <typename CoordinateType>
struct coordinate_type<boost::polygon::point_data<CoordinateType> >
{
    typedef CoordinateType type;
};


template <typename CoordinateType>
struct coordinate_system<boost::polygon::point_data<CoordinateType> >
{
    typedef cs::cartesian type;
};


template <typename CoordinateType>
struct dimension<boost::polygon::point_data<CoordinateType> >
    : std::integral_constant<std::size_t, 2>
{};


template <typename CoordinateType>
struct access<boost::polygon::point_data<CoordinateType>, 0>
{
    typedef boost::polygon::point_data<CoordinateType> point_type;

    static inline CoordinateType get(point_type const& p)
    {
        return p.x();
    }

    static inline void set(point_type& p, CoordinateType const& value)
    {
        p.x(value);
    }
};


template <typename CoordinateType>
struct access<boost::polygon::point_data<CoordinateType>, 1>
{
    typedef boost::polygon::point_data<CoordinateType> point_type;

    static inline CoordinateType get(point_type const& p)
    {
        return p.y();
    }

    static inline void set(point_type& p, CoordinateType const& value)
    {
        p.y(value);
    }
};


} // namespace traits
#endif // DOXYGEN_NO_TRAITS_SPECIALIZATIONS


}} // namespace boost::geometry


#endif // BOOST_GEOMETRY_GEOMETRIES_ADAPTED_BOOST_POLYGON_POINT_HPP

/* point.hpp
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
*/