// Boost.Geometry (aka GGL, Generic Geometry Library)

// Copyright (c) 2007-2012 Barend Gehrels, Amsterdam, the Netherlands.
// Copyright (c) 2008-2012 Bruno Lalande, Paris, France.
// Copyright (c) 2009-2012 Mateusz Loskot, London, UK.
// Copyright (c) 2014 Adam Wulkiewicz, Lodz, Poland.

// Parts of Boost.Geometry are redesigned from Geodan's Geographic Library
// (geolib/GGL), copyright (c) 1995-2010 Geodan, Amsterdam, the Netherlands.

// Use, modification and distribution is subject to the Boost Software License,
// Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_GEOMETRY_GEOMETRIES_MULTI_POINT_HPP
#define BOOST_GEOMETRY_GEOMETRIES_MULTI_POINT_HPP

#include <memory>
#include <vector>

#include <boost/concept/requires.hpp>

#include <boost/geometry/core/tags.hpp>
#include <boost/geometry/geometries/concepts/point_concept.hpp>

#include <boost/config.hpp>
#ifndef BOOST_NO_CXX11_HDR_INITIALIZER_LIST
#include <initializer_list>
#endif

namespace boost { namespace geometry
{

namespace model
{


/*!
\brief multi_point, a collection of points
\ingroup geometries
\tparam Point \tparam_point
\tparam Container \tparam_container
\tparam Allocator \tparam_allocator
\details Multipoint can be used to group points belonging to each other,
        e.g. a constellation, or the result set of an intersection

\qbk{[include reference/geometries/multi_point.qbk]}
\qbk{before.synopsis,
[heading Model of]
[link geometry.reference.concepts.concept_multi_point MultiPoint Concept]
}
*/
template
<
    typename Point,
    template<typename, typename> class Container = std::vector,
    template<typename> class Allocator = std::allocator
>
class multi_point : public Container<Point, Allocator<Point> >
{
    BOOST_CONCEPT_ASSERT( (concepts::Point<Point>) );

    typedef Container<Point, Allocator<Point> > base_type;

public :
    /// \constructor_default{multi_point}
    inline multi_point()
        : base_type()
    {}

    /// \constructor_begin_end{multi_point}
    template <typename Iterator>
    inline multi_point(Iterator begin, Iterator end)
        : base_type(begin, end)
    {}

#ifndef BOOST_NO_CXX11_HDR_INITIALIZER_LIST

    /// \constructor_initializer_list{multi_point}
    inline multi_point(std::initializer_list<Point> l)
        : base_type(l.begin(), l.end())
    {}

// Commented out for now in order to support Boost.Assign
// Without this assignment operator first the object should be created
//   from initializer list, then it shoudl be moved.
//// Without this workaround in MSVC the assignment operator is ambiguous
//#ifndef BOOST_MSVC
//    /// \assignment_initializer_list{multi_point}
//    inline multi_point & operator=(std::initializer_list<Point> l)
//    {
//        base_type::assign(l.begin(), l.end());
//        return *this;
//    }
//#endif

#endif
};

} // namespace model


#ifndef DOXYGEN_NO_TRAITS_SPECIALIZATIONS
namespace traits
{

template
<
    typename Point,
    template<typename, typename> class Container,
    template<typename> class Allocator
>
struct tag< model::multi_point<Point, Container, Allocator> >
{
    typedef multi_point_tag type;
};

} // namespace traits
#endif // DOXYGEN_NO_TRAITS_SPECIALIZATIONS

}} // namespace boost::geometry

#endif // BOOST_GEOMETRY_GEOMETRIES_MULTI_POINT_HPP

/* multi_point.hpp
bKD420SEJh8qBrgY+QHuG6FYWmxvpggK3/eIU+2fWRqroraT0+0QinUW4Apl1AE/SN80MuUUOF6lcp2ZMvvzleuv2kxrWDhKG+V1+p4IhpNeTR8LfwFO37Dw7psgSTHxuLcQzkDLg+/mJ48u91egyYDFDmHktMcOCjD8li9qYWWaeMl76yrRV4MMOFCuugYMD74znZ3SsS+o71EZr2vW+tYDwxzWNK/ZoRoN9b2bJrZw1icSYCzOobmNnoqkeJ8fhzfPU8ATHeCM+4nPbdD1Txy1RGkqOB9XbLkVNXHuoA78xzUi1q18nGUFSvLaK7VSzEqOv2eHdmat1avnDzKDLiYKKsSQcJNyMBxwGAphiGKwnhyui1W4XReyyX24Zo6zdannm/DaFVlpUmaqoCivjP/0ElXeJQ4QC4NinaT0CChRDspbSiUwicVyDR8eZeLGyFLNjThtIn8G67E40Qmj1P1bJRVL0d0QcWktmf0iDOzs2ZDLhZ7EmlSZcZITheEQxKG9yna2j8HGDteReC+O8EEDjCWKxe29xYTudQQ0g5l9ictYVH1xfFwUVwtiTSKacI0NQh22DV+Jk11i1aypiyNusGCi5KULkn2Nr0LC2lDiyE5FbShOQJSu/17vzrKOhfBEIq2JVmmMo/NMKolxNYSb0Gr/mbt0G/l0P2etDiuYRN/Wx1tH2yqmmza4qyjJqPDE4UDIuomHe0UxW2Io1IP2vUiSQX1vpqnHMf0X37aLr0jwAxkJPykEYQ4VrrSQSnz6cvp+L/SPQ/ILUxRcDaseRmxnSLkwcCnwkJy2QBgCM0fUV4+UddO0Lh2wliOWE0DhdBIiUhQiVB5GWAfGTNGVopuWT7X7CkGoaLzq5XuuFe0TbCEFn7aMO2Z7dx2L1pp7fuDu7g4WvokrKvOeUFmvNH59R64WaUlxFoKKNAzYJ7f+VhJpmPrvX7NXQOP7pqLMgBnFAGlOKe9q4I1cw3cgbv0Zmd0TXozUJ6yEXEA5dGkHncHMlYsPPT1XM/rWWqJm1RY/l63qax9BYP3Ox7O0yhiJb/TO658fT+/F3qdXMp4eRnAaaaAVrBepH11rBldN6zrPp9wEl7J6Gvsi+wz7C/on8X9caXzCQxfGCcKJlEES+RnLCoZI9Rfnx3US5wpzxbDFrTG8JR6XKEZ4DVe0m3Qrul5dri+t3PgP3nxA07Sm+GHBE2o32nI1CjmeNRBverSWy7z7fN84BjzU3n572/t7W3F3log43E7nUFzveBDahPcygP7Xf89B2HLthrpjPpBdE0yB4oO95VwIAHcMWMDcwfKq1NwC40L4PbVl+cQRvDkIDN7fP0QolgAb2SlDiRmazuOaYOVSnMvPKB7OrDfnB6C//wKksfZ6klKiQAXa4agu2BfbN/H1mSrcO+DPM2t8VMlvSTFnOBQLJ4nd/clXZ0ZNOrb/utnWV7zTwfYzlN7Tehz6SUuNAj9q/DvlmWnRVxG8/7rUGsvRDKJXtae9j6xNEHSpfIctqmQ9DO/ufJxXcShoRGQjZnfLdzDnQUB3R/PXHaz3mbxMQDEa47TyN5kAz+JXE+XUzSkdzHxaUhA4KgCyRPobjPFr9L/t/n2PGggdwCRNrE4PoUGn1m2KH1t4SR+65YFk/PMhCqQr4gCnnpvRcGvshsgQeanwLzwU9PiCil4S4SGKmculooWyn81ILHmJy5AiJU4BLOkDS6M81CPnlGH/a1TWr9zHE/OR2um03IEkLovqDzA00op9f4Hier+P0L/Aksm2YFRCNJobSvWudorCmXWcXrOJN+ouslm0rfejK4dcxojAxElELmZGor5kmpITit3SG251IZINbEcpAyaP8D9LppAMG/kqwtDs64sDjAt5jemlRxnmj1/7WpMvYDv7H1xngk6yy1w9wdLIvGJqHgBylbomfKGJnS2myZwAw9AV/i0qwXFh99esZ9qaSPZMtfwszBw00jDRfZR1W5pepZFsGm5VwD1dDv1ZzIOmYoXlOgpprKDv94o/x7onKWhMKLhPoNVDKEiS7/JSYpAI1jR6pH2qbxjyS7SbbJp7kha+/wwzBgvDIfMsXbgP8wdoTAa8cUi6t3flh9SLpZ8SyV6vBmjieupllwa4ZBJ3w5UbuVgQ548NwG0PyeiGlh7e4rErQvK3vgKMX1mHUZRcezvIkxzubr+u0l4IqKSyLd6wF2stR6oH/WOd1PSgAW2veQGr13E5C9kUhta3YyMrofBT4StqoHKZZlO9yDSdKeQJNebK8CS56MubncAYFsyYVc7YchQA8l6OAssotSqf/ooJLF1rJ+MAHF+KOL9NdsbH5AkB4tjSXHysCNp0gwdPFEcICEI5bJYHWsK5wfVRqQ9KdCvjpHg6aszMjjM4oi7I2EBgjblCIHyowbiTQxl6vR6kEApOJXVFsTNQ5ITnri21CAVbE1vnsRV1y58x/pHWczFcnCADrQFDI2FGZY428ScbJGYlawgxQaUrPiXLI9xUZKZU9G+KgGGJQozzVoN3Ftos5x9OQpM2RZcjERDP9ikXQ5jaL1lGalC2+OzQe7pI2EduDPmbQIdHNmErLGIU0I3ZJu7yGF2i5xJWiFiUrGxKNj0ZHitrmG/odlcnAJMY7e7jAV4mOxMpadyaFnheSFgD+vOwCCofJwERi8ySWic7tcQAB1z6dgXmyL/nlrLFxYSooAOhgcN2UpLAXdR0zst8ZKeavbQwlgKs6LyMFWapnF1fHvWFGT7EWFSQH9zAzzmUkvwsetkuUy8OdPaWCmX9h78sUHIwv0hoaen04EQzIdm+iFfAxRaz1FR7GontD+v5BVBRryK7M3iLEEvfZq90oZoi1bPqcI0vb1jZGr5wckZgL/8PbkWPSaNga4T0Zks4Tw0xdTU3PleRzaJIBuj7rgBMCZ6JwB3bSVlnAnUqSmYtv1tn/eiphSwRLtT28LOZBkjEybg4BVVLhfpn0eJIfpU04FGcHmlhgm5ntZaYVJELhmTzZjW5ncxTvH2RBhtPwnYiSnkdIP4QOsh+sOAoSqDrBYdhRYgphWOKUfQwg0yAtqwjj2AGMZDc9L5XQeT55giC9YlzXn6wP2TsQU4T9dClovzao/xu6g04SZFkYa8gzy0AZVSTUC13GE96YVtxBvfZPVNSpZJWH2rw99KavY+Ezt1TJXQeNvzhdyZ7NhUNYLsk2sNNVGi4DGcPzbaNUT/3c26VI6e2NckOiVXCNBpTc2mRutN2rDhko+5g8VvuSUk7pT565ODfiFp0qrDVynqcfBNSq4Jhap5lDtUGzHfZ6OS8v6vQZ4mOAY/ErwjDi/+6MlvzWDPkr6Z7lgQn2SS7p01RFCMnlOTzq/+Gu8Bl2GClD+U8jqbgRUniGvK5eW4OVjcL3Un4ybgfJtWN8+t4FAeGjZZY05jwv2kvgOWHkeqU09Jwo6M3l7CdTI3trsP6QtpEyE7DxpfmcZn0AnKHUyPt4Ishx0ePVQ2JgsmvKTZ353VztlwrAiyx6lQKWkh2fWWdW3g8nR2aV/9b8dTaMTk+mM18Sv0g4iIoGIOZrGSEuiB+kvXDZCv3ubteBTtO6llGptr1ZiPWoTQ4vjoMSlLd9XDIn2e6otoVn2US4Ec190nLTGBFfT5yr4a69A2IsAfVHMNk5Plu5PlKCTv1cSs6saAcoC/5PkqYuZhVJZXu2Ak34hpfHIheLr35QFLp++hQmTVzCp6n2e3YSQW45PAoDboUmSeLuWbajbOoQZAXAmCaMKXJp7eKJr0pD0uMHgWZGfwH27p8vmAGOLJwuQ4qiq0zBi69otye+n7tspaYv4aAxoMDTwovhBQdXuOB1NPqQFpDtOip0BghPXetbj01uCjAn2I6Y9rXZO73qu2fQzEDGs6vJr2mkztrEb5goCl9f+qE0JF5V+XmyeGBUSr6qLzXEz4lr1yWH0OprcOajtxJMFIhSrBI1V/6mLjKq5Hh5tLwRg8CVZzRTHA8s47QCNmuoYo1rFE3vBqxsVBvPqub9S65MInkmbIgCrEr90YcCV0cw7aEaEIH+s7ijcFSDJdQu9hIlT9X1xX553F0dRlyuG//bGM1etB8l/T1uNQWbh3URuO82YHFze0rXNdLt7DJTNFfcv/7O3cUxUxdV4467Y31Qwrw7AtYQeRu3+3Sx4t/7oCy9Vbr8D2/Ki1CJbZrl7b16gR9mYigUfcCVFaWfVnyDifQsgmbOZzrnX1gjdnRK+CvCp02rk6zC8AE/uSVDeaZWqte0LjenNy4WH7iqu1LCTL0GvZxd0mkxXmTIRSE8pBfrHiB3pSfyU5ad9T+wRLOLq+1ggpCJXpaSBrpxaNIXLI0+GG0UX2kWO2B8ov9T4zmUSz2P7od9l6XpV3ZZfvnR42qmbsWF41assWw1nYyqyJvPOHG/JDuidyQtT87yaxz6UMlMBFZfMu7NuoRBVCkqm306mWqobRI2TokTbCcNYydUkFF+rK3I+jj5Y/Pbmsrf9Or3mZY54AQSMWZZXmiaiObZyoU9oLkve9XItWHYoRw+luFY/mY4RT3BJxG6ULdbE+dTUReW4YW7P7w9/DrwULvF93jSe0aPwyAlq0YjmS+rI6G6zT94c3nUEvwCTkZRCmW0OQcD9Oe9H5PAo/LnHi2kyBS2AqVfcPAFCXdgUdfWsST9r3hdH5PrnJGDH39CElXYTi0KrOIKUHJIf7wTsjSemh06RwGAIovPiVl0zzQ/speMwoYahuV4omYrI7Hb9hu1dEBWlXurJ1zH0Hp0OIRZt1MAarXawePTGmjZPF5qTvIBY3z2+hTspJEULkP7WaHoE2FqbhCfEEvR6ZkFDcIlS1YO79q4UPlVCdA0/ebCRjzJpBn9foj4w5ZJS85xAG8KVmV5IOeulXlMC12XrIphDrFnKYTvV6632MSOOIXWwwjbDKsm9+88TqChpYA68vzmJHx2cjYL8yvIrF6OHhXfcqxPTX1Q2C9QWlEY+6nwevbZtjx7Ol+EP6KzrdUm2l2gBqyu6LB3ifn/FgNh5OUNVmX7HWVOf+Yk1gUu54EyQrqfFC9kZkpIpYyKu7eGCzHzX9GCmD27g7/4/f0kfkjU/SjC243G7vP530CivOZ23aT/tTiTkWBpMZQrTBRZlzBMDC0+rIrQMnSK0oqWLgTX88ruCPoziKL3Q8VklROMDEYvIGUHS5B5nlMFilqEe3H9rbUkmzLjaWp+/6AOie3dL316bHj8g+OkK1y5XpCiZoH+xWkDnVhwPcpGOzLPRQQo6Joy0ibyINISzIiv73qj1RXRFi9ab45zZV2Q2IpcR3zsZp+sfycOGAZOSJ1bxW2UrKVDyDz/HAeud/dv8dl8WGJY5SPMeF+mZTMumajhQVl47B2yUdkn1REtZG4OSR4eYkeeLVabU4eRlPbTvsDmrpxIkc2BMXxDiUND38wbsAWAsBVh4Sd0hlKoVqtltooHPbGbEXZT0EFqn+X+AauU13ij3QBOqD3jPVXt2icGUGdK5b1bN4ojMS+gaK5QBPp7OflqB8VPVhpqAcBnNwyj9aE8Y3hfG9vSZBIomESy5RE3y0o0CxIf8/tjOQTg4dtuyeF5hKZJNRJ1lCHhtRHkdBH/HbX60IW5m2KDDLCR8lCVjRIfFqUDRJpor+lm642mb3vEeWTyJ5ON5PMt8pcj1VU8z7RHHb3t3p8RISZHi59iL3tLYSrdw1dMQF4X5J1NsKfQY57tfDv8HvCPtH18jL+qP6EvsrrW/yA51IZVj6jmhySLUpi/JFdaiTAHUbjxZLCtGW6D3iHkkewVDefG5EtVba30G/+M8F3u24RjUfDCfKk6GiPXmKHQ//m+uqcyY2G+Xb5sjea4bHdYY05JDb8z+vmZ1xIMgKVybmlvT2dlpQ0WX+5rcR17jqT1UF+bWtLBgQW1keEYywqNzWRWK/DXpHzTbW/9wQH4VZh57Ke+q6RgY0tlepBQ8BstUpjhY/wXn2FNuARfFo98xty4hjpcTuwHxVqhFLydj/Gcp+k3ZkBSWrQQlslSSriDp6BDYMNoxlRplPTW8UDJRDfcGaHCAEsBFnmylKqk4NAVl/ZqOSZO4ghqn7wIGzyjlI03Wq3pDL1yxF2ejrUm5Z537o0PtCt5hZ8yNin6AqD04qMLNIwkeAqLe4D2GBeHrduEF6hMJHAhHWRQArItGhBOX3LL36wbLkkErJQu/CxECSRADi+OxZS5Of4TSg8Wi5IgmAIoh9Cov5PXlxQRAl670L4bkFqoiRdHDV2T7uuehYtdsGnduy8lKhINOZ7tf6J/hBxeMtHoHp9Xd1cxtvnwTmqRgqsxf6u6xGC5GDC7fyPUhwz/31p1YvJ9va2rpbWxh2j2lpDnjn1+QMuyvGt6yB29jTCFDwDOzwG4kb2tk1778ciuyc1/EZ2gHsRQdG72OLMsbNhGIGRpbWSO+J3pGWCOPdTPiuM049aWvdfV0RpmlJuo1a9tybuah1sz5RjA/Gj0pOlw/gNREojks98xLwwK5QPYiQIrAlxlbNFTmg0tzT7cbof5ga9dI4lDNGbSCzme9pxOEg+YfpwrMed3OUzPvDPD6KcePOp64VSOUeK+UgKPkSLq7SKjlTYZp9wtMUIhowfAkUbG8PeSZaHb/Sb+P4fsk2/u/bJ6b03v/vU4B8v3OS2YNclAVMQiCpce3FN3EjGsGOgWD39o30xAhAvc+2GGd+6kXh/nK4e/6xLrhSbeGOAN0hrcXmEfCOFJUhVGBZkivtn1mKsrjFf5HlIhJnioXGTdok57duDue4sgtz6NTXALscqodqjv+o3NTOgGBlQdE4jNTJzqp7ODJQQ7/z2lsxxPBbYV7TfdOvD32zdX5U6m0GIVT8GumJs762ftlgUSwmxFhA4Gq5v1t9HqaChnnvqEV8EibmIlT7ArYM0CfqcXsIjxzSFJULCI7sBfRREc3MAuhR8e5qOX1SQcbWIXAFbabp2BAeMTDeD5CwPfxylD82tl92HdzbqjzxQuSyd1VRkHP2usq9FhxEBPz2sr3zwKzig+UUvWaJRPbmWz33S77gqba/a/TgqYb3lpk3f49IBQLsuL21ftmUebIjVeXv+fZ97nACs7k/9c+3dqrF26MogoSVbO+i7AJ/1YwSKQd/Y1H9HEyUgUmGb6+PPB731351Hg3J1d3RUhyOxaBpi2zM+YhIcHrmj59Qv8khghOFgr1Hl4hEo4MayyA6KsQYVifhLnF3fHWPuCG5NFAY1JdahWyysDkYBk4jzGQnRMt2+KaHymsC0TY0IbB2l8O9htzBvkZKLdB79g5S/KgDuKoTdF57z/dgKRvzeAsqrtrtMoa3/CdIj9g29nwxR7F/tZn6tDlGr5i5BUc/LgX9yPHa8XZO6V8or8a3/etKHDoOGnN+lFO16INe1OyBCIfOfNdS2lZeelba9QK5LwXawvUOTl2DZpElEa0IrlXkPtzMCR3sAbsheCpgGu3aY7TO6cmpwf1aAOMLfkKlopD+qGZrEfxoTkX1azWcrefe4/L0hdSortsFS1ZApP/ApJG1EnBNobYxucHIEHdxEmqp8MHKttYLx9/RogtmsBY/TgVHNLLrW7QCL69K8HleX2LgnuxicHdKLrOODO1YDHXrOpLQQotZe
*/