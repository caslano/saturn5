// Boost.Geometry (aka GGL, Generic Geometry Library)

// Copyright (c) 2008-2012 Bruno Lalande, Paris, France.
// Copyright (c) 2008-2012 Barend Gehrels, Amsterdam, the Netherlands.
// Copyright (c) 2009-2012 Mateusz Loskot, London, UK.

// This file was modified by Oracle on 2020-2021.
// Modifications copyright (c) 2020-2021 Oracle and/or its affiliates.
// Contributed and/or modified by Adam Wulkiewicz, on behalf of Oracle

// Parts of Boost.Geometry are redesigned from Geodan's Geographic Library
// (geolib/GGL), copyright (c) 1995-2010 Geodan, Amsterdam, the Netherlands.

// Use, modification and distribution is subject to the Boost Software License,
// Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_GEOMETRY_GEOMETRIES_CONCEPTS_CHECK_HPP
#define BOOST_GEOMETRY_GEOMETRIES_CONCEPTS_CHECK_HPP


#include <boost/concept_check.hpp>
#include <boost/concept/requires.hpp>

#include <boost/geometry/algorithms/detail/select_geometry_type.hpp>

#include <boost/geometry/geometries/concepts/concept_type.hpp>
#include <boost/geometry/geometries/concepts/box_concept.hpp>
#include <boost/geometry/geometries/concepts/dynamic_geometry_concept.hpp>
#include <boost/geometry/geometries/concepts/geometry_collection_concept.hpp>
#include <boost/geometry/geometries/concepts/linestring_concept.hpp>
#include <boost/geometry/geometries/concepts/multi_point_concept.hpp>
#include <boost/geometry/geometries/concepts/multi_linestring_concept.hpp>
#include <boost/geometry/geometries/concepts/multi_polygon_concept.hpp>
#include <boost/geometry/geometries/concepts/point_concept.hpp>
#include <boost/geometry/geometries/concepts/polygon_concept.hpp>
#include <boost/geometry/geometries/concepts/ring_concept.hpp>
#include <boost/geometry/geometries/concepts/segment_concept.hpp>


namespace boost { namespace geometry { namespace concepts
{

/*!
    \brief Checks, in compile-time, the concept of any geometry
    \ingroup concepts
*/
template <typename Geometry>
// workaround for VS2015
#if !defined(_MSC_VER) || (_MSC_VER >= 1910)
constexpr
#endif
inline void check()
{
    BOOST_CONCEPT_ASSERT((typename concept_type<Geometry>::type));
}


/*!
    \brief Checks, in compile-time, the concept of two geometries, and if they
        have equal dimensions
    \ingroup concepts
*/
template <typename Geometry1, typename Geometry2>
// workaround for VS2015
#if !defined(_MSC_VER) || (_MSC_VER >= 1910)
constexpr
#endif
inline void check_concepts_and_equal_dimensions()
{
    check<Geometry1>();
    check<Geometry2>();
    assert_dimension_equal
        <
            typename geometry::detail::first_geometry_type<Geometry1>::type,
            typename geometry::detail::first_geometry_type<Geometry2>::type
        >();
}


}}} // namespace boost::geometry::concepts


#endif // BOOST_GEOMETRY_GEOMETRIES_CONCEPTS_CHECK_HPP

/* check.hpp
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
*/