// Boost.Geometry (aka GGL, Generic Geometry Library)

// Copyright (c) 2007-2012 Barend Gehrels, Amsterdam, the Netherlands.
// Copyright (c) 2008-2012 Bruno Lalande, Paris, France.
// Copyright (c) 2009-2012 Mateusz Loskot, London, UK.

// This file was modified by Oracle on 2020-2021.
// Modifications copyright (c) 2020-2021 Oracle and/or its affiliates.
// Contributed and/or modified by Adam Wulkiewicz, on behalf of Oracle

// Parts of Boost.Geometry are redesigned from Geodan's Geographic Library
// (geolib/GGL), copyright (c) 1995-2010 Geodan, Amsterdam, the Netherlands.

// Use, modification and distribution is subject to the Boost Software License,
// Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)


#ifndef BOOST_GEOMETRY_GEOMETRIES_CONCEPTS_MULTI_LINESTRING_CONCEPT_HPP
#define BOOST_GEOMETRY_GEOMETRIES_CONCEPTS_MULTI_LINESTRING_CONCEPT_HPP


#include <boost/concept_check.hpp>
#include <boost/range/concepts.hpp>
#include <boost/range/value_type.hpp>

#include <boost/geometry/geometries/concepts/concept_type.hpp>
#include <boost/geometry/geometries/concepts/linestring_concept.hpp>


namespace boost { namespace geometry { namespace concepts
{


/*!
\brief multi-linestring concept
\ingroup concepts
\par Formal definition:
The multi linestring concept is defined as following:
- there must be a specialization of traits::tag defining multi_linestring_tag as
  type
- it must behave like a Boost.Range
- its range value must fulfil the Linestring concept

*/
template <typename Geometry>
class MultiLinestring
{
#ifndef DOXYGEN_NO_CONCEPT_MEMBERS
    typedef typename boost::range_value<Geometry>::type linestring_type;

    BOOST_CONCEPT_ASSERT( (concepts::Linestring<linestring_type>) );
    BOOST_CONCEPT_ASSERT( (boost::RandomAccessRangeConcept<Geometry>) );


public :

    BOOST_CONCEPT_USAGE(MultiLinestring)
    {
        Geometry* mls = 0;
        traits::clear<Geometry>::apply(*mls);
        traits::resize<Geometry>::apply(*mls, 0);
        linestring_type* ls = 0;
        traits::push_back<Geometry>::apply(*mls, *ls);
    }
#endif
};


/*!
\brief concept for multi-linestring (const version)
\ingroup const_concepts
*/
template <typename Geometry>
class ConstMultiLinestring
{
#ifndef DOXYGEN_NO_CONCEPT_MEMBERS
    typedef typename boost::range_value<Geometry>::type linestring_type;

    BOOST_CONCEPT_ASSERT( (concepts::ConstLinestring<linestring_type>) );
    BOOST_CONCEPT_ASSERT( (boost::RandomAccessRangeConcept<Geometry>) );


public :

    BOOST_CONCEPT_USAGE(ConstMultiLinestring)
    {
    }
#endif
};


template <typename Geometry>
struct concept_type<Geometry, multi_linestring_tag>
{
    using type = MultiLinestring<Geometry>;
};

template <typename Geometry>
struct concept_type<Geometry const, multi_linestring_tag>
{
    using type = ConstMultiLinestring<Geometry>;
};


}}} // namespace boost::geometry::concepts


#endif // BOOST_GEOMETRY_GEOMETRIES_CONCEPTS_MULTI_LINESTRING_CONCEPT_HPP

/* multi_linestring_concept.hpp
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
*/