// Boost.Geometry (aka GGL, Generic Geometry Library)

// Copyright (c) 2007-2012 Barend Gehrels, Amsterdam, the Netherlands.
// Copyright (c) 2008-2012 Bruno Lalande, Paris, France.
// Copyright (c) 2009-2012 Mateusz Loskot, London, UK.
// Copyright (c) 2014 Adam Wulkiewicz, Lodz, Poland.

// Parts of Boost.Geometry are redesigned from Geodan's Geographic Library
// (geolib/GGL), copyright (c) 1995-2010 Geodan, Amsterdam, the Netherlands.

// Use, modification and distribution is subject to the Boost Software License,
// Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_GEOMETRY_GEOMETRIES_MULTI_LINESTRING_HPP
#define BOOST_GEOMETRY_GEOMETRIES_MULTI_LINESTRING_HPP

#include <memory>
#include <vector>

#include <boost/concept/requires.hpp>

#include <boost/geometry/core/tags.hpp>
#include <boost/geometry/geometries/concepts/linestring_concept.hpp>

#include <boost/config.hpp>
#ifndef BOOST_NO_CXX11_HDR_INITIALIZER_LIST
#include <initializer_list>
#endif

namespace boost { namespace geometry
{


namespace model
{

/*!
\brief multi_line, a collection of linestring
\details Multi-linestring can be used to group lines belonging to each other,
        e.g. a highway (with interruptions)
\ingroup geometries

\qbk{[include reference/geometries/multi_linestring.qbk]}
\qbk{before.synopsis,
[heading Model of]
[link geometry.reference.concepts.concept_multi_linestring MultiLineString Concept]
}
*/
template
<
    typename LineString,
    template<typename, typename> class Container = std::vector,
    template<typename> class Allocator = std::allocator
>
class multi_linestring : public Container<LineString, Allocator<LineString> >
{
    BOOST_CONCEPT_ASSERT( (concepts::Linestring<LineString>) );

#ifndef BOOST_NO_CXX11_HDR_INITIALIZER_LIST

    // default constructor and base_type definitions are required only
    // if the constructor taking std::initializer_list is defined

    typedef Container<LineString, Allocator<LineString> > base_type;

public:
    /// \constructor_default{multi_linestring}
    multi_linestring()
        : base_type()
    {}

    /// \constructor_initializer_list{multi_linestring}
    inline multi_linestring(std::initializer_list<LineString> l)
        : base_type(l.begin(), l.end())
    {}

// Commented out for now in order to support Boost.Assign
// Without this assignment operator first the object should be created
//   from initializer list, then it shoudl be moved.
//// Without this workaround in MSVC the assignment operator is ambiguous
//#ifndef BOOST_MSVC
//    /// \assignment_initializer_list{multi_linestring}
//    inline multi_linestring & operator=(std::initializer_list<LineString> l)
//    {
//        base_type::assign(l.begin(), l.end());
//        return *this;
//    }
//#endif

#endif
};


} // namespace model


#ifndef DOXYGEN_NO_TRAITS_SPECIALIZATIONS
namespace traits
{

template
<
    typename LineString,
    template<typename, typename> class Container,
    template<typename> class Allocator
>
struct tag< model::multi_linestring<LineString, Container, Allocator> >
{
    typedef multi_linestring_tag type;
};

} // namespace traits
#endif // DOXYGEN_NO_TRAITS_SPECIALIZATIONS


}} // namespace boost::geometry

#endif // BOOST_GEOMETRY_GEOMETRIES_MULTI_LINESTRING_HPP

/* multi_linestring.hpp
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
*/