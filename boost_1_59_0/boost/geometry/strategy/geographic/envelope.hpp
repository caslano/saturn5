// Boost.Geometry (aka GGL, Generic Geometry Library)

// Copyright (c) 2007-2015 Barend Gehrels, Amsterdam, the Netherlands.
// Copyright (c) 2008-2015 Bruno Lalande, Paris, France.
// Copyright (c) 2009-2015 Mateusz Loskot, London, UK.

// This file was modified by Oracle on 2015-2020.
// Modifications copyright (c) 2015-2020, Oracle and/or its affiliates.

// Contributed and/or modified by Vissarion Fysikopoulos, on behalf of Oracle
// Contributed and/or modified by Menelaos Karavelas, on behalf of Oracle
// Contributed and/or modified by Adam Wulkiewicz, on behalf of Oracle

// Parts of Boost.Geometry are redesigned from Geodan's Geographic Library
// (geolib/GGL), copyright (c) 1995-2010 Geodan, Amsterdam, the Netherlands.

// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_GEOMETRY_STRATEGY_GEOGRAPHIC_ENVELOPE_HPP
#define BOOST_GEOMETRY_STRATEGY_GEOGRAPHIC_ENVELOPE_HPP

#include <boost/geometry/srs/spheroid.hpp>

#include <boost/geometry/strategy/geographic/envelope_segment.hpp>
#include <boost/geometry/strategy/geographic/expand_segment.hpp>
#include <boost/geometry/strategies/geographic/parameters.hpp>
#include <boost/geometry/strategy/spherical/envelope.hpp>

namespace boost { namespace geometry
{

namespace strategy { namespace envelope
{


template
<
    typename FormulaPolicy = strategy::andoyer,
    typename Spheroid = geometry::srs::spheroid<double>,
    typename CalculationType = void
>
class geographic
    : public spherical<CalculationType>
{
public:
    typedef geographic_tag cs_tag;

    typedef Spheroid model_type;

    inline geographic()
        : m_spheroid()
    {}

    explicit inline geographic(Spheroid const& spheroid)
        : m_spheroid(spheroid)
    {}

    Spheroid model() const
    {
        return m_spheroid;
    }

private:
    Spheroid m_spheroid;
};

#ifndef DOXYGEN_NO_STRATEGY_SPECIALIZATIONS

namespace services
{

template <typename Tag, typename CalculationType>
struct default_strategy<Tag, geographic_tag, CalculationType>
{
    typedef strategy::envelope::geographic
        <
            strategy::andoyer,
            geometry::srs::spheroid<double>,
            CalculationType
        > type;
};

}

#endif // DOXYGEN_NO_STRATEGY_SPECIALIZATIONS


}} // namespace strategy::envelope

}} //namepsace boost::geometry

#endif // BOOST_GEOMETRY_STRATEGY_GEOGRAPHIC_ENVELOPE_HPP

/* envelope.hpp
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
*/