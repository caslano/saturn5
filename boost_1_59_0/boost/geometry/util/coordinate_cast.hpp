// Boost.Geometry (aka GGL, Generic Geometry Library)

// Copyright (c) 2007-2012 Barend Gehrels, Amsterdam, the Netherlands.
// Copyright (c) 2008-2012 Bruno Lalande, Paris, France.
// Copyright (c) 2009-2012 Mateusz Loskot, London, UK.

// Parts of Boost.Geometry are redesigned from Geodan's Geographic Library
// (geolib/GGL), copyright (c) 1995-2010 Geodan, Amsterdam, the Netherlands.

// Use, modification and distribution is subject to the Boost Software License,
// Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_GEOMETRY_UTIL_COORDINATE_CAST_HPP
#define BOOST_GEOMETRY_UTIL_COORDINATE_CAST_HPP

#include <cstdlib>
#include <string>
#include <boost/lexical_cast.hpp>

namespace boost { namespace geometry
{

#ifndef DOXYGEN_NO_DETAIL
namespace detail
{

/*!
\brief cast coordinates from a string to a coordinate type
\detail By default it uses lexical_cast. However, lexical_cast seems not to support
    See also "define_pi" where the same issue is solved
*/
template <typename CoordinateType>
struct coordinate_cast
{
    static inline CoordinateType apply(std::string const& source)
    {
#if defined(BOOST_GEOMETRY_NO_LEXICAL_CAST)
        return atof(source.c_str());
#else
        return boost::lexical_cast<CoordinateType>(source);
#endif
    }
};


} // namespace detail
#endif



}} // namespace boost::geometry

#endif // BOOST_GEOMETRY_UTIL_COORDINATE_CAST_HPP

/* coordinate_cast.hpp
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
*/