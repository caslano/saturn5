// Boost.Geometry

// Copyright (c) 2015-2020 Oracle and/or its affiliates.

// Contributed and/or modified by Adam Wulkiewicz, on behalf of Oracle
// Contributed and/or modified by Menelaos Karavelas, on behalf of Oracle

// Use, modification and distribution is subject to the Boost Software License,
// Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_GEOMETRY_UTIL_HAS_NAN_COORDINATE_HPP
#define BOOST_GEOMETRY_UTIL_HAS_NAN_COORDINATE_HPP

#include <cstddef>
#include <type_traits>

#include <boost/geometry/core/access.hpp>
#include <boost/geometry/core/coordinate_dimension.hpp>
#include <boost/geometry/core/coordinate_type.hpp>

#include <boost/math/special_functions/fpclassify.hpp>


namespace boost { namespace geometry
{
    
#ifndef DOXYGEN_NO_DETAIL
namespace detail
{

struct isnan
{
    template <typename T>
    static inline bool apply(T const& t)
    {
        return boost::math::isnan(t);
    }
};

template
<
    typename Point,
    typename Predicate,
    bool Enable,
    std::size_t I = 0,
    std::size_t N = geometry::dimension<Point>::value
>
struct has_coordinate_with_property
{
    static bool apply(Point const& point)
    {
        return Predicate::apply(geometry::get<I>(point))
            || has_coordinate_with_property
                <
                    Point, Predicate, Enable, I+1, N
                >::apply(point);
    }
};

template <typename Point, typename Predicate, std::size_t I, std::size_t N>
struct has_coordinate_with_property<Point, Predicate, false, I, N>
{
    static inline bool apply(Point const&)
    {
        return false;
    }
};

template <typename Point, typename Predicate, std::size_t N>
struct has_coordinate_with_property<Point, Predicate, true, N, N>
{
    static bool apply(Point const& )
    {
        return false;
    }
};

} // namespace detail
#endif // DOXYGEN_NO_DETAIL

template <typename Point>
bool has_nan_coordinate(Point const& point)
{
    return detail::has_coordinate_with_property
        <
            Point,
            detail::isnan,
            std::is_floating_point
                <
                    typename coordinate_type<Point>::type
                >::value
        >::apply(point);
}

}} // namespace boost::geometry

#endif // BOOST_GEOMETRY_UTIL_HAS_NAN_COORDINATE_HPP

/* has_nan_coordinate.hpp
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
*/