// Boost.Geometry (aka GGL, Generic Geometry Library)

// Copyright (c) 2007-2012 Barend Gehrels, Amsterdam, the Netherlands.
// Copyright (c) 2008-2012 Bruno Lalande, Paris, France.
// Copyright (c) 2009-2012 Mateusz Loskot, London, UK.

// This file was modified by Oracle on 2020.
// Modifications copyright (c) 2020, Oracle and/or its affiliates.
// Contributed and/or modified by Adam Wulkiewicz, on behalf of Oracle

// Parts of Boost.Geometry are redesigned from Geodan's Geographic Library
// (geolib/GGL), copyright (c) 1995-2010 Geodan, Amsterdam, the Netherlands.

// Use, modification and distribution is subject to the Boost Software License,
// Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_GEOMETRY_UTIL_FOR_EACH_COORDINATE_HPP
#define BOOST_GEOMETRY_UTIL_FOR_EACH_COORDINATE_HPP

#include <boost/concept/requires.hpp>
#include <boost/geometry/geometries/concepts/point_concept.hpp>

namespace boost { namespace geometry
{

#ifndef DOXYGEN_NO_DETAIL
namespace detail
{

template
<
    typename Point,
    int Dimension = 0,
    int DimensionCount = dimension<Point>::value
>
struct coordinates_scanner
{
    template <typename Op>
    static inline Op apply(Point& point, Op operation)
    {
        operation.template apply<Point, Dimension>(point);
        return coordinates_scanner
            <
                Point,
                Dimension + 1
            >::apply(point, operation);
    }
};

template <typename Point, int DimensionCount>
struct coordinates_scanner<Point, DimensionCount, DimensionCount>
{
    template <typename Op>
    static inline Op apply(Point& , Op operation)
    {
        return operation;
    }
};

} // namespace detail
#endif // DOXYGEN_NO_DETAIL

template <typename Point, typename Op>
inline void for_each_coordinate(Point& point, Op operation)
{
    BOOST_CONCEPT_ASSERT( (concepts::Point<Point>) );

    detail::coordinates_scanner<Point>::apply(point, operation);
}

template <typename Point, typename Op>
inline Op for_each_coordinate(Point const& point, Op operation)
{
    BOOST_CONCEPT_ASSERT( (concepts::ConstPoint<Point>) );

    return detail::coordinates_scanner<Point const>::apply(point, operation);
}

}} // namespace boost::geometry

#endif // BOOST_GEOMETRY_UTIL_FOR_EACH_COORDINATE_HPP

/* for_each_coordinate.hpp
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
*/