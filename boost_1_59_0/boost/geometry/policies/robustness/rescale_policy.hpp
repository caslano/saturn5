// Boost.Geometry (aka GGL, Generic Geometry Library)

// Copyright (c) 2014-2015 Barend Gehrels, Amsterdam, the Netherlands.
// Copyright (c) 2014-2015 Bruno Lalande, Paris, France.
// Copyright (c) 2014-2015 Mateusz Loskot, London, UK.
// Copyright (c) 2014-2015 Adam Wulkiewicz, Lodz, Poland.

// This file was modified by Oracle on 2015, 2018.
// Modifications copyright (c) 2015-2018, Oracle and/or its affiliates.

// Contributed and/or modified by Adam Wulkiewicz, on behalf of Oracle

// Use, modification and distribution is subject to the Boost Software License,
// Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_GEOMETRY_POLICIES_ROBUSTNESS_RESCALE_POLICY_HPP
#define BOOST_GEOMETRY_POLICIES_ROBUSTNESS_RESCALE_POLICY_HPP

#include <cstddef>

#include <boost/geometry/core/coordinate_type.hpp>

#include <boost/geometry/policies/robustness/segment_ratio.hpp>
#include <boost/geometry/policies/robustness/robust_point_type.hpp>

#include <boost/geometry/util/math.hpp>

namespace boost { namespace geometry
{

#ifndef DOXYGEN_NO_DETAIL
namespace detail
{

template <typename FpPoint, typename IntPoint, typename CalculationType>
struct robust_policy
{
    static bool const enabled = true;

    typedef typename geometry::coordinate_type<IntPoint>::type output_ct;

    robust_policy(FpPoint const& fp_min, IntPoint const& int_min, CalculationType const& the_factor)
        : m_fp_min(fp_min)
        , m_int_min(int_min)
        , m_multiplier(the_factor)
    {
    }

    template <std::size_t Dimension, typename Value>
    inline output_ct apply(Value const& value) const
    {
        // a + (v-b)*f
        CalculationType const a = static_cast<CalculationType>(get<Dimension>(m_int_min));
        CalculationType const b = static_cast<CalculationType>(get<Dimension>(m_fp_min));
        CalculationType const result = a + (value - b) * m_multiplier;

        return geometry::math::rounding_cast<output_ct>(result);
    }

    FpPoint m_fp_min;
    IntPoint m_int_min;
    CalculationType m_multiplier;
};

} // namespace detail
#endif


// Implement meta-functions for this policy

// Define the IntPoint as a robust-point type
template <typename Point, typename FpPoint, typename IntPoint, typename CalculationType>
struct robust_point_type<Point, detail::robust_policy<FpPoint, IntPoint, CalculationType> >
{
    typedef IntPoint type;
};


}} // namespace boost::geometry


#endif // BOOST_GEOMETRY_POLICIES_ROBUSTNESS_RESCALE_POLICY_HPP

/* rescale_policy.hpp
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
*/