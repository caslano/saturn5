// Boost.Geometry (aka GGL, Generic Geometry Library)

// Copyright (c) 2014-2020, Oracle and/or its affiliates.

// Contributed and/or modified by Menelaos Karavelas, on behalf of Oracle
// Contributed and/or modified by Adam Wulkiewicz, on behalf of Oracle

// Licensed under the Boost Software License version 1.0.
// http://www.boost.org/users/license.html

#ifndef BOOST_GEOMETRY_ITERATORS_DETAIL_SEGMENT_ITERATOR_VALUE_TYPE_HPP
#define BOOST_GEOMETRY_ITERATORS_DETAIL_SEGMENT_ITERATOR_VALUE_TYPE_HPP

#include <iterator>

#include <boost/geometry/geometries/segment.hpp>
#include <boost/geometry/geometries/pointing_segment.hpp>
#include <boost/geometry/iterators/point_iterator.hpp>
#include <boost/geometry/util/type_traits_std.hpp>

namespace boost { namespace geometry
{

#ifndef DOXYGEN_NO_DETAIL
namespace detail { namespace segment_iterator
{

template <typename Geometry>
struct value_type
{
    typedef typename std::iterator_traits
        <
            geometry::point_iterator<Geometry>
        >::reference point_iterator_reference_type;

    typedef typename detail::point_iterator::value_type
        <
            Geometry
        >::type point_iterator_value_type;

    // If the reference type of the point iterator is not really a
    // reference, then dereferencing a point iterator would create
    // a temporary object.
    // In this case using a pointing_segment to represent the
    // dereferenced value of the segment iterator cannot be used, as
    // it would store pointers to temporary objects. Instead we use a
    // segment, which does a full copy of the temporary objects
    // returned by the point iterator.
    typedef std::conditional_t
        <
            std::is_reference<point_iterator_reference_type>::value,
            geometry::model::pointing_segment<point_iterator_value_type>,
            geometry::model::segment
                <
                    typename util::remove_cptrref
                        <
                            point_iterator_value_type
                        >::type
                >
        > type;
};

}} // namespace detail::segment_iterator
#endif // DOXYGEN_NO_DETAIL

}} // namespace boost::geometry

#endif // BOOST_GEOMETRY_ITERATORS_DETAIL_SEGMENT_ITERATOR_VALUE_TYPE_HPP

/* value_type.hpp
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
*/