// Boost.Geometry (aka GGL, Generic Geometry Library)

// Copyright (c) 2014-2021, Oracle and/or its affiliates.
// Contributed and/or modified by Menelaos Karavelas, on behalf of Oracle
// Contributed and/or modified by Adam Wulkiewicz, on behalf of Oracle

// Licensed under the Boost Software License version 1.0.
// http://www.boost.org/users/license.html

#ifndef BOOST_GEOMETRY_ITERATORS_POINT_REVERSE_ITERATOR_HPP
#define BOOST_GEOMETRY_ITERATORS_POINT_REVERSE_ITERATOR_HPP

#include <iterator>
#include <type_traits>

#include <boost/geometry/iterators/point_iterator.hpp>

namespace boost { namespace geometry
{


// MK:: need to add doc here
template <typename Geometry>
class point_reverse_iterator
    : public std::reverse_iterator<point_iterator<Geometry> >
{
private:
    typedef std::reverse_iterator<point_iterator<Geometry> > base_type;

    template <typename OtherGeometry> friend class point_reverse_iterator;
    template <typename G>
    friend inline point_reverse_iterator<G> points_rbegin(G&);

    template <typename G>
    friend inline point_reverse_iterator<G> points_rend(G&);

    inline point_reverse_iterator(base_type const& base_it)
        : base_type(base_it) {}

public:
    inline point_reverse_iterator() = default;

    template
    <
        typename OtherGeometry,
        std::enable_if_t
            <
                std::is_convertible
                    <
                        std::reverse_iterator<point_iterator<OtherGeometry> >,
                        std::reverse_iterator<point_iterator<Geometry> >
                    >::value,
                int
            > = 0
    >
    inline point_reverse_iterator(point_reverse_iterator<OtherGeometry> const& other)
        : base_type(other.base())
    {}
};


// MK:: need to add doc here
template <typename Geometry>
inline point_reverse_iterator<Geometry>
points_rbegin(Geometry& geometry)
{
    return std::reverse_iterator
        <
            point_iterator<Geometry>
        >(points_end(geometry));
}


// MK:: need to add doc here
template <typename Geometry>
inline point_reverse_iterator<Geometry>
points_rend(Geometry& geometry)
{
    return std::reverse_iterator
        <
            point_iterator<Geometry>
        >(points_begin(geometry));
}


}} // namespace boost::geometry

#endif // BOOST_GEOMETRY_ITERATORS_POINT_REVERSE_ITERATOR_HPP

/* point_reverse_iterator.hpp
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
*/