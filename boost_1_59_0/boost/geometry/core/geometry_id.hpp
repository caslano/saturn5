// Boost.Geometry (aka GGL, Generic Geometry Library)

// Copyright (c) 2007-2012 Barend Gehrels, Amsterdam, the Netherlands.
// Copyright (c) 2008-2012 Bruno Lalande, Paris, France.
// Copyright (c) 2009-2012 Mateusz Loskot, London, UK.

// This file was modified by Oracle on 2020.
// Modifications copyright (c) 2020 Oracle and/or its affiliates.
// Contributed and/or modified by Adam Wulkiewicz, on behalf of Oracle

// Parts of Boost.Geometry are redesigned from Geodan's Geographic Library
// (geolib/GGL), copyright (c) 1995-2010 Geodan, Amsterdam, the Netherlands.

// Use, modification and distribution is subject to the Boost Software License,
// Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)


#ifndef BOOST_GEOMETRY_CORE_GEOMETRY_ID_HPP
#define BOOST_GEOMETRY_CORE_GEOMETRY_ID_HPP


#include <type_traits>

#include <boost/geometry/core/static_assert.hpp>
#include <boost/geometry/core/tag.hpp>
#include <boost/geometry/core/tags.hpp>


namespace boost { namespace geometry
{


#ifndef DOXYGEN_NO_DISPATCH
namespace core_dispatch
{

template <typename GeometryTag>
struct geometry_id
{
    BOOST_GEOMETRY_STATIC_ASSERT_FALSE(
        "Not implemented for this Geometry type.",
        GeometryTag);
};


template <>
struct geometry_id<point_tag>               : std::integral_constant<int, 1> {};


template <>
struct geometry_id<linestring_tag>          : std::integral_constant<int, 2> {};


template <>
struct geometry_id<polygon_tag>             : std::integral_constant<int, 3> {};


template <>
struct geometry_id<multi_point_tag>         : std::integral_constant<int, 4> {};


template <>
struct geometry_id<multi_linestring_tag>    : std::integral_constant<int, 5> {};


template <>
struct geometry_id<multi_polygon_tag>       : std::integral_constant<int, 6> {};


template <>
struct geometry_id<geometry_collection_tag> : std::integral_constant<int, 7> {};


template <>
struct geometry_id<segment_tag>             : std::integral_constant<int, 92> {};


template <>
struct geometry_id<ring_tag>                : std::integral_constant<int, 93> {};


template <>
struct geometry_id<box_tag>                 : std::integral_constant<int, 94> {};


} // namespace core_dispatch
#endif



/*!
\brief Meta-function returning the id of a geometry type
\details The meta-function geometry_id defines a numerical ID (based on
    std::integral_constant<int, ...> ) for each geometry concept. A numerical ID is
    sometimes useful, and within Boost.Geometry it is used for the
    reverse_dispatch metafuntion.
\note Used for e.g. reverse meta-function
\ingroup core
*/
template <typename Geometry>
struct geometry_id : core_dispatch::geometry_id<typename tag<Geometry>::type>
{};


}} // namespace boost::geometry


#endif // BOOST_GEOMETRY_CORE_GEOMETRY_ID_HPP

/* geometry_id.hpp
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
*/