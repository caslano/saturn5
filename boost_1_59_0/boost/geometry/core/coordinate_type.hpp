// Boost.Geometry (aka GGL, Generic Geometry Library)

// Copyright (c) 2008-2012 Bruno Lalande, Paris, France.
// Copyright (c) 2008-2012 Barend Gehrels, Amsterdam, the Netherlands.
// Copyright (c) 2009-2012 Mateusz Loskot, London, UK.

// This file was modified by Oracle on 2020.
// Modifications copyright (c) 2020, Oracle and/or its affiliates.
// Contributed and/or modified by Adam Wulkiewicz, on behalf of Oracle

// Parts of Boost.Geometry are redesigned from Geodan's Geographic Library
// (geolib/GGL), copyright (c) 1995-2010 Geodan, Amsterdam, the Netherlands.

// Use, modification and distribution is subject to the Boost Software License,
// Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_GEOMETRY_CORE_COORDINATE_TYPE_HPP
#define BOOST_GEOMETRY_CORE_COORDINATE_TYPE_HPP


#include <boost/geometry/core/point_type.hpp>
#include <boost/geometry/core/static_assert.hpp>
#include <boost/geometry/core/tag.hpp>
#include <boost/geometry/util/type_traits_std.hpp>


namespace boost { namespace geometry
{

namespace traits
{

/*!
\brief Traits class which indicate the coordinate type (double,float,...) of a point
\ingroup traits
\par Geometries:
    - point
\par Specializations should provide:
    - typedef T type; (double,float,int,etc)
*/
template <typename Point, typename Enable = void>
struct coordinate_type
{
    BOOST_GEOMETRY_STATIC_ASSERT_FALSE(
        "Not implemented for this Point type.",
        Point);
};

} // namespace traits

#ifndef DOXYGEN_NO_DISPATCH
namespace core_dispatch
{

template <typename GeometryTag, typename Geometry>
struct coordinate_type
{
    typedef typename point_type<GeometryTag, Geometry>::type point_type;

    // Call its own specialization on point-tag
    typedef typename coordinate_type<point_tag, point_type>::type type;
};

template <typename Point>
struct coordinate_type<point_tag, Point>
{
    typedef typename traits::coordinate_type
        <
            typename util::remove_cptrref<Point>::type
        >::type type;
};


} // namespace core_dispatch
#endif // DOXYGEN_NO_DISPATCH


/*!
\brief \brief_meta{type, coordinate type (int\, float\, double\, etc), \meta_point_type}
\tparam Geometry \tparam_geometry
\ingroup core

\qbk{[include reference/core/coordinate_type.qbk]}
*/
template <typename Geometry>
struct coordinate_type
{
    typedef typename core_dispatch::coordinate_type
        <
            typename tag<Geometry>::type,
            typename util::remove_cptrref<Geometry>::type
        >::type type;
};

/*!
\brief assert_coordinate_type_equal, a compile-time check for equality of two coordinate types
\ingroup utility
*/
template <typename Geometry1, typename Geometry2>
constexpr inline void assert_coordinate_type_equal(Geometry1 const& , Geometry2 const& )
{
  static_assert(std::is_same
      <
          typename coordinate_type<Geometry1>::type,
          typename coordinate_type<Geometry2>::type
      >::value, "Coordinate types in geometries should be the same");
}

}} // namespace boost::geometry


#endif // BOOST_GEOMETRY_CORE_COORDINATE_TYPE_HPP

/* coordinate_type.hpp
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
*/