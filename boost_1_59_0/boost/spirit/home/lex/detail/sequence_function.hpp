//  Copyright (c) 2001-2011 Hartmut Kaiser
// 
//  Distributed under the Boost Software License, Version 1.0. (See accompanying 
//  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

#if !defined(BOOST_SPIRIT_LEX_SEQUENCE_FUNCTION_FEB_28_2007_0249PM)
#define BOOST_SPIRIT_LEX_SEQUENCE_FUNCTION_FEB_28_2007_0249PM

#if defined(_MSC_VER)
#pragma once
#endif

#include <boost/spirit/home/lex/domain.hpp>
#include <boost/spirit/home/support/unused.hpp>

namespace boost { namespace spirit { namespace lex { namespace detail
{
    template <typename LexerDef, typename String>
    struct sequence_collect_function
    {
        sequence_collect_function(LexerDef& def_, String const& state_
              , String const& targetstate_)
          : def(def_), state(state_), targetstate(targetstate_) {}

        template <typename Component>
        bool operator()(Component const& component) const
        {
            component.collect(def, state, targetstate);
            return false;     // execute for all sequence elements
        }

        LexerDef& def;
        String const& state;
        String const& targetstate;

        // silence MSVC warning C4512: assignment operator could not be generated
        BOOST_DELETED_FUNCTION(sequence_collect_function& operator= (sequence_collect_function const&))
    };

    template <typename LexerDef>
    struct sequence_add_actions_function
    {
        sequence_add_actions_function(LexerDef& def_)
          : def(def_) {}

        template <typename Component>
        bool operator()(Component const& component) const
        {
            component.add_actions(def);
            return false;     // execute for all sequence elements
        }

        LexerDef& def;

        // silence MSVC warning C4512: assignment operator could not be generated
        BOOST_DELETED_FUNCTION(sequence_add_actions_function& operator= (sequence_add_actions_function const&))
    };

}}}}

#endif

/* sequence_function.hpp
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
*/