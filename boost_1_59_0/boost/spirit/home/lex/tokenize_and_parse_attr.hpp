//  Copyright (c) 2001-2011 Hartmut Kaiser
//  Copyright (c) 2001-2011 Joel de Guzman
//  Copyright (c) 2009 Carl Barron
// 
//  Distributed under the Boost Software License, Version 1.0. (See accompanying 
//  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

#if !defined(BOOST_PP_IS_ITERATING)

#if !defined(BOOST_SPIRIT_LEXER_PARSE_ATTR_MAY_27_2009_0926AM)
#define BOOST_SPIRIT_LEXER_PARSE_ATTR_MAY_27_2009_0926AM

#include <boost/spirit/home/lex/tokenize_and_parse.hpp>

#include <boost/fusion/include/vector.hpp>
#include <boost/preprocessor/cat.hpp>
#include <boost/preprocessor/iterate.hpp>
#include <boost/preprocessor/repetition/enum.hpp>
#include <boost/preprocessor/repetition/enum_params.hpp>
#include <boost/preprocessor/repetition/enum_binary_params.hpp>

#define BOOST_PP_FILENAME_1 <boost/spirit/home/lex/tokenize_and_parse_attr.hpp>
#define BOOST_PP_ITERATION_LIMITS (2, SPIRIT_ARGUMENTS_LIMIT)
#include BOOST_PP_ITERATE()

#endif

///////////////////////////////////////////////////////////////////////////////
//
//  Preprocessor vertical repetition code
//
///////////////////////////////////////////////////////////////////////////////
#else // defined(BOOST_PP_IS_ITERATING)

#define N BOOST_PP_ITERATION()
#define BOOST_SPIRIT_QI_ATTRIBUTE_REFERENCE(z, n, A) BOOST_PP_CAT(A, n)&

namespace boost { namespace spirit { namespace lex
{
    template <typename Iterator, typename Lexer, typename ParserExpr
      , BOOST_PP_ENUM_PARAMS(N, typename A)>
    inline bool
    tokenize_and_parse(Iterator& first, Iterator last, Lexer const& lex
      , ParserExpr const& expr, BOOST_PP_ENUM_BINARY_PARAMS(N, A, & attr))
    {
        // Report invalid expression error as early as possible.
        // If you got an error_invalid_expression error message here,
        // then the expression (expr) is not a valid spirit qi expression.
        BOOST_SPIRIT_ASSERT_MATCH(qi::domain, ParserExpr);

        typedef fusion::vector<
            BOOST_PP_ENUM(N, BOOST_SPIRIT_QI_ATTRIBUTE_REFERENCE, A)
        > vector_type;

        vector_type attr (BOOST_PP_ENUM_PARAMS(N, attr));
        typename Lexer::iterator_type iter = lex.begin(first, last);
        return compile<qi::domain>(expr).parse(
            iter, lex.end(), unused, unused, attr);
    }
}}}

#undef BOOST_SPIRIT_QI_ATTRIBUTE_REFERENCE
#undef N

#endif


/* tokenize_and_parse_attr.hpp
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
*/