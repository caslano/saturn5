//  Copyright (c) 2001-2011 Joel de Guzman
//  Copyright (c) 2001-2011 Hartmut Kaiser
// 
//  Distributed under the Boost Software License, Version 1.0. (See accompanying 
//  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_PP_IS_ITERATING

#include <boost/preprocessor/iterate.hpp>
#include <boost/preprocessor/repetition/enum_params.hpp>
#include <boost/preprocessor/repetition/enum_binary_params.hpp>

#define BOOST_PP_FILENAME_1 \
    <boost/spirit/home/karma/nonterminal/detail/fcall.hpp>
#define BOOST_PP_ITERATION_LIMITS (1, SPIRIT_ARGUMENTS_LIMIT)
#include BOOST_PP_ITERATE()

///////////////////////////////////////////////////////////////////////////////
//
//  Preprocessor vertical repetition code
//
///////////////////////////////////////////////////////////////////////////////
#else // defined(BOOST_PP_IS_ITERATING)

#define N BOOST_PP_ITERATION()

    template <BOOST_PP_ENUM_PARAMS(N, typename A)>
    typename lazy_enable_if_c<
        (params_size == N)
      , proto::terminal<
            spirit::karma::parameterized_nonterminal<
                parameterized_subject_type
              , fusion::vector<BOOST_PP_ENUM_PARAMS(N, A)> >
        >
    >::type
    operator()(BOOST_PP_ENUM_BINARY_PARAMS(N, A, const& f)) const
    {
        typedef fusion::vector<BOOST_PP_ENUM_PARAMS(N, A)> vector_type;
        typedef spirit::karma::parameterized_nonterminal<
            parameterized_subject_type, vector_type> parameterized_type;
        typedef typename proto::terminal<parameterized_type>::type result_type;

        return result_type::make(
            parameterized_type(
                this->get_parameterized_subject()
              , fusion::make_vector(BOOST_PP_ENUM_PARAMS(N, f)))
        );
    }

#undef N
#endif // defined(BOOST_PP_IS_ITERATING)



/* fcall.hpp
59inp1K20zK03NYnyWt7OKndNo7sCcZ95c7ipfRC+pCIc4RiMGXHl0Qpx5cYqxkA9VfCROaZf7H0qCTwvcQ3Z7BnTU5Yua1vzljPGttE96dqf3jFu7dxDuysvKCo+M6HmOjj+SEmy0Y2hA8lu3sYRwcytMkPrZHRy4MbwmPITmOUN3Bmz0TnG8u9WOjJUtbep81l17s+Q4Ju3VrwF4PWpnfZTa78Z7ZuPZdd6mIBuNihQGlWzqB0YldKCxr/LkDyGubPO2cplbp5sbLPLzv6azplgJyJcXsoA56hDpCs/A5eTcsRLF1zhHolIez9cwoPU5PszG7HCCNbb9xSH+a03HBmt5x9ssUdSIpUPoztf6d9XzK6o31fyewd7fs65ubtewHHye27qXP7vmA02vf4+N9p3zdwHv91+57Mmf/vte9WzoS17/Gj/z/Uvsd1JK3xYHkgUw3dw8t5pGvYgWgdLXhGMpWiqXLP0KIvTcUBywle50oduRLOOlfq6TnRudLQUmGiAbFF32WOrtpiekGjKW+pCLB1JR9Hii6AvF4mr6LDig9ALzKQTvHSk9fzzEuveFF33bSOvHA1ILyoXbt2PCFF77hgGpGiZ16BtbKPXvE5Lsk+OsWnQgqUvQI6vIKY16DD5CMup2asqBJnfOgdUw2mbTrFqt+mV6y6bSbFGrAtxhbM4moQgj9GZ3ZQhW0UO2bGNnAsdpLYDOYK+x2IhD7QfRsmSCnwdkdtgFPv7i47b4UddnsAiWkDl0DGJYadn8HIB7J337n7yPgfHbU6d5jscDtq9U6kvZAaUXEhKEFfeKHRq9WMgFeXOTGJ+TF4lx9tG+JYEHNBsESdwWzrmTkm9n4BWC9YcOFMCPO0ukcKKTGOC99BwBSijDoH9DkVWkhZoLxfcC6EvbSKM4IxHai3pvFLGdghJJRCLeP1JlugY0g7WfSw3CSLDpZrZAmA5VJRFnvzjaB1NAYmnI2r/MR7xeu13Z1i659iC0uxDy3sinR1xwjBg703vd5wpKoz2G2C+xrclNjui7f1FLQVYoCjMSSu0haZYgtJsfe5rae7pxA86EA420XThVsDQZ2YHWMLOTPeemaAO+jceOu5AWwxMd8H+nsHIPOBc7QMcTRjLjstI+Gs4HH8MGAiDTCpdEQUZZtsxjRxTRBOSPjhmvQSaSkqQD1bLCadzZSnExfxNzclLO4pqjQW4as9vdUbi3AYQZ5enIhv4hZTllKUZvOidB8vSn2oLDx65qKQamjo/U3juaCyjF6mloNBf5nmTvH5wj2Mv3Lfo/b9c3/Zt38nX/25oG3wlZ9nGs/1dvzQLmFb8rYAY9FRLqGJH0Kb0EJFP0C4gpPEz4WcuSj3mo0C7jA6F4KzdFinXFyMj8OpreeymwsrNHwVWeF17GrJDz9naRauNIR7dnY3udPOXGzIbmb3g9h1wklsUREslx2NRkeNKcdpuVwW2Ob1mmvyB8ZVFGU324JpoEmhH3+yuSjbYwspTMVBuQXHn/Sk2BuLT9iod95M8mc30/PcADch5xe32PTUV28ORMIvarsl2NtaLFQmu1GcYmxheTHicfbqh0sJ5cUt84zryzsuitFrbZGr+9MzcE2UqPG2y4flZleKV9rhuE3jW0tcatGTItDlBbl7UUHgp1dQzuvyAtzBuJ80L3AODZZ3lzsaAwKVSX1Hc0xCuWD4vJzGQOZUg21hsqO136qL2PPdREPjeQKuZBQFS4STEkw51wxfpXC7gyUG84eW2FwMpLz2oU47DgISzwTw27XEKzOuyKeGhGSIwzBFT4MYfKjQfX4Qs2KvK4Ti3wPw1IshBDpniXH4rleRe3H2oVQRzlkMjuYoGgCZzlzkwyAD5TKR5WlF3ELrOBhLydJwq90r843gySOm4BBIi4EfHJMmNMycSa2846AuXXhC51wcq8Oi6gKNelG1d1mMa2KU1btML65j80qIxCDHovJ2K/xdE030zuCaGEMIq8tSYBXz2Bq8aFD8ke0A0Cmix1E63k4Mz02M6iz+RBPEX2awin9iFLE4QyuIrNW6WBaBZTGii+ooEWZl8eOunKfbvcL32cJ38hkPM2fi8GCLHoNWGkcG4YTWikZd4QUjxSesgkpvOyW5cnb1icJ8A+u1hyam6+1RrIBwLy/3wnL6bOplpnYta6UhSobgyRl0dB7Gv7q8QHcTGxTD1f2axYBtZ/YgoqICpnPX+D4TkTRnLp4pP/cT6YYzGMyGJJyQ8HneuMfSNaH2XfCwP8EYGMEgVW/LbsjWf4JKxusgSq47CgdeHV9kwHJ73M6lc6QatMcX6R9osXQ12X7I2HcJX2dvs3edZ66wdSnD/sGcLpauFPpMXvkb+D4M95CZ5+qZLzyr2SLz9K4VP+kKv8W+OaiEn5BqKOjKeRAzXz+X32bcb2mTE24mOc9+q/Z4/Uw+zquixmVQquFaXc4gS1tOWAUWi1oMZ540qKEzS6kFqtDaQs8OryPVdjZb/zp6FOhScx/Kt9fJgQ4LYRpkH3REulBCiud/OVdPLmrhz7jxohZXf7ViYvDTAKyCSQwq/6mXyZZBGiXZlpIYJBIDWzKVYeP76Xr3XdjKj6uHsZPfFjq2Hx6BCeXKzZGOwcBrHIv0+4GXJxTdesVDfJ0CqSzzZOBIpU1SL1NGXsQ8VGi22c4dbK7KDxGq3sGbPJ1VXDSRfRLbcKYX5tz65+kynKPwTpzW6UVQXp858yoTTnwMvu6gzfB2GgIcFTGOA7rC60uyeplW/ZTXPo8Qmkwci3KgojVI0BWXEyvhhuPHARU/Bgu6EBwMpTdX2eiFPcA5gsgnFF5fQASrjs5PKJ9XKS4YS6OFsc0Yk9mCxNRHqE6NQlhi48/tymkiUGYsftqEAE0AmUAyOjJBZILJhJDRk+lCJpRMGBkDmXAyXckYyZjIdCPTnUwPMhFkIsn0JNOLTBSZ3mT6kOlLJppMPzL9yQwgE0PmNjIDyQwiE0tmMJkhZG4nM5TMHWTuJBNHZhiZ4WTuInM3mXgyI8jcQyaBzEgyo8jcS+Y+MqPJJJIZQ8ZMJonMWDL3kxlHJpnMeDITyEwkM4mMhcxkMlPIpJCZSuYBMg+SmUYmlcx0MjPIWMnMJDOLTBqZ2WTSyWSQySQzh0wWmYfIPExmLplsMvPIzCezgMwjZB4l8wcyC8ksIpND5jEyuWQeJ5NH5gkyi8k8SeYpMn8ks4TMn8gsJbOMjI2MncxyMivIrCTzNJk/k/kLmVVk8smsJrOGTCEZs2fpwMJ2K5W9FX2wuajiepCjwjRTLPnU6y2cboCGyXKHOqpiMn5ztoyjNSK/p6PcZBUf/pStxChM4XhsMzI4ymOsnKSDgpV8c8XSAWNZgFGFCwzeNdi6SwWdMUr8hCpMdiWn5cf3KNPhYHk9Ir+HTMOEDP0PcPkQs7+NxscDqi7WzahDjnatvUtLAbagaO1hjvYAe3RL8iStrWdegLiYoHlaoVX8A2iyzNWYMc+EnTgn88n0UH7IFD/dMUP86D4sSemootQbrfghOKtqUrxOU+y1GTLFJ1vb2bFQOCkDW+zyTLlRNaTCWqlDw47Kabf3FUcRyBGjEfu0omODbxrYdAQhi8+u1Jv7bSfWS/uIXWXYlWsKTCy6n3TWCaGSRHAlcS1xhQshhBj3kRiORq2tKk28fp/yDSWkhXy1NkOa+GU7Ps5YmtxGcbOPoyO1yXfRLj4F4OPKiyQr7jBPE2ciNTrSV5hs2Oaw9ac+Vx/vcr1Y5G73FuYYrt2Eds5yBjsn652TdUppkVf0RIojWWBsGcXnpKYkzLEyTsYiHPi1LdlY/CPr/trCHDUxzskGqZ6liJas7xqoW2DvkiEuxSJFd5BAQQR7l0dR8Bni14ikVXwsmLVuFDQWMmBtO+W/segZdKUnG56xz8wQd9wnl4r4DHELt7fbYlFcyEFpmSEnpvgcuR2NA7IqGoMDQ7Lmu4PKNs3qZSpN1sU+k/SMPQS1I0ajKVwdhUbBHolo0Jj5XYwa7CHVk6OwaVzo6p2uM+7Wjnd2dUdcq+9L3VATlfQukw2OHB1yuuOWwmghHRc36vPa51C305neZPZQ8ejZwvP95q/q4pFPDVtawlnzlVV68yhWQgaIzYRwRoknfEDxD0letoNtOkY2KKmZVDyUohJC5aR0WryOWml7hPgBJ37FR+zOLbyBicwV053ZV80njUXBxKSlIsBYfEuHtQoG26jSSfGxAeV1rSWWduO+8pQ8XZatd4q9q3DgWh11vHs6vm13ppuEbIMz2+P+M/e19xYtPKS4X30FYa+ZyvG9woHjojMV2iHQaTFhArKWCohQn0XkxWft/cXrV0GBcilqGbFeToynsJ1Ii0vc0Zn+IYEia3RO6joUG6Nndx0mGAOPtozXpQiVtj+XTg0quB5qW8ouYFnsTTUV5LdrSsIEo2uittqC4/k0VZO6BoXarIKxdFrXwQBbGHhciV4wJnMKQAM4dHCofTCDDgG0D4NGKFCCBXLYkNA8jStVnImD64QQ78hgb2TRO/zYtZVsuCYW1xpLnsSX11ST8bmF8AvRpl51TQrWteCOaZxgRSHTqDAiAJsMbKEF5lB7UIFe5w4siLkpZNMI5WpgpTObBi5XzfVGx3FUrFRTqTapj7HoA3IkhdsMJYETx1MaSxgyEj7FXLMsyjVeWzA6lPRhRQC9qgoMddsp/d1Pei0mkpmdruyyeDtLrahCsllwh69tHFRLsC7FFlGQ7w21fVwVGC6ElKZ6S6YFB7kHm7M99mD2YhPlkzcPh2SK99/Dvhwxbx3hJ5JAiRaTEce0ed2RQgiPezIiGeAOKtWS8EJlnMWDDKBIGovrNPwwjhp6PlgaVlS7Mnii9KwG3zSTjbtr3UZHq25NDwp8adcHjbvDkgs+RhdLYxNLexh3HzLuc8JZXGsPF9+8jPKE45vdfx6Pfn9gvTtZMLZMGkFRGjyxZPaIIEdrwKoupT0EY8nsroMn4juY4hoyMa7e3f1a/at52lk4mlRcOILFjLRnXLbnuIhdtmleuydPk4vTWb2ROKmVIkCJN5Ino1WceBktRWozLiTD3XIhVjHhB/LCXTyt7cZiQcsyTHLwp9ArodZcaXylIrAct9lN6xnvrqIyEZbj+K8LBduFTmm8R++4TsUCJ5A7rofbuuU4wxyVAY7yAMp5aRcrOVcdFe3mimX9XSkBOY7EUHs4dvpRkQhlxySjEKGJclhMAXIpCcAMxH8qJQ+zUpKulJKhOY781lDbh3nhc7BAl0pKK0oKLNfJMlgIqZoUPCTUfSdKTggHF7Oi044EDoxnCcz9u3AmJL9SgPqgAPWmOm3rqmsJRgHqGuDukiNoOIwyhVSa9BKaOSZfXtA8c5W9l7jB49Ocm8jqjJfyMJpqfdJY/BAsi5o10tx2tG/sZiRqzUejNb+zVdWaP+bh6nqajxc01G6NX2ueLMMGdwS5+97/SWvOLu41W0x9y5OpNb1+ibM5f0lRpu49aWKXeL/2Xp5MSxNf4lvm0O73Et+95Av735zP77b/13ztf7yv/S9r6oPDx0xeb6eDjFm3K8HrLB75PTaWjGa/8d/jnk0TOxn8/WBspbYPEJMpQOdocYhPbnHPKN5WCdjYw3pV7WmuaJ4OgXzsUzptdGxAbd115xuxxLPENY5+C64H4GJGrf12UnbXjqMx6yd+e5EnS/VFH/s5xF7qR7xbJo3WxdiMeQF5bFNP2XBWlDLEx+6W19S/SvpVCGyZFKIjtbuWHOKqSdjeujihNjElwlUcQ6Ea11dYhUDvyBDhF29k0+buJqqOFcaiBYQ2/2IzjGaiGYusmN+JbKT3whssSRhxQrmzeBgShcrqs4OCsJ01+Xt8NgMRbiF/jGppaZiwK5aBqV0xrieSaHIJwYHVjpWjNbbIUuvIkvSrJam/OhaMxsGelqtW94PGfRVWceqJdizzsI0RXAgz7nBgqokUornG+CwujMchoJO+Z3tZcpmeMrAO0kvUhk70MkHcffO0aRxkFSepMGhnsaIrL8iVenUmNQsuYGZavbsQLZmaH2EueIpbjEVj0TBrXCy21gzIKBQjUoKGko4fcosUD2X7aEAsuFBaAiucxSg7ibtAaFzbwraYIf4aY9EXGhVPNE0dTKssV8M7Mf43IwRSa1y7g+2tAX8v4y450ChqbbqkAPttxj0JCbWOdkrpCihCJkyAcxfi53QhZBk4y8v8xPWz2YkFLJGMxVMRDmMaIMtpu4O0ktXJ3ouPdQJHMzkA5tKQPk5k4RmfuX6LxNKj7e9a2oNjSmYbRwpdnZOMo6VLAVgWi6I5GkUTl8IWfIYyo3G6OOttqLOspCVSL+LZWyjJhxNa4lhBcBWn0C91L5YNKe1B3YA3kGkFN6jl53JUacKTJ5eYkicXtnt7aDRLvxQ8nCTOg/Qe+j3LQ+bz+9k4EcExnJaJbq4yrsUVs9RoM4Vghm7GF1BpsE906k5+0VlozFo6tiI9SHYuOYosgp0H4Sca9/QIPB94lMvvIPn7aHdB/rzwh3OcUQLzDqzS7gIL/pvjNAVWFX4GaztiVva/GrPHtb+N2SNav5hNQcweZEhe11kdR5Ts8HTBKUdMFa3rcrTMwiussO/prmWlPvAootaVR+o/RmcbKbSl5QktGRm56eE4Ks7jZuesg21cxatxB45Tk1xhzZA7Hqxm1pvPG4v+JtciFneKRpXVVTQKxL+XADZD4C4AzefXHHYbeJvJizb5zBVYRHlC8HrLkiMMjfA4kgWU6Pd6dwHhHTnaxzaSp6ljK1hpOG1n/g7Whmjsix2fMYxtOLXViawK0phFFH0NmEdEe+0eJ1fPq+TMco9Q4gJlnmwz8owpGN0HR6G4Y8VtjD4a9DtE3gDSWN0gMEHiWKXw3RYafACbVKjJn4Mm/z6Pqsm3cVoxyycO2rH1/k1+qgy7p0Pqyrv+J01+mjh66H9q0OV95rxBr//Rx7nxx//YoJdfUhr0gqG+Br3TZSE4A95Ao+XkTGMxjm/PEPOB/BSjX4yb78oQFw+Vx80DM8QFQzsPm61D1cNmd4BQWZocG7smKYDvCMwQ7+bEjNEgFaNefoxC/gMjrbHoLcboh9s7GH3N7YzR0ds7M9p3uz+jlmRdgS0bF2dYruYF4WxZqzjkDtYVwDFmbBOUOzuBOi6e1fE0gl/ZXaDux9irNLLrKo/mu1IOjb2aYRWvp2PGCGLUTDHne1bV5QgWvTvGMVnXvjKcfebOcWodwQHucByQQwSvTseaOt9xVe/t9+1/msmO32dJz1LbWLyUpf+tIR0R/YXbWUS/H9I5ol8O+W1EY9fYZiAGoT7JQ6i3c5EztIeyqErY0kmgEou+M26cjLPVl1i6IF5swgYCGou/YnnwqEq0DJVoD/iJNuZ3REMzhqFognfKbyT8/GfO11iEC3BLLG3G3eVWcXEt79yM/A3+FRlv72HcZ2mjVP7ESqnMMzIFN5Lcmp+Jxe74Ui4+NdTXqykegsrxRpMyAJTc6Ooj7wzEfo8Ww2IWQCZyja2ZJy2wElpgRLNPC/QQH25S1/7NnWt/dzHJ91r84k6q9V//x1ofzGr90TRxQqyq1gdTrR+RJn4+iM9IFvABVpisLKn66xyLmjTssOje4rff
*/