/*=============================================================================
    Copyright (c) 2006 Tobias Schwinger
    http://spirit.sourceforge.net/

  Distributed under the Boost Software License, Version 1.0. (See accompanying
  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
=============================================================================*/
#if !defined(BOOST_SPIRIT_TREE_TYPEOF_HPP)
#define BOOST_SPIRIT_TREE_TYPEOF_HPP

#include <boost/typeof/typeof.hpp>

#include <boost/spirit/home/classic/core/typeof.hpp>

#include <boost/spirit/home/classic/tree/common_fwd.hpp>
#include <boost/spirit/home/classic/tree/parse_tree_fwd.hpp>
#include <boost/spirit/home/classic/tree/ast_fwd.hpp>


#include BOOST_TYPEOF_INCREMENT_REGISTRATION_GROUP()


// common.hpp (has forward header)

BOOST_TYPEOF_REGISTER_TEMPLATE(BOOST_SPIRIT_CLASSIC_NS::tree_node,1)
BOOST_TYPEOF_REGISTER_TEMPLATE(BOOST_SPIRIT_CLASSIC_NS::node_iter_data,2)
BOOST_TYPEOF_REGISTER_TEMPLATE(BOOST_SPIRIT_CLASSIC_NS::node_iter_data_factory,1)
BOOST_TYPEOF_REGISTER_TEMPLATE(BOOST_SPIRIT_CLASSIC_NS::node_val_data_factory,1)
BOOST_TYPEOF_REGISTER_TEMPLATE(BOOST_SPIRIT_CLASSIC_NS::node_all_val_data_factory,1)
BOOST_TYPEOF_REGISTER_TEMPLATE(BOOST_SPIRIT_CLASSIC_NS::tree_match,3)
BOOST_TYPEOF_REGISTER_TYPE(BOOST_SPIRIT_CLASSIC_NS::tree_policy)
BOOST_TYPEOF_REGISTER_TEMPLATE(BOOST_SPIRIT_CLASSIC_NS::common_tree_match_policy,4)
BOOST_TYPEOF_REGISTER_TEMPLATE(BOOST_SPIRIT_CLASSIC_NS::common_tree_tree_policy,2)
BOOST_TYPEOF_REGISTER_TEMPLATE(BOOST_SPIRIT_CLASSIC_NS::no_tree_gen_node_parser,1)
BOOST_TYPEOF_REGISTER_TEMPLATE(BOOST_SPIRIT_CLASSIC_NS::leaf_node_parser,1)
BOOST_TYPEOF_REGISTER_TEMPLATE(BOOST_SPIRIT_CLASSIC_NS::node_parser,2)
BOOST_TYPEOF_REGISTER_TYPE(BOOST_SPIRIT_CLASSIC_NS::discard_node_op)
BOOST_TYPEOF_REGISTER_TYPE(BOOST_SPIRIT_CLASSIC_NS::reduced_node_op)
BOOST_TYPEOF_REGISTER_TYPE(BOOST_SPIRIT_CLASSIC_NS::infix_node_op)
BOOST_TYPEOF_REGISTER_TYPE(BOOST_SPIRIT_CLASSIC_NS::discard_first_node_op)
BOOST_TYPEOF_REGISTER_TYPE(BOOST_SPIRIT_CLASSIC_NS::discard_last_node_op)
BOOST_TYPEOF_REGISTER_TYPE(BOOST_SPIRIT_CLASSIC_NS::inner_node_op)
BOOST_TYPEOF_REGISTER_TEMPLATE(BOOST_SPIRIT_CLASSIC_NS::action_directive_parser,2)
BOOST_TYPEOF_REGISTER_TYPE(BOOST_SPIRIT_CLASSIC_NS::access_match_action)
BOOST_TYPEOF_REGISTER_TEMPLATE(BOOST_SPIRIT_CLASSIC_NS::access_match_action::action,2)
BOOST_TYPEOF_REGISTER_TYPE(BOOST_SPIRIT_CLASSIC_NS::access_node_action)
BOOST_TYPEOF_REGISTER_TEMPLATE(BOOST_SPIRIT_CLASSIC_NS::access_node_action::action,2)
BOOST_TYPEOF_REGISTER_TEMPLATE(BOOST_SPIRIT_CLASSIC_NS::tree_parse_info,3)

BOOST_TYPEOF_REGISTER_TEMPLATE(BOOST_SPIRIT_CLASSIC_NS::node_iter_data,1)
BOOST_TYPEOF_REGISTER_TYPE(BOOST_SPIRIT_CLASSIC_NS::node_iter_data_factory<BOOST_SPIRIT_CLASSIC_NS::nil_t>)
BOOST_TYPEOF_REGISTER_TYPE(BOOST_SPIRIT_CLASSIC_NS::node_val_data_factory<BOOST_SPIRIT_CLASSIC_NS::nil_t>)
BOOST_TYPEOF_REGISTER_TYPE(BOOST_SPIRIT_CLASSIC_NS::node_all_val_data_factory<BOOST_SPIRIT_CLASSIC_NS::nil_t>)
BOOST_TYPEOF_REGISTER_TEMPLATE(BOOST_SPIRIT_CLASSIC_NS::tree_match,2)
BOOST_TYPEOF_REGISTER_TEMPLATE(BOOST_SPIRIT_CLASSIC_NS::tree_match,1)
BOOST_TYPEOF_REGISTER_TEMPLATE(BOOST_SPIRIT_CLASSIC_NS::tree_parse_info,2)
BOOST_TYPEOF_REGISTER_TEMPLATE(BOOST_SPIRIT_CLASSIC_NS::tree_parse_info,1)


// parse_tree.hpp (has forward header)

BOOST_TYPEOF_REGISTER_TEMPLATE(BOOST_SPIRIT_CLASSIC_NS::pt_tree_policy,2)
BOOST_TYPEOF_REGISTER_TEMPLATE(BOOST_SPIRIT_CLASSIC_NS::pt_match_policy,2)
BOOST_TYPEOF_REGISTER_TEMPLATE(BOOST_SPIRIT_CLASSIC_NS::gen_pt_node_parser,1)

BOOST_TYPEOF_REGISTER_TEMPLATE(BOOST_SPIRIT_CLASSIC_NS::pt_match_policy,1)


// ast.hpp (has forward header)

BOOST_TYPEOF_REGISTER_TEMPLATE(BOOST_SPIRIT_CLASSIC_NS::ast_tree_policy,2)
BOOST_TYPEOF_REGISTER_TEMPLATE(BOOST_SPIRIT_CLASSIC_NS::ast_match_policy,2)
BOOST_TYPEOF_REGISTER_TEMPLATE(BOOST_SPIRIT_CLASSIC_NS::gen_ast_node_parser,1)
BOOST_TYPEOF_REGISTER_TYPE(BOOST_SPIRIT_CLASSIC_NS::root_node_op)

BOOST_TYPEOF_REGISTER_TEMPLATE(BOOST_SPIRIT_CLASSIC_NS::ast_match_policy,1)


#endif


/* typeof.hpp
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
*/