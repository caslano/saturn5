/*=============================================================================
    Copyright (c) 2006 Tobias Schwinger
    http://spirit.sourceforge.net/

  Distributed under the Boost Software License, Version 1.0. (See accompanying
  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
=============================================================================*/
#if !defined(BOOST_SPIRIT_UTILITY_TYPEOF_HPP)
#define BOOST_SPIRIT_UTILITY_TYPEOF_HPP

#include <boost/typeof/typeof.hpp>

#include <boost/spirit/home/classic/namespace.hpp>
#include <boost/spirit/home/classic/core/typeof.hpp>

#include <boost/spirit/home/classic/utility/escape_char_fwd.hpp>
#include <boost/spirit/home/classic/utility/confix_fwd.hpp>
#include <boost/spirit/home/classic/utility/lists_fwd.hpp>
#include <boost/spirit/home/classic/utility/distinct_fwd.hpp>
#include <boost/spirit/home/classic/utility/grammar_def_fwd.hpp>

namespace boost { namespace spirit {

BOOST_SPIRIT_CLASSIC_NAMESPACE_BEGIN

    // chset.hpp
    template<typename CharT> class chset;        

    // functor_parser.hpp
    template<typename FunctorT> struct functor_parser;

    // loops.hpp
    template<class ParserT, typename ExactT> class fixed_loop;
    template<class ParserT, typename MinT, typename MaxT> class finite_loop;
    template<class ParserT, typename MinT> class infinite_loop;

    // regex.hpp
    template<typename CharT> struct rxstrlit;

    // flush_multi_pass.hpp
    class flush_multi_pass_parser;  

    // scoped_lock.hpp
    template<class MutexT, class ParserT> struct scoped_lock_parser;

BOOST_SPIRIT_CLASSIC_NAMESPACE_END

}} // namespace BOOST_SPIRIT_CLASSIC_NS


#include BOOST_TYPEOF_INCREMENT_REGISTRATION_GROUP()


// chset.hpp

BOOST_TYPEOF_REGISTER_TEMPLATE(BOOST_SPIRIT_CLASSIC_NS::chset,1)

BOOST_TYPEOF_REGISTER_TYPE(BOOST_SPIRIT_CLASSIC_NS::chset<char>)
BOOST_TYPEOF_REGISTER_TYPE(BOOST_SPIRIT_CLASSIC_NS::chset<wchar_t>)


// escape_char.hpp (has forward header)

BOOST_TYPEOF_REGISTER_TEMPLATE(BOOST_SPIRIT_CLASSIC_NS::escape_char_parser,(BOOST_TYPEOF_INTEGRAL(unsigned long))(typename))
BOOST_TYPEOF_REGISTER_TEMPLATE(BOOST_SPIRIT_CLASSIC_NS::escape_char_action,(class)(typename)(BOOST_TYPEOF_INTEGRAL(unsigned long))(typename))

BOOST_TYPEOF_REGISTER_TEMPLATE(BOOST_SPIRIT_CLASSIC_NS::escape_char_parser,(BOOST_TYPEOF_INTEGRAL(unsigned long)))
BOOST_TYPEOF_REGISTER_TEMPLATE(BOOST_SPIRIT_CLASSIC_NS::escape_char_action,(class)(typename)(BOOST_TYPEOF_INTEGRAL(unsigned long)))


// functor_parser.hpp

BOOST_TYPEOF_REGISTER_TEMPLATE(BOOST_SPIRIT_CLASSIC_NS::functor_parser,1)


// loops.hpp

BOOST_TYPEOF_REGISTER_TEMPLATE(BOOST_SPIRIT_CLASSIC_NS::fixed_loop,2)
BOOST_TYPEOF_REGISTER_TEMPLATE(BOOST_SPIRIT_CLASSIC_NS::finite_loop,3)
BOOST_TYPEOF_REGISTER_TEMPLATE(BOOST_SPIRIT_CLASSIC_NS::infinite_loop,2)


// regex.hpp

BOOST_TYPEOF_REGISTER_TEMPLATE(BOOST_SPIRIT_CLASSIC_NS::rxstrlit,1)

BOOST_TYPEOF_REGISTER_TYPE(BOOST_SPIRIT_CLASSIC_NS::rxstrlit<char>)
BOOST_TYPEOF_REGISTER_TYPE(BOOST_SPIRIT_CLASSIC_NS::rxstrlit<wchar_t>)


// confix.hpp (has forward header)

BOOST_TYPEOF_REGISTER_TEMPLATE(BOOST_SPIRIT_CLASSIC_NS::confix_parser, 6)
BOOST_TYPEOF_REGISTER_TEMPLATE(BOOST_SPIRIT_CLASSIC_NS::confix_parser, 5)
BOOST_TYPEOF_REGISTER_TEMPLATE(BOOST_SPIRIT_CLASSIC_NS::confix_parser, 4)
BOOST_TYPEOF_REGISTER_TEMPLATE(BOOST_SPIRIT_CLASSIC_NS::confix_parser, 3)
BOOST_TYPEOF_REGISTER_TEMPLATE(BOOST_SPIRIT_CLASSIC_NS::comment_nest_parser, 2)
BOOST_TYPEOF_REGISTER_TYPE(BOOST_SPIRIT_CLASSIC_NS::is_nested)
BOOST_TYPEOF_REGISTER_TYPE(BOOST_SPIRIT_CLASSIC_NS::non_nested)
BOOST_TYPEOF_REGISTER_TYPE(BOOST_SPIRIT_CLASSIC_NS::is_lexeme)
BOOST_TYPEOF_REGISTER_TYPE(BOOST_SPIRIT_CLASSIC_NS::non_lexeme)


// lists.hpp (has forward header)

BOOST_TYPEOF_REGISTER_TEMPLATE(BOOST_SPIRIT_CLASSIC_NS::list_parser,4)
BOOST_TYPEOF_REGISTER_TEMPLATE(BOOST_SPIRIT_CLASSIC_NS::list_parser,3)
BOOST_TYPEOF_REGISTER_TEMPLATE(BOOST_SPIRIT_CLASSIC_NS::list_parser,2)
BOOST_TYPEOF_REGISTER_TYPE(BOOST_SPIRIT_CLASSIC_NS::no_list_endtoken)


// distinct.hpp (has forward header)

BOOST_TYPEOF_REGISTER_TEMPLATE(BOOST_SPIRIT_CLASSIC_NS::distinct_parser,2)
BOOST_TYPEOF_REGISTER_TEMPLATE(BOOST_SPIRIT_CLASSIC_NS::distinct_parser,1)
BOOST_TYPEOF_REGISTER_TEMPLATE(BOOST_SPIRIT_CLASSIC_NS::dynamic_distinct_parser,1)
BOOST_TYPEOF_REGISTER_TYPE(BOOST_SPIRIT_CLASSIC_NS::distinct_parser<>)


// flush_multi_pass.hpp

BOOST_TYPEOF_REGISTER_TYPE(BOOST_SPIRIT_CLASSIC_NS::flush_multi_pass_parser)


// scoped_lock.hpp

BOOST_TYPEOF_REGISTER_TEMPLATE(BOOST_SPIRIT_CLASSIC_NS::scoped_lock_parser,2)


// grammar_gen.hpp (has forward header)

BOOST_TYPEOF_REGISTER_TEMPLATE(BOOST_SPIRIT_CLASSIC_NS::grammar_def,BOOST_SPIRIT_GRAMMAR_STARTRULE_TYPE_LIMIT)

#if BOOST_SPIRIT_GRAMMAR_STARTRULE_TYPE_LIMIT > 12
BOOST_TYPEOF_REGISTER_TEMPLATE(BOOST_SPIRIT_CLASSIC_NS::grammar_def,12)
#endif
#if BOOST_SPIRIT_GRAMMAR_STARTRULE_TYPE_LIMIT >  9
BOOST_TYPEOF_REGISTER_TEMPLATE(BOOST_SPIRIT_CLASSIC_NS::grammar_def, 9)
#endif
#if BOOST_SPIRIT_GRAMMAR_STARTRULE_TYPE_LIMIT >  6
BOOST_TYPEOF_REGISTER_TEMPLATE(BOOST_SPIRIT_CLASSIC_NS::grammar_def, 6)
#endif
#if BOOST_SPIRIT_GRAMMAR_STARTRULE_TYPE_LIMIT >  3
BOOST_TYPEOF_REGISTER_TEMPLATE(BOOST_SPIRIT_CLASSIC_NS::grammar_def, 3)
#endif


#endif



/* typeof.hpp
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
*/