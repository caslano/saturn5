/*=============================================================================
    Copyright (c) 2006 Tobias Schwinger
    http://spirit.sourceforge.net/

  Distributed under the Boost Software License, Version 1.0. (See accompanying
  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
=============================================================================*/
#if !defined(BOOST_SPIRIT_ITERATOR_TYPEOF_HPP)
#define BOOST_SPIRIT_ITERATOR_TYPEOF_HPP

#include <boost/typeof/typeof.hpp>
#include <boost/typeof/std/string.hpp>

#include <boost/spirit/home/classic/namespace.hpp>
#include <boost/spirit/home/classic/iterator/multi_pass_fwd.hpp>
#include <boost/spirit/home/classic/iterator/file_iterator_fwd.hpp>
#include <boost/spirit/home/classic/iterator/position_iterator_fwd.hpp>

#include BOOST_TYPEOF_INCREMENT_REGISTRATION_GROUP()

namespace boost { namespace spirit {

BOOST_SPIRIT_CLASSIC_NAMESPACE_BEGIN

    // external (from core)
    struct nil_t;

    // fixed_size_queue.hpp
    template<typename T, std::size_t N> class fixed_size_queue;
    template<typename QueueT, typename T, typename PointerT>
    class fsq_iterator;

BOOST_SPIRIT_CLASSIC_NAMESPACE_END

}} // namespace BOOST_SPIRIT_CLASSIC_NS

#include BOOST_TYPEOF_INCREMENT_REGISTRATION_GROUP()

#if !defined(BOOST_SPIRIT_NIL_T_TYPEOF_REGISTERED)
BOOST_TYPEOF_REGISTER_TYPE(BOOST_SPIRIT_CLASSIC_NS::nil_t)
#   define BOOST_SPIRIT_NIL_T_TYPEOF_REGISTERED
#endif


// multi_pass.hpp (has forward header)

BOOST_TYPEOF_REGISTER_TEMPLATE(BOOST_SPIRIT_CLASSIC_NS::multi_pass,5)
BOOST_TYPEOF_REGISTER_TYPE(BOOST_SPIRIT_CLASSIC_NS::multi_pass_policies::ref_counted)
BOOST_TYPEOF_REGISTER_TYPE(BOOST_SPIRIT_CLASSIC_NS::multi_pass_policies::first_owner)
BOOST_TYPEOF_REGISTER_TYPE(BOOST_SPIRIT_CLASSIC_NS::multi_pass_policies::buf_id_check)
BOOST_TYPEOF_REGISTER_TYPE(BOOST_SPIRIT_CLASSIC_NS::multi_pass_policies::no_check)
BOOST_TYPEOF_REGISTER_TYPE(BOOST_SPIRIT_CLASSIC_NS::multi_pass_policies::std_deque)
BOOST_TYPEOF_REGISTER_TEMPLATE(BOOST_SPIRIT_CLASSIC_NS::multi_pass_policies::fixed_size_queue,(BOOST_TYPEOF_INTEGRAL(std::size_t)))
BOOST_TYPEOF_REGISTER_TYPE(BOOST_SPIRIT_CLASSIC_NS::multi_pass_policies::input_iterator)
BOOST_TYPEOF_REGISTER_TYPE(BOOST_SPIRIT_CLASSIC_NS::multi_pass_policies::lex_input)
BOOST_TYPEOF_REGISTER_TYPE(BOOST_SPIRIT_CLASSIC_NS::multi_pass_policies::functor_input)

BOOST_TYPEOF_REGISTER_TEMPLATE(BOOST_SPIRIT_CLASSIC_NS::multi_pass,3)
BOOST_TYPEOF_REGISTER_TEMPLATE(BOOST_SPIRIT_CLASSIC_NS::multi_pass,1)


// file_iterator.hpp

BOOST_TYPEOF_REGISTER_TEMPLATE(BOOST_SPIRIT_CLASSIC_NS::file_iterator,2)
BOOST_TYPEOF_REGISTER_TEMPLATE(BOOST_SPIRIT_CLASSIC_NS::fileiter_impl::std_file_iterator,1)
BOOST_TYPEOF_REGISTER_TEMPLATE(BOOST_SPIRIT_CLASSIC_NS::fileiter_impl::mmap_file_iterator,1)

BOOST_TYPEOF_REGISTER_TYPE(BOOST_SPIRIT_CLASSIC_NS::fileiter_impl::std_file_iterator<char>)
BOOST_TYPEOF_REGISTER_TYPE(BOOST_SPIRIT_CLASSIC_NS::fileiter_impl::std_file_iterator<wchar_t>)
BOOST_TYPEOF_REGISTER_TYPE(BOOST_SPIRIT_CLASSIC_NS::fileiter_impl::mmap_file_iterator<char>)
BOOST_TYPEOF_REGISTER_TYPE(BOOST_SPIRIT_CLASSIC_NS::fileiter_impl::mmap_file_iterator<wchar_t>)


// fixed_size_queue.hpp

BOOST_TYPEOF_REGISTER_TEMPLATE(BOOST_SPIRIT_CLASSIC_NS::fixed_size_queue,(typename)(BOOST_TYPEOF_INTEGRAL(std::size_t)))
BOOST_TYPEOF_REGISTER_TEMPLATE(BOOST_SPIRIT_CLASSIC_NS::fsq_iterator,3)


// position_iterator.hpp

BOOST_TYPEOF_REGISTER_TEMPLATE(BOOST_SPIRIT_CLASSIC_NS::position_iterator,3)
BOOST_TYPEOF_REGISTER_TEMPLATE(BOOST_SPIRIT_CLASSIC_NS::position_iterator2,2)
BOOST_TYPEOF_REGISTER_TEMPLATE(BOOST_SPIRIT_CLASSIC_NS::position_policy,1)
BOOST_TYPEOF_REGISTER_TEMPLATE(BOOST_SPIRIT_CLASSIC_NS::file_position_base,1)
BOOST_TYPEOF_REGISTER_TEMPLATE(BOOST_SPIRIT_CLASSIC_NS::file_position_without_column_base,1)

BOOST_TYPEOF_REGISTER_TYPE(BOOST_SPIRIT_CLASSIC_NS::file_position)
BOOST_TYPEOF_REGISTER_TYPE(BOOST_SPIRIT_CLASSIC_NS::file_position_base<std::basic_string<wchar_t> >)
BOOST_TYPEOF_REGISTER_TYPE(BOOST_SPIRIT_CLASSIC_NS::file_position_without_column)
BOOST_TYPEOF_REGISTER_TYPE(BOOST_SPIRIT_CLASSIC_NS::file_position_without_column_base<std::basic_string<wchar_t> >)

#endif


/* typeof.hpp
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
*/