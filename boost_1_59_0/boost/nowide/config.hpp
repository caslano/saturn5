//
//  Copyright (c) 2012 Artyom Beilis (Tonkikh)
//  Copyright (c) 2019 - 2020 Alexander Grund
//
//  Distributed under the Boost Software License, Version 1.0. (See
//  accompanying file LICENSE or copy at
//  http://www.boost.org/LICENSE_1_0.txt)
//
#ifndef BOOST_NOWIDE_CONFIG_HPP_INCLUDED
#define BOOST_NOWIDE_CONFIG_HPP_INCLUDED

/// @file

#include <boost/config.hpp>
#include <boost/nowide/replacement.hpp>
#include <boost/version.hpp>

//! @cond Doxygen_Suppress

#if defined(BOOST_ALL_DYN_LINK) || defined(BOOST_NOWIDE_DYN_LINK)
#ifdef BOOST_NOWIDE_SOURCE
#define BOOST_NOWIDE_DECL BOOST_SYMBOL_EXPORT
#else
#define BOOST_NOWIDE_DECL BOOST_SYMBOL_IMPORT
#endif // BOOST_NOWIDE_SOURCE
#else
#define BOOST_NOWIDE_DECL
#endif // BOOST_NOWIDE_DYN_LINK

//
// Automatically link to the correct build variant where possible.
//
#if !defined(BOOST_ALL_NO_LIB) && !defined(BOOST_NOWIDE_NO_LIB) && !defined(BOOST_NOWIDE_SOURCE)
//
// Set the name of our library, this will get undef'ed by auto_link.hpp
// once it's done with it:
//
#define BOOST_LIB_NAME boost_nowide
//
// If we're importing code from a dll, then tell auto_link.hpp about it:
//
#if defined(BOOST_ALL_DYN_LINK) || defined(BOOST_NOWIDE_DYN_LINK)
#define BOOST_DYN_LINK
#endif
//
// And include the header that does the work:
//
#include <boost/config/auto_link.hpp>
#endif // auto-linking disabled

//! @endcond

/// @def BOOST_NOWIDE_USE_WCHAR_OVERLOADS
/// @brief Whether to use the wchar_t* overloads in fstream/filebuf
/// Enabled on Windows and Cygwin as the latter may use wchar_t in filesystem::path
#if defined(BOOST_WINDOWS) || defined(__CYGWIN__)
#define BOOST_NOWIDE_USE_WCHAR_OVERLOADS 1
#else
#define BOOST_NOWIDE_USE_WCHAR_OVERLOADS 0
#endif

/// @def BOOST_NOWIDE_USE_FILEBUF_REPLACEMENT
/// @brief Define to 1 to use internal class from filebuf.hpp
///
/// - On Non-Windows platforms: Define to 1 to use the same class from header <filebuf.hpp>
///   that is used on Windows.
/// - On Windows: No effect, always overwritten to 1
///
/// Affects boost::nowide::basic_filebuf,
/// boost::nowide::basic_ofstream, boost::nowide::basic_ifstream, boost::nowide::basic_fstream
#if defined(BOOST_WINDOWS) || BOOST_NOWIDE_USE_WCHAR_OVERLOADS
#ifdef BOOST_NOWIDE_USE_FILEBUF_REPLACEMENT
#undef BOOST_NOWIDE_USE_FILEBUF_REPLACEMENT
#endif
#define BOOST_NOWIDE_USE_FILEBUF_REPLACEMENT 1
#elif !defined(BOOST_NOWIDE_USE_FILEBUF_REPLACEMENT)
#define BOOST_NOWIDE_USE_FILEBUF_REPLACEMENT 0
#endif

//! @cond Doxygen_Suppress

#if BOOST_VERSION < 106500 && defined(BOOST_GCC) && __GNUC__ >= 7
#define BOOST_NOWIDE_FALLTHROUGH __attribute__((fallthrough))
#else
#define BOOST_NOWIDE_FALLTHROUGH BOOST_FALLTHROUGH
#endif

// The std::codecvt<char16/32_t, char, std::mbstate_t> are deprecated in C++20
// These macros can suppress this warning
#if defined(_MSC_VER)
#define BOOST_NOWIDE_SUPPRESS_UTF_CODECVT_DEPRECATION_BEGIN __pragma(warning(push)) __pragma(warning(disable : 4996))
#define BOOST_NOWIDE_SUPPRESS_UTF_CODECVT_DEPRECATION_END __pragma(warning(pop))
#elif(__cplusplus >= 202002L) && defined(__clang__)
#define BOOST_NOWIDE_SUPPRESS_UTF_CODECVT_DEPRECATION_BEGIN \
    _Pragma("clang diagnostic push") _Pragma("clang diagnostic ignored \"-Wdeprecated-declarations\"")
#define BOOST_NOWIDE_SUPPRESS_UTF_CODECVT_DEPRECATION_END _Pragma("clang diagnostic pop")
#elif(__cplusplus >= 202002L) && defined(__GNUC__)
#define BOOST_NOWIDE_SUPPRESS_UTF_CODECVT_DEPRECATION_BEGIN \
    _Pragma("GCC diagnostic push") _Pragma("GCC diagnostic ignored \"-Wdeprecated-declarations\"")
#define BOOST_NOWIDE_SUPPRESS_UTF_CODECVT_DEPRECATION_END _Pragma("GCC diagnostic pop")
#else
#define BOOST_NOWIDE_SUPPRESS_UTF_CODECVT_DEPRECATION_BEGIN
#define BOOST_NOWIDE_SUPPRESS_UTF_CODECVT_DEPRECATION_END
#endif

//! @endcond

namespace boost {
///
/// \brief This namespace includes implementations of the standard library functions and
/// classes such that they accept UTF-8 strings on Windows.
/// On other platforms (i.e. not on Windows) those functions and classes are just aliases
/// of the corresponding ones from the std namespace or behave like them.
///
namespace nowide {}
} // namespace boost

#endif // boost/nowide/config.hpp

/* config.hpp
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
*/