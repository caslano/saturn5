//
//  Copyright (c) 2020 Alexander Grund
//
//  Distributed under the Boost Software License, Version 1.0. (See
//  accompanying file LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
//
#ifndef BOOST_NOWIDE_STAT_HPP_INCLUDED
#define BOOST_NOWIDE_STAT_HPP_INCLUDED

#include <boost/nowide/config.hpp>
#include <sys/types.h>
// Include after sys/types.h
#include <sys/stat.h>

#if defined(__MINGW32__) && defined(__MSVCRT_VERSION__) && __MSVCRT_VERSION__ < 0x0601
/// Forward declaration in case MinGW32 is used and __MSVCRT_VERSION__ is defined lower than 6.1
struct __stat64;
#endif

namespace boost {
namespace nowide {
#if !defined(BOOST_WINDOWS) && !defined(BOOST_NOWIDE_DOXYGEN)
    // Note: `using x = struct ::stat` causes a bogus warning in GCC < 11
    // https://gcc.gnu.org/bugzilla/show_bug.cgi?id=66159

    typedef struct ::stat stat_t;
    typedef struct ::stat posix_stat_t;

    using ::stat;
#else
    /// \brief Typedef for the file info structure.
    /// Able to hold 64 bit file size and timestamps on Windows and usually also on other 64 Bit systems
    /// This allows to write portable code with optional LFS support
    typedef struct ::__stat64 stat_t;
    /// \brief Typedef for the file info structure used in the POSIX stat call
    /// Resolves to `struct _stat` on Windows and `struct stat` otherwise
    /// This allows to write portable code using the default stat function
    typedef struct ::_stat posix_stat_t;

    /// \cond INTERNAL
    namespace detail {
        BOOST_NOWIDE_DECL int stat(const char* path, stat_t* buffer, size_t buffer_size);
        BOOST_NOWIDE_DECL int stat(const char* path, posix_stat_t* buffer, size_t buffer_size);
    } // namespace detail
    /// \endcond

    ///
    /// \brief UTF-8 aware stat function, returns 0 on success
    ///
    /// Return information about a file from an UTF-8 encoded path
    ///
    inline int stat(const char* path, stat_t* buffer)
    {
        return detail::stat(path, buffer, sizeof(*buffer));
    }
    ///
    /// \brief UTF-8 aware stat function, returns 0 on success
    ///
    /// Return information about a file from an UTF-8 encoded path
    ///
    inline int stat(const char* path, posix_stat_t* buffer)
    {
        return detail::stat(path, buffer, sizeof(*buffer));
    }
#endif
} // namespace nowide
} // namespace boost

#endif

/* stat.hpp
BmBmdnLr+NJmPMvHWz3onHy7Qiy/lViVbq6uhwhVlrhuv4m5gjqN7G0yheTo+oQS2Z3BEFQJjSelYiJ+Etp+guKdJSRVqaBHplOzNiGlOWrzfBtmsztN5h2j2VE6U99HAE9rXMkRWP5tYqUmYsxoi4YNXWZ19/5rYKMRmV/da72gZ5n05erYlD10AePoS3MYekvPXWRyLL6pvR97yToi4Hm8nhR95nlBUe7oc70Zu2vYcZN7iWDK9Nu4Oe/yBn2duG1QXuT11ngWupUp84RjY9xhcrz0uzpkkqIjE0ek263JBYO1/ooKLddDh8C8tLCZoHR6QcXf9LJ/LUp2Uz+2ezEZI56sw4TLPOmXNr0ddz2wx4Cz6/3ZsEpkOxl/k9XaQt61ixz3UVKZS7foaqcz72qfozRce0aopcZYwdV/bT6O3WfqqvIugXQmSycH2rxOrYlfz0Sk9QE1eBWMGMaRcSXjonK8TQo+891wpqR1+RecXMuN5sITuk96XCaOvcq13XaD0fKkTXAw34oA8EjyPKn5YdzeSrNVHIkjJ3lYgFU/eQtaP8vf9swNbL8aNkB2E7xGhTvAVX+muH8YNrmKCFJXyuhDTRK6OeZvC1gPjEFhbYxPjtRIVZMzvIbuE/0O9Gh/pSpF6e1pdqmJW6oq+kOtetS4rmQR3BYIex0LrBRfQ6i/6N6WxlD7ZFgFgNLKtdlogM0VPkSPkV5vxu9StkWQU6ogDz+29J2f+BJaEVJ+JID5i99onCRMeEZE+WX0pilO4wxrsR+ITsI0kYx0b1L0NrtR9Ct3DsfN4Q3ZHxs+WgGpOThZSA2iNZCbVhAwthymF87Mic/QgBA89xsA4cyCAfSkqW1p7jJXZh16gSSe8G4pncHEd+CIkhzUnLcinGCwYMvDscs5W5HBzv/k1iIkVMAW998QgjeykmFc2nv2GulK6tCku/VrkyBZKEG4mEIOYdl8FE8QBIA4uwQVLgUunTizykGTipDpklt7W82paKNhLIHWeyE6H6IT7eU77NrjA8MJyT1/nMyQjhUxDagRNy8dHirAYH8CCFSFyzQKzfsd2+64PXcnft40pWmIP3nNHv1IX/97DoiTNpK4yrHS0/vWkVtHPl35lDCO7Kf4qWD88vsSp5hEFwH/U/s7pl5qEyuVptaDoTNs1cuALOygwVMYF0drDePbsgwTw8PcV3jLNRX0hhEVYaMR1US6nKiNOF1VWZOEBqhqBys6oo1GfEn11W160dbxfOT9HZl55X9qwnS6sL7aEbUza7I7oS6GXR21F2Trz5C2zmqvXTuF2Y3mSPe45zk3X+e6l5HwZtVFtC+VD4SsXv0zifN0r9ihbSieMTE8p8M/4ZcM4t+eClECAO0yViwl7kM7qgujsDZhq7bGOHxIclWndI378cnfxi7cgoe2iykc6v+OtKMl7zSwPKGn4WfzMXaUtmGapJYjq+WvebQm3S4M2dxjmn/lwuQiBmdycRt9gHurFjQVYkdG/DavDlDnDRpxbRY1pZfnYLmtkwXMn1rtb4fFUSWEC1fDuDg9Q9keG3GAljaL3A9BizGmD9AMqFDzH0vpNFs71nN5WOwuWX1EMHdXtN9jMjJotFds8a8paQAoK6xVZVdLVDLJGS47I3NZORKnMyFjm/6zQmNzNVOMvYtg+pTiLFmJ3jIHb9lE5LKvXKDQLI7gq9uOD1vk0sj3WyQ/Q6qu1nwlqc9M7r6W1wqoP4kHW8C4qvG7y/4vqIX8hpIl9M76I7UPTk3Ipo8RM9/Yaepd6q9LpbsUPZvO9ovhXWQztM3jYXriGZfRCIS5jr/309BdcZUBT7sYWiJgRJnR163eokV86Lf0UUKzkXYIhIk2cW5VciGp+T2arFupv5a/AC8q9L45IZFDkZym5PPhdjrIzd2LWzaQd8dIhCAgYA/6xaYFYwbhkIZ++8CO4b2UD09K2SWPROxcdu6Gqa/wBAgHpXMpi5CZr5MAq7wtSi5VcY0XNK8s+j1Q4JhecQm/1h4LrHsbUqWbNUOOnZDgQHZkU/+dI0flESHSxBC3Ih41+jew5mL1z67IMwrZSnV9sLUl9cyyhrJJfODNjHYlSQCIPsoWxj/PDsyYdYK4xXDArWUww9QYE+h6rUTQtZ/M8v2F0O5GHJ//g/bWXmAiIcwE7yeJOtRkHHvf1U183tsObXcBzqSvCcLRvmo8h8DFcdpAgD5ujarcBG0VmpeQInr962TCHgd5gkbPtMLAioS29P6Z5UNrnHan8nE/o0n9/k3zvDdVw8daILE0RZE77PnSvHk+ldKyclBzMsbvG5ey32NIaZjgqrJKueZZPNCsWWsftWDCY63DL4SvpVsSMbIGYNfhRnfsEgxMel2nwbqev2S+C6jQfYvY12TEZo2s0DOiaO5LJhLaLzpfSO5uLr2jSZZ7DOUbeca5BY2MM5Sc8AP3KKbpBiYsi7+BzNVR7uYkJwn4H5SJFdydmpJ+TTkk1jRb6Wa0ZLVYVSgSBSxIe4diIefJeuckqZraAlqcTWSm29jEW4KGw38a4v6NoRV+PucZgln79b9IMZTAU2dUqtrStc9dAfeoQgZs0F05aIWf2thMKPfLsE9T5q1uL6QhIWRS74Vl3aeRAdb9uC2whmP/yiF3iXG5qWpD9jhXOVEgiIdW21KOwaPPlbTq9lWjRy2ehOJIMZndj+Ee2L5r7FECMs8x5lo+37F8ecd6r2oM+rcCbQwbYv+VI+B1N8UFZ8sqlWlXRBr5w62mERuOWJ5mRg3Wi+kXWV3jxKxJfohWG7jzet1JahiDUQAckCzo1HhkdUeHuhHuo3AR5E4jxQTv3IWCYIlsMi0lwDmM1MDx2aQYnS7Mwm2kcRH70J4TxTdybjWSvlgjK/eA/7B5qOLPBdtKP2Yveh0ycF8y5MpSnk9+1M6MYlzLUHoVpyq5poaDI9TrrvmIoCxlw5BK1VKcP74EdfqQq1dQhFs6l5qbqSkQVsviNUvxA+yZlWwUOUk1d1etkl16qEA2bIcOufBGOHFLObPkWouzNo1sendcntLLD/J+N9lKeg8FoZscfoHer6510+NYxguY+4Opu8+vx9ZDidUHz5Zffyx30o0Mp6G6o7xKvzbO8aFb8s7nbaOgSllfU5jjrTkrBJx6n3L3NBbYbCmxlVzvDYZ52qMTHJ0KHSpOWs7iL/tLhM1+8jptt04Q1b4kQezmlRUlaMk/ydJ6ZPjMhsbhpHzye2J7ZWwvRJ57jAhGFm9guTdf+k2Zzjxlvj/dgs4sWUw8fABJLRT4uqpk4EpdzYrRZb6cfqEu5miTvxrdGspTZ23uBMGCyWjdzAI3NT+0eNH54K7pbz2E6bqRcQOXwSlqOYqfzbF7KmYPf/bif/RDLTi5qj2Bmnd8il3NXThFTszAvx507wV4woV0/2dzUw3hukuMrVWIdrAPtzh5eW6c4xoaA3GE+ppjYtLCkvfKv7hripVNQFbwg9QqAgmAr3nz0z2Y7Sh+eJtDgRrW6aoIzjqQLiAdEBMh88lrHmf+JUz6cat18jPJ8qrXc9W703YAwCIBC6+Rx+PSyzx+Uop8c7y6z1LdwKQshjYR05PL9fEDgWNdCuuNHAI8k3Fl1rVrc+wCnKSStlD0FS4jyB2pyoDrLZCRmDWR9RTAfPFidd3yywnejCWJaO1k8e9w3/jjkp7kXjxcLa8On37NO9uqAIcGFaqI8MiAy4d/K3ow4W1/HvSpTYSXk/6/qtB5dHRm6cJUYsbFzBaV84N30Vmg2uCzqnh7clDb+BF5VxfmzCO7DzjPTu67u2wkL9YCltj5he+0u0Hz7oMhNaKQWTqNNNLz7DXZvG5ectC9ZkQRCpWEcDvJYjyjNDhHQdJv/GEe+i6cAaK6E8+cFDoQ3Lo8EDmNjkdCoticAVo117Tj97cuWCuLbdNhzO1F741GE2LVV2LzyYhK3YeY4OqhKXimmNiXO0MA9KqO28tGT9lhCf5xs1kz66S4k8ZGjunX4/XcOx6Ci5yABx0oxoxcSO8NxNYmVsEy8zmv2KFTnAyY/R+Kl6r/EsqpY9p44h/8FXls0obKvnQW1FdvUtL0n198jAeIdKA55SlssoUEOKT5+lurbjubECgFbSbdVwrG3HTftqqjkwHV/2laSRGgheCPfLoweGU5+glnANcI9+SVtTazsuZZi1Nn5NqKk/7QLr0rhtvc8wDN6v4rGXhV5n8BmR+cO751zolQMkT3+gLg88X7p+2tiZaTK13GT8WXUgFEAWN2w1e0mXfkBZGeLnKP/GgcZp1yUOA6tg5lOrCQQUE5ay9NkuaRhiSMfTzlMdjy8l6Yfj2zZsi6Y9q2iTV/1di0kiuicTzFTMhU5rqRfZ0e3T+/ftylSSR7oeVhbGkV1yLgpGB/pVum21B4YtkjFAHw2/5yiSlRqrniP19YX6SHGXGMka6yZYMU7TLNBoROdh3Fpd7mA/ghf/zenwEA8d+pXLPg91KG8/kuAYMjfbeB82fYqyFyxitFVrB6gtwug9/oMP5/VBazCYFiWLW0GXKLa9H/hty74BazRCpjlSTAqN1HdUoPTGPq6Cmi72d0TvW3n6Px0dPkyAQNf0FKhD06V7zEH3HC3mHDDA9QvkdrR91ldmJ/armOulOPL9XptLeZcqOp4z4N1tZ5d9MummzETFu4omvbBApEBY7TSTy5EpvvFFqpCRjFYCNhMJLCUcUrD9ZiSqBBmwpePmHndV0jU6cXt/FQXhvqhMc5zQaRUl4u15Qaf7XlS0bpC9hicjgmPmhdBG7zHFd5bX70tZMfYCx6kBi4yTS/p3zHVfkm5m2fsl2IeYvC9MowuVNVY8rnh+qmom14t+jz52/MXgmk3FIyPJX18dk9gi08aH9ZQ9kxXAGMYcdgzWIHu1/0jyFAbg5vDG33Q4Gjaa74bB46PltWu242aPJNzQcX9LrhTQMxvX1hd19Jevlib+Uqbxl35PGfbN3e0buz6g7pdYNuDSTbg4Ji37tt4/+zRwuHn4/wbRZ2IPahSQSc8p751EviJe0lG06lorhHEeeWY/9BOZiU9uCgKePLnk6AfD5fHYYFDV/jN18luKbcd4M0x6K4hkzAwwSeMQ05eKy4kVQ3lUiqS+4SGRAR8/HaqfSyJuIWahsCrK+KfFEhv//5ShmBV4Zsrq1OiAtCNafzFvldZy9Ql936V+5bt3/5Glv6Msvk1u7OrfMr7n52o8f9InAwT6DrOG5nxRV5/t/ZxTXcrmLPAmqPghUfGctQEg2Z1+twW2uvac3atGCrEvd//lqWzdGcOc4StqMcG5B/XciZ1GlLBrT6yOPbOhQBXH7swSOr1xQ9PcZ8rNpiF1WRRxY2Zg0vtEoqzVP7TmpWZ+haWyBh92jWJgDt8wuX63dWfd0MuiDMMHb3Fu7r1dlwm+PmIGr6E2/yE9+d72fllPBPtpyvvcByB9tS0XecGYC4LJ8Ska04BsKyIBb21XN9gUA+dyXyRKNqjePWDLQT/hB8NTgYgHtZZjWH6sLapMT99tR9iv6c4H9sxg2DgJrebQlYLavtl2DhWWOj94lXEaANRPDAMwAJI6fVg/DQRXAHLtbp9rmLVw06N66lv6NE44P9pjSkT0sgSJQFSV7g959NvlD3p2A1aEwbXPT2ooeT23INR+QjXaeD/iuq9UPPzafUNPeHmnQPi5R3KdhfKi/IfSk7MIzTQP3lItC79jpyxmhst0TFuexx7EMnuDSqUA4+sWxEFzIovQQ4n5f6pze5wP3LKQyc02GqWLHDrBPs8X10w/CnItcWD8lh+fVcq9qIWjBx0UxKIUrj/dSbyC4jtIa39TyRhgfWvtNx4T+JpVWUWG00CR4lWLtwwGJMpL3PPSg9jSQvALBL5pZ4nQhA+In6HSOYlgnMY+X63o0kK1r+MfQTUDReW2VTTt4sqvozLJxM5JPJvRF6dqsJhDBEifKB+1veSH+fySTxguCUiYZ1PlIWnstdpz3X8aUnsCfbRFlPctqdahOlh8GJps+iXpLCeduIdKKE9vY+FqJgZ6JFqQZo5lgukWpy7FhuWkSbzAnnFLJoPNn6CDLN0bqTUVs0evzoP3N3Zoh1ALzIfonzHQS0K6XLM+srwC4z+o0QrcDCxuxZZVOwqenom1ndL5ynhEZXdEqUWa76JVobXRj2TWBxCa2jW1A5vg+Clz7OZ0qGDjCzmEiZ5lVHX63dF5eQ7E7V/teMenhp/C4n0e+JBQnC6qbWJru3KCQ1QfiWxx+2Pc9l+8VEYlZtwTs81CbJHUkrGSYkqHTWGuxD7QkSzK04AD2Yic6yA4Crf8Q5YrTh35ICKHD6KU1PuMXWr/jWnVRum92hLds8FpvelUWxJ9vf3pYUlyxJN5KSrqAL8zGeseajOmDb7rnVfNvuL0GPpvUjIpk9wJm8t9NL4s6fUPgNyU0ybPqZugjVbhOI7clBe6KdbSoh5Fo2SJXYKz7a6gZQPp6ko/Zgd1RcYGLokgtSOQpwu0nshT4aueUDg5HrxP8xYqUO4Nt/YFwF+bRHz3673vVIdGWctfNumDcGPQ7DPvaYo0dQ9sz4xEL28XcbbldKSL9e9a20LzVi/0BA7cnmlefdjbU90wshAhBFHfVDh85Za8vxz/oEjkGiIYu+toueNpvi36jY1Imktz2Z2s61x5xBuVtR74aIdxmAu5BSbY6V+VZd5KjpCm6YF9poB9tYhR9/B6SXTkcsLmF+WHN8q954g32avEZH/YNDawMKeSV5cznY9PILMgMMXevPtPDlDyWKmj+nvGG2kn10T2RqSh6afz61Yf7QvlHbP/IJfhswB6ghBh6+GBFfP6EaLFVK8+BKQxPDnJCfctO+XPE8zK78Z1zGfYpxdwhmGwd1RmmQ/dW0Xt23fgRzpIpOxJ5/tF1+Xy8NgdHPejtkoNm17V7ExLBmhFB1MbPT2S/HtMFkt4LLR2rS3Nnc0Vgkw5JLQlMjbW4Pg5MPQ30WC5/MbiJnhkAdhKWhk9igmInYrvQQ3oFAjm9cJRCjy+A8YNZqY38DpgvcJNZBulBRKMiTvMKVrqrzJisncplcpI6LFm2cgLprLkl04tij3lrIIuK/LBIoDUZZKkkOPp4QRsxyjEFuWOSAdK9eAj9mbhyjBwH11BU9ZX+dZIBaYDRlgz/CZrvpHKuF+ApOi+3rdvEJwc3Frqo1EiaCUDIQszAJJ98Z2OY1V/apg2m2A1TAU5wyRlbIwyp15KEQrV7i7YjbarZcNC58Mo5GdpLn43HslWdLBt7/3/LCCn8v96yElIg3BcQd8HdIlxvHk/DPYsrcGA9cCcSDd6FtFhZfShsaX1U1hv+MlR3nFNFBxet0cGXs4s7PmFcCyuUIaf5vM0uqwTbZkxz9Sm3TEf74KdzVcw+ywiq6SGO3vwk4jU6VTZrcWw14eK/5BOJ2qVRIeGGPDBbceIFtyPW9O9zgA7N4JP6abGFd5Jh/4OfIW1f2U1oUnO6X65NeeftvhIj3fdDP5vtv7+9V+bdaVskvNgxzduBtI9x1BVxsAZwesq/MuVCBTQRv0itbAY+MrxidDf2rQWKZLWFNzbqSyr/13Hy4hVz7as+Jnyveaxzx3VzYmJE1rwJ/F++VkZ4N4cdzbgUpjija53Yg
*/