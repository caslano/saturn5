/* boost random/detail/integer_log2.hpp header file
 *
 * Copyright Steven Watanabe 2011
 * Distributed under the Boost Software License, Version 1.0. (See
 * accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * See http://www.boost.org for most recent version including documentation.
 *
 * $Id$
 *
 */

#ifndef BOOST_RANDOM_DETAIL_INTEGER_LOG2_HPP
#define BOOST_RANDOM_DETAIL_INTEGER_LOG2_HPP

#include <boost/config.hpp>
#include <boost/limits.hpp>
#include <boost/integer/integer_log2.hpp>

namespace boost {
namespace random {
namespace detail {

#if !defined(BOOST_NO_CXX11_CONSTEXPR)
#define BOOST_RANDOM_DETAIL_CONSTEXPR constexpr
#elif defined(BOOST_MSVC)
#define BOOST_RANDOM_DETAIL_CONSTEXPR __forceinline
#elif defined(__GNUC__) && __GNUC__ >= 4
#define BOOST_RANDOM_DETAIL_CONSTEXPR inline __attribute__((__const__)) __attribute__((__always_inline__))
#else
#define BOOST_RANDOM_DETAIL_CONSTEXPR inline
#endif

template<int Shift>
struct integer_log2_impl
{
#if defined(BOOST_NO_CXX11_CONSTEXPR)
    template<class T>
    BOOST_RANDOM_DETAIL_CONSTEXPR static int apply(T t, int accum)
    {
        int update = ((t >> Shift) != 0) * Shift;
        return integer_log2_impl<Shift / 2>::apply(t >> update, accum + update);
    }
#else
    template<class T>
    BOOST_RANDOM_DETAIL_CONSTEXPR static int apply2(T t, int accum, int update)
    {
        return integer_log2_impl<Shift / 2>::apply(t >> update, accum + update);
    }

    template<class T>
    BOOST_RANDOM_DETAIL_CONSTEXPR static int apply(T t, int accum)
    {
        return apply2(t, accum, ((t >> Shift) != 0) * Shift);
    }
#endif
};

template<>
struct integer_log2_impl<1>
{
    template<class T>
    BOOST_RANDOM_DETAIL_CONSTEXPR static int apply(T t, int accum)
    {
        return int(t >> 1) + accum;
    }
};

template<class T>
BOOST_RANDOM_DETAIL_CONSTEXPR int integer_log2(T t)
{
    return integer_log2_impl<
        ::boost::detail::max_pow2_less<
            ::std::numeric_limits<T>::digits, 4
        >::value
    >::apply(t, 0);
}

} // namespace detail
} // namespace random
} // namespace boost

#endif // BOOST_RANDOM_DETAIL_INTEGER_LOG2_HPP

/* integer_log2.hpp
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
*/