/* boost random/detail/uniform_int_float.hpp header file
 *
 * Copyright Jens Maurer 2000-2001
 * Copyright Steven Watanabe 2011
 * Distributed under the Boost Software License, Version 1.0. (See
 * accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * See http://www.boost.org for most recent version including documentation.
 *
 * $Id$
 *
 */

#ifndef BOOST_RANDOM_DETAIL_UNIFORM_INT_FLOAT_HPP
#define BOOST_RANDOM_DETAIL_UNIFORM_INT_FLOAT_HPP

#include <boost/limits.hpp>
#include <boost/config.hpp>
#include <boost/integer.hpp>
#include <boost/random/detail/config.hpp>
#include <boost/random/detail/generator_bits.hpp>

#include <boost/random/detail/disable_warnings.hpp>

namespace boost {
namespace random {
namespace detail {

template<class URNG>
class uniform_int_float
{
public:
    typedef URNG base_type;
    typedef typename base_type::result_type base_result;

    typedef typename boost::uint_t<
        (std::numeric_limits<boost::uintmax_t>::digits <
            std::numeric_limits<base_result>::digits)?
        std::numeric_limits<boost::uintmax_t>::digits :
        std::numeric_limits<base_result>::digits
    >::fast result_type;

    uniform_int_float(base_type& rng)
      : _rng(rng) {}

    static result_type min BOOST_PREVENT_MACRO_SUBSTITUTION ()
    { return 0; }
    static result_type max BOOST_PREVENT_MACRO_SUBSTITUTION ()
    {
        std::size_t digits = std::numeric_limits<result_type>::digits;
        if(detail::generator_bits<URNG>::value() < digits) {
            digits = detail::generator_bits<URNG>::value();
        }
        return (result_type(2) << (digits - 1)) - 1;
    }
    base_type& base() { return _rng; }
    const base_type& base() const { return _rng; }

    result_type operator()()
    {
        base_result range = static_cast<base_result>((max)())+1;
        return static_cast<result_type>(_rng() * range);
    }

private:
    base_type& _rng;
};

} // namespace detail
} // namespace random
} // namespace boost

#include <boost/random/detail/enable_warnings.hpp>

#endif // BOOST_RANDOM_DETAIL_UNIFORM_INT_FLOAT_HPP

/* uniform_int_float.hpp
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
*/