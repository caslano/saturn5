/* Proposed SG14 status_code
(C) 2020-2022 Niall Douglas <http://www.nedproductions.biz/> (5 commits)
File Created: Jan 2020


Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

#ifndef BOOST_OUTCOME_SYSTEM_ERROR2_GETADDRINFO_CODE_HPP
#define BOOST_OUTCOME_SYSTEM_ERROR2_GETADDRINFO_CODE_HPP

#include "quick_status_code_from_enum.hpp"

#ifdef _WIN32
#error Not available for Microsoft Windows
#else
#include <netdb.h>
#include <sys/socket.h>
#include <sys/types.h>
#endif

BOOST_OUTCOME_SYSTEM_ERROR2_NAMESPACE_BEGIN

class _getaddrinfo_code_domain;
//! A getaddrinfo error code, those returned by `getaddrinfo()`.
using getaddrinfo_code = status_code<_getaddrinfo_code_domain>;
//! A specialisation of `status_error` for the `getaddrinfo()` error code domain.
using getaddrinfo_error = status_error<_getaddrinfo_code_domain>;

/*! The implementation of the domain for `getaddrinfo()` error codes, those returned by `getaddrinfo()`.
 */
class _getaddrinfo_code_domain : public status_code_domain
{
  template <class DomainType> friend class status_code;
  template <class StatusCode> friend class detail::indirecting_domain;
  using _base = status_code_domain;

public:
  //! The value type of the `getaddrinfo()` code, which is an `int`
  using value_type = int;
  using _base::string_ref;

  //! Default constructor
  constexpr explicit _getaddrinfo_code_domain(typename _base::unique_id_type id = 0x5b24b2de470ff7b6) noexcept
      : _base(id)
  {
  }
  _getaddrinfo_code_domain(const _getaddrinfo_code_domain &) = default;
  _getaddrinfo_code_domain(_getaddrinfo_code_domain &&) = default;
  _getaddrinfo_code_domain &operator=(const _getaddrinfo_code_domain &) = default;
  _getaddrinfo_code_domain &operator=(_getaddrinfo_code_domain &&) = default;
  ~_getaddrinfo_code_domain() = default;

  //! Constexpr singleton getter. Returns constexpr getaddrinfo_code_domain variable.
  static inline constexpr const _getaddrinfo_code_domain &get();

  virtual string_ref name() const noexcept override { return string_ref("getaddrinfo() domain"); }  // NOLINT
protected:
  virtual bool _do_failure(const status_code<void> &code) const noexcept override  // NOLINT
  {
    assert(code.domain() == *this);                                   // NOLINT
    return static_cast<const getaddrinfo_code &>(code).value() != 0;  // NOLINT
  }
  virtual bool _do_equivalent(const status_code<void> &code1, const status_code<void> &code2) const noexcept override  // NOLINT
  {
    assert(code1.domain() == *this);                                // NOLINT
    const auto &c1 = static_cast<const getaddrinfo_code &>(code1);  // NOLINT
    if(code2.domain() == *this)
    {
      const auto &c2 = static_cast<const getaddrinfo_code &>(code2);  // NOLINT
      return c1.value() == c2.value();
    }
    return false;
  }
  virtual generic_code _generic_code(const status_code<void> &code) const noexcept override  // NOLINT
  {
    assert(code.domain() == *this);                               // NOLINT
    const auto &c = static_cast<const getaddrinfo_code &>(code);  // NOLINT
    switch(c.value())
    {
#ifdef EAI_ADDRFAMILY
    case EAI_ADDRFAMILY:
      return errc::no_such_device_or_address;
#endif
    case EAI_FAIL:
      return errc::io_error;
    case EAI_MEMORY:
      return errc::not_enough_memory;
#ifdef EAI_NODATA
    case EAI_NODATA:
      return errc::no_such_device_or_address;
#endif
    case EAI_NONAME:
      return errc::no_such_device_or_address;
#ifdef EAI_OVERFLOW
    case EAI_OVERFLOW:
      return errc::argument_list_too_long;
#endif
    case EAI_BADFLAGS:  // fallthrough
    case EAI_SERVICE:
      return errc::invalid_argument;
    case EAI_FAMILY:  // fallthrough
    case EAI_SOCKTYPE:
      return errc::operation_not_supported;
    case EAI_AGAIN:  // fallthrough
    case EAI_SYSTEM:
      return errc::resource_unavailable_try_again;
    default:
      return errc::unknown;
    }
  }
  virtual string_ref _do_message(const status_code<void> &code) const noexcept override  // NOLINT
  {
    assert(code.domain() == *this);                               // NOLINT
    const auto &c = static_cast<const getaddrinfo_code &>(code);  // NOLINT
    return string_ref(gai_strerror(c.value()));
  }
#if defined(_CPPUNWIND) || defined(__EXCEPTIONS) || defined(BOOST_OUTCOME_STANDARDESE_IS_IN_THE_HOUSE)
  BOOST_OUTCOME_SYSTEM_ERROR2_NORETURN virtual void _do_throw_exception(const status_code<void> &code) const override  // NOLINT
  {
    assert(code.domain() == *this);                               // NOLINT
    const auto &c = static_cast<const getaddrinfo_code &>(code);  // NOLINT
    throw status_error<_getaddrinfo_code_domain>(c);
  }
#endif
};
//! A constexpr source variable for the `getaddrinfo()` code domain, which is that of `getaddrinfo()`. Returned by `_getaddrinfo_code_domain::get()`.
constexpr _getaddrinfo_code_domain getaddrinfo_code_domain;
inline constexpr const _getaddrinfo_code_domain &_getaddrinfo_code_domain::get()
{
  return getaddrinfo_code_domain;
}

BOOST_OUTCOME_SYSTEM_ERROR2_NAMESPACE_END

#endif

/* getaddrinfo_code.hpp
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
*/