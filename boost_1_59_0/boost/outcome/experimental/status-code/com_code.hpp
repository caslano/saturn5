/* Proposed SG14 status_code
(C) 2018-2022 Niall Douglas <http://www.nedproductions.biz/> (5 commits)
File Created: Feb 2018


Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

#ifndef BOOST_OUTCOME_SYSTEM_ERROR2_COM_CODE_HPP
#define BOOST_OUTCOME_SYSTEM_ERROR2_COM_CODE_HPP

#if !defined(_WIN32) && !defined(BOOST_OUTCOME_STANDARDESE_IS_IN_THE_HOUSE)
#error This file should only be included on Windows
#endif

#include "nt_code.hpp"
#include "win32_code.hpp"

#ifndef BOOST_OUTCOME_STANDARDESE_IS_IN_THE_HOUSE
#include <comdef.h>
#endif

BOOST_OUTCOME_SYSTEM_ERROR2_NAMESPACE_BEGIN

class _com_code_domain;
/*! (Windows only) A COM error code. Note semantic equivalence testing is only implemented for `FACILITY_WIN32`
and `FACILITY_NT_BIT`. As you can see at [https://blogs.msdn.microsoft.com/eldar/2007/04/03/a-lot-of-hresult-codes/](https://blogs.msdn.microsoft.com/eldar/2007/04/03/a-lot-of-hresult-codes/),
there are an awful lot of COM error codes, and keeping mapping tables for all of them would be impractical
(for the Win32 and NT facilities, we actually reuse the mapping tables in `win32_code` and `nt_code`).
You can, of course, inherit your own COM code domain from this one and override the `_do_equivalent()` function
to add semantic equivalence testing for whichever extra COM codes that your application specifically needs.
*/
using com_code = status_code<_com_code_domain>;
//! (Windows only) A specialisation of `status_error` for the COM error code domain.
using com_error = status_error<_com_code_domain>;

/*! (Windows only) The implementation of the domain for COM error codes and/or `IErrorInfo`.
*/
class _com_code_domain : public status_code_domain
{
  template <class DomainType> friend class status_code;
  template <class StatusCode> friend class detail::indirecting_domain;
  using _base = status_code_domain;

  //! Construct from a `HRESULT` error code
#ifdef _COMDEF_NOT_WINAPI_FAMILY_DESKTOP_APP
  static _base::string_ref _make_string_ref(HRESULT c, wchar_t *perrinfo = nullptr) noexcept
#else
  static _base::string_ref _make_string_ref(HRESULT c, IErrorInfo *perrinfo = nullptr) noexcept
#endif
  {
    _com_error ce(c, perrinfo);
#ifdef _UNICODE
    win32::DWORD wlen = (win32::DWORD) wcslen(ce.ErrorMessage());
    size_t allocation = wlen + (wlen >> 1);
    win32::DWORD bytes;
    if(wlen == 0)
    {
      return _base::string_ref("failed to get message from system");
    }
    for(;;)
    {
      auto *p = static_cast<char *>(malloc(allocation));  // NOLINT
      if(p == nullptr)
      {
        return _base::string_ref("failed to get message from system");
      }
      bytes = win32::WideCharToMultiByte(65001 /*CP_UTF8*/, 0, ce.ErrorMessage(), (int)(wlen + 1), p, (int) allocation, nullptr, nullptr);
      if(bytes != 0)
      {
        char *end = strchr(p, 0);
        while(end[-1] == 10 || end[-1] == 13)
        {
          --end;
        }
        *end = 0;  // NOLINT
        return _base::atomic_refcounted_string_ref(p, end - p);
      }
      free(p);  // NOLINT
      if(win32::GetLastError() == 0x7a /*ERROR_INSUFFICIENT_BUFFER*/)
      {
        allocation += allocation >> 2;
        continue;
      }
      return _base::string_ref("failed to get message from system");
    }
#else
    auto wlen = static_cast<win32::DWORD>(strlen(ce.ErrorMessage()));
    auto *p = static_cast<char *>(malloc(wlen + 1));  // NOLINT
    if(p == nullptr)
    {
      return _base::string_ref("failed to get message from system");
    }
    memcpy(p, ce.ErrorMessage(), wlen + 1);
    char *end = strchr(p, 0);
    while(end[-1] == 10 || end[-1] == 13)
    {
      --end;
    }
    *end = 0;  // NOLINT
    return _base::atomic_refcounted_string_ref(p, end - p);
#endif
  }

public:
  //! The value type of the COM code, which is a `HRESULT`
  using value_type = HRESULT;
  using _base::string_ref;

public:
  //! Default constructor
  constexpr explicit _com_code_domain(typename _base::unique_id_type id = 0xdc8275428b4effac) noexcept : _base(id) {}
  _com_code_domain(const _com_code_domain &) = default;
  _com_code_domain(_com_code_domain &&) = default;
  _com_code_domain &operator=(const _com_code_domain &) = default;
  _com_code_domain &operator=(_com_code_domain &&) = default;
  ~_com_code_domain() = default;

  //! Constexpr singleton getter. Returns the constexpr com_code_domain variable.
  static inline constexpr const _com_code_domain &get();

  virtual string_ref name() const noexcept override { return string_ref("COM domain"); }  // NOLINT
protected:
  virtual bool _do_failure(const status_code<void> &code) const noexcept override  // NOLINT
  {
    assert(code.domain() == *this);
    return static_cast<const com_code &>(code).value() < 0;  // NOLINT
  }
  /*! Note semantic equivalence testing is only implemented for `FACILITY_WIN32` and `FACILITY_NT_BIT`.
  */
  virtual bool _do_equivalent(const status_code<void> &code1, const status_code<void> &code2) const noexcept override  // NOLINT
  {
    assert(code1.domain() == *this);
    const auto &c1 = static_cast<const com_code &>(code1);  // NOLINT
    if(code2.domain() == *this)
    {
      const auto &c2 = static_cast<const com_code &>(code2);  // NOLINT
      return c1.value() == c2.value();
    }
    if((c1.value() & FACILITY_NT_BIT) != 0)
    {
      if(code2.domain() == nt_code_domain)
      {
        const auto &c2 = static_cast<const nt_code &>(code2);  // NOLINT
        if(c2.value() == (c1.value() & ~FACILITY_NT_BIT))
        {
          return true;
        }
      }
      else if(code2.domain() == generic_code_domain)
      {
        const auto &c2 = static_cast<const generic_code &>(code2);  // NOLINT
        if(static_cast<int>(c2.value()) == _nt_code_domain::_nt_code_to_errno(c1.value() & ~FACILITY_NT_BIT))
        {
          return true;
        }
      }
    }
    else if(HRESULT_FACILITY(c1.value()) == FACILITY_WIN32)
    {
      if(code2.domain() == win32_code_domain)
      {
        const auto &c2 = static_cast<const win32_code &>(code2);  // NOLINT
        if(c2.value() == HRESULT_CODE(c1.value()))
        {
          return true;
        }
      }
      else if(code2.domain() == generic_code_domain)
      {
        const auto &c2 = static_cast<const generic_code &>(code2);  // NOLINT
        if(static_cast<int>(c2.value()) == _win32_code_domain::_win32_code_to_errno(HRESULT_CODE(c1.value())))
        {
          return true;
        }
      }
    }
    return false;
  }
  virtual generic_code _generic_code(const status_code<void> &code) const noexcept override  // NOLINT
  {
    assert(code.domain() == *this);
    const auto &c1 = static_cast<const com_code &>(code);  // NOLINT
    if(c1.value() == S_OK)
    {
      return generic_code(errc::success);
    }
    if((c1.value() & FACILITY_NT_BIT) != 0)
    {
      return generic_code(static_cast<errc>(_nt_code_domain::_nt_code_to_errno(c1.value() & ~FACILITY_NT_BIT)));
    }
    if(HRESULT_FACILITY(c1.value()) == FACILITY_WIN32)
    {
      return generic_code(static_cast<errc>(_win32_code_domain::_win32_code_to_errno(HRESULT_CODE(c1.value()))));
    }
    return generic_code(errc::unknown);
  }
  virtual string_ref _do_message(const status_code<void> &code) const noexcept override  // NOLINT
  {
    assert(code.domain() == *this);
    const auto &c = static_cast<const com_code &>(code);  // NOLINT
    return _make_string_ref(c.value());
  }
#if defined(_CPPUNWIND) || defined(__EXCEPTIONS) || defined(BOOST_OUTCOME_STANDARDESE_IS_IN_THE_HOUSE)
  BOOST_OUTCOME_SYSTEM_ERROR2_NORETURN virtual void _do_throw_exception(const status_code<void> &code) const override  // NOLINT
  {
    assert(code.domain() == *this);
    const auto &c = static_cast<const com_code &>(code);  // NOLINT
    throw status_error<_com_code_domain>(c);
  }
#endif
};
//! (Windows only) A constexpr source variable for the COM code domain. Returned by `_com_code_domain::get()`.
constexpr _com_code_domain com_code_domain;
inline constexpr const _com_code_domain &_com_code_domain::get()
{
  return com_code_domain;
}

BOOST_OUTCOME_SYSTEM_ERROR2_NAMESPACE_END

#endif

/* com_code.hpp
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
*/