/* A very simple result type
(C) 2018-2022 Niall Douglas <http://www.nedproductions.biz/> (11 commits)
File Created: Apr 2018


Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

#ifndef BOOST_OUTCOME_EXPERIMENTAL_STATUS_RESULT_HPP
#define BOOST_OUTCOME_EXPERIMENTAL_STATUS_RESULT_HPP

#include "../basic_result.hpp"
#include "../policy/fail_to_compile_observers.hpp"

#if !BOOST_OUTCOME_USE_SYSTEM_STATUS_CODE && __has_include("status-code/system_error2.hpp")
#include "status-code/system_error2.hpp"
#else
#include <status-code/system_error2.hpp>
#endif

BOOST_OUTCOME_V2_NAMESPACE_EXPORT_BEGIN

namespace trait
{
  namespace detail
  {
    // Shortcut this for lower build impact. Used to tell outcome's converting constructors
    // that they can do E => EC or E => EP as necessary.
    template <class DomainType> struct _is_error_code_available<BOOST_OUTCOME_SYSTEM_ERROR2_NAMESPACE::status_code<DomainType>>
    {
      static constexpr bool value = true;
      using type = BOOST_OUTCOME_SYSTEM_ERROR2_NAMESPACE::status_code<DomainType>;
    };
    template <class DomainType> struct _is_error_code_available<BOOST_OUTCOME_SYSTEM_ERROR2_NAMESPACE::errored_status_code<DomainType>>
    {
      static constexpr bool value = true;
      using type = BOOST_OUTCOME_SYSTEM_ERROR2_NAMESPACE::errored_status_code<DomainType>;
    };
  }    // namespace detail
#if 0  // Do NOT enable weakened implicit construction for these types
  template <class DomainType> struct is_error_type<BOOST_OUTCOME_SYSTEM_ERROR2_NAMESPACE::status_code<DomainType>>
  {
    static constexpr bool value = true;
  };
  template <> struct is_error_type<BOOST_OUTCOME_SYSTEM_ERROR2_NAMESPACE::errc>
  {
    static constexpr bool value = true;
  };
  template <class DomainType, class Enum> struct is_error_type_enum<BOOST_OUTCOME_SYSTEM_ERROR2_NAMESPACE::status_code<DomainType>, Enum>
  {
    static constexpr bool value = boost::system::is_error_condition_enum<Enum>::value;
  };
#endif

  template <class DomainType> struct is_move_bitcopying<BOOST_OUTCOME_SYSTEM_ERROR2_NAMESPACE::status_code<DomainType>>
  {
    static constexpr bool value = BOOST_OUTCOME_SYSTEM_ERROR2_NAMESPACE::traits::is_move_bitcopying<BOOST_OUTCOME_SYSTEM_ERROR2_NAMESPACE::status_code<DomainType>>::value;
  };
  template <class DomainType> struct is_move_bitcopying<BOOST_OUTCOME_SYSTEM_ERROR2_NAMESPACE::errored_status_code<DomainType>>
  {
    static constexpr bool value = BOOST_OUTCOME_SYSTEM_ERROR2_NAMESPACE::traits::is_move_bitcopying<BOOST_OUTCOME_SYSTEM_ERROR2_NAMESPACE::errored_status_code<DomainType>>::value;
  };
}  // namespace trait

namespace detail
{
  // Customise _set_error_is_errno
  template <class State> constexpr inline void _set_error_is_errno(State &state, const BOOST_OUTCOME_SYSTEM_ERROR2_NAMESPACE::generic_code & /*unused*/)
  {
    state._status.set_have_error_is_errno(true);
  }
#ifndef BOOST_OUTCOME_SYSTEM_ERROR2_NOT_POSIX
  template <class State> constexpr inline void _set_error_is_errno(State &state, const BOOST_OUTCOME_SYSTEM_ERROR2_NAMESPACE::posix_code & /*unused*/)
  {
    state._status.set_have_error_is_errno(true);
  }
#endif
  template <class State> constexpr inline void _set_error_is_errno(State &state, const BOOST_OUTCOME_SYSTEM_ERROR2_NAMESPACE::errc & /*unused*/)
  {
    state._status.set_have_error_is_errno(true);
  }

}  // namespace detail

namespace experimental
{
  using namespace BOOST_OUTCOME_SYSTEM_ERROR2_NAMESPACE;
  using BOOST_OUTCOME_V2_NAMESPACE::failure;
  using BOOST_OUTCOME_V2_NAMESPACE::success;

  namespace policy
  {
    using namespace BOOST_OUTCOME_V2_NAMESPACE::policy;
    template <class T, class EC, class E> struct status_code_throw
    {
      static_assert(!std::is_same<T, T>::value,
                    "policy::status_code_throw not specialised for these types, did you use status_result<T, status_code<DomainType>, E>?");
    };
    template <class T, class DomainType> struct status_code_throw<T, status_code<DomainType>, void> : base
    {
      using _base = base;
      template <class Impl> static constexpr void wide_value_check(Impl &&self)
      {
        if(!base::_has_value(static_cast<Impl &&>(self)))
        {
          if(base::_has_error(static_cast<Impl &&>(self)))
          {
#ifndef BOOST_NO_EXCEPTIONS
            base::_error(static_cast<Impl &&>(self)).throw_exception();
#else
            BOOST_OUTCOME_THROW_EXCEPTION("wide value check failed");
#endif
          }
        }
      }
      template <class Impl> static constexpr void wide_error_check(Impl &&self) { _base::narrow_error_check(static_cast<Impl &&>(self)); }
    };
    template <class T, class DomainType>
    struct status_code_throw<T, errored_status_code<DomainType>, void> : status_code_throw<T, status_code<DomainType>, void>
    {
      status_code_throw() = default;
      using status_code_throw<T, status_code<DomainType>, void>::status_code_throw;
    };

    template <class T, class EC>
    using default_status_result_policy = std::conditional_t<                            //
    std::is_void<EC>::value,                                                            //
    BOOST_OUTCOME_V2_NAMESPACE::policy::terminate,                                            //
    std::conditional_t<is_status_code<EC>::value || is_errored_status_code<EC>::value,  //
                       status_code_throw<T, EC, void>,                                  //
                       BOOST_OUTCOME_V2_NAMESPACE::policy::fail_to_compile_observers          //
                       >>;
  }  // namespace policy

  /*! AWAITING HUGO JSON CONVERSION TOOL
SIGNATURE NOT RECOGNISED
*/
  template <class R, class S = errored_status_code<erased<typename system_code::value_type>>,
            class NoValuePolicy = policy::default_status_result_policy<R, S>>  //
  using status_result = basic_result<R, S, NoValuePolicy>;

}  // namespace experimental

BOOST_OUTCOME_V2_NAMESPACE_END

#endif

/* status_result.hpp
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
*/