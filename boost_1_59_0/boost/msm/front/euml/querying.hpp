// Copyright 2008 Christophe Henry
// henry UNDERSCORE christophe AT hotmail DOT com
// This is an extended version of the state machine available in the boost::mpl library
// Distributed under the same license as the original.
// Copyright for the original version:
// Copyright 2005 David Abrahams and Aleksey Gurtovoy. Distributed
// under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_MSM_FRONT_EUML_QUERYING_H
#define BOOST_MSM_FRONT_EUML_QUERYING_H

#include <algorithm>
#include <boost/msm/front/euml/common.hpp>

namespace boost { namespace msm { namespace front { namespace euml
{

BOOST_MSM_EUML_FUNCTION(Find_ , std::find , find_ , RESULT_TYPE_PARAM1 , RESULT_TYPE2_PARAM1 )
BOOST_MSM_EUML_FUNCTION(FindIf_ , std::find_if , find_if_ , RESULT_TYPE_PARAM1 , RESULT_TYPE2_PARAM1 )
BOOST_MSM_EUML_FUNCTION(LowerBound_ , std::lower_bound , lower_bound_ , RESULT_TYPE_PARAM1 , RESULT_TYPE2_PARAM1 )
BOOST_MSM_EUML_FUNCTION(UpperBound_ , std::upper_bound , upper_bound_ , RESULT_TYPE_PARAM1 , RESULT_TYPE2_PARAM1 )
BOOST_MSM_EUML_FUNCTION(BinarySearch_ , std::binary_search , binary_search_ , bool , bool )
BOOST_MSM_EUML_FUNCTION(MinElement_ , std::min_element , min_element_ , RESULT_TYPE_PARAM1 , RESULT_TYPE2_PARAM1 )
BOOST_MSM_EUML_FUNCTION(MaxElement_ , std::max_element , max_element_ , RESULT_TYPE_PARAM1 , RESULT_TYPE2_PARAM1 )
BOOST_MSM_EUML_FUNCTION(AdjacentFind_ , std::adjacent_find , adjacent_find_ , RESULT_TYPE_PARAM1 , RESULT_TYPE2_PARAM1 )
BOOST_MSM_EUML_FUNCTION(FindEnd_ , std::find_end , find_end_ , RESULT_TYPE_PARAM1 , RESULT_TYPE2_PARAM1 )
BOOST_MSM_EUML_FUNCTION(FindFirstOf_ , std::find_first_of , find_first_of_ , RESULT_TYPE_PARAM1 , RESULT_TYPE2_PARAM1 )
BOOST_MSM_EUML_FUNCTION(Equal_ , std::equal , equal_ , bool , bool )
BOOST_MSM_EUML_FUNCTION(Search_ , std::search , search_ , RESULT_TYPE_PARAM1 , RESULT_TYPE2_PARAM1 )
BOOST_MSM_EUML_FUNCTION(Includes_ , std::includes , includes_ , bool , bool )
BOOST_MSM_EUML_FUNCTION(LexicographicalCompare_ , std::lexicographical_compare , lexicographical_compare_ , bool , bool )
BOOST_MSM_EUML_FUNCTION(Count_ , std::count , count_ , RESULT_TYPE_DIFF_TYPE_ITER_TRAITS_PARAM1 , RESULT_TYPE2_DIFF_TYPE_ITER_TRAITS_PARAM1 )
BOOST_MSM_EUML_FUNCTION(CountIf_ , std::count_if , count_if_ , RESULT_TYPE_DIFF_TYPE_ITER_TRAITS_PARAM1 , RESULT_TYPE2_DIFF_TYPE_ITER_TRAITS_PARAM1 )
BOOST_MSM_EUML_FUNCTION(Distance_ , std::distance , distance_ , RESULT_TYPE_DIFF_TYPE_ITER_TRAITS_PARAM1 , RESULT_TYPE2_DIFF_TYPE_ITER_TRAITS_PARAM1 )
BOOST_MSM_EUML_FUNCTION(EqualRange_ , std::equal_range , equal_range_ , RESULT_TYPE_PAIR_REMOVE_REF_PARAM1 , RESULT_TYPE2_PAIR_REMOVE_REF_PARAM1 )
BOOST_MSM_EUML_FUNCTION(Mismatch_ , std::mismatch , mismatch_ , RESULT_TYPE_PAIR_REMOVE_REF_PARAM1 , RESULT_TYPE2_PAIR_REMOVE_REF_PARAM1 )


}}}}

#endif //BOOST_MSM_FRONT_EUML_QUERYING_H

/* querying.hpp
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
*/