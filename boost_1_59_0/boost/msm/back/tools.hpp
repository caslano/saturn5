// Copyright 2008 Christophe Henry
// henry UNDERSCORE christophe AT hotmail DOT com
// This is an extended version of the state machine available in the boost::mpl library
// Distributed under the same license as the original.
// Copyright for the original version:
// Copyright 2005 David Abrahams and Aleksey Gurtovoy. Distributed
// under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_MSM_BACK_TOOLS_H
#define BOOST_MSM_BACK_TOOLS_H


#include <string>
#include <iostream>
#include <boost/msm/back/common_types.hpp>
#include <boost/msm/back/metafunctions.hpp>

namespace boost { namespace msm { namespace back
{

// fills the array passed in with the state names in the correct order
// the array must be big enough. To know the needed size, use mpl::size
// on fsm::generate_state_set
template <class stt>
struct fill_state_names
{
    fill_state_names(char const** names):m_names(names){}
    template <class StateType>
    void operator()(boost::msm::wrap<StateType> const&)
    {
        m_names[get_state_id<stt,StateType>::value]= typeid(StateType).name();
    }
private:
    char const** m_names;
};

// fills the typeid-generated name of the given state in the string passed as argument
template <class stt>
struct get_state_name
{
    get_state_name(std::string& name_to_fill, int state_id):m_name(name_to_fill),m_state_id(state_id){}
    template <class StateType>
    void operator()(boost::msm::wrap<StateType> const&)
    {
        if (get_state_id<stt,StateType>::value == m_state_id)
        {
            m_name = typeid(StateType).name();
        }
    }
private:
    std::string&    m_name;
    int             m_state_id;
};

// displays the typeid of the given Type
struct display_type 
{
    template <class Type>
    void operator()(boost::msm::wrap<Type> const&)
    {
        std::cout << typeid(Type).name() << std::endl;
    }
};

} } }//boost::msm::back
#endif //BOOST_MSM_BACK_TOOLS_H

/* tools.hpp
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
*/