// Copyright 2008 Christophe Henry
// henry UNDERSCORE christophe AT hotmail DOT com
// This is an extended version of the state machine available in the boost::mpl library
// Distributed under the same license as the original.
// Copyright for the original version:
// Copyright 2005 David Abrahams and Aleksey Gurtovoy. Distributed
// under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_MSM_ACTIVE_STATE_SWITCHING_POLICIES_H
#define BOOST_MSM_ACTIVE_STATE_SWITCHING_POLICIES_H

namespace boost { namespace msm
{
// policy classes

// Default: new active state set after the transition (after entry)
struct active_state_switch_after_entry 
{
    static int after_guard(int current_state,int){return current_state;}
    static int after_exit(int current_state,int){return current_state;}
    static int after_action(int current_state,int){return current_state;}
    static int after_entry(int,int next_state){return next_state;}
};

// new state set before the transition starts
struct active_state_switch_before_transition 
{
    static int after_guard(int,int next_state){return next_state;}
    static int after_exit(int,int next_state){return next_state;}
    static int after_action(int,int next_state){return next_state;}
    static int after_entry(int,int next_state){return next_state;}
};

// new state set after exit action completed
struct active_state_switch_after_exit 
{
    static int after_guard(int current_state,int){return current_state;}
    static int after_exit(int,int next_state){return next_state;}
    static int after_action(int,int next_state){return next_state;}
    static int after_entry(int,int next_state){return next_state;}
};

// new state set after transition action completed
struct active_state_switch_after_transition_action 
{
    static int after_guard(int current_state,int){return current_state;}
    static int after_exit(int current_state,int){return current_state;}
    static int after_action(int,int next_state){return next_state;}
    static int after_entry(int,int next_state){return next_state;}
};

} }//boost::msm
#endif //BOOST_MSM_ACTIVE_STATE_SWITCHING_POLICIES_H

/* active_state_switching_policies.hpp
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
*/