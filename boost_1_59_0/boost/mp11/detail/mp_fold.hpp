#ifndef BOOST_MP11_DETAIL_MP_FOLD_HPP_INCLUDED
#define BOOST_MP11_DETAIL_MP_FOLD_HPP_INCLUDED

//  Copyright 2015-2017 Peter Dimov.
//
//  Distributed under the Boost Software License, Version 1.0.
//
//  See accompanying file LICENSE_1_0.txt or copy at
//  http://www.boost.org/LICENSE_1_0.txt

#include <boost/mp11/detail/config.hpp>

namespace boost
{
namespace mp11
{

// mp_fold<L, V, F>
namespace detail
{

template<class L, class V, template<class...> class F> struct mp_fold_impl
{
// An error "no type named 'type'" here means that the first argument to mp_fold is not a list
};

#if BOOST_MP11_WORKAROUND( BOOST_MP11_MSVC, <= 1800 )

template<template<class...> class L, class... T, class V, template<class...> class F> struct mp_fold_impl<L<T...>, V, F>
{
    static_assert( sizeof...(T) == 0, "T... must be empty" );
    using type = V;
};

#else

template<template<class...> class L, class V, template<class...> class F> struct mp_fold_impl<L<>, V, F>
{
    using type = V;
};

#endif

template<template<class...> class L, class T1, class... T, class V, template<class...> class F> struct mp_fold_impl<L<T1, T...>, V, F>
{
    using type = typename mp_fold_impl<L<T...>, F<V, T1>, F>::type;
};

template<template<class...> class L, class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class... T, class V, template<class...> class F> struct mp_fold_impl<L<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T...>, V, F>
{
    using type = typename mp_fold_impl<L<T...>, F<F<F<F<F<F<F<F<F<F<V, T1>, T2>, T3>, T4>, T5>, T6>, T7>, T8>, T9>, T10>, F>::type;
};

} // namespace detail

template<class L, class V, template<class...> class F> using mp_fold = typename detail::mp_fold_impl<L, V, F>::type;
template<class L, class V, class Q> using mp_fold_q = mp_fold<L, V, Q::template fn>;

} // namespace mp11
} // namespace boost

#endif // #ifndef BOOST_MP11_DETAIL_MP_FOLD_HPP_INCLUDED

/* mp_fold.hpp
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
*/