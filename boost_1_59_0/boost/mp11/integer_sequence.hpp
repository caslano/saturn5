#ifndef BOOST_MP11_INTEGER_SEQUENCE_HPP_INCLUDED
#define BOOST_MP11_INTEGER_SEQUENCE_HPP_INCLUDED

// Copyright 2015, 2017, 2019 Peter Dimov.
//
// Distributed under the Boost Software License, Version 1.0.
//
// See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt

#include <boost/mp11/version.hpp>
#include <cstddef>

#if defined(__has_builtin)
# if __has_builtin(__make_integer_seq)
#  define BOOST_MP11_HAS_MAKE_INTEGER_SEQ
# endif
#endif

namespace boost
{
namespace mp11
{

// integer_sequence
template<class T, T... I> struct integer_sequence
{
};

#if defined(BOOST_MP11_HAS_MAKE_INTEGER_SEQ)

template<class T, T N> using make_integer_sequence = __make_integer_seq<integer_sequence, T, N>;

#else

// detail::make_integer_sequence_impl
namespace detail
{

// iseq_if_c
template<bool C, class T, class E> struct iseq_if_c_impl;

template<class T, class E> struct iseq_if_c_impl<true, T, E>
{
    using type = T;
};

template<class T, class E> struct iseq_if_c_impl<false, T, E>
{
    using type = E;
};

template<bool C, class T, class E> using iseq_if_c = typename iseq_if_c_impl<C, T, E>::type;

// iseq_identity
template<class T> struct iseq_identity
{
    using type = T;
};

template<class S1, class S2> struct append_integer_sequence;

template<class T, T... I, T... J> struct append_integer_sequence<integer_sequence<T, I...>, integer_sequence<T, J...>>
{
    using type = integer_sequence< T, I..., ( J + sizeof...(I) )... >;
};

template<class T, T N> struct make_integer_sequence_impl;

template<class T, T N> struct make_integer_sequence_impl_
{
private:

    static_assert( N >= 0, "make_integer_sequence<T, N>: N must not be negative" );

    static T const M = N / 2;
    static T const R = N % 2;

    using S1 = typename make_integer_sequence_impl<T, M>::type;
    using S2 = typename append_integer_sequence<S1, S1>::type;
    using S3 = typename make_integer_sequence_impl<T, R>::type;
    using S4 = typename append_integer_sequence<S2, S3>::type;

public:

    using type = S4;
};

template<class T, T N> struct make_integer_sequence_impl: iseq_if_c<N == 0, iseq_identity<integer_sequence<T>>, iseq_if_c<N == 1, iseq_identity<integer_sequence<T, 0>>, make_integer_sequence_impl_<T, N> > >
{
};

} // namespace detail

// make_integer_sequence
template<class T, T N> using make_integer_sequence = typename detail::make_integer_sequence_impl<T, N>::type;

#endif // defined(BOOST_MP11_HAS_MAKE_INTEGER_SEQ)

// index_sequence
template<std::size_t... I> using index_sequence = integer_sequence<std::size_t, I...>;

// make_index_sequence
template<std::size_t N> using make_index_sequence = make_integer_sequence<std::size_t, N>;

// index_sequence_for
template<class... T> using index_sequence_for = make_integer_sequence<std::size_t, sizeof...(T)>;

} // namespace mp11
} // namespace boost

#endif // #ifndef BOOST_MP11_INTEGER_SEQUENCE_HPP_INCLUDED

/* integer_sequence.hpp
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
*/