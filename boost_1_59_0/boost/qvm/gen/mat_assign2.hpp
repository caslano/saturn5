#ifndef BOOST_QVM_GEN_MAT_ASSIGN2_HPP_INCLUDED
#define BOOST_QVM_GEN_MAT_ASSIGN2_HPP_INCLUDED

// Copyright 2008-2022 Emil Dotchevski and Reverge Studios, Inc.

// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

// This file was generated by a program. Do not edit manually.

#include <boost/qvm/enable_if.hpp>
#include <boost/qvm/inline.hpp>
#include <boost/qvm/mat_traits.hpp>

namespace boost { namespace qvm {

template <class A,class B>
BOOST_QVM_CONSTEXPR BOOST_QVM_INLINE_OPERATIONS
typename enable_if_c<
    mat_traits<A>::rows==2 && mat_traits<B>::rows==2 &&
    mat_traits<A>::cols==2 && mat_traits<B>::cols==2,
    A &>::type
assign( A & a, B const & b )
    {
    mat_traits<A>::template write_element<0,0>(a)=mat_traits<B>::template read_element<0,0>(b);
    mat_traits<A>::template write_element<0,1>(a)=mat_traits<B>::template read_element<0,1>(b);
    mat_traits<A>::template write_element<1,0>(a)=mat_traits<B>::template read_element<1,0>(b);
    mat_traits<A>::template write_element<1,1>(a)=mat_traits<B>::template read_element<1,1>(b);
    return a;
    }

namespace
sfinae
    {
    using ::boost::qvm::assign;
    }

namespace
qvm_detail
    {
    template <int R,int C>
    struct assign_mm_defined;

    template <>
    struct
    assign_mm_defined<2,2>
        {
        static bool const value=true;
        };
    }

template <class A,class B>
BOOST_QVM_CONSTEXPR BOOST_QVM_INLINE_OPERATIONS
typename enable_if_c<
    mat_traits<A>::rows==2 && mat_traits<B>::rows==2 &&
    mat_traits<A>::cols==1 && mat_traits<B>::cols==1,
    A &>::type
assign( A & a, B const & b )
    {
    mat_traits<A>::template write_element<0,0>(a)=mat_traits<B>::template read_element<0,0>(b);
    mat_traits<A>::template write_element<1,0>(a)=mat_traits<B>::template read_element<1,0>(b);
    return a;
    }

namespace
sfinae
    {
    using ::boost::qvm::assign;
    }

namespace
qvm_detail
    {
    template <int R,int C>
    struct assign_mm_defined;

    template <>
    struct
    assign_mm_defined<2,1>
        {
        static bool const value=true;
        };
    }

template <class A,class B>
BOOST_QVM_CONSTEXPR BOOST_QVM_INLINE_OPERATIONS
typename enable_if_c<
    mat_traits<A>::rows==1 && mat_traits<B>::rows==1 &&
    mat_traits<A>::cols==2 && mat_traits<B>::cols==2,
    A &>::type
assign( A & a, B const & b )
    {
    mat_traits<A>::template write_element<0,0>(a)=mat_traits<B>::template read_element<0,0>(b);
    mat_traits<A>::template write_element<0,1>(a)=mat_traits<B>::template read_element<0,1>(b);
    return a;
    }

namespace
sfinae
    {
    using ::boost::qvm::assign;
    }

namespace
qvm_detail
    {
    template <int R,int C>
    struct assign_mm_defined;

    template <>
    struct
    assign_mm_defined<1,2>
        {
        static bool const value=true;
        };
    }

} }

#endif

/* mat_assign2.hpp
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
*/