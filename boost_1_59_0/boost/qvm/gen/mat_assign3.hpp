#ifndef BOOST_QVM_GEN_MAT_ASSIGN3_HPP_INCLUDED
#define BOOST_QVM_GEN_MAT_ASSIGN3_HPP_INCLUDED

// Copyright 2008-2022 Emil Dotchevski and Reverge Studios, Inc.

// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

// This file was generated by a program. Do not edit manually.

#include <boost/qvm/enable_if.hpp>
#include <boost/qvm/inline.hpp>
#include <boost/qvm/mat_traits.hpp>

namespace boost { namespace qvm {

template <class A,class B>
BOOST_QVM_CONSTEXPR BOOST_QVM_INLINE_OPERATIONS
typename enable_if_c<
    mat_traits<A>::rows==3 && mat_traits<B>::rows==3 &&
    mat_traits<A>::cols==3 && mat_traits<B>::cols==3,
    A &>::type
assign( A & a, B const & b )
    {
    mat_traits<A>::template write_element<0,0>(a)=mat_traits<B>::template read_element<0,0>(b);
    mat_traits<A>::template write_element<0,1>(a)=mat_traits<B>::template read_element<0,1>(b);
    mat_traits<A>::template write_element<0,2>(a)=mat_traits<B>::template read_element<0,2>(b);
    mat_traits<A>::template write_element<1,0>(a)=mat_traits<B>::template read_element<1,0>(b);
    mat_traits<A>::template write_element<1,1>(a)=mat_traits<B>::template read_element<1,1>(b);
    mat_traits<A>::template write_element<1,2>(a)=mat_traits<B>::template read_element<1,2>(b);
    mat_traits<A>::template write_element<2,0>(a)=mat_traits<B>::template read_element<2,0>(b);
    mat_traits<A>::template write_element<2,1>(a)=mat_traits<B>::template read_element<2,1>(b);
    mat_traits<A>::template write_element<2,2>(a)=mat_traits<B>::template read_element<2,2>(b);
    return a;
    }

namespace
sfinae
    {
    using ::boost::qvm::assign;
    }

namespace
qvm_detail
    {
    template <int R,int C>
    struct assign_mm_defined;

    template <>
    struct
    assign_mm_defined<3,3>
        {
        static bool const value=true;
        };
    }

template <class A,class B>
BOOST_QVM_CONSTEXPR BOOST_QVM_INLINE_OPERATIONS
typename enable_if_c<
    mat_traits<A>::rows==3 && mat_traits<B>::rows==3 &&
    mat_traits<A>::cols==1 && mat_traits<B>::cols==1,
    A &>::type
assign( A & a, B const & b )
    {
    mat_traits<A>::template write_element<0,0>(a)=mat_traits<B>::template read_element<0,0>(b);
    mat_traits<A>::template write_element<1,0>(a)=mat_traits<B>::template read_element<1,0>(b);
    mat_traits<A>::template write_element<2,0>(a)=mat_traits<B>::template read_element<2,0>(b);
    return a;
    }

namespace
sfinae
    {
    using ::boost::qvm::assign;
    }

namespace
qvm_detail
    {
    template <int R,int C>
    struct assign_mm_defined;

    template <>
    struct
    assign_mm_defined<3,1>
        {
        static bool const value=true;
        };
    }

template <class A,class B>
BOOST_QVM_CONSTEXPR BOOST_QVM_INLINE_OPERATIONS
typename enable_if_c<
    mat_traits<A>::rows==1 && mat_traits<B>::rows==1 &&
    mat_traits<A>::cols==3 && mat_traits<B>::cols==3,
    A &>::type
assign( A & a, B const & b )
    {
    mat_traits<A>::template write_element<0,0>(a)=mat_traits<B>::template read_element<0,0>(b);
    mat_traits<A>::template write_element<0,1>(a)=mat_traits<B>::template read_element<0,1>(b);
    mat_traits<A>::template write_element<0,2>(a)=mat_traits<B>::template read_element<0,2>(b);
    return a;
    }

namespace
sfinae
    {
    using ::boost::qvm::assign;
    }

namespace
qvm_detail
    {
    template <int R,int C>
    struct assign_mm_defined;

    template <>
    struct
    assign_mm_defined<1,3>
        {
        static bool const value=true;
        };
    }

} }

#endif

/* mat_assign3.hpp
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
*/