#ifndef BOOST_QVM_GEN_VEC_MAT_OPERATIONS2_HPP_INCLUDED
#define BOOST_QVM_GEN_VEC_MAT_OPERATIONS2_HPP_INCLUDED

// Copyright 2008-2022 Emil Dotchevski and Reverge Studios, Inc.

// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

// This file was generated by a program. Do not edit manually.

#include <boost/qvm/deduce_vec.hpp>
#include <boost/qvm/enable_if.hpp>
#include <boost/qvm/inline.hpp>
#include <boost/qvm/mat_traits.hpp>
#include <boost/qvm/vec_traits.hpp>

namespace boost { namespace qvm {

template <class A,class B>
BOOST_QVM_CONSTEXPR BOOST_QVM_INLINE_OPERATIONS
typename lazy_enable_if_c<
    mat_traits<A>::rows==2 && mat_traits<A>::cols==2 &&
    vec_traits<B>::dim==2,
    deduce_vec2<A,B,2> >::type
operator*( A const & a, B const & b )
    {
    typedef typename mat_traits<A>::scalar_type Ta;
    typedef typename vec_traits<B>::scalar_type Tb;
    Ta const a00 = mat_traits<A>::template read_element<0,0>(a);
    Ta const a01 = mat_traits<A>::template read_element<0,1>(a);
    Ta const a10 = mat_traits<A>::template read_element<1,0>(a);
    Ta const a11 = mat_traits<A>::template read_element<1,1>(a);
    Tb const b0 = vec_traits<B>::template read_element<0>(b);
    Tb const b1 = vec_traits<B>::template read_element<1>(b);
    typedef typename deduce_vec2<A,B,2>::type R;
    BOOST_QVM_STATIC_ASSERT(vec_traits<R>::dim==2);
    R r;
    vec_traits<R>::template write_element<0>(r)=a00*b0+a01*b1;
    vec_traits<R>::template write_element<1>(r)=a10*b0+a11*b1;
    return r;
    }

namespace
sfinae
    {
    using ::boost::qvm::operator*;
    }

namespace
qvm_detail
    {
    template <int R,int C>
    struct mul_mv_defined;

    template <>
    struct
    mul_mv_defined<2,2>
        {
        static bool const value=true;
        };
    }

template <class A,class B>
BOOST_QVM_CONSTEXPR BOOST_QVM_INLINE_OPERATIONS
typename lazy_enable_if_c<
    mat_traits<B>::rows==2 && mat_traits<B>::cols==2 &&
    vec_traits<A>::dim==2,
    deduce_vec2<A,B,2> >::type
operator*( A const & a, B const & b )
    {
    typedef typename vec_traits<A>::scalar_type Ta;
    typedef typename mat_traits<B>::scalar_type Tb;
    Ta const a0 = vec_traits<A>::template read_element<0>(a);
    Ta const a1 = vec_traits<A>::template read_element<1>(a);
    Tb const b00 = mat_traits<B>::template read_element<0,0>(b);
    Tb const b01 = mat_traits<B>::template read_element<0,1>(b);
    Tb const b10 = mat_traits<B>::template read_element<1,0>(b);
    Tb const b11 = mat_traits<B>::template read_element<1,1>(b);
    typedef typename deduce_vec2<A,B,2>::type R;
    BOOST_QVM_STATIC_ASSERT(vec_traits<R>::dim==2);
    R r;
    vec_traits<R>::template write_element<0>(r)=a0*b00+a1*b10;
    vec_traits<R>::template write_element<1>(r)=a0*b01+a1*b11;
    return r;
    }

namespace
sfinae
    {
    using ::boost::qvm::operator*;
    }

namespace
qvm_detail
    {
    template <int R,int C>
    struct mul_vm_defined;

    template <>
    struct
    mul_vm_defined<2,2>
        {
        static bool const value=true;
        };
    }

} }

#endif

/* vec_mat_operations2.hpp
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
*/