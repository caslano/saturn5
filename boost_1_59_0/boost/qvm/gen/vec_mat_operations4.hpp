#ifndef BOOST_QVM_GEN_VEC_MAT_OPERATIONS4_HPP_INCLUDED
#define BOOST_QVM_GEN_VEC_MAT_OPERATIONS4_HPP_INCLUDED

// Copyright 2008-2022 Emil Dotchevski and Reverge Studios, Inc.

// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

// This file was generated by a program. Do not edit manually.

#include <boost/qvm/deduce_vec.hpp>
#include <boost/qvm/enable_if.hpp>
#include <boost/qvm/inline.hpp>
#include <boost/qvm/mat_traits.hpp>
#include <boost/qvm/vec_traits.hpp>

namespace boost { namespace qvm {

template <class A,class B>
BOOST_QVM_CONSTEXPR BOOST_QVM_INLINE_OPERATIONS
typename lazy_enable_if_c<
    mat_traits<A>::rows==4 && mat_traits<A>::cols==4 &&
    vec_traits<B>::dim==4,
    deduce_vec2<A,B,4> >::type
operator*( A const & a, B const & b )
    {
    typedef typename mat_traits<A>::scalar_type Ta;
    typedef typename vec_traits<B>::scalar_type Tb;
    Ta const a00 = mat_traits<A>::template read_element<0,0>(a);
    Ta const a01 = mat_traits<A>::template read_element<0,1>(a);
    Ta const a02 = mat_traits<A>::template read_element<0,2>(a);
    Ta const a03 = mat_traits<A>::template read_element<0,3>(a);
    Ta const a10 = mat_traits<A>::template read_element<1,0>(a);
    Ta const a11 = mat_traits<A>::template read_element<1,1>(a);
    Ta const a12 = mat_traits<A>::template read_element<1,2>(a);
    Ta const a13 = mat_traits<A>::template read_element<1,3>(a);
    Ta const a20 = mat_traits<A>::template read_element<2,0>(a);
    Ta const a21 = mat_traits<A>::template read_element<2,1>(a);
    Ta const a22 = mat_traits<A>::template read_element<2,2>(a);
    Ta const a23 = mat_traits<A>::template read_element<2,3>(a);
    Ta const a30 = mat_traits<A>::template read_element<3,0>(a);
    Ta const a31 = mat_traits<A>::template read_element<3,1>(a);
    Ta const a32 = mat_traits<A>::template read_element<3,2>(a);
    Ta const a33 = mat_traits<A>::template read_element<3,3>(a);
    Tb const b0 = vec_traits<B>::template read_element<0>(b);
    Tb const b1 = vec_traits<B>::template read_element<1>(b);
    Tb const b2 = vec_traits<B>::template read_element<2>(b);
    Tb const b3 = vec_traits<B>::template read_element<3>(b);
    typedef typename deduce_vec2<A,B,4>::type R;
    BOOST_QVM_STATIC_ASSERT(vec_traits<R>::dim==4);
    R r;
    vec_traits<R>::template write_element<0>(r)=a00*b0+a01*b1+a02*b2+a03*b3;
    vec_traits<R>::template write_element<1>(r)=a10*b0+a11*b1+a12*b2+a13*b3;
    vec_traits<R>::template write_element<2>(r)=a20*b0+a21*b1+a22*b2+a23*b3;
    vec_traits<R>::template write_element<3>(r)=a30*b0+a31*b1+a32*b2+a33*b3;
    return r;
    }

namespace
sfinae
    {
    using ::boost::qvm::operator*;
    }

namespace
qvm_detail
    {
    template <int R,int C>
    struct mul_mv_defined;

    template <>
    struct
    mul_mv_defined<4,4>
        {
        static bool const value=true;
        };
    }

template <class A,class B>
BOOST_QVM_CONSTEXPR BOOST_QVM_INLINE_OPERATIONS
typename lazy_enable_if_c<
    mat_traits<B>::rows==4 && mat_traits<B>::cols==4 &&
    vec_traits<A>::dim==4,
    deduce_vec2<A,B,4> >::type
operator*( A const & a, B const & b )
    {
    typedef typename vec_traits<A>::scalar_type Ta;
    typedef typename mat_traits<B>::scalar_type Tb;
    Ta const a0 = vec_traits<A>::template read_element<0>(a);
    Ta const a1 = vec_traits<A>::template read_element<1>(a);
    Ta const a2 = vec_traits<A>::template read_element<2>(a);
    Ta const a3 = vec_traits<A>::template read_element<3>(a);
    Tb const b00 = mat_traits<B>::template read_element<0,0>(b);
    Tb const b01 = mat_traits<B>::template read_element<0,1>(b);
    Tb const b02 = mat_traits<B>::template read_element<0,2>(b);
    Tb const b03 = mat_traits<B>::template read_element<0,3>(b);
    Tb const b10 = mat_traits<B>::template read_element<1,0>(b);
    Tb const b11 = mat_traits<B>::template read_element<1,1>(b);
    Tb const b12 = mat_traits<B>::template read_element<1,2>(b);
    Tb const b13 = mat_traits<B>::template read_element<1,3>(b);
    Tb const b20 = mat_traits<B>::template read_element<2,0>(b);
    Tb const b21 = mat_traits<B>::template read_element<2,1>(b);
    Tb const b22 = mat_traits<B>::template read_element<2,2>(b);
    Tb const b23 = mat_traits<B>::template read_element<2,3>(b);
    Tb const b30 = mat_traits<B>::template read_element<3,0>(b);
    Tb const b31 = mat_traits<B>::template read_element<3,1>(b);
    Tb const b32 = mat_traits<B>::template read_element<3,2>(b);
    Tb const b33 = mat_traits<B>::template read_element<3,3>(b);
    typedef typename deduce_vec2<A,B,4>::type R;
    BOOST_QVM_STATIC_ASSERT(vec_traits<R>::dim==4);
    R r;
    vec_traits<R>::template write_element<0>(r)=a0*b00+a1*b10+a2*b20+a3*b30;
    vec_traits<R>::template write_element<1>(r)=a0*b01+a1*b11+a2*b21+a3*b31;
    vec_traits<R>::template write_element<2>(r)=a0*b02+a1*b12+a2*b22+a3*b32;
    vec_traits<R>::template write_element<3>(r)=a0*b03+a1*b13+a2*b23+a3*b33;
    return r;
    }

namespace
sfinae
    {
    using ::boost::qvm::operator*;
    }

namespace
qvm_detail
    {
    template <int R,int C>
    struct mul_vm_defined;

    template <>
    struct
    mul_vm_defined<4,4>
        {
        static bool const value=true;
        };
    }

} }

#endif

/* vec_mat_operations4.hpp
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
*/