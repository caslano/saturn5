#ifndef BOOST_QVM_GEN_MAT_ASSIGN4_HPP_INCLUDED
#define BOOST_QVM_GEN_MAT_ASSIGN4_HPP_INCLUDED

// Copyright 2008-2022 Emil Dotchevski and Reverge Studios, Inc.

// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

// This file was generated by a program. Do not edit manually.

#include <boost/qvm/enable_if.hpp>
#include <boost/qvm/inline.hpp>
#include <boost/qvm/mat_traits.hpp>

namespace boost { namespace qvm {

template <class A,class B>
BOOST_QVM_CONSTEXPR BOOST_QVM_INLINE_OPERATIONS
typename enable_if_c<
    mat_traits<A>::rows==4 && mat_traits<B>::rows==4 &&
    mat_traits<A>::cols==4 && mat_traits<B>::cols==4,
    A &>::type
assign( A & a, B const & b )
    {
    mat_traits<A>::template write_element<0,0>(a)=mat_traits<B>::template read_element<0,0>(b);
    mat_traits<A>::template write_element<0,1>(a)=mat_traits<B>::template read_element<0,1>(b);
    mat_traits<A>::template write_element<0,2>(a)=mat_traits<B>::template read_element<0,2>(b);
    mat_traits<A>::template write_element<0,3>(a)=mat_traits<B>::template read_element<0,3>(b);
    mat_traits<A>::template write_element<1,0>(a)=mat_traits<B>::template read_element<1,0>(b);
    mat_traits<A>::template write_element<1,1>(a)=mat_traits<B>::template read_element<1,1>(b);
    mat_traits<A>::template write_element<1,2>(a)=mat_traits<B>::template read_element<1,2>(b);
    mat_traits<A>::template write_element<1,3>(a)=mat_traits<B>::template read_element<1,3>(b);
    mat_traits<A>::template write_element<2,0>(a)=mat_traits<B>::template read_element<2,0>(b);
    mat_traits<A>::template write_element<2,1>(a)=mat_traits<B>::template read_element<2,1>(b);
    mat_traits<A>::template write_element<2,2>(a)=mat_traits<B>::template read_element<2,2>(b);
    mat_traits<A>::template write_element<2,3>(a)=mat_traits<B>::template read_element<2,3>(b);
    mat_traits<A>::template write_element<3,0>(a)=mat_traits<B>::template read_element<3,0>(b);
    mat_traits<A>::template write_element<3,1>(a)=mat_traits<B>::template read_element<3,1>(b);
    mat_traits<A>::template write_element<3,2>(a)=mat_traits<B>::template read_element<3,2>(b);
    mat_traits<A>::template write_element<3,3>(a)=mat_traits<B>::template read_element<3,3>(b);
    return a;
    }

namespace
sfinae
    {
    using ::boost::qvm::assign;
    }

namespace
qvm_detail
    {
    template <int R,int C>
    struct assign_mm_defined;

    template <>
    struct
    assign_mm_defined<4,4>
        {
        static bool const value=true;
        };
    }

template <class A,class B>
BOOST_QVM_CONSTEXPR BOOST_QVM_INLINE_OPERATIONS
typename enable_if_c<
    mat_traits<A>::rows==4 && mat_traits<B>::rows==4 &&
    mat_traits<A>::cols==1 && mat_traits<B>::cols==1,
    A &>::type
assign( A & a, B const & b )
    {
    mat_traits<A>::template write_element<0,0>(a)=mat_traits<B>::template read_element<0,0>(b);
    mat_traits<A>::template write_element<1,0>(a)=mat_traits<B>::template read_element<1,0>(b);
    mat_traits<A>::template write_element<2,0>(a)=mat_traits<B>::template read_element<2,0>(b);
    mat_traits<A>::template write_element<3,0>(a)=mat_traits<B>::template read_element<3,0>(b);
    return a;
    }

namespace
sfinae
    {
    using ::boost::qvm::assign;
    }

namespace
qvm_detail
    {
    template <int R,int C>
    struct assign_mm_defined;

    template <>
    struct
    assign_mm_defined<4,1>
        {
        static bool const value=true;
        };
    }

template <class A,class B>
BOOST_QVM_CONSTEXPR BOOST_QVM_INLINE_OPERATIONS
typename enable_if_c<
    mat_traits<A>::rows==1 && mat_traits<B>::rows==1 &&
    mat_traits<A>::cols==4 && mat_traits<B>::cols==4,
    A &>::type
assign( A & a, B const & b )
    {
    mat_traits<A>::template write_element<0,0>(a)=mat_traits<B>::template read_element<0,0>(b);
    mat_traits<A>::template write_element<0,1>(a)=mat_traits<B>::template read_element<0,1>(b);
    mat_traits<A>::template write_element<0,2>(a)=mat_traits<B>::template read_element<0,2>(b);
    mat_traits<A>::template write_element<0,3>(a)=mat_traits<B>::template read_element<0,3>(b);
    return a;
    }

namespace
sfinae
    {
    using ::boost::qvm::assign;
    }

namespace
qvm_detail
    {
    template <int R,int C>
    struct assign_mm_defined;

    template <>
    struct
    assign_mm_defined<1,4>
        {
        static bool const value=true;
        };
    }

} }

#endif

/* mat_assign4.hpp
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
*/