#ifndef BOOST_QVM_GEN_VEC_OPERATIONS4_HPP_INCLUDED
#define BOOST_QVM_GEN_VEC_OPERATIONS4_HPP_INCLUDED

// Copyright 2008-2022 Emil Dotchevski and Reverge Studios, Inc.

// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

// This file was generated by a program. Do not edit manually.

#include <boost/qvm/deduce_scalar.hpp>
#include <boost/qvm/deduce_vec.hpp>
#include <boost/qvm/error.hpp>
#include <boost/qvm/gen/vec_assign4.hpp>
#include <boost/qvm/math.hpp>
#include <boost/qvm/static_assert.hpp>
#include <boost/qvm/throw_exception.hpp>

namespace boost { namespace qvm {

template <class A,class B>
BOOST_QVM_CONSTEXPR BOOST_QVM_INLINE_OPERATIONS
typename lazy_enable_if_c<
    vec_traits<A>::dim==4 && vec_traits<B>::dim==4,
    deduce_vec2<A,B,4> >::type
operator+( A const & a, B const & b )
    {
    typedef typename deduce_vec2<A,B,4>::type R;
    BOOST_QVM_STATIC_ASSERT(vec_traits<R>::dim==4);
    R r;
    vec_traits<R>::template write_element<0>(r)=vec_traits<A>::template read_element<0>(a)+vec_traits<B>::template read_element<0>(b);
    vec_traits<R>::template write_element<1>(r)=vec_traits<A>::template read_element<1>(a)+vec_traits<B>::template read_element<1>(b);
    vec_traits<R>::template write_element<2>(r)=vec_traits<A>::template read_element<2>(a)+vec_traits<B>::template read_element<2>(b);
    vec_traits<R>::template write_element<3>(r)=vec_traits<A>::template read_element<3>(a)+vec_traits<B>::template read_element<3>(b);
    return r;
    }

namespace
sfinae
    {
    using ::boost::qvm::operator+;
    }

namespace
qvm_detail
    {
    template <int D>
    struct plus_vv_defined;

    template <>
    struct
    plus_vv_defined<4>
        {
        static bool const value=true;
        };
    }

template <class A,class B>
BOOST_QVM_CONSTEXPR BOOST_QVM_INLINE_OPERATIONS
typename lazy_enable_if_c<
    vec_traits<A>::dim==4 && vec_traits<B>::dim==4,
    deduce_vec2<A,B,4> >::type
operator-( A const & a, B const & b )
    {
    typedef typename deduce_vec2<A,B,4>::type R;
    BOOST_QVM_STATIC_ASSERT(vec_traits<R>::dim==4);
    R r;
    vec_traits<R>::template write_element<0>(r)=vec_traits<A>::template read_element<0>(a)-vec_traits<B>::template read_element<0>(b);
    vec_traits<R>::template write_element<1>(r)=vec_traits<A>::template read_element<1>(a)-vec_traits<B>::template read_element<1>(b);
    vec_traits<R>::template write_element<2>(r)=vec_traits<A>::template read_element<2>(a)-vec_traits<B>::template read_element<2>(b);
    vec_traits<R>::template write_element<3>(r)=vec_traits<A>::template read_element<3>(a)-vec_traits<B>::template read_element<3>(b);
    return r;
    }

namespace
sfinae
    {
    using ::boost::qvm::operator-;
    }

namespace
qvm_detail
    {
    template <int D>
    struct minus_vv_defined;

    template <>
    struct
    minus_vv_defined<4>
        {
        static bool const value=true;
        };
    }

template <class A,class B>
BOOST_QVM_CONSTEXPR BOOST_QVM_INLINE_OPERATIONS
typename enable_if_c<
    vec_traits<A>::dim==4 && vec_traits<B>::dim==4,
    A &>::type
operator+=( A & a, B const & b )
    {
    vec_traits<A>::template write_element<0>(a)+=vec_traits<B>::template read_element<0>(b);
    vec_traits<A>::template write_element<1>(a)+=vec_traits<B>::template read_element<1>(b);
    vec_traits<A>::template write_element<2>(a)+=vec_traits<B>::template read_element<2>(b);
    vec_traits<A>::template write_element<3>(a)+=vec_traits<B>::template read_element<3>(b);
    return a;
    }

namespace
sfinae
    {
    using ::boost::qvm::operator+=;
    }

namespace
qvm_detail
    {
    template <int D>
    struct plus_eq_vv_defined;

    template <>
    struct
    plus_eq_vv_defined<4>
        {
        static bool const value=true;
        };
    }

template <class A,class B>
BOOST_QVM_CONSTEXPR BOOST_QVM_INLINE_OPERATIONS
typename enable_if_c<
    vec_traits<A>::dim==4 && vec_traits<B>::dim==4,
    A &>::type
operator-=( A & a, B const & b )
    {
    vec_traits<A>::template write_element<0>(a)-=vec_traits<B>::template read_element<0>(b);
    vec_traits<A>::template write_element<1>(a)-=vec_traits<B>::template read_element<1>(b);
    vec_traits<A>::template write_element<2>(a)-=vec_traits<B>::template read_element<2>(b);
    vec_traits<A>::template write_element<3>(a)-=vec_traits<B>::template read_element<3>(b);
    return a;
    }

namespace
sfinae
    {
    using ::boost::qvm::operator-=;
    }

namespace
qvm_detail
    {
    template <int D>
    struct minus_eq_vv_defined;

    template <>
    struct
    minus_eq_vv_defined<4>
        {
        static bool const value=true;
        };
    }

template <class A,class B>
BOOST_QVM_CONSTEXPR BOOST_QVM_INLINE_OPERATIONS
typename lazy_enable_if_c<
    vec_traits<A>::dim==4 && is_scalar<B>::value,
    deduce_vec2<A,B,vec_traits<A>::dim> >::type
operator*( A const & a, B b )
    {
    typedef typename deduce_vec2<A,B,vec_traits<A>::dim>::type R;
    R r;
    vec_traits<R>::template write_element<0>(r)=vec_traits<A>::template read_element<0>(a)*b;
    vec_traits<R>::template write_element<1>(r)=vec_traits<A>::template read_element<1>(a)*b;
    vec_traits<R>::template write_element<2>(r)=vec_traits<A>::template read_element<2>(a)*b;
    vec_traits<R>::template write_element<3>(r)=vec_traits<A>::template read_element<3>(a)*b;
    return r;
    }

namespace
sfinae
    {
    using ::boost::qvm::operator*;
    }

namespace
qvm_detail
    {
    template <int D>
    struct mul_vs_defined;

    template <>
    struct
    mul_vs_defined<4>
        {
        static bool const value=true;
        };
    }

template <class A,class B>
BOOST_QVM_CONSTEXPR BOOST_QVM_INLINE_OPERATIONS
typename lazy_enable_if_c<
    is_scalar<A>::value && vec_traits<B>::dim==4,
    deduce_vec2<A,B,vec_traits<B>::dim> >::type
operator*( A a, B const & b )
    {
    typedef typename deduce_vec2<A,B,vec_traits<B>::dim>::type R;
    R r;
    vec_traits<R>::template write_element<0>(r)=a*vec_traits<B>::template read_element<0>(b);
    vec_traits<R>::template write_element<1>(r)=a*vec_traits<B>::template read_element<1>(b);
    vec_traits<R>::template write_element<2>(r)=a*vec_traits<B>::template read_element<2>(b);
    vec_traits<R>::template write_element<3>(r)=a*vec_traits<B>::template read_element<3>(b);
    return r;
    }

namespace
sfinae
    {
    using ::boost::qvm::operator*;
    }

namespace
qvm_detail
    {
    template <int D>
    struct mul_sv_defined;

    template <>
    struct
    mul_sv_defined<4>
        {
        static bool const value=true;
        };
    }

template <class A,class  B>
BOOST_QVM_CONSTEXPR BOOST_QVM_INLINE_OPERATIONS
typename enable_if_c<
    vec_traits<A>::dim==4 && is_scalar<B>::value,
    A &>::type
operator*=( A & a, B b )
    {
    vec_traits<A>::template write_element<0>(a)*=b;
    vec_traits<A>::template write_element<1>(a)*=b;
    vec_traits<A>::template write_element<2>(a)*=b;
    vec_traits<A>::template write_element<3>(a)*=b;
    return a;
    }

namespace
sfinae
    {
    using ::boost::qvm::operator*=;
    }

namespace
qvm_detail
    {
    template <int D>
    struct mul_eq_vs_defined;

    template <>
    struct
    mul_eq_vs_defined<4>
        {
        static bool const value=true;
        };
    }

template <class A,class B>
BOOST_QVM_CONSTEXPR BOOST_QVM_INLINE_OPERATIONS
typename lazy_enable_if_c<
    vec_traits<A>::dim==4 && is_scalar<B>::value,
    deduce_vec2<A,B,vec_traits<A>::dim> >::type
operator/( A const & a, B b )
    {
    typedef typename deduce_vec2<A,B,vec_traits<A>::dim>::type R;
    R r;
    vec_traits<R>::template write_element<0>(r)=vec_traits<A>::template read_element<0>(a)/b;
    vec_traits<R>::template write_element<1>(r)=vec_traits<A>::template read_element<1>(a)/b;
    vec_traits<R>::template write_element<2>(r)=vec_traits<A>::template read_element<2>(a)/b;
    vec_traits<R>::template write_element<3>(r)=vec_traits<A>::template read_element<3>(a)/b;
    return r;
    }

namespace
sfinae
    {
    using ::boost::qvm::operator/;
    }

namespace
qvm_detail
    {
    template <int D>
    struct div_vs_defined;

    template <>
    struct
    div_vs_defined<4>
        {
        static bool const value=true;
        };
    }

template <class A,class  B>
BOOST_QVM_CONSTEXPR BOOST_QVM_INLINE_OPERATIONS
typename enable_if_c<
    vec_traits<A>::dim==4 && is_scalar<B>::value,
    A &>::type
operator/=( A & a, B b )
    {
    vec_traits<A>::template write_element<0>(a)/=b;
    vec_traits<A>::template write_element<1>(a)/=b;
    vec_traits<A>::template write_element<2>(a)/=b;
    vec_traits<A>::template write_element<3>(a)/=b;
    return a;
    }

namespace
sfinae
    {
    using ::boost::qvm::operator/=;
    }

namespace
qvm_detail
    {
    template <int D>
    struct div_eq_vs_defined;

    template <>
    struct
    div_eq_vs_defined<4>
        {
        static bool const value=true;
        };
    }

template <class R,class A>
BOOST_QVM_CONSTEXPR BOOST_QVM_INLINE_OPERATIONS
typename enable_if_c<
    is_vec<A>::value &&
    vec_traits<R>::dim==4 && vec_traits<A>::dim==4,
    R>::type
convert_to( A const & a )
    {
    R r;
    vec_traits<R>::template write_element<0>(r)=vec_traits<A>::template read_element<0>(a);
    vec_traits<R>::template write_element<1>(r)=vec_traits<A>::template read_element<1>(a);
    vec_traits<R>::template write_element<2>(r)=vec_traits<A>::template read_element<2>(a);
    vec_traits<R>::template write_element<3>(r)=vec_traits<A>::template read_element<3>(a);
    return r;
    }

namespace
sfinae
    {
    using ::boost::qvm::convert_to;
    }

namespace
qvm_detail
    {
    template <int D>
    struct convert_to_v_defined;

    template <>
    struct
    convert_to_v_defined<4>
        {
        static bool const value=true;
        };
    }

template <class A,class B>
BOOST_QVM_CONSTEXPR BOOST_QVM_INLINE_OPERATIONS
typename enable_if_c<
    vec_traits<A>::dim==4 && vec_traits<B>::dim==4,
bool>::type
operator==( A const & a, B const & b )
    {
    return
        vec_traits<A>::template read_element<0>(a)==vec_traits<B>::template read_element<0>(b) &&
        vec_traits<A>::template read_element<1>(a)==vec_traits<B>::template read_element<1>(b) &&
        vec_traits<A>::template read_element<2>(a)==vec_traits<B>::template read_element<2>(b) &&
        vec_traits<A>::template read_element<3>(a)==vec_traits<B>::template read_element<3>(b);
    }

namespace
sfinae
    {
    using ::boost::qvm::operator==;
    }

namespace
qvm_detail
    {
    template <int D>
    struct eq_vv_defined;

    template <>
    struct
    eq_vv_defined<4>
        {
        static bool const value=true;
        };
    }

template <class A,class B>
BOOST_QVM_CONSTEXPR BOOST_QVM_INLINE_OPERATIONS
typename enable_if_c<
    vec_traits<A>::dim==4 && vec_traits<B>::dim==4,
bool>::type
operator!=( A const & a, B const & b )
    {
    return
        !(vec_traits<A>::template read_element<0>(a)==vec_traits<B>::template read_element<0>(b)) ||
        !(vec_traits<A>::template read_element<1>(a)==vec_traits<B>::template read_element<1>(b)) ||
        !(vec_traits<A>::template read_element<2>(a)==vec_traits<B>::template read_element<2>(b)) ||
        !(vec_traits<A>::template read_element<3>(a)==vec_traits<B>::template read_element<3>(b));
    }

namespace
sfinae
    {
    using ::boost::qvm::operator!=;
    }

namespace
qvm_detail
    {
    template <int D>
    struct neq_vv_defined;

    template <>
    struct
    neq_vv_defined<4>
        {
        static bool const value=true;
        };
    }

template <class A>
BOOST_QVM_CONSTEXPR BOOST_QVM_INLINE_OPERATIONS
typename lazy_enable_if_c<
    vec_traits<A>::dim==4,
    deduce_vec<A> >::type
operator-( A const & a )
    {
    typedef typename deduce_vec<A>::type R;
    R r;
    vec_traits<R>::template write_element<0>(r)=-vec_traits<A>::template read_element<0>(a);
    vec_traits<R>::template write_element<1>(r)=-vec_traits<A>::template read_element<1>(a);
    vec_traits<R>::template write_element<2>(r)=-vec_traits<A>::template read_element<2>(a);
    vec_traits<R>::template write_element<3>(r)=-vec_traits<A>::template read_element<3>(a);
    return r;
    }

namespace
sfinae
    {
    using ::boost::qvm::operator-;
    }

namespace
qvm_detail
    {
    template <int D>
    struct minus_v_defined;

    template <>
    struct
    minus_v_defined<4>
        {
        static bool const value=true;
        };
    }

template <class A>
BOOST_QVM_CONSTEXPR BOOST_QVM_INLINE_OPERATIONS
typename enable_if_c<
    is_vec<A>::value && vec_traits<A>::dim==4,
    typename vec_traits<A>::scalar_type>::type
mag( A const & a )
    {
    typedef typename vec_traits<A>::scalar_type T;
    T const a0=vec_traits<A>::template read_element<0>(a);
    T const a1=vec_traits<A>::template read_element<1>(a);
    T const a2=vec_traits<A>::template read_element<2>(a);
    T const a3=vec_traits<A>::template read_element<3>(a);
    T const m2=a0*a0+a1*a1+a2*a2+a3*a3;
    T const mag=sqrt(m2);
    return mag;
    }

namespace
sfinae
    {
    using ::boost::qvm::mag;
    }

namespace
qvm_detail
    {
    template <int D>
    struct mag_v_defined;

    template <>
    struct
    mag_v_defined<4>
        {
        static bool const value=true;
        };
    }

template <class A>
BOOST_QVM_CONSTEXPR BOOST_QVM_INLINE_OPERATIONS
typename enable_if_c<
    is_vec<A>::value && vec_traits<A>::dim==4,
    typename vec_traits<A>::scalar_type>::type
mag_sqr( A const & a )
    {
    typedef typename vec_traits<A>::scalar_type T;
    T const a0=vec_traits<A>::template read_element<0>(a);
    T const a1=vec_traits<A>::template read_element<1>(a);
    T const a2=vec_traits<A>::template read_element<2>(a);
    T const a3=vec_traits<A>::template read_element<3>(a);
    T const m2=a0*a0+a1*a1+a2*a2+a3*a3;
    return m2;
    }

namespace
sfinae
    {
    using ::boost::qvm::mag_sqr;
    }

namespace
qvm_detail
    {
    template <int D>
    struct mag_sqr_v_defined;

    template <>
    struct
    mag_sqr_v_defined<4>
        {
        static bool const value=true;
        };
    }

template <class A>
BOOST_QVM_CONSTEXPR BOOST_QVM_INLINE_OPERATIONS
typename lazy_enable_if_c<
    vec_traits<A>::dim==4,
    deduce_vec<A> >::type
normalized( A const & a )
    {
    typedef typename vec_traits<A>::scalar_type T;
    T const a0=vec_traits<A>::template read_element<0>(a);
    T const a1=vec_traits<A>::template read_element<1>(a);
    T const a2=vec_traits<A>::template read_element<2>(a);
    T const a3=vec_traits<A>::template read_element<3>(a);
    T const m2=a0*a0+a1*a1+a2*a2+a3*a3;
    if( m2==scalar_traits<typename vec_traits<A>::scalar_type>::value(0) )
        BOOST_QVM_THROW_EXCEPTION(zero_magnitude_error());
    T const rm=scalar_traits<T>::value(1)/sqrt(m2);
    typedef typename deduce_vec<A>::type R;
    R r;
    vec_traits<R>::template write_element<0>(r)=a0*rm;
    vec_traits<R>::template write_element<1>(r)=a1*rm;
    vec_traits<R>::template write_element<2>(r)=a2*rm;
    vec_traits<R>::template write_element<3>(r)=a3*rm;
    return r;
    }

namespace
sfinae
    {
    using ::boost::qvm::normalized;
    }

template <class A>
BOOST_QVM_CONSTEXPR BOOST_QVM_INLINE_OPERATIONS
typename enable_if_c<
    vec_traits<A>::dim==4,
    void>::type
normalize( A & a )
    {
    typedef typename vec_traits<A>::scalar_type T;
    T const a0=vec_traits<A>::template read_element<0>(a);
    T const a1=vec_traits<A>::template read_element<1>(a);
    T const a2=vec_traits<A>::template read_element<2>(a);
    T const a3=vec_traits<A>::template read_element<3>(a);
    T const m2=a0*a0+a1*a1+a2*a2+a3*a3;
    if( m2==scalar_traits<typename vec_traits<A>::scalar_type>::value(0) )
        BOOST_QVM_THROW_EXCEPTION(zero_magnitude_error());
    T const rm=scalar_traits<T>::value(1)/sqrt(m2);
    vec_traits<A>::template write_element<0>(a)*=rm;
    vec_traits<A>::template write_element<1>(a)*=rm;
    vec_traits<A>::template write_element<2>(a)*=rm;
    vec_traits<A>::template write_element<3>(a)*=rm;
    }

namespace
sfinae
    {
    using ::boost::qvm::normalize;
    }

namespace
qvm_detail
    {
    template <int D>
    struct normalize_v_defined;

    template <>
    struct
    normalize_v_defined<4>
        {
        static bool const value=true;
        };
    }

template <class A,class B>
BOOST_QVM_CONSTEXPR BOOST_QVM_INLINE_OPERATIONS
typename lazy_enable_if_c<
    vec_traits<A>::dim==4 && vec_traits<B>::dim==4,
    deduce_scalar<typename vec_traits<A>::scalar_type,typename vec_traits<B>::scalar_type> >::type
dot( A const & a, B const & b )
    {
    typedef typename vec_traits<A>::scalar_type Ta;
    typedef typename vec_traits<B>::scalar_type Tb;
    typedef typename deduce_scalar<Ta,Tb>::type Tr;
    Ta const a0=vec_traits<A>::template read_element<0>(a);
    Ta const a1=vec_traits<A>::template read_element<1>(a);
    Ta const a2=vec_traits<A>::template read_element<2>(a);
    Ta const a3=vec_traits<A>::template read_element<3>(a);
    Tb const b0=vec_traits<B>::template read_element<0>(b);
    Tb const b1=vec_traits<B>::template read_element<1>(b);
    Tb const b2=vec_traits<B>::template read_element<2>(b);
    Tb const b3=vec_traits<B>::template read_element<3>(b);
    Tr const dot=a0*b0+a1*b1+a2*b2+a3*b3;
    return dot;
    }

namespace
sfinae
    {
    using ::boost::qvm::dot;
    }

namespace
qvm_detail
    {
    template <int D>
    struct dot_vv_defined;

    template <>
    struct
    dot_vv_defined<4>
        {
        static bool const value=true;
        };
    }

} }

#endif

/* vec_operations4.hpp
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
*/