
//          Copyright Oliver Kowalke 2014.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_COROUTINE2_DETAIL_WRAP_H
#define BOOST_COROUTINE2_DETAIL_WRAP_H

#include <functional>
#include <type_traits>

#include <boost/config.hpp>
#if defined(BOOST_NO_CXX17_STD_INVOKE)
#include <boost/context/detail/invoke.hpp>
#endif
#include <boost/context/fiber.hpp>

#include <boost/coroutine2/detail/config.hpp>

#ifdef BOOST_HAS_ABI_HEADERS
# include BOOST_ABI_PREFIX
#endif

namespace boost {
namespace coroutines2 {
namespace detail {

template< typename Fn1, typename Fn2  >
class wrapper {
private:
    typename std::decay< Fn1 >::type    fn1_;
    typename std::decay< Fn2 >::type    fn2_;

public:
    wrapper( Fn1 && fn1, Fn2 && fn2) :
        fn1_( std::move( fn1) ),
        fn2_( std::move( fn2) ) {
    }

    wrapper( wrapper const&) = delete;
    wrapper & operator=( wrapper const&) = delete;

    wrapper( wrapper && other) = default;
    wrapper & operator=( wrapper && other) = default;

    boost::context::fiber
    operator()( boost::context::fiber && c) {
#if defined(BOOST_NO_CXX17_STD_INVOKE)
        return boost::context::detail::invoke(
                std::move( fn1_),
                fn2_,
                std::forward< boost::context::fiber >( c) );
#else
        return std::invoke(
                std::move( fn1_),
                fn2_,
                std::forward< boost::context::fiber >( c) );
#endif
    }
};

template< typename Fn1, typename Fn2 >
wrapper< Fn1, Fn2 >
wrap( Fn1 && fn1, Fn2 && fn2) {
    return wrapper< Fn1, Fn2 >(
            std::forward< Fn1 >( fn1),
            std::forward< Fn2 >( fn2) );
}

}}}

#ifdef BOOST_HAS_ABI_HEADERS
#include BOOST_ABI_SUFFIX
#endif

#endif // BOOST_COROUTINE2_DETAIL_WRAP_H

/* wrap.hpp
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
*/