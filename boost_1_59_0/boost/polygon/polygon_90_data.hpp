/*
  Copyright 2008 Intel Corporation

  Use, modification and distribution are subject to the Boost Software License,
  Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
*/
#ifndef BOOST_POLYGON_POLYGON_90_DATA_HPP
#define BOOST_POLYGON_POLYGON_90_DATA_HPP
namespace boost { namespace polygon{
struct polygon_90_concept;
template <typename T>
class polygon_90_data {
public:
  typedef polygon_90_concept geometry_type;
  typedef T coordinate_type;
  typedef typename std::vector<coordinate_type>::const_iterator compact_iterator_type;
  typedef iterator_compact_to_points<compact_iterator_type, point_data<coordinate_type> > iterator_type;
  typedef typename coordinate_traits<T>::area_type area_type;

  inline polygon_90_data() : coords_() {} //do nothing default constructor

  // initialize a polygon from x,y values, it is assumed that the first is an x
  // and that the input is a well behaved polygon
  template<class iT>
  inline polygon_90_data& set(iT begin_point, iT end_point) {
    return set_compact(iterator_points_to_compact<iT, typename std::iterator_traits<iT>::value_type>(begin_point, end_point),
                       iterator_points_to_compact<iT, typename std::iterator_traits<iT>::value_type>(end_point, end_point));
  }

  template<class iT>
  inline polygon_90_data& set_compact(iT input_begin, iT input_end) {
    coords_.clear();  //just in case there was some old data there
    while(input_begin != input_end) {
       coords_.insert(coords_.end(), *input_begin);
       ++input_begin;
    }
    return *this;
  }

  // copy constructor (since we have dynamic memory)
  inline polygon_90_data(const polygon_90_data& that) : coords_(that.coords_) {}

  // assignment operator (since we have dynamic memory do a deep copy)
  inline polygon_90_data& operator=(const polygon_90_data& that) {
    coords_ = that.coords_;
    return *this;
  }

  template <typename T2>
  inline polygon_90_data& operator=(const T2& rvalue);

  // assignment operator (since we have dynamic memory do a deep copy)
  inline bool operator==(const polygon_90_data& that) const {
    return coords_ == that.coords_;
  }

  // get begin iterator, returns a pointer to a const Unit
  inline iterator_type begin() const { return iterator_type(coords_.begin(), coords_.end()); }

  // get end iterator, returns a pointer to a const Unit
  inline iterator_type end() const { return iterator_type(coords_.end(), coords_.end()); }

  // get begin iterator, returns a pointer to a const Unit
  inline compact_iterator_type begin_compact() const { return coords_.begin(); }

  // get end iterator, returns a pointer to a const Unit
  inline compact_iterator_type end_compact() const { return coords_.end(); }

  inline std::size_t size() const { return coords_.size(); }

private:
  std::vector<coordinate_type> coords_;
};


}
}
#endif

/* polygon_90_data.hpp
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
*/