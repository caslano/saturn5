/*
  Copyright 2008 Intel Corporation

  Use, modification and distribution are subject to the Boost Software License,
  Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
*/
#ifndef BOOST_POLYGON_ITERATOR_COMPACT_TO_POINTS_HPP
#define BOOST_POLYGON_ITERATOR_COMPACT_TO_POINTS_HPP
namespace boost { namespace polygon{
template <typename iterator_type, typename point_type>
class iterator_compact_to_points {
private:
  iterator_type iter_;
  iterator_type iter_end_;
  point_type pt_;
  typename point_traits<point_type>::coordinate_type firstX_;
  orientation_2d orient_;
public:
  typedef std::forward_iterator_tag iterator_category;
  typedef point_type value_type;
  typedef std::ptrdiff_t difference_type;
  typedef const point_type* pointer; //immutable
  typedef const point_type& reference; //immutable

  inline iterator_compact_to_points() : iter_(), iter_end_(), pt_(), firstX_(), orient_() {}
  inline iterator_compact_to_points(iterator_type iter, iterator_type iter_end) :
    iter_(iter), iter_end_(iter_end), pt_(), firstX_(), orient_(HORIZONTAL) {
    if(iter_ != iter_end_) {
      firstX_ = *iter_;
      x(pt_, firstX_);
      ++iter_;
      if(iter_ != iter_end_) {
        y(pt_, *iter_);
      }
    }
  }
  //use bitwise copy and assign provided by the compiler
  inline iterator_compact_to_points& operator++() {
    iterator_type prev_iter = iter_;
    ++iter_;
    if(iter_ == iter_end_) {
      if(x(pt_) != firstX_) {
        iter_ = prev_iter;
        x(pt_, firstX_);
      }
    } else {
      set(pt_, orient_, *iter_);
      orient_.turn_90();
    }
    return *this;
  }
  inline const iterator_compact_to_points operator++(int) {
    iterator_compact_to_points tmp(*this);
    ++(*this);
    return tmp;
  }
  inline bool operator==(const iterator_compact_to_points& that) const {
    if (iter_ == iter_end_) {
      return iter_ == that.iter_;
    }
    return (iter_ == that.iter_) && (x(pt_) == x(that.pt_));
  }
  inline bool operator!=(const iterator_compact_to_points& that) const {
    if (iter_ == iter_end_) {
      return iter_ != that.iter_;
    }
    return (iter_ != that.iter_) || (x(pt_) != x(that.pt_));
  }
  inline reference operator*() const { return pt_; }
};
}
}
#endif

/* iterator_compact_to_points.hpp
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
*/