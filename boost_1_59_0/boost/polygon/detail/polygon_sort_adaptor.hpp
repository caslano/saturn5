/*
  Copyright 2008 Intel Corporation

  Use, modification and distribution are subject to the Boost Software License,
  Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
*/
#ifndef BOOST_POLYGON_SORT_ADAPTOR_HPP
#define BOOST_POLYGON_SORT_ADAPTOR_HPP
#ifdef __ICC
#pragma warning(disable:2022)
#pragma warning(disable:2023)
#endif

#include <algorithm>

//! @brief polygon_sort_adaptor default implementation that calls std::sort
namespace boost {
  namespace polygon {

    template<typename iterator_type>
    struct dummy_to_delay_instantiation{
      typedef int unit_type; // default GTL unit
    };

    //! @brief polygon_sort_adaptor default implementation that calls std::sort
    template<typename T>
    struct polygon_sort_adaptor {
      //! @brief wrapper that mimics std::sort() function and takes
      // the same arguments
      template<typename RandomAccessIterator_Type>
      static void sort(RandomAccessIterator_Type _First,
                       RandomAccessIterator_Type _Last)
      {
         std::sort(_First, _Last);
      }
      //! @brief wrapper that mimics std::sort() function overload and takes
      // the same arguments
      template<typename RandomAccessIterator_Type, typename Pred_Type>
      static void sort(RandomAccessIterator_Type _First,
                       RandomAccessIterator_Type _Last,
                       const Pred_Type& _Comp)
      {
         std::sort(_First, _Last, _Comp);
      }
    };

    //! @brief user level wrapper for sorting quantities
    template <typename iter_type>
    void polygon_sort(iter_type _b_, iter_type _e_)
    {
      polygon_sort_adaptor<typename dummy_to_delay_instantiation<iter_type>::unit_type>::sort(_b_, _e_);
    }

    //! @brief user level wrapper for sorting quantities that takes predicate
    // as additional argument
    template <typename iter_type, typename pred_type>
    void polygon_sort(iter_type _b_, iter_type _e_, const pred_type& _pred_)
    {
      polygon_sort_adaptor<typename dummy_to_delay_instantiation<iter_type>::unit_type>::sort(_b_, _e_, _pred_);
    }



  } // namespace polygon
}   // namespace boost
#endif

/* polygon_sort_adaptor.hpp
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
*/