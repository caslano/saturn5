/*
  Copyright 2008 Intel Corporation

  Use, modification and distribution are subject to the Boost Software License,
  Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
*/
#ifndef BOOST_POLYGON_POLYGON_DATA_HPP
#define BOOST_POLYGON_POLYGON_DATA_HPP
namespace boost { namespace polygon{
struct polygon_concept;
template <typename T>
class polygon_data {
public:
  typedef polygon_concept geometry_type;
  typedef T coordinate_type;
  typedef typename std::vector<point_data<coordinate_type> >::const_iterator iterator_type;
  typedef typename coordinate_traits<T>::coordinate_distance area_type;
  typedef point_data<T> point_type;

  inline polygon_data() : coords_() {} //do nothing default constructor

  template<class iT>
  inline polygon_data(iT input_begin, iT input_end) : coords_(input_begin, input_end) {}

  template<class iT>
  inline polygon_data& set(iT input_begin, iT input_end) {
    coords_.clear();  //just in case there was some old data there
    coords_.insert(coords_.end(), input_begin, input_end);
    return *this;
  }

  // copy constructor (since we have dynamic memory)
  inline polygon_data(const polygon_data& that) : coords_(that.coords_) {}

  // assignment operator (since we have dynamic memory do a deep copy)
  inline polygon_data& operator=(const polygon_data& that) {
    coords_ = that.coords_;
    return *this;
  }

  template <typename T2>
  inline polygon_data& operator=(const T2& rvalue);

  inline bool operator==(const polygon_data& that) const {
    if(coords_.size() != that.coords_.size()) return false;
    for(std::size_t i = 0; i < coords_.size(); ++i) {
      if(coords_[i] != that.coords_[i]) return false;
    }
    return true;
  }

  inline bool operator!=(const polygon_data& that) const { return !((*this) == that); }

  // get begin iterator, returns a pointer to a const Unit
  inline iterator_type begin() const { return coords_.begin(); }

  // get end iterator, returns a pointer to a const Unit
  inline iterator_type end() const { return coords_.end(); }

  inline std::size_t size() const { return coords_.size(); }

public:
  std::vector<point_data<coordinate_type> > coords_;
};

}
}
#endif

/* polygon_data.hpp
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
*/