/*
  Copyright 2008 Intel Corporation

  Use, modification and distribution are subject to the Boost Software License,
  Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
*/
#ifndef BOOST_POLYGON_RECTANGLE_DATA_HPP
#define BOOST_POLYGON_RECTANGLE_DATA_HPP

#include "isotropy.hpp"
//interval
#include "interval_data.hpp"

namespace boost { namespace polygon{

template <typename T>
class rectangle_data {
public:
  typedef T coordinate_type;
  typedef interval_data<T> interval_type;
  inline rectangle_data():ranges_() {}
  inline rectangle_data(T xl, T yl, T xh, T yh):ranges_() {
    if(xl > xh) std::swap(xl, xh);
    if(yl > yh) std::swap(yl, yh);
    ranges_[HORIZONTAL] = interval_data<T>(xl, xh);
    ranges_[VERTICAL] = interval_data<T>(yl, yh);
  }
  template <typename interval_type_1, typename interval_type_2>
  inline rectangle_data(const interval_type_1& hrange,
                        const interval_type_2& vrange):ranges_() {
    set(HORIZONTAL, hrange); set(VERTICAL, vrange); }

  inline rectangle_data(const rectangle_data& that):ranges_() { (*this) = that; }
  inline rectangle_data& operator=(const rectangle_data& that) {
    ranges_[0] = that.ranges_[0]; ranges_[1] = that.ranges_[1]; return *this;
  }
  template <typename T2>
  inline rectangle_data& operator=(const T2& rvalue);

  template <typename T2>
  inline bool operator==(const T2& rvalue) const;
  template <typename T2>
  inline bool operator!=(const T2& rvalue) const { return !((*this) == rvalue); }

  inline interval_data<coordinate_type> get(orientation_2d orient) const {
    return ranges_[orient.to_int()]; }
  inline coordinate_type get(direction_2d dir) const {
    return ranges_[orientation_2d(dir).to_int()].get(direction_1d(dir));
  }
  inline void set(direction_2d dir, coordinate_type value) {
    return ranges_[orientation_2d(dir).to_int()].set(direction_1d(dir), value);
  }
  template <typename interval_type_1>
  inline void set(orientation_2d orient, const interval_type_1& interval);
private:
  interval_data<coordinate_type> ranges_[2];
};


}
}
#endif

/* rectangle_data.hpp
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
*/