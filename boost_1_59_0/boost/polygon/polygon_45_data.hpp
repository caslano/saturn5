/*
  Copyright 2008 Intel Corporation

  Use, modification and distribution are subject to the Boost Software License,
  Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
*/
#ifndef BOOST_POLYGON_POLYGON_45_DATA_HPP
#define BOOST_POLYGON_POLYGON_45_DATA_HPP
#include "isotropy.hpp"
namespace boost { namespace polygon{
struct polygon_45_concept;
template <typename T> class polygon_data;
template <typename T>
class polygon_45_data {
public:
  typedef polygon_45_concept geometry_type;
  typedef T coordinate_type;
  typedef typename std::vector<point_data<coordinate_type> >::const_iterator iterator_type;
  typedef typename coordinate_traits<T>::coordinate_distance area_type;
  typedef point_data<T> point_type;

  inline polygon_45_data() : coords_() {} //do nothing default constructor

  template<class iT>
  inline polygon_45_data(iT input_begin, iT input_end) : coords_(input_begin, input_end) {}

  template<class iT>
  inline polygon_45_data& set(iT input_begin, iT input_end) {
    coords_.clear();  //just in case there was some old data there
    coords_.insert(coords_.end(), input_begin, input_end);
    return *this;
  }

  // copy constructor (since we have dynamic memory)
  inline polygon_45_data(const polygon_45_data& that) : coords_(that.coords_) {}

  // assignment operator (since we have dynamic memory do a deep copy)
  inline polygon_45_data& operator=(const polygon_45_data& that) {
    coords_ = that.coords_;
    return *this;
  }

  template <typename T2>
  inline polygon_45_data& operator=(const T2& rvalue);

  inline bool operator==(const polygon_45_data& that) const {
    if(coords_.size() != that.coords_.size()) return false;
    for(std::size_t i = 0; i < coords_.size(); ++i) {
      if(coords_[i] != that.coords_[i]) return false;
    }
    return true;
  }

  inline bool operator!=(const polygon_45_data& that) const { return !((*this) == that); }

  // get begin iterator, returns a pointer to a const Unit
  inline iterator_type begin() const { return coords_.begin(); }

  // get end iterator, returns a pointer to a const Unit
  inline iterator_type end() const { return coords_.end(); }

  inline std::size_t size() const { return coords_.size(); }

public:
  std::vector<point_data<coordinate_type> > coords_;
};


}
}
#endif

/* polygon_45_data.hpp
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
*/