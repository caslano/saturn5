/* Copyright 2003-2013 Joaquin M Lopez Munoz.
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * See http://www.boost.org/libs/multi_index for library home page.
 */

#ifndef BOOST_MULTI_INDEX_TAG_HPP
#define BOOST_MULTI_INDEX_TAG_HPP

#if defined(_MSC_VER)
#pragma once
#endif

#include <boost/config.hpp> /* keep it first to prevent nasty warns in MSVC */
#include <boost/multi_index/detail/no_duplicate_tags.hpp>
#include <boost/mpl/identity.hpp>
#include <boost/mpl/transform.hpp>
#include <boost/mpl/vector.hpp>
#include <boost/preprocessor/facilities/intercept.hpp> 
#include <boost/preprocessor/repetition/enum_binary_params.hpp> 
#include <boost/preprocessor/repetition/enum_params.hpp> 
#include <boost/static_assert.hpp>
#include <boost/type_traits/is_base_and_derived.hpp>

/* A wrapper of mpl::vector used to hide MPL from the user.
 * tag contains types used as tag names for indices in get() functions.
 */

/* This user_definable macro limits the number of elements of a tag;
 * useful for shortening resulting symbol names (MSVC++ 6.0, for instance,
 * has problems coping with very long symbol names.)
 */

#if !defined(BOOST_MULTI_INDEX_LIMIT_TAG_SIZE)
#define BOOST_MULTI_INDEX_LIMIT_TAG_SIZE BOOST_MPL_LIMIT_VECTOR_SIZE
#endif

#if BOOST_MULTI_INDEX_LIMIT_TAG_SIZE<BOOST_MPL_LIMIT_VECTOR_SIZE
#define BOOST_MULTI_INDEX_TAG_SIZE BOOST_MULTI_INDEX_LIMIT_TAG_SIZE
#else
#define BOOST_MULTI_INDEX_TAG_SIZE BOOST_MPL_LIMIT_VECTOR_SIZE
#endif

namespace boost{

namespace multi_index{

namespace detail{

struct tag_marker{};

template<typename T>
struct is_tag
{
  BOOST_STATIC_CONSTANT(bool,value=(is_base_and_derived<tag_marker,T>::value));
};

} /* namespace multi_index::detail */

template<
  BOOST_PP_ENUM_BINARY_PARAMS(
    BOOST_MULTI_INDEX_TAG_SIZE,
    typename T,
    =mpl::na BOOST_PP_INTERCEPT) 
>
struct tag:private detail::tag_marker
{
  /* The mpl::transform pass produces shorter symbols (without
   * trailing mpl::na's.)
   */

  typedef typename mpl::transform<
    mpl::vector<BOOST_PP_ENUM_PARAMS(BOOST_MULTI_INDEX_TAG_SIZE,T)>,
    mpl::identity<mpl::_1>
  >::type type;

  BOOST_STATIC_ASSERT(detail::no_duplicate_tags<type>::value);
};

} /* namespace multi_index */

} /* namespace boost */

#undef BOOST_MULTI_INDEX_TAG_SIZE

#endif

/* tag.hpp
+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
*/