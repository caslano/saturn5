/* Copyright 2003-2013 Joaquin M Lopez Munoz.
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * See http://www.boost.org/libs/multi_index for library home page.
 */

#ifndef BOOST_MULTI_INDEX_INDEXED_BY_HPP
#define BOOST_MULTI_INDEX_INDEXED_BY_HPP

#if defined(_MSC_VER)
#pragma once
#endif

#include <boost/config.hpp> /* keep it first to prevent nasty warns in MSVC */
#include <boost/mpl/vector.hpp>
#include <boost/preprocessor/cat.hpp>
#include <boost/preprocessor/control/expr_if.hpp>
#include <boost/preprocessor/repetition/enum.hpp>
#include <boost/preprocessor/repetition/enum_params.hpp> 

/* An alias to mpl::vector used to hide MPL from the user.
 * indexed_by contains the index specifiers for instantiation
 * of a multi_index_container.
 */

/* This user_definable macro limits the number of elements of an index list;
 * useful for shortening resulting symbol names (MSVC++ 6.0, for instance,
 * has problems coping with very long symbol names.)
 */

#if !defined(BOOST_MULTI_INDEX_LIMIT_INDEXED_BY_SIZE)
#define BOOST_MULTI_INDEX_LIMIT_INDEXED_BY_SIZE BOOST_MPL_LIMIT_VECTOR_SIZE
#endif

#if BOOST_MULTI_INDEX_LIMIT_INDEXED_BY_SIZE<BOOST_MPL_LIMIT_VECTOR_SIZE
#define BOOST_MULTI_INDEX_INDEXED_BY_SIZE \
  BOOST_MULTI_INDEX_LIMIT_INDEXED_BY_SIZE
#else
#define BOOST_MULTI_INDEX_INDEXED_BY_SIZE BOOST_MPL_LIMIT_VECTOR_SIZE
#endif

#define BOOST_MULTI_INDEX_INDEXED_BY_TEMPLATE_PARM(z,n,var) \
  typename BOOST_PP_CAT(var,n) BOOST_PP_EXPR_IF(n,=mpl::na)

namespace boost{

namespace multi_index{

template<
  BOOST_PP_ENUM(
    BOOST_MULTI_INDEX_INDEXED_BY_SIZE,
    BOOST_MULTI_INDEX_INDEXED_BY_TEMPLATE_PARM,T)
>
struct indexed_by:
  mpl::vector<BOOST_PP_ENUM_PARAMS(BOOST_MULTI_INDEX_INDEXED_BY_SIZE,T)>
{
};

} /* namespace multi_index */

} /* namespace boost */

#undef BOOST_MULTI_INDEX_INDEXED_BY_TEMPLATE_PARM
#undef BOOST_MULTI_INDEX_INDEXED_BY_SIZE

#endif

/* indexed_by.hpp
r4if0oMsVwhdPmFjChSPrryfIgRMkiGe31bR8x+bF9AD9ZDPRRw90nfvXilKHFskPmiFgDxL1PlGJtzDtOmYY29UvVmAdLf5zV88TslgQ/yqgrr6ztn1aiytWe/rUkW1NQOsO8OvEnstxmpfLZEytFqZD2iDh+cve1c9vveaZuWLtEKkvzOCO+eq0dJY+SmF6MQyuAlD9yfs2wo7exTS9ApmRiJ79bpGtMfuPum+vXQWg1Xo1CZfDsYB2qgxcut34tGWoGT52jx9ZapsyR9J/0o9CrCmijE9TNfwyF9YM7QZI3K5MotVnEkP23NWIOAk1+nzRB19cu/qETjKGykVfuWoM0Jnris6l8ez97Jr09+ViD8OMnbiHtsfR6u+PwptQ75T9R+v4oZTwvgBTvUaBUfJ3IjzWqw605W/VvdsXN6b0q8UbcWEWW77VCTiFCQnZkN2Scj5b12GSnQv5M5P7J0ky0TMs4yz7gjRC16Lk+rmbDHma3YTQTKOyZiHKpPGJhM5z3CnPsH7aDK1qpjvVfTXge9LxA2cG1OzhjI2doY1uMCESRfEVWzlWC5XQAYjmvzALxNVGOWbkL+zRx8zom6EZuaUXpHK8RFmPWBPaCbQGlGw3B4Mv4noOi4OCVg+EH5DUG2RBYmOO99jmwGSGYGgmjwy5Ac7uiL2ptaduJQivGwYbd7KkkETEz9eqyeHNYHB59Z+Vtp/esFI2GHjfTF1OtO+nVP5x1WF+6CNMUKpQRlXQgRcYx4BhCk/2x+L/7nrO0LkQBnllRdQawiTwxmRXpqz54DY7j51zgEnk+0yVdHCdFw1hrqSubl3O7xWh50pPESA6SXx/ya6D/aX8x7GBmY8NEm9MZ8qUMTF3PVi6v8bE4jPnvcJuyVPsyTN1qePvMN12k6JXziXGY8jK5lFiiKByYwizgg26P/U/2k05ZZ7ygZF0jMD+w9Yg+8OBzQcgNjtFHCoTsz2gvjzaXKd9110f9Crj3p/pwuw2FWg+2FIC3U1UUCWgUl1Hq6mtZoTzFigwl51Rga+5hCjga/WrgT0d5XO/YdvFafOKGxZQ4RJxDFMJ3EgH3tq6Y3OoTK2zkFyAcg7PSAplpouIoSW12xI+r3t3lY7DbSmF2OrH8m97XMfer7V8LJWUDZubvaieiCy3YueJmGRqagd6UscgB4w15ncyIggmSqLwxBQP7O25drvDTMhNKbDrLsRnCHIiM60v/PrlL5is7QQ2H5OZP0YWXGVEtw1ABzH6U5AMbElKw6CpP8w9e2WUsTv/BqjE3Dw7BE4XW1ucjBRiZi5TUdzbVrrIaNLw8LSpFaopFRWs00U8laZLQau6+VEwXR46Es1joAxrR5IBFqeUG3+LNv3YHhxTPvF08BnpwJ4enQd8QXud6EsWe/wS1kDIkUS+gLZiHlFVoBkVYRmnye9PddF8BCKLqfptR9mO4c/DqdnxNSAOksR+vC479xJsf4qPyXxNkg/8J6Lc9CtOhp+wvABrjXd3hBwFg+yO835d/MpQgQZafHkNkRu1DCvcqFkvrUzx3k+fPn2TUTVzqwul/7Hp3RyzhQQiIaDlQedD6PcCsGEURm/w5yEFBrDnowljiJLDqYLzOIo3U9b133N9PR2U99yLbZJ5MqJNbNI6QCbr1GQpTFYz500VPLx9wPk9nX0Vji51VrXW1Et0pcO4ea91NW5ra85K7GUNqpHZJjCGVCB0xdb4cKCeyrwFu+Fa2uF9r8NZD0Z0Dn0oexl/r56LtnfryOeqN3d5vDxh4jJsfv5UPstjOoP2F+noHFN5A+4KxCFSDL4Pi9+yREAgRld2jwBPv5FS4EaTkgJl2saLP2stskz+WK96UPRARfquXOBaqReUw3zXNYsc+bffRswrnHuYfcTU6n0ILM73+BBwgUQ/WiFFBv+Yy3C2R61Rq/u6hGgZOye2kglXXWKNTOLPLFeQ3594M7/dKwmEPza1df7M99PZEMf8ahEGcxWMGLziHkYKt+Mbug5KESd4KUURwXPM9q3VouAQqZK3DGPBNq1rewwP7N/ZYT8Dwc0AXrxIlQwMKPcrttgwoVmm1ydrhHtdlJGD1iNT9LMZU9Avo0/83IJ57+ophLeWZewcILpB3UsgyMz9tFbv1/5hReA94Uqf+fYlVyjNb3ODjR+wwSEbhvfA8F8hXGcAPV1x/j8yTXEeTZHPoMzTX7wiogikBQH8PRstn7nmY8yS8BUG1pG+GysrErgiH/M/rl86iuPiN7eUTVAiDyeXhWqb43MZ+t4m+VoPKNC2/uL7qJsatgjc1+PCxeO7oXV3oyV2vRrHhnAkSISO0S71S7dT+DTk3s/3GmuL/p1Zbfa/RTSIfyiaOSM4ltrxvNjgBNND646rnjQed8HDi8Udjl1mK46q215whUy+5oF1ZwCBPZVqasRQZIaHuOzR8U3uVxf5QJstaNKtK9Efal68+JYqtPXWYf9mHacoqpAGYDVeH60CoDVaKu3aKDqYfYRaa4w9lWOT7tMUbkJaeoBghsyWmVEdHm9ZwHsLUlrBD+i/8ZSQpka9z5oWyRq0/eNksOY6sUzK1fruXL5rdj3PkufNdggSl+FbxaFojfIdyB/5obkHNNjgFqhiK2W786yAVAGtqC0KuEOogyvQzgLPKOio2/ykph5IZxQ644b5yKN84TIIzw6s6nYbslXrABEMa5Fg7eTx3g0Thvkruu5P0I7rZdp/W6TsCb/d/gb5uWIAXIJ4vTtFDXK0/KK+Jg8y0m6QXZyEGlV13h+V28VR9BP7C0uTFqtFyinTCa3DcCxwEpqlk32mrtsgFStHLi3mZ+XqpO2YPH+Y8FBu5N27rj/nl5REEJWfP3bd8x3T/oJ/0CDHWbSTREkK2+o7BqnE9E9c9MMZMVxdTDFKk17zsOLGQhqT+jutYyngcm52wh+whMJWcD7lXc7ZqzruspU2hzNsFZ+cBElWgpTcDuMqSXI4/BarMXgKks1WWmyKD1RDlW36mjQLicgXeee7hUZFiY/0Pr0+iQuC2BiaCA3rZkuuc89rSWWfBeOlAGymr7TzLr628HcQJu3g0Th8LgOrjkbZ8O9V9xPHXXAlUCjtu096PK2c7d1mPUx1gQr7WeF4fYc1/O+VvE6OgeHJTw1+q4nJ6er5fHGCbx7YATza8x12cN4WlEe0/GR3aQIzT1ianL7VDN7p9FsPuhysMPgt/bNBuF3y0ni+9lHdNF25/eBa+8Wca46O27uPBMc1YfNd1/7Wa92LlazWKNhsXpLTCNniDWun1oMc3JCkFWfiqzbR4+XGy0u9vYatVCeBX/pz9cVBzYzzQo5z32wL65+iFx1gOXNkmHrBYVsAFT7cuDLlg9TFmF//G31X1ArORoY+Cvfz88kjsblQHP/Te/WXhLs46G6AZ/7UIZS7bYFWMRLVnWAo3izRjJPt3DN6BVOePoazWXnILh4bobAjepgkyMPD3ac96gb8dr5R3SHmYFUpKSmGZiYp9OojwkGvvaryfsqQu+QmvOrjmk2ve3jcoo/emC/zi8e1Lb/VmkTo4q3WBY+VRTj/NsuYfRqdF/0L347DNr7U9/8KECugE+75h52vuhQaw6J9uq6ZhLq4dVam1F8wNLawjMsqSGg4yG4bcUQsdehgRWP4b5X7Tx7XPbQNIw5fKmScdl7i/rijY9BpfEJ34BdB8tY/yDz47CkT1rvr/p6SWnH+z80rlc0XL8rCb29RRWm+dIn6/zpY31aJAbFGyIBoGnV6LFZHyELQBrOoiS0xMlJ8sxMFkQx/R7NeN4UWSMrNk3rnTMLPOWYVtzT+V/zJeM4rJrINhlQHNW5wH9sHZ/J+iWD6kBpGyTeHZRpVV6TyJdpJj9KjaO4rLN9rrBM6phKNV6MDz2P0QOr30bNfu17ctKVzIA+20RPr0QA0HmGKF5i6NIaLnwE+Uy8Y2rjkdf4Ga0DBGV9QL+wXaPRngL0rQLBZExgOpkJxmJbB30Cqu1u66wrYpC/FDeYTZvipsuBsSbpeGByF4ozgj5qEdkARN3B34GOFDtXCANfyWFzIN6DcQE8qUQeOLIJ4pP8/bP3fd9onGDSX6JKoEe2AmCn9dNrfT+IpdXbCpKQXNQofilKfaDw+2AZLeuofsxOp9TYWprSBu9W9eY9wJF9tK2yjY0BZ6/pfeEDobv/iXV0jaDoo0iv+2hFktu4jwVnorly8BouslrKWLJJnxJcMMUEdoiVkRp0EC765Fo+AqQoWXTmoo6GRIIefv/OhVV8CmahddMBJWGRK1ESBMdfPZZcmidsxOhSEyGwxGtgXorHS5hP+GxDwktWY3mrrHLKu+GiOslNZ0SbEPKJiNfpvU0Oegwy3dUAU95BcrhAOVJAjriIOcwUakAZA3G2Zm0GUgnkKT7WW0llHQL9NNb7guf9HqOfSs9btOJ95FRVpAXotU4rpmI7uBLs+pw6GdMYVWL1QMVm8HeUdvj703/g8iyhcPz4k4ZQnvWO00+OdXgUPFPIGFbPGfqRrAgn7a1+Czj2d9LxhF0TKa7zHkpiKgbDhEQ0K12UnIUW99D7nKWZJYnWNW0CEEmYBQHO1pr7QcoIm7JrLy90WFZ4PtOeWq8BnvxcvTywsz2c1Z2IUEY8/3py/dTYfhTSIrSJ14M1ac0rFDLLoWkaY2AUVuOKwf6XJCwYFKuxy59O0f1d5pNJSnWzW4bGoWa5IbcoF07JwP1lpVFBSUsCu0TfTpv71F2/4Z9Xav84pvRGCQ5gCDZFpgyQECUlWj1nExUv2vyzG9ialIosGJT2kabGJxsI/uHS1GKC8RkxMnIQdYAFPKuscv7Ou1DgI1MLt9mwyEjjnX3UJYkJvTuwjFJBLB1uquSPCMMeIOzFTbvQyLe9sGz/eGB7E/D61kabknwC+Pgdxb6EcG/onqRsVcFOb8yZjCZkK35WWOuBlXLWEeiPZaoWAFhHIGBHeu/x5bNYZErO+V/DOnNFdVUz7MxaybUS0wwVm3qz0lxm1piex0HyR8ip2WG3N4/Er06c2TZ/PcLXDCBPJyIHrUE0AC+tUTSHpq8fg3zb+zIWMyB8XX654M7X7K/QzD5+iJqpS5ylFwF6JZeZjQNTbx3z2Ay4ghk6dp/gHPN3t2AXOmmGKLxZpbKXNVCH2ikvmvaXieHs9PQ2ettPQLJBOgzOXfv0nt8vWOekQa9J3G63endFzwkjrALa4bJplkVTkwar7Yu5I8oEDP5El4YlzTNDFu5UQllX+E60F9/kL1tJaStl3CmPr5SOeRqTU5hSb9ezNsD3pjKn+UUrTXj6yP4ryWPAl8K6E/NDAM2i9dXl1noJ4bpSY+NafsZnTbTblEiCKSs7zUr1yYIQWys17B5nsKq7jvvHS0yd6SS47JUSSK67DuNTH7AdnauPKfgG1BJON2j7wgsRg95HCIkYPdwkbxWGIEP4cxajZNol8whvVyuQ7jkXkF3xBRjS0cp9rNJauqavEn0a8xT/4lRW2KUWpGHLmOubGczXydYTRunjOHYfG4hv5FrhbfE0fTJ8WBusGtZTGKNnuKX6jRR1LwQ9804E3uSXlUK2gW2efB1R7EjxQQNRENj4eEpdO7IUtNLTONlyjzEG5xkD4EqYTgVYATRbwTJ99xGoNCSMNh/peS24nMfanLOcZqVTqMfa/dYG04y3pwTuDswlXPTKtO2ABiqR397SHiXnZcm4ibUwIkMEH+mvLiNIXipu4EeeLyNoGgt+FfxMTM6eBkf9Ska4BGVtJEzSu3nDP/kfyHbVroMhd5eSWsum1F9Mku7lD4IwXb59cELYutJ151AmU33uWXVh9VGuEtEF1PnjTDXK7u5uv6L0xYedzttODDNkRG+iI+My1wANLPLTHMFVzZ/5d8+neCcSpuhRZrdBToRvYWt9ynC7zwpMpV2bozD8Gftg9LeHxuO4HH78Cq35FiAF3z00a4LsIjTrjg8LDaT4ziJw52Nxe6uPkOfig8Kti736iK0LxBCKZN3JMbFkOGeALqoJqkpQr3kXn4HsUkmft6kaC6qBVRkfd4IUdLjg1BwJt/dK/GylCaurVfOSgFq/G4G8RvKNx83gVZ5A5MXTJZLSIrRu2G6Gqlo1ragwRT1ZNG0EOBB11HY5exUAOUqCUevF4nK6wnKNsUytinnXPULnszt00Cb9K7VFFiVWNjWjyx8sKec58xP9cqQ+5WdFUtjBg5rR9dNKm9Oy8BdhpQTa2LK9MmktDD1/Z6PEm/TZNaIzF1SvVNtpypeHHKoFEBq2hhHmdDfMnFiQPrvLmpTUczsJC7wMQmcQFwxW6Zi0ONylGeksRfJnICqRW9x0pNnL9PQzwFCC/NHLaKbfPXlSFaimng0aMMOdqhK0Er0YJdTTLSpGPYECwmh2u7SGPMt3MagJoXio3suM+mcZojXc1mGKmFTC/4DCSV1FUAkvMJAqbylt1dhK7sUy5NqXaka4j4Ncn3MejPaCzvkcGdpBDtH+vVo9eRG0qwj+Th05YSQP3TGJxuI3P9MIsTO4yKapoLFxhwlvHCkIq/vDb3W6JVzH630TQoEef89uzLvtizzgf5EVRF5DZgBA50d95XIHYPOfpNxDBbjTjqCq9+uRHkMb2N2n/Ty5sSqjy0CSCVA8py88u85Hx/aX72fWwpqOhVabf48AMLfkIy7tgcDyTc5z9AjxyO5+ysl/8z2pjChsW55Z8T6J6joap1cs1sqZo8YvpQD3exIKPE+moNiLpUXan+64rnuD/0P5z21I6DJXWkKIm2NoZeSADIlnSSMJzuCFFyURMb2s/p5cuUxVLuugDSN+q8BZXMU8KqrqUPEeAObEddHoGP+OaK6gTM1LeGoMrVKazeW9WZRbt2u4y+EyoON9nUI+i/0cgqIWHcFjxzRxr/3l+sV49ZGE70KnOz8i7E4xrF/8Fc5+v/c/SxSzEigEtsZJROiqtmR5hJ4k/3lvZInIpBVgq3b1E/ibVWQHbKt8rRzmBdaIFb0oH8tmXkaB8mqMJC+ipo3kGDZ0Rg4t/tDzO/6FQdvaObGs/06TnWiYImbUeUKHmGBLDGAwdMjvE5wX6Zc/W128pjHqQ+kUggCoUvr1dbkdgANBd1D8a5PshD2q0vQe8oJxQ0X+GaOFxFqtwHz58Y2EqfnXyiGz0/DV8Im6ta9JzSgsR672y13UpGfnAnW1PmMCebUqMrgliLdLW6nt20rdL9CoEtKkDdRbwVZA2w0f4iACBqDhPN2mYEJozQHa0vOPms7p9L1u8A0pe/3j19ioa4zUEWhVZ3KRXcZqZTfgqi+8FPF9v7iDckX33M6WeJGaIXqTUW/639/WBRXUij/n+uKTqpGGIwKA3Ggh+WpF8bOMjwotL42ab7lWsXsr5lZM/DLv0Qyg6E1NiIQ+7FIz1pCPhXqZQUpLUxeMWjKtaM92AbiXemzlt8OrfAB5YPpSaXw2EOpgnQ1PNWUv/eD5sVoqy7Sj+LBnjisA/EZWrwfQCyPV/zDfgMbyEal19rpU7B7dtaKhn9KmrB7kqqwZr3WLlsFMtM1f79gqLxmyt7BYlDxzOUICYg+aRLWy6UOK9XWGlTMlAmxMY/k4b37B+5e+Fg//f8C+xgfeW/m4w28xtzUMScIf5YBGy8xl
*/