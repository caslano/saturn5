/* Copyright 2003-2022 Joaquin M Lopez Munoz.
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * See http://www.boost.org/libs/multi_index for library home page.
 */

#ifndef BOOST_MULTI_INDEX_DETAIL_ARCHIVE_CONSTRUCTED_HPP
#define BOOST_MULTI_INDEX_DETAIL_ARCHIVE_CONSTRUCTED_HPP

#if defined(_MSC_VER)
#pragma once
#endif

#include <boost/config.hpp> /* keep it first to prevent nasty warns in MSVC */
#include <boost/core/no_exceptions_support.hpp>
#include <boost/core/noncopyable.hpp>
#include <boost/serialization/serialization.hpp>
#include <boost/type_traits/aligned_storage.hpp>
#include <boost/type_traits/alignment_of.hpp> 

namespace boost{

namespace multi_index{

namespace detail{

/* constructs a stack-based object from a serialization archive */

template<typename T>
struct archive_constructed:private noncopyable
{
  template<class Archive>
  archive_constructed(Archive& ar,const unsigned int version)
  {
    serialization::load_construct_data_adl(ar,&get(),version);
    BOOST_TRY{
      ar>>get();
    }
    BOOST_CATCH(...){
      (&get())->~T();
      BOOST_RETHROW;
    }
    BOOST_CATCH_END
  }

  template<class Archive>
  archive_constructed(const char* name,Archive& ar,const unsigned int version)
  {
    serialization::load_construct_data_adl(ar,&get(),version);
    BOOST_TRY{
      ar>>serialization::make_nvp(name,get());
    }
    BOOST_CATCH(...){
      (&get())->~T();
      BOOST_RETHROW;
    }
    BOOST_CATCH_END
  }

  ~archive_constructed()
  {
    (&get())->~T();
  }

#include <boost/multi_index/detail/ignore_wstrict_aliasing.hpp>

  T& get(){return *reinterpret_cast<T*>(&space);}

#include <boost/multi_index/detail/restore_wstrict_aliasing.hpp>

private:
  typename aligned_storage<sizeof(T),alignment_of<T>::value>::type space;
};

} /* namespace multi_index::detail */

} /* namespace multi_index */

} /* namespace boost */

#endif

/* archive_constructed.hpp
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
*/