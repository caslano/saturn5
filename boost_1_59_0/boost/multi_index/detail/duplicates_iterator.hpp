/* Copyright 2003-2018 Joaquin M Lopez Munoz.
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * See http://www.boost.org/libs/multi_index for library home page.
 */

#ifndef BOOST_MULTI_INDEX_DETAIL_DUPLICATES_ITERATOR_HPP
#define BOOST_MULTI_INDEX_DETAIL_DUPLICATES_ITERATOR_HPP

#if defined(_MSC_VER)
#pragma once
#endif

#include <boost/config.hpp> /* keep it first to prevent nasty warns in MSVC */
#include <iterator>

namespace boost{

namespace multi_index{

namespace detail{

/* duplicates_operator is given a range of ordered elements and
 * passes only over those which are duplicated.
 */

template<typename Node,typename Predicate>
class duplicates_iterator
{
public:
  typedef typename Node::value_type        value_type;
  typedef typename Node::difference_type   difference_type;
  typedef const typename Node::value_type* pointer;
  typedef const typename Node::value_type& reference;
  typedef std::forward_iterator_tag        iterator_category;

  duplicates_iterator(Node* node_,Node* end_,Predicate pred_):
    node(node_),begin_chunk(0),end(end_),pred(pred_)
  {
    advance();
  }

  duplicates_iterator(Node* end_,Predicate pred_):
    node(end_),begin_chunk(end_),end(end_),pred(pred_)
  {
  }

  reference operator*()const
  {
    return node->value();
  }

  pointer operator->()const
  {
    return &node->value();
  }

  duplicates_iterator& operator++()
  {
    Node::increment(node);
    sync();
    return *this;
  }

  duplicates_iterator operator++(int)
  {
    duplicates_iterator tmp(*this);
    ++(*this);
    return tmp;
  }

  Node* get_node()const{return node;}

private:
  void sync()
  {
    if(node!=end&&pred(begin_chunk->value(),node->value()))advance();
  }

  void advance()
  {
    for(Node* node2=node;node!=end;node=node2){
      Node::increment(node2);
      if(node2!=end&&!pred(node->value(),node2->value()))break;
    }
    begin_chunk=node;
  }

  Node*     node;
  Node*     begin_chunk;
  Node*     end;
  Predicate pred;
};

template<typename Node,typename Predicate>
bool operator==(
  const duplicates_iterator<Node,Predicate>& x,
  const duplicates_iterator<Node,Predicate>& y)
{
  return x.get_node()==y.get_node();
}

template<typename Node,typename Predicate>
bool operator!=(
  const duplicates_iterator<Node,Predicate>& x,
  const duplicates_iterator<Node,Predicate>& y)
{
  return !(x==y);
}

} /* namespace multi_index::detail */

} /* namespace multi_index */

} /* namespace boost */

#endif

/* duplicates_iterator.hpp
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
*/