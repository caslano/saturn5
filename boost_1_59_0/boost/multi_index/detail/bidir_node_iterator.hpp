/* Copyright 2003-2018 Joaquin M Lopez Munoz.
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * See http://www.boost.org/libs/multi_index for library home page.
 */

#ifndef BOOST_MULTI_INDEX_DETAIL_BIDIR_NODE_ITERATOR_HPP
#define BOOST_MULTI_INDEX_DETAIL_BIDIR_NODE_ITERATOR_HPP

#if defined(_MSC_VER)
#pragma once
#endif

#include <boost/config.hpp> /* keep it first to prevent nasty warns in MSVC */
#include <boost/operators.hpp>

#if !defined(BOOST_MULTI_INDEX_DISABLE_SERIALIZATION)
#include <boost/serialization/nvp.hpp>
#include <boost/serialization/split_member.hpp>
#endif

namespace boost{

namespace multi_index{

namespace detail{

/* Iterator class for node-based indices with bidirectional
 * iterators (ordered and sequenced indices.)
 */

template<typename Node>
class bidir_node_iterator:
  public bidirectional_iterator_helper<
    bidir_node_iterator<Node>,
    typename Node::value_type,
    typename Node::difference_type,
    const typename Node::value_type*,
    const typename Node::value_type&>
{
public:
  /* coverity[uninit_ctor]: suppress warning */
  bidir_node_iterator(){}
  explicit bidir_node_iterator(Node* node_):node(node_){}

  const typename Node::value_type& operator*()const
  {
    return node->value();
  }

  bidir_node_iterator& operator++()
  {
    Node::increment(node);
    return *this;
  }

  bidir_node_iterator& operator--()
  {
    Node::decrement(node);
    return *this;
  }

#if !defined(BOOST_MULTI_INDEX_DISABLE_SERIALIZATION)
  /* Serialization. As for why the following is public,
   * see explanation in safe_mode_iterator notes in safe_mode.hpp.
   */

  BOOST_SERIALIZATION_SPLIT_MEMBER()

  typedef typename Node::base_type node_base_type;

  template<class Archive>
  void save(Archive& ar,const unsigned int)const
  {
    node_base_type* bnode=node;
    ar<<serialization::make_nvp("pointer",bnode);
  }

  template<class Archive>
  void load(Archive& ar,const unsigned int)
  {
    node_base_type* bnode;
    ar>>serialization::make_nvp("pointer",bnode);
    node=static_cast<Node*>(bnode);
  }
#endif

  /* get_node is not to be used by the user */

  typedef Node node_type;

  Node* get_node()const{return node;}

private:
  Node* node;
};

template<typename Node>
bool operator==(
  const bidir_node_iterator<Node>& x,
  const bidir_node_iterator<Node>& y)
{
  return x.get_node()==y.get_node();
}

} /* namespace multi_index::detail */

} /* namespace multi_index */

} /* namespace boost */

#endif

/* bidir_node_iterator.hpp
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
*/