/* Copyright 2003-2013 Joaquin M Lopez Munoz.
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * See http://www.boost.org/libs/multi_index for library home page.
 */

#ifndef BOOST_MULTI_INDEX_DETAIL_ORD_INDEX_ARGS_HPP
#define BOOST_MULTI_INDEX_DETAIL_ORD_INDEX_ARGS_HPP

#if defined(_MSC_VER)
#pragma once
#endif

#include <boost/config.hpp> /* keep it first to prevent nasty warns in MSVC */
#include <boost/mpl/aux_/na.hpp>
#include <boost/mpl/eval_if.hpp>
#include <boost/mpl/identity.hpp>
#include <boost/mpl/if.hpp>
#include <boost/multi_index/tag.hpp>
#include <boost/static_assert.hpp>
#include <boost/type_traits/is_same.hpp>
#include <functional>

namespace boost{

namespace multi_index{

namespace detail{

/* Oredered index specifiers can be instantiated in two forms:
 *
 *   (ordered_unique|ordered_non_unique)<
 *     KeyFromValue,Compare=std::less<KeyFromValue::result_type> >
 *   (ordered_unique|ordered_non_unique)<
 *     TagList,KeyFromValue,Compare=std::less<KeyFromValue::result_type> >
 *
 * index_args implements the machinery to accept this argument-dependent
 * polymorphism.
 */

template<typename KeyFromValue>
struct index_args_default_compare
{
  typedef std::less<typename KeyFromValue::result_type> type;
};

template<typename Arg1,typename Arg2,typename Arg3>
struct ordered_index_args
{
  typedef is_tag<Arg1> full_form;

  typedef typename mpl::if_<
    full_form,
    Arg1,
    tag< > >::type                                   tag_list_type;
  typedef typename mpl::if_<
    full_form,
    Arg2,
    Arg1>::type                                      key_from_value_type;
  typedef typename mpl::if_<
    full_form,
    Arg3,
    Arg2>::type                                      supplied_compare_type;
  typedef typename mpl::eval_if<
    mpl::is_na<supplied_compare_type>,
    index_args_default_compare<key_from_value_type>,
    mpl::identity<supplied_compare_type>
  >::type                                            compare_type;

  BOOST_STATIC_ASSERT(is_tag<tag_list_type>::value);
  BOOST_STATIC_ASSERT(!mpl::is_na<key_from_value_type>::value);
  BOOST_STATIC_ASSERT(!mpl::is_na<compare_type>::value);
};

} /* namespace multi_index::detail */

} /* namespace multi_index */

} /* namespace boost */

#endif

/* ord_index_args.hpp
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
*/