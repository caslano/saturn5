/* Copyright 2003-2021 Joaquin M Lopez Munoz.
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * See http://www.boost.org/libs/multi_index for library home page.
 */

#ifndef BOOST_MULTI_INDEX_DETAIL_INDEX_ACCESS_SEQUENCE_HPP
#define BOOST_MULTI_INDEX_DETAIL_INDEX_ACCESS_SEQUENCE_HPP

#if defined(_MSC_VER)
#pragma once
#endif

#include <boost/config.hpp> /* keep it first to prevent nasty warns in MSVC */
#include <boost/mpl/if.hpp>
#include <boost/mpl/size.hpp>
#include <boost/multi_index_container_fwd.hpp>

namespace boost{

namespace multi_index{

namespace detail{

/* Successive access to the indices of a multi_index_container. Used as dst in
 * backbone function extract_(x,dst) to retrieve the destination indices
 * where iterators referring to x must be transferred to (in merging
 * operations).
 */

template<typename MultiIndexContainer,int N=0>
struct index_access_sequence;

struct index_access_sequence_terminal
{
  index_access_sequence_terminal(void*){}
};

template<typename MultiIndexContainer,int N>
struct index_access_sequence_normal
{
  MultiIndexContainer* p;

  index_access_sequence_normal(MultiIndexContainer* p_):p(p_){}

  typename nth_index<MultiIndexContainer,N>::type&
  get(){return p->template get<N>();}

  index_access_sequence<MultiIndexContainer,N+1>
  next(){return index_access_sequence<MultiIndexContainer,N+1>(p);}
};

template<typename MultiIndexContainer,int N>
struct index_access_sequence_base:
  mpl::if_c<
    N<mpl::size<typename MultiIndexContainer::index_type_list>::type::value,
    index_access_sequence_normal<MultiIndexContainer,N>,
    index_access_sequence_terminal
  >
{};

template<typename MultiIndexContainer,int N>
struct index_access_sequence:
  index_access_sequence_base<MultiIndexContainer,N>::type
{
  typedef typename index_access_sequence_base<
    MultiIndexContainer,N>::type               super;
 
  index_access_sequence(MultiIndexContainer* p):super(p){}
};

} /* namespace multi_index::detail */

} /* namespace multi_index */

} /* namespace boost */

#endif

/* index_access_sequence.hpp
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
*/