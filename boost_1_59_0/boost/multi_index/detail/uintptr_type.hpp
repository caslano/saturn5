/* Copyright 2003-2013 Joaquin M Lopez Munoz.
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * See http://www.boost.org/libs/multi_index for library home page.
 */

#ifndef BOOST_MULTI_INDEX_DETAIL_UINTPTR_TYPE_HPP
#define BOOST_MULTI_INDEX_DETAIL_UINTPTR_TYPE_HPP

#if defined(_MSC_VER)
#pragma once
#endif

#include <boost/config.hpp> /* keep it first to prevent nasty warns in MSVC */
#include <boost/mpl/bool.hpp>

namespace boost{

namespace multi_index{

namespace detail{

/* has_uintptr_type is an MPL integral constant determining whether
 * there exists an unsigned integral type with the same size as
 * void *.
 * uintptr_type is such a type if has_uintptr is true, or unsigned int
 * otherwise.
 * Note that uintptr_type is more restrictive than C99 uintptr_t,
 * where an integral type with size greater than that of void *
 * would be conformant.
 */

template<int N>struct uintptr_candidates;
template<>struct uintptr_candidates<-1>{typedef unsigned int           type;};
template<>struct uintptr_candidates<0> {typedef unsigned int           type;};
template<>struct uintptr_candidates<1> {typedef unsigned short         type;};
template<>struct uintptr_candidates<2> {typedef unsigned long          type;};

#if defined(BOOST_HAS_LONG_LONG)
template<>struct uintptr_candidates<3> {typedef boost::ulong_long_type type;};
#else
template<>struct uintptr_candidates<3> {typedef unsigned int           type;};
#endif

#if defined(BOOST_HAS_MS_INT64)
template<>struct uintptr_candidates<4> {typedef unsigned __int64       type;};
#else
template<>struct uintptr_candidates<4> {typedef unsigned int           type;};
#endif

struct uintptr_aux
{
  BOOST_STATIC_CONSTANT(int,index=
    sizeof(void*)==sizeof(uintptr_candidates<0>::type)?0:
    sizeof(void*)==sizeof(uintptr_candidates<1>::type)?1:
    sizeof(void*)==sizeof(uintptr_candidates<2>::type)?2:
    sizeof(void*)==sizeof(uintptr_candidates<3>::type)?3:
    sizeof(void*)==sizeof(uintptr_candidates<4>::type)?4:-1);

  BOOST_STATIC_CONSTANT(bool,has_uintptr_type=(index>=0));

  typedef uintptr_candidates<index>::type type;
};

typedef mpl::bool_<uintptr_aux::has_uintptr_type> has_uintptr_type;
typedef uintptr_aux::type                         uintptr_type;

} /* namespace multi_index::detail */

} /* namespace multi_index */

} /* namespace boost */

#endif

/* uintptr_type.hpp
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
*/