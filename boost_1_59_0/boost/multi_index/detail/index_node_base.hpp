/* Copyright 2003-2016 Joaquin M Lopez Munoz.
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * See http://www.boost.org/libs/multi_index for library home page.
 */

#ifndef BOOST_MULTI_INDEX_DETAIL_INDEX_NODE_BASE_HPP
#define BOOST_MULTI_INDEX_DETAIL_INDEX_NODE_BASE_HPP

#if defined(_MSC_VER)
#pragma once
#endif

#include <boost/config.hpp> /* keep it first to prevent nasty warns in MSVC */
#include <boost/type_traits/aligned_storage.hpp>
#include <boost/type_traits/alignment_of.hpp> 

#if !defined(BOOST_MULTI_INDEX_DISABLE_SERIALIZATION)
#include <boost/archive/archive_exception.hpp>
#include <boost/serialization/access.hpp>
#include <boost/throw_exception.hpp> 
#endif

namespace boost{

namespace multi_index{

namespace detail{

/* index_node_base tops the node hierarchy of multi_index_container. It holds
 * the value of the element contained.
 */

template<typename Value>
struct pod_value_holder
{
  typename aligned_storage<
    sizeof(Value),
    alignment_of<Value>::value
  >::type                      space;
};

template<typename Value,typename Allocator>
struct index_node_base:private pod_value_holder<Value>
{
  typedef index_node_base base_type; /* used for serialization purposes */
  typedef Value           value_type;
  typedef Allocator       allocator_type;

#include <boost/multi_index/detail/ignore_wstrict_aliasing.hpp>

  value_type& value()
  {
    return *reinterpret_cast<value_type*>(&this->space);
  }

  const value_type& value()const
  {
    return *reinterpret_cast<const value_type*>(&this->space);
  }

#include <boost/multi_index/detail/restore_wstrict_aliasing.hpp>

  static index_node_base* from_value(const value_type* p)
  {
    return static_cast<index_node_base *>(
      reinterpret_cast<pod_value_holder<Value>*>( /* std 9.2.17 */
        const_cast<value_type*>(p))); 
  }

private:
#if !defined(BOOST_MULTI_INDEX_DISABLE_SERIALIZATION)
  friend class boost::serialization::access;
  
  /* nodes do not emit any kind of serialization info. They are
   * fed to Boost.Serialization so that pointers to nodes are
   * tracked correctly.
   */

  template<class Archive>
  void serialize(Archive&,const unsigned int)
  {
  }
#endif
};

template<typename Node,typename Value>
Node* node_from_value(const Value* p)
{
  typedef typename Node::allocator_type allocator_type;
  return static_cast<Node*>(
    index_node_base<Value,allocator_type>::from_value(p));
}

} /* namespace multi_index::detail */

} /* namespace multi_index */

#if !defined(BOOST_MULTI_INDEX_DISABLE_SERIALIZATION)
/* Index nodes never get constructed directly by Boost.Serialization,
 * as archives are always fed pointers to previously existent
 * nodes. So, if this is called it means we are dealing with a
 * somehow invalid archive.
 */

#if defined(BOOST_NO_ARGUMENT_DEPENDENT_LOOKUP)
namespace serialization{
#else
namespace multi_index{
namespace detail{
#endif

template<class Archive,typename Value,typename Allocator>
inline void load_construct_data(
  Archive&,boost::multi_index::detail::index_node_base<Value,Allocator>*,
  const unsigned int)
{
  throw_exception(
    archive::archive_exception(archive::archive_exception::other_exception));
}

#if defined(BOOST_NO_ARGUMENT_DEPENDENT_LOOKUP)
} /* namespace serialization */
#else
} /* namespace multi_index::detail */
} /* namespace multi_index */
#endif

#endif

} /* namespace boost */

#endif

/* index_node_base.hpp
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
*/