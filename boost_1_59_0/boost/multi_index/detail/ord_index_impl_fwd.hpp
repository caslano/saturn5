/* Copyright 2003-2015 Joaquin M Lopez Munoz.
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * See http://www.boost.org/libs/multi_index for library home page.
 */

#ifndef BOOST_MULTI_INDEX_DETAIL_ORD_INDEX_IMPL_FWD_HPP
#define BOOST_MULTI_INDEX_DETAIL_ORD_INDEX_IMPL_FWD_HPP

#if defined(_MSC_VER)
#pragma once
#endif

namespace boost{

namespace multi_index{

namespace detail{

template<
  typename KeyFromValue,typename Compare,
  typename SuperMeta,typename TagList,typename Category,typename AugmentPolicy
>
class ordered_index;

template<
  typename KeyFromValue1,typename Compare1,
  typename SuperMeta1,typename TagList1,typename Category1,
  typename AugmentPolicy1,
  typename KeyFromValue2,typename Compare2,
  typename SuperMeta2,typename TagList2,typename Category2,
  typename AugmentPolicy2
>
bool operator==(
  const ordered_index<
    KeyFromValue1,Compare1,SuperMeta1,TagList1,Category1,AugmentPolicy1>& x,
  const ordered_index<
    KeyFromValue2,Compare2,SuperMeta2,TagList2,Category2,AugmentPolicy2>& y);

template<
  typename KeyFromValue1,typename Compare1,
  typename SuperMeta1,typename TagList1,typename Category1,
  typename AugmentPolicy1,
  typename KeyFromValue2,typename Compare2,
  typename SuperMeta2,typename TagList2,typename Category2,
  typename AugmentPolicy2
>
bool operator<(
  const ordered_index<
    KeyFromValue1,Compare1,SuperMeta1,TagList1,Category1,AugmentPolicy1>& x,
  const ordered_index<
    KeyFromValue2,Compare2,SuperMeta2,TagList2,Category2,AugmentPolicy2>& y);

template<
  typename KeyFromValue1,typename Compare1,
  typename SuperMeta1,typename TagList1,typename Category1,
  typename AugmentPolicy1,
  typename KeyFromValue2,typename Compare2,
  typename SuperMeta2,typename TagList2,typename Category2,
  typename AugmentPolicy2
>
bool operator!=(
  const ordered_index<
    KeyFromValue1,Compare1,SuperMeta1,TagList1,Category1,AugmentPolicy1>& x,
  const ordered_index<
    KeyFromValue2,Compare2,SuperMeta2,TagList2,Category2,AugmentPolicy2>& y);

template<
  typename KeyFromValue1,typename Compare1,
  typename SuperMeta1,typename TagList1,typename Category1,
  typename AugmentPolicy1,
  typename KeyFromValue2,typename Compare2,
  typename SuperMeta2,typename TagList2,typename Category2,
  typename AugmentPolicy2
>
bool operator>(
  const ordered_index<
    KeyFromValue1,Compare1,SuperMeta1,TagList1,Category1,AugmentPolicy1>& x,
  const ordered_index<
    KeyFromValue2,Compare2,SuperMeta2,TagList2,Category2,AugmentPolicy2>& y);

template<
  typename KeyFromValue1,typename Compare1,
  typename SuperMeta1,typename TagList1,typename Category1,
  typename AugmentPolicy1,
  typename KeyFromValue2,typename Compare2,
  typename SuperMeta2,typename TagList2,typename Category2,
  typename AugmentPolicy2
>
bool operator>=(
  const ordered_index<
    KeyFromValue1,Compare1,SuperMeta1,TagList1,Category1,AugmentPolicy1>& x,
  const ordered_index<
    KeyFromValue2,Compare2,SuperMeta2,TagList2,Category2,AugmentPolicy2>& y);

template<
  typename KeyFromValue1,typename Compare1,
  typename SuperMeta1,typename TagList1,typename Category1,
  typename AugmentPolicy1,
  typename KeyFromValue2,typename Compare2,
  typename SuperMeta2,typename TagList2,typename Category2,
  typename AugmentPolicy2
>
bool operator<=(
  const ordered_index<
    KeyFromValue1,Compare1,SuperMeta1,TagList1,Category1,AugmentPolicy1>& x,
  const ordered_index<
    KeyFromValue2,Compare2,SuperMeta2,TagList2,Category2,AugmentPolicy2>& y);

template<
  typename KeyFromValue,typename Compare,
  typename SuperMeta,typename TagList,typename Category,typename AugmentPolicy
>
void swap(
  ordered_index<
    KeyFromValue,Compare,SuperMeta,TagList,Category,AugmentPolicy>& x,
  ordered_index<
    KeyFromValue,Compare,SuperMeta,TagList,Category,AugmentPolicy>& y);

} /* namespace multi_index::detail */

} /* namespace multi_index */

} /* namespace boost */

#endif

/* ord_index_impl_fwd.hpp
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
*/