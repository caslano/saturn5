/* Copyright 2003-2013 Joaquin M Lopez Munoz.
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * See http://www.boost.org/libs/multi_index for library home page.
 */

#ifndef BOOST_MULTI_INDEX_DETAIL_BASE_TYPE_HPP
#define BOOST_MULTI_INDEX_DETAIL_BASE_TYPE_HPP

#if defined(_MSC_VER)
#pragma once
#endif

#include <boost/config.hpp> /* keep it first to prevent nasty warns in MSVC */
#include <boost/detail/workaround.hpp>
#include <boost/mpl/at.hpp>
#include <boost/mpl/apply.hpp>
#include <boost/mpl/size.hpp>
#include <boost/multi_index/detail/index_base.hpp>
#include <boost/multi_index/detail/is_index_list.hpp>
#include <boost/static_assert.hpp>

namespace boost{

namespace multi_index{

namespace detail{

/* MPL machinery to construct a linear hierarchy of indices out of
 * a index list.
 */

struct index_applier
{
  template<typename IndexSpecifierMeta,typename SuperMeta>
  struct apply
  {
    typedef typename IndexSpecifierMeta::type            index_specifier;
    typedef typename index_specifier::
      BOOST_NESTED_TEMPLATE index_class<SuperMeta>::type type;
  }; 
};

template<int N,typename Value,typename IndexSpecifierList,typename Allocator>
struct nth_layer
{
  BOOST_STATIC_CONSTANT(int,length=mpl::size<IndexSpecifierList>::value);

  typedef typename  mpl::eval_if_c<
    N==length,
    mpl::identity<index_base<Value,IndexSpecifierList,Allocator> >,
    mpl::apply2<
      index_applier,
      mpl::at_c<IndexSpecifierList,N>,
      nth_layer<N+1,Value,IndexSpecifierList,Allocator>
    >
  >::type type;
};

template<typename Value,typename IndexSpecifierList,typename Allocator>
struct multi_index_base_type:nth_layer<0,Value,IndexSpecifierList,Allocator>
{
  BOOST_STATIC_ASSERT(detail::is_index_list<IndexSpecifierList>::value);
};

} /* namespace multi_index::detail */

} /* namespace multi_index */

} /* namespace boost */

#endif

/* base_type.hpp
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
*/