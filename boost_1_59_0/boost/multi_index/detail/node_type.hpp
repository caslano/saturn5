/* Copyright 2003-2013 Joaquin M Lopez Munoz.
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * See http://www.boost.org/libs/multi_index for library home page.
 */

#ifndef BOOST_MULTI_INDEX_DETAIL_NODE_TYPE_HPP
#define BOOST_MULTI_INDEX_DETAIL_NODE_TYPE_HPP

#if defined(_MSC_VER)
#pragma once
#endif

#include <boost/config.hpp> /* keep it first to prevent nasty warns in MSVC */
#include <boost/detail/workaround.hpp>
#include <boost/mpl/bind.hpp>
#include <boost/mpl/reverse_iter_fold.hpp>
#include <boost/mpl/deref.hpp>
#include <boost/multi_index_container_fwd.hpp>
#include <boost/multi_index/detail/header_holder.hpp>
#include <boost/multi_index/detail/index_node_base.hpp>
#include <boost/multi_index/detail/is_index_list.hpp>
#include <boost/static_assert.hpp>

namespace boost{

namespace multi_index{

namespace detail{

/* MPL machinery to construct the internal node type associated to an
 * index list.
 */

struct index_node_applier
{
  template<typename IndexSpecifierIterator,typename Super>
  struct apply
  {
    typedef typename mpl::deref<IndexSpecifierIterator>::type index_specifier;
    typedef typename index_specifier::
      BOOST_NESTED_TEMPLATE node_class<Super>::type type;
  }; 
};

template<typename Value,typename IndexSpecifierList,typename Allocator>
struct multi_index_node_type
{
  BOOST_STATIC_ASSERT(detail::is_index_list<IndexSpecifierList>::value);

  typedef typename mpl::reverse_iter_fold<
    IndexSpecifierList,
    index_node_base<Value,Allocator>,
    mpl::bind2<index_node_applier,mpl::_2,mpl::_1>
  >::type type;
};

} /* namespace multi_index::detail */

} /* namespace multi_index */

} /* namespace boost */

#endif

/* node_type.hpp
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
*/