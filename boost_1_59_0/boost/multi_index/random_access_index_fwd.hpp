/* Copyright 2003-2013 Joaquin M Lopez Munoz.
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * See http://www.boost.org/libs/multi_index for library home page.
 */

#ifndef BOOST_MULTI_INDEX_RANDOM_ACCESS_INDEX_FWD_HPP
#define BOOST_MULTI_INDEX_RANDOM_ACCESS_INDEX_FWD_HPP

#if defined(_MSC_VER)
#pragma once
#endif

#include <boost/multi_index/tag.hpp>

namespace boost{

namespace multi_index{

namespace detail{

template<typename SuperMeta,typename TagList>
class random_access_index;

template<
  typename SuperMeta1,typename TagList1,
  typename SuperMeta2,typename TagList2
>
bool operator==(
  const random_access_index<SuperMeta1,TagList1>& x,
  const random_access_index<SuperMeta2,TagList2>& y);

template<
  typename SuperMeta1,typename TagList1,
  typename SuperMeta2,typename TagList2
>
bool operator<(
  const random_access_index<SuperMeta1,TagList1>& x,
  const random_access_index<SuperMeta2,TagList2>& y);

template<
  typename SuperMeta1,typename TagList1,
  typename SuperMeta2,typename TagList2
>
bool operator!=(
  const random_access_index<SuperMeta1,TagList1>& x,
  const random_access_index<SuperMeta2,TagList2>& y);

template<
  typename SuperMeta1,typename TagList1,
  typename SuperMeta2,typename TagList2
>
bool operator>(
  const random_access_index<SuperMeta1,TagList1>& x,
  const random_access_index<SuperMeta2,TagList2>& y);

template<
  typename SuperMeta1,typename TagList1,
  typename SuperMeta2,typename TagList2
>
bool operator>=(
  const random_access_index<SuperMeta1,TagList1>& x,
  const random_access_index<SuperMeta2,TagList2>& y);

template<
  typename SuperMeta1,typename TagList1,
  typename SuperMeta2,typename TagList2
>
bool operator<=(
  const random_access_index<SuperMeta1,TagList1>& x,
  const random_access_index<SuperMeta2,TagList2>& y);

template<typename SuperMeta,typename TagList>
void swap(
  random_access_index<SuperMeta,TagList>& x,
  random_access_index<SuperMeta,TagList>& y);

} /* namespace multi_index::detail */

/* index specifiers */

template <typename TagList=tag<> >
struct random_access;

} /* namespace multi_index */

} /* namespace boost */

#endif

/* random_access_index_fwd.hpp
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
*/