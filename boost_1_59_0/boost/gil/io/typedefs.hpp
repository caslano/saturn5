//
// Copyright 2007-2008 Christian Henning
//
// Distributed under the Boost Software License, Version 1.0
// See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt
//
#ifndef BOOST_GIL_IO_TYPEDEFS_HPP
#define BOOST_GIL_IO_TYPEDEFS_HPP

#ifdef BOOST_GIL_IO_ENABLE_GRAY_ALPHA
#include <boost/gil/extension/toolbox/color_spaces/gray_alpha.hpp>
#endif // BOOST_GIL_IO_ENABLE_GRAY_ALPHA

#include <boost/gil/image.hpp>
#include <boost/gil/point.hpp>
#include <boost/gil/utilities.hpp>

#include <type_traits>
#include <vector>

namespace boost { namespace gil {

struct double_zero { static double apply() { return 0.0; } };
struct double_one  { static double apply() { return 1.0; } };

using byte_t = unsigned char;
using byte_vector_t = std::vector<byte_t>;

}} // namespace boost::gil

namespace boost {

template<> struct is_floating_point<gil::float32_t> : std::true_type {};
template<> struct is_floating_point<gil::float64_t> : std::true_type {};

} // namespace boost

namespace boost { namespace gil {

///@todo We should use boost::preprocessor here.
/// TODO: NO! Please do not use preprocessor here! --mloskot

using gray1_image_t = bit_aligned_image1_type<1, gray_layout_t>::type;
using gray2_image_t = bit_aligned_image1_type<2, gray_layout_t>::type;
using gray4_image_t = bit_aligned_image1_type<4, gray_layout_t>::type;
using gray6_image_t = bit_aligned_image1_type<6, gray_layout_t>::type;
using gray10_image_t = bit_aligned_image1_type<10, gray_layout_t>::type;
using gray12_image_t = bit_aligned_image1_type<12, gray_layout_t>::type;
using gray14_image_t = bit_aligned_image1_type<14, gray_layout_t>::type;
using gray24_image_t = bit_aligned_image1_type<24, gray_layout_t>::type;

using gray64f_pixel_t = pixel<double, gray_layout_t>;

#ifdef BOOST_GIL_IO_ENABLE_GRAY_ALPHA
using gray_alpha8_pixel_t = pixel<uint8_t, gray_alpha_layout_t>;
using gray_alpha16_pixel_t = pixel<uint16_t, gray_alpha_layout_t>;
using gray_alpha64f_pixel_t = pixel<double, gray_alpha_layout_t>;
#endif // BOOST_GIL_IO_ENABLE_GRAY_ALPHA

using rgb64f_pixel_t = pixel<double, rgb_layout_t>;
using rgba64f_pixel_t = pixel<double, rgba_layout_t>;
using gray64f_image_t = image<gray64f_pixel_t, false>;

#ifdef BOOST_GIL_IO_ENABLE_GRAY_ALPHA
using gray_alpha8_image_t = image<gray_alpha8_pixel_t, false>;
using gray_alpha16_image_t = image<gray_alpha16_pixel_t, false>;
using gray_alpha32f_image_t = image<gray_alpha32f_pixel_t, false>;
using gray_alpha32f_planar_image_t = image<gray_alpha32f_pixel_t, true>;
using gray_alpha64f_image_t = image<gray_alpha64f_pixel_t, false>;
using gray_alpha64f_planar_image_t = image<gray_alpha64f_pixel_t, true>;

#endif // BOOST_GIL_IO_ENABLE_GRAY_ALPHA

using rgb64f_image_t = image<rgb64f_pixel_t, false>;
using rgb64f_planar_image_t = image<rgb64f_pixel_t, true>;
using rgba64f_image_t = image<rgba64f_pixel_t, false>;
using rgba64f_planar_image_t = image<rgba64f_pixel_t, true>;

}} // namespace boost::gil

#endif

/* typedefs.hpp
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
*/