//
// Copyright 2007-2008 Christian Henning, Andreas Pokorny, Lubomir Bourdev
//
// Distributed under the Boost Software License, Version 1.0
// See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt
//
#ifndef BOOST_GIL_IO_BASE_HPP
#define BOOST_GIL_IO_BASE_HPP

#include <boost/gil/extension/toolbox/toolbox.hpp>

#include <boost/gil/bit_aligned_pixel_reference.hpp>
#include <boost/gil/bit_aligned_pixel_iterator.hpp>
#include <boost/gil/color_convert.hpp>
#include <boost/gil/utilities.hpp>
#include <boost/gil/io/error.hpp>
#include <boost/gil/io/typedefs.hpp>

#include <istream>
#include <ostream>
#include <type_traits>
#include <vector>

namespace boost { namespace gil {

struct format_tag {};

template< typename Property >
struct property_base
{
    using type = Property;
};

template<typename FormatTag>
struct is_format_tag : std::is_base_of<format_tag, FormatTag> {};

struct image_read_settings_base
{
protected:

    image_read_settings_base()
    : _top_left( 0, 0 )
    , _dim     ( 0, 0 )
    {}

    image_read_settings_base( const point_t& top_left
                            , const point_t& dim
                            )
    : _top_left( top_left )
    , _dim     ( dim      )
    {}


public:

    void set( const point_t& top_left
            , const point_t& dim
            )
    {
        _top_left = top_left;
        _dim      = dim;
    }

public:

    point_t _top_left;
    point_t _dim;
};

/**
 * Boolean meta function, std::true_type if the pixel type \a PixelType is supported
 * by the image format identified with \a FormatTag.
 * \todo the name is_supported is to generic, pick something more IO realted.
 */
// Depending on image type the parameter Pixel can be a reference type
// for bit_aligned images or a pixel for byte images.
template< typename Pixel, typename FormatTag > struct is_read_supported {};
template< typename Pixel, typename FormatTag > struct is_write_supported {};


namespace detail {

template< typename Property >
struct property_base
{
    using type = Property;
};

} // namespace detail

struct read_support_true  { static constexpr bool is_supported = true; };
struct read_support_false { static constexpr bool is_supported = false; };
struct write_support_true { static constexpr bool is_supported = true; };
struct write_support_false{ static constexpr bool is_supported = false; };

class no_log {};

template< typename Device, typename FormatTag > struct reader_backend;
template< typename Device, typename FormatTag > struct writer_backend;

template< typename FormatTag > struct image_read_info;
template< typename FormatTag > struct image_read_settings;
template< typename FormatTag, typename Log = no_log > struct image_write_info;

} // namespace gil
} // namespace boost

#endif

/* base.hpp
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
*/