//
// Copyright 2005-2007 Adobe Systems Incorporated
//
// Distributed under the Boost Software License, Version 1.0
// See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt
//
#ifndef BOOST_GIL_DEPRECATED_HPP
#define BOOST_GIL_DEPRECATED_HPP

#include <cstddef>

/// This file is provided as a courtesy to ease upgrading GIL client code.
/// Please make sure your code compiles when this file is not included.

#define planar_ptr          planar_pixel_iterator
#define planar_ref          planar_pixel_reference
#define membased_2d_locator memory_based_2d_locator
#define pixel_step_iterator memory_based_step_iterator
#define pixel_image_iterator iterator_from_2d

#define equal_channels      static_equal
#define copy_channels       static_copy
#define fill_channels       static_fill
#define generate_channels   static_generate
#define for_each_channel    static_for_each
#define transform_channels  static_transform
#define max_channel         static_max
#define min_channel         static_min

#define semantic_channel    semantic_at_c

template <typename Img>
void resize_clobber_image(Img& img, const typename Img::point_t& new_dims) {
    img.recreate(new_dims);
}

template <typename Img>
void resize_clobber_image(Img& img, const typename Img::x_coord_t& width, const typename Img::y_coord_t& height) {
    img.recreate(width,height);
}

template <typename T> typename T::x_coord_t get_width(const T& a) { return a.width(); }
template <typename T> typename T::y_coord_t get_height(const T& a) { return a.height(); }
template <typename T> typename T::point_t get_dimensions(const T& a) { return a.dimensions(); }
template <typename T> std::size_t get_num_channels(const T& a) { return a.num_channels(); }

#define GIL boost::gil
#define ADOBE_GIL_NAMESPACE_BEGIN  namespace boost { namespace gil {
#define ADOBE_GIL_NAMESPACE_END    } }

#define ByteAdvancableIteratorConcept  MemoryBasedIteratorConcept
#define byte_advance                   memunit_advance
#define byte_advanced                  memunit_advanced
#define byte_step                      memunit_step
#define byte_distance                  memunit_distance

#define byte_addressable_step_iterator memory_based_step_iterator
#define byte_addressable_2d_locator    memory_based_2d_locator

// These are members of memory-based locators
//#define row_bytes    row_size         // commented out because row_bytes is commonly used
#define pix_bytestep pixel_size

#endif

/* deprecated.hpp
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
*/