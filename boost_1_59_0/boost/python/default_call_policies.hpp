// Copyright David Abrahams 2002.
// Distributed under the Boost Software License, Version 1.0. (See
// accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
#ifndef DEFAULT_CALL_POLICIES_DWA2002131_HPP
# define DEFAULT_CALL_POLICIES_DWA2002131_HPP

# include <boost/python/detail/prefix.hpp>
# include <boost/mpl/if.hpp>
# include <boost/python/to_python_value.hpp>
# include <boost/python/detail/type_traits.hpp>
# include <boost/python/detail/value_arg.hpp>
# include <boost/mpl/or.hpp>
# include <boost/mpl/front.hpp>

namespace boost { namespace python { 

template <class T> struct to_python_value;

namespace detail
{
// for "readable" error messages
  template <class T> struct specify_a_return_value_policy_to_wrap_functions_returning
# if defined(__GNUC__) || defined(__EDG__)
  {}
# endif 
  ;
}

struct default_result_converter;

struct default_call_policies
{
    // Ownership of this argument tuple will ultimately be adopted by
    // the caller.
    template <class ArgumentPackage>
    static bool precall(ArgumentPackage const&)
    {
        return true;
    }

    // Pass the result through
    template <class ArgumentPackage>
    static PyObject* postcall(ArgumentPackage const&, PyObject* result)
    {
        return result;
    }

    typedef default_result_converter result_converter;
    typedef PyObject* argument_package;

    template <class Sig> 
    struct extract_return_type : mpl::front<Sig>
    {
    };

};

struct default_result_converter
{
    template <class R>
    struct apply
    {
        typedef typename mpl::if_<
            mpl::or_<detail::is_pointer<R>, detail::is_reference<R> >
          , detail::specify_a_return_value_policy_to_wrap_functions_returning<R>
          , boost::python::to_python_value<
                typename detail::value_arg<R>::type
            >
        >::type type;
    };
};

// Exceptions for c strings an PyObject*s
template <>
struct default_result_converter::apply<char const*>
{
    typedef boost::python::to_python_value<char const*const&> type;
};

template <>
struct default_result_converter::apply<PyObject*>
{
    typedef boost::python::to_python_value<PyObject*const&> type;
};

}} // namespace boost::python

#endif // DEFAULT_CALL_POLICIES_DWA2002131_HPP

/* default_call_policies.hpp
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
*/