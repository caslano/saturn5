// Copyright Jim Bosch 2010-2012.
// Copyright Stefan Seefeld 2016.
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

#ifndef boost_python_numpy_matrix_hpp_
#define boost_python_numpy_matrix_hpp_

/**
 *  @brief Object manager for numpy.matrix.
 */

#include <boost/python.hpp>
#include <boost/python/numpy/numpy_object_mgr_traits.hpp>
#include <boost/python/numpy/ndarray.hpp>
#include <boost/python/numpy/config.hpp>


namespace boost { namespace python { namespace numpy {

/**
 *  @brief A boost.python "object manager" (subclass of object) for numpy.matrix.
 *
 *  @internal numpy.matrix is defined in Python, so object_manager_traits<matrix>::get_pytype()
 *            is implemented by importing numpy and getting the "matrix" attribute of the module.
 *            We then just hope that doesn't get destroyed while we need it, because if we put
 *            a dynamic python object in a static-allocated boost::python::object or handle<>,
 *            bad things happen when Python shuts down.  I think this solution is safe, but I'd
 *            love to get that confirmed.
 */
class BOOST_NUMPY_DECL matrix : public ndarray 
{
  static object construct(object_cref obj, dtype const & dt, bool copy);
  static object construct(object_cref obj, bool copy);
public:

  BOOST_PYTHON_FORWARD_OBJECT_CONSTRUCTORS(matrix, ndarray);

  /// @brief Equivalent to "numpy.matrix(obj,dt,copy)" in Python.
  explicit matrix(object const & obj, dtype const & dt, bool copy=true)
    : ndarray(extract<ndarray>(construct(obj, dt, copy))) {}

  /// @brief Equivalent to "numpy.matrix(obj,copy=copy)" in Python.
  explicit matrix(object const & obj, bool copy=true)
    : ndarray(extract<ndarray>(construct(obj, copy))) {}

  /// \brief Return a view of the matrix with the given dtype.
  matrix view(dtype const & dt) const;

  /// \brief Copy the scalar (deep for all non-object fields).
  matrix copy() const;

  /// \brief Transpose the matrix.
  matrix transpose() const;

};

/**
 *  @brief CallPolicies that causes a function that returns a numpy.ndarray to
 *         return a numpy.matrix instead.
 */
template <typename Base = default_call_policies>
struct as_matrix : Base
{
  static PyObject * postcall(PyObject *, PyObject * result)
  {
    object a = object(handle<>(result));
    numpy::matrix m(a, false);
    Py_INCREF(m.ptr());
    return m.ptr();
  }
};

} // namespace boost::python::numpy

namespace converter 
{

NUMPY_OBJECT_MANAGER_TRAITS(numpy::matrix);

}}} // namespace boost::python::converter

#endif

/* matrix.hpp
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
*/