// Copyright David Abrahams 2002.
// Distributed under the Boost Software License, Version 1.0. (See
// accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
#ifndef OBJECT_ITEMS_DWA2002615_HPP
# define OBJECT_ITEMS_DWA2002615_HPP

# include <boost/python/detail/prefix.hpp>

# include <boost/python/proxy.hpp>
# include <boost/python/object_core.hpp>
# include <boost/python/object_protocol.hpp>

namespace boost { namespace python { namespace api {

struct const_item_policies
{
    typedef object key_type;
    static object get(object const& target, object const& key);
};
  
struct item_policies : const_item_policies
{
    static object const& set(object const& target, object const& key, object const& value);
    static void del(object const& target, object const& key);
};

//
// implementation
//
template <class U>
inline object_item
object_operators<U>::operator[](object_cref key)
{
    object_cref2 x = *static_cast<U*>(this);
    return object_item(x, key);
}

template <class U>
inline const_object_item
object_operators<U>::operator[](object_cref key) const
{
    object_cref2 x = *static_cast<U const*>(this);
    return const_object_item(x, key);
}

template <class U>
template <class T>
inline const_object_item
object_operators<U>::operator[](T const& key) const
{
    return (*this)[object(key)];
}

template <class U>
template <class T>
inline object_item
object_operators<U>::operator[](T const& key)
{
    return (*this)[object(key)];
}

inline object const_item_policies::get(object const& target, object const& key)
{
    return getitem(target, key);
}

inline object const& item_policies::set(
    object const& target
    , object const& key
    , object const& value)
{
    setitem(target, key, value);
    return value;
}

inline void item_policies::del(
    object const& target
    , object const& key)
{
    delitem(target, key);
}

}}} // namespace boost::python::api

#endif // OBJECT_ITEMS_DWA2002615_HPP

/* object_items.hpp
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
*/