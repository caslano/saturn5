// Copyright David Abrahams 2002.
// Distributed under the Boost Software License, Version 1.0. (See
// accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
#ifndef TO_PYTHON_CONVERTER_DWA200221_HPP
# define TO_PYTHON_CONVERTER_DWA200221_HPP

# include <boost/python/detail/prefix.hpp>

# include <boost/python/converter/registry.hpp>
# include <boost/python/converter/as_to_python_function.hpp>
#ifndef BOOST_PYTHON_NO_PY_SIGNATURES
# include <boost/python/converter/pytype_function.hpp>
#endif
# include <boost/python/type_id.hpp>

namespace boost { namespace python { 

#if 0 //get_pytype member detection
namespace detail
{
    typedef char yes_type;
    typedef struct {char a[2]; } no_type;
    template<PyTypeObject const * (*f)()> struct test_get_pytype1 { };
    template<PyTypeObject * (*f)()>          struct test_get_pytype2 { };

    template<class T> yes_type tester(test_get_pytype1<&T::get_pytype>*);

    template<class T> yes_type tester(test_get_pytype2<&T::get_pytype>*);

    template<class T> no_type tester(...);

    template<class T>
    struct test_get_pytype_base  
    {
        BOOST_STATIC_CONSTANT(bool, value= (sizeof(detail::tester<T>(0)) == sizeof(yes_type)));
    };

    template<class T>
    struct test_get_pytype : boost::mpl::bool_<test_get_pytype_base<T>::value> 
    {
    };

}
#endif

template < class T, class Conversion, bool has_get_pytype=false >
struct to_python_converter 
{
#ifndef BOOST_PYTHON_NO_PY_SIGNATURES
    typedef boost::mpl::bool_<has_get_pytype> HasGetPytype;

    static PyTypeObject const* get_pytype_1(boost::mpl::true_ *)
    {
        return Conversion::get_pytype();
    }

    static PyTypeObject const* get_pytype_1(boost::mpl::false_ *)
    {
        return 0;
    }
    static PyTypeObject const* get_pytype_impl()
    {
        return get_pytype_1((HasGetPytype*)0);
    }
#endif
    
    to_python_converter();
};

//
// implementation
//

template <class T, class Conversion ,bool has_get_pytype>
to_python_converter<T,Conversion, has_get_pytype>::to_python_converter()
{
    typedef converter::as_to_python_function<
        T, Conversion
        > normalized;
            
    converter::registry::insert(
        &normalized::convert
        , type_id<T>()
#ifndef BOOST_PYTHON_NO_PY_SIGNATURES
        , &get_pytype_impl
#endif
        );
}

}} // namespace boost::python

#endif // TO_PYTHON_CONVERTER_DWA200221_HPP


/* to_python_converter.hpp
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
*/