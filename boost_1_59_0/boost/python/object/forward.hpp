// Copyright David Abrahams 2001.
// Distributed under the Boost Software License, Version 1.0. (See
// accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
#ifndef FORWARD_DWA20011215_HPP
# define FORWARD_DWA20011215_HPP

# include <boost/mpl/if.hpp>
# include <boost/ref.hpp>
# include <boost/python/detail/value_arg.hpp>
# include <boost/python/detail/type_traits.hpp>
# include <boost/python/detail/copy_ctor_mutates_rhs.hpp>
# include <boost/mpl/or.hpp>

namespace boost { namespace python { namespace objects { 

// Very much like boost::reference_wrapper<T>, except that in this
// case T can be a reference already without causing a
// reference-to-reference error.
template <class T>
struct reference_to_value
{
    typedef typename boost::python::detail::add_lvalue_reference<typename
        boost::python::detail::add_const<T>::type>::type reference;
    
    reference_to_value(reference x) : m_value(x) {}
    reference get() const { return m_value; }
 private:
    reference m_value;
};

// A little metaprogram which selects the type to pass through an
// intermediate forwarding function when the destination argument type
// is T.
template <class T>
struct forward
    : mpl::if_<
          mpl::or_<python::detail::copy_ctor_mutates_rhs<T>, boost::python::detail::is_scalar<T> >
        , T
        , reference_to_value<T>
      >
{
};

template<typename T>
struct unforward
{
    typedef typename unwrap_reference<T>::type& type;
};

template<typename T>
struct unforward<reference_to_value<T> >
{
    typedef T type;
};

template <typename T>
struct unforward_cref
  : python::detail::value_arg<
        typename unwrap_reference<T>::type
    >
{
};

template<typename T>
struct unforward_cref<reference_to_value<T> >
  : boost::python::detail::add_lvalue_reference<typename boost::python::detail::add_const<T>::type>
{
};


template <class T>
typename reference_to_value<T>::reference
do_unforward(reference_to_value<T> const& x, int)
{
    return x.get();
}

template <class T>
typename reference_wrapper<T>::type&
do_unforward(reference_wrapper<T> const& x, int)
{
    return x.get();
}

template <class T>
T const& do_unforward(T const& x, ...)
{
    return x;
}

}}} // namespace boost::python::objects

#endif // FORWARD_DWA20011215_HPP

/* forward.hpp
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
*/