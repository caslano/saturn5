// Copyright David Abrahams 2001.
// Distributed under the Boost Software License, Version 1.0. (See
// accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
#ifndef FUNCTION_DWA20011214_HPP
# define FUNCTION_DWA20011214_HPP

# include <boost/python/detail/prefix.hpp>
# include <boost/python/args_fwd.hpp>
# include <boost/python/handle.hpp>
# include <boost/function/function2.hpp>
# include <boost/python/object_core.hpp>
# include <boost/python/object/py_function.hpp>

namespace boost { namespace python { namespace objects { 


struct BOOST_PYTHON_DECL function : PyObject
{
    function(
        py_function const&
        , python::detail::keyword const* names_and_defaults
        , unsigned num_keywords);
      
    ~function();
    
    PyObject* call(PyObject*, PyObject*) const;

    // Add an attribute to the name_space with the given name. If it is
    // a function object (this class), and an existing function is
    // already there, add it as an overload.
    static void add_to_namespace(
        object const& name_space, char const* name, object const& attribute);

    static void add_to_namespace(
        object const& name_space, char const* name, object const& attribute, char const* doc);

    object const& doc() const;
    void doc(object const& x);
    
    object const& name() const;

    object const& get_namespace() const { return m_namespace; }
    
 private: // helper functions
    object signature(bool show_return_type=false) const;
    object signatures(bool show_return_type=false) const;
    void argument_error(PyObject* args, PyObject* keywords) const;
    void add_overload(handle<function> const&);
    
 private: // data members
    py_function m_fn;
    handle<function> m_overloads;
    object m_name;
    object m_namespace;
    object m_doc;
    object m_arg_names;
    unsigned m_nkeyword_values;
    friend class function_doc_signature_generator;
};

//
// implementations
//
inline object const& function::doc() const
{
    return this->m_doc;
}

inline void function::doc(object const& x)
{
    this->m_doc = x;
}

inline object const& function::name() const
{
    return this->m_name;
}
  
}}} // namespace boost::python::objects

#endif // FUNCTION_DWA20011214_HPP

/* function.hpp
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
*/