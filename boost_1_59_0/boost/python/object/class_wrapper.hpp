// Copyright David Abrahams 2001.
// Distributed under the Boost Software License, Version 1.0. (See
// accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
#ifndef CLASS_WRAPPER_DWA20011221_HPP
# define CLASS_WRAPPER_DWA20011221_HPP

# include <boost/python/to_python_converter.hpp>
#ifndef BOOST_PYTHON_NO_PY_SIGNATURES
# include <boost/python/converter/pytype_function.hpp>
#endif
# include <boost/ref.hpp>

namespace boost { namespace python { namespace objects { 

//
// These two classes adapt the static execute function of a class
// MakeInstance execute() function returning a new PyObject*
// reference. The first one is used for class copy constructors, and
// the second one is used to handle smart pointers.
//

template <class Src, class MakeInstance>
struct class_cref_wrapper
    : to_python_converter<Src,class_cref_wrapper<Src,MakeInstance> ,true>
{
    static PyObject* convert(Src const& x)
    {
        return MakeInstance::execute(boost::ref(x));
    }
#ifndef BOOST_PYTHON_NO_PY_SIGNATURES
    static PyTypeObject const *get_pytype() { return converter::registered_pytype_direct<Src>::get_pytype(); }
#endif
};

template <class Src, class MakeInstance>
struct class_value_wrapper
    : to_python_converter<Src,class_value_wrapper<Src,MakeInstance> ,true>
{
    static PyObject* convert(Src x)
    {
        return MakeInstance::execute(x);
    }
#ifndef BOOST_PYTHON_NO_PY_SIGNATURES
    static PyTypeObject const *get_pytype() { return MakeInstance::get_pytype(); }
#endif
};

}}} // namespace boost::python::objects

#endif // CLASS_WRAPPER_DWA20011221_HPP

/* class_wrapper.hpp
mVnq+rX2/QgOQPVYLNk6VYxys2EUM/97/eZd7M02d/UdTtm8/A5Bo/1v4ROAonwRF2/zoMvjp35Xq20r+yOysNpIyKLXJTJC71RXk4fNUDDss6pWyoDL6WGc7aribbhiwPK1C3fdvta2+9Bc7+PRBqQSUVmPxu7glDu3zdp9FaEY7AXW987hdQed8vu5Eo+DaXbDcSvxdqcVwnLTxCxqc+lB6P8ANoDJf949OtaLL+q86EKbk4/Icc67bi6ZOrPLXNmxb5/s/2z5oDYSBbn0hfqbX+/5unNZfr2tg+3avO6/+uaK2Ke9rIe4vJH2WTe3fqfdubL+d13fbRh37LP/KHyBPnmva+MLHGdX4gu0vM9m1lhwPowv0BpvPwPttZyPwhd4fI/N7KXmgAuW+ALn2PS3NxEHf3/VQb1/B75Am6NMuVBZP4AvQOeNQxf0JPvD+AIiug7AGfaf4guI7rOr4QuU3iDAMi6rEl+gz2ICGKI/Hl+g9NuIuY6/xKQOntPI/ux4/3szO4CwWP2Djdc3yw+suH3dM6yX8LcAn0tz3uxrUVa+2nnvyl78gJ/7Hx4yaqn6i4Utuz6XPywee/tKyvq9ly4/4Xuxnxly5t5ZW/HkvOfQu+M+P7DVK/HXFrM3bu6296vEBhfTpk4dfHyZqmxRhT4wOjv4YXrJ743QfvEw8z78AHpXv9gOmtFwkuUADGizvL8LN6sBAO7+dmzucuQYiYirL/utM3K4+DpKSaY+gFCMNrTjnexkHtrDrnAm89CGda+3CmvSJR85SYEfz8Xki7eek3l+aKO9PyTQHYDcaB87F21oR/vWfd2lbLCMwHuPhXRM1ry2HMas09HmaQIvSQN94S8sAxLSmU4lD0UKS+RaVaI8CS0KsBD5Y13kQX5WuTHe359kZHlS8z75fAUNHIAidxVcFVokRcdiwCgCQUhQH8vDjuNv0XlIhIEB8oNpbXSxcSDFIUgWipNB1BBWmRfsbDkJhc8LrZS6G8JR5oZZ6ASImPjo7DVgsleRxeTBrzNpGQMOY4hA+pFYiKitlZdEwrHy6q/wrBaZmzkyMRMZUxSEjRDR5N27d6S4BcIiEFTwSHEUdF3h+kY3rBpbign6x2N4TzIP4we4mVpiZAZ3aDdN6bGIaVsBt37ftuZt5uafL4oeJXQF2gxhj+ysISA96WjldJyTPKEl+g4nxa1oyAmc2ypbzEem6KuvNA1UDH9rpjgE8kM2XJ82K6HXW1Nr2jrzo5ExsvJjsE12KkAQD/4CfDG0wVAI7rD/BNOwLsLyxjB/4nZQXj7Z7DJGIltrD12ZjTGkBQ7Hta7gNHWyrgA8BKZAMAOsRIKXcBISMRrHCxmgD1wk3xBxB1wycUfMQQcsPtfUCXERLDbmSFNnBgOCDQIArneh2JMHuA0mEzScBmsJ17UgDiot4dYv6IKv1UICHNbDHNYDhnW1CPsh3UYf0JUYcxFYSFcaqYK+RpBMrk3xdP1zcP3zMB6It2VkJIwMDq9c35YwCIcOk0CH4WKYGRyGJfayDMRmckBrorxW0xW9X9fN1K1aFXfHuXUys4m0To9qOj0R1xRmz9Srmrx39ebpU82zL+JY0H7mV2KT9EN2STr5GuE8nE66i/sjnitOQprGydVkA7BsVjXZQCxbWE02CMvWV5MNxrKSajIlln1XTaZCMtKkRpdGpNNbwuUt4YvwVDigX2WekXmy4KB61tzEwxk0GpJVgKBMAoROb7lNUIE10LMQibBcDGvfTwwV/WgsFoyHIk5GEDDQ5ed7g8WM1HSkLHq4s6H1pqS4vCV9aTeLZfKB0aNO4+cMpbhPDgX4fkKIIzQNRd2ZQWJJRYOvXyTfoMOTib+Mh2Om45c0ZtKx4nERBgzXz4HHYoZdPgvK4DDO5eMRMGBPhYDvDxmCHvnMY5MraD8QQ2pgLBbYXdG9gZD0khjSUIKkV3/ssHG25Tkr+HxniRPf1s+e76xg82z9+Dy+WI+HZGeJgHSxMhjQGE6QAhaXa0i36HdTaNwOoZPAyZrEWXbtY8Miq8Z3R46QA4d1HqT9Jf6+LC8J35BBx6zg0YW0ZfGt+H1xEgIWk5a1X3OW1wBa1ZEtZDsrCF8WX8iu0hOyXfvQqmyuwYgqgs/m8gwmcz9jwWdPgPa+C1kBpIsvnaUA0pVx0UnLoA+LpCsWadFSWkMBdS1LIuCi6YkLpyfo4YJwhVpZgBIx9Syl8UuELBpjR5yJImax/Ai2gJZwxXD85frDtLBJsNiGLNyTC7LpSw59YSCMxBxkgjhuEjjROChC0zB6VjDkoiHcMJwB3uEi1Tr18qr06vT/rMrfrQCjJEHb5cCneficgNuWNORjVZYY3pVwrdn+LG4Ai+dX39WRzeP6vOUh0zMVQCJko4mBa1shsOGLfbELWFXNLSRQBEOTgyzqG3A4AfVg/PUI8Qhs2GI4R3JtKjqStGHzxc0xH04aCnHyhpHo5kNyimsowv5cwygUjg11nEmYOTlWh50JJ21TAfi+5jktIYFO1zyPdYI3GCTq7SGQ4lLR85WMfs4QmgLgyIxmXqTFZecjNRb3LVcCxabRMAYH4q0zbGyC5yJOwKHhxC8lAMwxEFqUiYvLBG0OTbe4PNYVsCQ4g9Xn3XrAzsNcN3Q8DtXi4aHmJQ1jUDxwRPGj47HCrvfH0+R98YxFPcciiv8Hn3dX9G48AIBDS519eYBcVbF397m3z73dPTPJne50Z58QSLjpJStkYd/CEgirQAKEnYRFvGE6YUmnh7BvSSDIGhKUIFtAwZXnhgouIKIRFQRkFBVRfPpExeXzOfnqV3Xu0jMJ73vfHzP33rPU2erUqapTVU0gwvrZkVIfuILgIgXgM899To9dPF8lwvJUXTpFcoBYkphPdLQAv0z5sbMcFdzA5wt/j5vVrazgRuyom/Dv5jhrzKyJ1kois2NyStdoZW8BwclilsHcO8FaFBUeH/LXiPY21u28jfXJNvazVk5DG7rWqXRwK/Jv43xumqiwqxxJUd1KmnZ5tiUR7adTJIwgdJHXnRoYQfOvtE9UprpGc5SrDrzKHkLZgsQt8hq3CwZ/lLfaHcyN+HfiILrLbN/9o7hZs8VXgHjRuYyic+g/Di0d3A0g3Sn/niQCoqPUqnL9TiEWwGMIjKPQ7jSDxwBCHCQgaoZoZsSRr4o8CMOnA8PvRQgwiCbVuGvctx6J0UR928gc7H3Y+Zswj5tN3+6PeD/0YQz68DHDxX5cuNgH8GjiI+4DviryoD5sAdQHuQ/DZEzg0fEbsGPRdvAJoPKZSrY/HZXXcwN0Tr+FcxrcziqiPIcRIcD+6OzfVwnFyA5Tg7aBdGAEk8IOVzEuT3aFFhJqD0epbCXcW8NTo6a005HZqvkQyLjvxf2kwwL8KM3RwxjjI2HnvpQOOyeVdPAo/Z/cPzwv307wGH+nKjEvPmVKarjsZTt1roQz9IrEfGzlYGryLHa69U41oB/HrD3BA8kGn+QR/H/3QNqvwO1xuNACab8H6/kpOQxaTwKE/xQEm0/jtfEZvH4WiEGL+Dl05/P0D/JoKujGzCL9aaT/h6RnUsEX0aJuolbwJRC3QhLrSFb7csiX7yK6Fa/xFW7fbn2Vz18C+QxAfg2Vi1KZyUfleGURz0ekotr4OjJL4f6wUmcYujYsNVDCLheUOiz6FGo3RqRAL0nxxllqLYogJF11crXLslXwDXT+WQyESXwFMsXIts2DNg8fREsN9GFJGVM1n2N0GgXg5ks1v8n/v4VWvo1/30FTFawJSbCYF6/xvNljL8ge+y4edutFPFa/ILvqe4mJd8OBfrGN/HAswVCHaMn+KqvmQTj9EjT1JaGp2FO1DskOvi8Ih/di8ANZM5tp9UT0b2/QIbNz55idSzs5gokYg9iQV8v2HJPcno6Q1YpubAOCoQkg0j6gVNF4QkTizvwwOSqMacGQMb3MTOBOx4TscExS9EeQ7xdizn4Q0kM71ZfiUF1e48fM2sv4Dvxfjs8TfBW0So70J2YrvYKVezUa6U9lpMhtH6nQn1PFjdaLx/raoLG+3j5WZPPJVAmLvkH/H+Kx/oze+oflJEMHb+KT6ILQh1mpkUemhoX0CWqiSZiLfhYwZC4W7mguxrbNRRspHqekcZ4LnLzE/xk+p6N/msOEuvVzzIszoH+BeXkrmpdfYl6cJnKFgof8336pwnExT9MjYWg90+RUq1glJvhXvIEm1Z3Jyv+12bNSdvchZW9NlB3HRAX8bN3wfmbkoy1m+lS+f1RO+TSZOmT7sqAP41Evwbe5dKSHtF5gdX8wLGH9GFbPTmHFdFSewI8jDH6o5m8oqfkOpouhy/dv+fV3WKcJoEL9PeEn2k0UirGh7bzqCfEBMU99nFf5xrtyvLZQ17Vav+Mmfo+R7SLPYqdT73QH9H+GZ1jekTOsOk4le4h23WTnxoSf0jnp1x8GnaOl1OGnp8aE59hC9BN4+kdzjv1XfI79ic8xRrL3zOb7c0g27bpVqmbaiM17EarFW5D3oM+nJ/bgXzBHPdSpv/KuaC4g+kTcJz+d4H0e6qpITnHdVM9dZv7S0ExAn2dHWrynVWp5398w3L9z34v+PzCJR8dF/H8yRO3/H57y3pfCGqV1m1DmXyx7l9dtxmTkvFzJ2eLloGKoQswO/o0xNOYTZS1kvWyxhV76AxjldjR09raOtoYg3fe+tYMmCtrTppG8ly95mS1eHkqLasHxnADB4Aqu5zZoiDmeg8le1nO5tX6LVs7LDuhDQ/Ie49ea1PI/pSyoyyYKOZkczftM1TwSfV0swhjWGQEVa1jnw5gHtlpHmoPjcEBW1LSdgTQeH9OHqqaFHtn0z99N5GmBUwecTFrwRacFM0juzTVcgTNpMK+cZuXLVCMngEEP+4V7jmm8/xbirMpSyb6jldFQLUTfcpS0Bkmcjvrg9HUJmuS4T9PRpyPN2BaasR0Vse8ZiJ7V5ATl04YZrETzMwMwOsy4Os24unY2rvDZq5rDKLs5HBWaHsDidAy60yGvM5l9Jgl2IS18CcpTEyhLLRTTRmEweL1moc4I05+S6U8ZpUdKf/xkf05XzVHp8Gxm1gj8VzUBbw/AG23gjTHwxgLeOIFXGSrjQPbek9dnfAy8Jw2aahYCshdW1AlFrqi92WhvgmlvF9PexJ31f4Fq7ho3sVs61qsB1hzAmmRgTTawdh/cd9AbO3Ut+7IO5mcviD75DB4ZfcZHcRUwovTBUlKtLVdO6KKlAj8N7UGRqGZdVBGsEp8qx5Ds1XNTuY+0y0pjjH5Mzp4pjDsV/l8FBtXwz8gjOcnXg+QRkj96YnnkZvqex/opw+mMlFpJTqeeBpEQVoeEpNVTsbN5cJ1SOJjGJVQTGxYSFZ7FvAAGLPnTZolqRtqcRjnthBLVB/Tb4B0iSe6FtZtpcH+W4P4eaebJ90xHp83sdCQ1zcHr6lmyPeamzZGTiY+cgdLKkF+ngwfFE+LSTA6LrYJ56cQuJWp2qjI3RBJWW/AbZ9Pe6N8Soxs4VST/00PSEakWcPdZZf75xFDPXlfFimFKDvgfWDtCpPQOxW3HZs6uomzEAI+3wzOquVc60goUVHNvnuV9kLavWSYkWXL2h3sFctU+GM9+Zr73l/k+IB2d5Qfitbm/zO5B6aQcFM4oishRfnXYzy5LGHNz0WyFF80poe/jB9N36BGrHMXcPwo3Zxy7fGukJz4Yo1Gr8RgoLYy2IfiC1iGycM1DIhqgON71vgb+FVS8O6WaqOzPT8vVdPPQNN+IWK3wxT8szUrcLrQMGN3M/QqMWQzD8g/n6nEbg/Nn4kLEFEKZMUPKsJQrRdZwU2j6iLTRL5eNjgjl5xqYOEz9BTHM7h2UWTCoX4PzZ7XBsFgfsD/fo9m4rNC5TM3RNVurqXTU6uBIKrliFe5jDZ68LLYUXJ72kgYql3KlfKmjuouy3EUbOrM9E2ZpXV6Uq3ZkobrXddspL8q75UUdrj3zDV3POHWlKrYz8pRF6x4AGbJLhUypoKsrleXpRRvA3YCx4cq1Ls/2MpPKi4hLcjZVj/JcAh+n9VQ3VefGX5M2JUqPPqdn2Bl+g4C8nExOJFIvwWPZM6/3ZF9nIKfIfGBg/lHAtmAhtoR/NCatpNdfUPIvhh7xmOicfpDqHBjWkcsO2jqNyyCn0Ly0lMt3HzQz1VmZngmd1YXZnkmzDnf1yMXTDlI0MZzt91L5gq3ckcnvjGeXZo7zMqWZIz179Nle5syXC5qKdDiext2Fro7OTlhDfOUZ9ZyTfVmSHOL7L8flFuZc7796+/btDralJnLGfeSB+cuR8orqmT4zo3rmzZises7C29IZRdVzIN4OnaFGVOh9cU9uET3PMs/piyvHq57sdE2vi35ICbnFPWfRS8HQuDzfkTGsVRGsU2bk0JJDLU3HBVJO9+wytaJ7/MXzHWMCEv455i/81j1nyHWR+f2HQyI6mrH5Wgq2LlZoBmKVZmpLrb9gRr63kxIbx9JQV9Ekupa9SJLHRMlEj6a7kWGQatKOsksz5qpJzeF8jVnk/wWkSiYxavwf2cFxBGJRa7j8mgRyK9dHdGoYUu0WA7DWbSE0b3lCT2zmjcROQtrTyr+UBS+GLW1PypUFtLY2h3tvVlSvwHexijhIeuFN1CpEXSUI3SGEboawqfLtIW0N58+CNFqS78bxwOm+E8wBOM7cyVjTdaT7Uf6J2BNWvbO0jg62dOMk+qzWLfwOiTDfV/JlOZhvJHG6vweozp7QIaJ4awRm4ugQVCKNyDE/e+Or6N2t2IipNRqZd6lmGY2VaPxICP6pcQMPIGWehLK5S4QM+aEUG37RnI1EnfmqcX06pVsjuSDXfp9qB6eAFyO5Kjg1zbfLyNfBaWmoc/ke7e3+nFMjBoYviCW/InfEu6V6DpY7YurYqLaO/QUdu8qi9kZxe/gPbTc6aG7gZwus+GtU/EUHQoPYd12ZSGfoDXiZqRo9Np0aN5q7Novt8g5mHUeR2slxtg4q9D+vLMdfh4KzlbWiD6qgte1ywiGD66mAtob2p3Btx2q00CabQvAb6uEua35cT/Pk5zUP1f+dSukO5biNfNo0eyWavc3gEeqjv4cm60cV0V+pyC3ym+z3w0Lca6ygnrXGYC4bS7DeY/n3XUJUOThCFZu+liURZ7xsx3H8kzcfBAcoiMKVQ626hmQSVUfOuCE540zOGPMca5495kRv8cspApRpL78Fp1MPKrerxulofgL35Ay87hL1hOpOFEQGz0/kHPPgWcH3aN6gNbOCV3kGreA1LNpsyBDK6Vb+Fpy5C1UTUIOzmPsDVMoKzqav+m6WagJycA64tX5UngPNoCnmBudSen+HAXAeffzMNbi+R2r2hWJmiT7NENtJT0qWgqXg/scKGMvmxnL9JjdYBjh28bhSRYe6CJXqSg0fL/BmmmLnJ3g36hX0bN6gtV0xh0196p7/Ak1iiS1/+JeGVtFcYF79mwl3dPLewAbOgoYNhrVSYNW62qvarLfNS9qE53EeWcFpyJ+b5LX72qGZ4rAU9C9IChEHifbnQhy685IA9lKW1dhOyA9RRldeV/6H04PJHnD5piQu78q43LgY6LKbnCk6tZUaPZLx4yNQhfw4BZWHT3xEtb6Y
*/