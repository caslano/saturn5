// Copyright David Abrahams 2002.
// Distributed under the Boost Software License, Version 1.0. (See
// accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
#ifndef DECORATED_TYPE_ID_DWA2002517_HPP
# define DECORATED_TYPE_ID_DWA2002517_HPP

# include <boost/python/type_id.hpp>
# include <boost/python/detail/indirect_traits.hpp>
# include <boost/python/detail/type_traits.hpp>

namespace boost { namespace python { namespace detail { 

struct decorated_type_info : totally_ordered<decorated_type_info>
{
    enum decoration { const_ = 0x1, volatile_ = 0x2, reference = 0x4 };
    
    decorated_type_info(type_info, decoration = decoration());

    inline bool operator<(decorated_type_info const& rhs) const;
    inline bool operator==(decorated_type_info const& rhs) const;

    friend BOOST_PYTHON_DECL std::ostream& operator<<(std::ostream&, decorated_type_info const&);

    operator type_info const&() const;
 private: // type
    typedef type_info base_id_t;
    
 private: // data members
    decoration m_decoration;
    base_id_t m_base_type;
};

template <class T>
inline decorated_type_info decorated_type_id(boost::type<T>* = 0)
{
    return decorated_type_info(
        type_id<T>()
        , decorated_type_info::decoration(
            (is_const<T>::value || indirect_traits::is_reference_to_const<T>::value
             ? decorated_type_info::const_ : 0)
            | (is_volatile<T>::value || indirect_traits::is_reference_to_volatile<T>::value
               ? decorated_type_info::volatile_ : 0)
            | (is_reference<T>::value ? decorated_type_info::reference : 0)
            )
        );
}

inline decorated_type_info::decorated_type_info(type_info base_t, decoration decoration)
    : m_decoration(decoration)
    , m_base_type(base_t)
{
}

inline bool decorated_type_info::operator<(decorated_type_info const& rhs) const
{
    return m_decoration < rhs.m_decoration
      || (m_decoration == rhs.m_decoration
          && m_base_type < rhs.m_base_type);
}

inline bool decorated_type_info::operator==(decorated_type_info const& rhs) const
{
    return m_decoration == rhs.m_decoration && m_base_type == rhs.m_base_type;
}

inline decorated_type_info::operator type_info const&() const
{
    return m_base_type;
}

BOOST_PYTHON_DECL std::ostream& operator<<(std::ostream&, decorated_type_info const&);

}}} // namespace boost::python::detail

#endif // DECORATED_TYPE_ID_DWA2002517_HPP

/* decorated_type_id.hpp
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
*/