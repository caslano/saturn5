// Copyright David Abrahams 2002.
// Distributed under the Boost Software License, Version 1.0. (See
// accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
#ifndef PREPROCESSOR_DWA200247_HPP
# define PREPROCESSOR_DWA200247_HPP

# include <boost/preprocessor/cat.hpp>
# include <boost/preprocessor/comma_if.hpp>
# include <boost/preprocessor/repeat.hpp>
# include <boost/preprocessor/tuple/elem.hpp>

// stuff that should be in the preprocessor library

# define BOOST_PYTHON_APPLY(x) BOOST_PP_CAT(BOOST_PYTHON_APPLY_, x)

# define BOOST_PYTHON_APPLY_BOOST_PYTHON_ITEM(v) v
# define BOOST_PYTHON_APPLY_BOOST_PYTHON_NIL

// cv-qualifiers

# if !defined(__MWERKS__) || __MWERKS__ > 0x2407
#  define BOOST_PYTHON_CV_COUNT 4
# else
#  define BOOST_PYTHON_CV_COUNT 1
# endif

# ifndef BOOST_PYTHON_MAX_ARITY
#  define BOOST_PYTHON_MAX_ARITY 15
# endif

# ifndef BOOST_PYTHON_MAX_BASES
#  define BOOST_PYTHON_MAX_BASES 10
# endif 

# define BOOST_PYTHON_CV_QUALIFIER(i)                          \
    BOOST_PYTHON_APPLY(                                        \
        BOOST_PP_TUPLE_ELEM(4, i, BOOST_PYTHON_CV_QUALIFIER_I) \
    )

# define BOOST_PYTHON_CV_QUALIFIER_I      \
    (                                     \
        BOOST_PYTHON_NIL,                 \
        BOOST_PYTHON_ITEM(const),         \
        BOOST_PYTHON_ITEM(volatile),      \
        BOOST_PYTHON_ITEM(const volatile) \
    )

// enumerators
# define BOOST_PYTHON_UNARY_ENUM(c, text) BOOST_PP_REPEAT(c, BOOST_PYTHON_UNARY_ENUM_I, text)
# define BOOST_PYTHON_UNARY_ENUM_I(z, n, text) BOOST_PP_COMMA_IF(n) text ## n

# define BOOST_PYTHON_BINARY_ENUM(c, a, b) BOOST_PP_REPEAT(c, BOOST_PYTHON_BINARY_ENUM_I, (a, b))
# define BOOST_PYTHON_BINARY_ENUM_I(z, n, _) BOOST_PP_COMMA_IF(n) BOOST_PP_CAT(BOOST_PP_TUPLE_ELEM(2, 0, _), n) BOOST_PP_CAT(BOOST_PP_TUPLE_ELEM(2, 1, _), n)

# define BOOST_PYTHON_ENUM_WITH_DEFAULT(c, text, def) BOOST_PP_REPEAT(c, BOOST_PYTHON_ENUM_WITH_DEFAULT_I, (text, def))
# define BOOST_PYTHON_ENUM_WITH_DEFAULT_I(z, n, _) BOOST_PP_COMMA_IF(n) BOOST_PP_CAT(BOOST_PP_TUPLE_ELEM(2, 0, _), n) = BOOST_PP_TUPLE_ELEM(2, 1, _)

// fixed text (no commas)
# define BOOST_PYTHON_FIXED(z, n, text) text

// flags
# define BOOST_PYTHON_FUNCTION_POINTER 0x0001
# define BOOST_PYTHON_POINTER_TO_MEMBER 0x0002

#endif // PREPROCESSOR_DWA200247_HPP

/* preprocessor.hpp
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
*/