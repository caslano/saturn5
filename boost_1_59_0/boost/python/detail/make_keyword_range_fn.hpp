// Copyright David Abrahams 2002.
// Distributed under the Boost Software License, Version 1.0. (See
// accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
#ifndef MAKE_KEYWORD_RANGE_FN_DWA2002927_HPP
# define MAKE_KEYWORD_RANGE_FN_DWA2002927_HPP

# include <boost/python/make_function.hpp>
# include <boost/python/args_fwd.hpp>

# include <boost/python/object/make_holder.hpp>

# include <boost/mpl/size.hpp>


namespace boost { namespace python { namespace detail { 

// Think of this as a version of make_function without a compile-time
// check that the size of kw is no greater than the expected arity of
// F. This version is needed when defining functions with default
// arguments, because compile-time information about the number of
// keywords is missing for all but the initial function definition.
//
// @group make_keyword_range_function {
template <class F, class Policies>
object make_keyword_range_function(
    F f
  , Policies const& policies
  , keyword_range const& kw)
{
    return detail::make_function_aux(
        f, policies, detail::get_signature(f), kw, mpl::int_<0>());
}

template <class F, class Policies, class Signature>
object make_keyword_range_function(
    F f
  , Policies const& policies
  , keyword_range const& kw
  , Signature const& sig)
{
    return detail::make_function_aux(
        f, policies, sig, kw, mpl::int_<0>());
}
// }

// Builds an '__init__' function which inserts the given Holder type
// in a wrapped C++ class instance. ArgList is an MPL type sequence
// describing the C++ argument types to be passed to Holder's
// constructor.
//
// Holder and ArgList are intended to be explicitly specified. 
template <class ArgList, class Arity, class Holder, class CallPolicies>
object make_keyword_range_constructor(
    CallPolicies const& policies        // The CallPolicies with which to invoke the Holder's constructor
    , detail::keyword_range const& kw   // The (possibly empty) set of associated argument keywords
    , Holder* = 0                       
    , ArgList* = 0, Arity* = 0)
{
#if !defined( BOOST_PYTHON_NO_PY_SIGNATURES) && defined( BOOST_PYTHON_PY_SIGNATURES_PROPER_INIT_SELF_TYPE)
    python_class<BOOST_DEDUCED_TYPENAME Holder::value_type>::register_();
#endif
    return detail::make_keyword_range_function(
        objects::make_holder<Arity::value>
            ::template apply<Holder,ArgList>::execute
        , policies
        , kw);
}

}}} // namespace boost::python::detail

#endif // MAKE_KEYWORD_RANGE_FN_DWA2002927_HPP

/* make_keyword_range_fn.hpp
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
*/