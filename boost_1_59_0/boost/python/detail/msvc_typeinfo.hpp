// Copyright David Abrahams 2002.
// Distributed under the Boost Software License, Version 1.0. (See
// accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
#ifndef MSVC_TYPEINFO_DWA200222_HPP
# define MSVC_TYPEINFO_DWA200222_HPP

#include <typeinfo>
#include <boost/type.hpp>

//
// Fix for icc's broken typeid() implementation which doesn't strip
// decoration. This fix doesn't handle cv-qualified array types. It
// could probably be done, but I haven't figured it out yet.
//

// Note: This file is badly named. It initially was MSVC specific, but was
// extended to cover intel too. Now the old version of MSVC is no longer
// supported, but the intel version is still supported.

# if defined(BOOST_INTEL_CXX_VERSION) && BOOST_INTEL_CXX_VERSION <= 700

namespace boost { namespace python { namespace detail { 

typedef std::type_info const& typeinfo;

template <class T>
static typeinfo typeid_nonref(T const volatile*) { return typeid(T); }

template <class T>
inline typeinfo typeid_ref_1(T&(*)())
{
    return detail::typeid_nonref((T*)0);
}

// A non-reference
template <class T>
inline typeinfo typeid_ref(type<T>*, T&(*)(type<T>))
{
    return detail::typeid_nonref((T*)0);
}

// A reference
template <class T>
inline typeinfo typeid_ref(type<T>*, ...)
{
    return detail::typeid_ref_1((T(*)())0);
}

#if defined(BOOST_MSVC) || (defined(__BORLANDC__) && !defined(BOOST_DISABLE_WIN32))
#   define BOOST_PYTT_DECL __cdecl
#else
#   define BOOST_PYTT_DECL /**/
#endif

template< typename T > T&(* is_ref_tester1(type<T>) )(type<T>) { return 0; }
inline char BOOST_PYTT_DECL is_ref_tester1(...) { return 0; }

template <class T>
inline typeinfo msvc_typeid(boost::type<T>*)
{
    return detail::typeid_ref(
        (boost::type<T>*)0, detail::is_ref_tester1(type<T>())
        );
}

template <>
inline typeinfo msvc_typeid<void>(boost::type<void>*)
{
    return typeid(void);
}

#  ifndef NDEBUG
inline typeinfo assert_array_typeid_compiles()
{
    return msvc_typeid((boost::type<char const[3]>*)0)
        , msvc_typeid((boost::type<char[3]>*)0);
}
#  endif

}}} // namespace boost::python::detail

# endif // BOOST_INTEL_CXX_VERSION
#endif // MSVC_TYPEINFO_DWA200222_HPP

/* msvc_typeinfo.hpp
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
*/