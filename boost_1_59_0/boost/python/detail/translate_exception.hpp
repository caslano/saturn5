// Copyright David Abrahams 2002.
// Distributed under the Boost Software License, Version 1.0. (See
// accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
#ifndef TRANSLATE_EXCEPTION_TDS20091020_HPP
# define TRANSLATE_EXCEPTION_TDS20091020_HPP

# include <boost/python/detail/exception_handler.hpp>
# include <boost/python/detail/type_traits.hpp>

# include <boost/call_traits.hpp>

# include <boost/function/function0.hpp>

namespace boost { namespace python { namespace detail { 

// A ternary function object used to translate C++ exceptions of type
// ExceptionType into Python exceptions by invoking an object of type
// Translate. Typically the translate function will be curried with
// boost::bind().
template <class ExceptionType, class Translate>
struct translate_exception
{
// workaround for broken gcc that ships with SuSE 9.0 and SuSE 9.1
# if defined(__linux__) && defined(__GNUC__) \
    && BOOST_WORKAROUND(__GNUC__, == 3) \
    && BOOST_WORKAROUND(__GNUC_MINOR__, == 3) \
    && (BOOST_WORKAROUND(__GNUC_PATCHLEVEL__, == 1) \
        || BOOST_WORKAROUND(__GNUC_PATCHLEVEL__, == 3))
    typedef typename remove_reference<
        typename add_const<ExceptionType>::type
    >::type exception_non_ref;
# else
    typedef typename add_lvalue_reference<
        typename add_const<ExceptionType>::type
    >::type exception_cref;
# endif
    
    inline bool operator()(
        exception_handler const& handler
      , function0<void> const& f
      , typename call_traits<Translate>::param_type translate) const
    {
        try
        {
            return handler(f);
        }
// workaround for broken gcc that ships with SuSE 9.0 and SuSE 9.1
# if defined(__linux__) && defined(__GNUC__) \
    && BOOST_WORKAROUND(__GNUC__, == 3) \
    && BOOST_WORKAROUND(__GNUC_MINOR__, == 3) \
    && (BOOST_WORKAROUND(__GNUC_PATCHLEVEL__, == 1) \
        || BOOST_WORKAROUND(__GNUC_PATCHLEVEL__, == 3))
        catch(exception_non_ref& e)
# else
        catch(exception_cref e)
# endif
        {
            translate(e);
            return true;
        }
    }
};

}}} // namespace boost::python::detail

#endif // TRANSLATE_EXCEPTION_DWA2002810_HPP

/* translate_exception.hpp
ZpNBsSq2B5XZyUKnGTt5Icvqgk5Nfbc6GTWaQMNr1KwPjZTrTE00d3DAJEhWIHIHAVgQKO5KSLrwg7tlMKI9qqKSxgYRmKtsSKw9dut/x57w9fcu7bMJsuxj2LBPKULiN56QsGfuaxsurcI+0+VYFkBDXembXVdTIQ+UYYGMdlSfoQIioK3rWovlqv+czDpR/Fpt5JCzKNWgu3ZkmzYCXQlIl+mUUCqrhp8o43PH3sdrRghff4QZYZaxAn7w7W8zGqPVb5ewp66poU9BWtXHvayXj3rO4vH+6JC3J2ScbE1Pv+WzdXmyVkKVXJ/CZFsDZdhfnaVIORdXpmE2ZcojyNiRoNQqpHEnBFybgigQBs9qQnj24KYdNO/d0LjO9TBBe54qKj4oMyJxs8f8b049bQnmpT8wCvcb6IIPwk6QD7uMrvRGlNhPOCybK14VcAKUvCYon/bmBcKM1OVwaCJ/xXssyAcUKy3yIP6D3M4qUw6EpfCgrGIgUpdfhoNaKXqMq0+3QYud8IVvmkhmwRzf8Xk2WKp/6h+t6XKGRAE17IpE0/AF0+cpG3Xpm6G6Mz/2DIVU+MY49LJdcoXcp1RwAAIs/dM+XwWdkm4MY3xrwwfgO1xZjxHzPplbHqsjzpg0lNVJrYOOnDPb2S8fHDrYRyaYkm+gWkWpe+PcI3bu9fvOVHsg5B1AHpIbdr84ceHDsrqeajnOgTZDm8znhVYhoObMWOYY4mClM01DWGqmjLL/10XVHO3s3jOs2kHWyYROCk2CqF48Mh9dd1mNd1cgJTlrOJpAP8k6fuieSOJk65KUcn+6IkjYTVmM1Ho5JBcE0nn1k4P4WTWcNC9zmEUfsTbTI+UMmjGjy4X5duJLF5xz2U6iGkR2pWA2ZUDXpFrrluTbXOyw/AbUHRCKdBztwDytCAiR49WQpYFZ44/ykgzgkAzZdw/WN+AthRnvcKJ42GDY+QCdhZ/T2B7HAAM8HZ2jXM01UZXqdIJqN+w2ppuSbj/kF84ScW/0bqDHESWC5ZjHI3IoB7+BJ2836AnT54Ra7qAX2zgI9d2lqbZO6pyayUls3Vc8Cdn9DYB/aMZc6M0VWx4RdFg/OaBqMBC61RJORRESQR75DrWOwIKFPZS45VA1EbfffHRrNHPkZtzilhHGengdKtXjXh618QlDZBjszqbyfyi0wmKYlyr4B8ZKstRSmROWLIHa0Q1CrGDt83yHVs78LkhFm4tljF46pjX3PMMHBwIq+dPJ68rgY5mBFAcZWZEQrmzs50IO+tFHaZFLzAqV+esoB9N+NOxJk/Bu7IDUNXHTgHyPeH6jDntXeCYcYcGw95Oz2pdihdDmif0kTsmPLPZNbB8oralDuGSnDkuZ6POZjJgVCMH/2OTA6L7X59/VBx1y0CUIbMmerUogTx+xGMx0cxoJyko3pCGuQ5A8xRjUhV/LDug0rhgyBK5lqHj63k8pWPlZxXBy/xV4j4fxj/iD+ADf6+x7Sa4pomCwZnxwrXhXGCxIk2gV/+MseXDZYEy4VG4402CprjtAPwCMiHTCE3l4edduTng6d90D1aqeOPi8DgKc8hC0Kvk32gPYnkgNjYYqAgl1ioKKyKSCBwJbPqt6nSbf3FhHoa6Gnu3vSuxsfUBjEQn+pDOA71vhOBM3uI6Pam1I0g+oVqDRNHaotpNEWfg98RClTwJJvqatJmeyV2zynLVy1m4oElmDUcyt1gFD1oOSfKlQEFw5Jqyk1AVuNXhUWLfihl9jkL45l5q/+9+wF2dpWnnlnITau8UWMEtN87gn/uHesTe6koRLj364F0w9kloagxl+6z6kCzUAM9XsqvRMVeP4J/7973mT3uM9yzsHWVcjL59BDFCZJVg50mhauPFFmg/GIFHIOwWlTmwkgexLpY5KFwDisNKwFJnLW7ytknRVSIZUCaoiohGOSHZPjgZ9aRJgQ9uW0FRlCAdmQEcuQR3Wub+KfRGaRu5m8HwNOb2KM1cGmfNcq4a34ksGpxmhYvjlLo7dax36foHC2jBBT95eAfb9UatMFwa798QRN9JFbYF3WfSvmLCT+/jHWlGNaVO2F1TDswrB1JfaD0NOitg0fFWQ0+yZwmZH0HfgWKBEmBEOMGxJvFeAoT4qgAxK/z6Fp6PZMck723qso0rA1mXJk1oa6X+7ydGOY3suMcn8xEHwDoFIvvwrBkbSFzLQjNVUo5O+Ufr/ZPwOwSTUMt/g/JQsGuGS1sw2ScAsE21DpQJprZg1Pa238lZjvNcoplogoTRnUjSHPO8FAAfMMvkwQHylQTTVSYd6ZB7zPP1iQrHkPwsuP1EunHtHmqlac2Bb6bRuAYXV4eKXP/kS4T72256/+HrTNW9xrmyrQjkEqgcvaAHUeFvduj3zeuPBqC75eFt1iouJVgtpuY5V3n2RRxwLe6rQ6Dbs2NV2YESWbAgQqMzRTbZ11lrwFyWs2KB2QPUh+Oym/KlQ60JLu2ltA0CJnMb3+U4Q7wCKg3S7vPnoHvnce3IOP9+xRpdsvNC0IDRhWNUELmA7WCenFKOteUoEiGlgl8JI6kG7Sxf+Y6FnzxVhCU7WcwWOoCeoupVivgkGjrLl25eL/cL/10Q1A0INWxkJdN1QlQqnj2Ulj6q6P6zwrxNLJBVEyH4o0g0tQAW7cNWGekpwjpcsoREaOa4QkkxtxTEpXUWFKyKM5ir9hL9uzBbsjAEEXln+fpJ8bFS96ttiUSKuaFlrZgKOUT1H4xoIdoajkzNzoyXolXPpB9APmjs53VqPFkodrZhjqLhf72KIM4yxCgjHf9XYYpYFbImPzF91xkHUr0wZWBPRgxq5dFeboXuKfzCqJAAeSwC7h6MzeK/0yqbSC3hQ0ZMHMNekz4dup/hTLb5cY6ap70DPQoIbsBpuqRALTYCLI7iIUSmWP2evW9+3tRTrG8dUhCVL6BB0wqN6p2TJ8Fc7JPmQCR6Y39OaFh1LD4OhjwGC8npi5DUbD36Wz8sveSQMeApsrO0WDg/hAQARUSBQTMrvCwiHT9U1Vi3czGLyJqXj5CyD30pHVU7egShEmD0KToIOynEGwb3laA9Ys3GoprgIwJJFTzq8gXhCQolKXr7AIrwCkVlyKalMs6BGaBARhjgjxYxivkFIMryFeEND/FSXGLumqBBAG3NOucAUAtSp96Ix0wG0FPzG0Y53I3Fu0NUcEu09psIaWqAhIygfAUoY/aFOJCgfelIQvaCOISgfLFIAXaEOJygfUJIfHbAOMkieE4oP3djxOkgeIVUYfdhOGCJnMI/G0C1klIQ3FXa2XdBdti07GO0pHrWUDmO2CIiVWga/vwEEG4OdLfXptFEcNte5C41L1o7NHuuXe2Zu2iaChxmoCYrFCJr2nXldd6ZkgNLn+kWHfNAp7DS9W1mjY5/Z4e+RJz2WkK9JOgqQvZ/DzTF8j39DJn1BoqQaYgzAtPcVpXsZQmVOIN7ifXn+8SenV2ZLQKhIeTZhIQQGZtlEAKTI1A/y6zphE+AzfDSDWNfo77Dc4etmHEaSS6Dv0udVtZtG80p6Y30f/+Qb+YpwYz+FrxzpDJY/bzcxWPxO5/4exTYJ8FjhzsFmcNLh2SN6B9GA8NhnYfjfa/ssLgg3rGX3wvR11kZOynVPN5EWq9roeO4dwQYizEkGvahDJC8xVLzMfxQza1hQlQ7A4idiAu+Ab5Yf/D1D+EFxJEX45OaJfPhP4PlMcQtBhHyB6o7BQUlFT3iim2Pfsa8natUP8RefTbY7z7OcP5/ftjyRGmPAQBcw/2UTWdwyAy1V/tdsAgOaxNh4wiQW1Hy8KDTtsHxEogLa91kAr0oR1g5M9h+0gtHwU3815EculQW2TeJfi09dXTKgofHlab46XnIXOypmvjVzESPFR+9jAakGdaLmzvVSDIfoUIz3nRjvQmCBthHhuyHSSfCL+5jFrC+N5Ow1yZ6iL9sBmPjMcOB9QEZ/oVXtZNJxbx+npm/oFytCe5G62Q2IFB5+q1iFH8Iqtl9OCmRYTg46xEAm8IEGEeI6P29XMUYBwEaZBp8NpU4TWJWsDQKEtd9umKktl4iuTZpd0s5iUAYBXdO/Hhk9sn8tWo9iUCouwOeThZ4Z8uP60lQB+WlT9agb9WmTNbdcYc5WFzOxKG+XZiPHZgIpfDvyFvlssigDoALDTMERcXmv1nZcQPZjmNO/FjnuVXYv5jNXFICuXoDb4zT6AsmbYjWmHUnJhuZEpXKLa+q5UgvsZKVsy2uqWrkdJI1T/hg1B+xFMIhbCbqViXcAOs6pdEu4j2p87U5ElJCKj+UmOsG0yJ6TRWd9jq3IOG9P7NB9zU1Z8BC9WeQfLRa2tLhKG/UIpOyS4HhSo6TNiMk+oAMxXbGIIob5WA8oQT9oPJ60uvj+pgGyTwEOgqq439gCDYwDCSQ9hoAU4FBRgBigJWHpMi9hWOVz2JtEMkM6cnitSlwiolqEfzdIX59cMBUA4XeU8QoGtWSNssNFTwqxbPnpbhPV0xOfifBVv8AUztSMERxqxlrgehq3G8jogzGi9DU/YbKrXL1UsWQkbMph31hSYw1B+5ewGUF00g6atFzn8Fpike/mD2NDuTo94ji/DRAq9sKER17ysFOIE66+iS8OpB+zN4Rww2nYhclT9F5N0fWMlgHMiI3UMexPnjAj2FwMWZG8vbRzApvzN+0iY4SdLE+hllXqLFnyyYRpEtHjEaPEG+x71IB3j5dIew8fT+GUGlmufBdaAkNgQXdcAgZyDkgog2I7pl2SQ1068N3wZ77bNAF0PALmohdeNCQ4SGNV6K/kHi5wFChZIf5sEPE8TvDvbf9v7F7vr3S0EEV5PNJQbY4gSs8vMQ0pziNVMlc/sdDjrOI4a11RBwgQwEbS1/C/vaqY5hOkMEsc8qxv3MOeyoCeYnv8dGQAWm0KotSDKx78dWRTV/ATxY8hPrqBhX/46yit5JDjtWyb+UrQPtoatT6pSzJLz1UR5y0raIAyXiAOQLU/L2v1HpgMdHyZsCUEtWlCHBq8uYMS9DXOGKDA50e+pb2JzjkcBE2sRyjxKXQpb2xHi0rK4nIgpgoBcU42t4D7fzW6il1+q2hK3h0f8vFA06bFDQXptPaQkQQ1DdkAZtCxfxux42JD50ewsA0glxaRx5qyeGY+PoPZDWLZZMFpoJLJWBRf704owJ0VBJvhyx2fdkOxKtku4iyAMBK3v3NrfTAU9CqKoa5wIZbT+1J0HxxHl0GqfItTYlLegXOHE0HJOi/eMnGg4ou4wRXgXXJUKkOYdYnkKDmLFsu2EvnOcsQ7qm7YByqQroHCpcY0h0etjuapBCteB2MOQe1rv75aKuYEciqhjsDsM5BbkWK8yjqJlCv6Ufurr/DNw7j0At8mOvMcS4J/Szz3VnP1W8HviaPNBPrPb1xw7aqLaKXLaAVNlIo2euUHvMq3hop3WIUPYeVNlMo2RqUHm8aznRpKViKO7I8AlvO1uVVnaFxDVxw5mzUtnisAWZAu4Wjp8GiGeuAsY6LwceeFFagpKq62CkMBV39ywUcqFr3/Sz88CJEz6b58tt0EEiIHKuIxLAC8i6Sl3xaqbzBZJ4oemjFMOhh/MhJGALMLR8OT7HAgJ/zoy4Bbqoi1yZbshlJgR+qqvYTCCjl1ndhIQPQHJH1kW7gZ/U23lqy68RzyQVurkmZPov0twXGYz3x2jGgm4BJ51fOXPnTKh8eRlCPxA8bCsyOCti8SeUimwK6dCg39d0IDeJMnMyv0M4zNUS4ALYYwwRs7p+0/ox92+vTcTPGT3EWhk1MCht2/vG52XopH7+kLAOydmN03PFTt7NS49FbM4wob8SoAVaLdQZXs9XajR2ZTEM1e37ohQvMw9gxLWZCLlt3MdAoB/veN6LuDZFs7jXoUyZkvc+KZa6xHkE/Mmn0f3P1s0Qcwlm20hz9Uw4bOBN6eieLcU3vrrFNqs8anFttemYJ33TwOFSiDHnn7WawjkPiNmubMarMRwukT55/2BqjCF4ZHrj9yb7nYvRuB8EauJIBNOcIN1bav3MK+XBaseVezLoAM6GHwCNw+0U5I61h+IRSSXeZZTHlfmALaAVnf/MTiaeNKGQYOGd9y74jy1CUXd1pgzH1gh/IU2iCDdIo9gMj8gwa2GagmTnZfEuihYkEgAenLDrJYHmpSNDFmzo+qYenVbRrCIcdDM+QCdvuhu2DDANI8DP92vUl/5Zb7cmh87jPLIIDgfh9hEO9ALoFrXaherD6bCrlt/01bUBx0rySYczlXr33gmqZkn0KBW1p2l45sKH9gmuo3KkhBOdYMDnn8IalXl23gIwBKAdOoDCJGsdD+B86i40Vjwg442bxUZm2ncORZXuaySIwj3VkSDfEY7/XdHBZtAGdKlmn8leLSswpdNQZ5s5/CIXkcGJbKWV7EEHXVJ/QZUSyB0eXcT0yPziS3FiWA068tvGuq2iNsYm9Qo3vlNx19s0asRQBH6jF2CdtiE/Mr3Xu/pnTa6S6Btid7ow1tNabkfG02faDajGSTcKsF6KjDwCP+dFuGAbvztU+EwSJDs/JdRH3vYDkm++I08cc9KHwO3jwkB2rVnngTn9+Qby0s46KLTBt7JRMrIcPKaL/AYy92WxhDCmuAvBaGvZnv7bxC6jGucEaOMUqENnllXRWlPgrHp4n/P7QXcvyBBE2yRL8dCK7egmItVU6Xq7QHGH2qu8eyyzHnVCgrU6vWuitGvWoeCU43s1+tJYpxwnNwVZoMM96tDKK0Vl1Z/V06VVZSicHxqDvcQeKbPnXXg8tEPVMvsIicbkrCLu45M/Yr/VksqLQaKChF2BEYOqozWUniUdr//MbAfZRvu9foObsNtfl0K3MYqDMwx5KilJVMEXI/WkheFL3W3k7KQkhi3Vglr60jpVonnDArTZHSEhb806n5RQrbUiYD21CR1yHk5LM2RGTLiUs881aZkLhlrF3lTPTS9QXWcWijLPC1zR2gsj3uH1UibPdNsQJ0OHE3Hs1w4/8JDF4ip42c/It1FrWqInH+8Y2hBOQK+4RRIrKa1obWkLoxmAt4WIPeAGdmS4Lgg3RTBXpK8RKyXR/AGaNeAGIfihnB5zBMrLdRwM+y4E++89jp/suQ3jFD16rJPtG3RqOe2KNd/2WHbyYx2od5hzQoBnCGi5GmyovP2bpB3ipQ7fXsWXk7Dq535ArVB//oZy0kRXrQcxo+hVfDEM9tjKy495OhVyJJ7AKxh3DkeqEx4sirEXkPfPVUP3gXAReuft/wcafkoyf32XYrN0NlPeh3KiggRzQY52t2B4C2q8EyzPX5iqqOe5ecx38aeBj5kHA76CJxM+DOEyb+FQs+y5+RxHIZWUgweHvg/nQRebFAoGn9AJn5b35VYxo9m4hQ2OCDMB3xhgUjGBRl9HotmZIEaUW8ogFz1JCM//3k1jOKL74imymI+vtIXwNd7NRwYgWBIH9aYXDUwY9ZZF72QtBisrQmB7dXx13utwE5bo7REVGc6BmtUf5bWMXbJ97ab2FTC+1/2S1A6O/RHaNwyKeM0irb06BrKpG2F0YcYUHne8tgcYtdRnWX10xkx/sJ/CjP9jPdcfGZ4/4Puo20NPOq5r9hz0QtoVe/
*/