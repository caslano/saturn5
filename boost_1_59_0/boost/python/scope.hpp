// Copyright David Abrahams 2002.
// Distributed under the Boost Software License, Version 1.0. (See
// accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
#ifndef SCOPE_DWA2002724_HPP
# define SCOPE_DWA2002724_HPP

# include <boost/python/detail/prefix.hpp>
# include <boost/python/object.hpp>
# include <boost/python/refcount.hpp>

namespace boost { namespace python { 

namespace detail
{
  // Making this a namespace-scope variable to avoid Cygwin issues.
  // Use a PyObject* to avoid problems with static destruction after Py_Finalize
  extern BOOST_PYTHON_DECL PyObject* current_scope;
}

class scope
  : public object
{
 public:
    inline scope(scope const&);
    inline scope(object const&);
    inline scope();
    inline ~scope();
    
 private: // data members
    PyObject* m_previous_scope;

 private: // unimplemented functions
    void operator=(scope const&);
};

inline scope::scope(object const& new_scope)
    : object(new_scope)
    , m_previous_scope(detail::current_scope)
{
    detail::current_scope = python::incref(new_scope.ptr());
}

inline scope::scope()
    : object(detail::borrowed_reference(
                 detail::current_scope ? detail::current_scope : Py_None
                 ))
    , m_previous_scope(python::xincref(detail::current_scope))
{
}

inline scope::~scope()
{
    python::xdecref(detail::current_scope);
    detail::current_scope = m_previous_scope;
}

namespace converter
{
  template <>
  struct object_manager_traits<scope>
      : object_manager_traits<object>
  {
  };
}

// Placing this after the specialization above suppresses a CWPro8.3 bug
inline scope::scope(scope const& new_scope)
    : object(new_scope)
    , m_previous_scope(detail::current_scope)
{
    detail::current_scope = python::incref(new_scope.ptr());
}

}} // namespace boost::python

#endif // SCOPE_DWA2002724_HPP

/* scope.hpp
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
*/