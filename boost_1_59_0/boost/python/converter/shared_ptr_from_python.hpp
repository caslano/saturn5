// Copyright David Abrahams 2002.
// Copyright Stefan Seefeld 2016.
// Distributed under the Boost Software License, Version 1.0. (See
// accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

#ifndef boost_python_converter_shared_ptr_from_python_hpp_
#define boost_python_converter_shared_ptr_from_python_hpp_

#include <boost/python/handle.hpp>
#include <boost/python/converter/shared_ptr_deleter.hpp>
#include <boost/python/converter/from_python.hpp>
#include <boost/python/converter/rvalue_from_python_data.hpp>
#include <boost/python/converter/registered.hpp>
#ifndef BOOST_PYTHON_NO_PY_SIGNATURES
# include <boost/python/converter/pytype_function.hpp>
#endif
#include <boost/shared_ptr.hpp>
#include <memory>

namespace boost { namespace python { namespace converter { 

template <class T, template <typename> class SP>
struct shared_ptr_from_python
{
  shared_ptr_from_python()
  {
    converter::registry::insert(&convertible, &construct, type_id<SP<T> >()
#ifndef BOOST_PYTHON_NO_PY_SIGNATURES
				, &converter::expected_from_python_type_direct<T>::get_pytype
#endif
				);
  }

 private:
  static void* convertible(PyObject* p)
  {
    if (p == Py_None)
      return p;
        
    return converter::get_lvalue_from_python(p, registered<T>::converters);
  }
    
  static void construct(PyObject* source, rvalue_from_python_stage1_data* data)
  {
    void* const storage = ((converter::rvalue_from_python_storage<SP<T> >*)data)->storage.bytes;
    // Deal with the "None" case.
    if (data->convertible == source)
      new (storage) SP<T>();
    else
    {
      void *const storage = ((converter::rvalue_from_python_storage<SP<T> >*)data)->storage.bytes;
      // Deal with the "None" case.
      if (data->convertible == source)
        new (storage) SP<T>();
      else
      {
        SP<void> hold_convertible_ref_count((void*)0, shared_ptr_deleter(handle<>(borrowed(source))) );
        // use aliasing constructor
        new (storage) SP<T>(hold_convertible_ref_count, static_cast<T*>(data->convertible));
      }
    }
    data->convertible = storage;
  }
};

}}} // namespace boost::python::converter

#endif

/* shared_ptr_from_python.hpp
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
*/