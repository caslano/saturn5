// Copyright David Abrahams 2002.
// Distributed under the Boost Software License, Version 1.0. (See
// accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
#ifndef OBJ_MGR_ARG_FROM_PYTHON_DWA2002628_HPP
# define OBJ_MGR_ARG_FROM_PYTHON_DWA2002628_HPP

# include <boost/python/detail/prefix.hpp>
# include <boost/python/detail/referent_storage.hpp>
# include <boost/python/detail/destroy.hpp>
# include <boost/python/detail/construct.hpp>
# include <boost/python/converter/object_manager.hpp>
# include <boost/python/detail/raw_pyobject.hpp>
# include <boost/python/tag.hpp>

//
// arg_from_python converters for Python type wrappers, to be used as
// base classes for specializations.
//
namespace boost { namespace python { namespace converter { 

template <class T>
struct object_manager_value_arg_from_python
{
    typedef T result_type;
    
    object_manager_value_arg_from_python(PyObject*);
    bool convertible() const;
    T operator()() const;
 private:
    PyObject* m_source;
};

// Used for converting reference-to-object-manager arguments from
// python. The process used here is a little bit odd. Upon
// construction, we build the object manager object in the m_result
// object, *forcing* it to accept the source Python object by casting
// its pointer to detail::borrowed_reference. This is supposed to
// bypass any type checking of the source object. The convertible
// check then extracts the owned object and checks it. If the check
// fails, nothing else in the program ever gets to touch this strange
// "forced" object.
template <class Ref>
struct object_manager_ref_arg_from_python
{
    typedef Ref result_type;
    
    object_manager_ref_arg_from_python(PyObject*);
    bool convertible() const;
    Ref operator()() const;
    ~object_manager_ref_arg_from_python();
 private:
    typename python::detail::referent_storage<Ref>::type m_result;
};

//
// implementations
//

template <class T>
inline object_manager_value_arg_from_python<T>::object_manager_value_arg_from_python(PyObject* x)
    : m_source(x)
{
}
    
template <class T>
inline bool object_manager_value_arg_from_python<T>::convertible() const
{
    return object_manager_traits<T>::check(m_source);
}

template <class T>
inline T object_manager_value_arg_from_python<T>::operator()() const
{
    return T(python::detail::borrowed_reference(m_source));
}

template <class Ref>
inline object_manager_ref_arg_from_python<Ref>::object_manager_ref_arg_from_python(PyObject* x)
{
# if defined(__EDG_VERSION__) && __EDG_VERSION__ <= 243
    // needed for warning suppression
    python::detail::borrowed_reference x_ = python::detail::borrowed_reference(x);
    python::detail::construct_referent<Ref>(m_result.bytes, x_);
# else 
    python::detail::construct_referent<Ref>(m_result.bytes, (python::detail::borrowed_reference)x);
# endif 
}

template <class Ref>
inline object_manager_ref_arg_from_python<Ref>::~object_manager_ref_arg_from_python()
{
    python::detail::destroy_referent<Ref>(this->m_result.bytes);
}

namespace detail
{
  template <class T>
  inline bool object_manager_ref_check(T const& x)
  {
      return object_manager_traits<T>::check(get_managed_object(x, tag));
  }
}

template <class Ref>
inline bool object_manager_ref_arg_from_python<Ref>::convertible() const
{
    return detail::object_manager_ref_check(
        python::detail::void_ptr_to_reference(this->m_result.bytes, (Ref(*)())0));
}

template <class Ref>
inline Ref object_manager_ref_arg_from_python<Ref>::operator()() const
{
    return python::detail::void_ptr_to_reference(
        this->m_result.bytes, (Ref(*)())0);
}

}}} // namespace boost::python::converter

#endif // OBJ_MGR_ARG_FROM_PYTHON_DWA2002628_HPP

/* obj_mgr_arg_from_python.hpp
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
*/