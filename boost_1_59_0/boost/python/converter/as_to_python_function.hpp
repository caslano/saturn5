// Copyright David Abrahams 2002.
// Distributed under the Boost Software License, Version 1.0. (See
// accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
#ifndef AS_TO_PYTHON_FUNCTION_DWA2002121_HPP
# define AS_TO_PYTHON_FUNCTION_DWA2002121_HPP
# include <boost/python/converter/to_python_function_type.hpp>

namespace boost { namespace python { namespace converter { 

// Given a typesafe to_python conversion function, produces a
// to_python_function_t which can be registered in the usual way.
template <class T, class ToPython>
struct as_to_python_function
{
    // Assertion functions used to prevent wrapping of converters
    // which take non-const reference parameters. The T* argument in
    // the first overload ensures it isn't used in case T is a
    // reference.
    template <class U>
    static void convert_function_must_take_value_or_const_reference(U(*)(T), int, T* = 0) {}
    template <class U>
    static void convert_function_must_take_value_or_const_reference(U(*)(T const&), long ...) {}
        
    static PyObject* convert(void const* x)
    {
        convert_function_must_take_value_or_const_reference(&ToPython::convert, 1L);
        
        // Yes, the const_cast below opens a hole in const-correctness,
        // but it's needed to convert auto_ptr<U> to python.
        //
        // How big a hole is it?  It allows ToPython::convert() to be
        // a function which modifies its argument. The upshot is that
        // client converters applied to const objects may invoke
        // undefined behavior. The damage, however, is limited by the
        // use of the assertion function. Thus, the only way this can
        // modify its argument is if T is an auto_ptr-like type. There
        // is still a const-correctness hole w.r.t. auto_ptr<U> const,
        // but c'est la vie.
        return ToPython::convert(*const_cast<T*>(static_cast<T const*>(x)));
    }
#ifndef BOOST_PYTHON_NO_PY_SIGNATURES
    static PyTypeObject const * get_pytype() { return ToPython::get_pytype(); }
#endif
};

}}} // namespace boost::python::converter

#endif // AS_TO_PYTHON_FUNCTION_DWA2002121_HPP

/* as_to_python_function.hpp
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
*/