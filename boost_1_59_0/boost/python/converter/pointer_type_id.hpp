// Copyright David Abrahams 2002.
// Distributed under the Boost Software License, Version 1.0. (See
// accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
#ifndef POINTER_TYPE_ID_DWA2002222_HPP
# define POINTER_TYPE_ID_DWA2002222_HPP

# include <boost/python/type_id.hpp>
# include <boost/python/detail/type_traits.hpp>

namespace boost { namespace python { namespace converter { 

namespace detail
{
  template <bool is_ref = false>
  struct pointer_typeid_select
  {
      template <class T>
      static inline type_info execute(T*(*)() = 0)
      {
          return type_id<T>();
      }
  };

  template <>
  struct pointer_typeid_select<true>
  {
      template <class T>
      static inline type_info execute(T* const volatile&(*)() = 0)
      {
          return type_id<T>();
      }
    
      template <class T>
      static inline type_info execute(T*volatile&(*)() = 0)
      {
          return type_id<T>();
      }
    
      template <class T>
      static inline type_info execute(T*const&(*)() = 0)
      {
          return type_id<T>();
      }

      template <class T>
      static inline type_info execute(T*&(*)() = 0)
      {
          return type_id<T>();
      }
  };
}

// Usage: pointer_type_id<T>()
//
// Returns a type_info associated with the type pointed
// to by T, which may be a pointer or a reference to a pointer.
template <class T>
type_info pointer_type_id(T(*)() = 0)
{
    return detail::pointer_typeid_select<
          boost::python::detail::is_lvalue_reference<T>::value
        >::execute((T(*)())0);
}

}}} // namespace boost::python::converter

#endif // POINTER_TYPE_ID_DWA2002222_HPP

/* pointer_type_id.hpp
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
*/