// Copyright David Abrahams 2002.
// Distributed under the Boost Software License, Version 1.0. (See
// accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
#ifndef REGISTRATIONS_DWA2002223_HPP
# define REGISTRATIONS_DWA2002223_HPP

# include <boost/python/detail/prefix.hpp>

# include <boost/python/type_id.hpp>

# include <boost/python/converter/convertible_function.hpp>
# include <boost/python/converter/constructor_function.hpp>
# include <boost/python/converter/to_python_function_type.hpp>

# include <boost/detail/workaround.hpp>

namespace boost { namespace python { namespace converter { 

struct lvalue_from_python_chain
{
    convertible_function convert;
    lvalue_from_python_chain* next;
};

struct rvalue_from_python_chain
{
    convertible_function convertible;
    constructor_function construct;
    PyTypeObject const* (*expected_pytype)();
    rvalue_from_python_chain* next;
};

struct BOOST_PYTHON_DECL registration
{
 public: // member functions
    explicit registration(type_info target, bool is_shared_ptr = false);
   ~registration();
    
    // Convert the appropriately-typed data to Python
    PyObject* to_python(void const volatile*) const;

    // Return the class object, or raise an appropriate Python
    // exception if no class has been registered.
    PyTypeObject* get_class_object() const;

    // Return common denominator of the python class objects, 
    // convertable to target. Inspects the m_class_object and the value_chains.
    PyTypeObject const* expected_from_python_type() const;
    PyTypeObject const* to_python_target_type() const;

 public: // data members. So sue me.
    const python::type_info target_type;

    // The chain of eligible from_python converters when an lvalue is required
    lvalue_from_python_chain* lvalue_chain;

    // The chain of eligible from_python converters when an rvalue is acceptable
    rvalue_from_python_chain* rvalue_chain;
    
    // The class object associated with this type
    PyTypeObject* m_class_object;

    // The unique to_python converter for the associated C++ type.
    to_python_function_t m_to_python;
    PyTypeObject const* (*m_to_python_target_type)();


    // True iff this type is a shared_ptr.  Needed for special rvalue
    // from_python handling.
    const bool is_shared_ptr;

# if BOOST_WORKAROUND(__MWERKS__, BOOST_TESTED_AT(0x3003))
 private:
    void operator=(registration); // This is not defined, and just keeps MWCW happy.
# endif 
};

//
// implementations
//
inline registration::registration(type_info target_type, bool is_shared_ptr)
    : target_type(target_type)
      , lvalue_chain(0)
      , rvalue_chain(0)
      , m_class_object(0)
      , m_to_python(0)
      , m_to_python_target_type(0)
      , is_shared_ptr(is_shared_ptr)
{}

inline bool operator<(registration const& lhs, registration const& rhs)
{
    return lhs.target_type < rhs.target_type;
}

}}} // namespace boost::python::converter

#endif // REGISTRATIONS_DWA2002223_HPP

/* registrations.hpp
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
*/