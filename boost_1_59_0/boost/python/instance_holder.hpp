// Copyright David Abrahams 2002.
// Distributed under the Boost Software License, Version 1.0. (See
// accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
#ifndef INSTANCE_HOLDER_DWA2002517_HPP
# define INSTANCE_HOLDER_DWA2002517_HPP

# include <boost/python/detail/prefix.hpp>

# include <boost/noncopyable.hpp>
# include <boost/python/type_id.hpp>
# include <cstddef>

namespace boost { namespace python { 

// Base class for all holders
struct BOOST_PYTHON_DECL instance_holder : private noncopyable
{
 public:
    instance_holder();
    virtual ~instance_holder();
    
    // return the next holder in a chain
    instance_holder* next() const;

    // When the derived holder actually holds by [smart] pointer and
    // null_ptr_only is set, only report that the type is held when
    // the pointer is null.  This is needed for proper shared_ptr
    // support, to prevent holding shared_ptrs from being found when
    // converting from python so that we can use the conversion method
    // that always holds the Python object.
    virtual void* holds(type_info, bool null_ptr_only) = 0;

    void install(PyObject* inst) throw();

    // These functions should probably be located elsewhere.
    
    // Allocate storage for an object of the given size at the given
    // offset in the Python instance<> object if bytes are available
    // there. Otherwise allocate size bytes of heap memory.
    static void* allocate(PyObject*, std::size_t offset, std::size_t size, std::size_t alignment = 1);

    // Deallocate storage from the heap if it was not carved out of
    // the given Python object by allocate(), above.
    static void deallocate(PyObject*, void* storage) throw();
 private:
    instance_holder* m_next;
};

// This macro is needed for implementation of derived holders
# define BOOST_PYTHON_UNFORWARD(N,ignored) (typename unforward<A##N>::type)(a##N)

//
// implementation
//
inline instance_holder* instance_holder::next() const
{
    return m_next;
}

}} // namespace boost::python

#endif // INSTANCE_HOLDER_DWA2002517_HPP

/* instance_holder.hpp
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
*/