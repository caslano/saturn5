// Boost.Function library
//  Copyright (C) Douglas Gregor 2008
//
//  Use, modification and distribution is subject to the Boost
//  Software License, Version 1.0.  (See accompanying file
//  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//
// For more information, see http://www.boost.org
#ifndef BOOST_FUNCTION_FWD_HPP
#define BOOST_FUNCTION_FWD_HPP
#include <boost/config.hpp>

#if defined(__sgi) && defined(_COMPILER_VERSION) && _COMPILER_VERSION <= 730 && !defined(BOOST_STRICT_CONFIG)
// Work around a compiler bug.
// boost::python::objects::function has to be seen by the compiler before the
// boost::function class template.
namespace boost { namespace python { namespace objects {
  class function;
}}}
#endif

#if defined(BOOST_BCB_PARTIAL_SPECIALIZATION_BUG)                         \
 || !(defined(BOOST_STRICT_CONFIG) || !defined(__SUNPRO_CC) || __SUNPRO_CC > 0x540)
#  define BOOST_FUNCTION_NO_FUNCTION_TYPE_SYNTAX
#endif

namespace boost {
  class bad_function_call;

#if !defined(BOOST_FUNCTION_NO_FUNCTION_TYPE_SYNTAX)
  // Preferred syntax
  template<typename Signature> class function;

  template<typename Signature>
  inline void swap(function<Signature>& f1, function<Signature>& f2)
  {
    f1.swap(f2);
  }
#endif // have partial specialization

  // Portable syntax
  template<typename R> class function0;
  template<typename R, typename T1> class function1;
  template<typename R, typename T1, typename T2> class function2;
  template<typename R, typename T1, typename T2, typename T3> class function3;
  template<typename R, typename T1, typename T2, typename T3, typename T4> 
    class function4;
  template<typename R, typename T1, typename T2, typename T3, typename T4,
           typename T5> 
    class function5;
  template<typename R, typename T1, typename T2, typename T3, typename T4,
           typename T5, typename T6> 
    class function6;
  template<typename R, typename T1, typename T2, typename T3, typename T4,
           typename T5, typename T6, typename T7> 
    class function7;
  template<typename R, typename T1, typename T2, typename T3, typename T4,
           typename T5, typename T6, typename T7, typename T8> 
    class function8;
  template<typename R, typename T1, typename T2, typename T3, typename T4,
           typename T5, typename T6, typename T7, typename T8, typename T9> 
    class function9;
  template<typename R, typename T1, typename T2, typename T3, typename T4,
           typename T5, typename T6, typename T7, typename T8, typename T9,
           typename T10> 
    class function10;
}

#endif

/* function_fwd.hpp
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
*/