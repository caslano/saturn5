# /* Copyright (C) 2001
#  * Housemarque Oy
#  * http://www.housemarque.com
#  *
#  * Distributed under the Boost Software License, Version 1.0. (See
#  * accompanying file LICENSE_1_0.txt or copy at
#  * http://www.boost.org/LICENSE_1_0.txt)
#  */
#
# /* Revised by Paul Mensonides (2002) */
#
# /* See http://www.boost.org for most recent version. */
#
# ifndef BOOST_PREPROCESSOR_REPETITION_ENUM_HPP
# define BOOST_PREPROCESSOR_REPETITION_ENUM_HPP
#
# include <boost/preprocessor/cat.hpp>
# include <boost/preprocessor/config/config.hpp>
# include <boost/preprocessor/debug/error.hpp>
# include <boost/preprocessor/detail/auto_rec.hpp>
# include <boost/preprocessor/punctuation/comma_if.hpp>
# include <boost/preprocessor/repetition/repeat.hpp>
# include <boost/preprocessor/tuple/elem.hpp>
# include <boost/preprocessor/tuple/rem.hpp>
#
# /* BOOST_PP_ENUM */
#
# if 0
#    define BOOST_PP_ENUM(count, macro, data)
# endif
#
# define BOOST_PP_ENUM BOOST_PP_CAT(BOOST_PP_ENUM_, BOOST_PP_AUTO_REC(BOOST_PP_REPEAT_P, 4))
#
# if ~BOOST_PP_CONFIG_FLAGS() & BOOST_PP_CONFIG_EDG()
#    define BOOST_PP_ENUM_1(c, m, d) BOOST_PP_REPEAT_1(c, BOOST_PP_ENUM_M_1, (m, d))
#    define BOOST_PP_ENUM_2(c, m, d) BOOST_PP_REPEAT_2(c, BOOST_PP_ENUM_M_2, (m, d))
#    define BOOST_PP_ENUM_3(c, m, d) BOOST_PP_REPEAT_3(c, BOOST_PP_ENUM_M_3, (m, d))
# else
#    define BOOST_PP_ENUM_1(c, m, d) BOOST_PP_ENUM_1_I(c, m, d)
#    define BOOST_PP_ENUM_2(c, m, d) BOOST_PP_ENUM_2_I(c, m, d)
#    define BOOST_PP_ENUM_3(c, m, d) BOOST_PP_ENUM_3_I(c, m, d)
#    define BOOST_PP_ENUM_1_I(c, m, d) BOOST_PP_REPEAT_1(c, BOOST_PP_ENUM_M_1, (m, d))
#    define BOOST_PP_ENUM_2_I(c, m, d) BOOST_PP_REPEAT_2(c, BOOST_PP_ENUM_M_2, (m, d))
#    define BOOST_PP_ENUM_3_I(c, m, d) BOOST_PP_REPEAT_3(c, BOOST_PP_ENUM_M_3, (m, d))
# endif
#
# define BOOST_PP_ENUM_4(c, m, d) BOOST_PP_ERROR(0x0003)
#
# if BOOST_PP_CONFIG_FLAGS() & BOOST_PP_CONFIG_STRICT()
#    define BOOST_PP_ENUM_M_1(z, n, md) BOOST_PP_ENUM_M_1_IM(z, n, BOOST_PP_TUPLE_REM_2 md)
#    define BOOST_PP_ENUM_M_2(z, n, md) BOOST_PP_ENUM_M_2_IM(z, n, BOOST_PP_TUPLE_REM_2 md)
#    define BOOST_PP_ENUM_M_3(z, n, md) BOOST_PP_ENUM_M_3_IM(z, n, BOOST_PP_TUPLE_REM_2 md)
#    define BOOST_PP_ENUM_M_1_IM(z, n, im) BOOST_PP_ENUM_M_1_I(z, n, im)
#    define BOOST_PP_ENUM_M_2_IM(z, n, im) BOOST_PP_ENUM_M_2_I(z, n, im)
#    define BOOST_PP_ENUM_M_3_IM(z, n, im) BOOST_PP_ENUM_M_3_I(z, n, im)
# else
#    define BOOST_PP_ENUM_M_1(z, n, md) BOOST_PP_ENUM_M_1_I(z, n, BOOST_PP_TUPLE_ELEM(2, 0, md), BOOST_PP_TUPLE_ELEM(2, 1, md))
#    define BOOST_PP_ENUM_M_2(z, n, md) BOOST_PP_ENUM_M_2_I(z, n, BOOST_PP_TUPLE_ELEM(2, 0, md), BOOST_PP_TUPLE_ELEM(2, 1, md))
#    define BOOST_PP_ENUM_M_3(z, n, md) BOOST_PP_ENUM_M_3_I(z, n, BOOST_PP_TUPLE_ELEM(2, 0, md), BOOST_PP_TUPLE_ELEM(2, 1, md))
# endif
#
# define BOOST_PP_ENUM_M_1_I(z, n, m, d) BOOST_PP_COMMA_IF(n) m(z, n, d)
# define BOOST_PP_ENUM_M_2_I(z, n, m, d) BOOST_PP_COMMA_IF(n) m(z, n, d)
# define BOOST_PP_ENUM_M_3_I(z, n, m, d) BOOST_PP_COMMA_IF(n) m(z, n, d)
#
# endif

/* enum.hpp
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
*/