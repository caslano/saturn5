# /* Copyright (C) 2001
#  * Housemarque Oy
#  * http://www.housemarque.com
#  *
#  * Distributed under the Boost Software License, Version 1.0. (See
#  * accompanying file LICENSE_1_0.txt or copy at
#  * http://www.boost.org/LICENSE_1_0.txt)
#  */
#
# /* Revised by Paul Mensonides (2002) */
#
# /* See http://www.boost.org for most recent version. */
#
# ifndef BOOST_PREPROCESSOR_REPETITION_ENUM_SHIFTED_HPP
# define BOOST_PREPROCESSOR_REPETITION_ENUM_SHIFTED_HPP
#
# include <boost/preprocessor/cat.hpp>
# include <boost/preprocessor/arithmetic/dec.hpp>
# include <boost/preprocessor/arithmetic/inc.hpp>
# include <boost/preprocessor/config/config.hpp>
# include <boost/preprocessor/debug/error.hpp>
# include <boost/preprocessor/detail/auto_rec.hpp>
# include <boost/preprocessor/punctuation/comma_if.hpp>
# include <boost/preprocessor/repetition/repeat.hpp>
# include <boost/preprocessor/tuple/elem.hpp>
# include <boost/preprocessor/tuple/rem.hpp>
#
# /* BOOST_PP_ENUM_SHIFTED */
#
# if 0
#    define BOOST_PP_ENUM_SHIFTED(count, macro, data)
# endif
#
# define BOOST_PP_ENUM_SHIFTED BOOST_PP_CAT(BOOST_PP_ENUM_SHIFTED_, BOOST_PP_AUTO_REC(BOOST_PP_REPEAT_P, 4))
#
# if ~BOOST_PP_CONFIG_FLAGS() & BOOST_PP_CONFIG_EDG()
#    define BOOST_PP_ENUM_SHIFTED_1(c, m, d) BOOST_PP_REPEAT_1(BOOST_PP_DEC(c), BOOST_PP_ENUM_SHIFTED_M_1, (m, d))
#    define BOOST_PP_ENUM_SHIFTED_2(c, m, d) BOOST_PP_REPEAT_2(BOOST_PP_DEC(c), BOOST_PP_ENUM_SHIFTED_M_2, (m, d))
#    define BOOST_PP_ENUM_SHIFTED_3(c, m, d) BOOST_PP_REPEAT_3(BOOST_PP_DEC(c), BOOST_PP_ENUM_SHIFTED_M_3, (m, d))
# else
#    define BOOST_PP_ENUM_SHIFTED_1(c, m, d) BOOST_PP_ENUM_SHIFTED_1_I(c, m, d)
#    define BOOST_PP_ENUM_SHIFTED_2(c, m, d) BOOST_PP_ENUM_SHIFTED_1_2(c, m, d)
#    define BOOST_PP_ENUM_SHIFTED_3(c, m, d) BOOST_PP_ENUM_SHIFTED_1_3(c, m, d)
#    define BOOST_PP_ENUM_SHIFTED_1_I(c, m, d) BOOST_PP_REPEAT_1(BOOST_PP_DEC(c), BOOST_PP_ENUM_SHIFTED_M_1, (m, d))
#    define BOOST_PP_ENUM_SHIFTED_2_I(c, m, d) BOOST_PP_REPEAT_2(BOOST_PP_DEC(c), BOOST_PP_ENUM_SHIFTED_M_2, (m, d))
#    define BOOST_PP_ENUM_SHIFTED_3_I(c, m, d) BOOST_PP_REPEAT_3(BOOST_PP_DEC(c), BOOST_PP_ENUM_SHIFTED_M_3, (m, d))
# endif
#
# define BOOST_PP_ENUM_SHIFTED_4(c, m, d) BOOST_PP_ERROR(0x0003)
#
# if BOOST_PP_CONFIG_FLAGS() & BOOST_PP_CONFIG_STRICT()
#    define BOOST_PP_ENUM_SHIFTED_M_1(z, n, md) BOOST_PP_ENUM_SHIFTED_M_1_IM(z, n, BOOST_PP_TUPLE_REM_2 md)
#    define BOOST_PP_ENUM_SHIFTED_M_2(z, n, md) BOOST_PP_ENUM_SHIFTED_M_2_IM(z, n, BOOST_PP_TUPLE_REM_2 md)
#    define BOOST_PP_ENUM_SHIFTED_M_3(z, n, md) BOOST_PP_ENUM_SHIFTED_M_3_IM(z, n, BOOST_PP_TUPLE_REM_2 md)
#    define BOOST_PP_ENUM_SHIFTED_M_1_IM(z, n, im) BOOST_PP_ENUM_SHIFTED_M_1_I(z, n, im)
#    define BOOST_PP_ENUM_SHIFTED_M_2_IM(z, n, im) BOOST_PP_ENUM_SHIFTED_M_2_I(z, n, im)
#    define BOOST_PP_ENUM_SHIFTED_M_3_IM(z, n, im) BOOST_PP_ENUM_SHIFTED_M_3_I(z, n, im)
# else
#    define BOOST_PP_ENUM_SHIFTED_M_1(z, n, md) BOOST_PP_ENUM_SHIFTED_M_1_I(z, n, BOOST_PP_TUPLE_ELEM(2, 0, md), BOOST_PP_TUPLE_ELEM(2, 1, md))
#    define BOOST_PP_ENUM_SHIFTED_M_2(z, n, md) BOOST_PP_ENUM_SHIFTED_M_2_I(z, n, BOOST_PP_TUPLE_ELEM(2, 0, md), BOOST_PP_TUPLE_ELEM(2, 1, md))
#    define BOOST_PP_ENUM_SHIFTED_M_3(z, n, md) BOOST_PP_ENUM_SHIFTED_M_3_I(z, n, BOOST_PP_TUPLE_ELEM(2, 0, md), BOOST_PP_TUPLE_ELEM(2, 1, md))
# endif
#
# define BOOST_PP_ENUM_SHIFTED_M_1_I(z, n, m, d) BOOST_PP_COMMA_IF(n) m(z, BOOST_PP_INC(n), d)
# define BOOST_PP_ENUM_SHIFTED_M_2_I(z, n, m, d) BOOST_PP_COMMA_IF(n) m(z, BOOST_PP_INC(n), d)
# define BOOST_PP_ENUM_SHIFTED_M_3_I(z, n, m, d) BOOST_PP_COMMA_IF(n) m(z, BOOST_PP_INC(n), d)
#
# endif

/* enum_shifted.hpp
QeTv8IOh71WtWxgRaHPfpHcZ1Oz1t0V/Ya2pzef3b/5DBSkVQyUMPb9M5e+xRfWuXrqjRNtbcFVEhEFSf8iluk5bno5blG8S1pJ+tRc3NlIgDY1PgGLqU1JYIt1B5PyJ/y4Eh+TRffdLQbIOK82YLOXce9nxoM0fr+A35e6tlDP5lJo68JFy2SrwJay8qKiIsp5Itwp3W3l3+6lNoUuelySPc7tgWY+ltdmpL0wg1lY/a9yuwtpR3B9kojsqfs04FtCpyntCTtMIYv21ZVK1c7ek+/du3Eub7JQEcLPTpesifLb9ONe7LVkoAAjVCxet9QXI+tkb9qxt/mLG2pcEITj5GVMVEBl/FMzjpGaRzFtjttZ7HH2pDy0VVO8r2FjGGnwzvUmGr9j6LnW+tlykGAeSaVBk7nBkviJ/P3x6j4kcP2Yyo8sy81jtcs8m5LyzUyjTYNxdQVn/ao3wPjbxXNLqbwH/2DBgfImjYYia91/NLCachL14VveCau8zHTUy/Z/lky4p/p+nIj3D6A+f0K8MrjrL52dd8hmhrQHIVV/tOik9GIX/HZKmvCbc3WLYk2VHmBAUaWM7vPiGLvCIK4ae9Rj1qm9So4k/STr87SkgAy9KvI3cXmbvqZPlB1o8IyP8Qdi3lBSKnAEqg93oB8qy6NpK5nvOH92PJHTM+CGr9b7M2pT0BmXkGuJ6wbTuhhjUTRibI3eRJJ87vhcvgUVApaN/f7Ni5r64xallDPV4RdpWyBZ9NAD9BZWzlVcUbAUmKZCRLyJTVi3XUO6eL+DxoO3/XcZD6/o8k9kl49/5mS5ghPi0M/AK1ZijmTNcBJRO/UJt0wURl/bHz7v68ko/QH10Qbl/PgE23ZePkPAHR91Q9iQibuOCUW8o+0RGnNwJrkmMF0+YqaaExrzeX6MaJz5j7VHu2eFuS3Ug+HcasQ36R970HxeLUMfL2jvjwGL7737uz4BmaCho9+42t1pvrlxAMIqaMX/nN8hxXEr0/a48a2LPX26jSxqqmdRHbgFqX+bFPxSD9HDEU5j0I+NHrFX7oOFbQaphYzzA2+iH75HNzhfiFuZT+7f/Z4PG8lgl1W1GfoivJ09sJk+sIxdZj9+8HHK7GKJoh+3n+//sl/2/9htib0IdjsPkCiSYes9yar98F0BdOg4Te8XW2cG8CeYSJ55AO3qOC5V0stIBvejoCN9/Qc04g4ebZ+xhCpyWnnlAqz3zINYRzoYzdWqXvFEWQPV5FdJ5TmMbALVLPvhx4gB353Ggt7w4/NuES90SuHvwBsGPdWz27wOIVnrVENjApApYrqEPJgIjBldY2eaMfWM+4jj3yQJC2Oy0J98UjD8R0hF3wp2nTYQdHM7Tih3JjWxwU36q9qf+VJWFcREFpOGwFOde9kfPmSaSHHpRC37TpSmpxJTebiH4NBwpbW/PLoQRN2gm9fkz8kF4QuQlG0kPZi6qzzmjtG4JxkVMIJxnFYCq+cM/GZs7DPV8iKgFVzZi219RGr9Dd1eslSVrtR3HmzAHO7FCk8lxdQIhQtc9Y+QtMmyQf/+HFVIgnr1KFmI7fmfQ8F2IoU1qIeskBuun53cSqyieTnnofnMBBTRD2GN7ltI8fshfSyaQcdfxz3iZZByGvq6kCyHZNpRKuYDhmU05gu5+YtMymRIS1KXJfPvOvOC2FVmVvSypa0nw1a1M2iOPGvW+Y9cEbSz5HOP1zhheY1bJ2eR8fKbR/GOUkhFPPvVS7Q9kPgcAJtZlDpw829Y7XTFxCfvSW3CtwO6FtpOUz5a8+rdaRNnB+92d43tJTTHsJyIuBI1VdEE9QvhJj/vCtkAW+/Et1MM2O1N5TvwxDF2aNTwMFE8AsvE32f7lDv6Zr11wFoTnO8wSWF2r+Civ41q752IVzrKtVBZNszTVsfJgTGedVrQEgRLpV0hiQfspvTqFDrLYHqHzFbl/xIoe6MmaPcfOCMXhiHdA5ybUX8x/O01xCoeNhSX4LHe11m6Z0zVC5+3KYGV8PHLojwHOt1+S+3lVNz9UOBe+/+pLXru8mSQ2sMYl7sHV+D25aoaJubBqZkxVHr5U7DdpFZubRMmbz7X0rIIrpF95PMBpLbL17pLDuD8zdX3HzKrw2b/OrqwlpNkJxUCkAb/xmHVH+Vhq/9nstaBMBp1YjRrhmxqGgRjgfSCkEPeFK0BmisjOrt8q1iOo/vWDkP7FV2DLgX1dw7an5HYmFUhqEcNqZNXManTVjJjrofcw9nhXVFz/IlIJ9plzbbU+/ngyR4g7erVddyRgswNRu3IK9xz6LLzR4YN/dRYYhuIFCG/3uu6DkjwkTqMVU1eZoZgnPaCH70HIiw3FiBAR9zJel4o201GqWeNmf1vf5W/+Cbjp7pZgpWqE2ATWSfM4uz9IbGq8MIzT09MXF32f9kkHnHYtKZ/gvT5TptmhXEmIBhJjpxi/jutYAZ+ZA6w/pL4YN1dibxhJOMjcAPhMZ8BAY7J9YQkabx8LutRfecm9UyNjqJ4enr6P6+tvRNJ/u7cLlyLxkMehOyPW5r5E5IYfP9Y3WzAiI0545e8cuIGf4jnxC5QCrZfsXZbfXYLLhpVvUFE/b5nckpLqh/VNFkYnK8Ej4PTeg6qCOVM6Y3HA4EHDN757P5H24ocR8hwxGWYCy9qPc7rRyeMICKJ5nneQu6UADCkXElyCt8Y7ieC57I7e04YkKLOOsrL3KynTtMPyraY+bpY9aughIKFkeMjKAu38LCznwh4LhX7mgzQCwlG7cOL2U2p4waXt3X0D4/s0QKDJh1TFfF1t48S54wML+rBoHApuqJBVWes88LV9AjHblfIDFI01gIjJbnwrdMwNhfzMzq7BxVlwgFHaefjQ16rnRCP9ux3rMgo2FThwb/pe/qNA6kNfhBv8Nl3v6v02C26oeT3LpizJvWIsv5Q4Oa56G1Za969MR2XoZlcFV9f9XtlGkeOA4ApN5aHFD9z0DALTkPmf+17I1Xqo1jKNT9vQt+lXNTbFaZ5SbPT4RGPch6nhfFekKJfqOgh0TQRYXlrdGN891cjr8fnvtzIP+6rHEOvO9x6S50i2ncZ/D4uC4KWLk101EOPC3qVlB5UHRTHTJCWFmVS6amhYvCPMLoBHA8ag5x3xzgdG9+vgo4Y9XgakSJZjfjGovuZqwViO+HUM7DjefL04+HA9OoVm/n6K4cLER6WUBpniD5e/ETPPEPWACAgJGQkJGdkkscLRJVPaoleZxq3ERSeSMsZCUSxyEL7YP8yKDvw1PYiGLFe1zEbs+4qDc+zEUUOGEBoIFV5ULJeyufoVMReHKY+ZQTjyD7o5OCqK21LK/NwjPUDK3TXc5ETU4JJpGtfNbSYmObsHFfPG3cPj8/gQ03Ui6f69pNd7vGLwDTdR37YdboTtd1SV4nlrqeDAJ8eiEApkMkR/EbxQop2zk1pCzIESL/lnBerUXy7oxc9o5i7k+ln6enp2pO4RXQihRCeA5q4EQiLcIVTM96iYg4D37h4D9GJH2MOB0u7BRWsnYFOX7PpNvTV9/XW5XZn3JA8zYP/CjGycYEz4ZofNk1qOKNHDZtXMm6kfFJ2ynBpk+27kDWXVcTa9vz7LYJ68z+PurozODsV+p0EpsKaayTfoSU5WaqjEYuH5c1GxGFw6UcEZ/EpKN0fjORNEZaTFRpBXddjgDq46T+4F3e4zgd+KVbz4VjXIjpn2o6MtE8oxSBvfk9B0lH//2U3bHowfkU5HCZgDzQLIeIq+hjTQwwIFndnC3m9CrtJD8PWuUviwF74ymIyGLu/P965ZawYujkoohHX2x7AgoB6j7YU+dK1a/jJRD/+EzD9W4Ws/qrML/m1mBrWiOKkJpBx3XviL/685AvExcRU/PUySmX65Kjo+UxupQHLbwSxSsp1/AftZi1qMXQJ3VdmC/m2ypnjbk1Lj8sj8hqCh0bC33aKnpac1Z2G9nMt68tn3cmActeMageo8HpeLqH2J/QM2JMVUkIsn3D/8dNVjDw+xM1urGPfUX0Qm1Ktfk0JVjT6fCEwZO30Gt1h++RC6yjM1nXNGzMdtEyJkaJjlZyyX1SA08sgm+s6aEPNt6O18krcskdLPOOQ9QdgcX+CPywiHYISGPD5JLEM9UfoFQKj6xBdJcJLThpdjltDbJZ0QxBX1kKbb1TtQq6TT8V1tL2TteKRQroUoPGKFqRhOQSEKE81lu21pj+sTiVq5O+zrnZQ/I3Bn0FBxDthT6jBLyxh4FvMT3JpzA9b44Pc9zO3guxUNLAW436FC9wZruNZQlgszcFqErKN7wNZASqJix52bQ/Roqm5bb3Hjg0/OyIjLD13ewTcHTgdQWohxLj6xcyMYmJA8qv3tL3I2jzgxpuS7+Ope4GPXySDIub7w5m3zjvqubaM4o9vv5aIMOmT+N1FgzCp62nb6na8DwNhpu1gHU4yIP4zLT0e75/Bj4tCQf7v5nhhFlzSnQGR+f83mTuSzuwbA2BiQjkyttCfDnTf9w1Xw9pbHr5RYzI9FZOgZzUD0XSFJIll04mJjhrXArgw4JvmAWlcpGQr+uMUskTNP0tTLxRc1IKFmYvKRTDXOSx70D54odvBgiHqVt0EllTLcB6xeChtZscYY0Yk/kh4QXbtktxhuKbDYQvGpm17WeNsM6LTRvh7d4mcg9QkZ89vd8CCAVk5GXiLN+PjbKLBEQnPrlsh3D7l+DIc99+/dDBYdd54FVkAFePRCC72fRlNvRT6QJKZRuj0LKROVFahurKwxxMW4AxMZOfYid3hT9g2cdm8OFaV/fKLerhrbLbKLLY0sal/VSE6enXWZ1aDDzJtQVZxbc0ca+ms8lqABcXg4+yhAzBCt30Ms8EnMf4VVlJiYNLy4ZnanYS6FhUA5/a/RFNbeNlUeNXl26A0owpizvifad4UTr8k2NfSmLLVzuXn3hhC9bcw/0N0e/p/9Apk1+0B8/J4wVVnQ8H5dQ71mKns1CyZstm2/rZ+sFMvP/qbvy2fSh+suxdrFFcuPr0+FrBp9fOaa9E8FLfKy+HXFRw9jUWB57tw/W9f6iHJAlP9dXzBl1IA3L2gCH2/Az/gczNtUQnj5Lj8naSnR0Ru9P0VLmGpUj05dRzr9rGm1MbepW39VMPBHJhe58ebnzzq5v2+oKSOeFCn1t+R+Lr35Nfb6VSm2c8tllKmhXn2CzJ90yCr/S9lUemGse5tmtf+3LngRkElkyUFjY2UhCD/NQRHMGRSj3ilMrY8TndbwxMjAcA/q+PhRADWxnvcvyT6m1bCg8euncE0WIUehcYF82X3Pt5fHBzxycryaFObFiCyeLr3ffmVyzw9hfu53mWB7DqjtqMs409oFyQB5vLH0e+EHhZrL1cyS1731FLpxV7ya6u9/jYUggU1doZoaXVZVTqOPf5lf2L6L/6v71u0LfjuROkH67Tuzu3S1Kj6oXW1QOPXL5vNn8fdbH7r0OJa91Lf0TUw7nZcaP+2v8oxBC41fFdokf3/HEgaxC5aS6jeZ6HT8gaLMg2ybpAso3E+koMojCUL+TXos6u8FrQMWwl4eb5MRCklylIdSnT5RR6M+F4QqVn8ljzU2oaLmly7yUK9gGOoTGCJ+gOYRCO1UWNlflX9V/P3yDQT6KbOs62o+KpUq9WjrX6wSKk9snmjMRX0cZm/t/yFMsoDGiM34Nw3X7YiANeLit2+uTWCPu2/oRf/g+SfljQnhv0FvvBue72zbIGXGtkgdRl0l0v2LcaFjJFsGXZr9AqRQW//525oBAYREUGkzXJcQSHsvO1ggt2ZczbRbyNvbHotSAkrTReqt9ayHQHiUHSrAG9goatJ16n0PYv1lEARi/X1KfZ09QK2TRZhiKwU7JBWEgCEBwdHccsLaIuji9H3QjMXBOdoNVs8Wfcf6W5ZGW2misoaGKnsNER7eUKGrQuEZ2qpWYHw9G+D7I9Xp5T9bTV2NV2D8zDlUowZq1QnJ2P5JCjz9JggjADzNvQjw/TYZ4EsIszgR4PsL5hsM0kKA7+B8gK/dF2hSkU3q2c/0UEu1/WDhwzrks5/bAPLvauRo+vZbSEznXibD9Ty1Dld+tYf5+KavRdg9wFi0Wrtn65V22/fq3xMQoIv4PV5vggWVmYhb4xJhCH+hyHDZQ3AB9/I4HR7wFK7e1NaqqbQTNniyrcrwLYvfd1p8kNU/TSNAq9J2Wh61UF2ykILXq2hGFsmwrgyQX70qEV/yHnGOjqWveCgO73goVvlJ8TrEI6zzE2kXAXgWPmphbnBaO1Hr7wUvLJF48nhpXIB8gnVewgM+U8EKUJ+kCxHKuafJ4IEemyQSURRViixsFineHeUbZUG5fGRSU6IkXFGMqfCJkIzN2B2FmeMkqsZ3mkAAnBU2Z3jqbuyoWERx53Iv2pCrYIAzpv+xE7Y8lmCvxgM+9QX6aSEnjsx92IA6+oeIy/DKa/Zd9wNNkyGdd2xnWjuDE0iqYApmhRyM9IRJ+vNwLobJsL6fQj3xxiVVpM0Re1/ZmFX036XPOxSwI7zlNSNWl3AF25GOF4gOIzvWpkkjOaF9tVyXJMR/O+CI0O8YdAb2mZWz1Yfy1tnRsnmKHFBD8FqH0xGgJ7Ymw5WRG/v6QekdZIqjevuXPYpbyBcLlEn5zfjoU61So6cOzvRehBsmjmEfmzFyojZQKrYvgxeYjQU9vSVKhiiCGtBQRt5ieRMjpR3hCTktfOG5Bok5839LQypwWlM8cDiPQJK6eQIG05ghd/co6hIEY5zcBTFNeI53M9h+lBvi3bhhxJ+kHHjOiAV7sdMpdo0KETY41uCaflOpAzxQ+NLaeqvu23eN0AjJxpgPqIYFpqlDzvpMWvXxUIGKoYV3c7Q4RJF9neemNKwSqA4CbwUVH9/pOSFJz6sgN25aSlpYfGhDcbVUZIc9fv9OVDtHR8vFS6q4qqHucsp9o1vhnJcLl95WFjxIVqnF2ZmBoc1VV1iZhPZbDsmi09XFheenMRvj+a+aNKPQ+npydQ8IN6piceE/QTTWcUVJA0JMB6+uUE8pPr4tcWRs24S+tz/zM3TKkQl6HVyueKK4v6XHDT+J4rnsTE264mxwRpau4Z1Y7/SqSRjRnv9iY216pdXW7u3MEnGO3MBui6jUra75G/ryolde9TdSr96oDXcti7zQRaHKlRAsjbqT2QgXGPCESiV2FjSci6hbBn6oKFUlvXaLAwp+B7IUtrQAVXLvnP7isCrbRihisoqE5x4C/LfHhpYcr3KC1vJRC2sbGupbWxusTmK9M+Ek5awwb3fbv3/yVJ2imprKD8STx0M1rZML/3o9OXPlKONb+PC3W2d1Tcjn4q5As5IJ4qFoIDIbjcZApP2b8ST6rgVqen5ysXvoIbyxujq7dLeZaLaWbyZ9TBjLFubydoBtT7nZ0VF+eioubtQumnNhGZ9NoMW0iKeISv+ism+fm+TjTfUa152fX5NITKcTT97wW/WlpCGVptoWNeKxuCp5g6kqKrmHo+On39K0vPzK1zeMYDRCosHc/hMrIR8QqCSWtIGY02BQYZf46AdtUENq1WKrBrnj250EmXR0X1LXHNa4XFz4uvpdGodBY2Je37ionIdbfcObfV85/2F9WRRNVTl3udf9
*/