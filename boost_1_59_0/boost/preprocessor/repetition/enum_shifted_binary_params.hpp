# /* **************************************************************************
#  *                                                                          *
#  *     (C) Copyright Paul Mensonides 2005.                                  *
#  *     Distributed under the Boost Software License, Version 1.0. (See      *
#  *     accompanying file LICENSE_1_0.txt or copy at                         *
#  *     http://www.boost.org/LICENSE_1_0.txt)                                *
#  *                                                                          *
#  ************************************************************************** */
#
# /* See http://www.boost.org for most recent version. */
#
# ifndef BOOST_PREPROCESSOR_REPETITION_ENUM_SHIFTED_BINARY_PARAMS_HPP
# define BOOST_PREPROCESSOR_REPETITION_ENUM_SHIFTED_BINARY_PARAMS_HPP
#
# include <boost/preprocessor/arithmetic/dec.hpp>
# include <boost/preprocessor/arithmetic/inc.hpp>
# include <boost/preprocessor/cat.hpp>
# include <boost/preprocessor/config/config.hpp>
# include <boost/preprocessor/punctuation/comma_if.hpp>
# include <boost/preprocessor/repetition/repeat.hpp>
# include <boost/preprocessor/tuple/elem.hpp>
# include <boost/preprocessor/tuple/rem.hpp>
#
# /* BOOST_PP_ENUM_SHIFTED_BINARY_PARAMS */
#
# if ~BOOST_PP_CONFIG_FLAGS() & BOOST_PP_CONFIG_EDG()
#    define BOOST_PP_ENUM_SHIFTED_BINARY_PARAMS(count, p1, p2) BOOST_PP_REPEAT(BOOST_PP_DEC(count), BOOST_PP_ENUM_SHIFTED_BINARY_PARAMS_M, (p1, p2))
# else
#    define BOOST_PP_ENUM_SHIFTED_BINARY_PARAMS(count, p1, p2) BOOST_PP_ENUM_SHIFTED_BINARY_PARAMS_I(count, p1, p2)
#    define BOOST_PP_ENUM_SHIFTED_BINARY_PARAMS_I(count, p1, p2) BOOST_PP_REPEAT(BOOST_PP_DEC(count), BOOST_PP_ENUM_SHIFTED_BINARY_PARAMS_M, (p1, p2))
# endif
#
# if BOOST_PP_CONFIG_FLAGS() & BOOST_PP_CONFIG_STRICT()
#    define BOOST_PP_ENUM_SHIFTED_BINARY_PARAMS_M(z, n, pp) BOOST_PP_ENUM_SHIFTED_BINARY_PARAMS_M_IM(z, n, BOOST_PP_TUPLE_REM_2 pp)
#    define BOOST_PP_ENUM_SHIFTED_BINARY_PARAMS_M_IM(z, n, im) BOOST_PP_ENUM_SHIFTED_BINARY_PARAMS_M_I(z, n, im)
# else
#    define BOOST_PP_ENUM_SHIFTED_BINARY_PARAMS_M(z, n, pp) BOOST_PP_ENUM_SHIFTED_BINARY_PARAMS_M_I(z, n, BOOST_PP_TUPLE_ELEM(2, 0, pp), BOOST_PP_TUPLE_ELEM(2, 1, pp))
# endif
#
# define BOOST_PP_ENUM_SHIFTED_BINARY_PARAMS_M_I(z, n, p1, p2) BOOST_PP_COMMA_IF(n) BOOST_PP_CAT(p1, BOOST_PP_INC(n)) BOOST_PP_CAT(p2, BOOST_PP_INC(n))
#
# /* BOOST_PP_ENUM_SHIFTED_BINARY_PARAMS_Z */
#
# if ~BOOST_PP_CONFIG_FLAGS() & BOOST_PP_CONFIG_EDG()
#    define BOOST_PP_ENUM_SHIFTED_BINARY_PARAMS_Z(z, count, p1, p2) BOOST_PP_REPEAT_ ## z(BOOST_PP_DEC(count), BOOST_PP_ENUM_SHIFTED_BINARY_PARAMS_M, (p1, p2))
# else
#    define BOOST_PP_ENUM_SHIFTED_BINARY_PARAMS_Z(z, count, p1, p2) BOOST_PP_ENUM_SHIFTED_BINARY_PARAMS_Z_I(z, count, p1, p2)
#    define BOOST_PP_ENUM_SHIFTED_BINARY_PARAMS_Z_I(z, count, p1, p2) BOOST_PP_REPEAT_ ## z(BOOST_PP_DEC(count), BOOST_PP_ENUM_SHIFTED_BINARY_PARAMS_M, (p1, p2))
# endif
#
# endif

/* enum_shifted_binary_params.hpp
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
*/