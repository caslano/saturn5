# /* **************************************************************************
#  *                                                                          *
#  *     (C) Copyright Paul Mensonides 2002.
#  *     Distributed under the Boost Software License, Version 1.0. (See
#  *     accompanying file LICENSE_1_0.txt or copy at
#  *     http://www.boost.org/LICENSE_1_0.txt)
#  *                                                                          *
#  ************************************************************************** */
#
# /* See http://www.boost.org for most recent version. */
#
# ifndef BOOST_PREPROCESSOR_REPETITION_ENUM_TRAILING_HPP
# define BOOST_PREPROCESSOR_REPETITION_ENUM_TRAILING_HPP
#
# include <boost/preprocessor/cat.hpp>
# include <boost/preprocessor/config/config.hpp>
# include <boost/preprocessor/debug/error.hpp>
# include <boost/preprocessor/detail/auto_rec.hpp>
# include <boost/preprocessor/repetition/repeat.hpp>
# include <boost/preprocessor/tuple/elem.hpp>
# include <boost/preprocessor/tuple/rem.hpp>
#
# /* BOOST_PP_ENUM_TRAILING */
#
# if 0
#    define BOOST_PP_ENUM_TRAILING(count, macro, data)
# endif
#
# define BOOST_PP_ENUM_TRAILING BOOST_PP_CAT(BOOST_PP_ENUM_TRAILING_, BOOST_PP_AUTO_REC(BOOST_PP_REPEAT_P, 4))
#
# if ~BOOST_PP_CONFIG_FLAGS() & BOOST_PP_CONFIG_EDG()
#    define BOOST_PP_ENUM_TRAILING_1(c, m, d) BOOST_PP_REPEAT_1(c, BOOST_PP_ENUM_TRAILING_M_1, (m, d))
#    define BOOST_PP_ENUM_TRAILING_2(c, m, d) BOOST_PP_REPEAT_2(c, BOOST_PP_ENUM_TRAILING_M_2, (m, d))
#    define BOOST_PP_ENUM_TRAILING_3(c, m, d) BOOST_PP_REPEAT_3(c, BOOST_PP_ENUM_TRAILING_M_3, (m, d))
# else
#    define BOOST_PP_ENUM_TRAILING_1(c, m, d) BOOST_PP_ENUM_TRAILING_1_I(c, m, d)
#    define BOOST_PP_ENUM_TRAILING_2(c, m, d) BOOST_PP_ENUM_TRAILING_2_I(c, m, d)
#    define BOOST_PP_ENUM_TRAILING_3(c, m, d) BOOST_PP_ENUM_TRAILING_3_I(c, m, d)
#    define BOOST_PP_ENUM_TRAILING_1_I(c, m, d) BOOST_PP_REPEAT_1(c, BOOST_PP_ENUM_TRAILING_M_1, (m, d))
#    define BOOST_PP_ENUM_TRAILING_2_I(c, m, d) BOOST_PP_REPEAT_2(c, BOOST_PP_ENUM_TRAILING_M_2, (m, d))
#    define BOOST_PP_ENUM_TRAILING_3_I(c, m, d) BOOST_PP_REPEAT_3(c, BOOST_PP_ENUM_TRAILING_M_3, (m, d))
# endif
#
# define BOOST_PP_ENUM_TRAILING_4(c, m, d) BOOST_PP_ERROR(0x0003)
#
# if BOOST_PP_CONFIG_FLAGS() & BOOST_PP_CONFIG_STRICT()
#    define BOOST_PP_ENUM_TRAILING_M_1(z, n, md) BOOST_PP_ENUM_TRAILING_M_1_IM(z, n, BOOST_PP_TUPLE_REM_2 md)
#    define BOOST_PP_ENUM_TRAILING_M_2(z, n, md) BOOST_PP_ENUM_TRAILING_M_2_IM(z, n, BOOST_PP_TUPLE_REM_2 md)
#    define BOOST_PP_ENUM_TRAILING_M_3(z, n, md) BOOST_PP_ENUM_TRAILING_M_3_IM(z, n, BOOST_PP_TUPLE_REM_2 md)
#    define BOOST_PP_ENUM_TRAILING_M_1_IM(z, n, im) BOOST_PP_ENUM_TRAILING_M_1_I(z, n, im)
#    define BOOST_PP_ENUM_TRAILING_M_2_IM(z, n, im) BOOST_PP_ENUM_TRAILING_M_2_I(z, n, im)
#    define BOOST_PP_ENUM_TRAILING_M_3_IM(z, n, im) BOOST_PP_ENUM_TRAILING_M_3_I(z, n, im)
# else
#    define BOOST_PP_ENUM_TRAILING_M_1(z, n, md) BOOST_PP_ENUM_TRAILING_M_1_I(z, n, BOOST_PP_TUPLE_ELEM(2, 0, md), BOOST_PP_TUPLE_ELEM(2, 1, md))
#    define BOOST_PP_ENUM_TRAILING_M_2(z, n, md) BOOST_PP_ENUM_TRAILING_M_2_I(z, n, BOOST_PP_TUPLE_ELEM(2, 0, md), BOOST_PP_TUPLE_ELEM(2, 1, md))
#    define BOOST_PP_ENUM_TRAILING_M_3(z, n, md) BOOST_PP_ENUM_TRAILING_M_3_I(z, n, BOOST_PP_TUPLE_ELEM(2, 0, md), BOOST_PP_TUPLE_ELEM(2, 1, md))
# endif
#
# define BOOST_PP_ENUM_TRAILING_M_1_I(z, n, m, d) , m(z, n, d)
# define BOOST_PP_ENUM_TRAILING_M_2_I(z, n, m, d) , m(z, n, d)
# define BOOST_PP_ENUM_TRAILING_M_3_I(z, n, m, d) , m(z, n, d)
#
# endif

/* enum_trailing.hpp
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
*/