# /* **************************************************************************
#  *                                                                          *
#  *     (C) Copyright Paul Mensonides 2002.
#  *     Distributed under the Boost Software License, Version 1.0. (See
#  *     accompanying file LICENSE_1_0.txt or copy at
#  *     http://www.boost.org/LICENSE_1_0.txt)
#  *                                                                          *
#  ************************************************************************** */
#
# /* See http://www.boost.org for most recent version. */
#
# ifndef BOOST_PREPROCESSOR_REPETITION_ENUM_TRAILING_BINARY_PARAMS_HPP
# define BOOST_PREPROCESSOR_REPETITION_ENUM_TRAILING_BINARY_PARAMS_HPP
#
# include <boost/preprocessor/cat.hpp>
# include <boost/preprocessor/config/config.hpp>
# include <boost/preprocessor/repetition/repeat.hpp>
# include <boost/preprocessor/tuple/elem.hpp>
# include <boost/preprocessor/tuple/rem.hpp>
#
# /* BOOST_PP_ENUM_TRAILING_BINARY_PARAMS */
#
# if ~BOOST_PP_CONFIG_FLAGS() & BOOST_PP_CONFIG_EDG()
#    define BOOST_PP_ENUM_TRAILING_BINARY_PARAMS(count, p1, p2) BOOST_PP_REPEAT(count, BOOST_PP_ENUM_TRAILING_BINARY_PARAMS_M, (p1, p2))
# else
#    define BOOST_PP_ENUM_TRAILING_BINARY_PARAMS(count, p1, p2) BOOST_PP_ENUM_TRAILING_BINARY_PARAMS_I(count, p1, p2)
#    define BOOST_PP_ENUM_TRAILING_BINARY_PARAMS_I(count, p1, p2) BOOST_PP_REPEAT(count, BOOST_PP_ENUM_TRAILING_BINARY_PARAMS_M, (p1, p2))
# endif
#
# if BOOST_PP_CONFIG_FLAGS() & BOOST_PP_CONFIG_STRICT()
#    define BOOST_PP_ENUM_TRAILING_BINARY_PARAMS_M(z, n, pp) BOOST_PP_ENUM_TRAILING_BINARY_PARAMS_M_IM(z, n, BOOST_PP_TUPLE_REM_2 pp)
#    define BOOST_PP_ENUM_TRAILING_BINARY_PARAMS_M_IM(z, n, im) BOOST_PP_ENUM_TRAILING_BINARY_PARAMS_M_I(z, n, im)
# else
#    define BOOST_PP_ENUM_TRAILING_BINARY_PARAMS_M(z, n, pp) BOOST_PP_ENUM_TRAILING_BINARY_PARAMS_M_I(z, n, BOOST_PP_TUPLE_ELEM(2, 0, pp), BOOST_PP_TUPLE_ELEM(2, 1, pp))
# endif
#
# if ~BOOST_PP_CONFIG_FLAGS() & BOOST_PP_CONFIG_MSVC()
#    define BOOST_PP_ENUM_TRAILING_BINARY_PARAMS_M_I(z, n, p1, p2) BOOST_PP_ENUM_TRAILING_BINARY_PARAMS_M_II(z, n, p1, p2)
#    define BOOST_PP_ENUM_TRAILING_BINARY_PARAMS_M_II(z, n, p1, p2) , p1 ## n p2 ## n
# else
#    define BOOST_PP_ENUM_TRAILING_BINARY_PARAMS_M_I(z, n, p1, p2) , BOOST_PP_CAT(p1, n) BOOST_PP_CAT(p2, n)
# endif
#
# /* BOOST_PP_ENUM_TRAILING_BINARY_PARAMS_Z */
#
# if ~BOOST_PP_CONFIG_FLAGS() & BOOST_PP_CONFIG_EDG()
#    define BOOST_PP_ENUM_TRAILING_BINARY_PARAMS_Z(z, count, p1, p2) BOOST_PP_REPEAT_ ## z(count, BOOST_PP_ENUM_TRAILING_BINARY_PARAMS_M, (p1, p2))
# else
#    define BOOST_PP_ENUM_TRAILING_BINARY_PARAMS_Z(z, count, p1, p2) BOOST_PP_ENUM_TRAILING_BINARY_PARAMS_Z_I(z, count, p1, p2)
#    define BOOST_PP_ENUM_TRAILING_BINARY_PARAMS_Z_I(z, count, p1, p2) BOOST_PP_REPEAT_ ## z(count, BOOST_PP_ENUM_TRAILING_BINARY_PARAMS_M, (p1, p2))
# endif
#
# endif

/* enum_trailing_binary_params.hpp
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
*/