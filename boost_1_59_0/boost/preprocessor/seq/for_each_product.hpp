# /* **************************************************************************
#  *                                                                          *
#  *     (C) Copyright Paul Mensonides 2002.
#  *     Distributed under the Boost Software License, Version 1.0. (See
#  *     accompanying file LICENSE_1_0.txt or copy at
#  *     http://www.boost.org/LICENSE_1_0.txt)
#  *                                                                          *
#  ************************************************************************** */
#
# /* See http://www.boost.org for most recent version. */
#
# ifndef BOOST_PREPROCESSOR_SEQ_FOR_EACH_PRODUCT_HPP
# define BOOST_PREPROCESSOR_SEQ_FOR_EACH_PRODUCT_HPP
#
# include <boost/preprocessor/arithmetic/dec.hpp>
# include <boost/preprocessor/config/config.hpp>
# include <boost/preprocessor/control/if.hpp>
# include <boost/preprocessor/repetition/for.hpp>
# include <boost/preprocessor/seq/seq.hpp>
# include <boost/preprocessor/seq/size.hpp>
# include <boost/preprocessor/tuple/elem.hpp>
# include <boost/preprocessor/tuple/rem.hpp>
#
# /* BOOST_PP_SEQ_FOR_EACH_PRODUCT */
#
# define BOOST_PP_SEQ_FOR_EACH_PRODUCT(macro, sets) BOOST_PP_SEQ_FOR_EACH_PRODUCT_E(BOOST_PP_FOR, macro, sets)
#
# /* BOOST_PP_SEQ_FOR_EACH_PRODUCT_R */
#
# define BOOST_PP_SEQ_FOR_EACH_PRODUCT_R(r, macro, sets) BOOST_PP_SEQ_FOR_EACH_PRODUCT_E(BOOST_PP_FOR_ ## r, macro, sets)
#
# if ~BOOST_PP_CONFIG_FLAGS() & BOOST_PP_CONFIG_EDG()
#    define BOOST_PP_SEQ_FOR_EACH_PRODUCT_E(impl, macro, sets) impl((BOOST_PP_SEQ_HEAD(sets)(nil), BOOST_PP_SEQ_TAIL(sets)(nil), (nil), macro), BOOST_PP_SEQ_FOR_EACH_PRODUCT_P, BOOST_PP_SEQ_FOR_EACH_PRODUCT_O, BOOST_PP_SEQ_FOR_EACH_PRODUCT_M_0)
# else
#    define BOOST_PP_SEQ_FOR_EACH_PRODUCT_E(impl, macro, sets) BOOST_PP_SEQ_FOR_EACH_PRODUCT_E_I(impl, macro, sets)
#    define BOOST_PP_SEQ_FOR_EACH_PRODUCT_E_I(impl, macro, sets) impl((BOOST_PP_SEQ_HEAD(sets)(nil), BOOST_PP_SEQ_TAIL(sets)(nil), (nil), macro), BOOST_PP_SEQ_FOR_EACH_PRODUCT_P, BOOST_PP_SEQ_FOR_EACH_PRODUCT_O, BOOST_PP_SEQ_FOR_EACH_PRODUCT_M_0)
# endif
#
# if BOOST_PP_CONFIG_FLAGS() & BOOST_PP_CONFIG_STRICT()
#    define BOOST_PP_SEQ_FOR_EACH_PRODUCT_P(r, data) BOOST_PP_SEQ_FOR_EACH_PRODUCT_P_I data
#    define BOOST_PP_SEQ_FOR_EACH_PRODUCT_P_I(cset, rset, res, macro) BOOST_PP_DEC(BOOST_PP_SEQ_SIZE(cset))
# else
#    define BOOST_PP_SEQ_FOR_EACH_PRODUCT_P(r, data) BOOST_PP_DEC(BOOST_PP_SEQ_SIZE(BOOST_PP_TUPLE_ELEM(4, 0, data)))
# endif
#
# if ~BOOST_PP_CONFIG_FLAGS() & BOOST_PP_CONFIG_MWCC()
#    define BOOST_PP_SEQ_FOR_EACH_PRODUCT_O(r, data) BOOST_PP_SEQ_FOR_EACH_PRODUCT_O_I data
#    define BOOST_PP_SEQ_FOR_EACH_PRODUCT_O_I(cset, rset, res, macro) (BOOST_PP_SEQ_TAIL(cset), rset, res, macro)
# else
#    define BOOST_PP_SEQ_FOR_EACH_PRODUCT_O(r, data) (BOOST_PP_SEQ_TAIL(BOOST_PP_TUPLE_ELEM(4, 0, data)), BOOST_PP_TUPLE_ELEM(4, 1, data), BOOST_PP_TUPLE_ELEM(4, 2, data), BOOST_PP_TUPLE_ELEM(4, 3, data))
# endif
#
# define BOOST_PP_SEQ_FOR_EACH_PRODUCT_C(data, i) BOOST_PP_IF(BOOST_PP_DEC(BOOST_PP_SEQ_SIZE(BOOST_PP_TUPLE_ELEM(4, 1, data))), BOOST_PP_SEQ_FOR_EACH_PRODUCT_N_ ## i, BOOST_PP_SEQ_FOR_EACH_PRODUCT_I)
#
# if ~BOOST_PP_CONFIG_FLAGS() & BOOST_PP_CONFIG_EDG()
#    define BOOST_PP_SEQ_FOR_EACH_PRODUCT_I(r, data) BOOST_PP_SEQ_FOR_EACH_PRODUCT_I_I(r, BOOST_PP_TUPLE_ELEM(4, 0, data), BOOST_PP_TUPLE_ELEM(4, 1, data), BOOST_PP_TUPLE_ELEM(4, 2, data), BOOST_PP_TUPLE_ELEM(4, 3, data))
# else
#    define BOOST_PP_SEQ_FOR_EACH_PRODUCT_I(r, data) BOOST_PP_SEQ_FOR_EACH_PRODUCT_I_IM(r, BOOST_PP_TUPLE_REM_4 data)
#    define BOOST_PP_SEQ_FOR_EACH_PRODUCT_I_IM(r, im) BOOST_PP_SEQ_FOR_EACH_PRODUCT_I_I(r, im)
# endif
#
# define BOOST_PP_SEQ_FOR_EACH_PRODUCT_I_I(r, cset, rset, res, macro) macro(r, BOOST_PP_SEQ_TAIL(res (BOOST_PP_SEQ_HEAD(cset))))
#
# if ~BOOST_PP_CONFIG_FLAGS() & BOOST_PP_CONFIG_MWCC()
#    define BOOST_PP_SEQ_FOR_EACH_PRODUCT_H(data) BOOST_PP_SEQ_FOR_EACH_PRODUCT_H_I data
# else
#    define BOOST_PP_SEQ_FOR_EACH_PRODUCT_H(data) BOOST_PP_SEQ_FOR_EACH_PRODUCT_H_I(BOOST_PP_TUPLE_ELEM(4, 0, data), BOOST_PP_TUPLE_ELEM(4, 1, data), BOOST_PP_TUPLE_ELEM(4, 2, data), BOOST_PP_TUPLE_ELEM(4, 3, data))
# endif
#
# define BOOST_PP_SEQ_FOR_EACH_PRODUCT_H_I(cset, rset, res, macro) (BOOST_PP_SEQ_HEAD(rset)(nil), BOOST_PP_SEQ_TAIL(rset), res (BOOST_PP_SEQ_HEAD(cset)), macro)
#
# define BOOST_PP_SEQ_FOR_EACH_PRODUCT_M_0(r, data) BOOST_PP_SEQ_FOR_EACH_PRODUCT_C(data, 0)(r, data)
# define BOOST_PP_SEQ_FOR_EACH_PRODUCT_M_1(r, data) BOOST_PP_SEQ_FOR_EACH_PRODUCT_C(data, 1)(r, data)
# define BOOST_PP_SEQ_FOR_EACH_PRODUCT_M_2(r, data) BOOST_PP_SEQ_FOR_EACH_PRODUCT_C(data, 2)(r, data)
# define BOOST_PP_SEQ_FOR_EACH_PRODUCT_M_3(r, data) BOOST_PP_SEQ_FOR_EACH_PRODUCT_C(data, 3)(r, data)
# define BOOST_PP_SEQ_FOR_EACH_PRODUCT_M_4(r, data) BOOST_PP_SEQ_FOR_EACH_PRODUCT_C(data, 4)(r, data)
# define BOOST_PP_SEQ_FOR_EACH_PRODUCT_M_5(r, data) BOOST_PP_SEQ_FOR_EACH_PRODUCT_C(data, 5)(r, data)
# define BOOST_PP_SEQ_FOR_EACH_PRODUCT_M_6(r, data) BOOST_PP_SEQ_FOR_EACH_PRODUCT_C(data, 6)(r, data)
# define BOOST_PP_SEQ_FOR_EACH_PRODUCT_M_7(r, data) BOOST_PP_SEQ_FOR_EACH_PRODUCT_C(data, 7)(r, data)
# define BOOST_PP_SEQ_FOR_EACH_PRODUCT_M_8(r, data) BOOST_PP_SEQ_FOR_EACH_PRODUCT_C(data, 8)(r, data)
# define BOOST_PP_SEQ_FOR_EACH_PRODUCT_M_9(r, data) BOOST_PP_SEQ_FOR_EACH_PRODUCT_C(data, 9)(r, data)
# define BOOST_PP_SEQ_FOR_EACH_PRODUCT_M_10(r, data) BOOST_PP_SEQ_FOR_EACH_PRODUCT_C(data, 10)(r, data)
# define BOOST_PP_SEQ_FOR_EACH_PRODUCT_M_11(r, data) BOOST_PP_SEQ_FOR_EACH_PRODUCT_C(data, 11)(r, data)
# define BOOST_PP_SEQ_FOR_EACH_PRODUCT_M_12(r, data) BOOST_PP_SEQ_FOR_EACH_PRODUCT_C(data, 12)(r, data)
# define BOOST_PP_SEQ_FOR_EACH_PRODUCT_M_13(r, data) BOOST_PP_SEQ_FOR_EACH_PRODUCT_C(data, 13)(r, data)
# define BOOST_PP_SEQ_FOR_EACH_PRODUCT_M_14(r, data) BOOST_PP_SEQ_FOR_EACH_PRODUCT_C(data, 14)(r, data)
# define BOOST_PP_SEQ_FOR_EACH_PRODUCT_M_15(r, data) BOOST_PP_SEQ_FOR_EACH_PRODUCT_C(data, 15)(r, data)
# define BOOST_PP_SEQ_FOR_EACH_PRODUCT_M_16(r, data) BOOST_PP_SEQ_FOR_EACH_PRODUCT_C(data, 16)(r, data)
# define BOOST_PP_SEQ_FOR_EACH_PRODUCT_M_17(r, data) BOOST_PP_SEQ_FOR_EACH_PRODUCT_C(data, 17)(r, data)
# define BOOST_PP_SEQ_FOR_EACH_PRODUCT_M_18(r, data) BOOST_PP_SEQ_FOR_EACH_PRODUCT_C(data, 18)(r, data)
# define BOOST_PP_SEQ_FOR_EACH_PRODUCT_M_19(r, data) BOOST_PP_SEQ_FOR_EACH_PRODUCT_C(data, 19)(r, data)
# define BOOST_PP_SEQ_FOR_EACH_PRODUCT_M_20(r, data) BOOST_PP_SEQ_FOR_EACH_PRODUCT_C(data, 20)(r, data)
# define BOOST_PP_SEQ_FOR_EACH_PRODUCT_M_21(r, data) BOOST_PP_SEQ_FOR_EACH_PRODUCT_C(data, 21)(r, data)
# define BOOST_PP_SEQ_FOR_EACH_PRODUCT_M_22(r, data) BOOST_PP_SEQ_FOR_EACH_PRODUCT_C(data, 22)(r, data)
# define BOOST_PP_SEQ_FOR_EACH_PRODUCT_M_23(r, data) BOOST_PP_SEQ_FOR_EACH_PRODUCT_C(data, 23)(r, data)
# define BOOST_PP_SEQ_FOR_EACH_PRODUCT_M_24(r, data) BOOST_PP_SEQ_FOR_EACH_PRODUCT_C(data, 24)(r, data)
# define BOOST_PP_SEQ_FOR_EACH_PRODUCT_M_25(r, data) BOOST_PP_SEQ_FOR_EACH_PRODUCT_C(data, 25)(r, data)
#
# define BOOST_PP_SEQ_FOR_EACH_PRODUCT_N_0(r, data) BOOST_PP_FOR_ ## r(BOOST_PP_SEQ_FOR_EACH_PRODUCT_H(data), BOOST_PP_SEQ_FOR_EACH_PRODUCT_P, BOOST_PP_SEQ_FOR_EACH_PRODUCT_O, BOOST_PP_SEQ_FOR_EACH_PRODUCT_M_1)
# define BOOST_PP_SEQ_FOR_EACH_PRODUCT_N_1(r, data) BOOST_PP_FOR_ ## r(BOOST_PP_SEQ_FOR_EACH_PRODUCT_H(data), BOOST_PP_SEQ_FOR_EACH_PRODUCT_P, BOOST_PP_SEQ_FOR_EACH_PRODUCT_O, BOOST_PP_SEQ_FOR_EACH_PRODUCT_M_2)
# define BOOST_PP_SEQ_FOR_EACH_PRODUCT_N_2(r, data) BOOST_PP_FOR_ ## r(BOOST_PP_SEQ_FOR_EACH_PRODUCT_H(data), BOOST_PP_SEQ_FOR_EACH_PRODUCT_P, BOOST_PP_SEQ_FOR_EACH_PRODUCT_O, BOOST_PP_SEQ_FOR_EACH_PRODUCT_M_3)
# define BOOST_PP_SEQ_FOR_EACH_PRODUCT_N_3(r, data) BOOST_PP_FOR_ ## r(BOOST_PP_SEQ_FOR_EACH_PRODUCT_H(data), BOOST_PP_SEQ_FOR_EACH_PRODUCT_P, BOOST_PP_SEQ_FOR_EACH_PRODUCT_O, BOOST_PP_SEQ_FOR_EACH_PRODUCT_M_4)
# define BOOST_PP_SEQ_FOR_EACH_PRODUCT_N_4(r, data) BOOST_PP_FOR_ ## r(BOOST_PP_SEQ_FOR_EACH_PRODUCT_H(data), BOOST_PP_SEQ_FOR_EACH_PRODUCT_P, BOOST_PP_SEQ_FOR_EACH_PRODUCT_O, BOOST_PP_SEQ_FOR_EACH_PRODUCT_M_5)
# define BOOST_PP_SEQ_FOR_EACH_PRODUCT_N_5(r, data) BOOST_PP_FOR_ ## r(BOOST_PP_SEQ_FOR_EACH_PRODUCT_H(data), BOOST_PP_SEQ_FOR_EACH_PRODUCT_P, BOOST_PP_SEQ_FOR_EACH_PRODUCT_O, BOOST_PP_SEQ_FOR_EACH_PRODUCT_M_6)
# define BOOST_PP_SEQ_FOR_EACH_PRODUCT_N_6(r, data) BOOST_PP_FOR_ ## r(BOOST_PP_SEQ_FOR_EACH_PRODUCT_H(data), BOOST_PP_SEQ_FOR_EACH_PRODUCT_P, BOOST_PP_SEQ_FOR_EACH_PRODUCT_O, BOOST_PP_SEQ_FOR_EACH_PRODUCT_M_7)
# define BOOST_PP_SEQ_FOR_EACH_PRODUCT_N_7(r, data) BOOST_PP_FOR_ ## r(BOOST_PP_SEQ_FOR_EACH_PRODUCT_H(data), BOOST_PP_SEQ_FOR_EACH_PRODUCT_P, BOOST_PP_SEQ_FOR_EACH_PRODUCT_O, BOOST_PP_SEQ_FOR_EACH_PRODUCT_M_8)
# define BOOST_PP_SEQ_FOR_EACH_PRODUCT_N_8(r, data) BOOST_PP_FOR_ ## r(BOOST_PP_SEQ_FOR_EACH_PRODUCT_H(data), BOOST_PP_SEQ_FOR_EACH_PRODUCT_P, BOOST_PP_SEQ_FOR_EACH_PRODUCT_O, BOOST_PP_SEQ_FOR_EACH_PRODUCT_M_9)
# define BOOST_PP_SEQ_FOR_EACH_PRODUCT_N_9(r, data) BOOST_PP_FOR_ ## r(BOOST_PP_SEQ_FOR_EACH_PRODUCT_H(data), BOOST_PP_SEQ_FOR_EACH_PRODUCT_P, BOOST_PP_SEQ_FOR_EACH_PRODUCT_O, BOOST_PP_SEQ_FOR_EACH_PRODUCT_M_10)
# define BOOST_PP_SEQ_FOR_EACH_PRODUCT_N_10(r, data) BOOST_PP_FOR_ ## r(BOOST_PP_SEQ_FOR_EACH_PRODUCT_H(data), BOOST_PP_SEQ_FOR_EACH_PRODUCT_P, BOOST_PP_SEQ_FOR_EACH_PRODUCT_O, BOOST_PP_SEQ_FOR_EACH_PRODUCT_M_11)
# define BOOST_PP_SEQ_FOR_EACH_PRODUCT_N_11(r, data) BOOST_PP_FOR_ ## r(BOOST_PP_SEQ_FOR_EACH_PRODUCT_H(data), BOOST_PP_SEQ_FOR_EACH_PRODUCT_P, BOOST_PP_SEQ_FOR_EACH_PRODUCT_O, BOOST_PP_SEQ_FOR_EACH_PRODUCT_M_12)
# define BOOST_PP_SEQ_FOR_EACH_PRODUCT_N_12(r, data) BOOST_PP_FOR_ ## r(BOOST_PP_SEQ_FOR_EACH_PRODUCT_H(data), BOOST_PP_SEQ_FOR_EACH_PRODUCT_P, BOOST_PP_SEQ_FOR_EACH_PRODUCT_O, BOOST_PP_SEQ_FOR_EACH_PRODUCT_M_13)
# define BOOST_PP_SEQ_FOR_EACH_PRODUCT_N_13(r, data) BOOST_PP_FOR_ ## r(BOOST_PP_SEQ_FOR_EACH_PRODUCT_H(data), BOOST_PP_SEQ_FOR_EACH_PRODUCT_P, BOOST_PP_SEQ_FOR_EACH_PRODUCT_O, BOOST_PP_SEQ_FOR_EACH_PRODUCT_M_14)
# define BOOST_PP_SEQ_FOR_EACH_PRODUCT_N_14(r, data) BOOST_PP_FOR_ ## r(BOOST_PP_SEQ_FOR_EACH_PRODUCT_H(data), BOOST_PP_SEQ_FOR_EACH_PRODUCT_P, BOOST_PP_SEQ_FOR_EACH_PRODUCT_O, BOOST_PP_SEQ_FOR_EACH_PRODUCT_M_15)
# define BOOST_PP_SEQ_FOR_EACH_PRODUCT_N_15(r, data) BOOST_PP_FOR_ ## r(BOOST_PP_SEQ_FOR_EACH_PRODUCT_H(data), BOOST_PP_SEQ_FOR_EACH_PRODUCT_P, BOOST_PP_SEQ_FOR_EACH_PRODUCT_O, BOOST_PP_SEQ_FOR_EACH_PRODUCT_M_16)
# define BOOST_PP_SEQ_FOR_EACH_PRODUCT_N_16(r, data) BOOST_PP_FOR_ ## r(BOOST_PP_SEQ_FOR_EACH_PRODUCT_H(data), BOOST_PP_SEQ_FOR_EACH_PRODUCT_P, BOOST_PP_SEQ_FOR_EACH_PRODUCT_O, BOOST_PP_SEQ_FOR_EACH_PRODUCT_M_17)
# define BOOST_PP_SEQ_FOR_EACH_PRODUCT_N_17(r, data) BOOST_PP_FOR_ ## r(BOOST_PP_SEQ_FOR_EACH_PRODUCT_H(data), BOOST_PP_SEQ_FOR_EACH_PRODUCT_P, BOOST_PP_SEQ_FOR_EACH_PRODUCT_O, BOOST_PP_SEQ_FOR_EACH_PRODUCT_M_18)
# define BOOST_PP_SEQ_FOR_EACH_PRODUCT_N_18(r, data) BOOST_PP_FOR_ ## r(BOOST_PP_SEQ_FOR_EACH_PRODUCT_H(data), BOOST_PP_SEQ_FOR_EACH_PRODUCT_P, BOOST_PP_SEQ_FOR_EACH_PRODUCT_O, BOOST_PP_SEQ_FOR_EACH_PRODUCT_M_19)
# define BOOST_PP_SEQ_FOR_EACH_PRODUCT_N_19(r, data) BOOST_PP_FOR_ ## r(BOOST_PP_SEQ_FOR_EACH_PRODUCT_H(data), BOOST_PP_SEQ_FOR_EACH_PRODUCT_P, BOOST_PP_SEQ_FOR_EACH_PRODUCT_O, BOOST_PP_SEQ_FOR_EACH_PRODUCT_M_20)
# define BOOST_PP_SEQ_FOR_EACH_PRODUCT_N_20(r, data) BOOST_PP_FOR_ ## r(BOOST_PP_SEQ_FOR_EACH_PRODUCT_H(data), BOOST_PP_SEQ_FOR_EACH_PRODUCT_P, BOOST_PP_SEQ_FOR_EACH_PRODUCT_O, BOOST_PP_SEQ_FOR_EACH_PRODUCT_M_21)
# define BOOST_PP_SEQ_FOR_EACH_PRODUCT_N_21(r, data) BOOST_PP_FOR_ ## r(BOOST_PP_SEQ_FOR_EACH_PRODUCT_H(data), BOOST_PP_SEQ_FOR_EACH_PRODUCT_P, BOOST_PP_SEQ_FOR_EACH_PRODUCT_O, BOOST_PP_SEQ_FOR_EACH_PRODUCT_M_22)
# define BOOST_PP_SEQ_FOR_EACH_PRODUCT_N_22(r, data) BOOST_PP_FOR_ ## r(BOOST_PP_SEQ_FOR_EACH_PRODUCT_H(data), BOOST_PP_SEQ_FOR_EACH_PRODUCT_P, BOOST_PP_SEQ_FOR_EACH_PRODUCT_O, BOOST_PP_SEQ_FOR_EACH_PRODUCT_M_23)
# define BOOST_PP_SEQ_FOR_EACH_PRODUCT_N_23(r, data) BOOST_PP_FOR_ ## r(BOOST_PP_SEQ_FOR_EACH_PRODUCT_H(data), BOOST_PP_SEQ_FOR_EACH_PRODUCT_P, BOOST_PP_SEQ_FOR_EACH_PRODUCT_O, BOOST_PP_SEQ_FOR_EACH_PRODUCT_M_24)
# define BOOST_PP_SEQ_FOR_EACH_PRODUCT_N_24(r, data) BOOST_PP_FOR_ ## r(BOOST_PP_SEQ_FOR_EACH_PRODUCT_H(data), BOOST_PP_SEQ_FOR_EACH_PRODUCT_P, BOOST_PP_SEQ_FOR_EACH_PRODUCT_O, BOOST_PP_SEQ_FOR_EACH_PRODUCT_M_25)
# define BOOST_PP_SEQ_FOR_EACH_PRODUCT_N_25(r, data) BOOST_PP_FOR_ ## r(BOOST_PP_SEQ_FOR_EACH_PRODUCT_H(data), BOOST_PP_SEQ_FOR_EACH_PRODUCT_P, BOOST_PP_SEQ_FOR_EACH_PRODUCT_O, BOOST_PP_SEQ_FOR_EACH_PRODUCT_M_26)
#
# endif

/* for_each_product.hpp
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
*/