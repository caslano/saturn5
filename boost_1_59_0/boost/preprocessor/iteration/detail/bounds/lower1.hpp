# /* **************************************************************************
#  *                                                                          *
#  *     (C) Copyright Paul Mensonides 2002.
#  *     Distributed under the Boost Software License, Version 1.0. (See
#  *     accompanying file LICENSE_1_0.txt or copy at
#  *     http://www.boost.org/LICENSE_1_0.txt)
#  *                                                                          *
#  ************************************************************************** */
#
# /* See http://www.boost.org for most recent version. */
#
# include <boost/preprocessor/slot/detail/shared.hpp>
#
# undef BOOST_PP_ITERATION_START_1
#
# undef BOOST_PP_ITERATION_START_1_DIGIT_1
# undef BOOST_PP_ITERATION_START_1_DIGIT_2
# undef BOOST_PP_ITERATION_START_1_DIGIT_3
# undef BOOST_PP_ITERATION_START_1_DIGIT_4
# undef BOOST_PP_ITERATION_START_1_DIGIT_5
# undef BOOST_PP_ITERATION_START_1_DIGIT_6
# undef BOOST_PP_ITERATION_START_1_DIGIT_7
# undef BOOST_PP_ITERATION_START_1_DIGIT_8
# undef BOOST_PP_ITERATION_START_1_DIGIT_9
# undef BOOST_PP_ITERATION_START_1_DIGIT_10
#
# if BOOST_PP_SLOT_TEMP_3 == 0
#    define BOOST_PP_ITERATION_START_1_DIGIT_3 0
# elif BOOST_PP_SLOT_TEMP_3 == 1
#    define BOOST_PP_ITERATION_START_1_DIGIT_3 1
# elif BOOST_PP_SLOT_TEMP_3 == 2
#    define BOOST_PP_ITERATION_START_1_DIGIT_3 2
# elif BOOST_PP_SLOT_TEMP_3 == 3
#    define BOOST_PP_ITERATION_START_1_DIGIT_3 3
# elif BOOST_PP_SLOT_TEMP_3 == 4
#    define BOOST_PP_ITERATION_START_1_DIGIT_3 4
# elif BOOST_PP_SLOT_TEMP_3 == 5
#    define BOOST_PP_ITERATION_START_1_DIGIT_3 5
# elif BOOST_PP_SLOT_TEMP_3 == 6
#    define BOOST_PP_ITERATION_START_1_DIGIT_3 6
# elif BOOST_PP_SLOT_TEMP_3 == 7
#    define BOOST_PP_ITERATION_START_1_DIGIT_3 7
# elif BOOST_PP_SLOT_TEMP_3 == 8
#    define BOOST_PP_ITERATION_START_1_DIGIT_3 8
# elif BOOST_PP_SLOT_TEMP_3 == 9
#    define BOOST_PP_ITERATION_START_1_DIGIT_3 9
# endif
#
# if BOOST_PP_SLOT_TEMP_2 == 0
#    define BOOST_PP_ITERATION_START_1_DIGIT_2 0
# elif BOOST_PP_SLOT_TEMP_2 == 1
#    define BOOST_PP_ITERATION_START_1_DIGIT_2 1
# elif BOOST_PP_SLOT_TEMP_2 == 2
#    define BOOST_PP_ITERATION_START_1_DIGIT_2 2
# elif BOOST_PP_SLOT_TEMP_2 == 3
#    define BOOST_PP_ITERATION_START_1_DIGIT_2 3
# elif BOOST_PP_SLOT_TEMP_2 == 4
#    define BOOST_PP_ITERATION_START_1_DIGIT_2 4
# elif BOOST_PP_SLOT_TEMP_2 == 5
#    define BOOST_PP_ITERATION_START_1_DIGIT_2 5
# elif BOOST_PP_SLOT_TEMP_2 == 6
#    define BOOST_PP_ITERATION_START_1_DIGIT_2 6
# elif BOOST_PP_SLOT_TEMP_2 == 7
#    define BOOST_PP_ITERATION_START_1_DIGIT_2 7
# elif BOOST_PP_SLOT_TEMP_2 == 8
#    define BOOST_PP_ITERATION_START_1_DIGIT_2 8
# elif BOOST_PP_SLOT_TEMP_2 == 9
#    define BOOST_PP_ITERATION_START_1_DIGIT_2 9
# endif
#
# if BOOST_PP_SLOT_TEMP_1 == 0
#    define BOOST_PP_ITERATION_START_1_DIGIT_1 0
# elif BOOST_PP_SLOT_TEMP_1 == 1
#    define BOOST_PP_ITERATION_START_1_DIGIT_1 1
# elif BOOST_PP_SLOT_TEMP_1 == 2
#    define BOOST_PP_ITERATION_START_1_DIGIT_1 2
# elif BOOST_PP_SLOT_TEMP_1 == 3
#    define BOOST_PP_ITERATION_START_1_DIGIT_1 3
# elif BOOST_PP_SLOT_TEMP_1 == 4
#    define BOOST_PP_ITERATION_START_1_DIGIT_1 4
# elif BOOST_PP_SLOT_TEMP_1 == 5
#    define BOOST_PP_ITERATION_START_1_DIGIT_1 5
# elif BOOST_PP_SLOT_TEMP_1 == 6
#    define BOOST_PP_ITERATION_START_1_DIGIT_1 6
# elif BOOST_PP_SLOT_TEMP_1 == 7
#    define BOOST_PP_ITERATION_START_1_DIGIT_1 7
# elif BOOST_PP_SLOT_TEMP_1 == 8
#    define BOOST_PP_ITERATION_START_1_DIGIT_1 8
# elif BOOST_PP_SLOT_TEMP_1 == 9
#    define BOOST_PP_ITERATION_START_1_DIGIT_1 9
# endif
#
# if BOOST_PP_ITERATION_START_1_DIGIT_3
#    define BOOST_PP_ITERATION_START_1 BOOST_PP_SLOT_CC_3(BOOST_PP_ITERATION_START_1_DIGIT_3, BOOST_PP_ITERATION_START_1_DIGIT_2, BOOST_PP_ITERATION_START_1_DIGIT_1)
# elif BOOST_PP_ITERATION_START_1_DIGIT_2
#    define BOOST_PP_ITERATION_START_1 BOOST_PP_SLOT_CC_2(BOOST_PP_ITERATION_START_1_DIGIT_2, BOOST_PP_ITERATION_START_1_DIGIT_1)
# else
#    define BOOST_PP_ITERATION_START_1 BOOST_PP_ITERATION_START_1_DIGIT_1
# endif

/* lower1.hpp
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
*/