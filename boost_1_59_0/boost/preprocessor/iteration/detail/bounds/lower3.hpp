# /* **************************************************************************
#  *                                                                          *
#  *     (C) Copyright Paul Mensonides 2002.
#  *     Distributed under the Boost Software License, Version 1.0. (See
#  *     accompanying file LICENSE_1_0.txt or copy at
#  *     http://www.boost.org/LICENSE_1_0.txt)
#  *                                                                          *
#  ************************************************************************** */
#
# /* See http://www.boost.org for most recent version. */
#
# include <boost/preprocessor/slot/detail/shared.hpp>
#
# undef BOOST_PP_ITERATION_START_3
#
# undef BOOST_PP_ITERATION_START_3_DIGIT_1
# undef BOOST_PP_ITERATION_START_3_DIGIT_2
# undef BOOST_PP_ITERATION_START_3_DIGIT_3
# undef BOOST_PP_ITERATION_START_3_DIGIT_4
# undef BOOST_PP_ITERATION_START_3_DIGIT_5
# undef BOOST_PP_ITERATION_START_3_DIGIT_6
# undef BOOST_PP_ITERATION_START_3_DIGIT_7
# undef BOOST_PP_ITERATION_START_3_DIGIT_8
# undef BOOST_PP_ITERATION_START_3_DIGIT_9
# undef BOOST_PP_ITERATION_START_3_DIGIT_10
#
# if BOOST_PP_SLOT_TEMP_3 == 0
#    define BOOST_PP_ITERATION_START_3_DIGIT_3 0
# elif BOOST_PP_SLOT_TEMP_3 == 1
#    define BOOST_PP_ITERATION_START_3_DIGIT_3 1
# elif BOOST_PP_SLOT_TEMP_3 == 2
#    define BOOST_PP_ITERATION_START_3_DIGIT_3 2
# elif BOOST_PP_SLOT_TEMP_3 == 3
#    define BOOST_PP_ITERATION_START_3_DIGIT_3 3
# elif BOOST_PP_SLOT_TEMP_3 == 4
#    define BOOST_PP_ITERATION_START_3_DIGIT_3 4
# elif BOOST_PP_SLOT_TEMP_3 == 5
#    define BOOST_PP_ITERATION_START_3_DIGIT_3 5
# elif BOOST_PP_SLOT_TEMP_3 == 6
#    define BOOST_PP_ITERATION_START_3_DIGIT_3 6
# elif BOOST_PP_SLOT_TEMP_3 == 7
#    define BOOST_PP_ITERATION_START_3_DIGIT_3 7
# elif BOOST_PP_SLOT_TEMP_3 == 8
#    define BOOST_PP_ITERATION_START_3_DIGIT_3 8
# elif BOOST_PP_SLOT_TEMP_3 == 9
#    define BOOST_PP_ITERATION_START_3_DIGIT_3 9
# endif
#
# if BOOST_PP_SLOT_TEMP_2 == 0
#    define BOOST_PP_ITERATION_START_3_DIGIT_2 0
# elif BOOST_PP_SLOT_TEMP_2 == 1
#    define BOOST_PP_ITERATION_START_3_DIGIT_2 1
# elif BOOST_PP_SLOT_TEMP_2 == 2
#    define BOOST_PP_ITERATION_START_3_DIGIT_2 2
# elif BOOST_PP_SLOT_TEMP_2 == 3
#    define BOOST_PP_ITERATION_START_3_DIGIT_2 3
# elif BOOST_PP_SLOT_TEMP_2 == 4
#    define BOOST_PP_ITERATION_START_3_DIGIT_2 4
# elif BOOST_PP_SLOT_TEMP_2 == 5
#    define BOOST_PP_ITERATION_START_3_DIGIT_2 5
# elif BOOST_PP_SLOT_TEMP_2 == 6
#    define BOOST_PP_ITERATION_START_3_DIGIT_2 6
# elif BOOST_PP_SLOT_TEMP_2 == 7
#    define BOOST_PP_ITERATION_START_3_DIGIT_2 7
# elif BOOST_PP_SLOT_TEMP_2 == 8
#    define BOOST_PP_ITERATION_START_3_DIGIT_2 8
# elif BOOST_PP_SLOT_TEMP_2 == 9
#    define BOOST_PP_ITERATION_START_3_DIGIT_2 9
# endif
#
# if BOOST_PP_SLOT_TEMP_1 == 0
#    define BOOST_PP_ITERATION_START_3_DIGIT_1 0
# elif BOOST_PP_SLOT_TEMP_1 == 1
#    define BOOST_PP_ITERATION_START_3_DIGIT_1 1
# elif BOOST_PP_SLOT_TEMP_1 == 2
#    define BOOST_PP_ITERATION_START_3_DIGIT_1 2
# elif BOOST_PP_SLOT_TEMP_1 == 3
#    define BOOST_PP_ITERATION_START_3_DIGIT_1 3
# elif BOOST_PP_SLOT_TEMP_1 == 4
#    define BOOST_PP_ITERATION_START_3_DIGIT_1 4
# elif BOOST_PP_SLOT_TEMP_1 == 5
#    define BOOST_PP_ITERATION_START_3_DIGIT_1 5
# elif BOOST_PP_SLOT_TEMP_1 == 6
#    define BOOST_PP_ITERATION_START_3_DIGIT_1 6
# elif BOOST_PP_SLOT_TEMP_1 == 7
#    define BOOST_PP_ITERATION_START_3_DIGIT_1 7
# elif BOOST_PP_SLOT_TEMP_1 == 8
#    define BOOST_PP_ITERATION_START_3_DIGIT_1 8
# elif BOOST_PP_SLOT_TEMP_1 == 9
#    define BOOST_PP_ITERATION_START_3_DIGIT_1 9
# endif
#
# if BOOST_PP_ITERATION_START_3_DIGIT_3
#    define BOOST_PP_ITERATION_START_3 BOOST_PP_SLOT_CC_3(BOOST_PP_ITERATION_START_3_DIGIT_3, BOOST_PP_ITERATION_START_3_DIGIT_2, BOOST_PP_ITERATION_START_3_DIGIT_1)
# elif BOOST_PP_ITERATION_START_3_DIGIT_2
#    define BOOST_PP_ITERATION_START_3 BOOST_PP_SLOT_CC_2(BOOST_PP_ITERATION_START_3_DIGIT_2, BOOST_PP_ITERATION_START_3_DIGIT_1)
# else
#    define BOOST_PP_ITERATION_START_3 BOOST_PP_ITERATION_START_3_DIGIT_1
# endif

/* lower3.hpp
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
*/