# /* **************************************************************************
#  *                                                                          *
#  *     (C) Copyright Paul Mensonides 2002.
#  *     Distributed under the Boost Software License, Version 1.0. (See
#  *     accompanying file LICENSE_1_0.txt or copy at
#  *     http://www.boost.org/LICENSE_1_0.txt)
#  *                                                                          *
#  ************************************************************************** */
#
# /* See http://www.boost.org for most recent version. */
#
# include <boost/preprocessor/slot/detail/shared.hpp>
#
# undef BOOST_PP_ITERATION_START_2
#
# undef BOOST_PP_ITERATION_START_2_DIGIT_1
# undef BOOST_PP_ITERATION_START_2_DIGIT_2
# undef BOOST_PP_ITERATION_START_2_DIGIT_3
# undef BOOST_PP_ITERATION_START_2_DIGIT_4
# undef BOOST_PP_ITERATION_START_2_DIGIT_5
# undef BOOST_PP_ITERATION_START_2_DIGIT_6
# undef BOOST_PP_ITERATION_START_2_DIGIT_7
# undef BOOST_PP_ITERATION_START_2_DIGIT_8
# undef BOOST_PP_ITERATION_START_2_DIGIT_9
# undef BOOST_PP_ITERATION_START_2_DIGIT_10
#
# if BOOST_PP_SLOT_TEMP_3 == 0
#    define BOOST_PP_ITERATION_START_2_DIGIT_3 0
# elif BOOST_PP_SLOT_TEMP_3 == 1
#    define BOOST_PP_ITERATION_START_2_DIGIT_3 1
# elif BOOST_PP_SLOT_TEMP_3 == 2
#    define BOOST_PP_ITERATION_START_2_DIGIT_3 2
# elif BOOST_PP_SLOT_TEMP_3 == 3
#    define BOOST_PP_ITERATION_START_2_DIGIT_3 3
# elif BOOST_PP_SLOT_TEMP_3 == 4
#    define BOOST_PP_ITERATION_START_2_DIGIT_3 4
# elif BOOST_PP_SLOT_TEMP_3 == 5
#    define BOOST_PP_ITERATION_START_2_DIGIT_3 5
# elif BOOST_PP_SLOT_TEMP_3 == 6
#    define BOOST_PP_ITERATION_START_2_DIGIT_3 6
# elif BOOST_PP_SLOT_TEMP_3 == 7
#    define BOOST_PP_ITERATION_START_2_DIGIT_3 7
# elif BOOST_PP_SLOT_TEMP_3 == 8
#    define BOOST_PP_ITERATION_START_2_DIGIT_3 8
# elif BOOST_PP_SLOT_TEMP_3 == 9
#    define BOOST_PP_ITERATION_START_2_DIGIT_3 9
# endif
#
# if BOOST_PP_SLOT_TEMP_2 == 0
#    define BOOST_PP_ITERATION_START_2_DIGIT_2 0
# elif BOOST_PP_SLOT_TEMP_2 == 1
#    define BOOST_PP_ITERATION_START_2_DIGIT_2 1
# elif BOOST_PP_SLOT_TEMP_2 == 2
#    define BOOST_PP_ITERATION_START_2_DIGIT_2 2
# elif BOOST_PP_SLOT_TEMP_2 == 3
#    define BOOST_PP_ITERATION_START_2_DIGIT_2 3
# elif BOOST_PP_SLOT_TEMP_2 == 4
#    define BOOST_PP_ITERATION_START_2_DIGIT_2 4
# elif BOOST_PP_SLOT_TEMP_2 == 5
#    define BOOST_PP_ITERATION_START_2_DIGIT_2 5
# elif BOOST_PP_SLOT_TEMP_2 == 6
#    define BOOST_PP_ITERATION_START_2_DIGIT_2 6
# elif BOOST_PP_SLOT_TEMP_2 == 7
#    define BOOST_PP_ITERATION_START_2_DIGIT_2 7
# elif BOOST_PP_SLOT_TEMP_2 == 8
#    define BOOST_PP_ITERATION_START_2_DIGIT_2 8
# elif BOOST_PP_SLOT_TEMP_2 == 9
#    define BOOST_PP_ITERATION_START_2_DIGIT_2 9
# endif
#
# if BOOST_PP_SLOT_TEMP_1 == 0
#    define BOOST_PP_ITERATION_START_2_DIGIT_1 0
# elif BOOST_PP_SLOT_TEMP_1 == 1
#    define BOOST_PP_ITERATION_START_2_DIGIT_1 1
# elif BOOST_PP_SLOT_TEMP_1 == 2
#    define BOOST_PP_ITERATION_START_2_DIGIT_1 2
# elif BOOST_PP_SLOT_TEMP_1 == 3
#    define BOOST_PP_ITERATION_START_2_DIGIT_1 3
# elif BOOST_PP_SLOT_TEMP_1 == 4
#    define BOOST_PP_ITERATION_START_2_DIGIT_1 4
# elif BOOST_PP_SLOT_TEMP_1 == 5
#    define BOOST_PP_ITERATION_START_2_DIGIT_1 5
# elif BOOST_PP_SLOT_TEMP_1 == 6
#    define BOOST_PP_ITERATION_START_2_DIGIT_1 6
# elif BOOST_PP_SLOT_TEMP_1 == 7
#    define BOOST_PP_ITERATION_START_2_DIGIT_1 7
# elif BOOST_PP_SLOT_TEMP_1 == 8
#    define BOOST_PP_ITERATION_START_2_DIGIT_1 8
# elif BOOST_PP_SLOT_TEMP_1 == 9
#    define BOOST_PP_ITERATION_START_2_DIGIT_1 9
# endif
#
# if BOOST_PP_ITERATION_START_2_DIGIT_3
#    define BOOST_PP_ITERATION_START_2 BOOST_PP_SLOT_CC_3(BOOST_PP_ITERATION_START_2_DIGIT_3, BOOST_PP_ITERATION_START_2_DIGIT_2, BOOST_PP_ITERATION_START_2_DIGIT_1)
# elif BOOST_PP_ITERATION_START_2_DIGIT_2
#    define BOOST_PP_ITERATION_START_2 BOOST_PP_SLOT_CC_2(BOOST_PP_ITERATION_START_2_DIGIT_2, BOOST_PP_ITERATION_START_2_DIGIT_1)
# else
#    define BOOST_PP_ITERATION_START_2 BOOST_PP_ITERATION_START_2_DIGIT_1
# endif

/* lower2.hpp
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
*/