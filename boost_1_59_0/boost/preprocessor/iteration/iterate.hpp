# /* **************************************************************************
#  *                                                                          *
#  *     (C) Copyright Paul Mensonides 2002.
#  *     Distributed under the Boost Software License, Version 1.0. (See
#  *     accompanying file LICENSE_1_0.txt or copy at
#  *     http://www.boost.org/LICENSE_1_0.txt)
#  *                                                                          *
#  ************************************************************************** */
#
# /* See http://www.boost.org for most recent version. */
#
# ifndef BOOST_PREPROCESSOR_ITERATION_ITERATE_HPP
# define BOOST_PREPROCESSOR_ITERATION_ITERATE_HPP
#
# include <boost/preprocessor/arithmetic/dec.hpp>
# include <boost/preprocessor/arithmetic/inc.hpp>
# include <boost/preprocessor/array/elem.hpp>
# include <boost/preprocessor/array/size.hpp>
# include <boost/preprocessor/cat.hpp>
# include <boost/preprocessor/slot/slot.hpp>
# include <boost/preprocessor/tuple/elem.hpp>
#
# /* BOOST_PP_ITERATION_DEPTH */
#
# define BOOST_PP_ITERATION_DEPTH() 0
#
# /* BOOST_PP_ITERATION */
#
# define BOOST_PP_ITERATION() BOOST_PP_CAT(BOOST_PP_ITERATION_, BOOST_PP_ITERATION_DEPTH())
#
# /* BOOST_PP_ITERATION_START && BOOST_PP_ITERATION_FINISH */
#
# define BOOST_PP_ITERATION_START() BOOST_PP_CAT(BOOST_PP_ITERATION_START_, BOOST_PP_ITERATION_DEPTH())
# define BOOST_PP_ITERATION_FINISH() BOOST_PP_CAT(BOOST_PP_ITERATION_FINISH_, BOOST_PP_ITERATION_DEPTH())
#
# /* BOOST_PP_ITERATION_FLAGS */
#
# define BOOST_PP_ITERATION_FLAGS() (BOOST_PP_CAT(BOOST_PP_ITERATION_FLAGS_, BOOST_PP_ITERATION_DEPTH())())
#
# /* BOOST_PP_FRAME_ITERATION */
#
# define BOOST_PP_FRAME_ITERATION(i) BOOST_PP_CAT(BOOST_PP_ITERATION_, i)
#
# /* BOOST_PP_FRAME_START && BOOST_PP_FRAME_FINISH */
#
# define BOOST_PP_FRAME_START(i) BOOST_PP_CAT(BOOST_PP_ITERATION_START_, i)
# define BOOST_PP_FRAME_FINISH(i) BOOST_PP_CAT(BOOST_PP_ITERATION_FINISH_, i)
#
# /* BOOST_PP_FRAME_FLAGS */
#
# define BOOST_PP_FRAME_FLAGS(i) (BOOST_PP_CAT(BOOST_PP_ITERATION_FLAGS_, i)())
#
# /* BOOST_PP_RELATIVE_ITERATION */
#
# define BOOST_PP_RELATIVE_ITERATION(i) BOOST_PP_CAT(BOOST_PP_RELATIVE_, i)(BOOST_PP_ITERATION_)
#
# define BOOST_PP_RELATIVE_0(m) BOOST_PP_CAT(m, BOOST_PP_ITERATION_DEPTH())
# define BOOST_PP_RELATIVE_1(m) BOOST_PP_CAT(m, BOOST_PP_DEC(BOOST_PP_ITERATION_DEPTH()))
# define BOOST_PP_RELATIVE_2(m) BOOST_PP_CAT(m, BOOST_PP_DEC(BOOST_PP_DEC(BOOST_PP_ITERATION_DEPTH())))
# define BOOST_PP_RELATIVE_3(m) BOOST_PP_CAT(m, BOOST_PP_DEC(BOOST_PP_DEC(BOOST_PP_DEC(BOOST_PP_ITERATION_DEPTH()))))
# define BOOST_PP_RELATIVE_4(m) BOOST_PP_CAT(m, BOOST_PP_DEC(BOOST_PP_DEC(BOOST_PP_DEC(BOOST_PP_DEC(BOOST_PP_ITERATION_DEPTH())))))
#
# /* BOOST_PP_RELATIVE_START && BOOST_PP_RELATIVE_FINISH */
#
# define BOOST_PP_RELATIVE_START(i) BOOST_PP_CAT(BOOST_PP_RELATIVE_, i)(BOOST_PP_ITERATION_START_)
# define BOOST_PP_RELATIVE_FINISH(i) BOOST_PP_CAT(BOOST_PP_RELATIVE_, i)(BOOST_PP_ITERATION_FINISH_)
#
# /* BOOST_PP_RELATIVE_FLAGS */
#
# define BOOST_PP_RELATIVE_FLAGS(i) (BOOST_PP_CAT(BOOST_PP_RELATIVE_, i)(BOOST_PP_ITERATION_FLAGS_)())
#
# /* BOOST_PP_ITERATE */
#
# define BOOST_PP_ITERATE() BOOST_PP_CAT(BOOST_PP_ITERATE_, BOOST_PP_INC(BOOST_PP_ITERATION_DEPTH()))
#
# define BOOST_PP_ITERATE_1 <boost/preprocessor/iteration/detail/iter/forward1.hpp>
# define BOOST_PP_ITERATE_2 <boost/preprocessor/iteration/detail/iter/forward2.hpp>
# define BOOST_PP_ITERATE_3 <boost/preprocessor/iteration/detail/iter/forward3.hpp>
# define BOOST_PP_ITERATE_4 <boost/preprocessor/iteration/detail/iter/forward4.hpp>
# define BOOST_PP_ITERATE_5 <boost/preprocessor/iteration/detail/iter/forward5.hpp>
#
# endif

/* iterate.hpp
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
*/