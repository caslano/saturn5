# /* Copyright (C) 2001
#  * Housemarque Oy
#  * http://www.housemarque.com
#  *
#  * Distributed under the Boost Software License, Version 1.0. (See
#  * accompanying file LICENSE_1_0.txt or copy at
#  * http://www.boost.org/LICENSE_1_0.txt)
#  */
#
# /* Revised by Paul Mensonides (2002) */
#
# /* See http://www.boost.org for most recent version. */
#
# ifndef BOOST_PREPROCESSOR_LIST_FILTER_HPP
# define BOOST_PREPROCESSOR_LIST_FILTER_HPP
#
# include <boost/preprocessor/config/config.hpp>
# include <boost/preprocessor/control/if.hpp>
# include <boost/preprocessor/list/fold_right.hpp>
# include <boost/preprocessor/tuple/elem.hpp>
# include <boost/preprocessor/tuple/rem.hpp>
#
# /* BOOST_PP_LIST_FILTER */
#
# if ~BOOST_PP_CONFIG_FLAGS() & BOOST_PP_CONFIG_EDG()
#    define BOOST_PP_LIST_FILTER(pred, data, list) BOOST_PP_TUPLE_ELEM(3, 2, BOOST_PP_LIST_FOLD_RIGHT(BOOST_PP_LIST_FILTER_O, (pred, data, BOOST_PP_NIL), list))
# else
#    define BOOST_PP_LIST_FILTER(pred, data, list) BOOST_PP_LIST_FILTER_I(pred, data, list)
#    define BOOST_PP_LIST_FILTER_I(pred, data, list) BOOST_PP_TUPLE_ELEM(3, 2, BOOST_PP_LIST_FOLD_RIGHT(BOOST_PP_LIST_FILTER_O, (pred, data, BOOST_PP_NIL), list))
# endif
#
# if ~BOOST_PP_CONFIG_FLAGS() & BOOST_PP_CONFIG_EDG()
#    define BOOST_PP_LIST_FILTER_O(d, pdr, elem) BOOST_PP_LIST_FILTER_O_D(d, BOOST_PP_TUPLE_ELEM(3, 0, pdr), BOOST_PP_TUPLE_ELEM(3, 1, pdr), BOOST_PP_TUPLE_ELEM(3, 2, pdr), elem)
# else
#    define BOOST_PP_LIST_FILTER_O(d, pdr, elem) BOOST_PP_LIST_FILTER_O_I(d, BOOST_PP_TUPLE_REM_3 pdr, elem)
#    define BOOST_PP_LIST_FILTER_O_I(d, im, elem) BOOST_PP_LIST_FILTER_O_D(d, im, elem)
# endif
#
# if ~BOOST_PP_CONFIG_FLAGS() & BOOST_PP_CONFIG_DMC()
#    define BOOST_PP_LIST_FILTER_O_D(d, pred, data, res, elem) (pred, data, BOOST_PP_IF(pred(d, data, elem), (elem, res), res))
# else
#    define BOOST_PP_LIST_FILTER_O_D(d, pred, data, res, elem) (pred, data, BOOST_PP_IF(pred##(d, data, elem), (elem, res), res))
# endif
#
# /* BOOST_PP_LIST_FILTER_D */
#
# if ~BOOST_PP_CONFIG_FLAGS() & BOOST_PP_CONFIG_EDG()
#    define BOOST_PP_LIST_FILTER_D(d, pred, data, list) BOOST_PP_TUPLE_ELEM(3, 2, BOOST_PP_LIST_FOLD_RIGHT_ ## d(BOOST_PP_LIST_FILTER_O, (pred, data, BOOST_PP_NIL), list))
# else
#    define BOOST_PP_LIST_FILTER_D(d, pred, data, list) BOOST_PP_LIST_FILTER_D_I(d, pred, data, list)
#    define BOOST_PP_LIST_FILTER_D_I(d, pred, data, list) BOOST_PP_TUPLE_ELEM(3, 2, BOOST_PP_LIST_FOLD_RIGHT_ ## d(BOOST_PP_LIST_FILTER_O, (pred, data, BOOST_PP_NIL), list))
# endif
#
# endif

/* filter.hpp
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
*/