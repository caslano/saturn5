# /* Copyright (C) 2001
#  * Housemarque Oy
#  * http://www.housemarque.com
#  *
#  * Distributed under the Boost Software License, Version 1.0. (See
#  * accompanying file LICENSE_1_0.txt or copy at
#  * http://www.boost.org/LICENSE_1_0.txt)
#  */
#
# /* Revised by Paul Mensonides (2002) */
#
# /* See http://www.boost.org for most recent version. */
#
# ifndef BOOST_PREPROCESSOR_LIST_SIZE_HPP
# define BOOST_PREPROCESSOR_LIST_SIZE_HPP
#
# include <boost/preprocessor/config/config.hpp>
#
# if ~BOOST_PP_CONFIG_FLAGS() & BOOST_PP_CONFIG_STRICT()
#
# include <boost/preprocessor/arithmetic/inc.hpp>
# include <boost/preprocessor/control/while.hpp>
# include <boost/preprocessor/list/adt.hpp>
# include <boost/preprocessor/tuple/elem.hpp>
# include <boost/preprocessor/tuple/rem.hpp>
#
# /* BOOST_PP_LIST_SIZE */
#
# if ~BOOST_PP_CONFIG_FLAGS() & BOOST_PP_CONFIG_EDG()
#    define BOOST_PP_LIST_SIZE(list) BOOST_PP_TUPLE_ELEM(2, 0, BOOST_PP_WHILE(BOOST_PP_LIST_SIZE_P, BOOST_PP_LIST_SIZE_O, (0, list)))
# else
#    define BOOST_PP_LIST_SIZE(list) BOOST_PP_LIST_SIZE_I(list)
#    define BOOST_PP_LIST_SIZE_I(list) BOOST_PP_TUPLE_ELEM(2, 0, BOOST_PP_WHILE(BOOST_PP_LIST_SIZE_P, BOOST_PP_LIST_SIZE_O, (0, list)))
# endif
#
# if ~BOOST_PP_CONFIG_FLAGS() & BOOST_PP_CONFIG_EDG()
#    define BOOST_PP_LIST_SIZE_P(d, rl) BOOST_PP_LIST_IS_CONS(BOOST_PP_TUPLE_ELEM(2, 1, rl))
# else
#    define BOOST_PP_LIST_SIZE_P(d, rl) BOOST_PP_LIST_SIZE_P_I(BOOST_PP_TUPLE_REM_2 rl)
#    define BOOST_PP_LIST_SIZE_P_I(im) BOOST_PP_LIST_SIZE_P_II(im)
#    define BOOST_PP_LIST_SIZE_P_II(r, l) BOOST_PP_LIST_IS_CONS(l)
# endif
#
# if ~BOOST_PP_CONFIG_FLAGS() & BOOST_PP_CONFIG_EDG()
#    define BOOST_PP_LIST_SIZE_O(d, rl) (BOOST_PP_INC(BOOST_PP_TUPLE_ELEM(2, 0, rl)), BOOST_PP_LIST_REST(BOOST_PP_TUPLE_ELEM(2, 1, rl)))
# else
#    define BOOST_PP_LIST_SIZE_O(d, rl) BOOST_PP_LIST_SIZE_O_I(BOOST_PP_TUPLE_REM_2 rl)
#    define BOOST_PP_LIST_SIZE_O_I(im) BOOST_PP_LIST_SIZE_O_II(im)
#    define BOOST_PP_LIST_SIZE_O_II(r, l) (BOOST_PP_INC(r), BOOST_PP_LIST_REST(l))
# endif
#
# /* BOOST_PP_LIST_SIZE_D */
#
# if ~BOOST_PP_CONFIG_FLAGS() & BOOST_PP_CONFIG_EDG()
#    define BOOST_PP_LIST_SIZE_D(d, list) BOOST_PP_TUPLE_ELEM(2, 0, BOOST_PP_WHILE_ ## d(BOOST_PP_LIST_SIZE_P, BOOST_PP_LIST_SIZE_O, (0, list)))
# else
#    define BOOST_PP_LIST_SIZE_D(d, list) BOOST_PP_LIST_SIZE_D_I(d, list)
#    define BOOST_PP_LIST_SIZE_D_I(d, list) BOOST_PP_TUPLE_ELEM(2, 0, BOOST_PP_WHILE_ ## d(BOOST_PP_LIST_SIZE_P, BOOST_PP_LIST_SIZE_O, (0, list)))
# endif
#
# else
#
# include <boost/preprocessor/arithmetic/inc.hpp>
# include <boost/preprocessor/control/iif.hpp>
# include <boost/preprocessor/control/while.hpp>
# include <boost/preprocessor/facilities/identity.hpp>
# include <boost/preprocessor/list/adt.hpp>
# include <boost/preprocessor/tuple/elem.hpp>
# include <boost/preprocessor/tuple/rem.hpp>
#
# /* BOOST_PP_LIST_SIZE */
#
#    define BOOST_PP_LIST_SIZE(list) BOOST_PP_IIF(BOOST_PP_LIST_IS_CONS(list),BOOST_PP_LIST_SIZE_S,BOOST_PP_IDENTITY_N(0,1))(list)
#    define BOOST_PP_LIST_SIZE_S(list) BOOST_PP_LIST_SIZE_DO(BOOST_PP_LIST_REST(list))
#
# if ~BOOST_PP_CONFIG_FLAGS() & BOOST_PP_CONFIG_EDG()
#    define BOOST_PP_LIST_SIZE_DO(list) BOOST_PP_TUPLE_ELEM(2, 0, BOOST_PP_WHILE(BOOST_PP_LIST_SIZE_P, BOOST_PP_LIST_SIZE_O, (1, list)))
# else
#    define BOOST_PP_LIST_SIZE_DO(list) BOOST_PP_LIST_SIZE_I(list)
#    define BOOST_PP_LIST_SIZE_I(list) BOOST_PP_TUPLE_ELEM(2, 0, BOOST_PP_WHILE(BOOST_PP_LIST_SIZE_P, BOOST_PP_LIST_SIZE_O, (1, list)))
# endif
#
# if ~BOOST_PP_CONFIG_FLAGS() & BOOST_PP_CONFIG_EDG()
#    define BOOST_PP_LIST_SIZE_P(d, rl) BOOST_PP_LIST_IS_CONS(BOOST_PP_TUPLE_ELEM(2, 1, rl))
# else
#    define BOOST_PP_LIST_SIZE_P(d, rl) BOOST_PP_LIST_SIZE_P_I(BOOST_PP_TUPLE_REM_2 rl)
#    define BOOST_PP_LIST_SIZE_P_I(im) BOOST_PP_LIST_SIZE_P_II(im)
#    define BOOST_PP_LIST_SIZE_P_II(r, l) BOOST_PP_LIST_IS_CONS(l)
# endif
#
# if ~BOOST_PP_CONFIG_FLAGS() & BOOST_PP_CONFIG_EDG()
#    define BOOST_PP_LIST_SIZE_O(d, rl) (BOOST_PP_INC(BOOST_PP_TUPLE_ELEM(2, 0, rl)), BOOST_PP_LIST_REST(BOOST_PP_TUPLE_ELEM(2, 1, rl)))
# else
#    define BOOST_PP_LIST_SIZE_O(d, rl) BOOST_PP_LIST_SIZE_O_I(BOOST_PP_TUPLE_REM_2 rl)
#    define BOOST_PP_LIST_SIZE_O_I(im) BOOST_PP_LIST_SIZE_O_II(im)
#    define BOOST_PP_LIST_SIZE_O_II(r, l) (BOOST_PP_INC(r), BOOST_PP_LIST_REST(l))
# endif
#
# /* BOOST_PP_LIST_SIZE_D */
#
#    define BOOST_PP_LIST_SIZE_D(d, list) BOOST_PP_IIF(BOOST_PP_LIST_IS_CONS(list),BOOST_PP_LIST_SIZE_S_D,BOOST_PP_IDENTITY_N(0,2))(d,list)
#    define BOOST_PP_LIST_SIZE_S_D(d,list) BOOST_PP_LIST_SIZE_DO_D(d,BOOST_PP_LIST_REST(list))
#
# if ~BOOST_PP_CONFIG_FLAGS() & BOOST_PP_CONFIG_EDG()
#    define BOOST_PP_LIST_SIZE_DO_D(d, list) BOOST_PP_TUPLE_ELEM(2, 0, BOOST_PP_WHILE_ ## d(BOOST_PP_LIST_SIZE_P, BOOST_PP_LIST_SIZE_O, (1, list)))
# else
#    define BOOST_PP_LIST_SIZE_DO_D(d, list) BOOST_PP_LIST_SIZE_D_I(d, list)
#    define BOOST_PP_LIST_SIZE_D_I(d, list) BOOST_PP_TUPLE_ELEM(2, 0, BOOST_PP_WHILE_ ## d(BOOST_PP_LIST_SIZE_P, BOOST_PP_LIST_SIZE_O, (1, list)))
# endif
#
# endif
#
# endif

/* size.hpp
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
*/