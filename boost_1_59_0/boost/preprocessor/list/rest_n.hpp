# /* Copyright (C) 2001
#  * Housemarque Oy
#  * http://www.housemarque.com
#  *
#  * Distributed under the Boost Software License, Version 1.0. (See
#  * accompanying file LICENSE_1_0.txt or copy at
#  * http://www.boost.org/LICENSE_1_0.txt)
#  */
#
# /* Revised by Paul Mensonides (2002) */
#
# /* See http://www.boost.org for most recent version. */
#
# ifndef BOOST_PREPROCESSOR_LIST_REST_N_HPP
# define BOOST_PREPROCESSOR_LIST_REST_N_HPP
#
# include <boost/preprocessor/arithmetic/dec.hpp>
# include <boost/preprocessor/config/config.hpp>
# include <boost/preprocessor/control/while.hpp>
# include <boost/preprocessor/list/adt.hpp>
# include <boost/preprocessor/tuple/elem.hpp>
#
# /* BOOST_PP_LIST_REST_N */
#
# if ~BOOST_PP_CONFIG_FLAGS() & BOOST_PP_CONFIG_EDG()
#    define BOOST_PP_LIST_REST_N(count, list) BOOST_PP_TUPLE_ELEM(2, 0, BOOST_PP_WHILE(BOOST_PP_LIST_REST_N_P, BOOST_PP_LIST_REST_N_O, (list, count)))
# else
#    define BOOST_PP_LIST_REST_N(count, list) BOOST_PP_LIST_REST_N_I(count, list)
#    define BOOST_PP_LIST_REST_N_I(count, list) BOOST_PP_TUPLE_ELEM(2, 0, BOOST_PP_WHILE(BOOST_PP_LIST_REST_N_P, BOOST_PP_LIST_REST_N_O, (list, count)))
# endif
#
# if ~BOOST_PP_CONFIG_FLAGS() & BOOST_PP_CONFIG_EDG()
#    define BOOST_PP_LIST_REST_N_P(d, lc) BOOST_PP_TUPLE_ELEM(2, 1, lc)
# else
#    define BOOST_PP_LIST_REST_N_P(d, lc) BOOST_PP_LIST_REST_N_P_I lc
#    define BOOST_PP_LIST_REST_N_P_I(list, count) count
# endif
#
# if ~BOOST_PP_CONFIG_FLAGS() & BOOST_PP_CONFIG_EDG()
#    define BOOST_PP_LIST_REST_N_O(d, lc) (BOOST_PP_LIST_REST(BOOST_PP_TUPLE_ELEM(2, 0, lc)), BOOST_PP_DEC(BOOST_PP_TUPLE_ELEM(2, 1, lc)))
# else
#    define BOOST_PP_LIST_REST_N_O(d, lc) BOOST_PP_LIST_REST_N_O_I lc
#    define BOOST_PP_LIST_REST_N_O_I(list, count) (BOOST_PP_LIST_REST(list), BOOST_PP_DEC(count))
# endif
#
# /* BOOST_PP_LIST_REST_N_D */
#
# if ~BOOST_PP_CONFIG_FLAGS() & BOOST_PP_CONFIG_EDG()
#    define BOOST_PP_LIST_REST_N_D(d, count, list) BOOST_PP_TUPLE_ELEM(2, 0, BOOST_PP_WHILE_ ## d(BOOST_PP_LIST_REST_N_P, BOOST_PP_LIST_REST_N_O, (list, count)))
# else
#    define BOOST_PP_LIST_REST_N_D(d, count, list) BOOST_PP_LIST_REST_N_D_I(d, count, list)
#    define BOOST_PP_LIST_REST_N_D_I(d, count, list) BOOST_PP_TUPLE_ELEM(2, 0, BOOST_PP_WHILE_ ## d(BOOST_PP_LIST_REST_N_P, BOOST_PP_LIST_REST_N_O, (list, count)))
# endif
#
# endif

/* rest_n.hpp
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
*/