# /* Copyright (C) 2001
#  * Housemarque Oy
#  * http://www.housemarque.com
#  *
#  * Distributed under the Boost Software License, Version 1.0. (See
#  * accompanying file LICENSE_1_0.txt or copy at
#  * http://www.boost.org/LICENSE_1_0.txt)
#  */
#
# /* Revised by Paul Mensonides (2002) */
# /* Revised by Edward Diener (2020) */
#
# /* See http://www.boost.org for most recent version. */
#
# ifndef BOOST_PREPROCESSOR_LIST_FOLD_RIGHT_HPP
# define BOOST_PREPROCESSOR_LIST_FOLD_RIGHT_HPP
#
# include <boost/preprocessor/config/config.hpp>
#
# if ~BOOST_PP_CONFIG_FLAGS() & BOOST_PP_CONFIG_STRICT()
#
# include <boost/preprocessor/cat.hpp>
# include <boost/preprocessor/control/while.hpp>
# include <boost/preprocessor/debug/error.hpp>
# include <boost/preprocessor/detail/auto_rec.hpp>
#
# if 0
#    define BOOST_PP_LIST_FOLD_RIGHT(op, state, list)
# endif
#
# define BOOST_PP_LIST_FOLD_RIGHT BOOST_PP_CAT(BOOST_PP_LIST_FOLD_RIGHT_, BOOST_PP_AUTO_REC(BOOST_PP_WHILE_P, 256))
#
# define BOOST_PP_LIST_FOLD_RIGHT_257(o, s, l) BOOST_PP_ERROR(0x0004)
#
# define BOOST_PP_LIST_FOLD_RIGHT_D(d, o, s, l) BOOST_PP_LIST_FOLD_RIGHT_ ## d(o, s, l)
# define BOOST_PP_LIST_FOLD_RIGHT_2ND BOOST_PP_LIST_FOLD_RIGHT
# define BOOST_PP_LIST_FOLD_RIGHT_2ND_D BOOST_PP_LIST_FOLD_RIGHT_D
#
# if BOOST_PP_CONFIG_FLAGS() & BOOST_PP_CONFIG_EDG()
#    include <boost/preprocessor/list/detail/edg/fold_right.hpp>
# else
#    include <boost/preprocessor/list/detail/fold_right.hpp>
# endif
#
# else
#
# include <boost/preprocessor/arithmetic/dec.hpp>
# include <boost/preprocessor/cat.hpp>
# include <boost/preprocessor/control/while.hpp>
# include <boost/preprocessor/debug/error.hpp>
# include <boost/preprocessor/detail/auto_rec.hpp>
#
# if 0
#    define BOOST_PP_LIST_FOLD_RIGHT(op, state, list)
# endif
#
# include <boost/preprocessor/config/limits.hpp>
#
# if BOOST_PP_LIMIT_WHILE == 256
# define BOOST_PP_LIST_FOLD_RIGHT BOOST_PP_CAT(BOOST_PP_LIST_FOLD_RIGHT_, BOOST_PP_DEC(BOOST_PP_AUTO_REC(BOOST_PP_WHILE_P, 256)))
# define BOOST_PP_LIST_FOLD_RIGHT_257(o, s, l) BOOST_PP_ERROR(0x0004)
# elif BOOST_PP_LIMIT_WHILE == 512
# define BOOST_PP_LIST_FOLD_RIGHT BOOST_PP_CAT(BOOST_PP_LIST_FOLD_RIGHT_, BOOST_PP_DEC(BOOST_PP_AUTO_REC(BOOST_PP_WHILE_P, 512)))
# define BOOST_PP_LIST_FOLD_RIGHT_513(o, s, l) BOOST_PP_ERROR(0x0004)
# elif BOOST_PP_LIMIT_WHILE == 1024
# define BOOST_PP_LIST_FOLD_RIGHT BOOST_PP_CAT(BOOST_PP_LIST_FOLD_RIGHT_, BOOST_PP_DEC(BOOST_PP_AUTO_REC(BOOST_PP_WHILE_P, 1024)))
# define BOOST_PP_LIST_FOLD_RIGHT_1025(o, s, l) BOOST_PP_ERROR(0x0004)
# else
# error Incorrect value for the BOOST_PP_LIMIT_WHILE limit
# endif
#
# define BOOST_PP_LIST_FOLD_RIGHT_D(d, o, s, l) BOOST_PP_LIST_FOLD_RIGHT_ ## d(o, s, l)
# define BOOST_PP_LIST_FOLD_RIGHT_2ND BOOST_PP_LIST_FOLD_RIGHT
# define BOOST_PP_LIST_FOLD_RIGHT_2ND_D BOOST_PP_LIST_FOLD_RIGHT_D
#
# if BOOST_PP_CONFIG_FLAGS() & BOOST_PP_CONFIG_EDG()
#    include <boost/preprocessor/list/detail/edg/fold_right.hpp>
# else
#    include <boost/preprocessor/list/detail/fold_right.hpp>
# endif
#
# endif
#
# endif

/* fold_right.hpp
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
*/