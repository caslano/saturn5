# /* Copyright (C) 2001
#  * Housemarque Oy
#  * http://www.housemarque.com
#  *
#  * Distributed under the Boost Software License, Version 1.0. (See
#  * accompanying file LICENSE_1_0.txt or copy at
#  * http://www.boost.org/LICENSE_1_0.txt)
#  */
#
# /* Revised by Paul Mensonides (2002) */
#
# /* See http://www.boost.org for most recent version. */
#
# ifndef BOOST_PREPROCESSOR_LIST_LIST_FOR_EACH_I_HPP
# define BOOST_PREPROCESSOR_LIST_LIST_FOR_EACH_I_HPP
#
# include <boost/preprocessor/arithmetic/inc.hpp>
# include <boost/preprocessor/config/config.hpp>
# include <boost/preprocessor/list/adt.hpp>
# include <boost/preprocessor/repetition/for.hpp>
# include <boost/preprocessor/tuple/elem.hpp>
# include <boost/preprocessor/tuple/rem.hpp>
#
# /* BOOST_PP_LIST_FOR_EACH_I */
#
# if ~BOOST_PP_CONFIG_FLAGS() & BOOST_PP_CONFIG_EDG() && ~BOOST_PP_CONFIG_FLAGS() & BOOST_PP_CONFIG_MSVC()
#    define BOOST_PP_LIST_FOR_EACH_I(macro, data, list) BOOST_PP_FOR((macro, data, list, 0), BOOST_PP_LIST_FOR_EACH_I_P, BOOST_PP_LIST_FOR_EACH_I_O, BOOST_PP_LIST_FOR_EACH_I_M)
# else
#    define BOOST_PP_LIST_FOR_EACH_I(macro, data, list) BOOST_PP_LIST_FOR_EACH_I_I(macro, data, list)
#    define BOOST_PP_LIST_FOR_EACH_I_I(macro, data, list) BOOST_PP_FOR((macro, data, list, 0), BOOST_PP_LIST_FOR_EACH_I_P, BOOST_PP_LIST_FOR_EACH_I_O, BOOST_PP_LIST_FOR_EACH_I_M)
# endif
#
# if BOOST_PP_CONFIG_FLAGS() & BOOST_PP_CONFIG_STRICT()
#    define BOOST_PP_LIST_FOR_EACH_I_P(r, x) BOOST_PP_LIST_FOR_EACH_I_P_D x
#    define BOOST_PP_LIST_FOR_EACH_I_P_D(m, d, l, i) BOOST_PP_LIST_IS_CONS(l)
# else
#    define BOOST_PP_LIST_FOR_EACH_I_P(r, x) BOOST_PP_LIST_IS_CONS(BOOST_PP_TUPLE_ELEM(4, 2, x))
# endif
#
# if ~BOOST_PP_CONFIG_FLAGS() & BOOST_PP_CONFIG_MWCC()
#    define BOOST_PP_LIST_FOR_EACH_I_O(r, x) BOOST_PP_LIST_FOR_EACH_I_O_D x
#    define BOOST_PP_LIST_FOR_EACH_I_O_D(m, d, l, i) (m, d, BOOST_PP_LIST_REST(l), BOOST_PP_INC(i))
# else
#    define BOOST_PP_LIST_FOR_EACH_I_O(r, x) (BOOST_PP_TUPLE_ELEM(4, 0, x), BOOST_PP_TUPLE_ELEM(4, 1, x), BOOST_PP_LIST_REST(BOOST_PP_TUPLE_ELEM(4, 2, x)), BOOST_PP_INC(BOOST_PP_TUPLE_ELEM(4, 3, x)))
# endif
#
# if ~BOOST_PP_CONFIG_FLAGS() & BOOST_PP_CONFIG_EDG()
#    define BOOST_PP_LIST_FOR_EACH_I_M(r, x) BOOST_PP_LIST_FOR_EACH_I_M_D(r, BOOST_PP_TUPLE_ELEM(4, 0, x), BOOST_PP_TUPLE_ELEM(4, 1, x), BOOST_PP_TUPLE_ELEM(4, 2, x), BOOST_PP_TUPLE_ELEM(4, 3, x))
# else
#    define BOOST_PP_LIST_FOR_EACH_I_M(r, x) BOOST_PP_LIST_FOR_EACH_I_M_I(r, BOOST_PP_TUPLE_REM_4 x)
#    define BOOST_PP_LIST_FOR_EACH_I_M_I(r, x_e) BOOST_PP_LIST_FOR_EACH_I_M_D(r, x_e)
# endif
#
# define BOOST_PP_LIST_FOR_EACH_I_M_D(r, m, d, l, i) m(r, d, i, BOOST_PP_LIST_FIRST(l))
#
# /* BOOST_PP_LIST_FOR_EACH_I_R */
#
# if ~BOOST_PP_CONFIG_FLAGS() & BOOST_PP_CONFIG_EDG()
#    define BOOST_PP_LIST_FOR_EACH_I_R(r, macro, data, list) BOOST_PP_FOR_ ## r((macro, data, list, 0), BOOST_PP_LIST_FOR_EACH_I_P, BOOST_PP_LIST_FOR_EACH_I_O, BOOST_PP_LIST_FOR_EACH_I_M)
# else
#    define BOOST_PP_LIST_FOR_EACH_I_R(r, macro, data, list) BOOST_PP_LIST_FOR_EACH_I_R_I(r, macro, data, list)
#    define BOOST_PP_LIST_FOR_EACH_I_R_I(r, macro, data, list) BOOST_PP_FOR_ ## r((macro, data, list, 0), BOOST_PP_LIST_FOR_EACH_I_P, BOOST_PP_LIST_FOR_EACH_I_O, BOOST_PP_LIST_FOR_EACH_I_M)
# endif
#
# endif

/* for_each_i.hpp
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
*/