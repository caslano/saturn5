# /* Copyright (C) 2001
#  * Housemarque Oy
#  * http://www.housemarque.com
#  *
#  * Distributed under the Boost Software License, Version 1.0. (See
#  * accompanying file LICENSE_1_0.txt or copy at
#  * http://www.boost.org/LICENSE_1_0.txt)
#  */
#
# /* Revised by Paul Mensonides (2002) */
#
# /* See http://www.boost.org for most recent version. */
#
# ifndef BOOST_PREPROCESSOR_LIST_FOR_EACH_PRODUCT_HPP
# define BOOST_PREPROCESSOR_LIST_FOR_EACH_PRODUCT_HPP
#
# include <boost/preprocessor/config/config.hpp>
# include <boost/preprocessor/control/if.hpp>
# include <boost/preprocessor/facilities/overload.hpp>
# include <boost/preprocessor/list/adt.hpp>
# include <boost/preprocessor/list/to_tuple.hpp>
# include <boost/preprocessor/repetition/for.hpp>
# include <boost/preprocessor/tuple/elem.hpp>
# include <boost/preprocessor/tuple/to_list.hpp>
# include <boost/preprocessor/tuple/rem.hpp>
# include <boost/preprocessor/tuple/reverse.hpp>
# if BOOST_PP_VARIADICS_MSVC
# include <boost/preprocessor/cat.hpp>
# include <boost/preprocessor/facilities/empty.hpp>
# endif
#
# /* BOOST_PP_LIST_FOR_EACH_PRODUCT */
#
# define BOOST_PP_LIST_FOR_EACH_PRODUCT_OV_2(macro, size, tuple) BOOST_PP_LIST_FOR_EACH_PRODUCT_E(BOOST_PP_FOR, macro, size, BOOST_PP_TUPLE_TO_LIST(size, tuple))
# define BOOST_PP_LIST_FOR_EACH_PRODUCT_OV_1(macro, tuple) BOOST_PP_LIST_FOR_EACH_PRODUCT_E(BOOST_PP_FOR, macro, BOOST_PP_TUPLE_SIZE(tuple), BOOST_PP_TUPLE_TO_LIST(tuple))
#
# if ~BOOST_PP_CONFIG_FLAGS() & BOOST_PP_CONFIG_EDG()
#    if BOOST_PP_VARIADICS_MSVC
#        define BOOST_PP_LIST_FOR_EACH_PRODUCT(macro, ...) BOOST_PP_CAT(BOOST_PP_OVERLOAD(BOOST_PP_LIST_FOR_EACH_PRODUCT_OV_,__VA_ARGS__)(macro,__VA_ARGS__),BOOST_PP_EMPTY())
#    else
#        define BOOST_PP_LIST_FOR_EACH_PRODUCT(macro, ...) BOOST_PP_OVERLOAD(BOOST_PP_LIST_FOR_EACH_PRODUCT_OV_,__VA_ARGS__)(macro,__VA_ARGS__)
#    endif
# else
#    define BOOST_PP_LIST_FOR_EACH_PRODUCT(macro, ...) BOOST_PP_LIST_FOR_EACH_PRODUCT_Q(macro, __VA_ARGS__)
#    define BOOST_PP_LIST_FOR_EACH_PRODUCT_Q(macro, ...) BOOST_PP_OVERLOAD(BOOST_PP_LIST_FOR_EACH_PRODUCT_OV_,__VA_ARGS__)(macro,__VA_ARGS__)
# endif
#
# /* BOOST_PP_LIST_FOR_EACH_PRODUCT_R */
#
# define BOOST_PP_LIST_FOR_EACH_PRODUCT_R_OV_2(r, macro, size, tuple) BOOST_PP_LIST_FOR_EACH_PRODUCT_E(BOOST_PP_FOR ## r, macro, size, BOOST_PP_TUPLE_TO_LIST(size, tuple))
# define BOOST_PP_LIST_FOR_EACH_PRODUCT_R_OV_1(r, macro, tuple) BOOST_PP_LIST_FOR_EACH_PRODUCT_E(BOOST_PP_FOR ## r, macro, BOOST_PP_TUPLE_SIZE(tuple), BOOST_PP_TUPLE_TO_LIST(tuple))
#
# if ~BOOST_PP_CONFIG_FLAGS() & BOOST_PP_CONFIG_EDG()
#    if BOOST_PP_VARIADICS_MSVC
#        define BOOST_PP_LIST_FOR_EACH_PRODUCT_R(r, macro, ...) BOOST_PP_CAT(BOOST_PP_OVERLOAD(BOOST_PP_LIST_FOR_EACH_PRODUCT_R_OV_,__VA_ARGS__)(r, macro,__VA_ARGS__),BOOST_PP_EMPTY())
#    else
#        define BOOST_PP_LIST_FOR_EACH_PRODUCT_R(r, macro, ...) BOOST_PP_OVERLOAD(BOOST_PP_LIST_FOR_EACH_PRODUCT_R_OV_,__VA_ARGS__)(r, macro,__VA_ARGS__)
#    endif
# else
#    define BOOST_PP_LIST_FOR_EACH_PRODUCT_R(r, macro, ...) BOOST_PP_LIST_FOR_EACH_PRODUCT_R_Q(r, macro, __VA_ARGS__)
#    define BOOST_PP_LIST_FOR_EACH_PRODUCT_R_Q(r, macro, ...) BOOST_PP_OVERLOAD(BOOST_PP_LIST_FOR_EACH_PRODUCT_R_OV_,__VA_ARGS__)(r, macro,__VA_ARGS__)
# endif
#
# if ~BOOST_PP_CONFIG_FLAGS() & BOOST_PP_CONFIG_EDG()
#    define BOOST_PP_LIST_FOR_EACH_PRODUCT_E(impl, macro, size, lists) impl((BOOST_PP_LIST_FIRST(lists), BOOST_PP_LIST_REST(lists), BOOST_PP_NIL, macro, size), BOOST_PP_LIST_FOR_EACH_PRODUCT_P, BOOST_PP_LIST_FOR_EACH_PRODUCT_O, BOOST_PP_LIST_FOR_EACH_PRODUCT_M_0)
# else
#    define BOOST_PP_LIST_FOR_EACH_PRODUCT_E(impl, macro, size, lists) BOOST_PP_LIST_FOR_EACH_PRODUCT_E_D(impl, macro, size, lists)
#    define BOOST_PP_LIST_FOR_EACH_PRODUCT_E_D(impl, macro, size, lists) impl((BOOST_PP_LIST_FIRST(lists), BOOST_PP_LIST_REST(lists), BOOST_PP_NIL, macro, size), BOOST_PP_LIST_FOR_EACH_PRODUCT_P, BOOST_PP_LIST_FOR_EACH_PRODUCT_O, BOOST_PP_LIST_FOR_EACH_PRODUCT_M_0)
# endif
#
# if BOOST_PP_CONFIG_FLAGS() & BOOST_PP_CONFIG_STRICT()
#    define BOOST_PP_LIST_FOR_EACH_PRODUCT_P(r, data) BOOST_PP_LIST_FOR_EACH_PRODUCT_P_I data
#    define BOOST_PP_LIST_FOR_EACH_PRODUCT_P_I(a, b, res, macro, size) BOOST_PP_LIST_IS_CONS(a)
# else
#    define BOOST_PP_LIST_FOR_EACH_PRODUCT_P(r, data) BOOST_PP_LIST_IS_CONS(BOOST_PP_TUPLE_ELEM(5, 0, data))
# endif
#
# if ~BOOST_PP_CONFIG_FLAGS() & BOOST_PP_CONFIG_MWCC()
#    define BOOST_PP_LIST_FOR_EACH_PRODUCT_O(r, data) BOOST_PP_LIST_FOR_EACH_PRODUCT_O_I data
#    define BOOST_PP_LIST_FOR_EACH_PRODUCT_O_I(a, b, res, macro, size) (BOOST_PP_LIST_REST(a), b, res, macro, size)
# else
#    define BOOST_PP_LIST_FOR_EACH_PRODUCT_O(r, data) (BOOST_PP_LIST_REST(BOOST_PP_TUPLE_ELEM(5, 0, data)), BOOST_PP_TUPLE_ELEM(5, 1, data), BOOST_PP_TUPLE_ELEM(5, 2, data), BOOST_PP_TUPLE_ELEM(5, 3, data), BOOST_PP_TUPLE_ELEM(5, 4, data))
# endif
#
# if ~BOOST_PP_CONFIG_FLAGS() & BOOST_PP_CONFIG_EDG()
#    define BOOST_PP_LIST_FOR_EACH_PRODUCT_I(r, data) BOOST_PP_LIST_FOR_EACH_PRODUCT_I_I(r, BOOST_PP_TUPLE_ELEM(5, 0, data), BOOST_PP_TUPLE_ELEM(5, 1, data), BOOST_PP_TUPLE_ELEM(5, 2, data), BOOST_PP_TUPLE_ELEM(5, 3, data), BOOST_PP_TUPLE_ELEM(5, 4, data))
# else
#    define BOOST_PP_LIST_FOR_EACH_PRODUCT_I(r, data) BOOST_PP_LIST_FOR_EACH_PRODUCT_I_D(r, BOOST_PP_TUPLE_REM_5 data)
#    define BOOST_PP_LIST_FOR_EACH_PRODUCT_I_D(r, data_e) BOOST_PP_LIST_FOR_EACH_PRODUCT_I_I(r, data_e)
# endif
#
# define BOOST_PP_LIST_FOR_EACH_PRODUCT_I_I(r, a, b, res, macro, size) BOOST_PP_LIST_FOR_EACH_PRODUCT_I_II(r, macro, BOOST_PP_LIST_TO_TUPLE_R(r, (BOOST_PP_LIST_FIRST(a), res)), size)
# define BOOST_PP_LIST_FOR_EACH_PRODUCT_I_II(r, macro, args, size) BOOST_PP_LIST_FOR_EACH_PRODUCT_I_III(r, macro, args, size)
# define BOOST_PP_LIST_FOR_EACH_PRODUCT_I_III(r, macro, args, size) macro(r, BOOST_PP_TUPLE_REVERSE(size, args))
#
# define BOOST_PP_LIST_FOR_EACH_PRODUCT_C(data, i) BOOST_PP_IF(BOOST_PP_LIST_IS_CONS(BOOST_PP_TUPLE_ELEM(5, 1, data)), BOOST_PP_LIST_FOR_EACH_PRODUCT_N_ ## i, BOOST_PP_LIST_FOR_EACH_PRODUCT_I)
#
# if ~BOOST_PP_CONFIG_FLAGS() & BOOST_PP_CONFIG_MWCC()
#    define BOOST_PP_LIST_FOR_EACH_PRODUCT_H(data) BOOST_PP_LIST_FOR_EACH_PRODUCT_H_I data
# else
#    define BOOST_PP_LIST_FOR_EACH_PRODUCT_H(data) BOOST_PP_LIST_FOR_EACH_PRODUCT_H_I(BOOST_PP_TUPLE_ELEM(5, 0, data), BOOST_PP_TUPLE_ELEM(5, 1, data), BOOST_PP_TUPLE_ELEM(5, 2, data), BOOST_PP_TUPLE_ELEM(5, 3, data), BOOST_PP_TUPLE_ELEM(5, 4, data))
# endif
#
# define BOOST_PP_LIST_FOR_EACH_PRODUCT_H_I(a, b, res, macro, size) (BOOST_PP_LIST_FIRST(b), BOOST_PP_LIST_REST(b), (BOOST_PP_LIST_FIRST(a), res), macro, size)
#
# define BOOST_PP_LIST_FOR_EACH_PRODUCT_M_0(r, data) BOOST_PP_LIST_FOR_EACH_PRODUCT_C(data, 0)(r, data)
# define BOOST_PP_LIST_FOR_EACH_PRODUCT_M_1(r, data) BOOST_PP_LIST_FOR_EACH_PRODUCT_C(data, 1)(r, data)
# define BOOST_PP_LIST_FOR_EACH_PRODUCT_M_2(r, data) BOOST_PP_LIST_FOR_EACH_PRODUCT_C(data, 2)(r, data)
# define BOOST_PP_LIST_FOR_EACH_PRODUCT_M_3(r, data) BOOST_PP_LIST_FOR_EACH_PRODUCT_C(data, 3)(r, data)
# define BOOST_PP_LIST_FOR_EACH_PRODUCT_M_4(r, data) BOOST_PP_LIST_FOR_EACH_PRODUCT_C(data, 4)(r, data)
# define BOOST_PP_LIST_FOR_EACH_PRODUCT_M_5(r, data) BOOST_PP_LIST_FOR_EACH_PRODUCT_C(data, 5)(r, data)
# define BOOST_PP_LIST_FOR_EACH_PRODUCT_M_6(r, data) BOOST_PP_LIST_FOR_EACH_PRODUCT_C(data, 6)(r, data)
# define BOOST_PP_LIST_FOR_EACH_PRODUCT_M_7(r, data) BOOST_PP_LIST_FOR_EACH_PRODUCT_C(data, 7)(r, data)
# define BOOST_PP_LIST_FOR_EACH_PRODUCT_M_8(r, data) BOOST_PP_LIST_FOR_EACH_PRODUCT_C(data, 8)(r, data)
# define BOOST_PP_LIST_FOR_EACH_PRODUCT_M_9(r, data) BOOST_PP_LIST_FOR_EACH_PRODUCT_C(data, 9)(r, data)
# define BOOST_PP_LIST_FOR_EACH_PRODUCT_M_10(r, data) BOOST_PP_LIST_FOR_EACH_PRODUCT_C(data, 10)(r, data)
# define BOOST_PP_LIST_FOR_EACH_PRODUCT_M_11(r, data) BOOST_PP_LIST_FOR_EACH_PRODUCT_C(data, 11)(r, data)
# define BOOST_PP_LIST_FOR_EACH_PRODUCT_M_12(r, data) BOOST_PP_LIST_FOR_EACH_PRODUCT_C(data, 12)(r, data)
# define BOOST_PP_LIST_FOR_EACH_PRODUCT_M_13(r, data) BOOST_PP_LIST_FOR_EACH_PRODUCT_C(data, 13)(r, data)
# define BOOST_PP_LIST_FOR_EACH_PRODUCT_M_14(r, data) BOOST_PP_LIST_FOR_EACH_PRODUCT_C(data, 14)(r, data)
# define BOOST_PP_LIST_FOR_EACH_PRODUCT_M_15(r, data) BOOST_PP_LIST_FOR_EACH_PRODUCT_C(data, 15)(r, data)
# define BOOST_PP_LIST_FOR_EACH_PRODUCT_M_16(r, data) BOOST_PP_LIST_FOR_EACH_PRODUCT_C(data, 16)(r, data)
# define BOOST_PP_LIST_FOR_EACH_PRODUCT_M_17(r, data) BOOST_PP_LIST_FOR_EACH_PRODUCT_C(data, 17)(r, data)
# define BOOST_PP_LIST_FOR_EACH_PRODUCT_M_18(r, data) BOOST_PP_LIST_FOR_EACH_PRODUCT_C(data, 18)(r, data)
# define BOOST_PP_LIST_FOR_EACH_PRODUCT_M_19(r, data) BOOST_PP_LIST_FOR_EACH_PRODUCT_C(data, 19)(r, data)
# define BOOST_PP_LIST_FOR_EACH_PRODUCT_M_20(r, data) BOOST_PP_LIST_FOR_EACH_PRODUCT_C(data, 20)(r, data)
# define BOOST_PP_LIST_FOR_EACH_PRODUCT_M_21(r, data) BOOST_PP_LIST_FOR_EACH_PRODUCT_C(data, 21)(r, data)
# define BOOST_PP_LIST_FOR_EACH_PRODUCT_M_22(r, data) BOOST_PP_LIST_FOR_EACH_PRODUCT_C(data, 22)(r, data)
# define BOOST_PP_LIST_FOR_EACH_PRODUCT_M_23(r, data) BOOST_PP_LIST_FOR_EACH_PRODUCT_C(data, 23)(r, data)
# define BOOST_PP_LIST_FOR_EACH_PRODUCT_M_24(r, data) BOOST_PP_LIST_FOR_EACH_PRODUCT_C(data, 24)(r, data)
# define BOOST_PP_LIST_FOR_EACH_PRODUCT_M_25(r, data) BOOST_PP_LIST_FOR_EACH_PRODUCT_C(data, 25)(r, data)
#
# define BOOST_PP_LIST_FOR_EACH_PRODUCT_N_0(r, data) BOOST_PP_FOR_ ## r(BOOST_PP_LIST_FOR_EACH_PRODUCT_H(data), BOOST_PP_LIST_FOR_EACH_PRODUCT_P, BOOST_PP_LIST_FOR_EACH_PRODUCT_O, BOOST_PP_LIST_FOR_EACH_PRODUCT_M_1)
# define BOOST_PP_LIST_FOR_EACH_PRODUCT_N_1(r, data) BOOST_PP_FOR_ ## r(BOOST_PP_LIST_FOR_EACH_PRODUCT_H(data), BOOST_PP_LIST_FOR_EACH_PRODUCT_P, BOOST_PP_LIST_FOR_EACH_PRODUCT_O, BOOST_PP_LIST_FOR_EACH_PRODUCT_M_2)
# define BOOST_PP_LIST_FOR_EACH_PRODUCT_N_2(r, data) BOOST_PP_FOR_ ## r(BOOST_PP_LIST_FOR_EACH_PRODUCT_H(data), BOOST_PP_LIST_FOR_EACH_PRODUCT_P, BOOST_PP_LIST_FOR_EACH_PRODUCT_O, BOOST_PP_LIST_FOR_EACH_PRODUCT_M_3)
# define BOOST_PP_LIST_FOR_EACH_PRODUCT_N_3(r, data) BOOST_PP_FOR_ ## r(BOOST_PP_LIST_FOR_EACH_PRODUCT_H(data), BOOST_PP_LIST_FOR_EACH_PRODUCT_P, BOOST_PP_LIST_FOR_EACH_PRODUCT_O, BOOST_PP_LIST_FOR_EACH_PRODUCT_M_4)
# define BOOST_PP_LIST_FOR_EACH_PRODUCT_N_4(r, data) BOOST_PP_FOR_ ## r(BOOST_PP_LIST_FOR_EACH_PRODUCT_H(data), BOOST_PP_LIST_FOR_EACH_PRODUCT_P, BOOST_PP_LIST_FOR_EACH_PRODUCT_O, BOOST_PP_LIST_FOR_EACH_PRODUCT_M_5)
# define BOOST_PP_LIST_FOR_EACH_PRODUCT_N_5(r, data) BOOST_PP_FOR_ ## r(BOOST_PP_LIST_FOR_EACH_PRODUCT_H(data), BOOST_PP_LIST_FOR_EACH_PRODUCT_P, BOOST_PP_LIST_FOR_EACH_PRODUCT_O, BOOST_PP_LIST_FOR_EACH_PRODUCT_M_6)
# define BOOST_PP_LIST_FOR_EACH_PRODUCT_N_6(r, data) BOOST_PP_FOR_ ## r(BOOST_PP_LIST_FOR_EACH_PRODUCT_H(data), BOOST_PP_LIST_FOR_EACH_PRODUCT_P, BOOST_PP_LIST_FOR_EACH_PRODUCT_O, BOOST_PP_LIST_FOR_EACH_PRODUCT_M_7)
# define BOOST_PP_LIST_FOR_EACH_PRODUCT_N_7(r, data) BOOST_PP_FOR_ ## r(BOOST_PP_LIST_FOR_EACH_PRODUCT_H(data), BOOST_PP_LIST_FOR_EACH_PRODUCT_P, BOOST_PP_LIST_FOR_EACH_PRODUCT_O, BOOST_PP_LIST_FOR_EACH_PRODUCT_M_8)
# define BOOST_PP_LIST_FOR_EACH_PRODUCT_N_8(r, data) BOOST_PP_FOR_ ## r(BOOST_PP_LIST_FOR_EACH_PRODUCT_H(data), BOOST_PP_LIST_FOR_EACH_PRODUCT_P, BOOST_PP_LIST_FOR_EACH_PRODUCT_O, BOOST_PP_LIST_FOR_EACH_PRODUCT_M_9)
# define BOOST_PP_LIST_FOR_EACH_PRODUCT_N_9(r, data) BOOST_PP_FOR_ ## r(BOOST_PP_LIST_FOR_EACH_PRODUCT_H(data), BOOST_PP_LIST_FOR_EACH_PRODUCT_P, BOOST_PP_LIST_FOR_EACH_PRODUCT_O, BOOST_PP_LIST_FOR_EACH_PRODUCT_M_10)
# define BOOST_PP_LIST_FOR_EACH_PRODUCT_N_10(r, data) BOOST_PP_FOR_ ## r(BOOST_PP_LIST_FOR_EACH_PRODUCT_H(data), BOOST_PP_LIST_FOR_EACH_PRODUCT_P, BOOST_PP_LIST_FOR_EACH_PRODUCT_O, BOOST_PP_LIST_FOR_EACH_PRODUCT_M_11)
# define BOOST_PP_LIST_FOR_EACH_PRODUCT_N_11(r, data) BOOST_PP_FOR_ ## r(BOOST_PP_LIST_FOR_EACH_PRODUCT_H(data), BOOST_PP_LIST_FOR_EACH_PRODUCT_P, BOOST_PP_LIST_FOR_EACH_PRODUCT_O, BOOST_PP_LIST_FOR_EACH_PRODUCT_M_12)
# define BOOST_PP_LIST_FOR_EACH_PRODUCT_N_12(r, data) BOOST_PP_FOR_ ## r(BOOST_PP_LIST_FOR_EACH_PRODUCT_H(data), BOOST_PP_LIST_FOR_EACH_PRODUCT_P, BOOST_PP_LIST_FOR_EACH_PRODUCT_O, BOOST_PP_LIST_FOR_EACH_PRODUCT_M_13)
# define BOOST_PP_LIST_FOR_EACH_PRODUCT_N_13(r, data) BOOST_PP_FOR_ ## r(BOOST_PP_LIST_FOR_EACH_PRODUCT_H(data), BOOST_PP_LIST_FOR_EACH_PRODUCT_P, BOOST_PP_LIST_FOR_EACH_PRODUCT_O, BOOST_PP_LIST_FOR_EACH_PRODUCT_M_14)
# define BOOST_PP_LIST_FOR_EACH_PRODUCT_N_14(r, data) BOOST_PP_FOR_ ## r(BOOST_PP_LIST_FOR_EACH_PRODUCT_H(data), BOOST_PP_LIST_FOR_EACH_PRODUCT_P, BOOST_PP_LIST_FOR_EACH_PRODUCT_O, BOOST_PP_LIST_FOR_EACH_PRODUCT_M_15)
# define BOOST_PP_LIST_FOR_EACH_PRODUCT_N_15(r, data) BOOST_PP_FOR_ ## r(BOOST_PP_LIST_FOR_EACH_PRODUCT_H(data), BOOST_PP_LIST_FOR_EACH_PRODUCT_P, BOOST_PP_LIST_FOR_EACH_PRODUCT_O, BOOST_PP_LIST_FOR_EACH_PRODUCT_M_16)
# define BOOST_PP_LIST_FOR_EACH_PRODUCT_N_16(r, data) BOOST_PP_FOR_ ## r(BOOST_PP_LIST_FOR_EACH_PRODUCT_H(data), BOOST_PP_LIST_FOR_EACH_PRODUCT_P, BOOST_PP_LIST_FOR_EACH_PRODUCT_O, BOOST_PP_LIST_FOR_EACH_PRODUCT_M_17)
# define BOOST_PP_LIST_FOR_EACH_PRODUCT_N_17(r, data) BOOST_PP_FOR_ ## r(BOOST_PP_LIST_FOR_EACH_PRODUCT_H(data), BOOST_PP_LIST_FOR_EACH_PRODUCT_P, BOOST_PP_LIST_FOR_EACH_PRODUCT_O, BOOST_PP_LIST_FOR_EACH_PRODUCT_M_18)
# define BOOST_PP_LIST_FOR_EACH_PRODUCT_N_18(r, data) BOOST_PP_FOR_ ## r(BOOST_PP_LIST_FOR_EACH_PRODUCT_H(data), BOOST_PP_LIST_FOR_EACH_PRODUCT_P, BOOST_PP_LIST_FOR_EACH_PRODUCT_O, BOOST_PP_LIST_FOR_EACH_PRODUCT_M_19)
# define BOOST_PP_LIST_FOR_EACH_PRODUCT_N_19(r, data) BOOST_PP_FOR_ ## r(BOOST_PP_LIST_FOR_EACH_PRODUCT_H(data), BOOST_PP_LIST_FOR_EACH_PRODUCT_P, BOOST_PP_LIST_FOR_EACH_PRODUCT_O, BOOST_PP_LIST_FOR_EACH_PRODUCT_M_20)
# define BOOST_PP_LIST_FOR_EACH_PRODUCT_N_20(r, data) BOOST_PP_FOR_ ## r(BOOST_PP_LIST_FOR_EACH_PRODUCT_H(data), BOOST_PP_LIST_FOR_EACH_PRODUCT_P, BOOST_PP_LIST_FOR_EACH_PRODUCT_O, BOOST_PP_LIST_FOR_EACH_PRODUCT_M_21)
# define BOOST_PP_LIST_FOR_EACH_PRODUCT_N_21(r, data) BOOST_PP_FOR_ ## r(BOOST_PP_LIST_FOR_EACH_PRODUCT_H(data), BOOST_PP_LIST_FOR_EACH_PRODUCT_P, BOOST_PP_LIST_FOR_EACH_PRODUCT_O, BOOST_PP_LIST_FOR_EACH_PRODUCT_M_22)
# define BOOST_PP_LIST_FOR_EACH_PRODUCT_N_22(r, data) BOOST_PP_FOR_ ## r(BOOST_PP_LIST_FOR_EACH_PRODUCT_H(data), BOOST_PP_LIST_FOR_EACH_PRODUCT_P, BOOST_PP_LIST_FOR_EACH_PRODUCT_O, BOOST_PP_LIST_FOR_EACH_PRODUCT_M_23)
# define BOOST_PP_LIST_FOR_EACH_PRODUCT_N_23(r, data) BOOST_PP_FOR_ ## r(BOOST_PP_LIST_FOR_EACH_PRODUCT_H(data), BOOST_PP_LIST_FOR_EACH_PRODUCT_P, BOOST_PP_LIST_FOR_EACH_PRODUCT_O, BOOST_PP_LIST_FOR_EACH_PRODUCT_M_24)
# define BOOST_PP_LIST_FOR_EACH_PRODUCT_N_24(r, data) BOOST_PP_FOR_ ## r(BOOST_PP_LIST_FOR_EACH_PRODUCT_H(data), BOOST_PP_LIST_FOR_EACH_PRODUCT_P, BOOST_PP_LIST_FOR_EACH_PRODUCT_O, BOOST_PP_LIST_FOR_EACH_PRODUCT_M_25)
# define BOOST_PP_LIST_FOR_EACH_PRODUCT_N_25(r, data) BOOST_PP_FOR_ ## r(BOOST_PP_LIST_FOR_EACH_PRODUCT_H(data), BOOST_PP_LIST_FOR_EACH_PRODUCT_P, BOOST_PP_LIST_FOR_EACH_PRODUCT_O, BOOST_PP_LIST_FOR_EACH_PRODUCT_M_26)
#
# endif

/* for_each_product.hpp
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
*/