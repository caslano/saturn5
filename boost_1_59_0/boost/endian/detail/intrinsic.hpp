//  endian/detail/intrinsic.hpp  -------------------------------------------------------//

//  Copyright (C) 2012 David Stone
//  Copyright Beman Dawes 2013

//  Distributed under the Boost Software License, Version 1.0.
//  http://www.boost.org/LICENSE_1_0.txt

#ifndef BOOST_ENDIAN_INTRINSIC_HPP
#define BOOST_ENDIAN_INTRINSIC_HPP

//  Allow user to force BOOST_ENDIAN_NO_INTRINSICS in case they aren't available for a
//  particular platform/compiler combination. Please report such platform/compiler
//  combinations to the Boost mailing list.
#ifndef BOOST_ENDIAN_NO_INTRINSICS

#ifndef __has_builtin         // Optional of course
  #define __has_builtin(x) 0  // Compatibility with non-clang compilers
#endif

#if defined(_MSC_VER) && ( !defined(__clang__) || defined(__c2__) )
//  Microsoft documents these as being compatible since Windows 95 and specifically
//  lists runtime library support since Visual Studio 2003 (aka 7.1).
//  Clang/c2 uses the Microsoft rather than GCC intrinsics, so we check for
//  defined(_MSC_VER) before defined(__clang__)
# define BOOST_ENDIAN_INTRINSIC_MSG "cstdlib _byteswap_ushort, etc."
# include <cstdlib>
# define BOOST_ENDIAN_INTRINSIC_BYTE_SWAP_2(x) _byteswap_ushort(x)
# define BOOST_ENDIAN_INTRINSIC_BYTE_SWAP_4(x) _byteswap_ulong(x)
# define BOOST_ENDIAN_INTRINSIC_BYTE_SWAP_8(x) _byteswap_uint64(x)

//  GCC and Clang recent versions provide intrinsic byte swaps via builtins
#elif (defined(__clang__) && __has_builtin(__builtin_bswap32) && __has_builtin(__builtin_bswap64)) \
  || (defined(__GNUC__ ) && \
  (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3)))
# define BOOST_ENDIAN_INTRINSIC_MSG "__builtin_bswap16, etc."
// prior to 4.8, gcc did not provide __builtin_bswap16 on some platforms so we emulate it
// see http://gcc.gnu.org/bugzilla/show_bug.cgi?id=52624
// Clang has a similar problem, but their feature test macros make it easier to detect
# if (defined(__clang__) && __has_builtin(__builtin_bswap16)) \
  || (defined(__GNUC__) &&(__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)))
#   define BOOST_ENDIAN_INTRINSIC_BYTE_SWAP_2(x) __builtin_bswap16(x)
# else
#   define BOOST_ENDIAN_INTRINSIC_BYTE_SWAP_2(x) __builtin_bswap32((x) << 16)
# endif
# define BOOST_ENDIAN_INTRINSIC_BYTE_SWAP_4(x) __builtin_bswap32(x)
# define BOOST_ENDIAN_INTRINSIC_BYTE_SWAP_8(x) __builtin_bswap64(x)

# define BOOST_ENDIAN_CONSTEXPR_INTRINSICS

//  Linux systems provide the byteswap.h header, with
#elif defined(__linux__)
//  don't check for obsolete forms defined(linux) and defined(__linux) on the theory that
//  compilers that predefine only these are so old that byteswap.h probably isn't present.
# define BOOST_ENDIAN_INTRINSIC_MSG "byteswap.h bswap_16, etc."
# include <byteswap.h>
# define BOOST_ENDIAN_INTRINSIC_BYTE_SWAP_2(x) bswap_16(x)
# define BOOST_ENDIAN_INTRINSIC_BYTE_SWAP_4(x) bswap_32(x)
# define BOOST_ENDIAN_INTRINSIC_BYTE_SWAP_8(x) bswap_64(x)

#else
# define BOOST_ENDIAN_NO_INTRINSICS
# define BOOST_ENDIAN_INTRINSIC_MSG "no byte swap intrinsics"
#endif

#elif !defined(BOOST_ENDIAN_INTRINSIC_MSG)
# define BOOST_ENDIAN_INTRINSIC_MSG "no byte swap intrinsics"
#endif  // BOOST_ENDIAN_NO_INTRINSICS
#endif  // BOOST_ENDIAN_INTRINSIC_HPP

/* intrinsic.hpp
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
*/