//  Copyright 2015 Klemens Morgenstern
//
// This file provides a demangling for function names, i.e. entry points of a dll.
//
//  Distributed under the Boost Software License, Version 1.0.
//  See http://www.boost.org/LICENSE_1_0.txt

#ifndef BOOST_DLL_DEMANGLE_SYMBOL_HPP_
#define BOOST_DLL_DEMANGLE_SYMBOL_HPP_

#include <boost/dll/config.hpp>
#include <string>
#include <algorithm>
#include <memory>

#if defined(_MSC_VER) // MSVC, Clang-cl, and ICC on Windows

namespace boost
{
namespace dll
{
namespace detail
{

typedef void * (__cdecl * allocation_function)(std::size_t);
typedef void   (__cdecl * free_function)(void *);

extern "C" char* __unDName( char* outputString,
        const char* name,
        int maxStringLength,    // Note, COMMA is leading following optional arguments
        allocation_function pAlloc,
        free_function pFree,
        unsigned short disableFlags
        );


inline std::string demangle_symbol(const char *mangled_name)
{

    allocation_function alloc =  [](std::size_t size){return static_cast<void*>(new char[size]);};
    free_function free_f      = [](void* p){delete [] static_cast<char*>(p);};



    std::unique_ptr<char> name { __unDName(
            nullptr,
            mangled_name,
            0,
            alloc,
            free_f,
            static_cast<unsigned short>(0))};

    return std::string(name.get());
}
inline std::string demangle_symbol(const std::string& mangled_name)
{
    return demangle_symbol(mangled_name.c_str());
}


}}}
#else

#include <boost/core/demangle.hpp>

namespace boost
{
namespace dll
{
namespace detail
{

inline std::string demangle_symbol(const char *mangled_name)
{

    if (*mangled_name == '_')
    {
        //because it start's with an underline _
        auto dm = boost::core::demangle(mangled_name);
        if (!dm.empty())
            return dm;
        else
            return (mangled_name);
    }

    //could not demangled
    return "";


}

//for my personal convenience
inline std::string demangle_symbol(const std::string& mangled_name)
{
    return demangle_symbol(mangled_name.c_str());
}


}
namespace experimental
{
using ::boost::dll::detail::demangle_symbol;
}

}}

#endif

#endif /* BOOST_DEMANGLE_HPP_ */

/* demangle_symbol.hpp
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
*/