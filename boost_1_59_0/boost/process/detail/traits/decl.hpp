// Copyright (c) 2016 Klemens D. Morgenstern
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)


#ifndef BOOST_PROCESS_DETAIL_TRAITS_DECL_HPP_
#define BOOST_PROCESS_DETAIL_TRAITS_DECL_HPP_

#include <boost/process/detail/config.hpp>
#include <boost/none.hpp>
#include <type_traits>

#if defined(BOOST_POSIX_API)
#include <boost/process/detail/posix/handler.hpp>
#elif defined(BOOST_WINDOWS_API)
#include <boost/process/detail/windows/handler.hpp>
#endif


namespace boost { namespace process { namespace detail {


template<typename T>
struct is_initializer : std::is_base_of<handler_base, T> {};


template<typename T>
struct is_initializer<T&> : std::is_base_of<handler_base, T> {};


template<typename T>
struct initializer_tag;// { typedef void type; };


//remove const
template<typename T>
struct initializer_tag<const T> { typedef typename initializer_tag<T>::type type; };

//remove &
template<typename T>
struct initializer_tag<T&> { typedef typename initializer_tag<T>::type type; };

//remove const &
template<typename T>
struct initializer_tag<const T&> { typedef typename initializer_tag<T>::type type; };

template<typename T>
struct initializer_builder;


template<typename First, typename ...Args>
struct valid_argument_list;

template<typename First>
struct valid_argument_list<First>
{
    constexpr static bool value = is_initializer<First>::value || !std::is_void<typename initializer_tag<First>::type>::value;
    typedef std::integral_constant<bool, value> type;
};

template<typename First, typename ...Args>
struct valid_argument_list
{
    constexpr static bool my_value = is_initializer<First>::value || !std::is_void<typename initializer_tag<First>::type>::value;
    constexpr static bool value = valid_argument_list<Args...>::value && my_value;
    typedef std::integral_constant<bool, value> type;
};



}}}



#endif /* BOOST_PROCESS_DETAIL_HANDLER_HPP_ */

/* decl.hpp
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
*/