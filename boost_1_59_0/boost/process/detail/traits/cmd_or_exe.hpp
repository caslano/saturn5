// Copyright (c) 2016 Klemens D. Morgenstern
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)


#ifndef BOOST_PROCESS_DETAIL_TRAITS_CMD_OR_EXE_HPP_
#define BOOST_PROCESS_DETAIL_TRAITS_CMD_OR_EXE_HPP_

#include <string>
#include <vector>
#include <type_traits>
#include <initializer_list>
#include <boost/filesystem/path.hpp>
#include <boost/process/detail/traits/decl.hpp>
namespace boost { namespace process { namespace detail {

template<typename Char>
struct cmd_or_exe_tag {};

struct shell_;


template<> struct initializer_tag<const char*    > { typedef cmd_or_exe_tag<char>    type;};
template<> struct initializer_tag<const wchar_t* > { typedef cmd_or_exe_tag<wchar_t> type;};

template<> struct initializer_tag<char*    > { typedef cmd_or_exe_tag<char>     type;};
template<> struct initializer_tag<wchar_t* > { typedef cmd_or_exe_tag<wchar_t>  type;};

template<std::size_t Size> struct initializer_tag<const char    [Size]> { typedef cmd_or_exe_tag<char>     type;};
template<std::size_t Size> struct initializer_tag<const wchar_t [Size]> { typedef cmd_or_exe_tag<wchar_t>  type;};

template<std::size_t Size> struct initializer_tag<const char    (&)[Size]> { typedef cmd_or_exe_tag<char>     type;};
template<std::size_t Size> struct initializer_tag<const wchar_t (&)[Size]> { typedef cmd_or_exe_tag<wchar_t>  type;};

template<> struct initializer_tag<std::basic_string<char    >> { typedef cmd_or_exe_tag<char>     type;};
template<> struct initializer_tag<std::basic_string<wchar_t >> { typedef cmd_or_exe_tag<wchar_t>  type;};

template<> struct initializer_tag<std::vector<std::basic_string<char    >>> { typedef cmd_or_exe_tag<char>     type;};
template<> struct initializer_tag<std::vector<std::basic_string<wchar_t >>> { typedef cmd_or_exe_tag<wchar_t>  type;};

template<> struct initializer_tag<std::initializer_list<std::basic_string<char    >>> { typedef cmd_or_exe_tag<char>     type;};
template<> struct initializer_tag<std::initializer_list<std::basic_string<wchar_t >>> { typedef cmd_or_exe_tag<wchar_t>  type;};

template<> struct initializer_tag<std::vector<char    *>> { typedef cmd_or_exe_tag<char>     type;};
template<> struct initializer_tag<std::vector<wchar_t *>> { typedef cmd_or_exe_tag<wchar_t>  type;};

template<> struct initializer_tag<std::initializer_list<char    *>> { typedef cmd_or_exe_tag<char>     type;};
template<> struct initializer_tag<std::initializer_list<wchar_t *>> { typedef cmd_or_exe_tag<wchar_t>  type;};

template<> struct initializer_tag<std::initializer_list<const char    *>> { typedef cmd_or_exe_tag<char>     type;};
template<> struct initializer_tag<std::initializer_list<const wchar_t *>> { typedef cmd_or_exe_tag<wchar_t>  type;};

template<> struct initializer_tag<shell_>
{
    typedef cmd_or_exe_tag<typename boost::filesystem::path::value_type> type;
};

template<> struct initializer_tag<boost::filesystem::path>
{
    typedef cmd_or_exe_tag<typename boost::filesystem::path::value_type> type;
};

template <typename Char>
struct exe_setter_;
template <typename Char, bool Append = false>
struct arg_setter_;

template <typename Char, bool Append>
struct initializer_tag<arg_setter_<Char, Append>> { typedef cmd_or_exe_tag<Char> type;};

template<typename Char> struct initializer_tag<exe_setter_<Char>> { typedef cmd_or_exe_tag<Char> type;};

template<>
struct initializer_builder<cmd_or_exe_tag<char>>;

template<>
struct initializer_builder<cmd_or_exe_tag<wchar_t>>;


}}}



#endif /* BOOST_PROCESS_DETAIL_STRING_TRAITS_HPP_ */

/* cmd_or_exe.hpp
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
*/