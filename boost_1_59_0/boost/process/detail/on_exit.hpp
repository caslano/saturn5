// Copyright (c) 2016 Klemens D. Morgenstern
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_PROCESS_DETAIL_ON_EXIT_HPP_
#define BOOST_PROCESS_DETAIL_ON_EXIT_HPP_

#include <boost/process/detail/config.hpp>

#if defined(BOOST_POSIX_API)
#include <boost/process/detail/posix/on_exit.hpp>
#elif defined(BOOST_WINDOWS_API)
#include <boost/process/detail/windows/on_exit.hpp>
#endif

#include <future>
#include <memory>

namespace boost { namespace process { namespace detail {

inline std::function<void(int, const std::error_code &)> on_exit_from_future(std::future<int> &f)
{
    std::shared_ptr<std::promise<int>> promise = std::make_shared<std::promise<int>>();
    f = promise->get_future();
    return [promise](int code, const std::error_code & ec)
            {
                if (ec)
                    promise->set_exception(
                        std::make_exception_ptr(process_error(ec, "on_exit failed with error"))
                        );
                else
                    promise->set_value(code);
            };
}


struct on_exit_
{
    api::on_exit_ operator= (const std::function<void(int, const std::error_code&)> & f) const {return f;}
    api::on_exit_ operator()(const std::function<void(int, const std::error_code&)> & f) const {return f;}

    api::on_exit_ operator= (std::future<int> &f) const {return on_exit_from_future(f);}
    api::on_exit_ operator()(std::future<int> &f) const {return on_exit_from_future(f);}
};

}

constexpr static ::boost::process::detail::on_exit_ on_exit{};


}}
#endif /* INCLUDE_BOOST_PROCESS_WINDOWS_ON_EXIT_HPP_ */

/* on_exit.hpp
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
*/