// Copyright (c) 2016 Klemens D. Morgenstern
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_PROCESS_DETAIL_POSIX_IS_RUNNING_HPP
#define BOOST_PROCESS_DETAIL_POSIX_IS_RUNNING_HPP

#include <boost/process/detail/config.hpp>
#include <boost/process/detail/posix/child_handle.hpp>
#include <system_error>
#include <sys/wait.h>

namespace boost { namespace process { namespace detail { namespace posix {

// Use the "stopped" state (WIFSTOPPED) to indicate "not terminated".
// This bit arrangement of status codes is not guaranteed by POSIX, but (according to comments in
// the glibc <bits/waitstatus.h> header) is the same across systems in practice.
constexpr int still_active = 0x017f;
static_assert(WIFSTOPPED(still_active), "Expected still_active to indicate WIFSTOPPED");
static_assert(!WIFEXITED(still_active), "Expected still_active to not indicate WIFEXITED");
static_assert(!WIFSIGNALED(still_active), "Expected still_active to not indicate WIFSIGNALED");
static_assert(!WIFCONTINUED(still_active), "Expected still_active to not indicate WIFCONTINUED");

inline bool is_running(int code)
{
    return !WIFEXITED(code) && !WIFSIGNALED(code);
}

inline bool is_running(const child_handle &p, int & exit_code, std::error_code &ec) noexcept
{
    int status;
    auto ret = ::waitpid(p.pid, &status, WNOHANG);

    if (ret == -1)
    {
        if (errno != ECHILD) //because it no child is running, than this one isn't either, obviously.
            ec = ::boost::process::detail::get_last_error();
        return false;
    }
    else if (ret == 0)
        return true;
    else
    {
        ec.clear();

        if (!is_running(status))
            exit_code = status;

        return false;
    }
}

inline bool is_running(const child_handle &p, int & exit_code)
{
    std::error_code ec;
    bool b = is_running(p, exit_code, ec);
    boost::process::detail::throw_error(ec, "waitpid(2) failed in is_running");
    return b;
}

inline int eval_exit_status(int code)
{
    if (WIFEXITED(code))
    {
        return WEXITSTATUS(code);
    }
    else if (WIFSIGNALED(code))
    {
        return WTERMSIG(code);
    }
    else
    {
        return code;
    }
}

}}}}

#endif

/* is_running.hpp
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
*/