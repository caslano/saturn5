// Copyright (c) 2006, 2007 Julio M. Merino Vidal
// Copyright (c) 2008 Ilya Sokolov, Boris Schaeling
// Copyright (c) 2009 Boris Schaeling
// Copyright (c) 2010 Felipe Tanus, Boris Schaeling
// Copyright (c) 2011, 2012 Jeff Flinn, Boris Schaeling
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_PROCESS_DETAIL_POSIX_CLOSE_OUT_HPP
#define BOOST_PROCESS_DETAIL_POSIX_CLOSE_OUT_HPP

#include <boost/process/detail/used_handles.hpp>
#include <boost/process/detail/posix/handler.hpp>
#include <array>

namespace boost { namespace process { namespace detail { namespace posix {

template<int p1, int p2>
struct close_out : handler_base_ext
{
    template <class Executor>
    inline void on_exec_setup(Executor &e) const;

    std::array<int, 2> get_used_handles() {return {{p1 != -1 ? p1 : p2, p2 != -1 ? p2 : p1}};}
};

template<>
template<typename Executor>
void close_out<1,-1>::on_exec_setup(Executor &e) const
{
    if (::close(STDOUT_FILENO) == -1)
        e.set_error(::boost::process::detail::get_last_error(), "close() failed");

}

template<>
template<typename Executor>
void close_out<2,-1>::on_exec_setup(Executor &e) const
{
    if (::close(STDERR_FILENO) == -1)
        e.set_error(::boost::process::detail::get_last_error(), "close() failed");
}

template<>
template<typename Executor>
void close_out<1,2>::on_exec_setup(Executor &e) const
{
    if (::close(STDOUT_FILENO) == -1)
        e.set_error(::boost::process::detail::get_last_error(), "close() failed");

    if (::close(STDERR_FILENO) == -1)
        e.set_error(::boost::process::detail::get_last_error(), "close() failed");
}

}}}}

#endif

/* close_out.hpp
Rohfo9o25qeSPB79PjQI0pgKFWPyFs+8SjS1CaQDjwJdJfLXPjmjGuIUMrw1YdJmiT2U2s63UFfVWf5/JJ7s/0bGCctujzSnu79xmvuMkLnnLkVCJXApcURh8SNVZNIxi4gSQh4XXlpBUaHIjMNLlgi9OkSkWjM1VVY3yo4+JqFBMCGtInoLLsqA1NPCsnVQiGBByVNQYf1XxHn1gREWxQuH4PC90/mGskSTprL9Sb/b9Bb9SoSuopzpvkJS4qNo6iyJdFotLx8XcaktC9KQJnOIeFmWyHnyUi3LEpzUCMx3mk136X0KD3sCSOj+L6SZ3INm7HOHZ9Txcz2IjgYGaVI20GomeMb7pQn98wAfsyoRfxy5UOIVr5FZ0zEMjAtTnUTHYv/QGYfPcfg0wacldhu2TwH2Q2lxs4Imt72A25XjYeUrd7gAhqU0wATr3GxGHbO4HY0uy7jPkRsJW9i4BFJdhscleNQqr+Nry6K+dKCrtbP83rdJP+ENXOBq1s5faINVUB8HAj8v3xN0CFWXO3cesZ/DUKp4r89BGoiSPAn/XWrlHSy9wqtWhLxu1e0gZrt4nzic4WXYobpkgRbsu8u5mfVgqrSS5Pucksc0nOHwUtSoaHS96GCwaps9VUDVnpuaVd0SHwk/7DJL7/JifnCje80BVrVQpL1Wgyn8of0CJxEx2V92/v5GANm2uxf0BkCyGzsn0VaDapuAFRyHA/1QPHAps90IVZB3gGo+jOebMzXVFGOlq1/KNGtkUyx4ULfjGjD7eTmuMxRclG//UpiUEWNSNkWMK4PGtWU+jqtWH1eTats0hcBfspCtZnoczTjEQzjE5fN70/oRcoMhLpliHGKnWB0xGcxZlSzyXKzd4q5Ds6WlmCsKAz/EhemrZmkiiRjYnUtz9rgjY+JU27T7NCLmvQdSjSRTl1wU844voXufOKaplxYb5AUqgRcuIUaqlpZvHkpwwlRErPEGMnYEOtZS9lc0wWzNUTXDqlc0w6oqo2ToI0RUm5bEmboRBLb7WJWv0D8qQLRYNj+df04V8kBZYy9fSEUFWhFqcDxekpvsJfqWn55wTo0C/MxP4W9OOqd2sKp6qpM0T+r7FompwjVNOIzX9HdZS8hZD7M3PZEJtxWzN02p4h+N7iiXv2Jds1odGqIdrS7nnYhiSSNmKjlHoY07/DbW54c/atZCG7MRxNZ+cD+dnOvIsyUSyAIQtgyf6Fc1vDabKtbApjZOiNNJ67wYR8PDoT/EkbhjgV3HTi7WAuS0kLmUf2Pqrl07QJUiRmyKoz3wVDiUQXfdLGLtImXuDhM3E16bRX/dBFKQJYIHbrOMkxVei3Ua3yd9ELFK7lxq1h17JHuMDnWQ5DU4KGYJpTFIl/hypzoFf/Te7Ga1y7hhZo52p+XX20IMpw2ET/pkIHzSGa1COLQa5/Me8Xc9RCDZfc2qisIWGBduQ5DIBPYDZtSlAoOAnMzlNBqQQESmiCTbBflZTvTS4+MDtmJn3Lnv4lYFHvGF3x1GTPzSEWZBqeq7CXTVvUQ3wVFfLE7AmnvpBNygkSwZMgJO2RN0ET1wLPKtglNXbXfDcWm8G53d5uMEc+dn0iUtM5lkdIID90m7578DWV+4mFTkhfOFhb/HyWxxIQRHAEpT7kc3EtvsDelkWPuGGbErOaon3ZFGRQupCKOl7eRfm0QIuCs79slsH7zY2yT4/nXwZldot+rOXYPcamCYO0xfVNuMSQZXMXEkg5e4w+two+DfH+JiUiR5YMswACZ7FZ+IiTq2uCy/3up4FZtYyslzZU9RsaMuUBSeL04ttq+er3Hu8O7YYcUQK/g4eBMU0/kUT+UQgKMRY0qWgwF4DuRioxgDycLl0TU2ZitXi3EzOYHai3f3JHSnlB0NZIho0sopVXV8DYeTokbfSildxfRFy8CT8Bto8SMiUV2tlhlaSwatLhFeUZjl7qZ8sqvppeWmp1PyyMRUSbP37vj4CD1WJmqxLNikVPKOuf3DZj0pQNuBGM0ysjPNsuun7wXySW2NOlFIbvz8+w+w83ynm71DG7pSXA55/N+fhMlWW8PzsdTRELgWg/qF/hUXXpctxbWeyKsdIKJq+xhm5c6lxS2eDl9w2UumwBc8b0EYi+LUJgzDgGWw04xxQd6+W9wPP84YXjXUw5xOj+N2Z2Cgats6AXie3apwRBabx397EviUb+URjcC9xX0i8LkYXwvVw/MJ+m4vSgNqUNkmfrpzabKBYhgVOhLGMonKRJmFSvnR2QO0WYwS+3HnBDG6NbBk0SHyYclAbYqX+sLrhhF8FTNF+ztoIS4K7mP036ocPT+CIbxFPUvZVdoVy3eylUInowdQsZRhjpjQuTjLy5Um6ns9wRQRdlebsy8c5PBpEnN3i1vJGlwOaL8VrQe3Wco+FsmrZGSypesTDNJpoYsZSEde6qnwmegcBaMoE6oKFIuTz6UiAuU0bPEQ4igLnGY/DKEAb8WRsP+IWLHxsJ8s/yjtbUEeoIHb5DyNIWKuEQFW3GybKzJexFcZKSRA6aFz8XPxovaPjwUhOr1f3ABndzfA6NdwgF+yBkVe2SQMTA1tGka6wSGIzEOrsoXQkMo6Y3XV1o4D30QnRy26UrV5xsPZEwgtxAiOCH/ZjBOqahAA3PxfSwVOwqqEVkmpeQddtG6jnWcIE9lRPU1asAOeQuJDPBgALTmnorGFZuTLGsL3rDijLiHqj2gtNFpTi4ZLqq9kqE+Qen6W0E7xQEQj1/DTRgKteGc0iY8fgR6dpNGT6j3+XPZptKw39D4Te5/mcZRYS6bAJU/xFQ5br5SfKPL5HEBLlyjEo9/FEriHkcpV66nuptPAHxFJEOyFhtnpYbIFF+nzjEN5M5rOt+WgcVUF/F0ixtsTJrleePIJsAjE4RMdEplrdtj62UDrlT2WBT3iYna1F7ADYVd7gi4KGaT4HTsskX/Qb7Kvyzl0Jxu1k41zl++Z2y8yRvUU1iFd9y65Ze+xRN4irrn/3tAZ1VK+mMJEryfW0VI2j1Z6STsRsZVu1vNq5LVWeNvOOmyXwle0Pqn0Fla6wz3TtCci9zHZvI7zOnaU3OFlL6CiiKUvyL3TbWhx4HmtBVUegpUHy8ph2zp4Ck3C49ysMtqPlw3HFZxLf4vo7zPDpZ1R19yHelo8DBK08TtdfDpVN4cIJvHh2L6LhKb9vTMq5ab48xkC5s942OQU/v00lGhiCgi2oMakObZ6WCov+xrt+4j8plQTw+BqwJEZgR5e2ZjtHCXfcHtRTZJFrm94ojI94ZecMuNa+NORhOJ1+2Q9wlDFniQ9/WuMedil8/d9xSYxOpYreLymv8Y7XvS702po9NWu3iagTDH+yE7LyxZyMfts3w8m/sdX0XtpgtW1Xv2qiEizZXrJp7vfppJ5eknTW6Lkab3k49XfUEmBXvK7yo+o5E69pG39S1SSq5cc+MsWKrlWL/njlnoqsekla//nUyox6yXf719FJad+o5W0ni2hksN6yd8b36CSz/WSKVW1VLJJL6kMhajkXShxrd+x40tT9HbXepMKt/k3eiUAb1SpTC9RTaLkGb2koqKCSqZSRyKZIi0xvwvrCL+Ei/kMCTEM2Uoe0IQxI/x4IReTtWdIMLcvxrja7oUyGBQvtuV8wWuYvHGu1RQcL5i16lBfSbj+lMTmM19X0YHRx6fnjXjJVvUVkqS7rAg84V5sn/s+ws1bPY4zJcM97BdwxpYJd3Iak5slrOdjfo3rdZfVpW71Fm4FeOhxVBZvbwyg+clHN5CdBNkJ9/KEvs+ASTRZKsdY1ZryilLguXtQMNoUoy8J4sbbxjVLG4hg2oZEp+kFvmvuD2iwCmgqwxOqyKDAy1rcUGe3canPeEIU89EkkuTxf92FNnENsCcYI7SyfLvW9a9k116KUix6R8WF0FosJg1B+U5sDHjdFZrTBD0uFxQO6S/Yq0JzAKRBuyANApIrRCoj5Bd02WWrkauiGC4+tpPZ3gtq3M8GrAEz/Vk3HaLdKoqScCg/Gc8lehUNzxuZwC+yxsJ8R/fz7j4HS6aJPDsQc6MT9YRszNzmWo86Fa4cReE4FEXS7/aYt3vUHTDamoaivh42NtMbNvnC8C/Es+HB7OMeNicTxXRJ/MNhZGqc7IHHnvDT8NJbPerYDE9kihVRyNXc7yd6WtuOb4tpOyjS2N2xze50dquNPoOSppoNx/NA9CoPu8f6U2eN/RwHdgAuyhDPoDkZ8MmEjxU+KXzFdzDHQXOGdLQ/jCSOPpZGPvEROF8dfbwHwxPdxxvFRboV30PXde/jTfDBadQAdgAfCvvGpRtZsx38ysdIHi+oap7po5uh0DEGxrZSiR3k1XNidySCakV4MYxj2njBr9hk9CqMfMd/XPODwKg527XrkMST7bRVigkTWbtR6lhFtsufa8aC+aS4U9CmgdxBKI4O0hBA7lz04OlWY5Nx72K6GWFD+F+vxyWPyvVAnoFb77z4evz2+W7XIz+vm/U4/tdu1qNtaGw9ii66HkPQYJsSV3Rcl8z/07p0vZ/ZLPGvv+ptIqPXU6vjgj8L1cSFE1+HIt7jjs7w8nezDXPvedU1KF3Hm5Q4Aev/oj7JJG5n36HN6v8DikOZYSlCAIBDS619eVxU5f7/4DA4LjgDOoppRYlKYTVFdUHUZmRGDjkjmJmYmZQt3lbKmaTcvwPp6XiUfm3erJvlvTfbbbuKluEGGCpmpZi3tO32EHYjUEBNz++znDMzLNr9vb6/P2DO8jzPefbns7w/nw+ke3wpi2dR3QxMbWb34NhNq8fA3lMjhuVxd6VBOf0hMyGJ9opNbzXp5tTxJngqyXlJrIZETaX4OJV67vFFhtSX4pSy1Jf0lFGfspX+QLvp+c6ZbMndi7BLm3UpOkr3x0i8ie57pVmLqOfJJB/DH8vXlBYlmjTHCko2gfXymiNjHPsShGW6nCUGC8aRTGMO0mMMYtijIwzU+JFQhGzxwH/x6/ImTXEMLMId2u/yqfEXFCUy6xWPX8hqCKAry8B5iuP4g7qIXo0/+aCepj4HP2v5Ge5DxY2ompNzkuoPw9zuyrKG/N2fJbaCTJDbE8K8jBgKS+33uAsBX72CeJOyZSfwMZn5C20VsVOSvJ4ITtXy3rWYeAnpD+X1+fBTtaQA/iewy7FCfj6Lf4rgR53QU5JXFPODI1xIEF1bykvq+GEjPxSb6KHgh6iThbs2viMUnmqJ/44+7qR36yX+yecfF/9k8E8B/awoZG88qEsUKx+2oOeTLUd6oQAILPfTi5FiTneEC776d/42P2zkH6uZa8I/TKCQjEiSr5Tkh6zy+jfJ71C15pFJ+gA/KIOU1xNvikYfSiWU6uI2ZHCKp7FPboqRn1tJScvoP9kKYQZIjm2V16OIwaNLbuQlJNmTn1tHiWdx9dD4Bb4tL0GVs7yEPAZVLUFNTDceCzsXYeXkSfTz3AauDKpcIQUK0Z/rxw2s4E+h8FJeX83JBtONhxMc4WJT+G4Rp1jKPyNoIbzl6gF7Ex9O0VNxV3oF8vefStrQJyDJrj+I+zHmWzoWgbvCARF/WnGcYnjQKP7jIQtuf4qTB+7UYUoqxrdplIbmizr6hXIcz0zR20xTXOFJlSl+78b3dTzlfnm2B+X+UX8s8eM96Vzo9UNpJSi0Ega+wje0RpbJJzpGEpm6nmOnuP/dy7TN8N8d0Wc9/GU7fRZut2E4e1GUAfodBBOkJW4rmaIDbnKjrdFHRazRc/FQGNEoqX6reOhDPGrCwOYZDGwu0FVcqM2CU8RQaKVkdVJolY/8A4VWSuYpCko4QOyB3IbJHwfwCtDzm29tbqfWYvt2W2nIZEBgdo3lHbfwRcK4qi8zxvXHhrBvjZsJy4vQd4aDwq6NsSbEmemRsqu7GUBXLLNYL7P3i3ohh9gbh7s8JjbMqQxy9Qibxs65WIfdRPRtT29joygSYy/ejmNGxlARl9TtYc4r2c1kLQfFOSHyhWF+dtVrCSZx/NDvQNc3+pRXcTtyh2q1+v406P/CeE9QOaAk65PEZrlJ86mzkhCmrGQnyV5NmT1YDpqB8JW93ZXsFNnbS8lOpShpd36ih7tCGtBdiS6f5n9iCljqX6YJE6f7RdmPiE2M2oJ1qXwL6iL/bPStrSRIY61749dlrX8JD84Vbu7IbasM5OT5+pN36Ukjsx5W/eELq5jAJiiopOS7uJRvs/j1/FXI21zAPt3d2lNLuxMI+aq3Eoj73VzfrIOQIyETCGmqw4xrxOCoEV8XhseZcb+gQMXoLAI47kY9716ymTOT/ILhvhQ/BnEYOnL3c0Zh0O5OLRnj0s//57tsyQC9Je8/b+CB4/UML9MT7OKav/Y2iWH12NS+Ujh6gOo2E71WA59bCfUqy1UnC7dSRfSa21zVjmBDn4al32LErBafQucXglRK/DSu3/iVa8PzZfkSnC9oqjT/AM2Xu2XvYWXSYHny9zRl1sven2jWzJG9DTRxFlIA5DurTOyHslZ0344uFgWFVUR3zPVPkeR0vJUiJF72bhO8nT7HI09zKZA5G+OxytkFhvd9Ell772aPxtDJCDCff7cp0E2rDM1/0BTI9WYdDXhQtg30t56IQC+huU5TYIAn61U8u4J99DEe7xR/mgbToGWBnUKEcQaUxEOHTTkbgevWtmMHlSLpA1mHEcR0lsHasnot2McITa8/aQlm8RBeP4aH8JuVxhBaX4QhnPmTTr2H5wv56YHxi0DKYWNY2QHvi0F3zGjnp2yfHFE6FcHWUB1hOiL2ZcB0eBVB0XcQ1Ti/zqde89qtPYAeCe4V24Ghsq2HSSolaY6skVjNvahSE82JpAm11BPyQf1rqg4x6yNlzrUywmzRcyc01M9tTObQBXWaY6cTHTLVukO/a8jA2NZ7m0Jt1sDwUJs9MDjUlhRICLUlY2SynbENaK2V3GCH/0kNPeG/vSEW/luRC0HODMZcuFlx3boSBZx/Ja9lfZED1CWayKN463Sp5n+yW4Akur8Cssne7cDpVEQJLJE2xmO9jBCb2HJq5O2ngDiu6iCvnOv0KzMNebah64u2b/sgOo5GzqAu42hYddcSbTCopfuKZ+h2hVN0O9Bcww7UFbYDHbzXk5mdDxS2ev4kGB1EcUzDOMx4GNWI2B/jTJEQuxtfadKMg+WCwR2tDEmOl2/vSOkQKwpsUxGrM36j7WmiXXz8Hw7kAX2tSnbx17doOVo98owkxd9bzhus+O1yXrLi7yfnpSj+JBmD/YyzSxRfTM6AzUteAEXjckI3B+cQVlR1dmDtZB3MZAxPi/PYMNz2rus4lUkOflAZm9y6lxUW7pLtCBeYmIQ9UnECh2GatSERuFT2s1orVuCJpSAEKVhf/3fq5U/Fdyebw2Y8T5I245rhRzWNokUD65MN17CR8JxW/RvEzZVxpjIsUJ28AQsdSYX6N0ihLUI89D9A/xAz6q2DGSd7jyje7bL3B8VbLXuF4t0le48q3r2yt9GIfzIDPez50ZVp1DfGASWQm3bMVoomcAjBWUR0VmRG8my8BaNpMu568VHiQGB0UztArxfUhGk+Fx3/9W50pfgdiXUQyK1a5n7DpOZLI4nVjkJk6xz3pfc0sac6Q4aYY5Vn2EN3
*/