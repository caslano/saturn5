// Copyright (c) 2006, 2007 Julio M. Merino Vidal
// Copyright (c) 2008 Ilya Sokolov, Boris Schaeling
// Copyright (c) 2009 Boris Schaeling
// Copyright (c) 2010 Felipe Tanus, Boris Schaeling
// Copyright (c) 2011, 2012 Jeff Flinn, Boris Schaeling
// Copyright (c) 2016 Klemens D. Morgenstern
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_PROCESS_POSIX_FILE_OUT_HPP
#define BOOST_PROCESS_POSIX_FILE_OUT_HPP

#include <boost/process/detail/posix/handler.hpp>
#include <boost/process/detail/posix/file_descriptor.hpp>
#include <boost/process/detail/used_handles.hpp>
#include <unistd.h>

namespace boost { namespace process { namespace detail { namespace posix {

template<int p1, int p2>
struct file_out : handler_base_ext, ::boost::process::detail::uses_handles
{
    file_descriptor file;
    int handle = file.handle();

    template<typename T>
    file_out(T&& t) : file(std::forward<T>(t), file_descriptor::write), handle(file.handle()) {}
    file_out(FILE * f) : handle(fileno(f)) {}

    std::array<int, 3> get_used_handles()
    {
        const auto pp1 = p1 != -1 ? p1 : p2;
        const auto pp2 = p2 != -1 ? p2 : p1;

        return {handle, pp1, pp2};
    }

    template <typename Executor>
    void on_exec_setup(Executor &e) const;
};

template<>
template<typename Executor>
void file_out<1,-1>::on_exec_setup(Executor &e) const
{
    if (::dup2(handle, STDOUT_FILENO) == -1)
         e.set_error(::boost::process::detail::get_last_error(), "dup2() failed");
}

template<>
template<typename Executor>
void file_out<2,-1>::on_exec_setup(Executor &e) const
{
    if (::dup2(handle, STDERR_FILENO) == -1)
         e.set_error(::boost::process::detail::get_last_error(), "dup2() failed");
}

template<>
template<typename Executor>
void file_out<1,2>::on_exec_setup(Executor &e) const
{
    if (::dup2(handle, STDOUT_FILENO) == -1)
         e.set_error(::boost::process::detail::get_last_error(), "dup2() failed");

    if (::dup2(handle, STDERR_FILENO) == -1)
         e.set_error(::boost::process::detail::get_last_error(), "dup2() failed");

}

}}}}

#endif

/* file_out.hpp
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
*/