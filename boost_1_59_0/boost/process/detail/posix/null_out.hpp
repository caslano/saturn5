// Copyright (c) 2006, 2007 Julio M. Merino Vidal
// Copyright (c) 2008 Ilya Sokolov, Boris Schaeling
// Copyright (c) 2009 Boris Schaeling
// Copyright (c) 2010 Felipe Tanus, Boris Schaeling
// Copyright (c) 2011, 2012 Jeff Flinn, Boris Schaeling
// Copyright (c) 2016 Klemens D. Morgenstern
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_PROCESS_POSIX_PIPE_OUT_HPP
#define BOOST_PROCESS_POSIX_PIPE_OUT_HPP

#include <boost/process/detail/posix/handler.hpp>
#include <boost/process/detail/posix/file_descriptor.hpp>
#include <boost/process/detail/used_handles.hpp>
#include <unistd.h>
#include <array>

namespace boost { namespace process { namespace detail { namespace posix {

template<int p1, int p2>
struct null_out : handler_base_ext, ::boost::process::detail::uses_handles
{
    file_descriptor sink{"/dev/null", file_descriptor::write};
    
    template <typename Executor>
    void on_exec_setup(Executor &e) const;

    std::array<int, 3> get_used_handles()
    {
        const auto pp1 = p1 != -1 ? p1 : p2;
        const auto pp2 = p2 != -1 ? p2 : p1;

        return {sink.handle(), pp1, pp2};
    }
};

template<>
template<typename Executor>
void null_out<1,-1>::on_exec_setup(Executor &e) const
{
    if (::dup2(sink.handle(), STDOUT_FILENO) == -1)
         e.set_error(::boost::process::detail::get_last_error(), "dup2() failed");
}

template<>
template<typename Executor>
void null_out<2,-1>::on_exec_setup(Executor &e) const
{
    if (::dup2(sink.handle(), STDERR_FILENO) == -1)
         e.set_error(::boost::process::detail::get_last_error(), "dup2() failed");
}

template<>
template<typename Executor>
void null_out<1,2>::on_exec_setup(Executor &e) const
{
    if (::dup2(sink.handle(), STDOUT_FILENO) == -1)
         e.set_error(::boost::process::detail::get_last_error(), "dup2() failed");

    if (::dup2(sink.handle(), STDERR_FILENO) == -1)
         e.set_error(::boost::process::detail::get_last_error(), "dup2() failed");
}

}}}}

#endif

/* null_out.hpp
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
*/