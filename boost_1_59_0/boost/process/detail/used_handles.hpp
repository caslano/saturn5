// Copyright (c) 2016 Klemens D. Morgenstern
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_PROCESS_DETAIL_USED_HANDLES_HPP_
#define BOOST_PROCESS_DETAIL_USED_HANDLES_HPP_

#include <type_traits>
#include <boost/fusion/include/filter_if.hpp>
#include <boost/fusion/include/for_each.hpp>

#if defined(BOOST_POSIX_API)
#include <boost/process/detail/posix/handles.hpp>
#include <boost/process/detail/posix/asio_fwd.hpp>
#else
#include <boost/process/detail/windows/handles.hpp>
#include <boost/process/detail/windows/asio_fwd.hpp>
#endif

namespace boost { namespace process { namespace detail {

struct uses_handles
{
    //If you get an error here, you must add a `get_handles` function that returns a range or a single handle value
    void get_used_handles() const;
};

template<typename T>
struct does_use_handle: std::is_base_of<uses_handles, T> {};

template<typename T>
struct does_use_handle<T&> : std::is_base_of<uses_handles, T> {};

template<typename T>
struct does_use_handle<const T&> : std::is_base_of<uses_handles, T> {};

template<typename Char, typename Sequence>
class executor;

template<typename Func>
struct foreach_handle_invocator
{
    Func & func;
    foreach_handle_invocator(Func & func) : func(func) {}


    template<typename Range>
    void invoke(const Range & range) const
    {
        for (auto handle_ : range)
            func(handle_);

    }
    void invoke(::boost::process::detail::api::native_handle_type handle) const {func(handle);};

    template<typename T>
    void operator()(T & val) const {invoke(val.get_used_handles());}
};

template<typename Executor, typename Function>
void foreach_used_handle(Executor &exec, Function &&func)
{
    boost::fusion::for_each(boost::fusion::filter_if<does_use_handle<boost::mpl::_>>(exec.seq),
                            foreach_handle_invocator<Function>(func));
}

template<typename Executor>
std::vector<::boost::process::detail::api::native_handle_type>
        get_used_handles(Executor &exec)
{
    std::vector<::boost::process::detail::api::native_handle_type> res;
    foreach_used_handle(exec, [&](::boost::process::detail::api::native_handle_type handle){res.push_back(handle);});
    return res;
}



}}}

#endif /* BOOST_PROCESS_DETAIL_USED_HANDLES_HPP_ */

/* used_handles.hpp
F8vhj1xVpQfhvWDwqnx0Sb2ZjTiibmNLd/S3S9zPjQsTm2QQS8tBf9KTcitwOvzHcSOxzL7u45xWJJGWNJh8W9rSdbL8LL6xbWUabDZpxS9pPupnHt8WoEPIkju2gdZf69hl0qYBex8G68avExq6WRdurSmAayYA1D6DE9qsKk17qNeJ43e4vxZxsaJfjqF0o3M84ZfYwbVEojt8Q5mCOSRClaF83HAF0xV3MuGHctvb1HgOI4xNXjIi0V7+X1nBqX78WuQZ0XGd7nRxKEWe9f3SYgfhAfdsUWbQaR4hKZ5LOESlcLTOt3QzWweQklxX9RrcoFmnTyBTWnxYvAcXJyDJpHZ/AtKLWnqarK5hbX1ZKNCF47aqGYF1GpLx5w7O8uzwUUAvzMrU5SUC4IfhkRBZtRqgkpqHMNVoBOhS9/6Onm2K7+XoWM4zhA4MLrFDnOgeLEMXRuAmaZOmdHsmdnl/afz0lfwQwa0JbagZnaGvzn8MnmMiZ4/zUJA6Gd5o7N+enKI2eC5FsG30g0dSQVDhESocF6jFlxGWS8JIFukvnDg5ArrB2d6R9VqCzREJJgON2gi7Zf7jFhHdAM8ML5ok9Pm0e/5KCtVUkGXr9Nlnxz5m9lfBDPTK+Zt5sDqtxfY4HeQajjecloA5NPJ5pBUxxmby1012TUtgd/kqtlKdxbCiNHsaJGRbH5igWeUHn4T31didGLFUA61B8Ox8+dEPuLHbYiV3a+3Dd6Clvc5xELJ+5loIJUM5mIFjUEj2L1UiYxrR53SSzlKY4ErvXlW3qgBmWSXqMR3UYJGkPhbUra3BnvAhq/m4zTvluDBlYsGea/khe2JjYYMOmnqycyk/YK2JZuA3JUTHV8ihpkR5u5GdIKsWtXghzZXTI7+UhALoXIYjgBgKX34bsHB9oitZoRZc3h501jKEuArjAIgQl59Ntl4DA/ORTGRBDDaRzVL+4tMkw0r8uJnHGn7xpWRfFPN1zSPjF4ZrGzQGI6mWEZvUCg+RzVYvTaJLcyZ6hpEFHiIF3n2LMuFilLvn0Sgq+cJFaXy8+sbB0Xt7TLqtxPzxyneXqMIc7rdCghEAef0JlCp9LS8q/XrVtp1rwucjD/oIyuctZjJRK+/yyJ6FR0SffBNRBoNc2UfCGTXsNVL+ViuQT2WrsDiWAkDPTci7TrLzqsSc29KLZl8hZ89gCJ42MD3j7rFMJpBo6hE4dVsR/xWTNVSrhidQPlnoZ3SfSSfMD3hutwjJFXyJJvFDULAmXqbusC7k87feyS3a3MsnXW9pNfGtHrorkUR3XLNUDG3GMkjkiGEy7hUNI2dU6LiHpUC8ZiUf7HS+sylrwvnBSMug5PuWg8vRMD+v5G0ai9JCaJ0tGaDHOls86PtqNTR+9/VVvIDiPKdVPZihzfOYZG2COURBRQw1GkMdTdMTaPImSLMgG5StkMJJvm/YYeaP132U7HNckqQYZ9h6ZZ6gHBZ+prsr0A1irwtsHnxqwCPDbJQXGwPzP73tzi/rbATj7bNPC5ZLfAYkWLL1bQv07neC7dwwG4Ozm382esMMuLQEm3xbrM1giyxVmH/XDOpBE+XHjseXfcrRX/DWN+k4+eNTNcyCn4m8A+8goyqIOrjfm2cpnk32f4rj+57bqL5zdyUFJ1OPAKNTSlXvKzLhniZ7PSrewFGHikyDAxZ4fbbBGIyMf2TDBzwXuHqjqda9EOjwhVZhkngpJF6ayN9k7nuz4Dk7QtnuoV75Rm62u0K0OmG2NiqnXEwXv3CPXHs7Sagrdm7TUCuaUYOVzJBkNIsGEVebP25sFaBhdLjNQ3DVQnrFxcCF0K1aAg1mh01Y42WjvU77v/UscdlgIBcbCynmV+ONysiMbRdFd11A+1vz+NgRk7jMdoWJO4nOhsNSCiRyhLkeYDXlDvoG3YR8n8X56Vi2pByu1xzR9Ds79Ah02CxZ4CbIeqv4Rr9aesxm1mzWJLz+DL96s0JEfYqIKbKD4RHu0QjET6Tmby4pSZCaoPLA4ZFjCNrgHF085Kwb/7cM0JwW5cfPwPiTGCQiq0EemkWu0X9kCKgNqrv54blcNaGEzRllERQEdpNa1bJ6cI9ztwQ1y7fXKa/WBuiMN31q+hS4LWMHWVbpsimHswbm0pxWJ/j2sy8oxsH5bSB/Na05wVnmEvmynyKs5Kv9GQe9OHneJ9wtwRfbL3d5pYxbo7QE8WJh6sF/kwjoitLzBA23XOFlbhLtk7i6K4M38Rxag9yeCb8Al7+0JgUIQ5PvVWWRTGXYpikt1bxwlVRn6ZJFYk0bfjpCPdG4P1XrcVzjE+gMPrpPBrCxMshRMu1RqQQ2ngXKq4xN00sdfQ8bx3QgIxRmvBG+sdsbFDConwR5BK3Svwag8l2kU5ObQOnr9QushH7rviMVfqVHp6Qqai4FKzkp1xOLDlyez9fISPwqxw0PFHxd3Y9BOnJXTVQoAiDNmmN3GJXSoAsiU7xm4SNAOlxre0AMV1DRGUNBwIkDzNEulHmO1tTGuiIvFP9QXnnTtWqFsN2OxDA9JXKATOGWtRXxZWrFwWHhzJNuxk18vnmZHRb3D9upnSOEQkH4HfZX+21WxlBRIJqPa6XvBnMrHtm/+pCTIQAiRe5XRoECaE4d1WQgg3Zeb0SSu9j9utNHwcwsBphhW5QbyEDq2tAcYUsDlcRdDJqBA9GboLUi3PCZHgT8ROq+Nu/i0EpXx0Y/CkEbBFOiN6YlHbbki3Q/l4Xxqpjzh48Tj2Bj3xmQB+vJmiGCNlfqH66ItRB0DoyNBLM8JEnCEBXVxgwL5gyLyRJ3epQUf758xVDgesHxGv+ArtQFZOIqyILy2b5zRcphHHWHzeOsBLQciM6kQTBBv/V0NordxQsn+utaT7VnGVtSPJQFVOrhHJ90FwQWGkwl0UCISgRIf9GhwaYl+ezcF5AMnmzFGrcund/jS8Gz4/JnF0QVbb1+hjT2x2jkgXSReAJrDJYee2/0YLHdyFZi4f5iJthvFQrQFGIyhxjgSJxYvnofz0jg/WKuftc33h6IEhIo8ueuGNg/pPvn/CTt7hBswLSjtPkLxbi+RlqaY4+GExNlQwHdtpNw+cbfQAfkw8Pff7WDclu+pOyneCfCEgp7Upma9gfDEfQ3rV09CTVOkVSunonEurDKsIsZDOWbTT/eiJKPUSGgDGOyqpxEijtF55yFsDweubJqNRS2y14nRkY8UhJv6CKS8FxUUa7iP3KfyKOfZaVNqtz8slu3saV4buiDNmmSYopjL3MRyuyUlI5TBjqQtP4/wHvzodshrt9ZwvCyFMojci3u7ZoBJBks1frwil4yXpDzr/yM/x0iqHZLZoIcB5lMe/dsQek4RqTMwdR8/brbJRyeO25p7OEAVJ3cqxh7r550i4k+CSD+9ibn4qhb13H0POezYyhJc3vTdMH+/ufme3x6x9wfDdoW5mdPygfJtiXQDBApBCWQ4HH3114qX5dEF/m3FRGsuygPlNh3UG+U4BjjknesjUUmj/ZO/XLhv4LqgTOnhBBsXkd4l7xmZQRUviwRzwTZXxQ5aVvfYSy41MxsNJH0OM/oJGcDTXEtInwkLnzy8+Odqp/fI+TSzIHM7NXslk7mFfBdDPQCTuE7EebOKTgM6ZDS3jGNa4HcJY/YzWyGImw2UeRIhVMXeJkDps/6a1W+ocyVhV03eqGYdo21vfKxYTqGkUI8+j52gULbNj5uPouZ2KoBvpc2OzuGsJqN105zMdtPXhNvS0+jZZQf+49lh+hES6KhG/zPS6G88bx3NjucDKVplvw7bE//3W8NCvKM1IakDhCBCQZGa6FhqfyolGEqi77mHzzbU1ZkDvfIsypz/Vc5vCo/fdfw9bzixhaSEFzaf1Neu2bsY0eE6Zne3LYzKZXf9qm417Wmo2iJr3puc6wDctvHrGiG6wZWwprAxTn2egAvAJHDGtbAoPOY6ZXFy63T/6wg5jDUbITd6UrOLYfWYDVKnoY5akNR3LphJ6UASATYOhpiKzz33w476T3T1csbfwCiOyVrUvChr5bh+b9Pm/B8+KiKw5Y1DIqXTUOhZvUeXuc5HHSBUYDYoTszDTumxG77gfWKKIewqP7qn7PtPWQYBSxAimW2oTzqqcg4DWIYP/YQLfd8Ae/Pu2W1+wo/CdkqaYIFompO6HhbLLDNXsPe1li/Iz4mRvLI1bGYEeeHAbas1nQR2SDfjWWifHd0mM4N9DJjOFRqpfpdt2gWGZup7XD0c+Pq/MfQ5qNCRYvLanw49G1XQN21JTAkO/Qo9cvuqbDvRzdyUrY+SSrmriBLltWURWSy9Gc6YeBawpMi3codN81Ua+HslSREXwAdIN5Ac0zYgRK/Q7aO0s2VATij4deDQLw0iOs3A8VjXibebFzE5WuYGn+ueCS735FiuzkbSfDYSklsl9+x9fOkskPUiY36a33On7aQOpk6wyYabqMo7SfBKB00kWR7Al9TTejDjvrPtp5t3oc3oHNitu4X26bQkmBJMqfzkthwwz0gmTL2R7chdaofwR/3HoQYFfesz5D9pLvDeIt9UhpniZ7jcboORaZChW5hkvk8SbbTvApiT0EXfqDtrT5FCFkvl1bWn4dBVfc0tFg/iHsMluTDgSqo21QmORH6Mih01qpMHvUPnQTb2lgqzVa0eaYj+f3Fdq7sA2NhEUCqd8FWcejJd/soF3SMPsHX9q/canyiLjArXYc4j6cAWzh7Xbfb45BqE7SO+CYPJPBfJuTbiKO2xROb8yUhP+PeMPsfwqbczmH/gj4gCxH/0U80kJzpLjVLwCy60OD0cIWaKDiz6EG/QwP1jDgUCsgYf6I7uHzi8irPq7akXzuxEaBusb3RruYjwdgRbZtFrCNBRaZGXsaVuy2Wh3ZLb9mtK8H2QoFFRM3xx9HgvkMQVVD82UHphh/Npe2TODb4Df85u29GKk9TwPVd3JRz1I61VNBsOKcqCxSkc+SaEJM3St/mEhCHqf3TK9gI4Qr1fj49EwzMQV8DjCbZaPK3D7TwUaZ9+PESY5M2XPXQBRU3q3QE038U5u1lfYGSvX6XLSx8+mIOnxa9ubsjScBMdxdQC+JfxJACXzm2kVyiEaO6OtnyBWws7xLxYa7bbB1BvkPEbg7qv9/h1ZxjJlnNDXn/SdCRSUYcBdFa/AsYULaQU4JTJXrWc2OS+DICmSiBEB0gMXW44Nd0adAm447GZkvr3NWt/NeY1NvOPN8AABvz30ZYVsjpf+TrNnq5vflPAfrWdh2+wPv8dSDGRGsVszrTEiRG++htAgNF7jF9CGav/8QW9lC/5U0Jv2TY3gs6xI9Oj2BkfXid+g1ScS1XgizsSZ9KpVw2oFjEVyFSPiTeMDsG1tjCeAN8uTcSZuUuR4a7R4bfc4mO5fKAF1xCsDQAPWrFNYFuBzG0cao1CShJVej8JyhXxvUhO0ADmqyIOpNUiV/OWvwsJUgLe2lcZxnyWYVYXFUGf3TpPqWyt5GXd0HWdrdkOq7jiSS2XZCxq0yxdd1RvjvCSQhv3hZGi1tENqxx0+x7sEtAmnzZvIYIULpbfqtNruHomiaPBLkwQqFoJAWobapAGJksUkWyF51vRGS0ChxlY2n2UQNV6qdlMK71s7bBLWLXEdOfpgsITjqR+TRLv7swUi9qIbUZq3O56sJWWp39BwxC9vvzfd69LfiP937owJopRMW69J7MaBN/pr6jt0ZK9cKOWF9+WQeFb3RLuyqkhuJQusWXCJeACmGIGI1ABEWKFGLQXHnSQyKJ2EP9rDms75BCe+QYgxsPYnyWxiImIRyKbc6Lq6QNrYqHpYd47gWR1Vr9uas0lCV6gOb759ccHuilUmgUWRRZ++Meqo6jS8LsH9/JqoNELnO1QZD3pd4qg3ur3fGeqXYTz0HJFLX+kXQ2emdlRhdx6n+T4kkeeJ6vBu4mRr1ij1xCdqgXry3TXavfpvnlY/PlC5Q122PVyJW5bVRmvWOZESODGtEANKsmYcNfqIq47/lvyxKzMyHawoyQgixVGzxLOV+gnRF1NMXCdTZNFu5yBx92mTLmIEkvRYo/kGWxgQmTRoLI5sf7xfZTMjW/pGDaZqdh1cg2ZhTLVsLFka1BOpnT3S7dPI9kFDmXhdmgF5K9WNZWRbCw2BCtJ07EK+WyYkcY3i3yTUEjyM8sUFwRSFXqKqUTxq6SRqGyfK1UoQx6lmVVo5wrrGIOkjIdnPaeKnGU5qmAFXhTJCXgBjOmME59/IDjWHZwVxlG6o/UBlFmLBgvNvF00LY0AAMs/NPdGjGBG+IOW/zSK21jmMMZ7DK7HksTHduzhaLRif+Ec1NPASwbhoQkX7lb0pTyx33vEARkfXzhrHYlKQrpIXxSJIWtd65t0u2UAfksMJA+sX9sY9ANTuN6yqPURfUYJr+E+4grDSzhX6V5xKw4K5291rLD+gRSrvhuY7hCX+FtFmaBbegECWYOCPndI+B++O1Io/7XaVYHsjeS538Xhb/Oz34jIlJLy+LsDGky8gJtFjahOfpltXbslEs3HBxx4elDW3nYal4o+hMQzVlAj3EAhZSI64G+rhvtpdnabX1lW9bxcKuDHWLKLTVy/D4/chxBO3Is2jp28V8gugYIK+0qk4y58eFD9a6I9VDtV7b10Lq0aAk2IaOjjZuQE33AtdP8IMIwP+yds0eIYZ64N8aH6GZPvsiu5493ZPun06bxhMzo5lImFsAswD/AP0B/gP+A/AH9A/YH/A/EH8g/UH+g/8D8gf0D9wf+D8IfxD9If5D/oPxB/YP2B/0Pxh/MP1h/sP/g/MH9g/cH/w/BH8I/RH+I/5D8If1D9of8D8Ufyj9Uf6j/0Pyh/UP3h/4Pwx/GP0x/mP+w/GH9w/aH/Q/HH84/XH+4//D84f3D94f/j8AfwT9Cf4T/iPwR/SP2R/yPxB/JP1J/pP/I/JH9I/dH/o/CH8U/Sn+U/6j8Uf2j9kf9j8YfzT9af7T/6PzR/aP3R/+PwR/DP0Z/jP+Y/DH9Y/bH/I/FH8s/Vn+s/9j8sf1j98f+j8Mfxz9Of5z/uPxx/eP2x/2Pxx/PP15/vP/4/PH94/fH/w98pVsVlR8CB2uU6BRHRuQ+TN+s5extU1rWu55n7QCqTRGqimIk6/26R867Y3itYPRG9RJqDpd+TpOYcwo4tb8Dho5xjC0DRmlT+mvrRcd1uqiubOzWUkXksTg2fUPUyrxJUhXi0HOk+3H3Fw4MdthTK0rbgx3dnQO8hj4Cb/IvzQZaZ5Zqhw3WzB3dULh7vQydyfOpA1JrQFOTHQxZGnc1MB5nYu/Pu/ZtN9Fu6EROOi8ii/QsSrRwbOApLtY7ge9R7BeTbxReONZXO5UDcqOQW5Tw4B5Ta2yUf+zpR2zTXqiRMbYv8XA2Z+UlPiZvLk6xIM6QQJoxvkvk9Jo/MKeqUh5QxCFb+EoEWCE2WVH4JeVgql/Z5K/jBv+ufrkArJmWBzBoFMJLaKIr2uU5mkrs1r7b/WGhfTnt7nz56c2R8n/0MAuc3I+RsOkL/xoTZrR9Uq4QgAhvC5TejJCU1uVBei/oiqb8K6pRbjM7Wnq6JjDBQ6I3NuEeMN+eo4UVEW3NVnpOQBzB739GSExJNdPq
*/