/*
 * async_handler.hpp
 *
 *  Created on: 12.06.2016
 *      Author: Klemens
 */

#ifndef BOOST_PROCESS_DETAIL_ASYNC_HANDLER_HPP_
#define BOOST_PROCESS_DETAIL_ASYNC_HANDLER_HPP_

#include <type_traits>

#if defined(BOOST_POSIX_API)
#include <boost/process/posix.hpp>
#include <boost/process/detail/posix/async_handler.hpp>
#include <boost/process/detail/posix/asio_fwd.hpp>
#else
#include <boost/process/detail/windows/async_handler.hpp>
#include <boost/process/detail/windows/asio_fwd.hpp>
#endif

namespace boost {

namespace process {

namespace detail {

#if defined(BOOST_POSIX_API)
using ::boost::process::detail::posix::is_async_handler;
using ::boost::process::detail::posix::does_require_io_context;
#else
using ::boost::process::detail::windows::is_async_handler;
using ::boost::process::detail::windows::does_require_io_context;
#endif

template<typename ...Args>
struct has_io_context;

template<typename T, typename ...Args>
struct has_io_context<T, Args...>
{
    typedef typename has_io_context<Args...>::type next;
    typedef typename std::is_same<
                typename std::remove_reference<T>::type,
                boost::asio::io_context>::type is_ios;
    typedef typename std::conditional<is_ios::value,
            std::true_type,
            next>::type type;
};

template<typename T>
struct has_io_context<T>
{
    typedef typename std::is_same<
            typename std::remove_reference<T>::type,
            boost::asio::io_context>::type type;
};

template<typename ...Args>
using has_io_context_t = typename has_io_context<Args...>::type;

template<typename ...Args>
struct has_async_handler;

template<typename T, typename ...Args>
struct has_async_handler<T, Args...>
{
    typedef typename has_async_handler<Args...>::type next;
    typedef typename is_async_handler<T>::type is_ios;
    typedef typename std::conditional<is_ios::value,
            std::true_type,
            next>::type type;
};

template<typename T>
struct has_async_handler<T>
{
    typedef typename is_async_handler<T>::type type;
};

template<typename ...Args>
struct needs_io_context;

template<typename T, typename ...Args>
struct needs_io_context<T, Args...>
{
    typedef typename needs_io_context<Args...>::type next;
    typedef typename does_require_io_context<T>::type is_ios;
    typedef typename std::conditional<is_ios::value,
            std::true_type,
            next>::type type;
};

template<typename T>
struct needs_io_context<T>
{
    typedef typename does_require_io_context<T>::type type;
};

template<typename ...Args>
boost::asio::io_context &get_io_context_var(boost::asio::io_context & f, Args&...)
{
    return f;
}

template<typename First, typename ...Args>
boost::asio::io_context &get_io_context_var(First&, Args&...args)
{
    return get_io_context_var(args...);
}

}
}
}


#endif /* BOOST_PROCESS_DETAIL_ASYNC_HANDLER_HPP_ */

/* async_handler.hpp
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
*/