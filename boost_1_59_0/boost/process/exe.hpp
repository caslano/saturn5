// Copyright (c) 2006, 2007 Julio M. Merino Vidal
// Copyright (c) 2008 Ilya Sokolov, Boris Schaeling
// Copyright (c) 2009 Boris Schaeling
// Copyright (c) 2010 Felipe Tanus, Boris Schaeling
// Copyright (c) 2011, 2012 Jeff Flinn, Boris Schaeling
// Copyright (c) 2016 Klemens D. Morgenstern
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_PROCESS_EXE_HPP
#define BOOST_PROCESS_EXE_HPP

#include <boost/process/detail/basic_cmd.hpp>

/** \file boost/process/exe.hpp
 *
 *    Header which provides the exe property.
\xmlonly
<programlisting>
namespace boost {
  namespace process {
    <emphasis>unspecified</emphasis> <globalname alt="boost::process::exe">exe</globalname>;
  }
}
</programlisting>
\endxmlonly
 */
namespace boost {
namespace filesystem { class path; }

namespace process {

namespace detail {

struct exe_
{
    template<typename = void>
    inline exe_setter_<typename boost::filesystem::path::value_type> operator()(const boost::filesystem::path & pth) const
    {
        return exe_setter_<typename boost::filesystem::path::value_type>(pth.native());
    }

    template<typename = void>
    inline exe_setter_<typename boost::filesystem::path::value_type> operator=(const boost::filesystem::path & pth) const
    {
        return exe_setter_<typename boost::filesystem::path::value_type>(pth.native());
    }


    template<typename Char>
    inline exe_setter_<Char> operator()(const Char *s) const
    {
        return exe_setter_<Char>(s);
    }
    template<typename Char>
    inline exe_setter_<Char> operator= (const Char *s) const
    {
        return exe_setter_<Char>(s);
    }

    template<typename Char>
    inline exe_setter_<Char> operator()(const std::basic_string<Char> &s) const
    {
        return exe_setter_<Char>(s);
    }
    template<typename Char>
    inline exe_setter_<Char> operator= (const std::basic_string<Char> &s) const
    {
        return exe_setter_<Char>(s);
    }
};

}

/** The exe property allows to explicitly set the executable.

The overload form applies when to the first, when several strings are passed to a launching
function.

The following expressions are valid, with `value` being either a C-String or
a `std::basic_string` with `char` or `wchar_t` or a `boost::filesystem::path`.

\code{.cpp}
exe="value";
exe(value);
\endcode

The property can only be used for assignments.


 */
constexpr boost::process::detail::exe_ exe{};

}}

#endif

/* exe.hpp
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
*/