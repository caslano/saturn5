// Copyright (c) 2016 Klemens D. Morgenstern
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
#ifndef BOOST_PROCESS_POSIX_HPP_
#define BOOST_PROCESS_POSIX_HPP_

#include <boost/process/detail/posix/fd.hpp>
#include <boost/process/detail/posix/handler.hpp>
#include <boost/process/detail/posix/use_vfork.hpp>
#include <boost/process/detail/posix/signal.hpp>


/** \file boost/process/posix.hpp
 *
 *    Header which provides the posix extensions.
\xmlonly
<programlisting>
namespace boost {
  namespace process {
    namespace posix {
      <emphasis>unspecified</emphasis> <globalname alt="boost::process::posix::fd">fd</globalname>;
      <emphasis>unspecified</emphasis> <globalname alt="boost::process::posix::sig">sig</globalname>;
      <emphasis>unspecified</emphasis> <globalname alt="boost::process::posix::use_vfork">use_vfork</globalname>;
    }
  }
}
</programlisting>
 *  \endxmlonly
 *   \warning Only available on posix. See the documentation of [fork](http://pubs.opengroup.org/onlinepubs/009695399/functions/fork.html),
 *   [execve](http://pubs.opengroup.org/onlinepubs/009695399/functions/execve.html) and
 *   [vfork](http://pubs.opengroup.org/onlinepubs/009695399/functions/vfork.html).
 *
 */

namespace boost { namespace process {

///Namespace containing the posix exensions.
namespace posix {

/** This property lets you modify file-descriptors other than the standard ones (0,1,2).
 *
 * It provides the functions `bind`, which implements [dup2](http://pubs.opengroup.org/onlinepubs/9699919799/functions/dup.html)
 * and [close](http://pubs.opengroup.org/onlinepubs/9699919799/functions/close.html).
 *
 * Close can also be called with a range of file-descriptors to be closed.
 *
 */
constexpr ::boost::process::detail::posix::fd_ fd;

/** This property lets you modify the handling of `SIGCHLD` for this call. It will be reset afterwards.

It can be set to default, by the expression `sig.dfl()`, set to ignore with `sig.ign()` or
assigned a custom handler. A custom handler must have the type `sighandler_t`and can be assigned with the following syntax:

\code{.cpp}
sig = handler;
sig(handler);
\endcode

\warning @ref spawn will automatically use `sig.ign()`, which will override if you pass a custom handler.
 */
constexpr ::boost::process::detail::posix::sig_       sig;
/** This property will replace the usage of [fork](http://pubs.opengroup.org/onlinepubs/9699919799/functions/fork.html) by [vfork](http://pubs.opengroup.org/onlinepubs/009695399/functions/vfork.html).
 \note `vfork` is no longer an official part of the posix standard.

 */
constexpr ::boost::process::detail::posix::use_vfork_ use_vfork;


using ::boost::process::detail::posix::sighandler_t;

}}}

#endif /* BOOST_PROCESS_POSIX_HPP_ */

/* posix.hpp
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
*/