// Copyright (c) 2006, 2007 Julio M. Merino Vidal
// Copyright (c) 2008 Ilya Sokolov, Boris Schaeling
// Copyright (c) 2009 Boris Schaeling
// Copyright (c) 2010 Felipe Tanus, Boris Schaeling
// Copyright (c) 2011, 2012 Jeff Flinn, Boris Schaeling
// Copyright (c) 2016 Klemens D. Morgenstern
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

/**
 * \file boost/process/spawn.hpp
 *
 * Defines the spawn function.
 */

#ifndef BOOST_PROCESS_SPAWN_HPP
#define BOOST_PROCESS_SPAWN_HPP

#include <boost/process/detail/config.hpp>
#include <boost/process/detail/child_decl.hpp>
#include <boost/process/detail/execute_impl.hpp>
#include <boost/process/detail/async_handler.hpp>

#if defined(BOOST_POSIX_API)
#include <boost/process/posix.hpp>
#endif

namespace boost {

namespace process {

namespace detail {

}

/** Launch a process and detach it. Returns no handle.

This function starts a process and immediately detaches it. It thereby prevents the system from creating a zombie process,
but will also cause the system to be unable to wait for the child to exit.

\note This will set `SIGCHLD` to `SIGIGN` on posix.

\warning This function does not allow asynchronous operations, since it cannot wait for the end of the process.
It will fail to compile if a reference to `boost::asio::io_context` is passed.

 */
template<typename ...Args>
inline void spawn(Args && ...args)
{
    typedef typename ::boost::process::detail::has_async_handler<Args...>::type
            has_async;


    static_assert(
            !has_async::value,
            "Spawn cannot wait for exit, so async properties cannot be used");

    auto c = ::boost::process::detail::execute_impl(
#if defined(BOOST_POSIX_API)
            ::boost::process::posix::sig.ign(),
#endif
             std::forward<Args>(args)...);
    c.detach();
}

}}
#endif


/* spawn.hpp
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
*/