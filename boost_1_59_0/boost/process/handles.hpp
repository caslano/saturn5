// Copyright (c) 2019 Klemens D. Morgenstern
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_PROCESS_HANDLES_HPP_
#define BOOST_PROCESS_HANDLES_HPP_

/**
 * \file boost/process/handles.hpp
 *
 * Defines functions to obtain handles of the current process and limit the amount for inherited ones.
 */

#include <boost/process/detail/config.hpp>

#if defined(BOOST_POSIX_API)
#include <boost/process/detail/posix/handles.hpp>
#elif defined(BOOST_WINDOWS_API)
#include <boost/process/detail/windows/handles.hpp>
#endif

#include <boost/process/detail/used_handles.hpp>


namespace boost { namespace this_process
{

///The native type for handles
using native_handle_type = ::boost::process::detail::api::native_handle_type;

/**
 * Get a snapshot of all handles of the process (i.e. file descriptors on posix and handles on windows) of the current process.
 *
 * \note This function might not work on certain posix systems.
 *
 * \note On Windows version older than windows 8 this function will iterate all the system handles, meaning it might be quite slow.
 *
 * \warning This functionality is utterly prone to race conditions, since other threads might open or close handles.
 *
 * \return The list of all open handles of the current process
 */
inline std::vector<native_handle_type> get_handles()
{
    return ::boost::process::detail::api::get_handles();
}


/** \overload std::vector<native_handle_type> get_handles() */
inline std::vector<native_handle_type> get_handles(std::error_code &ec)
{
    return ::boost::process::detail::api::get_handles(ec);
}

/** Determines if a given handle is a a stream-handle, i.e. any handle that can be used with read and write functions.
 * Stream handles include pipes, regular files and sockets.
 *
 * \return Indicates if it's a stream handle.
 */
inline bool is_stream_handle(native_handle_type handle)
{
    return ::boost::process::detail::api::is_stream_handle(handle);
}


/** \overload bool is_stream_handle(native_handle_type handle) */
inline bool is_stream_handle(native_handle_type handle, std::error_code &ec)
{
    return ::boost::process::detail::api::is_stream_handle(handle, ec);
}

}
namespace process
{

namespace detail
{

using limit_handles_ = ::boost::process::detail::api::limit_handles_;


}

/**
 * The limit_handles property sets all properties to be inherited only expcitly. It closes all unused file-descriptors on posix after the fork and
 * removes the inherit flags on windows.
 *
 * \note This is executed after the fork on posix.
 *
 * \code{.cpp}
 * system("gcc", limit_handles);
 * \endcode
 *
 * Since limit also closes the standard handles unless they are explicitly redirected they can be ignored by `limit_handles` in the following way.
 *
 * \code{.cpp}
 * system("gcc", limit_handles.allowStd())
 * \endcode
 *
*/
const static ::boost::process::detail::api::limit_handles_ limit_handles;


}
}

#endif //BOOST_PROCESS_HANDLES_HPP_

/* handles.hpp
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
*/