/*=============================================================================
    Copyright (c) 2001-2011 Joel de Guzman

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
==============================================================================*/
#ifndef BOOST_PP_IS_ITERATING
#if !defined(FUSION_TUPLE_EXPAND_10032005_0815)
#define FUSION_TUPLE_EXPAND_10032005_0815

#include <boost/preprocessor/iterate.hpp>
#include <boost/preprocessor/repetition/enum_params.hpp>
#include <boost/preprocessor/repetition/enum_binary_params.hpp>

#define BOOST_PP_FILENAME_1 \
    <boost/fusion/tuple/detail/tuple_expand.hpp>
#define BOOST_PP_ITERATION_LIMITS (1, FUSION_MAX_VECTOR_SIZE)
#include BOOST_PP_ITERATE()

#endif
#else // defined(BOOST_PP_IS_ITERATING)
///////////////////////////////////////////////////////////////////////////////
//
//  Preprocessor vertical repetition code
//
///////////////////////////////////////////////////////////////////////////////

#define N BOOST_PP_ITERATION()

    BOOST_FUSION_GPU_ENABLED
#if N == 1
    explicit
#endif
    tuple(BOOST_PP_ENUM_BINARY_PARAMS(
        N, typename detail::call_param<T, >::type arg))
        : base_type(BOOST_PP_ENUM_PARAMS(N, arg)) {}

    template <BOOST_PP_ENUM_PARAMS(N, typename U)>
    BOOST_FUSION_GPU_ENABLED
    tuple(tuple<BOOST_PP_ENUM_PARAMS(N, U)> const& rhs)
        : base_type(rhs) {}

    template <BOOST_PP_ENUM_PARAMS(N, typename U)>
    BOOST_FUSION_GPU_ENABLED
    tuple& operator=(tuple<BOOST_PP_ENUM_PARAMS(N, U)> const& rhs)
    {
        base_type::operator=(rhs);
        return *this;
    }

#undef N
#endif // defined(BOOST_PP_IS_ITERATING)


/* tuple_expand.hpp
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
*/