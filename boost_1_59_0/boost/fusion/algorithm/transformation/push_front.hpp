/*=============================================================================
    Copyright (c) 2001-2011 Joel de Guzman

    Distributed under the Boost Software License, Version 1.0. (See accompanying 
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
==============================================================================*/
#if !defined(FUSION_PUSH_FRONT_07162005_0749)
#define FUSION_PUSH_FRONT_07162005_0749

#include <boost/fusion/support/config.hpp>
#include <boost/fusion/support/detail/as_fusion_element.hpp>
#include <boost/fusion/view/joint_view/joint_view.hpp>
#include <boost/fusion/view/single_view/single_view.hpp>
#include <boost/fusion/support/is_sequence.hpp>
#include <boost/utility/enable_if.hpp>

namespace boost { namespace fusion
{
    namespace result_of
    {
        template <typename Sequence, typename T>
        struct push_front
        {
            typedef fusion::single_view<typename detail::as_fusion_element<T>::type> single_view;
            typedef joint_view<single_view const, Sequence> type;
        };
    }

    template <typename Sequence, typename T>
    BOOST_CXX14_CONSTEXPR BOOST_FUSION_GPU_ENABLED
    inline typename
        lazy_enable_if<
            traits::is_sequence<Sequence>
          , result_of::push_front<Sequence const, T>
        >::type
    push_front(Sequence const& seq, T const& x)
    {
        typedef typename result_of::push_front<Sequence const, T> push_front;
        typedef typename push_front::single_view single_view; 
        typedef typename push_front::type result; 
        single_view x_(x);
        return result(x_, seq);
    }
}}

#endif


/* push_front.hpp
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
*/