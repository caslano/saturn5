/*=============================================================================
    Copyright (c) 2011 Eric Niebler

    Distributed under the Boost Software License, Version 1.0. (See accompanying 
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
==============================================================================*/
#if !defined(BOOST_FUSION_SEGMENTED_FOR_EACH_HPP_INCLUDED)
#define BOOST_FUSION_SEGMENTED_FOR_EACH_HPP_INCLUDED

#include <boost/fusion/support/config.hpp>
#include <boost/mpl/bool.hpp>
#include <boost/fusion/support/void.hpp>
#include <boost/fusion/algorithm/iteration/for_each_fwd.hpp>
#include <boost/fusion/support/segmented_fold_until.hpp>

namespace boost { namespace fusion { namespace detail
{
    template <typename Fun>
    struct segmented_for_each_fun
    {
        BOOST_CONSTEXPR BOOST_FUSION_GPU_ENABLED
        explicit segmented_for_each_fun(Fun& f)
          : fun(f)
        {}

        Fun& fun;

        template <typename Sequence, typename State, typename Context>
        struct apply
        {
            typedef void_ type;
            typedef mpl::true_ continue_type;

            BOOST_CXX14_CONSTEXPR BOOST_FUSION_GPU_ENABLED
            static type call(Sequence& seq, State const&, Context const&, segmented_for_each_fun const& fun)
            {
                fusion::for_each(seq, fun.fun);
                return void_();
            }
        };
    };

    template <typename Sequence, typename F>
    BOOST_CXX14_CONSTEXPR BOOST_FUSION_GPU_ENABLED
    inline void
    for_each(Sequence& seq, F& f, mpl::true_) // segmented implementation
    {
        fusion::segmented_fold_until(seq, void_(), segmented_for_each_fun<F>(f));
    }
}}}

#endif

/* segmented_for_each.hpp
BZ13yunjkKuEmUATJKWFaJiI5IuJKH6zDFB/UgR1EkZX9G8QXtKO4CrGGSpgGCDHewf+OazjDhNOGPR6Ise+BbLpwT6GJbz+JxHQ6LZtsscDWPtJQYYb3ROW4qSgsNDt2ISH4n6Kvm1S4WZT4oaX5JtlfJAr6EBmUmhz7IIs9mUTkkb9z228aDsM3GR9vtUY8unsznkkWDmtf5IkGFa4oKRZQyf4C/kMZX7/0UhfSYdfHnbR2NjljuIxxTuogod/uVIgZbGuOpSfLOA/9YqofcR/+qxWkv529i39h0xPnZzqVZ1Za2D3UOjhBxAYnUAbyKrEqhaVCZVL9jv4kFmqg4tkJpcQkzzjxnBJxrXzEz5UKi8aVJ56VVesbVf8DVfOGuuXhsa2fQ1gwxM8w8ZwKca2SxM7yJSejCncbCovmVou/lSekSovh/UNrQbrIPUNuwcNUMbrZsvpeoL9dVQcxejaZJMX9qOw88afgk/foaXiL7xKoYeCsrH73SKFgETuzlCCdVOccKmiBGzd8hkT1LdeHSTdCDP/Cr4XbBVxQs+dsUsW6WLNuLRC8XSgeAVC8eQ7wRyLYHkVQh2xqOb3JS32BTm8ylB5qgZDUWjnPkzvOy9zhzvNdqAsN24wLDqRnjru80/D4w6Tugubgl/v2XoTJQluC5cIdpQxZaC8RQ+sIp5ohIvep/jQyOdi5cQloFUWYMkm/hOOnbX1I45s/u95L7J4wf3O9ZyOfbsv/JPmDQeGlyPbEJrlnAR+MY1CfhORATsqPt6vNXhGp+ZQ1bW7MlxjAmhBmOAwNul0MLJds2Y4W5WDRk+18lcDBJIelMRBad7r3fC54i6YXvoET3vic0yy3L4OM6F9hFph+v3kLQbnF5PbCdQfcapxCa3+YupgIUE56xxrGGkxijBxNE2e0oITonPMU7vBLKKcZGtATuXNR8ZdYmSJSIz356fgi6LLeqbCfN7VR13oYR8ZLJkMz6NpTU+V0P7Ro6wtEz/ygmbosG0JvO6gQAWAIGzFsZeh2AS5NWJh1w1447hXXCcoPRgSuLcksNQfwa+JbcfWbPkmLoKhvX6weXGP1N6nntVfzOBOn4vjYlO3aGtPQ6H8RhHTBThNw+frTBvnEeH5PyNLKiHik6RNnrpEINGWyhg8NsSAFpXP4V0CbaDYfd3TGKwzooEdp2QtDXKOUPtu1qiFFBAFthJoEebXJDTfvBSVc3yCqrtWEtW26y9scob1onYftSCT3AfTiy6+IJPU2nprEubv2yMJZ7tFtmwAjsN3e+4ZTA52IdpQMCmDWK42ljf0y2DHPua3V5BBq8cdunRP608+5OP757udOhFZqbK0yTbRN+0PGRaD05BPV2X7QPOeK7+m23rdbEt5feY3bokmLgAxG4nHVlFQuyaT9aCID+8aZXYsjd3W9W5lDVobsNX99XWZC6m4+n/vVNsfbRsWmyDR9HilpBQjMefRFjjGbrYZ8ZFzdCnrKjuOWiDdys2nafTYm53RsGmK6AA/iuIlrqY+qlL2mXEdv9bmg5A7A4v6t4niKKwUlqnRhnm0KwvtmIObh3admDpWMaZmiBSB2jKqpjdRp9bQ+yXCFwAud1XSIg8kXYMEDltCNykaMfNcg/o+5wblXZmwfREtVUIvBZyxlxDXc7mHjJOWydSQ4estrpzmzfl93+dFqHBDiHUlaLunzlZmIuC0rFiXX0ANRJ17yGnbptZqJKCrhIeiuhTlKqS7Fx+jhx6RGKxVT2QVUvbavoRf2toTh97l27kgqxLlOD85ihlnsuPqwYma1L2Eps2HzGCKtow7beyVSLVlCoBQom//9OVJ2pk9yNpwGfTylpqeODYoDt2/ZP81Zabj6hS0loOFvzwxMGy7gDfbgBVes9ZGxEhYvmYOqrXOpVr04jF81W4Zp3JsdLH+AnW55Q7Wc7lEfMgddYAZ9vPG2gUESZYlG1hhcMlaxkHlsjnpyu9gcVQ+mH50dHXKzx/TjuHtiJgcfaP0PgvcsV5JlHb953AS2Hs4ARcPXj8tXZ4cHVfP2TEkfykWnnJVLBtyCTc+e3Itx3L9Heg2yuveEBEM8U2sQB/ztQHh0mfsvFKMUwgKRpIEQCEpK9ussamBXbyPrS4ZSs+jObw1qPyFLJkFuIon75kV1diKwRU16j+PMBO/DKPIq8kpka/bx5TeD4tL8E7/8vJQqMdhEsad6oC1hz7o1s5LotNtbrg1UtnedaOmlrHrUgWZqRebFdQA46trJuufCcabz9MLdUHle7/G0SLj4NAAOSFJpWk9Z7KxEh3xLVFad5YBi/o5jq9PYFlP+boHBuPeE8MQrD+/Op/QCLQ4QP0vTuHm+NqT06l5+TUBsm3Cp6XAr9Lf2B6Adh3vcuhGNZKleWQYXYh32DX8q68Bzub2cekA+8yc8N7OEBlrIP9s8Kg+h6dquKmzDsOz+oGZrBGDs8jUvekBUzsHP3WtdEGovBpDrDfoi0TUUaYtJt8k0sulB+Sc1zAnrqmguMcStCU4Xq2AhdoX7qOQjdmujFrcneUwKjslTsNQtz92HGTNROoBhL8Lir7nUriMyDIKP3vLcjiYpF3NJTBJOOPEYxnonzGouRg6p/a+D7i9KfzreRQW7Y4ovCuYRZPJfSBCeV6/QfzaC+6Qj5OeHVffqUpZvLNvQstk16eZQxDIulpq+VZ3gjVwTnFvH8tyyqvx9aCfuIXHe7Vh8u+6wz1bfT96/4lp73S0nG3x+MDYmCHSeWEu8nVmBhOqTlizPSjKGTigYVOXaD0Hb85YvGuBm+Kies6Am5TPDLZlSx3JQ0a0fiifWn6cqeAhat7uTiOuTh2zF7/gK8EW0rA0vs5UYAHXY9vc4E1/iAtq5A+bDtEH9W2lWCl9Q4DMskPKA/9aUYIG1UahxaIh6pRiw4jMBFD7NAM5Rp8VhIKl4dtWyCx3ZNQEcBvGsNA7iNA8TNxIV5Zvmo/hETWTJzsJ9sUQ4awwS0gL7Ta50g6TKD1SlxcuXefhC3KTHXlftyv9BQcFrP67Nr40YSgAjY17LDEhEuwWfGY4Z52+28mpv6aavJuJpH0kix7yhs8aFf0l0TCly8u0hpHrqyNmbFVFj4I3nGzQ7obED67KSE9zk/exxePEsr7UTrf+POeyiw2B+HiSqq0vYVQvgLsGWwkdh0po0i3aU/u3XZsNGEeXb0ERswwYsm9ASSZQ949oG+oo82JvVDzesBD8YraXMYloLPo7Y1HUDy0mmvnHz9vO9tvOjg35sSXI6Us7HRmY+SwIgnEWSNukX2eoWl+caloc/9qzKmyeJBQv+x1akHRexX1fhjmdSN1MHlLojC49Ae8Ha1ucPzAAuTmwog3GN1Q0iCFwbaEvHx/nPlmR7tC0Vbj88R3uKEYRzv0PzqML/NIuUN8bthP+kbX63jW8calQu7VYCjxDb9TeS9v+O7nComGDnvRPa5xICZon2SXszG69Yej+s9yJl0empRvj3Q+IlaCWp7qC0cggwFf7A3tNYJiQfKerisucB2sUGg+BlS98eAgaPgfKT79K9e2A72arF9COpsn13vU/SRMQ/ABGsdzZJ/ECQu7CwWD7ogS8p++eOJbyEAAk3GdzJkhRe/iXKxLPbtKTQYloAAsdFZjpiZYSWYVoazfZe8So64M2zMpC35UQc7HFyTY40ax/GYr1BB9xp0FcHOQyAU2qbDmgsAi3iB+40Xr/Gug9rZI/gnKHZN0QfQYq35BGJtcsQH5AA0gJ3ZgD7w+0MUPUyjd2tQtv4WrKtzu5BENz8wd1i7+Hmzm8qmFP7RtkQmsX97uBdWsHV1cHgHBwl262beb2sSz2TS/uGC33jXF0arY5a87uJK5/XkVweuRDP5V8EmF3iwZ9+Y9nF/ZNz+90Eb+scHxaYH2j907P7hyd3i6Bf+Ng/z9Q+meX908v7nSRvIRCY5cGZhf3T8/vduG9lEJjKdzaUhi5HsyrRdkVfmp9Jj2nT0kPfmpFRuSqtm0gPZ+8Nqy5dDV3ybcUWC8H53HDCSL2ORh5bcoTW3jgtSgKH4pgGkUtpz/RR0E4YswJYg5siEepZuRcWtMfQp2l0IiUqtLRa6YhV52QB1gdSZJFR6La6VJOBZJH4aGW0p539EY9Nvz1X8GagQSt8AvbsBAAp64EPK5KLvRMPuwEzPX0e/LM6qEt5TIlu194G3QF0PldbEMYW8pZpycCtpXsYIwM4b6SNHawwCFmkCGfTGGY0P19wi2HW5nXvuBHIEp+5HiYKMjdbzHbdmS/41oiYQbz0WyPxstir28JI3ExUJ9fk8VFRcUZjRfs5RV6uIDhSkws7jjaQd9JEr5aw4wSRUFf0WzEKfjs6drEyliG2/R1T1iC96lQPPVadPAZPRXzUI47Pc5I40ev7t3W5mge7+r0iwKMqbNGP1ugoG2HnF8mOAaDbNLpeHfyuEn5uZEn+tA7AUk2DUYYzVuhFxuzfAhLTAudFi3pClZXPvsRP4MMR57c8Kixk6bvMb9a1DpR2sY9UgzHTQZsPXKDL43U6QEdEO/aLfgigbe0YcyS/WZVgTaIAFBFXFJh0/ABdecAKOkIaAF/8ZKpFj3iA4K21LXFO4G3lGHO4vw4KwCzEe1kmfUKgLc0YdKIAF/NnxRopVc8IGRD3HsXEPGWPsqKPsA5zvLsvLThY2gHP7ktzk70YfxOX1uk+JYBOmVc1hW0E4oy64sziKWfol9FmZJZbx+wetk+Rs6tX9bG0xiHv+LgcgyUHvvHlAnv+iORigRBCgyOMZ4a3SAeByePS8AOBtAFexN75kjWlQ5RsbMvOLlxEevU7qhF0/f3BYSPzGdh1oRrJ+pQGM3Su7epFkr6grzumgQL3OlNwUzrQI4YlOO0ykce2I+p59CzzYzSbqbZjzXPzF0l3Z0IMgUG7yOqiLZA3RRhD5mn9oAHaA17j/zpe/xvWffgI//CiVlolx6y66XttPr7go0b5y3/Xg4yIkqOyVRnpK0MWTbLHXqIOE77v35T/jaWbNskXhBkZyEdASmOBUFaghHwlhoulIbN6PjJJlHbBmkd0jfl3sBaDj8auLQK83OeVEqBQFkuQu906O2wFaSPV6GBDyghKpEbIo55kJe+EGDu6YxXOtJcOjhZMtAQdndhXhsvWtrnQ29z9mEt/83n4sB92/RUUjfgaNDOM5wLBSpOjOivsBka8dN6fQl64sSX2IQFhnJaiYmJohmycn4SdvkFCIZzWQHidQYQnBYnH+RNZiDLq/1sZoXc67YX0i/uaIddg3r+xy3E23CB7pw8IN3V/DCzsItDmWMB9KhtkqdwVhRXxpL93HPU8l8C+4flb8Hoh8JIQ8G8rU4il6ZPGrDAu1ek3x27h09rxg08Vn2ZWNaiu0yDWR6LbGKwnY/RGByH7WBPw95TR97ze/m5HxzVGWcVXBeD+22CQrfEiaNzuZI1MOgxqqZFiBkjnpe+EUJfZbcWBvkW+8x1+UTyy6pnkz2RBY3ZQdDccBjcG+R26pLVQPLyuRd2cj0Yyp2CD1L6HxoeLgk0Bpd5WmCeAmdSIZM8fJLn8aN6naEQvgAp5GuMQZfzofHLAJLgivcp7mhGOEvZyW3520Wj1xmpBsIBWGsdKxvxkq4E4ZWvmleuKH8l4xRiQlDKGtciu7sziqTVjrjSwi6WcmLxiin32tzXFUcGQJtrLcTYgryIrG7jWvDMq0jLvC88t2o/bN41IIxaGFvdiY5hp3Pw1jU5i7vU/05JaVLuZVMxTAVHDNAPOCpRcm2kCmdooeet9I/+Cssb4wUpq+CDcZbU7ICPTGspuPeM+bLMHFVH5ZX4AFdHjpWbCKizwSbWDrRmbO4zct+vmLUcftsedJ3BBevEtySyaZ9dzgbp8chaACWvuGB6keA5GMy2YLqTs1cBAmaOnUFhPkbSGx2vl0n4Rx65n5lR8MEIj3lrt8x3/ixNlPszqUepy3f23MQY2afgRfZYGuNAekS3YsVHdp7TV/adW/kwZq5fyg975DewXQgNyOz95ba/OgOyAp+B2PQ5QwHSnAEfnmTk3cmZInPYvfZLSvegvqUqlQMj1LTTaJwFiRfEthrpilT5C0ftETxeX/qdb3k0h8VnN9NX7uWrVSQ7D2A3VtHCjwOElUqfyjrfW7GqTX62o1vnZuhvN7/fbatuQNQvv0/6cIVJqsCMVeR+dnCGAwYRJMq3Ik9JdnQlc9OamVm45aEs4oi72hxnqFf34vdb0LAcfHVLsZyQT3dyXiE2t2FRXW38HhMRtw/VmMRKcU30Q+nA2gG9SedLlImJT6++p/cavc+6LsQr47kPyJa7y9HzFIXRl+GX4BfID7+I+8Z9vXg8+dqCKMfYrY1NsCr628tbDA6DCtVF1HewWnS6fQTjpynH8BKddRzYg2vJ13634hVNtb9V8ffXYvZB1U+V4hU1dUDngtcvW6mbQfkesqgkaNh/w6C2MLBX/4160kdE7z9KP20h8+hKSLeHSsv+lO1XC/LxwFQ/+CxqEi+lw4Mb/+CDg6Lh1nrjK1C5oe2G4E0kTYe7lZps99ubxXfNaMrDfVzXaXd8loZcH0zq5n69N2iXfC7WE2y0gXA0o96hCde6xu0qf8ucQS1dEsxwW6cK5bQT/kP8hK3G+ZnwsKYz8dJ0J7ZGdk/r6tZRWdMwRnOl7JfiFXTHM+8j4z2LkKOxORIjzbfcLd5/+5f7rXDWcCA4GQFHLemTM8xf4VMuYL7mvudJjMXMRQTN1qf4K4IycLaEKubgfHh3QdKiEZHNKg39etrF7Q/xajx9wLBVmjnRqbrvFe4v9jPCMEjcNGC0fqel1qofm9/GVNZuZz8fCD0iEI2ZO8VcSSSN3ZCamwej/qkNty7WU4sLWXnfVsL1OPTKsMtuAZsNGbCy624VSNdU5jsVbLyrpQpzRwz6G3IMd7ttwHpbigMOBzYIN90E+kI4FrUP4pYWkjOpSeRrGc8bFzLcAby761cqMjx4Qp1/WeB+Zuq5l/tUV9B7RgGjp3TjScwvQw+vwGGyR+rU2tO0Rm1zdIgP7fLLL4GzLxCJePQuUiWc5Uos9ur+z9s+3R9QQ+qGONfjzJyPR7qglHw/tREhxyWw9DSvkpUcg87YzXPRZLne5d6J2h6VeCDM52BoLYxldzHs5TXgvv6jyC5dRIO83iHY49jvzfgtZ4frnQIvr5T/3Qmee78SGW5RbCdUzMUeTsSkKLnsSCbdn4p7Olm2LYcOMiHSGNQnNvZ6/9DF4BBm/3EFPXO2LvPCgMXrRyHq2rFK2pfIKMTNBhqi0gyOcnvVCPVTwrxRbaFNJTAM/FUW6Vdn8DZrkaUIVNc/WI/nqZMJjOxbNMCJZhq67lIgQ9Ik7LYTtvu/z1Bv4nNsy+cM9P+IIri/oJN+Se+TDz4eBOeWQWxjDtAC16gQBqnEQsbrLBFOTg+xiZOkurrNuFdbuUdMuQ8EPtGPa3OfaO+zsm34MHAcOMNX1MpUv6mZ2I7eSXP5adpKkTXl2P9u6ngdpedhP3OEilkr7mnUwLll7eyektRzJ7OBn/nr7Hj7MVJKOAySOVrUaLCGmwSUGlWL1FHChU+L3eTk4D9v8tbJTCii9xpNqxLOpMIuQK2EAqYd/C+XfZdD
*/