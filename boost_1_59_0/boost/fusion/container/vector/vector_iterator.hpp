/*=============================================================================
    Copyright (c) 2001-2011 Joel de Guzman

    Distributed under the Boost Software License, Version 1.0. (See accompanying 
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
==============================================================================*/
#if !defined(FUSION_VECTOR_ITERATOR_05042005_0635)
#define FUSION_VECTOR_ITERATOR_05042005_0635

#include <boost/fusion/support/config.hpp>
#include <boost/fusion/support/iterator_base.hpp>
#include <boost/fusion/container/vector/detail/deref_impl.hpp>
#include <boost/fusion/container/vector/detail/value_of_impl.hpp>
#include <boost/fusion/container/vector/detail/next_impl.hpp>
#include <boost/fusion/container/vector/detail/prior_impl.hpp>
#include <boost/fusion/container/vector/detail/equal_to_impl.hpp>
#include <boost/fusion/container/vector/detail/distance_impl.hpp>
#include <boost/fusion/container/vector/detail/advance_impl.hpp>
#include <boost/type_traits/add_const.hpp>
#include <boost/mpl/int.hpp>

namespace boost { namespace fusion
{
    struct vector_iterator_tag;
    struct random_access_traversal_tag;

    template <typename Vector, int N>
    struct vector_iterator_identity;

    template <typename Vector, int N>
    struct vector_iterator : iterator_base<vector_iterator<Vector, N> >
    {
        typedef mpl::int_<N> index;
        typedef Vector vector;
        typedef vector_iterator_tag fusion_tag;
        typedef random_access_traversal_tag category;
        typedef vector_iterator_identity<
            typename add_const<Vector>::type, N> identity;

        BOOST_CONSTEXPR BOOST_FUSION_GPU_ENABLED
        vector_iterator(Vector& in_vec)
            : vec(in_vec) {}

        BOOST_CONSTEXPR BOOST_FUSION_GPU_ENABLED
        vector_iterator(vector_iterator const& rhs)
            : vec(rhs.vec) {}

        Vector& vec;

        // silence MSVC warning C4512: assignment operator could not be generated
        BOOST_DELETED_FUNCTION(vector_iterator& operator= (vector_iterator const&))
    };
}}

#ifdef BOOST_FUSION_WORKAROUND_FOR_LWG_2408
namespace std
{
    template <typename Vector, int N>
    struct iterator_traits< ::boost::fusion::vector_iterator<Vector, N> >
    { };
}
#endif

#endif


/* vector_iterator.hpp
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
*/