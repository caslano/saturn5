/*=============================================================================
    Copyright (c) 2001-2011 Joel de Guzman

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
==============================================================================*/
#if !defined(FUSION_ITERATOR_RANGE_05062005_1224)
#define FUSION_ITERATOR_RANGE_05062005_1224

#include <boost/fusion/support/config.hpp>
#include <boost/fusion/support/detail/access.hpp>
#include <boost/fusion/support/sequence_base.hpp>
#include <boost/fusion/support/category_of.hpp>
#include <boost/fusion/iterator/distance.hpp>
#include <boost/fusion/iterator/mpl/convert_iterator.hpp>
#include <boost/fusion/view/iterator_range/detail/begin_impl.hpp>
#include <boost/fusion/view/iterator_range/detail/end_impl.hpp>
#include <boost/fusion/view/iterator_range/detail/at_impl.hpp>
#include <boost/fusion/view/iterator_range/detail/size_impl.hpp>
#include <boost/fusion/view/iterator_range/detail/value_at_impl.hpp>
#include <boost/fusion/view/iterator_range/detail/is_segmented_impl.hpp>
#include <boost/fusion/view/iterator_range/detail/segments_impl.hpp>
#include <boost/fusion/adapted/mpl/mpl_iterator.hpp>
#include <boost/config.hpp>

#if defined (BOOST_MSVC)
#  pragma warning(push)
#  pragma warning (disable: 4512) // assignment operator could not be generated.
#endif

namespace boost { namespace fusion
{
    struct iterator_range_tag;
    struct fusion_sequence_tag;

    template <typename First, typename Last>
    struct iterator_range : sequence_base<iterator_range<First, Last> >
    {
        typedef typename convert_iterator<First>::type begin_type;
        typedef typename convert_iterator<Last>::type end_type;
        typedef iterator_range_tag fusion_tag;
        typedef fusion_sequence_tag tag; // this gets picked up by MPL
        typedef mpl::true_ is_view;

        typedef typename traits::category_of<begin_type>::type category;

        BOOST_CONSTEXPR BOOST_FUSION_GPU_ENABLED
        iterator_range(First const& in_first, Last const& in_last)
            : first(convert_iterator<First>::call(in_first))
            , last(convert_iterator<Last>::call(in_last)) {}

        begin_type first;
        end_type last;
    };
}}

#if defined (BOOST_MSVC)
#  pragma warning(pop)
#endif

#endif



/* iterator_range.hpp
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
*/