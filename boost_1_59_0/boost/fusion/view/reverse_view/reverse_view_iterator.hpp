/*=============================================================================
    Copyright (c) 2001-2011 Joel de Guzman

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
==============================================================================*/
#if !defined(FUSION_REVERSE_VIEW_ITERATOR_07202005_0835)
#define FUSION_REVERSE_VIEW_ITERATOR_07202005_0835

#include <boost/fusion/support/config.hpp>
#include <boost/fusion/support/iterator_base.hpp>
#include <boost/fusion/support/category_of.hpp>
#include <boost/fusion/iterator/mpl/convert_iterator.hpp>
#include <boost/fusion/adapted/mpl/mpl_iterator.hpp>
#include <boost/fusion/view/reverse_view/detail/deref_impl.hpp>
#include <boost/fusion/view/reverse_view/detail/next_impl.hpp>
#include <boost/fusion/view/reverse_view/detail/prior_impl.hpp>
#include <boost/fusion/view/reverse_view/detail/advance_impl.hpp>
#include <boost/fusion/view/reverse_view/detail/distance_impl.hpp>
#include <boost/fusion/view/reverse_view/detail/value_of_impl.hpp>
#include <boost/fusion/view/reverse_view/detail/deref_data_impl.hpp>
#include <boost/fusion/view/reverse_view/detail/value_of_data_impl.hpp>
#include <boost/fusion/view/reverse_view/detail/key_of_impl.hpp>
#include <boost/type_traits/is_base_of.hpp>
#include <boost/static_assert.hpp>

namespace boost { namespace fusion
{
    struct reverse_view_iterator_tag;

    template <typename First>
    struct reverse_view_iterator
        : iterator_base<reverse_view_iterator<First> >
    {
        typedef convert_iterator<First> converter;
        typedef typename converter::type first_type;
        typedef reverse_view_iterator_tag fusion_tag;
        typedef typename traits::category_of<first_type>::type category;

        BOOST_STATIC_ASSERT((
            is_base_of<
                bidirectional_traversal_tag
              , category>::value));

        BOOST_CONSTEXPR BOOST_FUSION_GPU_ENABLED
        reverse_view_iterator(First const& in_first)
            : first(converter::call(in_first)) {}

        first_type first;

        // silence MSVC warning C4512: assignment operator could not be generated
        BOOST_DELETED_FUNCTION(reverse_view_iterator& operator= (reverse_view_iterator const&))
    };
}}

#ifdef BOOST_FUSION_WORKAROUND_FOR_LWG_2408
namespace std
{
    template <typename First>
    struct iterator_traits< ::boost::fusion::reverse_view_iterator<First> >
    { };
}
#endif

#endif


/* reverse_view_iterator.hpp
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
*/