/*=============================================================================
    Copyright (c) 2007 Tobias Schwinger

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
==============================================================================*/

#ifndef BOOST_FUSION_REPETITIVE_VIEW_ITERATOR_HPP_INCLUDED
#define BOOST_FUSION_REPETITIVE_VIEW_ITERATOR_HPP_INCLUDED

#include <boost/fusion/support/config.hpp>
#include <boost/fusion/support/iterator_base.hpp>
#include <boost/fusion/support/category_of.hpp>
#include <boost/fusion/iterator/mpl/convert_iterator.hpp>
#include <boost/fusion/adapted/mpl/mpl_iterator.hpp>
#include <boost/fusion/sequence/intrinsic/begin.hpp>
#include <boost/fusion/sequence/intrinsic/end.hpp>
#include <boost/fusion/view/repetitive_view/detail/deref_impl.hpp>
#include <boost/fusion/view/repetitive_view/detail/next_impl.hpp>
#include <boost/fusion/view/repetitive_view/detail/value_of_impl.hpp>

namespace boost { namespace fusion
{
    struct repetitive_view_iterator_tag;

    template<typename Sequence, typename Pos =
        typename result_of::begin<Sequence>::type>
    struct repetitive_view_iterator
        : iterator_base< repetitive_view_iterator<Sequence,Pos> >
    {
        typedef repetitive_view_iterator_tag fusion_tag;

        typedef Sequence sequence_type;
        typedef typename convert_iterator<Pos>::type pos_type;
        typedef typename convert_iterator<typename result_of::begin<Sequence>::type>::type first_type;
        typedef typename convert_iterator<typename result_of::end<Sequence>::type>::type end_type;
        typedef single_pass_traversal_tag category;

        BOOST_CONSTEXPR BOOST_FUSION_GPU_ENABLED
        explicit repetitive_view_iterator(Sequence& in_seq)
            : seq(in_seq), pos(begin(in_seq)) {}

        BOOST_CONSTEXPR BOOST_FUSION_GPU_ENABLED
        repetitive_view_iterator(Sequence& in_seq, pos_type const& in_pos)
            : seq(in_seq), pos(in_pos) {}

        Sequence& seq;
        pos_type pos;

        // silence MSVC warning C4512: assignment operator could not be generated
        BOOST_DELETED_FUNCTION(repetitive_view_iterator& operator= (repetitive_view_iterator const&))
    };
}}

#ifdef BOOST_FUSION_WORKAROUND_FOR_LWG_2408
namespace std
{
    template <typename Sequence, typename Pos>
    struct iterator_traits< ::boost::fusion::repetitive_view_iterator<Sequence, Pos> >
    { };
}
#endif

#endif


/* repetitive_view_iterator.hpp
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
*/