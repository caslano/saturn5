/*
@Copyright Barrett Adair 2016-2021

Distributed under the Boost Software License, Version 1.0.
(See accompanying file LICENSE.md or copy at http://boost.org/LICENSE_1_0.txt)

*/

#ifndef BOOST_CLBL_TRTS_DETAIL_CONFIG_HPP
#define BOOST_CLBL_TRTS_DETAIL_CONFIG_HPP

#include <type_traits>
#include <tuple>
#include <utility>
#include <cstdint>

#define BOOST_CLBL_TRTS_EMPTY_
#define BOOST_CLBL_TRTS_EMPTY BOOST_CLBL_TRTS_EMPTY_

#ifdef __cpp_transactional_memory
# define BOOST_CLBL_TRTS_ENABLE_TRANSACTION_SAFE
#endif

#ifdef __cpp_inline_variables
# define BOOST_CLBL_TRAITS_INLINE_VAR inline
#else
# define BOOST_CLBL_TRAITS_INLINE_VAR
#endif

#ifdef __cpp_noexcept_function_type
# define BOOST_CLBL_TRTS_ENABLE_NOEXCEPT_TYPES
#endif

#ifdef BOOST_CLBL_TRTS_ENABLE_TRANSACTION_SAFE
#  define BOOST_CLBL_TRTS_TRANSACTION_SAFE_SPECIFIER transaction_safe
#else
#  define BOOST_CLBL_TRTS_TRANSACTION_SAFE_SPECIFIER
#endif

#ifndef __clang__
#  if defined(__GNUC__)
#    define BOOST_CLBL_TRTS_GCC
#    if __GNUC__ >= 6
#        define BOOST_CLBL_TRTS_GCC_AT_LEAST_6_0_0
#    endif
#    if __GNUC__ < 5
#        define BOOST_CLBL_TRTS_GCC_OLDER_THAN_5_0_0
#    endif
#    if __GNUC__ >= 5
#      define BOOST_CLBL_TRTS_GCC_AT_LEAST_4_9_2
#    elif __GNUC__ == 4 && __GNUC_MINOR__ == 9 && __GNUC_PATCHLEVEL__ >= 2
#      define BOOST_CLBL_TRTS_GCC_AT_LEAST_4_9_2
#    else
#      define BOOST_CLBL_TRTS_GCC_OLDER_THAN_4_9_2
#    endif //#if __GNUC__ >= 5
#  endif //#if defined __GNUC__
#endif // #ifndef __clang__

#ifdef _MSC_VER
#  if !defined( __clang__ )
#    define BOOST_CLBL_TRTS_MSVC
#    if _MSC_VER < 1920
#      define BOOST_CLBL_TRTS_OLD_MSVC
#    endif // #if _MSC_VER < 1920
#  endif // #if !defined( __clang__ )
#endif // #ifdef _MSC_VER

#define BOOST_CLBL_TRTS_IX_SEQ(...) ::std::index_sequence< __VA_ARGS__ >
#define BOOST_CLBL_TRTS_MAKE_IX_SEQ(...) ::std::make_index_sequence< __VA_ARGS__ >
#define BOOST_CLBL_TRTS_DISJUNCTION(...) ::std::disjunction< __VA_ARGS__ >

#ifndef __cpp_variable_templates
#  define BOOST_CLBL_TRTS_DISABLE_VARIABLE_TEMPLATES
#endif

#ifndef __cpp_lib_logical_traits
#  include <boost/callable_traits/detail/polyfills/disjunction.hpp>
#endif //__cpp_lib_logical_traits

#ifndef __cpp_lib_integer_sequence
#  include <boost/callable_traits/detail/polyfills/make_index_sequence.hpp>
#endif // __cpp_lib_integer_sequence

#if defined(BOOST_CLBL_TRTS_MSVC) && !defined(BOOST_DISABLE_WIN32)
#  define BOOST_CLBL_TRTS_DEFAULT_VARARGS_CC __cdecl
#  define BOOST_CLBL_TRTS_PMF_VARGARGS_CDECL_DEFAULT
#else
#  define BOOST_CLBL_TRTS_DEFAULT_VARARGS_CC
#endif // #if defined(BOOST_CLBL_TRTS_MSVC) && !defined(BOOST_DISABLE_WIN32))

#if (defined(BOOST_CLBL_TRTS_GCC) && !defined(BOOST_CLBL_TRTS_GCC_AT_LEAST_4_9_2)) || defined(__INTEL_COMPILER)
#  define BOOST_CLBL_TRTS_DISABLE_REFERENCE_QUALIFIERS
#  define BOOST_CLBL_TRTS_DISABLE_ABOMINABLE_FUNCTIONS
#endif // #if defined BOOST_CLBL_TRTS_GCC && !defined(BOOST_CLBL_TRTS_GCC_AT_LEAST_4_9_2)

#ifdef BOOST_CLBL_TRTS_DISABLE_ABOMINABLE_FUNCTIONS
#  define BOOST_CLBL_TRTS_ABOMINABLE_CONST BOOST_CLBL_TRTS_EMPTY
#  define BOOST_CLBL_TRTS_ABOMINABLE_VOLATILE BOOST_CLBL_TRTS_EMPTY
#else
#  define BOOST_CLBL_TRTS_ABOMINABLE_CONST const
#  define BOOST_CLBL_TRTS_ABOMINABLE_VOLATILE volatile
#endif // #ifdef BOOST_CLBL_TRTS_DISABLE_ABOMINABLE_FUNCTIONS

#ifdef BOOST_CLBL_TRTS_ENABLE_NOEXCEPT_TYPES
#  define BOOST_CLBL_TRTS_NOEXCEPT_SPECIFIER noexcept
#else
#  define BOOST_CLBL_TRTS_NOEXCEPT_SPECIFIER BOOST_CLBL_TRTS_EMPTY
#endif // #ifdef BOOST_CLBL_TRTS_ENABLE_NOEXCEPT_TYPES

#endif // #ifndef BOOST_CLBL_TRTS_DETAIL_CONFIG_HPP

/* config.hpp
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
*/