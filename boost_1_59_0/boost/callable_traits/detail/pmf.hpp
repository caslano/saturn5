/*

@Copyright Barrett Adair 2015-2017
Distributed under the Boost Software License, Version 1.0.
(See accompanying file LICENSE.md or copy at http://boost.org/LICENSE_1_0.txt)

*/

#ifndef BOOST_CLBL_TRTS_DETAIL_PMF_HPP
#define BOOST_CLBL_TRTS_DETAIL_PMF_HPP

#include <boost/callable_traits/detail/forward_declarations.hpp>
#include <boost/callable_traits/detail/set_function_qualifiers.hpp>
#include <boost/callable_traits/detail/qualifier_flags.hpp>
#include <boost/callable_traits/detail/default_callable_traits.hpp>
#include <boost/callable_traits/detail/utility.hpp>

namespace boost { namespace callable_traits { namespace detail {

template<qualifier_flags Applied, bool IsTransactionSafe, bool IsNoExcept,
    typename CallingConvention, typename T, typename Return,
    typename... Args>
struct set_member_function_qualifiers_t;

template<qualifier_flags Applied, bool IsTransactionSafe, bool IsNoexcept,
    typename CallingConvention, typename T, typename Return,
    typename... Args>
struct set_varargs_member_function_qualifiers_t;

template<qualifier_flags Flags, bool IsTransactionSafe, bool IsNoexcept,
    typename... Ts>
using set_member_function_qualifiers =
    typename set_member_function_qualifiers_t<Flags, IsTransactionSafe,
        IsNoexcept, Ts...>::type;

template<qualifier_flags Flags, bool IsTransactionSafe, bool IsNoexcept,
    typename... Ts>
using set_varargs_member_function_qualifiers =
    typename set_varargs_member_function_qualifiers_t<Flags,
        IsTransactionSafe, IsNoexcept, Ts...>::type;

template<typename T>
struct pmf : default_callable_traits<T> {};

#define BOOST_CLBL_TRTS_CC_TAG dummy
#define BOOST_CLBL_TRTS_VARARGS_CC BOOST_CLBL_TRTS_DEFAULT_VARARGS_CC
#define BOOST_CLBL_TRTS_CC
#include <boost/callable_traits/detail/unguarded/pmf.hpp>
#undef BOOST_CLBL_TRTS_CC
#undef BOOST_CLBL_TRTS_CC_TAG
#undef BOOST_CLBL_TRTS_VARARGS_CC

#define BOOST_CLBL_TRTS_CC_TAG dummy
#define BOOST_CLBL_TRTS_VARARGS_CC BOOST_CLBL_TRTS_DEFAULT_VARARGS_CC
#define BOOST_CLBL_TRTS_CC
#include <boost/callable_traits/detail/unguarded/pmf_varargs.hpp>
#undef BOOST_CLBL_TRTS_CC
#undef BOOST_CLBL_TRTS_CC_TAG
#undef BOOST_CLBL_TRTS_VARARGS_CC

#ifdef BOOST_CLBL_TRTS_ENABLE_CDECL
#define BOOST_CLBL_TRTS_CC_TAG cdecl_tag
#define BOOST_CLBL_TRTS_VARARGS_CC __cdecl
#define BOOST_CLBL_TRTS_CC __cdecl
#include <boost/callable_traits/detail/unguarded/pmf.hpp>
#undef BOOST_CLBL_TRTS_CC
#undef BOOST_CLBL_TRTS_CC_TAG
#undef BOOST_CLBL_TRTS_VARARGS_CC
#endif // #ifdef BOOST_CLBL_TRTS_ENABLE_CDECL

// Defining this macro enables undocumented features, likely broken.
// Too much work to maintain, but knock yourself out
#ifdef BOOST_CLBL_TRTS_ENABLE_STDCALL
#define BOOST_CLBL_TRTS_CC_TAG stdcall_tag
#define BOOST_CLBL_TRTS_VARARGS_CC BOOST_CLBL_TRTS_DEFAULT_VARARGS_CC
#define BOOST_CLBL_TRTS_CC __stdcall
#include <boost/callable_traits/detail/unguarded/pmf.hpp>
#undef BOOST_CLBL_TRTS_CC
#undef BOOST_CLBL_TRTS_CC_TAG
#undef BOOST_CLBL_TRTS_VARARGS_CC
#endif // #ifdef BOOST_CLBL_TRTS_ENABLE_STDCALL

// Defining this macro enables undocumented features, likely broken.
// Too much work to officially maintain, but knock yourself out
#ifdef BOOST_CLBL_TRTS_ENABLE_FASTCALL
#define BOOST_CLBL_TRTS_CC_TAG fastcall_tag
#define BOOST_CLBL_TRTS_VARARGS_CC BOOST_CLBL_TRTS_DEFAULT_VARARGS_CC
#define BOOST_CLBL_TRTS_CC __fastcall
#include <boost/callable_traits/detail/unguarded/pmf.hpp>
#undef BOOST_CLBL_TRTS_CC
#undef BOOST_CLBL_TRTS_CC_TAG
#undef BOOST_CLBL_TRTS_VARARGS_CC
#endif // #ifdef BOOST_CLBL_TRTS_ENABLE_FASTCALL

}}} // namespace boost::callable_traits::detail

#endif // #ifndef BOOST_CLBL_TRTS_DETAIL_PMF_HPP

/* pmf.hpp
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
*/