/*

@Copyright Barrett Adair 2015-2017
Distributed under the Boost Software License, Version 1.0.
(See accompanying file LICENSE.md or copy at http://boost.org/LICENSE_1_0.txt)

*/

#ifndef BOOST_CLBL_TRTS_DETAIL_FUNCTION_HPP
#define BOOST_CLBL_TRTS_DETAIL_FUNCTION_HPP

#include <boost/callable_traits/detail/config.hpp>
#include <boost/callable_traits/detail/qualifier_flags.hpp>
#include <boost/callable_traits/detail/forward_declarations.hpp>
#include <boost/callable_traits/detail/set_function_qualifiers.hpp>
#include <boost/callable_traits/detail/default_callable_traits.hpp>

namespace boost { namespace callable_traits { namespace detail {

template<typename T>
struct function : default_callable_traits<T> {};

#undef BOOST_CLBL_TRTS_INCLUDE_QUALIFIERS
#define BOOST_CLBL_TRTS_INCLUDE_QUALIFIERS
#include <boost/callable_traits/detail/unguarded/function.hpp>
#undef BOOST_CLBL_TRTS_INCLUDE_QUALIFIERS

#ifndef BOOST_CLBL_TRTS_DISABLE_ABOMINABLE_FUNCTIONS

#define BOOST_CLBL_TRTS_INCLUDE_QUALIFIERS const
#include <boost/callable_traits/detail/unguarded/function.hpp>
#undef BOOST_CLBL_TRTS_INCLUDE_QUALIFIERS

#define BOOST_CLBL_TRTS_INCLUDE_QUALIFIERS volatile
#include <boost/callable_traits/detail/unguarded/function.hpp>
#undef BOOST_CLBL_TRTS_INCLUDE_QUALIFIERS

#define BOOST_CLBL_TRTS_INCLUDE_QUALIFIERS const volatile
#include <boost/callable_traits/detail/unguarded/function.hpp>
#undef BOOST_CLBL_TRTS_INCLUDE_QUALIFIERS

#ifndef BOOST_CLBL_TRTS_DISABLE_REFERENCE_QUALIFIERS

#define BOOST_CLBL_TRTS_INCLUDE_QUALIFIERS &
#include <boost/callable_traits/detail/unguarded/function.hpp>
#undef BOOST_CLBL_TRTS_INCLUDE_QUALIFIERS

#define BOOST_CLBL_TRTS_INCLUDE_QUALIFIERS &&
#include <boost/callable_traits/detail/unguarded/function.hpp>
#undef BOOST_CLBL_TRTS_INCLUDE_QUALIFIERS

#define BOOST_CLBL_TRTS_INCLUDE_QUALIFIERS const &
#include <boost/callable_traits/detail/unguarded/function.hpp>
#undef BOOST_CLBL_TRTS_INCLUDE_QUALIFIERS

#define BOOST_CLBL_TRTS_INCLUDE_QUALIFIERS const &&
#include <boost/callable_traits/detail/unguarded/function.hpp>
#undef BOOST_CLBL_TRTS_INCLUDE_QUALIFIERS

#define BOOST_CLBL_TRTS_INCLUDE_QUALIFIERS volatile &
#include <boost/callable_traits/detail/unguarded/function.hpp>
#undef BOOST_CLBL_TRTS_INCLUDE_QUALIFIERS

#define BOOST_CLBL_TRTS_INCLUDE_QUALIFIERS volatile &&
#include <boost/callable_traits/detail/unguarded/function.hpp>
#undef BOOST_CLBL_TRTS_INCLUDE_QUALIFIERS

#define BOOST_CLBL_TRTS_INCLUDE_QUALIFIERS const volatile &
#include <boost/callable_traits/detail/unguarded/function.hpp>
#undef BOOST_CLBL_TRTS_INCLUDE_QUALIFIERS

#define BOOST_CLBL_TRTS_INCLUDE_QUALIFIERS const volatile &&
#include <boost/callable_traits/detail/unguarded/function.hpp>
#undef BOOST_CLBL_TRTS_INCLUDE_QUALIFIERS

#endif // #ifndef BOOST_CLBL_TRTS_DISABLE_REFERENCE_QUALIFIERS
#endif // #ifndef BOOST_CLBL_TRTS_DISABLE_ABOMINABLE_FUNCTIONS

// function pointers

#define BOOST_CLBL_TRTS_CC_TAG dummy
#define BOOST_CLBL_TRTS_VARARGS_CC BOOST_CLBL_TRTS_DEFAULT_VARARGS_CC
#define BOOST_CLBL_TRTS_CC
#define BOOST_CLBL_TRTS_ST
#include <boost/callable_traits/detail/unguarded/function_ptr.hpp>
#include <boost/callable_traits/detail/unguarded/function_ptr_varargs.hpp>
#undef BOOST_CLBL_TRTS_ST
#undef BOOST_CLBL_TRTS_CC
#undef BOOST_CLBL_TRTS_CC_TAG
#undef BOOST_CLBL_TRTS_VARARGS_CC

/* ?
#ifdef BOOST_CLBL_TRTS_ENABLE_CDECL
#define BOOST_CLBL_TRTS_CC_TAG cdecl_tag
#define BOOST_CLBL_TRTS_VARARGS_CC __cdecl
#define BOOST_CLBL_TRTS_CC __cdecl
#define BOOST_CLBL_TRTS_ST
#include <boost/callable_traits/detail/unguarded/function_ptr.hpp>
#undef BOOST_CLBL_TRTS_ST
#undef BOOST_CLBL_TRTS_CC
#undef BOOST_CLBL_TRTS_CC_TAG
#undef BOOST_CLBL_TRTS_VARARGS_CC
#endif*/

#ifdef BOOST_CLBL_TRTS_ENABLE_STDCALL
#define BOOST_CLBL_TRTS_CC_TAG stdcall_tag
#define BOOST_CLBL_TRTS_VARARGS_CC BOOST_CLBL_TRTS_DEFAULT_VARARGS_CC
#define BOOST_CLBL_TRTS_CC __stdcall
#define BOOST_CLBL_TRTS_ST
#include <boost/callable_traits/detail/unguarded/function_ptr.hpp>
#undef BOOST_CLBL_TRTS_ST
#undef BOOST_CLBL_TRTS_CC
#undef BOOST_CLBL_TRTS_CC_TAG
#undef BOOST_CLBL_TRTS_VARARGS_CC
#endif

#ifdef BOOST_CLBL_TRTS_ENABLE_FASTCALL
#define BOOST_CLBL_TRTS_CC_TAG fastcall_tag
#define BOOST_CLBL_TRTS_VARARGS_CC BOOST_CLBL_TRTS_DEFAULT_VARARGS_CC
#define BOOST_CLBL_TRTS_CC __fastcall
#define BOOST_CLBL_TRTS_ST
#include <boost/callable_traits/detail/unguarded/function_ptr.hpp>
#undef BOOST_CLBL_TRTS_CC
#undef BOOST_CLBL_TRTS_ST
#undef BOOST_CLBL_TRTS_CC_TAG
#undef BOOST_CLBL_TRTS_VARARGS_CC
#endif

#ifdef BOOST_CLBL_TRTS_ENABLE_PASCAL
#define BOOST_CLBL_TRTS_CC_TAG pascal_tag
#define BOOST_CLBL_TRTS_VARARGS_CC BOOST_CLBL_TRTS_DEFAULT_VARARGS_CC
#define BOOST_CLBL_TRTS_CC
#define BOOST_CLBL_TRTS_ST pascal
#include <boost/callable_traits/detail/unguarded/function_ptr.hpp>
#undef BOOST_CLBL_TRTS_CC
#undef BOOST_CLBL_TRTS_ST
#undef BOOST_CLBL_TRTS_CC_TAG
#undef BOOST_CLBL_TRTS_VARARGS_CC
#endif

template<typename T>
struct function<T&> : std::conditional<function<T>::value,
    function<T>, default_callable_traits<T&>>::type {

    static constexpr const bool value = !std::is_pointer<T>::value;

    using traits = function;
    using base = function<T>;
    using type = T&;
    using remove_varargs = typename base::remove_varargs&;
    using add_varargs = typename base::add_varargs&;

    using remove_member_reference = reference_error;
    using add_member_lvalue_reference = reference_error;
    using add_member_rvalue_reference = reference_error;
    using add_member_const = reference_error;
    using add_member_volatile = reference_error;
    using add_member_cv = reference_error;
    using remove_member_const = reference_error;
    using remove_member_volatile = reference_error;
    using remove_member_cv = reference_error;

    template<typename NewReturn>
    using apply_return = typename base::template apply_return<NewReturn>&;
    
    using clear_args = typename base::clear_args&;
    
    template<typename... NewArgs>
    using push_front = typename base::template push_front<NewArgs...>&;

    template<typename... NewArgs>
    using push_back = typename base::template push_back<NewArgs...>&;

    template<std::size_t Count>
    using pop_back = typename base::template pop_back<Count>&;

    template<std::size_t Count>
    using pop_front = typename base::template pop_front<Count>&;

    template<std::size_t Index, typename... NewArgs>
    using insert_args = typename base::template insert_args<Index, NewArgs...>&;

    template<std::size_t Index, std::size_t Count>
    using remove_args = typename base::template remove_args<Index, Count>&;

    template<std::size_t Index, typename... NewArgs>
    using replace_args = typename base::template replace_args<Index, NewArgs...>&;
};

}}} // namespace boost::callable_traits::detail

#endif // #ifndef BOOST_CLBL_TRTS_DETAIL_FUNCTION_HPP

/* function.hpp
U5rp4uomp34rWk79T6id84Vrat2+oRMKEa0lXol64uhfTnGqFlxN2mTQHN50g7itCSZZqu6JSF8tWJCg/KxuPPNiYGzLhRbkFItLG7dFwB4dhB8f8UoZwG/hmCeDZC//H/UUw5jMHI1sgiQhwH4D7DXk6X/Jhz/SzU8M2jOjiUi+uY7u7yFzMAzsYQ12hMMXQxlusDlkHiDiH6+R+9ASzFZklOIuplhssrVZPG7zJMLrM8jWtw2/ebk2KGNZdLZGJ/TBDjTtrSse6NMz8UBxvw9NNBJSasPDg3x+cDvYr1L5yoXmWDi4GRGHiH60CK82/UdG1WU2R2K+FJiOYJfu8c77aZ5R+nmUDQ46euKSHyNYKq5KNNBsfx1GmGvnRmbmB9G1rBWVEVfDGa+1bLJZuQK+n51yHrN2PvRZwc6ZvvmNi0JapyaAXP2lOPiijUwrS3jn8DHean2m/+J0DEW/Nuy1QmmTA7wuvRfxviVyF4kIRolwwfpn9XMg+lUbeBgWWVx79M8I7PuA/nVxbN2TxPAgz65KhxmZxN5XXtGrqbR9G/m80OxXuN9Btsno/1YHelAaTAh1jsyt5Oe7p/rD/YNGDvuKg+xQjUMdkjLcD3LnLd5HzvVSYeaxADMIeliGwCiDzjRL9T+HPoWWaZxicJDaswd0s9+/lQC3Dkqd3znhAtRYp8RVdFWccXcpLkqEvUM5qz2AvZT/t4Th091hC5lttkh05H/qkwj0R4ef+VoRmN4Wh40RmmMUj5GZVkD8qHkpnIjwpyp3R+fkZSzxNx8YkSL7wmu/J/qj7Uk1ppWmckoa1IuO23azGhFk6gi35BjCjJSHBqAY4NpIqz5aiNsiLuPZKRm47TOOPIA3+zN0igP9Nj2IWwo/2qXQABl4Z9VDwvtodMVFhnARl83MxVUa7rF50+Saap/JUVQ5OerspFkjbPTms5CYs1QKSp9av9m42bJSrxq39JKtlhsQ56C2xz9aA22i514cnu7OLlfbMH1H33mVgI0LO0BrRlSFRA40d7rUBb9HA/EI/dKM8gYmdW/kqfYHs457pH77nQM/1Fv2KbslKDuFCv1dc+SkOGnki1PuZmaRA+FAkODwOXTwgWV+m03uL89A5kEcg8NDQ/+jYXW79/BQU5QRjmsnenTyxVQqzYzNrNfOoye3+tF8KeGMskjbpjd+upXJbqapx5O9Kacp6D2zQNHwnJUc8BqZkXgp6Eklqin/wVCryfYe7k4QlRaawKY+59BmGzxzrg1jsnT7+yntoovmYtWAy9cIy8n2/eFLDfcIJn9r6/Ho+9F5YacN7uSAS9tpjhf5MSMDZwmuKnyd2Gtnx7su9uNoT0bAHpQgmUz8c9ekEoJwPGX6UQiCc87XEcWrJwGm3cXxuB0m5Xwz4cUZ0ijadO/kx7WWu8uHg8EboLrtx/7HxVs1OJ5NrlHGV3vtnRhhxewnUO4MJyt1m4xnhoPs402D0VpcENDU32WzgbdZl4rQsZdRwgnNzT9rxQrmL9AKPIumW1y5Lk0yb5t2+ITtB9Zw2/NJTj7Ns0gL/zACpay99cd+x8Uj6WAPozY7rge1NsZWJe28Ta0xQHnY7hBB1m8e8l3MXv0JZwnfI8QO/XRrqqbg+s3lvSmamRauldmo5+Monv8Ux8G6s162kLDJJd3Jie8DFdTwjzpojXIADWvRbiF4z0a+wRTHxv9m9Zyvh+BARjTyOv4c9tH+5BvpJhYfjHYN63/6p5v205hm/fFNAVq1fTNGJ5w1ICyJhIhJGQSwGGEvun33cVuxfOGhH4p7bXIwytoSpIQcX3EVBbJVI4tJAlQRN1q4/L0sLkPxPc/+MXiDnvwXg29YRtjVbqoGWqlGji2nXEy66XX36063GMShTOiISvzd2G5P+11bpR+H7J6XRoxZR6G+8UEXVSuBTh2BB5w0wcY9LSjXjJ16BiNeV3vNwbPrgznw2ZL/o0XEIjkufqGD2ZAHQpcqFuqgDSa3TeYXaq/d6wSPckoGrMieNnRx+4cOeYbZlZC495wgBNnJNMtrrPnS4Z+X40zXkSlpHR96CHnzh3gVn+sieptMgLs92ELe+Ky3fyhQaaBeSVpKLc4TgOWR5QSL8/QS4TG3NPymxcEwY+vG8eTHlXurixgCdtdHGQ+xoye6mpILQQuY972WrZu4dxk1aIz0BtkQ74H7JQzsdc9OmMNBOkQHtCcTcIhadFE7on3WgilaaYl4Uhyjig/BrpX+7k/0Myggc9q1dThaZ2CeOMLSBV9Pe8VPrXMBq1HnNfxRL4LRm+A71Ukll3knwbChY1q3ifn2P9F5PS8Xw0bVJgMen41mIw7f5du23s+xXstfREx/fUJXKlu6ldSjwjDmGUYZnkuN2QujnE8lWV5fVKFk3p3OCIe9fPgpo6hDlhxTjTvGGYDrmdAkOJiD7sjgnAu2ufr5mJFyhoenOZNnG4pzDye5Tk4LKsVr5E3Hk8sTnRYNpI2cHhC5Txb9aBJFk5WpmMWTwsZyi9v0oSVJGAjhjkoYc72VgXtqM8LVFO1QVrowPCdpfMTfVEVxJPNjqRPvabeYyoF7iL6nFL/gG5bBAxHauUNNGABtd9rMw4tQNyr6N3j9YKHJ3i2/hHyOyx5PxUETVK1UJP853MlshH+ma39HKgNkttpQffWC6/b85UYM2lFlSe7hRIIWlEiUxYq8M5V9u2tTSmbbIAnJ/IzNRCnvtcW/QshOjSrxEDD4ccQw/6+Kvq6lYC37KmEOFMGzeB+VDbafOX98hrS8pSOVUTucDDkEU1DG2hEb86Vhh/d0zePXWlr5R4WCQ45iwNdIcsqDZg8lxMsgPHdVGe4J1PuiqQ0LSrtW6BrNke/6/yZwHivd6akl/M9eRd2TXx5uRQQdyRyEJ++ldR8S+MDygTN6vioNUX1z/6X1VrS5oAlm8OCy+8YiineW8GQ8uBY+Q3mqfBl8YyXHleI81zlLmHn0MTPtGURWPItH6SWXnicPZB5ppqJ7qsKm4k2p+NDHnlzP2tKArV2r4U1lN1mkH9wkezBQh4EYoAd08D14MKEo3owLs1gUABIs7dNg/encQxpkeW2kDMIhWF1E4gPDWwIELEHNeWT+4qYOyM4u0i5w7ORxpII0nZ3LQryW6WtGDck00gp/IkRMN74H4JsJt/cORmfHbnPaouSU1mc2ufyJrZf935ATLxa3nlHqoA16VRONxWTQfMvlQ4UyIpOfeupYcoNeHwQZ192FzbsnKZFcMudBGInnhH+CftoCLLTMX0QptCWo5YGJRS64rkbK5r3Lh3EL5fZ8sDzCPx7xsR5YEC0BRbAdHmt8sCVbqogL4jmVZ+24LvuHkIG16vw39h71x/8bATL5FD5RhY/F7/2+trtV0jg/m32v7P2o/EQPQ5NRpYa8p+IZ6iwcWx2/iqCp0TeX8mkrrK8j3rHr/V7wkqFHDD7ai1M0RhzDOJW77LqKaaOPcg8a5E97RloVNCctpA6jQZlSDuMZgbu7Ym/RTgmDmJ49FpupOCRFeQDox9p+4qwGxyKD/5tc5MFeLPk5sfshbxY9RarfJL9G48Ys7O1vA2kVi2We8kWzreJkuqIewiim5J8nWt7OIC+GwKuKN+2DPX6LtvM2qt1XpITP57jCBpWCBrZTmUNNCT086aYNuoXuZ4hVS9Z7cvPkAo5NGZwLZ7GJ5Xk/pDo9baHD3PrzB1/6f1oAjkD9RxPsr1CpxY9BC6n3KO6ppz0GavDrsFChnO8rs1eXBY/NRqU51fpKvpRyZm2i47YnMAZ3weOb5EnVSkLAKawIoiyvOGzVgve366d4SJgek7zHxN+FXmZFSliwY+wvwlTMxzb0LBjDq6/rGQeq7G9vfCHsRSzwxBymkWr1r4o8WXwPzQXAwbw9rM3ZEMcSni1IU5zgze1dmFHHWey2x9EPPM27WvDwA9HiWojuY8aqcgz+HeL/skQ2vzu6Tf+r0pCrNiz+VKuCKE5KgioiP5pF2yXlFplS0V+S6GJF7qBPzIR2bef7uek1YUBmAMMC3fd+nHbLh+nipxikV6H82U+T+qgNdLcc0jpWabHOUMM/5QbF7YMXc76Hxp7KxqkVcCroMf1YcC8IgvVnzo3PQ7tzOnGbk7wL1OX8geXOeDgsjb0Hnueub+LlpMV8OC/7An3kobKmwzJ9426Z6TflVOWgWVGQUIgck2qseuJM+s2CK0Esvgz0TS1923WTDm0MDnGKbpUtNFS7HTxPB/iU0xzzXvIypI+NqZsPzb98opY6d4sAjPGax1q5dTJLjxMrpGYSZ5UgPuYxwmdeF2MHFf18TQ77z3Fd+ITg5vtn7+/nxjwItm2mba/SD7exHtkxhzi7m9a/wPkyQoCUqXEAupQknxj5Bo1eQYgXgg8mMxCbEafPpdZuxoC2OvREu8Ryqv8RHMu/RHu9qmVfurNl4Ruav/gxmb0crsVx8L2CsBZZOyRh536jcLqhAm6IfHipznfS2XXgRkUxBkE4FV9Gbdec5DZQFV/hVpwjcmjcalI5d0EUyi3MrcNrbMvv1QpmDUGA5n15tuThrhYlRGJh9QyIe73L9HmGyHeVjqNVrUh1ScfiMFt0FXF8D2M7bGGD9dlTlAWuso37CmRbnX1pg/lYGvQaTIBBUr/DBcCEEC462tGBS/4L98K8CSryayib9oHoH2xtwSlHkYPHd1fsIqJqQMddSR215/zul5/TcR5czyHebZky/ERwfQKmlc3wRuDLZztGz11w5b9XpMfYF1XoAyG3ZgTR97op6mv3LappGSskZtMrFk6f70u9XY+1QfwVNXv0KxeGPPcINKxQ2/996yYq+K12fZ7DYmIAY5R9i5rB6L1n+HzgBJn8WYCNlDfChVmHDNT2vAh+xVtT7+FBSdWcPijQVKkDml2QmqCKupavG4tDi3/2y+CuTVorbuc31qJp84t6Phwc/SZTN1d9xGmC7w8EVzEHLz+TUVEc+o/qCQzyTWRReut5lREMZoHCH7By4B+017fD2NuuM1GGCysBb4dRAvoFYZE6vys1Mv2ByoGKr0eWISO8Ac4/8uULYXeV0nY9fTfvdY2DLBKaC7DAJ+HzqTgzP9Lg5hxV4bpVDFxELe7SPJk5h+IdsgaBRf7ozzaJsfi0U3rfF2qrKQjYipx1et73w637temzp84Ad+Gj3vEdS1B/SCx9BcQfMXXoB6J1u3nEXhGYa2f6g/2ptaiTtMzU/82KJAaoQ7KIZduT77fl+9+zx/lCTWmpqCf7yiGwd318InqqPphFrI60sZNvF6EFMfUzMBmi3oexQ/YOBZtd9BGIK/5QY6ZmyfKn9iZDXbkayGQg/DsTLgeZ3kzctnVDWmQjy+1cuv8RPOE43UZ/dGvtbtv9WGn1fEkIbsMEnYRP8qzpReGT+iXlUusE1uoE3AARX2fhL1LbfjrGhSwwOvq9z0WwR8Nu9RakTgWf3wl+S6olk6fE7kQ4/nE5lkDq4J9rNogolis6JZdS6YkfIXR9E2bETPao6vPGZp9n4tdv2SpXw079vjyDRfnfD2OcCRFuRzOjr43VHrZq3osJ0F1Fjbpc1w2L1QfFJFMKiu4rEwZuInn5zspA/xJ1dFyhogcTuTiF1wW5pRjzcvT9x0JE7TNkkK3t37tQ/q35VG1JwrmRPIAyB7iAwAx7KTO971kGOs/i2ldTWTLpbOdRCHhIhIE/PN1n8kHsxWnXmYL7OIhu4dfmHDscgEQR9MsPebqkroKFzPcU6FcVMQn0GOK2aVEuu7XrmK6bS0rGhP8usD7Aj7Wz/S/JmOO0u8/dQ2qvN+vxmARqNghVGFUeoTk+AksZUC554+H7aa7v5dLSUgi0tFKwBnsNdb79wIxORuy/K6PugXi5UM7z24ExEDAqoHspQBk/SxZ4lD7W8Nmfijf6Y5zvvEECU8floSajt7arOTExby9m6l7tDyO8M65IngT5ZNqKgY0P4dWmcZziOsM8XJnT32O9H7L9sb9NiRiIycIsqj+rvt+rNk0q1bx8KIcIhrU59qoK/lgy7IczNHrvE3+VJU8tKlxi0YVbB0gNTFfuK++4d99ndlhRYULzc54hA4QFaQUaQatxZXqr+e+lLPayY3+N2g6bh4vwnhCuIPKz02D4YTDoZWpaWB7cSUP0juTVobJM4/5L3MzgM7QYFo9nG96e25bDaPEvO2M19dWLqfd+MMZOhcth9wXHzMpSxb2SYbn2G1wVIWmAJDYyeFxKb+xz4AzizZE/RBqpXIx08GHtJt/3uXwp/moAUGPmUBcmN3ATID9eeDyWw+VHxUAZGS5mAmsYEECI8ijo0y7pD/JzxLKXen5G2ZWAvmd3HNf4SFm/gqqaXHIUS/B1GiGYPZjY83Rpvlo+GvsYswaNVE8/QL+YwrrZQbPEFht57+SFpvdCICUoISNm+6fWfZjGpyLEpyJNuzj4hw6ZqXbpGfrkbYZl9MrK9+uQQH4HciRiYFSFEhq4KeDIYr8QNPAjE9y3g8nSiOQ7AAzmY8Lu43DEOjo2UM8coBLpGPmSdVtRx/ZTIw1wufxgC8HoQf7qg+CLM9s8jfEwGKW0sQy86FIrl8353xDvks/tvHjdHqakIE+AwKvd74tdbMqAdlXl0CSnQSw2XvIw2Pj939yPpZnO3e8b5XXIiPJkRmDhNDZ6CBYpQBS/BSUCby+NJerU2FmIwoGDtk+Ua+Ed1iLTtGOp2Y+2vKs4T1QWXSKHo0LvCQg3DkdpjqelZ/7iu9p+V/Z5xZwNl/MJ1+f7RRsEF2qUSeO/MtEOlFP1yBeECj+9rrOCSNtVHp8a9M7HsEDAH2gLILLYq9C/Siv4Mu20iKWDcIRxYYmFn4cc8wheWr4HNtV4RN+Z3nKGlK/ezzfSTbJ4+RGpmKXVeJpfDvNtb9tN3M20x3Y9jx84Q7lNQ+JQUiQQUgNh7h/npW4t//V9ZBxe/tPLGYwq2ZBipThuBUfZ6ovQXPxiz8k5Ekjj6aLGuYBvZPnmnp/n2t2qxXWv8EOhpAWO6vvP3d8feHnwdvHwtQAyWxXR9BiHGaPEX+/rqe1JXHdY08WB3DXuXwd9sS6WYWyQ2iS3Ymz6y3Tq9H4nFfVE/udgQca+el1erTye3P+w3WKKS7Z3FsaaWKbIa47HSTp7JPjfysPmaq/d7nQuIboBMaU45O/CGK6I8hUNb4aH/8DmoSlGX1sS+QcRacuz+wB+sEAcOqHrFwCdwyJfJ0Dw+69dFY/hcbRhab3HEM09ewWBoz6OMyr+Y5PMurZa4H9Qhu/Y+V+7XLRO65BBZ64Wug3hQ9h3VeNMR7gOjWx1T0lhYGxz/jz5zBpakAzrsmdn0tFqBj3d4szKtYfBBaik58uTPOdx0lLiUUCR0P2g+0XInRPlsQGflIOizEnPa0UoTuq6/c+X1DHdvf6PY9ZoM3c1xhLHyDCDM7olXAgt7Mmw7SGX7yiQFmNfDfvFXMT+h/fu506qKTyjzfiNN8lK0o+qbO1bZ1/u/IvUechzZliAeYVLpGfLL0mI2vmfe7aWbZ7pAn0/B7RDa86LDIFQENpXx3YFpI7QqzJSsg2y3jGI/SjCyjTgqPGi8wzU9fc48eTyBGEdzRK1w4Nl5zR04lvcjCOMQ+6a5ECu
*/