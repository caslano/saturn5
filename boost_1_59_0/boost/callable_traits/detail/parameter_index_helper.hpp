#ifndef BOOST_CLBL_TRTS_PARAMETER_INDEX_HELPER_HPP
#define BOOST_CLBL_TRTS_PARAMETER_INDEX_HELPER_HPP

#include <boost/callable_traits/detail/config.hpp>

namespace boost { namespace callable_traits { namespace detail {

template<std::size_t I, typename T, bool IgnoreThisPointer = false,
    bool AllowPlus1 = false, std::size_t Count = 0>
struct parameter_index_helper {

    using error_t = error_type<T>;

    using args_tuple = typename std::conditional<IgnoreThisPointer,
        typename detail::traits<T>::non_invoke_arg_types,
        typename detail::traits<T>::arg_types>::type;

    static constexpr bool has_parameter_list =
        !std::is_same<args_tuple, invalid_type>::value
        && !std::is_same<args_tuple, reference_error>::value;

    using temp_tuple = typename std::conditional<has_parameter_list,
        args_tuple, std::tuple<error_t>>::type;

    static constexpr std::size_t parameter_list_size =
        std::tuple_size<temp_tuple>::value;

    static constexpr bool is_out_of_range = has_parameter_list &&
        I >= parameter_list_size + static_cast<std::size_t>(AllowPlus1);

    static constexpr bool is_count_out_of_range = has_parameter_list &&
        I + Count > parameter_list_size + static_cast<std::size_t>(AllowPlus1);

    static constexpr std::size_t index =
        has_parameter_list && !is_out_of_range ? I : 0;

    static constexpr std::size_t count =
        has_parameter_list && !is_count_out_of_range ? Count : 0;

    using permissive_tuple = typename std::conditional<
        has_parameter_list && !is_out_of_range,
        args_tuple, std::tuple<error_t>>::type;

    using permissive_function = typename std::conditional<
        has_parameter_list && !is_out_of_range,
        T, error_t(error_t)>::type;
};

}}} // namespace boost::callable_traits::detail

#endif // #ifndef BOOST_CLBL_TRTS_PARAMETER_INDEX_HELPER_HPP

/* parameter_index_helper.hpp
l29qwmawcNEM9aeDydV6Lf9tj3llHNwT4GORcQyUiojsxwsbhreaIGl8vMA9HWS+oAHn4h3OQmxey2sUTmovHmb8Mqt4mnnMZZosp0jCTwEO5uigXmrCLb/jb9Sl0Ly8cklHFbUsNFf5ZbC+wYx8lOph6w4vDgtrNbh+o34gWmROvh+1xFe9dPyXOMDQ0jmIRntF0Jeby7Z2Zlu3h3Z5uVB79h0ccItg1RpTHHqUzckDDKP8C69pyOZrF4/IGqmk7bdJMjCstlL7udn3zyK7zrAoVywEjh79Qqn74Fk4jp/0P5w4wDTtXitsjv0oYZGPGymnO5p/eYqCihfIpkNecaIAXMWxrRICzZRv37jjRA1c0xb2HKtZAi2aLuGWecsbzzxvVh6Fp6oL0G+Ur+oa5jre4okZNsM6s4ewL44Es9MPAbC4h5saR9sxTd43p+yvHNi7/ERqDRJR6+ySYi4RqVjPlDHd9c5la5dlOUM3doGOLR0RSsitqFYlhPBpE+Ywu+bzlaqOccH+68W4utAoloRan5QnGaWU0Y8JXsBWSl6MzLuBEp/XUDJFrAS7okswgGaa7+Lp62COdhYkriXb5IztbyNo3i1Up/mGsFaA2y3gPNi0XEtdpdCVaXytCRDTeTkAufVXD2e3hvIeXtEbalBauLDqTV0NAqJgm+KmfM4XnL9W9+y0ikban//aA8AHeOtegx29mwS7TNEcue+Wa2UVtQ8GonraSvhYTxMuzV+OlyATjhHmNKGbypSt/4medOgpaUPoyoAgD3mlurYuYzC8tUTBts14gyJ3YOTnW8QfqGW4wWTKGDDvzqPD+CqdUtwHIOK1wd1cAobgFpl1f6QHrp68pLGRD+y7SC/cIl8TndqIPRNs0pwi5uIFB8NDzUxbv6E0BQe13lv89yI0shs00s4Cd6NB5fWbgwUerctHCxzepioa9/6FZO86cneKM36LV8WSFeOYjhkTdTaZ31m9TCAiogWNdTZmCPsqqGlTm+fzXiOZk4ZpKDfzZHRtvn0GjBr6XxhuWIm/oDwq+jjAr3vdS5XZf1JU+wUqSZINaS1eO2sre1ofltMfNNGdzV9ack3KZgYZTqECp1rFnE2e4OE7UCC68h9s1ei5yqajuYU+1A1dtmEhjUdhqMaerWL99THXX2j4/D49HXW9FKDARYgo5boJgJUNE+MzgpugKxg9AaSAkMs6K2EttZjwrs9OIf0uzC+L5fFu9adPEgUC4qCxzc4Oj0Ic6rcC3ZuzP170nUZnFGDpdMYr2bpy7iRUGZbtGFrNpY2jGbEqNEyzGFAl4LVsxZ7cVuk+EIkc+napG68BOXsmn3mmHzjDSFHPIpp9bnZxsbLW/g+cxkGpOC9TTIOgZa+Sx0HRwev6+shHs8cYK3fppNYpZAzKy0HpMFeFyq0Q6aRSNVzmb8Q8ggTgHaoV5ciSmMaPcvwektP2O2XQqegBu8Msud+uFmES1mfiY4XXMNUP1sgQFZie1KaDXzcAp11k50UZWaDqJjP4uHE9i0bZteQgcVM58c5zTWeG2d0mxEPI1IFL8+idKxqUocv7m0PphrbMoxd+2sSfYLWu16xjPupZo4oaNTYZAl0zvYG3SyrfZi1AfSyAlFGkPUDJKO0CE2G7/HuFK18UdLKW5Y8PZs5Tr9lbdZwJIZKzuk2zuhN4DBy1EURogaIGRvBnlasRnyxbDYwuHzfoGEZ7gkKWVTV+nWveYU+eQ5Ya6p0HFzG8UymW2lOjdXvCHEENHu0amiNywP61omJcFspO1q29ruopS0G5KT/Hly/bEXNi/G0a7lFg3eHAz+5melFNjUwxjYRljh9tT8oaAB/a54ZSc1CG8xddxfWFSVEzrc8UDKkkj2pd7yFas7AF43zYBnryBbNgHHbd+/KKrkMAcbuv1whjZ4VnbGkBltoxk3HHu17ak6V6n+EVm92drBRlNUDM5OIaXPu4P1Zf1rp6IPGbp+6D/XI91CGhgUJEGTtB7R4qhJ2ViYwVoVlMRNxmBevllUNLsPYgxm8isksi3KVvmGhZp0VCPfuDvISXVEnqeMgSBLk18G4D+dxKUxoT+aG0esGe+uLedR4ClwjOElz7Rke9ylDWWFAgoPTWZMvGO0n4qKnXKlb7r/4nk5chS00m0ZrV7Ob7moxwV0GoHKObzYj31RgRRhwI/3RFrG6uWn3++dSO2zKyXgp849H0vxjVRhFWjq48Bf7fF+xnY/0xQ5+2K4p1uqoHSu+gZurAPJfYo345aaCcqYQE71E+bWbJbHZaCZzDnzP9FJLeM2B++A9ujyT/Qc6ioUfojAqSKLbbpaU6IAn93PJ9k55ul8UfrnQrhKYwHcWD90eUejnN9K50iQrAjIjI3yC9qcDbXaiKk3uTDdP8akTBnkH+ED4DpciW3n8KT1rY74MLdjEDL5Ntcy4dR1A7oGZzTArNXFKYYHaRoMxw1Lrj8yeJjX3InLIk7xH8M5OdiLEme6inQ4mZ5b3Q61bvNrzSp2YpqBTwoomfgrtEMn/lLu6tmVZfqaMfoNTkZeR2EY+fbhQazKK3MeC2gAEB7EiZTsS6nTSoFtfHXwXMxpg2DhtVU6crGWVnKSbe0uvUmKIXVAzCG0hppZABhJ2R6OL8fGIEmVq+bXoT2ZpLHsz6kVMUHmror9CYM/xANRLWgS2XN2tVnTugOKSu3A2+D7FufbTCNstOrebKMlRB1yViHDxJuDtvizj5t3uNVbVjs+K/+A55LSRi4wbj3dHlN3ZayLAc7Ef85Rz4zN2W2Al0bk7nN0ve7X7YwIR2GuNouE0PKhZXDFKf05Etgp+rVduOAnn0EWB2ZjJvllQiRcgx556wnpoY0lkjmqrU9MncmA4Kua9ZcvNa+Nm0gfXPxjv2khULb2k9VWP7BahoGqYPPyNWkpbWSz8TyAi9Y9GNQHEXg6/ZUdvQ4dYmkDCxySfJH0UGgNNZl9iZDcR7z4O9fT5kYoI95/nl0oYL/ZnZhBdNpj9lPJwfl0XNfLNdhbly3nNjxO1R7etXu0sHlKNpfsRwLoOt0XX0bt+y4DbiQF47P9+cuWXb0SIqsmgZUbOfjCuaYE8ei5M9g82F0MuaiAxKOa/oUEwVDopB8kPIGWjjRrZURo/jLrWq2YBSrRQW9G2/Bgt3PqgdX2fDOdUsjVkc/1LZCnU6nD84TCreCr3twjQk4QigDwDfLzzBQfzE9uNr5nRzxqN8PUE+rDYTaEpEthPd5/rs96KJq5heRf5oEAJD1LQCtBnRB4nMXfdbCJGTS+1eFV0ur3gqBymaPvGo/sKQG59mAe+okuuEB245BmhaXewmM8uYG8M57MPD9YvA4nh+hdDhhfAcGH1HmScF/DZda2FJUfVqQ9PkvjTi7F8ae8nGAsMNaCcssDezui/g5ZQXq8yV3pvWDeEGPrDwxGVvmGr+A2tjWV5DB6bnPcQ3SlKNWyxwV0+lfAtiP+ToKDYOx9E1V52FhDmiWow4Qp2nd893y2akuJoE2gpTJ3SLgNQpHE/oEfdoHV8Uy2GKuxfY8YlNNxmOV0E0+GfPZYEfWNT6UpU8e3+MPlPTY/NizI95NOAQa+Alq7pZusajWHynfNIqDJmoh2BslnJmL1PMQVllv1XZFTNs3hlAC6dx713tPdJ0bxR4AFJUnuvkAIS7VPSWnJv5Pp7VNqM7AEFIjmahosfFeAMQfLhlF3XqZB5j1dA3QxJJ+NUMp+lO+87N4ez44eqG8YuBXLbRLFtzv/M6NX2hOl4E+xK7Pqrgy6sOW7QCrGbpXbymvNAC3jkZko8CcPloM91rjBRWj1zSgEahE/1aHwrUeSw5XOqCNrHefJdIUp7BIn97AzqH0vz9E988F+zO2UdkccIhQz/EVy9MlBw3ynaWXIst9oZku5GTJ4Y/a5xFBVTyBtaHfgVBnSbxmGDFzBfu1gZnxzkrFu/GJ3PqD43KGxxx/fOZWsiGHHzPVD3t9nSixqXYBeNHW6gMn9RqjMtdj675V+YF5EsasenhsQr+xGvvf/ipd+549UDoX9L0DPbnfNlPrLVIXkS7jo4ejFgWH4emeetjutvRdy1kvCTysEuqtqhLA466zfebsWyXaKiLEQZpK32bBo99ZwOvZU55waHFSALVCnf+veKtJbx2itjEOXMVaPaL418dPS2peqUKkPqmPM3qd/Hi0Rcuj+lSkTNkSGYv6JPH17upPfRq8WIqtYqpCNDMPa94ePnYgr0kOyvwutDpS/HlbYEqYytfjK5iEW8is6Q1WwtEUIKqE91453wQhkHK0IHIjGOSJiNo5NZ8L/N4KBkHZK0vP1Yn+JFu3ZtLGu4iGfbVCUzd4W5rjCvVy+0AapAXNFDF4yFDnyUkUj9h97yR9btWzViGVfRPRedY/RnhuiAur8m+CdYeqCJK3pIy6ko8zkN98u+U26MSjjTqFv2uoe7s3+zahpxxyNClYZFu1kYlipivzMf+z6bGKCSZrHGnUb9HBn6GGdY78k6/xh2BFLhpaQLB5gj6UwyOV79sZl8Al/ReE/+pT10/YAX4+XsMRfmaJsLv4vvf1EgPZcc6nL5ZGSd3UpmlJiofSkHlVeCgZ7gYOUQrl3nKw4xWcMaetbS1KbAnCLro6p9pCzI+hswyOBrWfxXa+osRN8TZbicIEHMvb1XGhfWwxnH0UKNgT1Jcwzazcjigh4fZQmGNMAWF686OB9KGkcHmm4PpzYeALi8HlwKH0DLTPGzlL45Tne1LLGWajATMhC0ZD2jcTf4+o0I8A0YmeQ/7lD9SvG7QxtHVVfCufKpaS7p69sY8sKuhLvc4dj5Hk3tyONZQ1qO6IXXVePW0PTa89Tj0Nss7TWXQyyl+DsPYGIs5o1re4t6C7bHZwTtbYfhIP12Th5ZLZx1amAyqRstjIkDFHFbHXdfMTJ8jP6nXo9gNdylF540i+nBjuHtLFk8xpGYa7gvsaBDPFliP0oUjTOrlsBwQWOOI3PsWnXGBEdX6InBrG/yz4BAg8ljXm6hW/0Atf45k7fM4sHs2mUdVeY9jW8plw2sGcwfijP7QxB5QZaxY+8rgNMmHvRvZ+xlv1+RMr4UuBTnWWT9Jrn+MylgnYpYp2pWizyeisdLCCAqbMIczB1FNjwuifxB3wU87pclDQ+MMOEXwGAqEhRp0ghtekPvAOEC4vNIecLo4HYybsMmK27zlIGfHmw/KSZA3f1JyBwWZpxUKGdQ7M7SQa3YkgU9c8Vd/8vvMRlAGPB71Hb6fgE6cC1TD7Wwpv64H55T5VCFkKWT7SefJes1GSICkqIAiflYKdwEes4gvd+r1bd3lJtM2sOjg2lEWbp5W5k3DeGL3fg/OQQjxvCjPOGQyUSauesYwYzqhR0sSQdTa1DNXFhogNOrc9sPJX7g0YizT6ilx49xosf1QNL1IFAHHszy0U7FgpuwBE4kFD7zWZR/nGZRwMbuSA3o332vVqdnoGTlb78IjmRjYobwzfDC84YPmAz0oZ3U8Z9+WeOoNL8ca3CqPaTpNb22C3nWZR4v/Vuv1mSomO01shnvumvdXvZc+WM2r8uy/1ZHvJqOSSPvn/TFuK/yGRLgt0sLz+a5FtojAmrTqm5aB2K50aQIZOXvSO8M0dpJmKSCS52QsWCSdmPHNvLGsY9xpV73tGtCuquqFyAVhTeQZBSHEagVIOIpkQ7z6whSBrcS/Q7eoP82DM9zOQ5HzqrM9S3dMJAgj6ZiDSbaPgJG7q2XZF4KVN/puTdy0GzmW2at4RP6eG+Z/bAfrnlI6yy6rD24Ni9NOc568VHOmu3NEhc30iQ0omqaV4R4LIhn5D+NgLpOYxSBRpFnzXS2NjB8RMIjdnFdugiwxwyiS2lii4aJRyZ52k7eSBzRvhxCSveyRZKuj6VuLHdMmieilJ9PMkM4QFJYIXfYNJAIVWpk2hQTi1iKnrtHPtB5nw9Pg1Wlu7wvj44RAMsby0eZ8Z/5dYtjxZPOaMPCccKNcc5UenKeRxVAs/5og+ZfKTzNR7BX96dxXvFIAKjd7PeTeduaVlT65DWG7fwNZ9JTQg/fK39DfuxHLcTo5dvYOnxizitNqTXpSrHBBy7Hf8wCperNR6odb3w8TvNfIxwEZc7X1xiGQe1R31LYtdqvH5mGzqrJxchEE3+DV16y4UmcYdqWtUjtmnGmA3r9oezxErcTnq7K6uRQzMfuCkEs6empNrWV8c//RW4Fl5lbnNyD4lbuLcb6wyKko3QfldODL0RP87Yl0LNoEzuqTztb80FQO1VAQngQa+MfkhSIbRlomPrSvOJjrSxiSX/Qx6pgZUzLm7m3N9tDxRW2bulLLQ1FDldEitMKd1gO/CKYXT+NdRwdPwWwd9LBO4yXL2j0Wfw//6LXBKeB+yizs2wwFouUQgqMSd7C1gCLl4EoUbe0/rWbGStjVExoCdYOmoHwQ/rBqywBVlokK2pib71mUh7nbNAsmOr2gl0HV91/ayGtX7qdYHmJzQDuUB476mFA9VfdvTUOgSdwOpJi84bllgIw8jn8EXZSFL9VgqOjpuDuTZg4XlY32YsUgXh/jOEWT6dZ8UA8z9UYA/Sjxl6yunqeFt10a/gl3/FO54EHzg0fsrjmXEZwBZ5KPwTphJX6BLBBpk0AYg0E05G4/OA8jQ+Gfes4wEdeEznHh7KzFwWoe+EnNpOpqNlpWrrQu3HVouJZqysBZesTmcthdhHhg3TIHeW/gnBIy3ri8WEmrMlppCAhB0a75YDh1o8sNraXk6uwUStU+ZFx9bpEt6xYvLyX3v+6u+UwUanLh5hfWbuPDSN+Qal83IqtgMBuI6ON0gVEun2TpUie6myP3HZOqLLwe2Yw8WHhwVy0SpvKKDLwkAt7duiUeCmUEufccNAt70cT2lBnuskslWcjzgfyZR/sRkLIclmvDcUHcqnAXTfBkRHAx7ua7F6Z9iMWgqf0+yXpcmWFN46rII7nJw3tHnugwXYs60Y7r3qrT/My0gQNKYWvzBcTBvYESqP1aYLQH2078YjC0UT1Ai4SnjnhKGaPsHSPG0ego1qzxrj+NdhpQSLPsM/Ds8EDKmCnTBKFhzbnrrt9PiYgZ/+wJMViMYVXKBed5v4+k18E0aUXSM6PRNKttK4A6idlC74haXmGu17yWJPVOgBnVua52AsK9IIWFenvFBad9ofyhCSgFQG7x59Sui2UhPc9R+TDhg/CAv2rR6NYEjfTmWf17cc23xMXpAnOph7w2ahh/pnK2HInJLd7jk1mxyXA4bH1KMYsHSLBurMRqo3xcDdsAOAhGJn2YNxynD67NzZAlWsCNH8I76ysJpgIJQR6zNIe8IMvwS8+BwmpXXD9dMmuR62xT3/zzddIYg2bpB+TeeF/WMDF+Uj8CyiPD/f+DzY6/5njuzYaPWWhWbnZFKb5pTgbGAsfgcfkA4vo0MRNEc4Yq4jxKZdEz8HA4nyS3Cr6mnRTBMx4IdjBybcUAngDtL5kw5BouD5NjcYlhKQONZ/padzzGkE2WEBgvU5aaZKW0D1NSG9E5Rpv3HC0Z//VaywHnNCEDx6VVFWhYROBbpPuIk5U07wd/mJn3llQKeTmoBRwBU2OD94yMCTrKPznczyRuDnq1BDDAf79KaH0O
*/