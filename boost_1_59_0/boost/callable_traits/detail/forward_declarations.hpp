#ifndef BOOST_CLBL_TRTS_DETAIL_FORWARD_DECLARATIONS
#define BOOST_CLBL_TRTS_DETAIL_FORWARD_DECLARATIONS
#include <boost/callable_traits/detail/config.hpp>
#include <boost/callable_traits/detail/default_callable_traits.hpp>

namespace boost { namespace callable_traits { namespace detail {

template<typename T>
struct function;

template<typename T>
struct has_normal_call_operator
{
    template<typename N, N Value>
    struct check { check(std::nullptr_t) {} };

    template<typename U>
    static std::int8_t test(
        check<decltype(&U::operator()), &U::operator()>);

    template<typename>
    static std::int16_t test(...);

    static constexpr bool value =
        sizeof(test<T>(nullptr)) == sizeof(std::int8_t);
};

struct callable_dummy {
    void operator()() {}
};

template<typename T>
using default_to_function_object = typename std::conditional<
    has_normal_call_operator<T>::value,
    T, callable_dummy>::type;

template<typename T>
struct pmf;

template<typename T>
struct pmd;

template<typename F, typename T = typename std::remove_reference<F>::type>
using function_object_base = typename std::conditional<
    has_normal_call_operator<T>::value,
    pmf<decltype(&default_to_function_object<T>::operator())>,
    default_callable_traits<T>>::type;

template<typename T, typename Base = function_object_base<T>>
struct function_object;

}}} // namespace boost::callable_traits::detail

#endif // #ifndef BOOST_CLBL_TRTS_DETAIL_FORWARD_DECLARATIONS

/* forward_declarations.hpp
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
*/