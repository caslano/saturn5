/*
Copyright (c) 2016 Modified Work Barrett Adair

Distributed under the Boost Software License, Version 1.0.
(See accompanying file LICENSE.md or copy at http://boost.org/LICENSE_1_0.txt)

HEADER GUARDS INTENTIONALLY OMITTED
DO NOT INCLUDE THIS HEADER DIRECTLY

macros used:

BOOST_CLBL_TRTS_INCLUDE_TRANSACTION_SAFE - the transaction_safe specifier for
    the current include (`transaction_safe` or nothing)

BOOST_CLBL_TRTS_IS_TRANSACTION_SAFE - `std::true_type` or `std::false_type`,
    tied on whether BOOST_CLBL_TRTS_INCLUDE_TRANSACTION_SAFE is `transaction_safe`

BOOST_CLBL_TRTS_TRANSACTION_SAFE_SPECIFIER - `transaction_safe` when
    BOOST_CLBL_TRTS_ENABLE_TRANSACTION_SAFE is enabled, otherwise nothing

BOOST_CLBL_TRTS_NOEXCEPT_SPEC - the noexcept specifier for
    the current include (`noexcept` or nothing)

BOOST_CLBL_TRTS_IS_NOEXCEPT - `std::true_type` or `std::false_type`,
    tied on whether BOOST_CLBL_TRTS_NOEXCEPT_SPEC is `noexcept`

BOOST_CLBL_TRTS_NOEXCEPT_SPECIFIER - `noexcept` if
    BOOST_CLBL_TRTS_ENABLE_NOEXCEPT_TYPES is defined, otherwise nothing
*/

template<typename Return, typename... Args>
struct function<
    BOOST_CLBL_TRTS_ST Return(BOOST_CLBL_TRTS_CC *)(Args...)
    BOOST_CLBL_TRTS_INCLUDE_TRANSACTION_SAFE
    BOOST_CLBL_TRTS_NOEXCEPT_SPEC>
 : default_callable_traits<> {

    static constexpr bool value = true;

    using traits = function;

    using return_type = Return;

    using arg_types = std::tuple<Args...>;
    using non_invoke_arg_types = arg_types;

    using type = BOOST_CLBL_TRTS_ST Return(BOOST_CLBL_TRTS_CC *)(Args...)
        BOOST_CLBL_TRTS_INCLUDE_TRANSACTION_SAFE;

    using function_type = Return(Args...);
    using qualified_function_type = function_type;
    using remove_varargs = type;

    using add_varargs =
        BOOST_CLBL_TRTS_ST Return (BOOST_CLBL_TRTS_VARARGS_CC *)(Args..., ...)
            BOOST_CLBL_TRTS_INCLUDE_TRANSACTION_SAFE
            BOOST_CLBL_TRTS_NOEXCEPT_SPEC;

    using is_noexcept = BOOST_CLBL_TRTS_IS_NOEXCEPT;

    using remove_noexcept = Return(BOOST_CLBL_TRTS_CC *)(Args...)
        BOOST_CLBL_TRTS_INCLUDE_TRANSACTION_SAFE;

    using add_noexcept = Return(BOOST_CLBL_TRTS_CC *)(Args...)
        BOOST_CLBL_TRTS_INCLUDE_TRANSACTION_SAFE
        BOOST_CLBL_TRTS_NOEXCEPT_SPECIFIER;

    using is_transaction_safe = BOOST_CLBL_TRTS_IS_TRANSACTION_SAFE;

    using remove_transaction_safe = Return(BOOST_CLBL_TRTS_CC *)(Args...)
        BOOST_CLBL_TRTS_NOEXCEPT_SPEC;

    using add_transaction_safe = Return(BOOST_CLBL_TRTS_CC *)(Args...)
        BOOST_CLBL_TRTS_TRANSACTION_SAFE_SPECIFIER
        BOOST_CLBL_TRTS_NOEXCEPT_SPEC;

    template<typename U>
    using apply_member_pointer =
        BOOST_CLBL_TRTS_ST Return(BOOST_CLBL_TRTS_CC U::*)(Args...)
            BOOST_CLBL_TRTS_INCLUDE_TRANSACTION_SAFE
            BOOST_CLBL_TRTS_NOEXCEPT_SPEC;

    template<typename NewReturn>
    using apply_return =
        BOOST_CLBL_TRTS_ST NewReturn(BOOST_CLBL_TRTS_CC *)(Args...)
            BOOST_CLBL_TRTS_INCLUDE_TRANSACTION_SAFE
            BOOST_CLBL_TRTS_NOEXCEPT_SPEC;

    template<template<class...> class Container>
    using expand_args = Container<Args...>;

    using is_member_pointer = std::false_type;
};


/* function_ptr_3.hpp
qT1BnvngfjEtmzfnYoRO9Cjbav5USZbSjWcRj8RK3HplRG4ttc9C/z9wJCuJcb8s5KEc6R6G4zqakk+zgVLFx6NyGb/Ad8EMobWwj10sTAxYRzk0tOkg1YY62mGfBwLZoNwyeRs6TfeKY8Bx33awr7jyVy9W5No7ETamLWMLsrKL9TIzbTP32HoDvglsER+mIg/iSDCnRx1/0lJbR/HogAIxjiI01Ykhrmonv9SEr8OCLvTSzYMlS1gv6LvYBDLgJ2ToQWQvFP4nCx4lRXj2aJ4Y9ivXEDFUOxpVW53yvYHJdUCuAwLfxM/k3yMPvqDyQiE/RGzEUrfou+BUpA0Dt0mVSUJC5VkaMA+aPupv2u4MXBmFtAggX5B4WEwzMiU8Wwph1uKFIevmi/QZzzIkqKRbX48KkkP4CCjCVksmr8bvHQP8Seos5Vm7HW8Uo0O1HRWdtzIV5u+R8mWZUvwPXMSOwLYTf0ayJyATB0y85BIgf8Jg/rPwfy1obD+7/Bpfv3GIvS+hMHPI1u/N7ZcbHjPIKCV0MmkBYGKoQMH/TSsJPQdEZhRGcKiXiA5ZfqNCBtIQoSHTOIYDRcoDB5EJaT/t1P3z+H795O38blq8Xynu/c/kMLH90dCtc7vfiC7tXKdlO7+8stJarRUVdy0Yk5Hq7OShrXMruB0P1kakjYztiGfUvUQ9jMwhw7CL4/1ktqlpe59HrQ3YS8DQzgqLegLSFQACc6OXAhunEeJOrgKBoGM91lPs6mXGrSzYsy70gGAecN7dlx+i1ruzO1gfB01FRUVnypCLJNvSk1k56NJPcxnvYldvo5SAUwhWcoSHlw9vJjMjO9b5aRUAw5QsUlomwCwAGh0J9VnMr9tunb8bKW0usrUQj6E3LeqQC67yukafMf75ElB+L0PYBFPJ3IfzzssQDoybmzua3YDp8fGkxIKSgkSg5NLKwoQgbNPFBqDB4Tem1n02NpFL/2S1pLi4vvSaoAqwtrom6VVNTa1EquV2GLM7yp6nk0Ix+N8iLh9uFiL+mJYJIVVlq6MA03IlNN1N8ET0G4G8P0M3PCxOvdlgc4BBvvxpcMXJBHHqf7Oo0WQQqO6VtjZ2StQ5UjlWAgd6sj26cv+gubnY+tIXwkhQqmprcnJyGnpr4+LiKgRpneiYl9lYedvvhMHQtBqMv8p6jFEwWpjeV0R/bw0SjRNJgxbaHMxIodoQArMIGf8jEBJKcXFxafo7SEC7FFApAfk9wj7GtWsEEiVc8Bgh+rnxuYR2jqnWWz61psxKwIvoULZMkSYXenp65ru7O+aAKqEJ4f9+6CsE5/oGPuzO9DdOyuWLA3WDAPtZjjCecauQgG4vwYBo/tuJX7ya3ZMAACz/0+LcI+MB8ZfJ4g8FNUxhYWFpgoE5OO7gQtzRKVO4SNm8DqcM5TjJ0WPO6rjNNC3slRLgOrZ2S3dUBYxp97SeBaTNG4imuriwnp4xbzxCSy+qISiTCMdF9HW8lT94yxk98MJ6/HeNVj/f+44BQMFYFcO88fqW324uQ6XBXLz+I6BgSTSVCBEDIK0oNFUkopZ8nbbvxWudHbZuPuEitU1+xDTxAG1jNkRciyUO95+QqLBwWaYoh/DkxYZWJ8Dqcp+agdIkq3XZl4B/Xr/g9MlbFi2WkAVkOqBc2zk4o5jI2HQ+5LznEpwASgMqjCFtnowSWB7RGDcWJO4Z7+NqoRnbCpa3xNMA3eyQI8Knyabpk+jlmQEeLOdKmz98jZmisKqqqxxS2cyq1/4osxG8jgRy3kdq2nIFHUUWkg3DN4TbUT9FsF8ZJBSgOKZJghFFoQZuE35Y7heNIKXN3ZcgGlUKd5Toj4QsRSveBIkvSvios6WtbTZugAZB0zdKPTjNESVvcxrPErBTWcRYgQTiGCs2FQI5skt9qjIFUg7ZEAdnwMRzmlxoPX7YuVneNrRvVXZm4cpD5jiJ9zBT6V0UVOsmrckagMkcIaBimVPlMtsmVGzzJFZ//3/AUyx01dFEU2k5deM2J07TxA5P2WwD8V/SiSn4Tt4UMD0VBigU9ZFQArHWByWjQKe20h0kAMirens0TB1K/znkkvJYbNOBk7omi5Vej/h2iC3y38NK5I8xpLiPLBGD32JA+/3kkzXd+mEsk3TxILP0PQCIXmBAiVdB7ymFQlIRD8ZcRMQr1d3hkUDBpoeOUtGzG6gQepUdG1KtBaNV8HCR+AJ8D5/IhbPkTr87WPx+3K9zAjtu6F6WUX3Zhn/Z/ooS8egg67Dt2FeMyu8xYMUFBF6mol2UNgdpSdvdqhEHQf3SsV8HCYQBTg+/Z/ZBvAriE9+ata7rRMYZRURt/MPjSONd9X27Xgd1entYatW1KQbhpbNTg4AwEkL7FgPZahRgxbTIHTFs/BbVs9Ib2ZoRFgpcrFQySEmmJ+fKIInxhN6uuNXQ0NuWcJX8xH2bxPVBIiyTQgpL5YRsBE/t14BuLf56rsbm2D4kLgIOCIkuiuy2ys9b4nlNp5HJJiryadeqrMQ2NcV6tPhw7IoKlPHhBi7ae+6zXVjcTkJARIqrgC6WuZbHHEgfOnBixdq+hQ+AQps7OCePwUZDYjuLSs5dbG6PfGLwCx8fyOx28YLl9Ohk88VIP6kgKTnBYvfzFU9+VDjKv0CzfUPRg2FvdKipKMoyoU4Sme5i/ve3RzC0m0mDis1uu2bb0iJOj8rd+5iyH/B4iLBQUMqG9StWgzz8zHoOnEoCQVk49yw6rpsgJP5je5FYk9ojZlGwVfh0shtNrCD+wKBH6pDHJsIMIkMHlXydisQV7F+oUGRSDOUZVGIyCWuuSbGOzAvy0uZLU/D5v5u/tMUsJtxgeI1UBSJOEDahi30Ccx+r0rwfCBEFR6o92NLwIUHKJwNOI2CWRLiPZdBfTJmWmek+agwvxdQpsgGU9MBaSDVYFoCVLzEA6gdtUnfBmua8q+sWhXbLx5xO+m25ZkA6eejKTglQcOt43dQHCYDltC3F+d1q4cYTxDhEVZbCpIbIibdeUzS66lLf0K7jyLXE9upamsqCK38Y6zhflpOZyhsDBxLsQMM/hcQITLtue0rT0dZojA2wziEzAJ3FERhojN9n2oejoseRVDzoWCJj2BnoE+g5i7B+8ehu68d1v5KGcPVZ+zXy198Pvink4mmPd6owj4LmCOT4VulMghA7gkcSOIkHcE5d15qQlSkMAzuBnTEHZ8VoP/HSi2vL6fGwkgePvUMAWmLIBjBVtZCTj4Xll2xhqIu5ZIbfQxRnqDJRqQEeQXvAMCXVZVpYOGa8yCQasUQlMIhgbwF4qqQsH/lli+wTYYy2xSLfUxVyRaX4h6YuQCE/TzNutgMLgo0FhN3Z8vqd7ljoYZ/a3AEWZPNrB+YswP8/ABWA6n+NWONIvfpcC7kY7uhmNRgCLcIES/RZouKcQLQcLqQcFLaEols31n6wYL4qyLiapXqFLWPnFzgxMcUxkho5g+5WGyrWgSljPhXATWCoaBhHFSBPBha5L5EiF7q+vRzXo4JHzAqXnY05pjHibMNiWFZuPSRS19u11P28CpL8Eu1ZpMr/HelITLuefs2X6imYU+XMQ26RZCOTBneInpdKo243YoPx1i0LSveLsmkSx7+0w6icZaY1h09CiDG760DCHpYDH2ICj81agUmOpq87ozZAqKjCqGOERJRJ2IA1/fI1dTUjgK9vuhuClaqtQBmkqKKIFakNIyppmUdFNcFWWtqBbL5Z61BdXsGp3q1N0CJjLNJlqaC/B7G9jjsshnBt59W5hrGcrX7aaywFs8eOmtIkn29A/tIPp7ydjB/lXlYoQpPD7XpZwWa9ajNmdERp8btFRPomLNFrTnSV3/etJ2ighJQp8Crz9/rhaKyYBVtDDqRdL3RIrAl5XFYada+xZuLr4056RkS+lhl+RpMYcwT0uKeiXTxqIKXUFBUKCiKkqI1NRCcUi9yAeC4l9SzyrJh15tK9NbOzk11Ze8tMZ0kmNDTrJLCcPdObQM/yNZ+33+ehWvI0BWUsKwe1TJ94XkdogbfAcLb385YHTvmO7Wq1pgrCd1ZsjAPOpWRihUEf9nYt2MVayfQXEIErkWx1OBzJlCwVKgIuIkL2p/PgEY3tdPYzLVM8T8/UCSZKxs5QsfrMeYoyJFKFqx6IX38U6baHj253fd3ukpCS56/W4areehpCjOZ9WCqWVqYx/c8gqvOpJYoM0/SoDB4P5ZqIoBGo5zW2nWaDEbgsfW9MI9LzJ1PzRFPm6kP41ajZPwlCgddj8NohjG81QUJcDpBCIyXDf60hTSpAejLUMKDgw2gwoyyOqDF7O73z3feXf5CieDOUDNOzs01Di5gFZmOgz3aU69yFm1TuLNha2GqKLLfdHP6195ROoJ65Z00x5NjRczojk2My45T/BwcqCjpEwDPcTFMtM5kIs+vHnSddRzoJLHFHHgElc6R92c8LvR3QyX+Bxr/AAR+WCPevG+b5gZjOwzLUq1KGCsM0qAfWsojhNA1/Hrp+NQ3yspr0wEisbBSZCPfgcFUMJqeS5xLDp3ZR6qbqzyX2uMpggxaNWu2t04QEtgYvLr8OlZZWNwz9nMeQnT93pKdV02cZ9d+v/bCsFdEAadL/GoJBY5uYFpjhomNaAKi17fnRcYnZEn3gydGQCtdua3VgYINMqJyf4AmetG3F8pnMppj6jvDZyvSri2gxuZgVP//i77K6fhu2j1HRs+sNHHCFCjGZm6F4/H7vcsvHXhGxdSh7EbQNWm1t0xxhHWfE5GCkUFgn/Xe6FUat9jouAc6L19MzODDh3IupCOjC4Oc5fTYbjTXrZF+Wx1QQDDqgRJWr3V001xw5QCExoQ7bfw4IG82mM5iUQoMlXJGqhAcYU8fel7ef5p1YPp1/Wd/4W1dRETBNHhlnFcaAb+qRxMw2f1LNljOQhyw1uSLC0wZ+FfX1Eu3Jr9XtyGVrGGOqlGMbS9m3dD6+12Y8f1+rCyuzoiC88k8Ya+UupIQOiO9+Pu8Ekoxlj7kCu4HyMAs9UUK13NyHRE+svPoAAHlOO0glM8EddLl8fl9SVgl8pHIJlQA2GUgi0t0zBr/Fr/M2WBlpdFYRx0h+ehZ5kQYsh8tnKRbczywnxv84RRBmPwR401wIc9PeMcz05kewJn0celpatnv6Sra8/n37xwnBLhtdjZsWB5puEJvHllk3AqBq07OEz6zDwozgEFry1IpaRxKx1r0rQJDzFZj4FlyY/H5FfTrVuZR3awXThgCpzpCaOEGjr/0Dz/nyIz7T1Dpb1k/S0qAlu2x5+QJ0OkLRG1wkIeuwHNOad5nyGRXb1TPjhaYC08Ku7w7UebIjPqttd2fR2DbI0RzBs6CoKKh8TAaUZnsWQeVqe+XADi0B0i6THxjKAygCM26nbSSZXPbwAJq5Cb2Uy4GGDDiNto49n/tOkQg7Upz4L0nhBk4clrpV+41x3RQc6DIxa9efIdRSSynxLAefxsrOqZy3FYzpeDuvKu1N0YuZBDzS0XwSahqaaAV+z2M9t5JMoS2eDnecdEFOztN3GoBCZI9K6edNG8FcG7wMz5GS1gQjnv+V/h5Huf8FU5OhdxdANp+CiQoVFQFmQm+NBQ4OW8miTBBUGaXqiD1n8BHGeU1APWvOBymrK9wYZZ7e+vF4YogpgOGPC6fHCYNiVgjrbaT6O0pol9h/8EAyX5G94UAMVFXFezEnFQxJhSObLnfkbtD10aHOa+v3MRZKXlcCUrXfu4oZQLVFtQSRIURILr195Q0J6dmxYUbLnRuZPAna5LdMTsPRkrXE4LP8dTNQarkwV9oC2PkU8kJHDw9f6BR0QeWFvHVCaMyuYzjq0vlvXTSLc/t5Epni3AlPB3ZG3lMD7MfS5zvabTM5vjukp1XvFebV/RRSvHK6sVgGlqMHZCSzGM1NvT1ITko6U0gVaNtDhubF6hlqWhaB9gs855e3X/DkKhIyPElrbnisNw/hELBTNSIPM4HtPizhJCe36Lm3sK1SEJCDebH+ISblxPgBTNXykZilLBewYM9bL4NIrqfFsZnXXHJGkRFbouRyuARVh/L1ngX+QSBJCdtGRG4SXAOGlns0ILk43n9fXkwdq7bV8toSgwZJ4ozkWHEILUAPWAXf9oSkfP4NZDqKwy/0aADWa/L3eONwr1oKXGbt0k2RISjOoyS79xWc088+r61j9GDKWXYkejfZIAcH7w+9Nmumfjyo5HKEBLwZLRbZWsRVdiEJfLY7OrlfNMAJeNjzfrbNrN3BvEOew1xTsv0y9z/mbVOQoDVj/7g/uXAH4wPE+1C0zsN/piTS2ZllTra2uqY5et+SOp5+EGWA437X0lOXS7BZ0JU7H6QqGRzb22wgQX2IbA790MwYIR4vH6OiZG2NWy0+f3O7qMhiUyHfux8hjubxNzzufDk9oS4oDLVhPKlvHoseG7dN7NKhoGSqfkEczB3s0dCD1vt5b4igWHVR7w9YNxsxfI+wnsabrgp6G87TTQfOYKW8Zf+amOy2vEksLhhLzWjEALc0TY5QXd5shJ5++XsjMxTWyETv0ttbwK43JIWPS7f7j/b9vNQRXPX0Qn3+L1IoRO7nXkOMMVtRx7cL2PNiYWCFl9nix7lgj2LVz2ybBolA5T4bF/2SqWWEkGSoJ/8LEnuHfsv9yILYOOnj2OkipaeWK312990uSrrO8I+QL2H8oA42OJ/QLc0zYQk5Ey/9dn40ANSYBmtAqxF6mROkUYJqdZbIkAt2i6FyD9d3NGI2+NSlie+QUwBTs2dHZ5d7tgS3xjafp4mjmxT4a/sGk6GcXe9E+MRLPscMS193pn6I9B7VHONwNXo6JISS8L5dSMLzxLN9PvT4t39GGmx/B0sbnLhf2uO6fBHIWhBS2MV7bDaOKKeavU2gA+pY/cTAu0c3dpReSOntyzcmZEbyAPENkA/zLAKPaVhV+/jXrfxd9tXv1Urzu6BnKFwBbwgoD4RBYgfYGmpKfs/zonTP7FyPHiGOIGSAfYhADM5c/erA29iIJUPB2sTgXzzZ0xhpfLYtK27ZPJ/aNZg1Rht63OChRV5NabXhXe9vMFBmj/CE8zJxnxLYZNrSU4bf9/6vV7UPbvvNhE7ekNBhIsYOzqaRO/HXf9Nq+f+FAY1fw4Uzpvs4D14zWsuLhHzV2P4ELobPi2STn7X1f3D2jsO0uJdadXIL/ykAMQ7xKefiBhGM8fhgN8tgr2vw8/j2PEZ6TOSKu2VkJj1Ggtucn0Uf33Fi4XlQvwYOVraioPJlqxY3Ex7c3iegY/n3Si3nzeWnj89w9zPAGCFLFZ2I5E9qxoBHoWXdljNTgfBgssG5xz9S9d26zwua0wuuKjK6ZAIrlHsNftYJA3nG2lwWcwT9uVu0tSsQEEJ/GAEAQTnVCH8Vs/AFcJ7be+yVPmvdXF0QTFnZ/fTfgxEzzC+9tjPjAGFmYGsyatINDwbeuoppn49L8+kqezuJbPmUugikGMepHj5t3uGvsN1BpTqY/xKDBnj7gVczt9XQPaD7loIhWzxPGwWAkEcufNOw5uvCWJAVYq3hwutHSdO3rvP8Uj6ddKK6Y0VJi57nNSQ2LG/U/3Nih4bsVbEG9t/5OYHcwLsH2E8KOemI
*/