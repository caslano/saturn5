/*
Copyright (c) 2016 Modified Work Barrett Adair

Distributed under the Boost Software License, Version 1.0.
(See accompanying file LICENSE.md or copy at http://boost.org/LICENSE_1_0.txt)

HEADER GUARDS INTENTIONALLY OMITTED
DO NOT INCLUDE THIS HEADER DIRECTLY

macros used:

BOOST_CLBL_TRTS_INCLUDE_TRANSACTION_SAFE - the transaction_safe specifier for
    the current include (`transaction_safe` or nothing)

BOOST_CLBL_TRTS_IS_TRANSACTION_SAFE - `std::true_type` or `std::false_type`,
    tied on whether BOOST_CLBL_TRTS_INCLUDE_TRANSACTION_SAFE is `transaction_safe`

BOOST_CLBL_TRTS_TRANSACTION_SAFE_SPECIFIER - `transaction_safe` when
    BOOST_CLBL_TRTS_ENABLE_TRANSACTION_SAFE is enabled, otherwise nothing

BOOST_CLBL_TRTS_NOEXCEPT_SPEC - the noexcept specifier for
    the current include (`noexcept` or nothing)

BOOST_CLBL_TRTS_IS_NOEXCEPT - `std::true_type` or `std::false_type`,
    tied on whether BOOST_CLBL_TRTS_NOEXCEPT_SPEC is `noexcept`

BOOST_CLBL_TRTS_NOEXCEPT_SPECIFIER - `noexcept` if
    BOOST_CLBL_TRTS_ENABLE_NOEXCEPT_TYPES is defined, otherwise nothing
*/

template<typename Return, typename... Args>
struct function<BOOST_CLBL_TRTS_ST Return(BOOST_CLBL_TRTS_VARARGS_CC *)(Args..., ...)
    BOOST_CLBL_TRTS_INCLUDE_TRANSACTION_SAFE
    BOOST_CLBL_TRTS_NOEXCEPT_SPEC>
 : default_callable_traits<> {

    static constexpr bool value = true;

    using has_varargs = std::true_type;

    using traits = function;

    using return_type = Return;

    using arg_types = std::tuple<Args...>;
    using non_invoke_arg_types = arg_types;

    using type =
        BOOST_CLBL_TRTS_ST Return(BOOST_CLBL_TRTS_VARARGS_CC *)(Args..., ...)
            BOOST_CLBL_TRTS_INCLUDE_TRANSACTION_SAFE
            BOOST_CLBL_TRTS_NOEXCEPT_SPEC;

    using function_type = Return(Args..., ...);

    using qualified_function_type = function_type;

    using remove_varargs =
        BOOST_CLBL_TRTS_ST Return(BOOST_CLBL_TRTS_CC *)(Args...)
            BOOST_CLBL_TRTS_INCLUDE_TRANSACTION_SAFE;

    using add_varargs = type;

    using is_noexcept = BOOST_CLBL_TRTS_IS_NOEXCEPT;

    using remove_noexcept = BOOST_CLBL_TRTS_ST Return(BOOST_CLBL_TRTS_CC *)(Args..., ...)
        BOOST_CLBL_TRTS_INCLUDE_TRANSACTION_SAFE;

    using add_noexcept = BOOST_CLBL_TRTS_ST Return(BOOST_CLBL_TRTS_CC *)(Args..., ...)
        BOOST_CLBL_TRTS_INCLUDE_TRANSACTION_SAFE
        BOOST_CLBL_TRTS_NOEXCEPT_SPECIFIER;

    using is_transaction_safe = BOOST_CLBL_TRTS_IS_TRANSACTION_SAFE;

    using remove_transaction_safe = Return(BOOST_CLBL_TRTS_VARARGS_CC *)(Args..., ...)
        BOOST_CLBL_TRTS_NOEXCEPT_SPEC;

    using add_transaction_safe = Return(BOOST_CLBL_TRTS_VARARGS_CC *)(Args..., ...)
        BOOST_CLBL_TRTS_TRANSACTION_SAFE_SPECIFIER
        BOOST_CLBL_TRTS_NOEXCEPT_SPEC;

    template<typename U>
    using apply_member_pointer =
        BOOST_CLBL_TRTS_ST Return(BOOST_CLBL_TRTS_VARARGS_CC U::*)(Args..., ...)
            BOOST_CLBL_TRTS_INCLUDE_TRANSACTION_SAFE
            BOOST_CLBL_TRTS_NOEXCEPT_SPEC;

    template<typename NewReturn>
    using apply_return =
        BOOST_CLBL_TRTS_ST NewReturn(BOOST_CLBL_TRTS_VARARGS_CC *)(Args..., ...)
            BOOST_CLBL_TRTS_INCLUDE_TRANSACTION_SAFE
            BOOST_CLBL_TRTS_NOEXCEPT_SPEC;

    template<template<class...> class Container>
    using expand_args = Container<Args...>;

    using is_member_pointer = std::false_type;
};


/* function_ptr_varargs_3.hpp
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
*/