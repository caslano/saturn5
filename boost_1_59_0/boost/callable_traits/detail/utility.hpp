/*

@Copyright Barrett Adair 2015-2017
Distributed under the Boost Software License, Version 1.0.
(See accompanying file LICENSE.md or copy at http://boost.org/LICENSE_1_0.txt)

*/

#ifndef BOOST_CLBL_TRTS_DETAIL_UTILITY_HPP
#define BOOST_CLBL_TRTS_DETAIL_UTILITY_HPP

#include <boost/callable_traits/detail/config.hpp>
#include <boost/callable_traits/detail/sfinae_errors.hpp>
#include <boost/callable_traits/detail/qualifier_flags.hpp>

namespace boost { namespace callable_traits { namespace detail {

struct cdecl_tag{};
struct stdcall_tag{};
struct fastcall_tag{};
struct pascal_tag{};

struct invalid_type { invalid_type() = delete; };
struct reference_error { reference_error() = delete; };

template<typename T>
using error_type = typename std::conditional<
    std::is_reference<T>::value, reference_error, invalid_type>::type;

#ifdef BOOST_CLBL_TRTS_DISABLE_ABOMINABLE_FUNCTIONS
struct abominable_functions_not_supported_on_this_compiler{};
#endif

// used to convey "this type doesn't matter" in code
struct dummy {};

// used as return type in failed SFINAE tests
struct substitution_failure : std::false_type{};

template<bool Value>
using bool_type = std::integral_constant<bool, Value>;

// shorthand for std::tuple_element
template<std::size_t I, typename Tup>
using at = typename std::tuple_element<I, Tup>::type;

template<typename T, typename Class>
using add_member_pointer = T Class::*;

template<typename L, typename R, typename ErrorType>
 using fail_when_same = fail_if<std::is_same<L, R>::value, ErrorType>;

template<typename T, typename ErrorType,
    typename U = typename std::remove_reference<T>::type>
using try_but_fail_if_invalid = sfinae_try<T,
    fail_when_same<U, invalid_type, ErrorType>,
    fail_when_same<U, reference_error,
        reference_type_not_supported_by_this_metafunction>>;

template<typename T, typename ErrorType,
    typename U = typename std::remove_reference<T>::type,
    bool is_reference_error = std::is_same<reference_error, U>::value>
using fail_if_invalid = fail_if<
    std::is_same<U, invalid_type>::value || is_reference_error,
    typename std::conditional<is_reference_error,
        reference_type_not_supported_by_this_metafunction, ErrorType>::type>;

template<typename T, typename Fallback>
using fallback_if_invalid = typename std::conditional<
    std::is_same<T, invalid_type>::value, Fallback, T>::type;

template<typename T, template<class> class Alias, typename U = Alias<T>>
struct force_sfinae {
    using type = U;
};

template<typename T>
using shallow_decay = typename std::remove_cv<
    typename std::remove_reference<T>::type>::type;

template<typename T>
struct is_reference_wrapper_t {
    using type = std::false_type;
};

template<typename T>
struct is_reference_wrapper_t<std::reference_wrapper<T>> {
    using type = std::true_type;
};

template<typename T>
using is_reference_wrapper =
    typename is_reference_wrapper_t<shallow_decay<T>>::type;

template<typename T, typename = std::true_type>
struct unwrap_reference_t {
    using type = T;
};

template<typename T>
struct unwrap_reference_t<T, is_reference_wrapper<T>> {
    using type = decltype(std::declval<T>().get());
};

// removes std::reference_wrapper
template<typename T>
using unwrap_reference = typename unwrap_reference_t<T>::type;

}}} // namespace boost::callable_traits::detail

#endif // #ifndef BOOST_CLBL_TRTS_DETAIL_UTILITY_HPP

/* utility.hpp
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
*/