/*

@Copyright Barrett Adair 2015-2017
Distributed under the Boost Software License, Version 1.0.
(See accompanying file LICENSE.md or copy at http://boost.org/LICENSE_1_0.txt)

*/

#ifndef BOOST_CLBL_TRTS_IS_INVOCABLE_HPP
#define BOOST_CLBL_TRTS_IS_INVOCABLE_HPP

#include <boost/callable_traits/detail/core.hpp>
#include <boost/callable_traits/detail/is_invocable_impl.hpp>

namespace boost { namespace callable_traits {

//[ is_invocable_hpp
/*`[section:ref_is_invocable is_invocable]
[heading Header]
``#include <boost/callable_traits/is_invocable.hpp>``
[heading Definition]
*/

// inherits from either std::true_type or std::false_type
template<typename T, typename... Args>
struct is_invocable;

// inherits from either std::true_type or std::false_type
template<typename Ret, typename T, typename... Args>
struct is_invocable_r;

//<-
template<typename T, typename... Args>
struct is_invocable : detail::is_invocable_impl<T, Args...>::type {
    using type = typename detail::is_invocable_impl<T, Args...>::type;
};

template<typename Ret, typename T, typename... Args>
struct is_invocable_r
  : detail::is_invocable_r_impl<
        typename detail::is_invocable_impl<T, Args...>::type, Ret, T, Args...>::type
{
    using type = typename detail::is_invocable_r_impl<
        typename detail::is_invocable_impl<T, Args...>::type, Ret, T, Args...>::type;
};

#ifdef BOOST_CLBL_TRTS_DISABLE_VARIABLE_TEMPLATES

template<typename T, typename... Args>
struct is_invocable_v {
    static_assert(std::is_same<T, detail::dummy>::value,
        "Variable templates not supported on this compiler.");
};

template<typename Ret, typename T, typename... Args>
struct is_invocable_r_v {
    static_assert(std::is_same<T, detail::dummy>::value,
        "Variable templates not supported on this compiler.");
};

#else
//->
// only available when variable templates are supported
template<typename T, typename... Args>
//<-
BOOST_CLBL_TRAITS_INLINE_VAR
//->
constexpr bool is_invocable_v = //see below
//<-
    detail::is_invocable_impl<T, Args...>::type::value;
//->

// only available when variable templates are supported
template<typename Ret, typename T, typename... Args>
//<-
BOOST_CLBL_TRAITS_INLINE_VAR
//->
constexpr bool is_invocable_r_v = //see below
//<-
    detail::is_invocable_r_impl<
        typename detail::is_invocable_impl<T, Args...>::type,
        Ret, T, Args...>::type::value;
#endif

}} // namespace boost::callable_traits
//->

/*`
[heading Constraints]
* none

[heading Behavior]
* standalone c++11 implementation of c++17 `std::is_invocable`, `std::is_invocable_r`
[note ref-qualified overloads of `operator()` with different signatures are not handled correctly yet.]

[heading Example Program]
[import ../example/is_invocable.cpp]
[is_invocable]
[endsect]
*/
//]

#endif // #ifndef BOOST_CLBL_TRTS_IS_INVOCABLE_HPP

/* is_invocable.hpp
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
*/