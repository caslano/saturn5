/*

@Copyright Barrett Adair 2015-2017
Distributed under the Boost Software License, Version 1.0.
(See accompanying file LICENSE.md or copy at http://boost.org/LICENSE_1_0.txt)

*/

#ifndef BOOST_CLBL_TRTS_class_of_HPP
#define BOOST_CLBL_TRTS_class_of_HPP

#include <boost/callable_traits/detail/core.hpp>

namespace boost { namespace callable_traits {

//[ class_of_hpp
/*`
[section:ref_class_of class_of]
[heading Header]
``#include <boost/callable_traits/class_of.hpp>``
[heading Definition]
*/

template<typename T>
using class_of_t = //see below
//<-
    detail::try_but_fail_if_invalid<
        typename detail::traits<detail::shallow_decay<T>>::class_type,
        type_is_not_a_member_pointer>;

namespace detail {

    template<typename T, typename = std::false_type>
    struct class_of_impl {};

    template<typename T>
    struct class_of_impl <T, typename std::is_same<
        class_of_t<T>, detail::dummy>::type>
    {
        using type = class_of_t<T>;
    };
}

//->

template<typename T>
struct class_of : detail::class_of_impl<T> {};

//<-
}} // namespace boost::callable_traits
//->

/*`
[heading Constraints]
* `T` must be a member pointer

[heading Behavior]
* A substitution failure occurs if the constraints are violated.
* The aliased type is the parent class of the member. In other words, if `T` is expanded to `U C::*`, the aliased type is `C`.

[heading Input/Output Examples]
[table
    [[`T`]                              [`class_of_t<T>`]]
    [[`int foo::*`]                     [`foo`]]
    [[`void(foo::* const &)() const`]           [`foo`]]
]

[heading Example Program]
[import ../example/class_of.cpp]
[class_of]
[endsect]
*/
//]

#endif // #ifndef BOOST_CLBL_TRTS_class_of_HPP

/* class_of.hpp
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
*/