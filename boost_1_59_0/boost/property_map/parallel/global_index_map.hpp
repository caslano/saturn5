// Copyright 2005 The Trustees of Indiana University.

// Use, modification and distribution is subject to the Boost Software
// License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

//  Authors: Douglas Gregor
//           Andrew Lumsdaine
#ifndef BOOST_PARALLEL_GLOBAL_INDEX_MAP_HPP
#define BOOST_PARALLEL_GLOBAL_INDEX_MAP_HPP

#include <boost/property_map/property_map.hpp>
#include <vector>
#include <boost/shared_ptr.hpp>

namespace boost { namespace parallel {

template<typename IndexMap, typename GlobalMap>
class global_index_map
{
public:
  typedef typename property_traits<IndexMap>::key_type key_type;
  typedef typename property_traits<IndexMap>::value_type value_type;
  typedef value_type reference;
  typedef readable_property_map_tag category;

  template<typename ProcessGroup>
  global_index_map(ProcessGroup pg, value_type num_local_indices, 
                   IndexMap index_map, GlobalMap global)
    : index_map(index_map), global(global)
  {
    typedef typename ProcessGroup::process_id_type process_id_type;
    starting_index.reset(new std::vector<value_type>(num_processes(pg) + 1));
    send(pg, 0, 0, num_local_indices);
    synchronize(pg);
    
    // Populate starting_index in all processes
    if (process_id(pg) == 0) {
      (*starting_index)[0] = 0;
      for (process_id_type src = 0; src < num_processes(pg); ++src) {
        value_type n;
        receive(pg, src, 0, n);
        (*starting_index)[src + 1] = (*starting_index)[src] + n;
      }
      for (process_id_type dest = 1; dest < num_processes(pg); ++dest)
        send(pg, dest, 1, &starting_index->front(), num_processes(pg));
      synchronize(pg);
    } else {
      synchronize(pg);
      receive(pg, 0, 1, &starting_index->front(), num_processes(pg));
    }
  }

  friend inline value_type 
  get(const global_index_map& gim, const key_type& x)
  {
    using boost::get;
    return (*gim.starting_index)[get(gim.global, x).first]
           + get(gim.index_map, x);
  }

private:
  shared_ptr<std::vector<value_type> > starting_index;
  IndexMap index_map;
  GlobalMap global;
};

} } // end namespace boost::parallel

#endif // BOOST_PARALLEL_GLOBAL_INDEX_MAP_HPP

/* global_index_map.hpp
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
*/