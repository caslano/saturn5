// Copyright (C) 2007 Matthias Troyer
//
// Use, modification and distribution is subject to the Boost Software
// License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
//
// This file contains helper data structures for use in transmitting
// properties. The basic idea is to optimize away any storage for the
// properties when no properties are specified.
#ifndef BOOST_PARALLEL_DETAIL_UNTRACKED_PAIR_HPP
#define BOOST_PARALLEL_DETAIL_UNTRACKED_PAIR_HPP

#include <boost/mpi/datatype.hpp>
#include <utility> // for std::pair
#include <boost/serialization/utility.hpp>

namespace boost { namespace parallel { namespace detail {

/**
 * This structure is like std::pair, with the only difference
 * that tracking in the serialization library is turned off.
 */
 
template<typename T, typename U>
struct untracked_pair : public std::pair<T,U>
{
  untracked_pair() {}

  untracked_pair(const T& t, const U& u)
  : std::pair<T,U>(t,u) {}

  template<class T1, class U1>
  untracked_pair(std::pair<T1,U1> const& p)
  : std::pair<T,U>(p) {}  
};

template<typename T, typename U>
inline untracked_pair<T, U>
make_untracked_pair(const T& t, const U& u)
{
  return untracked_pair<T,U>(t,u);
}

} } } // end namespace boost::parallel::detail

namespace boost { namespace mpi {

template<typename T, typename U>
struct is_mpi_datatype<boost::parallel::detail::untracked_pair<T, U> >
  : is_mpi_datatype<std::pair<T,U> > {};

} } // end namespace boost::mpi

namespace boost { namespace serialization {

// pair
template<class Archive, class F, class S>
inline void serialize(
    Archive & ar,
    boost::parallel::detail::untracked_pair<F, S> & p,
    const unsigned int /* file_version */
){
    ar & boost::serialization::make_nvp("first", p.first);
    ar & boost::serialization::make_nvp("second", p.second);
}

template<typename T, typename U>
struct is_bitwise_serializable<
        boost::parallel::detail::untracked_pair<T, U> >
  : is_bitwise_serializable<std::pair<T, U> > {};

template<typename T, typename U>
struct implementation_level<boost::parallel::detail::untracked_pair<T, U> >
 : mpl::int_<object_serializable> {} ;

template<typename T, typename U>
struct tracking_level<boost::parallel::detail::untracked_pair<T, U> >
 : mpl::int_<track_never> {} ;

} } // end namespace boost::serialization

#endif // BOOST_PARALLEL_DETAIL_UNTRACKED_PAIR_HPP

/* untracked_pair.hpp
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
*/