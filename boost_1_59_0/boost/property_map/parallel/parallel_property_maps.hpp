//  (C) Copyright Jeremy Siek 1999-2001.
//  Copyright (C) 2006 Trustees of Indiana University
//  Authors: Douglas Gregor and Jeremy Siek

// Distributed under the Boost Software License, Version 1.0. (See
// accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

//  See http://www.boost.org/libs/property_map for documentation.

#ifndef BOOST_PROPERTY_MAP_PARALLEL_PROPERTY_MAPS_HPP
#define BOOST_PROPERTY_MAP_PARALLEL_PROPERTY_MAPS_HPP

// Parallel property maps moved over from <boost/property_map/property_map.hpp>
// as part of refactoring out all parallel code from sequential property map
// library.

#include <boost/assert.hpp>
#include <boost/config.hpp>
#include <boost/static_assert.hpp>
#include <cstddef>
#include <boost/concept_archetype.hpp>
#include <boost/mpl/assert.hpp>
#include <boost/mpl/or.hpp>
#include <boost/mpl/and.hpp>
#include <boost/mpl/has_xxx.hpp>
#include <boost/type_traits/is_same.hpp>
#include <boost/property_map/property_map.hpp>

#include <boost/property_map/parallel/distributed_property_map.hpp>
#include <boost/property_map/parallel/local_property_map.hpp>

namespace boost {
/** Distributed iterator property map.
 *
 * This specialization of @ref iterator_property_map builds a
 * distributed iterator property map given the local index maps
 * generated by distributed graph types that automatically have index
 * properties. 
 *
 * This specialization is useful when creating external distributed
 * property maps via the same syntax used to create external
 * sequential property maps.
 */
template<typename RandomAccessIterator, typename ProcessGroup,
         typename GlobalMap, typename StorageMap, 
         typename ValueType, typename Reference>
class iterator_property_map
        <RandomAccessIterator, 
         local_property_map<ProcessGroup, GlobalMap, StorageMap>,
         ValueType, Reference>
  : public parallel::distributed_property_map
             <ProcessGroup, 
              GlobalMap, 
              iterator_property_map<RandomAccessIterator, StorageMap,
                                    ValueType, Reference> >
{
  typedef iterator_property_map<RandomAccessIterator, StorageMap, 
                                ValueType, Reference> local_iterator_map;

  typedef parallel::distributed_property_map<ProcessGroup, GlobalMap,
                                             local_iterator_map> inherited;

  typedef local_property_map<ProcessGroup, GlobalMap, StorageMap>
    index_map_type;
  typedef iterator_property_map self_type;

public:
  iterator_property_map() { }

  iterator_property_map(RandomAccessIterator cc, const index_map_type& id)
    : inherited(id.process_group(), id.global(), 
                local_iterator_map(cc, id.base())) { }
};

/** Distributed iterator property map.
 *
 * This specialization of @ref iterator_property_map builds a
 * distributed iterator property map given a distributed index
 * map. Only the local portion of the distributed index property map
 * is utilized.
 *
 * This specialization is useful when creating external distributed
 * property maps via the same syntax used to create external
 * sequential property maps.
 */
template<typename RandomAccessIterator, typename ProcessGroup,
         typename GlobalMap, typename StorageMap, 
         typename ValueType, typename Reference>
class iterator_property_map<
        RandomAccessIterator, 
        parallel::distributed_property_map<ProcessGroup,GlobalMap,StorageMap>,
        ValueType, Reference
      >
  : public parallel::distributed_property_map
             <ProcessGroup, 
              GlobalMap,
              iterator_property_map<RandomAccessIterator, StorageMap,
                                    ValueType, Reference> >
{
  typedef iterator_property_map<RandomAccessIterator, StorageMap,
                                ValueType, Reference> local_iterator_map;

  typedef parallel::distributed_property_map<ProcessGroup, GlobalMap,
                                             local_iterator_map> inherited;

  typedef parallel::distributed_property_map<ProcessGroup, GlobalMap, 
                                             StorageMap>
    index_map_type;

public:
  iterator_property_map() { }

  iterator_property_map(RandomAccessIterator cc, const index_map_type& id)
    : inherited(id.process_group(), id.global(),
                local_iterator_map(cc, id.base())) { }
};

namespace parallel {
// Generate an iterator property map with a specific kind of ghost
// cells
template<typename RandomAccessIterator, typename ProcessGroup,
         typename GlobalMap, typename StorageMap>
distributed_property_map<ProcessGroup, 
                         GlobalMap,
                         iterator_property_map<RandomAccessIterator, 
                                               StorageMap> >
make_iterator_property_map(RandomAccessIterator cc,
                           local_property_map<ProcessGroup, GlobalMap, 
                                              StorageMap> index_map)
{
  typedef distributed_property_map<
            ProcessGroup, GlobalMap,
            iterator_property_map<RandomAccessIterator, StorageMap> >
    result_type;
  return result_type(index_map.process_group(), index_map.global(),
                     make_iterator_property_map(cc, index_map.base()));
}

} // end namespace parallel

/** Distributed safe iterator property map.
 *
 * This specialization of @ref safe_iterator_property_map builds a
 * distributed iterator property map given the local index maps
 * generated by distributed graph types that automatically have index
 * properties. 
 *
 * This specialization is useful when creating external distributed
 * property maps via the same syntax used to create external
 * sequential property maps.
 */
template<typename RandomAccessIterator, typename ProcessGroup,
         typename GlobalMap, typename StorageMap, typename ValueType,
         typename Reference>
class safe_iterator_property_map
        <RandomAccessIterator, 
         local_property_map<ProcessGroup, GlobalMap, StorageMap>,
         ValueType, Reference>
  : public parallel::distributed_property_map
             <ProcessGroup, 
              GlobalMap,
              safe_iterator_property_map<RandomAccessIterator, StorageMap,
                                         ValueType, Reference> >
{
  typedef safe_iterator_property_map<RandomAccessIterator, StorageMap, 
                                     ValueType, Reference> local_iterator_map;

  typedef parallel::distributed_property_map<ProcessGroup, GlobalMap,
                                             local_iterator_map> inherited;

  typedef local_property_map<ProcessGroup, GlobalMap, StorageMap> index_map_type;

public:
  safe_iterator_property_map() { }

  safe_iterator_property_map(RandomAccessIterator cc, std::size_t n, 
                             const index_map_type& id)
    : inherited(id.process_group(), id.global(),
                local_iterator_map(cc, n, id.base())) { }
};

/** Distributed safe iterator property map.
 *
 * This specialization of @ref safe_iterator_property_map builds a
 * distributed iterator property map given a distributed index
 * map. Only the local portion of the distributed index property map
 * is utilized.
 *
 * This specialization is useful when creating external distributed
 * property maps via the same syntax used to create external
 * sequential property maps.
 */
template<typename RandomAccessIterator, typename ProcessGroup,
         typename GlobalMap, typename StorageMap, 
         typename ValueType, typename Reference>
class safe_iterator_property_map<
        RandomAccessIterator, 
        parallel::distributed_property_map<ProcessGroup,GlobalMap,StorageMap>,
        ValueType, Reference>
  : public parallel::distributed_property_map
             <ProcessGroup, 
              GlobalMap,
              safe_iterator_property_map<RandomAccessIterator, StorageMap,
                                         ValueType, Reference> >
{
  typedef safe_iterator_property_map<RandomAccessIterator, StorageMap,
                                     ValueType, Reference> local_iterator_map;

  typedef parallel::distributed_property_map<ProcessGroup, GlobalMap,
                                             local_iterator_map> inherited;

  typedef parallel::distributed_property_map<ProcessGroup, GlobalMap, 
                                             StorageMap>
    index_map_type;

public:
  safe_iterator_property_map() { }

  safe_iterator_property_map(RandomAccessIterator cc, std::size_t n, 
                             const index_map_type& id)
    : inherited(id.process_group(), id.global(), 
                local_iterator_map(cc, n, id.base())) { }
};

}

#include <boost/property_map/vector_property_map.hpp>
#include <boost/property_map/parallel/vector_property_map.hpp>

#endif /* BOOST_PROPERTY_MAP_PARALLEL_PROPERTY_MAPS_HPP */

/* parallel_property_maps.hpp
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
*/