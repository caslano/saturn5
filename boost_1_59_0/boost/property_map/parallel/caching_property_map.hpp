// Copyright 2004 The Trustees of Indiana University.

// Use, modification and distribution is subject to the Boost Software
// License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

//  Authors: Douglas Gregor
//           Andrew Lumsdaine
#ifndef BOOST_PARALLEL_CACHING_PROPERTY_MAP_HPP
#define BOOST_PARALLEL_CACHING_PROPERTY_MAP_HPP

#include <boost/property_map/property_map.hpp>

namespace boost { 

// This probably doesn't belong here
template<typename Key, typename Value>
inline void local_put(dummy_property_map, const Key&, const Value&) {}

namespace parallel {

/** Property map that caches values placed in it but does not
 * broadcast values to remote processors.  This class template is
 * meant as an adaptor for @ref distributed_property_map that
 * suppresses communication in the event of a remote @c put operation
 * by mapping it to a local @c put operation.
 *
 * @todo Find a better name for @ref caching_property_map
 */
template<typename PropertyMap>
class caching_property_map
{
public:
  typedef typename property_traits<PropertyMap>::key_type   key_type;
  typedef typename property_traits<PropertyMap>::value_type value_type;
  typedef typename property_traits<PropertyMap>::reference  reference;
  typedef typename property_traits<PropertyMap>::category   category;

  explicit caching_property_map(const PropertyMap& property_map)
    : property_map(property_map) {}

  PropertyMap&        base()       { return property_map; }
  const PropertyMap&  base() const { return property_map; }

  template<typename Reduce>
  void set_reduce(const Reduce& reduce)
  { property_map.set_reduce(reduce); }

  void reset() { property_map.reset(); }

#if 0
  reference operator[](const key_type& key) const
  {
    return property_map[key];
  }
#endif

private:
  PropertyMap property_map;
};

template<typename PropertyMap, typename Key>
inline typename caching_property_map<PropertyMap>::value_type
get(const caching_property_map<PropertyMap>& pm, const Key& key)
{ return get(pm.base(), key); }

template<typename PropertyMap, typename Key, typename Value>
inline void
local_put(const caching_property_map<PropertyMap>& pm, const Key& key,
          const Value& value)
{ local_put(pm.base(), key, value); }

template<typename PropertyMap, typename Key, typename Value>
inline void
cache(const caching_property_map<PropertyMap>& pm, const Key& key,
      const Value& value)
{ cache(pm.base(), key, value); }

template<typename PropertyMap, typename Key, typename Value>
inline void
put(const caching_property_map<PropertyMap>& pm, const Key& key,
    const Value& value)
{ local_put(pm.base(), key, value); }

template<typename PropertyMap>
inline caching_property_map<PropertyMap>
make_caching_property_map(const PropertyMap& pm)
{ return caching_property_map<PropertyMap>(pm); }

} } // end namespace boost::parallel

#endif // BOOST_PARALLEL_CACHING_PROPERTY_MAP_HPP

/* caching_property_map.hpp
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
*/