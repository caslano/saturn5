// Copyright 2004 The Trustees of Indiana University.

// Use, modification and distribution is subject to the Boost Software
// License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

//  Authors: Douglas Gregor
//           Andrew Lumsdaine
#ifndef BOOST_PROPERTY_MAP_PARALLEL_PROCESS_GROUP_HPP
#define BOOST_PROPERTY_MAP_PARALLEL_PROCESS_GROUP_HPP

#include <cstdlib>
#include <utility>

namespace boost { namespace parallel {

/**
 * A special type used as a flag to a process group constructor that
 * indicates that the copy of a process group will represent a new
 * distributed data structure.
 */
struct attach_distributed_object { };

/**
 * Describes the context in which a trigger is being invoked to
 * receive a message.
 */
enum trigger_receive_context {
  /// No trigger is active at this time.
  trc_none,
  /// The trigger is being invoked during synchronization, at the end
  /// of a superstep.
  trc_in_synchronization,
  /// The trigger is being invoked as an "early" receive of a message
  /// that was sent through the normal "send" operations to be
  /// received by the end of the superstep, but the process group sent
  /// the message earlier to clear its buffers.
  trc_early_receive,
  /// The trigger is being invoked for an out-of-band message, which
  /// must be handled immediately.
  trc_out_of_band,
  /// The trigger is being invoked for an out-of-band message, which
  /// must be handled immediately and has alredy been received by 
  /// an MPI_IRecv call.
  trc_irecv_out_of_band  
};

// Process group tags
struct process_group_tag {};
struct linear_process_group_tag : virtual process_group_tag {};
struct messaging_process_group_tag : virtual process_group_tag {};
struct immediate_process_group_tag : virtual messaging_process_group_tag {};
struct bsp_process_group_tag : virtual messaging_process_group_tag {};
struct batch_process_group_tag : virtual messaging_process_group_tag {};
struct locking_process_group_tag : virtual process_group_tag {};
struct spawning_process_group_tag : virtual process_group_tag {};

struct process_group_archetype
{
  typedef int process_id_type;
};

void wait(process_group_archetype&);
void synchronize(process_group_archetype&);
int process_id(const process_group_archetype&);
int num_processes(const process_group_archetype&);

template<typename T> void send(process_group_archetype&, int, int, const T&);

template<typename T>
process_group_archetype::process_id_type
receive(const process_group_archetype& pg,
        process_group_archetype::process_id_type source, int tag, T& value);

template<typename T>
std::pair<process_group_archetype::process_id_type, std::size_t>
receive(const process_group_archetype& pg, int tag, T values[], std::size_t n);

template<typename T>
std::pair<process_group_archetype::process_id_type, std::size_t>
receive(const process_group_archetype& pg,
        process_group_archetype::process_id_type source, int tag, T values[],
        std::size_t n);

} } // end namespace boost::parallel

namespace boost { namespace graph { namespace distributed {
  using boost::parallel::trigger_receive_context;
  using boost::parallel::trc_early_receive;
  using boost::parallel::trc_out_of_band;
  using boost::parallel::trc_irecv_out_of_band;
  using boost::parallel::trc_in_synchronization;
  using boost::parallel::trc_none;
  using boost::parallel::attach_distributed_object;
} } } // end namespace boost::graph::distributed

#endif // BOOST_PROPERTY_MAP_PARALLEL_PROCESS_GROUP_HPP

/* process_group.hpp
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
*/