// Copyright (C) Vladimir Prus 2003.
// Distributed under the Boost Software License, Version 1.0. (See
// accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
//
// See http://www.boost.org/libs/graph/vector_property_map.html for
// documentation.
//

#ifndef BOOST_PROPERTY_MAP_PARALLEL_VECTOR_PROPERTY_MAP_HPP_VP_2003_03_04
#define BOOST_PROPERTY_MAP_PARALLEL_VECTOR_PROPERTY_MAP_HPP_VP_2003_03_04

#include <boost/property_map/property_map.hpp>
#include <boost/shared_ptr.hpp>
#include <vector>
#include <boost/property_map/parallel/distributed_property_map.hpp>
#include <boost/property_map/parallel/local_property_map.hpp>

namespace boost {

/** Distributed vector property map.
 *
 * This specialization of @ref vector_property_map builds a
 * distributed vector property map given the local index maps
 * generated by distributed graph types that automatically have index
 * properties. 
 *
 * This specialization is useful when creating external distributed
 * property maps via the same syntax used to create external
 * sequential property maps.
 */
template<typename T, typename ProcessGroup, typename GlobalMap, 
         typename StorageMap>
class vector_property_map<T, 
                          local_property_map<ProcessGroup, GlobalMap,
                                             StorageMap> >
  : public parallel::distributed_property_map<
             ProcessGroup, GlobalMap, vector_property_map<T, StorageMap> >
{
  typedef vector_property_map<T, StorageMap> local_iterator_map;

  typedef parallel::distributed_property_map<ProcessGroup, GlobalMap, 
                                             local_iterator_map> inherited;

  typedef local_property_map<ProcessGroup, GlobalMap, StorageMap> index_map_type;

public:
  vector_property_map(const index_map_type& index = index_map_type())
    : inherited(index.process_group(), index.global(),
                local_iterator_map(index.base())) { }

  vector_property_map(unsigned inital_size, 
                      const index_map_type& index = index_map_type())
    : inherited(index.process_group(),  index.global(),
                local_iterator_map(inital_size, index.base())) { }
};

/** Distributed vector property map.
 *
 * This specialization of @ref vector_property_map builds a
 * distributed vector property map given the local index maps
 * generated by distributed graph types that automatically have index
 * properties. 
 *
 * This specialization is useful when creating external distributed
 * property maps via the same syntax used to create external
 * sequential property maps.
 */
template<typename T, typename ProcessGroup, typename GlobalMap, 
         typename StorageMap>
class vector_property_map<
        T, 
        parallel::distributed_property_map<
          ProcessGroup,
          GlobalMap,
          StorageMap
        >
      > 
  : public parallel::distributed_property_map<
             ProcessGroup, GlobalMap, vector_property_map<T, StorageMap> >
{
  typedef vector_property_map<T, StorageMap> local_iterator_map;

  typedef parallel::distributed_property_map<ProcessGroup, GlobalMap, 
                                             local_iterator_map> inherited;

  typedef parallel::distributed_property_map<ProcessGroup, GlobalMap, 
                                             StorageMap>
    index_map_type;

public:
  vector_property_map(const index_map_type& index = index_map_type())
    : inherited(index.process_group(), index.global(),
                local_iterator_map(index.base())) { }

  vector_property_map(unsigned inital_size, 
                      const index_map_type& index = index_map_type())
    : inherited(index.process_group(), index.global(),
                local_iterator_map(inital_size, index.base())) { }
};

}

#endif // BOOST_PROPERTY_MAP_PARALLEL_VECTOR_PROPERTY_MAP_HPP_VP_2003_03_04

/* vector_property_map.hpp
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
*/