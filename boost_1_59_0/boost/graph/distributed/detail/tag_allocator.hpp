// -*- C++ -*-

// Copyright (C) 2007  Douglas Gregor  <doug.gregor@gmail.com>

// Use, modification and distribution is subject to the Boost Software
// License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
#ifndef BOOST_GRAPH_DISTRIBUTED_TAG_ALLOCATOR_HPP
#define BOOST_GRAPH_DISTRIBUTED_TAG_ALLOCATOR_HPP

#ifndef BOOST_GRAPH_USE_MPI
#error "Parallel BGL files should not be included unless <boost/graph/use_mpi.hpp> has been included"
#endif

#include <vector>

namespace boost { namespace graph { namespace distributed { namespace detail {

/**
 * \brief The tag allocator allows clients to request unique tags that
 * can be used for one-time communications.
 *
 * The tag allocator hands out tag values from a predefined maximum
 * (given in the constructor) moving downward. Tags are provided one
 * at a time via a @c token. When the @c token goes out of scope, the
 * tag is returned and may be reallocated. These tags should be used,
 * for example, for one-time communication of values.
 */
class tag_allocator {
public:
  class token;
  friend class token;

  /**
   * Construct a new tag allocator that provides unique tags starting
   * with the value @p top_tag and moving lower, as necessary.
   */
  explicit tag_allocator(int top_tag) : bottom(top_tag) { }

  /**
   * Retrieve a new tag. The token itself holds onto the tag, which
   * will be released when the token is destroyed.
   */
  token get_tag();

private:
  int bottom;
  std::vector<int> freed;
};

/**
 * A token used to represent an allocated tag. 
 */
class tag_allocator::token {
public:
  /// Transfer ownership of the tag from @p other.
  token(const token& other);

  /// De-allocate the tag, if this token still owns it.
  ~token();

  /// Retrieve the tag allocated for this task.
  operator int() const { return tag_; }

private:
  /// Create a token with a specific tag from the given tag_allocator
  token(tag_allocator* allocator, int tag) 
    : allocator(allocator), tag_(tag) { }

  /// Undefined: tokens are not copy-assignable
  token& operator=(const token&);

  /// The allocator from which this tag was allocated.
  tag_allocator* allocator;

  /// The stored tag flag. If -1, this token does not own the tag.
  mutable int tag_;

  friend class tag_allocator;
};

} } } } // end namespace boost::graph::distributed::detail

#endif // BOOST_GRAPH_DISTRIBUTED_TAG_ALLOCATOR_HPP

/* tag_allocator.hpp
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
*/