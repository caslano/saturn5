//  (C) Copyright Jeremy Siek 1999.
// Distributed under the Boost Software License, Version 1.0. (See
// accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_TREE_STRUCTURE_HPP
#define BOOST_TREE_STRUCTURE_HPP

#include <boost/tuple/tuple.hpp> //For boost::tie()

namespace boost
{

template < class T > struct tree_traits
{
    typedef typename T::node_descriptor node_descriptor;
    typedef typename T::children_iterator children_iterator;
};

template < class Tree, class TreeVisitor >
void traverse_tree(typename tree_traits< Tree >::node_descriptor v, Tree& t,
    TreeVisitor visitor)
{
    visitor.preorder(v, t);
    typename tree_traits< Tree >::children_iterator i, end;
    boost::tie(i, end) = children(v, t);
    if (i != end)
    {
        traverse_tree(*i++, t, visitor);
        visitor.inorder(v, t);
        while (i != end)
            traverse_tree(*i++, t, visitor);
    }
    else
        visitor.inorder(v, t);
    visitor.postorder(v, t);
}

struct null_tree_visitor
{
    template < typename Node, typename Tree > void preorder(Node, Tree&) {}
    template < typename Node, typename Tree > void inorder(Node, Tree&) {}
    template < typename Node, typename Tree > void postorder(Node, Tree&) {}
};

} /* namespace boost */

#endif /* BOOST_TREE_STRUCTURE_HPP */

/* tree_traits.hpp
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
*/