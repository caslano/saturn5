// (C) Copyright 2007-2009 Andrew Sutton
//
// Use, modification and distribution are subject to the
// Boost Software License, Version 1.0 (See accompanying file
// LICENSE_1_0.txt or http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_GRAPH_MATRIX_PROPERTY_MAP_HPP
#define BOOST_GRAPH_MATRIX_PROPERTY_MAP_HPP

#include <boost/graph/property_maps/container_property_map.hpp>

namespace boost
{
// This property map is built specifically for property maps over
// matrices. Like the basic property map over a container, this builds
// the property abstraction over a matrix (usually a vector of vectors)
// and returns property maps over the nested containers.
template < typename Graph, typename Key, typename Matrix >
struct matrix_property_map
: boost::put_get_helper<
      container_property_map< Graph, Key, typename Matrix::value_type >,
      matrix_property_map< Graph, Key, Matrix > >
{
    // abstract the indexing keys
    typedef typename detail::choose_indexer< Graph, Key >::indexer_type
        indexer_type;

    // aliases for the nested container and its corresponding map
    typedef typename Matrix::value_type container_type;
    typedef container_property_map< Graph, Key, container_type > map_type;

    typedef Key key_type;

    // This property map doesn't really provide access to nested containers,
    // but returns property maps over them. Since property maps are all
    // copy-constructible (or should be anyways), we never return references.
    // As such, this property is only readable, but not writable. Curiously,
    // the inner property map is actually an lvalue pmap.
    typedef map_type value_type;
    typedef map_type reference;
    typedef readable_property_map_tag category;

    matrix_property_map() : m_matrix(0), m_graph(0) {}

    matrix_property_map(Matrix& m, const Graph& g)
    : m_matrix(&m), m_graph(const_cast< Graph* >(&g))
    {
    }

    matrix_property_map(const matrix_property_map& x)
    : m_matrix(x.m_matrix), m_graph(x.m_graph)
    {
    }

    inline reference operator[](key_type k) const
    {
        typedef typename indexer_type::value_type Index;
        Index x = indexer_type::index(k, *m_graph);
        return map_type((*m_matrix)[x], *m_graph);
    }

private:
    mutable Matrix* m_matrix;
    mutable Graph* m_graph;
};
}

#endif

/* matrix_property_map.hpp
De6FSDPj8qAqlTnotTZO4CxNDhzO6WnR5TFGUJVGpBKRcErfO4izee17oWNCB5C/ja54+LeZkGAZBCQhuVEQMaJIWJx2hBfwnNdAvJ0QylbTN9cOFT7lfbw9n/+6N37opZGz0bQPa3y21V+fCXWo5PHwOLUaFntqUibkVkmjfTZi8qJ782ObEzwwVUx6ETwTJBuynNlIcBHNaNwAjyB+EQRBIm53/9lVYqtYBoKMvFsyik3kYM+CWzIsmGccDi2MAplSYMTrCL0i9zdus5C0Q2FeIoCMa/QWkXtNojfkuE9IcR8p2Hb4C9vy+p3SLZVKk3PEAGewt4+QMtywGWIECIbld96F0bOHMY0L8jm8M9vYRznRd3LirytWI8zlHR3DWIZZhFlZYYx9aSJuSf4mMYxifK4k/S9hUS6EM4qvM9ZzYRYKH2HR04d6SV/Hol7OeX68t1ix90zLsWo1X8foL5Xqb4gi/gApV+Yi/FRBkHl8/0cxDqvh9wWF9wVQrsmLm7jy6AUKnFoNOZN27zW+zRyzP/vy5aqj/QFbD2wx9JrLdB9Hs0EhvPc1DzexXFjorIYKKmm2EuGjfTGfgO139bYDf5k6adC6Ifl2UqGk0xK3rvf8owYLvqRWb+m6sjylIhW/Vop/dOw9FvhVeF3f7gJJ2PZZb9p0vo+PrmtBox1e29eUxAyEdXtUH2eKM8GtDtE2Z9wqxEzv70O0ir2oyaA6nyhKl8szaKM2FMWtKWxXbJIebKhqX0XNBHwZmz/CfN/q68jB3hsUtT2jr5Vlh5u+ZXyeGApcr68SGI3ZjzwLPXudN4bA3py/HTarMJkJHani/5I4p6e8vR0F4J+uJDLhD6H2tHFW2B6DpWZtr1z3ToZRV/y42/Cm5RfKFdfEpNuzzr+QKL+7htoMlpQoLAwzH6dAG5R/2XZ4IkIiw9zPvNb4Ptzqkwt+TMXmvADTN4IMG8tk85HervD8UHizeYksJ8LzS4xs0hcOAJO3lUWaGIFl3f+k1V8wztyA90pZSQiIlkbo2eq8BxOOOnZpRnufZfFxl90NHdrmR8ra0As65NZhVBzZ+/S3tT1Ph3rc+651GCtOVujCvG8FUoW0nDpH3nPvre+OAJ4AAAD9Av4F8gv0F9gv8F8QvyB/Qf2C/gXzC/YX3C/4Xwi/EH8h/UL+hfIL9RfaL/RfGL8wf2H9wv6F8wv3F94v/F8Evwh/Ef0i/kXyi/QX2S/yXxS/KH9R/aL+RfOL9hfdL/pfDL8YfzH9Yv7F8ov1F9sv9l8cvzh/cf3i/sXzi/cX3y/+XwK/BH8J/RL+JfLrzy/RX2K/xH9J/JL8JfVL+pfML9lfcr/kfyn8+vtL8ZfSL+VfKr9Uf6n9Uv+l8Uvzl9Yv7V86v3R/6f3S/2Xwy/CX0S/jXya/TH+Z/TL/ZfHL8pfVL+tfNr9sf9n9sv/l8Mvxl9Mv518uv1x/uf1y/+Xxy/OX1y/vXz6/fH/5/3ouXSxp7bXWrGtP0qCA5mGwnQakWn6Z7r/vw1wE9jBNLMfVwTzFZyJez9l6TfJgLaJeQ0v5a1sSydK0C8D6MOQY6g6IFPiJuydlON0NUYwnTW9/p9USdN7iMTnaqHn8F7lFTEH7flQRlok9m8rOVtT7NJE83ApzRvOclif92CPLA3HpVuCfC+jiRc7jNJyx+uKHaz+/cdS6OGyURT3R6ZJIoFct0r23xN0GzlvvkNXhOphNbK1vq4/XjRRn4hnXClo1hGs1NnUnAvYm1YmssYiYskGXnu6j+gtnkOEzD7tPLnG36r0wm3cGS4Oqe0nJGz+3hceTi6fMRw3G6nnWRYYctFspJf5K6+Wh6GGykKDC4F4tsUkMolO5HcWLy8y+6voHHH/rM/l33uBFa/aPWBMhHzHPZulj2ifdSU6hg+XCxnBNa4bPT7vsRhnOznJsIvTle1tK/bA/N1fWWA43D5uT9jiDoMvEVaz3Ct6UA9bXRi1lqMat2MaN2sLPTozNWfXF882ewyJri0xmG5v1ltaLMs5NRjupnLyLcSI65gg6CT7l2ny1FNXPJ/HomnOH78zN2tfck+JafIgby6ih7rmgM7gXnL+d5qYPok3oBtPADtFnkW7Cuy5EKnHUy54Ugk3QBwHKtnwnpY989IwcFRyu0sGzbtjAXbs034Ab7BfU24FjkinEgfczOcRBuwfnwCtMAcgeGsQJkYcX2t+wTTcGWWEbLxN7BP3N0ktBjFxvK7E21AFsxG+4PVgIVyEOrL1pCDGiy6ATXoiDGbOTl4UZ7xzaQ9mj9rWvHeink0SPzaEpO5tKQo/TS54kTJ6iuJdqStqVg6fRUQ7xZYZu3yMhYdcyRg1C875dqqVc7WizzehL4McGVuj6BXEx9eQYUy3+z6rUOw8qtQKRwXsW/TTxggYXslIkSlOo4ddMT5b6cv3c+TQdyhzZgxMuFKF0LVKUciWiSwVvw4U08F66gdQpxF10aCtO8sV5qWK2Bcsd4H5pFU5pd6cZgKVpIzx6y8WRJqQ1q88aP/miNLQIXe46px35CPxOpPlXfapIU/OEXYRgHhDjZhXTq47DRvNgJhYBShVxIDPC40W+KX1WGY9tveszdELVPgrPqnvMImjlBD2sM7hmHzbawmQqERVl70dUFNNitw4Z+yrKPylmlSjBY8VIdzj5kp2M9EohswYSCD6FZ72Upmw+OlMeWxXxrmS8oxq8yw/5k7mUSvkZwpozC3oa5Sgyhc20jOJ4VNBNCXhXWyr/iGROhzqQofMTUsAghY0B0Spy/njEoBjGo7iSNz9C+neccEXdh6lIJVFVXm3O4lWkoTghRJuf0R82ql1Y7M05u6i4CRlPzMYhtAOpOrnTfsXaIyXdywenoTmU7rTJnL2DUBvbOqUcDd9prqhmdz3zwfQeGvhoDkrRAAAs/9Oprs2Sf7ipGVWpr6SeztVuPb3c4tBsdkfgJBQtE0AI7obn8QdMQ2QQEyDw2En8RSdi2N5Z+HaRMmx0On2wbBIPWc8Y0OBlJm82lr47Pu9nCOZhGZL8TptV54xmiY59FqwTUP2cVr165BOyDGId0tQXzkJtGV4ZHezzq/D3iJF5G4lfRzIlfmuefYt6/i54TEfrcmlrLb4MjSCBWriv7ZbWvvOS+tCIp81KmS6p/GsCHBsb+v3EDg36V7vlaYBh64Z9H4Nqnu9IXEYAM5Y7WyNYnWDx3+laZIPxtFojAPY5pcHzXLSr4WFFhgny0kVSchVLLLYNY4fqq1UZskmBtUVvyzGLvmL7moqZro6BSPPd2DFQ499YS8OmgoVzGThJ/tdVVdfMJtRPG1Iq7YiV1NHKHoHMsZeHvM+p80r5f0qN76qbHS2+1Fvbdd6+2Z4n0rg20+3cjm3soZVPtP4HqETpTGp8Mv5UbNG53jBoa2mqugPm+XQ+cyh9XdZ7rntFLDYhr2//NC56ZAZDjfGazMqPNGKHW8wPkgkiu5pd11LeenYrrlQfSI/5SazUMVnV/5seeNUN7iWr3sbXoRgMIhhFABFw2vmSgHAMLfhIICqOwAsRQEAiLsLggd4Nmj7n+YgWpP/IlJZOYchkkRT/0/iCPtLkOP2T4njd3fuPXnfL86p5+6ln5oOn8vLG12n54qDNY0CXv9WH+Rqfj/3FYfWWyiCEm/EDf/l5xsXgbtXfTMpp0BC5AFYHFLk6LMUNP2q0xM36e+Pm8wKcOw+VOINDSev+bo2CZhTz58dDrh095hjTOlzNIIw1dwm7eM20I+CuBp0RYvRQbTQOJJJ/3MPGqCUQgrCn7yTafhKAKOQ05kCsgG3rrqZU2QU6CSXcARxR+G4FeuW2OQYvoHBq9Dr3eAuiAFwB0ti7ywXhO0Tj5Lm/3hfnSc7YpkXyKVg5ZA/jYRVwuUoLQueproYJ5KnhoPvEdOVUb+oT9qvKCqrawo//Yc6KOlqOpMvkdiKL2Fw0afitf1l50hG84PI7t9kNQBLbZimmQfIsZOXrbtqGs3GRouvGVtsSaA7BOHi3a1uFskTbQF6ucbg73Gwgi0ErVuVzxXoVYOcVyX8Z1Yuf2rTsqcZ0T/rEztJkoQe7LnopRyV49JnSakbsA+aTf7GmNoyKgnmxwh7FgwSJ9TXWe+CyF+7ViSLm2mZp63FEn2PDKvWNNtpSPsg7hHnsfJA/9Wcl53PmnXEsogMuxfRzayM+kDZgdrrhWiBp40cuR5JAhzn7hyvepOCR9V31HfZqyGrW9pz+0bUjcc/EDSMnxMiJeQRDQrSBcSlNf5LtGDsy2ukgPt60i+E++iWkvV2vHhP4EIApPUt2muwkMXL863DGyH0i9b7ws9wDRaI+Sbx8kcSCijUwQ2aq9JxhT5qGOUPCKCG9fBLGhN0x9C3b3mRLDX458cmgWx1/OfXq30hdvRUO9sy2oa/+VltCFvrJ1Jsd1kqmZl+xY2WbsxZY6rj1gYv9B4fqduDLYbebLV/2TTn88gHswuXHpKCNBZlzfMefL0nO+ehTw0fUDibFTIU0vEmoEq5/9dqr9VZQnWFfKd4jLvtE7fqbPDbIrnGdY8nHYveJb6CfVN9Avom+E9xQ0UEyA5B7Cbs075FRGAQtiKYRvZFHJPzl2SjkpJLMRajzvJRq1xQv8YZHRw4hXgI9FKkqolSUE0TG0Q7q7ZU8iljliovJFrQySxlmtM22za0amN4539E9YvxV7EwlGDsYJqVpepqZRWP4Y6OHutaYAqAKbFRBUMXrCvpKHMlCRwoP5vAlsMyJ5iMuRp6DDlt6+YNaf7bFysjNhJDzu2elXkVXqTdR8SDaB5AJ5dwID6FvQIWc0LZE4OcUH5G6/+Dbh3BCx4khwE96AztR8SbqCNQWsc+qPyq8k2TL7BTjz7Y/ImfoZWGyjwSah+lkDVqZ3NQptzOo0QdnTn31GUMUD0nu49hHtkl1kaukDBTh/e1KIiCVGJ8nLU/iUajJW1RwGy4JolSQjMKqHCkfP1dyDumQ3Sq+VoytIF+yeirxUJ1S1C17o8p3t+TLqD0urc8oW2tCoFWCXjBoUqOVjVwpsWBucrJObpH9N9tivqahSTwQxmQQzfHP0RQbcwTuoCje+hDDNRo85Wb9IRVTDuQMtjc6z0Oh34m9g3wrCVIfB5Q9PwOBvmjA4CSowMDUvu6UeCkVpjx8UQOLgjcOT8Ib9mN/kiEReOFamuEl4N/JtiPIzWSn+vbpv59J/oNIqOim/nUI66gWoKeNquzZ+2ZZD3ZeDfwy+qWVs8wn7XfnL9XuKkSLIGzvqC2T9p7nDm8x9wX8NJ5rVPYg/vFOyKsg9QE5Icf63DahLmo+RMhxxXehCrI3qYIiKcG/muWdLCpURKUVnBnts4sieNE8UjoE9IkrY5q3xfjjoUaeHVCDDLjpAM8pdbJdtAr3PlPSTGQVyCIY2TE+19Pf09yQtkHI6+pXPc9qlcXsQtmmpw9Pwx4dPVBP07PMT9ZlH3y8UvwVuYuNTzhfCXj6PCwX+OcCQZrf/+LA1rIuxZ8JFsZhHNDPkUStSzpmv87GneC6ozkHH/10n1HBoISD9gYo9KsYBNNIpBFLIKWCI/Z5m1tyCvgXds5zRtBFWR/31QPD7Aj2p3jVSWScC3xKyGaZFvzb/x3Wpa5WXso80334TRnn1rlfQrPles8gZTGfjLjb5aD5vDo+cSRD7wZwYKNP/HH8aid5vfgUolkbPrJzbQffVPEp2qW1jn8fyzSib06pKIduDs3otKmhYay9kk0t+jd7dBrhhNrBpR1ZI8VehKmRh7qeh72gOz91puKk2UG8BYqHKvFS8jEXeJr/COHBwhsjK/LvhHFU3baGbsWfe4b10PCt8xOYL9V34OSO/tXrm1cOYjogdZd2EQFlz49Blcdi5BAG3OhPQJnoEZPvn16aawrX8M4J3r373eAbTmRwCT4/+H36+6Y6cTXKSzQ4KNMgcfuk1+J1LeviFmXuCu1FG4uidc2rUri/oRUPixYajlubkWcCk2wvjvE7cTVR9MTMg4g7mJOgZHHWwz7Dz4Yn9ZX+4/irGjjRYS/7F/dTb+WfQnmHtl72+f6zQqdkWSgekap7+TN+sTF/IcsrRCQQ54XO8kkmZI7QHDzdU7qEvpVdgMCCKNCTLCwIzp2Uv2SqazHDLtys6YjaIT4vW74rBY24EHzyQnuMPB0w2kN4JJaLWCpgWVO5/rwNPgM6ubpZs+EODxHUFjE8pDdPwh1jOGZwzmgZ4DFdW1Gq6Beull9iPXs+sz+zagYctCv0VThdY9uQv+BauUKneA5yPvx5gwrb5OKZYt8PfKPzQuGHcNfD4Q//yfhJ6R3xJXyFnBPyJVQRR2OKh7WJhB8K3a/dhyYQwaXUOie9ioOTQC+inpcZ16yhYU9SV0/GHu93oG4PxKET+x0TMDh1ZONTJ6iPbI8S7znfPN9CvHSnkx8OU+8917TvlHrkKyhC5kXOKqoUWyhGk6gnZiQVlqSay72XFCxiPESgF9BPl6IRx/5BRzuPGAeOOTDoZ+aNqxjxvF9TYErAFowo6CpiLrJZ4D/hPgU5FEr1W1oC9PoabjMCVTYQWmFsPCmWyOglrhqpmYN1psmYqtZfrMK4oHsmfcF9fSG81ftZ90loceyToW67/jB3Xcy0hoYeeU3QmqjUnyDzK6BuRBgOl+9b2den0dUgv4SvGcDdXvinUR+H2ySA35NDgzRKEI4hI/5tWtSNiCeTeCiGKW9hErVXga+0z4jVQeLogcf4zrybHkrDAafu7UwgHb8nAfY1i8paTViXuCr1ydNRgAubG35Ee4fZCrKeDmmM10MRXpu7dHNh6kzZ0g6Dh+WYHghAqKF/SaAeWRHerPPi3ivbpUILuxZY6ikb5TorSiLSTcwd0J3quVM0I5VQr8VRwqOeO/d5CnnXiJ4bschsumle7yhznU98OuubQL3dwRUYYxMlLywN1nmJXjHZuuFS8yTHFXdNIB8cj9+V/TeOfIh5z/OG6x7cJRjyd7S8cZc2tvxEiVajYNAfN9EMX1RPg7ky/er2qnXSzgWqM5sXLPY7m3aKUYvp85XsJQr6BP/BOBhRCKmAQc6NfBF5I/Lf0IqB7+qCmA7JTUrs2FpDTZOyQfKVpAyraHYNnWq3/wP9o7xhuf14m/4y44w/QypSElFrwp8ypjprbqqQuTW2S4Rn1JXM3DHbPfhw7uLxcyjr6BbA9CtN69AWMe68NfbVjPZSRErFyDKiTwBCKTcSCIMENaTlTZKr1JSJCC757hpRs0HpyTsnEpc9c5QjUD63gHFjnLUKGuCfh711oD1ZO9U2Ji9YnUNWvqTYkFbSu5NX9q5AeREKuiREI0JRDLJJBBPoh+BhoY46STVyIwKuVsjOIO+2ZwU1Iuxt9/H7mRn12FQ1OZI/mRhkIZGIBkkYtCNh4/tebudg9pluAD6S4gEJZTZKsWWAerjq6zDe7dfW0kxsmu7rc/Pc10aUDWCcWV1SJUTbKopSp099BdGnxZmTxMeYin1JxpZ1iJcCr1sKDMVONrSqfcF33W/An1iL1dGriJhflAxFAk5gM6eE0QkmQJSpVD3n8taFLgqeJbhL//xmNoFqnWkOaafKY5RUK8BRZY7kVfsAJDp4uzPWJhAEfijHKNu7OuUVbsX4
*/