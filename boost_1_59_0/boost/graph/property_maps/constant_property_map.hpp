// (C) Copyright 2007-2009 Andrew Sutton
//
// Use, modification and distribution are subject to the
// Boost Software License, Version 1.0 (See accompanying file
// LICENSE_1_0.txt or http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_GRAPH_CONSTANT_PROPERTY_HPP
#define BOOST_GRAPH_CONSTANT_PROPERTY_HPP

#include <boost/property_map/property_map.hpp>

// TODO: This should really be part of the property maps library rather than
// the Boost.Graph library.

namespace boost
{

/**
 * A constant property is one, that regardless of the edge or vertex given,
 * will always return a constant value.
 */
template < typename Key, typename Value >
struct constant_property_map : public boost::put_get_helper< const Value&,
                                   constant_property_map< Key, Value > >
{
    typedef Key key_type;
    typedef Value value_type;
    typedef const Value& reference;
    typedef boost::readable_property_map_tag category;

    constant_property_map() : m_value() {}

    constant_property_map(const value_type& value) : m_value(value) {}

    constant_property_map(const constant_property_map& copy)
    : m_value(copy.m_value)
    {
    }

    inline reference operator[](const key_type&) const { return m_value; }

    value_type m_value;
};

template < typename Key, typename Value >
inline constant_property_map< Key, Value > make_constant_property(
    const Value& value)
{
    return constant_property_map< Key, Value >(value);
}

/**
 * Same as above, but pretends to be writable as well.
 */
template < typename Key, typename Value > struct constant_writable_property_map
{
    typedef Key key_type;
    typedef Value value_type;
    typedef Value& reference;
    typedef boost::read_write_property_map_tag category;

    constant_writable_property_map() : m_value() {}

    constant_writable_property_map(const value_type& value) : m_value(value) {}

    constant_writable_property_map(const constant_writable_property_map& copy)
    : m_value(copy.m_value)
    {
    }

    friend Value get(const constant_writable_property_map& me, Key)
    {
        return me.m_value;
    }
    friend void put(const constant_writable_property_map&, Key, Value) {}

    value_type m_value;
};

template < typename Key, typename Value >
inline constant_writable_property_map< Key, Value >
make_constant_writable_property(const Value& value)
{
    return constant_writable_property_map< Key, Value >(value);
}

} /* namespace boost */

#endif

/* constant_property_map.hpp
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
*/