//=======================================================================
// Copyright 2009 Trustees of Indiana University
// Author: Jeremiah Willcock
//
// Distributed under the Boost Software License, Version 1.0. (See
// accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
//=======================================================================

#ifndef BOOST_GRAPH_LOOKUP_EDGE_HPP
#define BOOST_GRAPH_LOOKUP_EDGE_HPP

#include <utility>
#include <boost/config.hpp>
#include <boost/utility/enable_if.hpp>
#include <boost/graph/graph_traits.hpp>

// lookup_edge: a function that acts like edge() but falls back to out_edges()
// and a search when edge() is not provided.

namespace boost
{

template < typename Graph >
std::pair< typename boost::graph_traits< Graph >::edge_descriptor, bool >
lookup_edge(typename boost::graph_traits< Graph >::vertex_descriptor src,
    typename boost::graph_traits< Graph >::vertex_descriptor tgt,
    const Graph& g,
    typename boost::enable_if< is_adjacency_matrix< Graph >, int >::type = 0)
{
    return edge(src, tgt, g);
}

template < typename Graph >
std::pair< typename boost::graph_traits< Graph >::edge_descriptor, bool >
lookup_edge(typename boost::graph_traits< Graph >::vertex_descriptor src,
    typename boost::graph_traits< Graph >::vertex_descriptor tgt,
    const Graph& g,
    typename boost::disable_if< is_adjacency_matrix< Graph >, int >::type = 0)
{
    typedef typename boost::graph_traits< Graph >::out_edge_iterator it;
    typedef typename boost::graph_traits< Graph >::edge_descriptor edesc;
    std::pair< it, it > oe = out_edges(src, g);
    for (; oe.first != oe.second; ++oe.first)
    {
        edesc e = *oe.first;
        if (target(e, g) == tgt)
            return std::make_pair(e, true);
    }
    return std::make_pair(edesc(), false);
}

}

#endif // BOOST_GRAPH_LOOKUP_EDGE_HPP

/* lookup_edge.hpp
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
*/