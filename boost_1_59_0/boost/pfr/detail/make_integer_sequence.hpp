// Copyright (c) 2018 Sergei Fedorov
// Copyright (c) 2019-2022 Antony Polukhin
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_PFR_DETAIL_MAKE_INTEGER_SEQUENCE_HPP
#define BOOST_PFR_DETAIL_MAKE_INTEGER_SEQUENCE_HPP
#pragma once

#include <boost/pfr/detail/config.hpp>

#include <type_traits>
#include <utility>
#include <cstddef>

namespace boost { namespace pfr { namespace detail {

#if BOOST_PFR_USE_STD_MAKE_INTEGRAL_SEQUENCE == 0

#ifdef __has_builtin
#   if __has_builtin(__make_integer_seq)
#       define BOOST_PFR_USE_MAKE_INTEGER_SEQ_BUILTIN
#   endif
#endif

#ifdef BOOST_PFR_USE_MAKE_INTEGER_SEQ_BUILTIN

using std::integer_sequence;

// Clang unable to use namespace qualified std::integer_sequence in __make_integer_seq.
template <typename T, T N>
using make_integer_sequence = __make_integer_seq<integer_sequence, T, N>;

#undef BOOST_PFR_USE_MAKE_INTEGER_SEQ_BUILTIN

#else

template <typename T, typename U>
struct join_sequences;

template <typename T, T... A, T... B>
struct join_sequences<std::integer_sequence<T, A...>, std::integer_sequence<T, B...>> {
    using type = std::integer_sequence<T, A..., B...>;
};

template <typename T, T Min, T Max>
struct build_sequence_impl {
    static_assert(Min < Max, "Start of range must be less than its end");
    static constexpr T size = Max - Min;
    using type = typename join_sequences<
            typename build_sequence_impl<T, Min, Min + size / 2>::type,
            typename build_sequence_impl<T, Min + size / 2 + 1, Max>::type
        >::type;
};

template <typename T, T V>
struct build_sequence_impl<T, V, V> {
    using type = std::integer_sequence<T, V>;
};

template <typename T, std::size_t N>
struct make_integer_sequence_impl : build_sequence_impl<T, 0, N - 1> {};

template <typename T>
struct make_integer_sequence_impl<T, 0> {
    using type = std::integer_sequence<T>;
};

template <typename T, T N>
using make_integer_sequence = typename make_integer_sequence_impl<T, N>::type;

#endif // !defined BOOST_PFR_USE_MAKE_INTEGER_SEQ_BUILTIN
#else // BOOST_PFR_USE_STD_MAKE_INTEGRAL_SEQUENCE == 1

template <typename T, T N>
using make_integer_sequence = std::make_integer_sequence<T, N>;

#endif // BOOST_PFR_USE_STD_MAKE_INTEGRAL_SEQUENCE == 1

template <std::size_t N>
using make_index_sequence = make_integer_sequence<std::size_t, N>;

template <typename... T>
using index_sequence_for = make_index_sequence<sizeof...(T)>;

}}} // namespace boost::pfr::detail

#endif


/* make_integer_sequence.hpp
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
*/