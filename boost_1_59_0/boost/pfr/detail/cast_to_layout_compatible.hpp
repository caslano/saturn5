// Copyright (c) 2016-2022 Antony Polukhin
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_PFR_DETAIL_CAST_TO_LAYOUT_COMPATIBLE_HPP
#define BOOST_PFR_DETAIL_CAST_TO_LAYOUT_COMPATIBLE_HPP
#pragma once

#include <boost/pfr/detail/config.hpp>

#include <type_traits>
#include <utility>      // metaprogramming stuff
#include <boost/pfr/detail/rvalue_t.hpp>

namespace boost { namespace pfr { namespace detail {

template <class T, class U>
constexpr void static_assert_layout_compatible() noexcept {
    static_assert(
        std::alignment_of<T>::value == std::alignment_of<U>::value,
        "====================> Boost.PFR: Alignment check failed, probably your structure has user-defined alignment for the whole structure or for some of the fields."
    );
    static_assert(sizeof(T) == sizeof(U), "====================> Boost.PFR: Size check failed, probably your structure has bitfields or user-defined alignment.");
}

/// @cond
#ifdef __GNUC__
#define MAY_ALIAS __attribute__((__may_alias__))
#else
#define MAY_ALIAS
#endif
/// @endcond

template <class To, class From>
MAY_ALIAS const To& cast_to_layout_compatible(const From& val) noexcept {
    MAY_ALIAS const To* const t = reinterpret_cast<const To*>( std::addressof(val) );
    detail::static_assert_layout_compatible<To, From>();
    return *t;
}

template <class To, class From>
MAY_ALIAS const volatile To& cast_to_layout_compatible(const volatile From& val) noexcept {
    MAY_ALIAS const volatile To* const t = reinterpret_cast<const volatile To*>( std::addressof(val) );
    detail::static_assert_layout_compatible<To, From>();
    return *t;
}


template <class To, class From>
MAY_ALIAS volatile To& cast_to_layout_compatible(volatile From& val) noexcept {
    MAY_ALIAS volatile To* const t = reinterpret_cast<volatile To*>( std::addressof(val) );
    detail::static_assert_layout_compatible<To, From>();
    return *t;
}


template <class To, class From>
MAY_ALIAS To& cast_to_layout_compatible(From& val) noexcept {
    MAY_ALIAS To* const t = reinterpret_cast<To*>( std::addressof(val) );
    detail::static_assert_layout_compatible<To, From>();
    return *t;
}

#ifdef BOOST_PFR_DETAIL_STRICT_RVALUE_TESTING
template <class To, class From>
To&& cast_to_layout_compatible(rvalue_t<From> val) noexcept = delete;
#endif

#undef MAY_ALIAS


}}} // namespace boost::pfr::detail

#endif // BOOST_PFR_DETAIL_CAST_TO_LAYOUT_COMPATIBLE_HPP

/* cast_to_layout_compatible.hpp
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
*/