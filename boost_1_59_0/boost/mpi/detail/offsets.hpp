//          Copyright Alain Miniussi 2014.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

// Authors: Alain Miniussi

#ifndef BOOST_MPI_OFFSETS_HPP
#define BOOST_MPI_OFFSETS_HPP

#include <vector>
#include <boost/mpi/config.hpp>
#include <boost/mpi/communicator.hpp>

namespace boost { namespace mpi {
namespace detail {

// Convert a sequence of sizes [S0..Sn] to a sequence displacement 
// [O0..On] where O[0] = 0 and O[k+1] = O[k]+S[k].
void BOOST_MPI_DECL sizes2offsets(int const* sizes, int* offsets, int n);

// Same as size2offset(sizes.data(), offsets.data(), sizes.size())
void BOOST_MPI_DECL sizes2offsets(std::vector<int> const& sizes, std::vector<int>& offsets);

// Given a sequence of sizes (typically the number of records dispatched
// to each process in a scater) and a sequence of displacements (typically the
// slot index at with those record starts), convert the later to a number 
// of skipped slots.
void offsets2skipped(int const* sizes, int const* offsets, int* skipped, int n);

// Reconstruct offsets from sizes assuming no padding.
// Only takes place if on the root process and if 
// displs are not already provided.
// If memory was allocated, returns a pointer to it
// otherwise null.
int* make_offsets(communicator const& comm, int const* sizes, int const* displs, int root = -1);

// Reconstruct skip slots from sizes and offsets.
// Only takes place if on the root process and if 
// displs are provided.
// If memory was allocated, returns a pointer to it
// otherwise null.
int* make_skipped_slots(communicator const& comm, int const* sizes, int const* displs, int root = -1);

}
}}// end namespace boost::mpi

#endif // BOOST_MPI_OFFSETS_HPP

/* offsets.hpp
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
*/