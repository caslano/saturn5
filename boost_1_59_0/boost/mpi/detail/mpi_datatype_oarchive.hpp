// (C) Copyright 2005 Matthias Troyer

// Use, modification and distribution is subject to the Boost Software
// License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

//  Authors: Matthias Troyer

#ifndef BOOST_MPI_DETAIL_MPI_DATATYPE_OARCHIVE_HPP
#define BOOST_MPI_DETAIL_MPI_DATATYPE_OARCHIVE_HPP

#include <boost/type_traits/is_enum.hpp>
#include <boost/mpl/bool.hpp>
#include <boost/archive/detail/oserializer.hpp>
#include <boost/archive/detail/auto_link_archive.hpp>
#include <boost/archive/basic_archive.hpp>
#include <boost/mpi/detail/ignore_skeleton_oarchive.hpp>
#include <boost/mpi/detail/mpi_datatype_primitive.hpp>
#include <boost/mpi/datatype_fwd.hpp>
#include <boost/mpl/assert.hpp>
#include <boost/static_assert.hpp>
#include <boost/integer.hpp>
#include <boost/archive/detail/register_archive.hpp>

namespace boost { namespace mpi { namespace detail {


// an archive wrapper that stores only the data members but not the
// special types defined by the serialization library
// to define the data skeletons (classes, pointers, container sizes, ...)

class mpi_datatype_oarchive
  : public mpi_datatype_primitive,
    public ignore_skeleton_oarchive<mpi_datatype_oarchive>
{
public:
    template <class T>
    mpi_datatype_oarchive(const T& x)
         :  mpi_datatype_primitive(&x) // register address
        {
          BOOST_MPL_ASSERT((is_mpi_datatype<T>));
          *this << x;                   // serialize the object
        }

    template<class T>
    void save_override(T const& t)
    {
      save_enum(t,boost::is_enum<T>());
    }

    template<class T>
    void save_enum(T const& t, mpl::false_)
    {
      ignore_skeleton_oarchive<mpi_datatype_oarchive>::save_override(t);
    }

    template<class T>
    void save_enum(T const& t, mpl::true_)
    {
      // select the right sized integer for the enum
      typedef typename boost::uint_t<8*sizeof(T)>::least int_type;
      BOOST_STATIC_ASSERT((sizeof(T)==sizeof(int_type)));
      this->save(*reinterpret_cast<int_type const*>(&t));
    }

};

} } } // end namespace boost::mpi::detail

// required by export
BOOST_SERIALIZATION_REGISTER_ARCHIVE(boost::mpi::detail::mpi_datatype_oarchive)
BOOST_SERIALIZATION_REGISTER_ARCHIVE(boost::mpi::detail::ignore_skeleton_oarchive<boost::mpi::detail::mpi_datatype_oarchive>)
BOOST_SERIALIZATION_USE_ARRAY_OPTIMIZATION(boost::mpi::detail::mpi_datatype_oarchive)

#endif // BOOST_MPI_DETAIL_MPI_DATATYPE_OARCHIVE_HPP

/* mpi_datatype_oarchive.hpp
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
*/