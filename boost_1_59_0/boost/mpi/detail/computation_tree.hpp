// Copyright (C) 2005 Douglas Gregor.

// Use, modification and distribution is subject to the Boost Software
// License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

// Compute parents, children, levels, etc. to effect a parallel
// computation tree.
#ifndef BOOST_MPI_COMPUTATION_TREE_HPP
#define BOOST_MPI_COMPUTATION_TREE_HPP

namespace boost { namespace mpi { namespace detail {

/**
 * @brief Aids tree-based parallel collective algorithms.
 *
 * Objects of this type
 */
class computation_tree
{
 public:
  computation_tree(int rank, int size, int root, int branching_factor = -1);

  /// Returns the branching factor of the tree.
  int branching_factor() const { return branching_factor_; }

  /// Returns the level in the tree on which this process resides.
  int level() const { return level_; }

  /**
   * Returns the index corresponding to the n^th level of the tree.
   *
   * @param n The level in the tree whose index will be returned.
   */
  int level_index(int n) const;

  /**
   *  @brief Returns the parent of this process.
   *
   *  @returns If this process is the root, returns itself. Otherwise,
   *  returns the process number that is the parent in the computation
   *  tree.
   */
  int parent() const;

  /// Returns the index for the first child of this process.
  int child_begin() const;

  /**
   * @brief The default branching factor within the computation tree.
   *
   * This is the default branching factor for the computation tree, to
   * be used by any computation tree that does not fix the branching
   * factor itself. The default is initialized to 3, but may be
   * changed by the application so long as all processes have the same
   * branching factor.
   */
  static int default_branching_factor;

 protected:
  /// The rank of this process in the computation tree.
  int rank;

  /// The number of processes participating in the computation tree.
  int size;

  /// The process number that is acting as the root in the computation
  /// tree.
  int root;

  /**
   * @brief The branching factor within the computation tree.
   *
   * This is the default number of children that each node in a
   * computation tree will have. This value will be used for
   * collective operations that use tree-based algorithms.
   */
  int branching_factor_;

  /// The level in the tree at which this process resides.
  int level_;
};

} } } // end namespace boost::mpi::detail

#endif // BOOST_MPI_COMPUTATION_TREE_HPP

/* computation_tree.hpp
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
*/