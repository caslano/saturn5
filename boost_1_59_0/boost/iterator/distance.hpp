// Copyright (C) 2017 Michel Morin.
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_ITERATOR_DISTANCE_HPP
#define BOOST_ITERATOR_DISTANCE_HPP

#include <boost/config.hpp>
#include <boost/iterator/iterator_categories.hpp>
#include <boost/iterator/iterator_traits.hpp>

namespace boost {
namespace iterators {

    namespace detail {
        template <typename SinglePassIterator>
        inline BOOST_CXX14_CONSTEXPR typename iterator_difference<SinglePassIterator>::type
        distance_impl(
            SinglePassIterator first
          , SinglePassIterator last
          , single_pass_traversal_tag
        )
        {
            typename iterator_difference<SinglePassIterator>::type n = 0;
            while (first != last) {
                ++first;
                ++n;
            }
            return n;
        }

        template <typename RandomAccessIterator>
        inline BOOST_CXX14_CONSTEXPR typename iterator_difference<RandomAccessIterator>::type
        distance_impl(
            RandomAccessIterator first
          , RandomAccessIterator last
          , random_access_traversal_tag
        )
        {
            return last - first;
        }
    }

    namespace distance_adl_barrier {
        template <typename SinglePassIterator>
        inline BOOST_CXX14_CONSTEXPR typename iterator_difference<SinglePassIterator>::type
        distance(SinglePassIterator first, SinglePassIterator last)
        {
            return detail::distance_impl(
                first, last, typename iterator_traversal<SinglePassIterator>::type()
            );
        }
    }

    using namespace distance_adl_barrier;

} // namespace iterators

using namespace iterators::distance_adl_barrier;

} // namespace boost

#endif

/* distance.hpp
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
*/