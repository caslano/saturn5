// (C) Copyright David Abrahams 2002.
// (C) Copyright Jeremy Siek    2002.
// (C) Copyright Thomas Witt    2002.
// Distributed under the Boost Software License, Version 1.0. (See
// accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
#ifndef BOOST_ENABLE_IF_23022003THW_HPP
#define BOOST_ENABLE_IF_23022003THW_HPP

#include <boost/config.hpp>
#include <boost/iterator/detail/config_def.hpp>
#if defined(BOOST_NO_SFINAE) || defined(BOOST_NO_IS_CONVERTIBLE)
#include <boost/type_traits/type_identity.hpp>
#endif

//
// Boost iterators uses its own enable_if cause we need
// special semantics for deficient compilers.
// 23/02/03 thw
//

namespace boost
{

  namespace iterators
  {
    //
    // Base machinery for all kinds of enable if
    //
    template<bool>
    struct enabled
    {
      template<typename T>
      struct base
      {
        typedef T type;
      };
    };

    //
    // For compilers that don't support "Substitution Failure Is Not An Error"
    // enable_if falls back to always enabled. See comments
    // on operator implementation for consequences.
    //
    template<>
    struct enabled<false>
    {
      template<typename T>
      struct base
      {
#ifdef BOOST_NO_SFINAE
        typedef T type;

        // This way to do it would give a nice error message containing
        // invalid overload, but has the big disadvantage that
        // there is no reference to user code in the error message.
        //
        // struct invalid_overload;
        // typedef invalid_overload type;
        //
#endif
      };
    };


    template <class Cond,
              class Return>
    struct enable_if
# if !defined(BOOST_NO_SFINAE) && !defined(BOOST_NO_IS_CONVERTIBLE)
      : enabled<(Cond::value)>::template base<Return>
# else
      : boost::type_identity<Return>
# endif
    {
    };

  } // namespace iterators

} // namespace boost

#include <boost/iterator/detail/config_undef.hpp>

#endif // BOOST_ENABLE_IF_23022003THW_HPP

/* enable_if.hpp
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
*/