// (C) Copyright Toon Knapen    2001.
// (C) Copyright David Abrahams 2003.
// (C) Copyright Roland Richter 2003.
// Distributed under the Boost Software License, Version 1.0. (See
// accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_PERMUTATION_ITERATOR_HPP
#define BOOST_PERMUTATION_ITERATOR_HPP

#include <iterator>

#include <boost/iterator/iterator_adaptor.hpp>


namespace boost {
namespace iterators {

template< class ElementIterator
        , class IndexIterator>
class permutation_iterator
  : public iterator_adaptor<
             permutation_iterator<ElementIterator, IndexIterator>
           , IndexIterator, typename std::iterator_traits<ElementIterator>::value_type
           , use_default, typename std::iterator_traits<ElementIterator>::reference>
{
  typedef iterator_adaptor<
            permutation_iterator<ElementIterator, IndexIterator>
          , IndexIterator, typename std::iterator_traits<ElementIterator>::value_type
          , use_default, typename std::iterator_traits<ElementIterator>::reference> super_t;

  friend class iterator_core_access;

public:
  permutation_iterator() : m_elt_iter() {}

  explicit permutation_iterator(ElementIterator x, IndexIterator y)
      : super_t(y), m_elt_iter(x) {}

  template<class OtherElementIterator, class OtherIndexIterator>
  permutation_iterator(
      permutation_iterator<OtherElementIterator, OtherIndexIterator> const& r
      , typename enable_if_convertible<OtherElementIterator, ElementIterator>::type* = 0
      , typename enable_if_convertible<OtherIndexIterator, IndexIterator>::type* = 0
      )
    : super_t(r.base()), m_elt_iter(r.m_elt_iter)
  {}

private:
    typename super_t::reference dereference() const
        { return *(m_elt_iter + *this->base()); }

#ifndef BOOST_NO_MEMBER_TEMPLATE_FRIENDS
    template <class,class> friend class permutation_iterator;
#else
 public:
#endif
    ElementIterator m_elt_iter;
};


template <class ElementIterator, class IndexIterator>
inline permutation_iterator<ElementIterator, IndexIterator>
make_permutation_iterator( ElementIterator e, IndexIterator i )
{
    return permutation_iterator<ElementIterator, IndexIterator>( e, i );
}

} // namespace iterators

using iterators::permutation_iterator;
using iterators::make_permutation_iterator;

} // namespace boost

#endif

/* permutation_iterator.hpp
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
*/