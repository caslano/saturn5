// (C) Copyright David Abrahams 2002.
// (C) Copyright Jeremy Siek    2002.
// (C) Copyright Thomas Witt    2002.
// Distributed under the Boost Software License, Version 1.0. (See
// accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
#ifndef BOOST_REVERSE_ITERATOR_23022003THW_HPP
#define BOOST_REVERSE_ITERATOR_23022003THW_HPP

#include <boost/iterator/iterator_adaptor.hpp>

namespace boost {
namespace iterators {

  //
  //
  //
  template <class Iterator>
  class reverse_iterator
      : public iterator_adaptor< reverse_iterator<Iterator>, Iterator >
  {
      typedef iterator_adaptor< reverse_iterator<Iterator>, Iterator > super_t;

      friend class iterator_core_access;

   public:
      reverse_iterator() {}

      explicit reverse_iterator(Iterator x)
          : super_t(x) {}

      template<class OtherIterator>
      reverse_iterator(
          reverse_iterator<OtherIterator> const& r
          , typename enable_if_convertible<OtherIterator, Iterator>::type* = 0
          )
          : super_t(r.base())
      {}

   private:
      typename super_t::reference dereference() const
      {
          Iterator it = this->base_reference();
          --it;
          return *it;
      }

      void increment() { --this->base_reference(); }
      void decrement() { ++this->base_reference(); }

      void advance(typename super_t::difference_type n)
      {
          this->base_reference() -= n;
      }

      template <class OtherIterator>
      typename super_t::difference_type
      distance_to(reverse_iterator<OtherIterator> const& y) const
      {
          return this->base_reference() - y.base();
      }
  };

  template <class BidirectionalIterator>
  inline reverse_iterator<BidirectionalIterator> make_reverse_iterator(BidirectionalIterator x)
  {
      return reverse_iterator<BidirectionalIterator>(x);
  }

} // namespace iterators

using iterators::reverse_iterator;
using iterators::make_reverse_iterator;

} // namespace boost

#endif // BOOST_REVERSE_ITERATOR_23022003THW_HPP

/* reverse_iterator.hpp
B49ME4i0w67SxLNyldnQd6ZQKapeLucpHLM1ysHi8rc57Dj43QaGUXwJWnRIVmc2fLiATCDleVgiAkRhtDqsxkTYZrRydgC7EiFF+L12ipjS8bRCoGP9mlBwiXdAwJ9cq6+3YiCRBYsBAhAhCCf8kASuvyp//gP8at3yMi0LGICpMIZjXgTMpPj53MlE9FJLzZGGWcU6xX8Y1qxqL+diNRBcsh9QLvT+L9l/puki5geBJWo9k8ZZayfc0BVoexlTAchsBzf0NIY026LduvmkTI1VNmDQKx/KyztR4brclcFM2XgctgSs7xHJ4wvU0b43hpLp7P8fX0CSlAqm/n4C3wi/npDm/KqTp2LxR8CCLdkJjHOA8EA7Ec5Yq3v3/FqU0N8SRxkkhvm+zWsQuhkhsNeBL/0suFUlhcP96k5RvmyTocHYyg6ukhOlc2tu25pTIOvDLWVPWbJd6DWWbGS6tIifki7FXPLoiFBoTOvyIZHClUzkEpofAv5CPF/0OK0UVyTHeiWBiO+sv9bUHPW4t52vYJhZaXRLJ6GdOxhBglcIaaHbA+1+Jmjxpyynod5hn5uBtGTxJyH1vgJuENP7p/vbumAKXIvNn/NLFiypr3Lq5rZA1rQlHJocNna6hxNCA5doJ9wNvzPkz+XLGoZKK25E1ETxGKZlfd00yGHhucUH8O/2Cb5cduKv6zxFXeliKJDfOBHWGZc7tbktMvDScDCKchQnhFxEk+j3cNb741ZowKNthAbcHcqtFc1YDPOx9naEMhPKvLXIVgrjWteZg9GyrojvADz3G+8fKRisBmgLScHs5L9a38nAP3a/433/6/9GYEMC6OMN9QEpf7J0Yy6UienrXaWbKb6SmKusziBnpTd3Vba2CWfbixYjIQJuzMnTHkY9UYqrSWSRyCaonK1/5PoEiGUpPExemn5+9XjIBBWGUdA0SdaOcHhq7q92VIjAbZ6zw0lYuRkDjYHLTXy9FbW1Y8rCQijgQsqecwwsJ5GijNn9OYxEiDCGSbjJGpk1Nx0mx4Q8aZ4e1+NSVGwzLSp5PQxCKOxKv2xB9QWNRTjEHvE+xEoEEAY/hSXuLpGfNkzvdqSrxCpQSgoXsbSN3PvRQOg7Sd72kklj58gAzMLyworA0tGXIjkACjCoseetwCsTR06mCydT0KR+Z+HeKeQstIF8AFibPMV/XQ/23DdfCr7rv+B8kMX/EEH/P9g6TsMKJMwZFgL/AVFmJufOn9Ou0jhCBKIAAiz90wNKm02af7OKIhB8nsZ1gW4lo1N7b9LnXMycoEtWqaaT5bDEKtmU2PjkwsbJZJUxD+CRGLRMN5Dgpqzi6b5lwhgRPkKwf76MsKS8fE/dTaD+J0kPkZuvAFIUh6KBypWy6QkJup5Xx0Nq6GLpE/g8i2Xdn2kC5zz/xMghbb/euqq6qEW4+XAqf6FaiwjvPAl13I8oo7EvPgIFKw+5P5NVM9TEjwoHCkG8kGINcCNRS0HXwrkDyIOGW0lUtOVwzGBl5hKE5DT5zP5c60Bzbdo4zhuPhCDku0Ve60Gr0w0b/rykQJ+XZ7pprXl4DGo8KdVKU3XNZ2y7CtAPxM6YFzrrQTdjPQED45DwwVglEYTF9arzPLRKACMeRpb8kx87AFYx7te4SSFLsYa+sh+H9sjBEH8OEzRBbUntjwY5/0/1yf+pnuJ/qv/YpbE8bFqD+2RG6eouS4Los7UHy4KAJx3c8W1V8CRO4uqQZX7PvOxlTHtMAK31aQwenn3lGBCUZHc/n5sw/fyEcn7eO4NFQw80QYr98v0rDvlLzPv7vcBx2UYCJTTk0Xf0UkV2brHDm6HCkt67IlpHASCGT+f8LeXqS5HDvOM7gPWtykl8k/hLyiFsNYG6FDB3odhSdUET3q99KWHzraop5UJ0MZNlUsPOTz4FYyD2bKT7VOW1AMweIPKzzNUKz5LcOlBqvVXVralaw8HNjd94C2db9WpnTwPvywGCvIRdwdOSWJ3FISjHxzw3MOVfI1Yp2db3cpQftScw+eKaJQjxhCvlKbO/F3yyLDsUc2C9r3efZ90Gp4OgXHjwOJAD2aAMybZM8XSpXLp0ge5XzecyMHGZdObyvWoQckciVjxLh2Y3B9hVEQbOKWfdkDvPrIgKjt5bLI5Xamsvi8Vci2bpkgoaArp6dm6qCnabDDLYeS61Fg4k7Ue62eYHdeqW2JcMFZwcB5KdnCTY3yegRBlORRz934WYUJKsP87O37NjDp7Mexko/AMnq2MrzV+h9D2TfeWZRyY3wJNORSjECw9mebhbMKy4ttnUS5gpHVl5AZLykBtF6V5gTe0/hfxQHXLjqDsnN/njINyFyt8QfkOd1AmZVTky1LVmWZb9zx0Z+3cQrY9Ia13UuYlFOt+5UcQaIs0WyfOo6of3e3ylVgsaBYbQRIvNo+fZ9/fzKedsAUoMOQJK0y3AsCF4OCWZCjhSaA13ACyMHx4U+klVN4Bz2Sslyd5V8iOvVfuqE1IYFHerz0qfgwhY+R+2aTBN2DsFUjCsqaQ7iYd7Va7loR72dOogbP4kcBP0jluZr5/xYgJwiiH3JxqYJQGNsiTSN4H0uvB68NIaNn1CoyA53Jp1iJZpsri5QnsN42bbw+0oHfcVcE0gmMxIYaGxaVhN2jewxuBE4ZGUUCf2NKWDw5HHqbKRsGlIRWAVbEA+ZHnv01MNyF5ECnYzsJkTV2sr6QmC+BpRk6TpdAe2aB8JKHZwqAYuLq2+HZ/HDTtx4ZAkKvE0S97Fq5fG0Wz4PHRxztRhOJIquUMPGGoGhgsYixP0uxOqsfKIZoo5EI43bp9Ie6DHdwRPqHcusB+Te5zVCZfj1B4x/fplc96AnjBlYDkxrO7uGdRA2IoOoXj8Jf7IvMyODD8JtAy0XdAGylMCXJ9tAYFIen2rQTaUdb6WYFBacuT9kS4OhH6AkkN5Veuyj1li/zL89WIFMeaaOAtQrqRqNariBQLeHE8md0fRWM15AS8QToGshVkKzK2rt9Li9I2twhSaFdhaJQrccfDk6KlAUyT+slFfjPZ/FDD9jwI0/0eBmMi9poCjdq3t7WYVu/OEZPuHFLb24+XsPlEWR9aO8SCZlWHGGPQ5vjhf6nWZ02k+QHpAAkh2dFLNpaz+u8p9lmlx9dqh88rKeI/5UXQGAkzyv0IwQpXU4AJYVucRz0uExjP+Fo0hBCrV1QC/Asl+WCa3F80/bopKuwJiu60SA1hmSM3OccEzR9K8o4m1F17VldbRD/bphl4wLD1EPT6icSQglnq6BBPILgQa3D14lpBu2BBSBG9iCKCVczIws7XONhw3/BgqiIVZTPbsN4IKOATYMzUYL+aIecbyqnA3M/t7jSe+PdOue5R/USiSGbyRsm/onD6e/IGyom0w7s9ytur41xN6jkB19uuPs4KZF3g8G9n+pTCZz7BzZFSXCnlSSP6lcNEbDGghSLRolx24Dv073775rNh22dI4QRvlQ2zOw8Au7JH2cKN0/y75K7L2i5djXKI0gsa7WITle0bgqdzyv9EfffwAv46gAWcpJYzKvqWqettSij8g8NoiN/en4ljqcKagcFMbNiAKZWt+197Ul/Zpk3uG+OcF+/BHrcBDrpLoJ8f/UtxjWy7lvvXuumWKIC3k/Oo0n3FZBRsX5a6x8pzinuuThX+STCVJoaBO58DUDsas3DxECRq/jWWnz58qXZ7r9001khFajLNHuVtNiJivkLUmlQgCeSVFr6DQg4QCdruwtLVQZ4EdOPG4S+Hb6zuNbaBjCezRtP6PgGiHBL1RZ2Vpz2em7EztY4kmB4o2xaYE80tAYEcqIFTmKaZ73cxWbhb6dwOQGRyeLlofzl0JBNDcVVQFAEN/eRQwRFaOQrs7vJkkQZtfy3RsBTli42V/g0X5g/tS7/+Lzdj+38Zbf4SAAQGoNAoRGDgR2BERdyWFybJ/SgR/npAbF2T+4cFiVbiR/qMBEH5IgKMI5jvPVWtEE4mAQseDggLuY2x+U2dbo5yeEU883gQXcSC/dMDsu2mVGTrjb3JcorLLoo4x8GqCY4ZAscwU42Ln50ErNqd8Br6Siab/DDCN7NZshJvgNQoZ6xqgLLSliMfLr3FsTTrfDLba04Vy021/DcWcE1RO7F/dDf2/65Nhe3DrNdbfXEKBNgSJSQx1rKBtQWQrHcYBR9vYAibWm9PNltGu4tX9YGvCTXsRK6nnCNpB2TnSUoCAIaQsgBpk0r9CC92dw48YfpY3i6bGlwg10SRWlwsAWDfpAxACCKZfHVC928r/E6n5T8/IlPcv+W800Ffn/ZesNBH1MdOdOQ5FOu97BUIGXH1xYeCJZwHC+bvSY/I/tHg+AABqTSATkv//UvMDGvNXL2/tRlDBIZMvj5SrZQP06aTi232oA3jPzLSJeHV4U7CTYrcr24A/BFePU46XbX9Pny1nn2vk5hRC5X5Ca3E7xGYnkVigYr+/ZLrmeknd8JowzL2Wyem8syAbVvwyOgb8dSqqa7i+86UdKLBBsPXot9BeC9RpRl0dgAsK40cCrciQMgYnKrYHQeoAkmtEPP84Z+pIDSwDjz5RpLRnoK9mLjct3T3AG4ys200UcdLk/OKpgl6MH1+u7eqOBa/rzE6/hKRh9LijG5XSI2ySL2g30qf+eKT9aJjMtIrAKo4kSIMN8iHk9k/ULP54eqKjTdmOSn97sOfgMWz4LJS98TGmXew+7lq3JRfdyIOAdRh5AzPI1H6AWATcytjUysWSB03Qc61usaN2ameJcT/BzghKUQerlu/R03BxrCCmKL18bCozV9ffvLoG0mR1fpfGOhe5uIc5rZOQBqUgY/7+/n7bnO+Atpygj6vUu19CuhyQR3RTdFY5IqZGFsW8zCQi3kYuVpWb1mDXDIofGl9XLwoT3FPDAcJHdIkgCSpMXbQ8b4x5pCQfCqblA9PZJpT0qlGo6T2OIhOYjACZprYZ6gwFZlj2rEx1nT6WVtCILAOUvCGmg/4WmA/7RMDLl9rsKI77pGXkRZznzgYnMRJJXnFLBR8wFYOwNt4VPJy/JPxDCrGioA5yG/LUr+ldMBLrXPs1ybZV/PJH5s1Al0KS9YjbqkKoCDuq/bYxdPuqb45JiJqPVClCGrwZC3QEDx3kU+oXmjOdN/W0ApNAxi95lYImfbt9geR4Wj5p8fnzZ4PRF/IK6dfyx53gL63GljSpJ6oLrT2TcffW+woy2T2a5Mo60/StSW7EmD5BI2DEMInAKWyjTnGYKjzdsa5PNnMGEzYUDag+2/As48yWaHBriYX7BUgMEQ0goV7ioa9LMEV3tHYU0xsLPIrawzCDtON/CwYl2g7CQufFE3VhVTsosCOg/2RNiJOEW5BW31Zw2FbxCiE7GMdZaa+ByK7SQad/21sQovzhniYKBcpoTJx3fHohW55AUG4itfU/KjzzMOaQ44f4VBYufgdLcVjyVTXSwK9J4cRd2NaHsBiqvdndCxCeNy0apf/84VT3f3iJVD8z/9zZU8q124u7IEa2YuXol/+peZTazkNrGNlsZUf0z2FyCik7jZYU+JPkZ6dtj4VY7szKOY3/ne3XyLhcEp6ZS06ZjD6/ppssHH+A8W0N0QUOea0w25rS1WFcw3K0K+bFOwbjksQshM5kwjDIUKwEtqfbfT2F8vohGQJ9P46GkCr6N0yZFQb1WSUYl9G7zcQLxLoMnpJjMi3LuufqzyhFLT9wel+J5YA7ae5qKzt3RrQsRhrlSOk1Sg1qji6Y9Sor9kGsFMWBBTg1rCDKpf5k0lYcsWDJmrnuywB9FlZT4M7jpYNJ3B15pBgQTuT28oDsi9YOAahLrbBiLessvTC0xqtwKZRTL3gApLLzsCZbWUfAFU6QWzbZJGLglrYPJbTyJn0YZZLwKsvP/DT/ewAGJuuz89Cl38IUTCJ872zdgOU8mIhg79Y7UvQIvHy0AaOkISwo0wg4mMm8xL2n0GVnlMJVvo+3cONyOGzWi5G24GYJs7f6ptuiioaBK01bvVnQmOaoP22ANmwwMww6PJ6pwNKB8z8mxXKjlpZiDEj59FCslp9iCOC8Xysh+RVQLLKn13RFFRipmjMhHbAGWDQZdpFCSNOFpmbAELEwF1K2myZ/ePK/mLq4KknV68jQDlr7lLBXkfBwkvUE1xZAtCbZVQR0CoTON/EKf97T0gL1uorJu3I3BzoYFAFi3PGHKayxCX3/21EbTr7zmSfwyENdbSvaW7ytNNpi1j30BH5PXhPlypFQk+a9Hbytv+gQMj+Zr0mZkfN00WyypP/UHHFil4Oy9YhvbmnwEh7IaItUCm1xQjHmReaaPAj8apfjPHilseLe6SkEpreX9c5Z16jFTLDCUnWbnnLgFxibLWhqhlXmJh1IiGZSsylFJjpkluXRDrFIn2WoqMQMZb6Bl6yqOVHYj6Q8K8dvY+XNqCTa33eC4hTuOPrfaGL1ca75oXHxMKp3Fs7JS+QzATJOZD5vq/L9Vch/HvFYhAtbNdLr1w3bvPXR9AAVx9kX+laRitfqwBPdRfnvbdOFrn2QRfRvK5ZxGan7Ov76iWyUsi+eUDiL8LqE6aEa82fypJCdgaQwaQghFss99YWxwLRA+0l9G2NbFKm/gnT1CLL1JRm981tvMKEpcWcS6IQuu8ZLzLv98WS5OZ1o9ncilmBOLLDEsHYB7+iwWqDOQBZ3GggUWErqEFq3DTCCpTgQ941Ji2YreBgO9siC8XdsiCPSj5JL5deTkyCMvyXwUU57iBpuJY8cR9EQfCXrlw7yUEPc2LmghkNrLPQUK5RooQq4qoSX4OGVat04SDaW7plAAd9DO9fU73KJn+m37dNeayVtryqQe0zzkH+y64X3DmHFUftsPNE9k17oQhHUlo5e+fW5vfY3gzp1X7F7VdcixxDOvCTh53rCh5PHAjB9Ej1do9e9TlYdGC+IP6RvwBeMoclC3KkFYMI7mdxVfbZrTQiqKfEzdivPdJ24x4NydU378R0k/HTb75jOkc047CduccuyiVupctdXCju4mb37qnUsts3wPF5DXEq742FZ2mtmErH+uPnnLcuVCHeCPpvw3BJlG8PVFmDyKr1mXIIhd2ZmLgwOLIOZm7f+KVyvqW0sJC9DyD+mXVfFs1RatdT2oWlmgx5mSy93tHWAwNBuQKz02s2WMdd9DNnk/HeipEPgsyd8ym9O6wHYUPYgwdGNDnb/kvTUkM8/0M/ZhLQOhaiO43hnmbqeOYCIqyLB1lceFEgURUE7nc6mwpL5wAQ9XxHVuCwcS88vWliaYKzvFZdOO1gzrPpLW3bTcHEz+TE0t2Q0oC/r1L2E9u/RfQyZxfHNA5YzeixhfaGCTnd0wO/wE5KYvQTS8hzhZptedLae0yHPsHT67f4ytqND6Go8aIRfS91e+qqk3nIHdYXyioPTW+n6Ie8NVB7UWscKK1zmkywqo72CcIbeq+YWLNfvlbDwPev+uZsX4rHMwqe6TEiRqahKPiDsXX1pVLj63FrSCqp/y2G54tnA3kv9lm9uLY56+GEgKjyu0AvbuQYtpNhGLvgXnza9nHcps3sICdxP3Z12upSXdgclE710HVGqSdcQFKQAZWDE4AmywlmGQVrrM0Bgvt8Z
*/