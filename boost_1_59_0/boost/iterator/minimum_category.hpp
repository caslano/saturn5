// Copyright David Abrahams 2003. Use, modification and distribution is
// subject to the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
#ifndef BOOST_ITERATOR_MINIMUM_CATEGORY_HPP_INCLUDED_
# define BOOST_ITERATOR_MINIMUM_CATEGORY_HPP_INCLUDED_

# include <boost/static_assert.hpp>
# include <boost/type_traits/is_convertible.hpp>
# include <boost/type_traits/is_same.hpp>

# include <boost/mpl/placeholders.hpp>
# include <boost/mpl/aux_/lambda_support.hpp>

namespace boost {
namespace iterators {
namespace detail {

template <bool GreaterEqual, bool LessEqual>
struct minimum_category_impl;

template <class T1, class T2>
struct error_not_related_by_convertibility;

template <>
struct minimum_category_impl<true,false>
{
    template <class T1, class T2> struct apply
    {
        typedef T2 type;
    };
};

template <>
struct minimum_category_impl<false,true>
{
    template <class T1, class T2> struct apply
    {
        typedef T1 type;
    };
};

template <>
struct minimum_category_impl<true,true>
{
    template <class T1, class T2> struct apply
    {
        BOOST_STATIC_ASSERT((is_same<T1,T2>::value));
        typedef T1 type;
    };
};

template <>
struct minimum_category_impl<false,false>
{
    template <class T1, class T2> struct apply
      : error_not_related_by_convertibility<T1,T2>
    {
    };
};

} // namespace detail

//
// Returns the minimum category type or fails to compile
// if T1 and T2 are unrelated.
//
template <class T1 = mpl::_1, class T2 = mpl::_2>
struct minimum_category
{
    typedef boost::iterators::detail::minimum_category_impl<
        ::boost::is_convertible<T1,T2>::value
      , ::boost::is_convertible<T2,T1>::value
    > outer;

    typedef typename outer::template apply<T1,T2> inner;
    typedef typename inner::type type;

    BOOST_MPL_AUX_LAMBDA_SUPPORT(2,minimum_category,(T1,T2))
};

template <>
struct minimum_category<mpl::_1,mpl::_2>
{
    template <class T1, class T2>
    struct apply : minimum_category<T1,T2>
    {};

    BOOST_MPL_AUX_LAMBDA_SUPPORT_SPEC(2,minimum_category,(mpl::_1,mpl::_2))
};

} // namespace iterators

} // namespace boost

#endif // BOOST_ITERATOR_MINIMUM_CATEGORY_HPP_INCLUDED_

/* minimum_category.hpp
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
*/