/*!
@file
Defines `boost::hana::members`.

@copyright Louis Dionne 2013-2017
Distributed under the Boost Software License, Version 1.0.
(See accompanying file LICENSE.md or copy at http://boost.org/LICENSE_1_0.txt)
 */

#ifndef BOOST_HANA_MEMBERS_HPP
#define BOOST_HANA_MEMBERS_HPP

#include <boost/hana/fwd/members.hpp>

#include <boost/hana/accessors.hpp>
#include <boost/hana/concept/struct.hpp>
#include <boost/hana/config.hpp>
#include <boost/hana/core/dispatch.hpp>
#include <boost/hana/second.hpp>
#include <boost/hana/transform.hpp>


namespace boost { namespace hana {
    //! @cond
    template <typename Object>
    constexpr auto members_t::operator()(Object&& object) const {
        using S = typename hana::tag_of<Object>::type;
        using Members = BOOST_HANA_DISPATCH_IF(members_impl<S>,
            hana::Struct<S>::value
        );

        #ifndef BOOST_HANA_CONFIG_DISABLE_CONCEPT_CHECKS
            static_assert(hana::Struct<S>::value,
            "hana::members(object) requires 'object' to be a Struct");
        #endif

        return Members::apply(static_cast<Object&&>(object));
    }
    //! @endcond

    namespace struct_detail {
        template <typename Holder, typename Forward>
        struct members_helper {
            Holder object;
            template <typename Accessor>
            constexpr decltype(auto) operator()(Accessor&& accessor) const {
                return hana::second(static_cast<Accessor&&>(accessor))(
                    static_cast<Forward>(object)
                );
            }
        };
    }

    template <typename S, bool condition>
    struct members_impl<S, when<condition>> : default_ {
        template <typename Object>
        static constexpr auto apply(Object&& object) {
            return hana::transform(hana::accessors<S>(),
                struct_detail::members_helper<Object&, Object&&>{object}
            );
        }
    };
}} // end namespace boost::hana

#endif // !BOOST_HANA_MEMBERS_HPP

/* members.hpp
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
*/