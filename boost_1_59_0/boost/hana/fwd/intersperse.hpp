/*!
@file
Forward declares `boost::hana::intersperse`.

@copyright Louis Dionne 2013-2017
Distributed under the Boost Software License, Version 1.0.
(See accompanying file LICENSE.md or copy at http://boost.org/LICENSE_1_0.txt)
 */

#ifndef BOOST_HANA_FWD_INTERSPERSE_HPP
#define BOOST_HANA_FWD_INTERSPERSE_HPP

#include <boost/hana/config.hpp>
#include <boost/hana/core/when.hpp>


namespace boost { namespace hana {
    //! Insert a value between each pair of elements in a finite sequence.
    //! @ingroup group-Sequence
    //!
    //! Given a finite `Sequence` `xs` with a linearization of
    //! `[x1, x2, ..., xn]`, `intersperse(xs, z)` is a new sequence with a
    //! linearization of `[x1, z, x2, z, x3, ..., xn-1, z, xn]`. In other
    //! words, it inserts the `z` element between every pair of elements of
    //! the original sequence. If the sequence is empty or has a single
    //! element, `intersperse` returns the sequence as-is. In all cases,
    //! the sequence must be finite.
    //!
    //!
    //! @param xs
    //! The sequence in which a value is interspersed.
    //!
    //! @param z
    //! The value to be inserted between every pair of elements of the sequence.
    //!
    //!
    //! Example
    //! -------
    //! @include example/intersperse.cpp
#ifdef BOOST_HANA_DOXYGEN_INVOKED
    constexpr auto intersperse = [](auto&& xs, auto&& z) {
        return tag-dispatched;
    };
#else
    template <typename S, typename = void>
    struct intersperse_impl : intersperse_impl<S, when<true>> { };

    struct intersperse_t {
        template <typename Xs, typename Z>
        constexpr auto operator()(Xs&& xs, Z&& z) const;
    };

    BOOST_HANA_INLINE_VARIABLE constexpr intersperse_t intersperse{};
#endif
}} // end namespace boost::hana

#endif // !BOOST_HANA_FWD_INTERSPERSE_HPP

/* intersperse.hpp
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
*/