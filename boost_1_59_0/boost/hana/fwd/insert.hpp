/*!
@file
Forward declares `boost::hana::insert`.

@copyright Louis Dionne 2013-2017
Distributed under the Boost Software License, Version 1.0.
(See accompanying file LICENSE.md or copy at http://boost.org/LICENSE_1_0.txt)
 */

#ifndef BOOST_HANA_FWD_INSERT_HPP
#define BOOST_HANA_FWD_INSERT_HPP

#include <boost/hana/config.hpp>
#include <boost/hana/core/when.hpp>


namespace boost { namespace hana {
    // Note: This function is documented per datatype/concept only.
    //! @cond
    template <typename T, typename = void>
    struct insert_impl : insert_impl<T, when<true>> { };
    //! @endcond

    struct insert_t {
        template <typename Set, typename ...Args>
        constexpr decltype(auto) operator()(Set&& set, Args&& ...args) const;
    };

    BOOST_HANA_INLINE_VARIABLE constexpr insert_t insert{};


    //! Insert a value at a given index in a sequence.
    //! @ingroup group-Sequence
    //!
    //! Given a sequence, an index and an element to insert, `insert` inserts
    //! the element at the given index.
    //!
    //! @param xs
    //! The sequence in which a value should be inserted.
    //!
    //! @param n
    //! The index at which an element should be inserted. This must be a
    //! non-negative `Constant` of an integral type, and it must also be
    //! true that `n < length(xs)` if `xs` is a finite sequence.
    //!
    //! @param element
    //! The element to insert in the sequence.
    //!
    //!
    //! Example
    //! -------
    //! @include example/insert.cpp
#ifdef BOOST_HANA_DOXYGEN_INVOKED
    constexpr auto insert = [](auto&& xs, auto&& n, auto&& element) {
        return tag-dispatched;
    };
#endif
}} // end namespace boost::hana

#endif // !BOOST_HANA_FWD_INSERT_HPP

/* insert.hpp
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
*/