/*!
@file
Forward declares `boost::hana::drop_front_exactly`.

@copyright Louis Dionne 2013-2017
Distributed under the Boost Software License, Version 1.0.
(See accompanying file LICENSE.md or copy at http://boost.org/LICENSE_1_0.txt)
 */

#ifndef BOOST_HANA_FWD_DROP_FRONT_EXACTLY_HPP
#define BOOST_HANA_FWD_DROP_FRONT_EXACTLY_HPP

#include <boost/hana/config.hpp>
#include <boost/hana/core/when.hpp>


namespace boost { namespace hana {
    //! Drop the first `n` elements of an iterable, and return the rest.
    //! @ingroup group-Iterable
    //!
    //! Given an `Iterable` `xs` with a linearization of `[x1, x2, ...]` and
    //! a non-negative `IntegralConstant` `n`, `drop_front_exactly(xs, n)` is
    //! an iterable with the same tag as `xs` whose linearization is
    //! `[xn+1, xn+2, ...]`. In particular, note that this function does not
    //! mutate the original iterable in any way. If `n` is not given, it
    //! defaults to an `IntegralConstant` with a value equal to `1`.
    //!
    //! It is an error to use `drop_front_exactly` with `n > length(xs)`. This
    //! additional guarantee allows `drop_front_exactly` to be better optimized
    //! than the `drop_front` function, which allows `n > length(xs)`.
    //!
    //!
    //! @param xs
    //! The iterable from which elements are dropped.
    //!
    //! @param n
    //! A non-negative `IntegralConstant` representing the number of elements
    //! to be dropped from the iterable. In addition to being non-negative,
    //! `n` must be less than or equal to the number of elements in `xs`.
    //! If `n` is not given, it defaults to an `IntegralConstant` with a value
    //! equal to `1`.
    //!
    //!
    //! Example
    //! -------
    //! @include example/drop_front_exactly.cpp
#ifdef BOOST_HANA_DOXYGEN_INVOKED
    constexpr auto drop_front_exactly = [](auto&& xs[, auto const& n]) {
        return tag-dispatched;
    };
#else
    template <typename It, typename = void>
    struct drop_front_exactly_impl : drop_front_exactly_impl<It, when<true>> { };

    struct drop_front_exactly_t {
        template <typename Xs, typename N>
        constexpr auto operator()(Xs&& xs, N const& n) const;

        template <typename Xs>
        constexpr auto operator()(Xs&& xs) const;
    };

    BOOST_HANA_INLINE_VARIABLE constexpr drop_front_exactly_t drop_front_exactly{};
#endif
}} // end namespace boost::hana

#endif // !BOOST_HANA_FWD_DROP_FRONT_EXACTLY_HPP

/* drop_front_exactly.hpp
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
*/