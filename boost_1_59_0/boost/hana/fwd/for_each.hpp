/*!
@file
Forward declares `boost::hana::for_each`.

@copyright Louis Dionne 2013-2017
Distributed under the Boost Software License, Version 1.0.
(See accompanying file LICENSE.md or copy at http://boost.org/LICENSE_1_0.txt)
 */

#ifndef BOOST_HANA_FWD_FOR_EACH_HPP
#define BOOST_HANA_FWD_FOR_EACH_HPP

#include <boost/hana/config.hpp>
#include <boost/hana/core/when.hpp>


namespace boost { namespace hana {
    //! Perform an action on each element of a foldable, discarding
    //! the result each time.
    //! @ingroup group-Foldable
    //!
    //! Iteration is done from left to right, i.e. in the same order as when
    //! using `fold_left`. If the structure is not finite, this method will
    //! not terminate.
    //!
    //!
    //! @param xs
    //! The structure to iterate over.
    //!
    //! @param f
    //! A function called as `f(x)` for each element `x` of the structure.
    //! The result of `f(x)`, whatever it is, is ignored.
    //!
    //!
    //! Example
    //! -------
    //! @include example/for_each.cpp
#ifdef BOOST_HANA_DOXYGEN_INVOKED
    constexpr auto for_each = [](auto&& xs, auto&& f) -> void {
        tag-dispatched;
    };
#else
    template <typename T, typename = void>
    struct for_each_impl : for_each_impl<T, when<true>> { };

    struct for_each_t {
        template <typename Xs, typename F>
        constexpr void operator()(Xs&& xs, F&& f) const;
    };

    BOOST_HANA_INLINE_VARIABLE constexpr for_each_t for_each{};
#endif
}} // end namespace boost::hana

#endif // !BOOST_HANA_FWD_FOR_EACH_HPP

/* for_each.hpp
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
*/