/*!
@file
Forward declares `boost::hana::extract`.

@copyright Louis Dionne 2013-2017
Distributed under the Boost Software License, Version 1.0.
(See accompanying file LICENSE.md or copy at http://boost.org/LICENSE_1_0.txt)
 */

#ifndef BOOST_HANA_FWD_EXTRACT_HPP
#define BOOST_HANA_FWD_EXTRACT_HPP

#include <boost/hana/config.hpp>
#include <boost/hana/core/when.hpp>


namespace boost { namespace hana {
    //! Extract a value in a given comonadic context.
    //! @ingroup group-Comonad
    //!
    //! Given a value inside a comonadic context, extract it from that
    //! context, performing whatever effects are mandated by that context.
    //! This can be seen as the dual operation to the `lift` method of the
    //! Applicative concept.
    //!
    //!
    //! Signature
    //! ---------
    //! Given a Comonad `W`, the signature is
    //! \f$
    //!     \mathtt{extract} : W(T) \to T
    //! \f$
    //!
    //! @param w
    //! The value to be extracted inside a comonadic context.
    //!
    //!
    //! Example
    //! -------
    //! @include example/extract.cpp
#ifdef BOOST_HANA_DOXYGEN_INVOKED
    constexpr auto extract = [](auto&& w) -> decltype(auto) {
        return tag-dispatched;
    };
#else
    template <typename W, typename = void>
    struct extract_impl : extract_impl<W, when<true>> { };

    struct extract_t {
        template <typename W_>
        constexpr decltype(auto) operator()(W_&& w) const;
    };

    BOOST_HANA_INLINE_VARIABLE constexpr extract_t extract{};
#endif
}} // end namespace boost::hana

#endif // !BOOST_HANA_FWD_EXTRACT_HPP

/* extract.hpp
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
*/