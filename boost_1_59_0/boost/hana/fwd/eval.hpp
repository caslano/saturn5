/*!
@file
Forward declares `boost::hana::eval`.

@copyright Louis Dionne 2013-2017
Distributed under the Boost Software License, Version 1.0.
(See accompanying file LICENSE.md or copy at http://boost.org/LICENSE_1_0.txt)
 */

#ifndef BOOST_HANA_FWD_EVAL_HPP
#define BOOST_HANA_FWD_EVAL_HPP

#include <boost/hana/config.hpp>
#include <boost/hana/core/when.hpp>


namespace boost { namespace hana {
    //! Evaluate a lazy value and return it.
    //! @relates hana::lazy
    //!
    //! Given a lazy expression `expr`, `eval` evaluates `expr` and returns
    //! the result as a normal value. However, for convenience, `eval` can
    //! also be used with nullary and unary function objects. Specifically,
    //! if `expr` is not a `hana::lazy`, it is called with no arguments at
    //! all and the result of that call (`expr()`) is returned. Otherwise,
    //! if `expr()` is ill-formed, then `expr(hana::id)` is returned instead.
    //! If that expression is ill-formed, then a compile-time error is
    //! triggered.
    //!
    //! The reason for allowing nullary callables in `eval` is because this
    //! allows using nullary lambdas as lazy branches to `eval_if`, which
    //! is convenient. The reason for allowing unary callables and calling
    //! them with `hana::id` is because this allows deferring the
    //! compile-time evaluation of selected expressions inside the callable.
    //! How this can be achieved is documented by `hana::eval_if`.
    //!
    //!
    //! Example
    //! -------
    //! @include example/eval.cpp
#ifdef BOOST_HANA_DOXYGEN_INVOKED
    constexpr auto eval = [](auto&& see_documentation) -> decltype(auto) {
        return tag-dispatched;
    };
#else
    template <typename T, typename = void>
    struct eval_impl : eval_impl<T, when<true>> { };

    struct eval_t {
        template <typename Expr>
        constexpr decltype(auto) operator()(Expr&& expr) const;
    };

    BOOST_HANA_INLINE_VARIABLE constexpr eval_t eval{};
#endif
}} // end namespace boost::hana

#endif // !BOOST_HANA_FWD_EVAL_HPP

/* eval.hpp
1IYzkOwSypS4v39HxJWN8fhwze26fuUO7HH+5O4/VitSV3cK/kdn7HJ93hOL+rVlAOZ+rGBH3w03IhPU+7vQBfGt/qyybTAtUgXpy/WGZUUBqPplaHT+TiNLubCf3TANj8rxy6S2O9jetvM+zgteyGwmQT61pB84eYTylPZcxVmfp3aVBCywZovHYDJtvmNGD5YZLZjlXDWgf94U94Nw1wALeA7N81XTZqv4w/Uavc8dntg6EJaePLQqmaJas/O2rw/DPM1yr0ykdghP7kGfPUxk7MgZV7n+awGAYQ4yqyZ1VY2Ci6x2FTVDm9h/YtXo09TIKyanHMeLoAufqiv8HKbkvWjKx5bFMz/q3MeJSCyHGyejSOffFSQ/kvBY0UTqh6M7bZp3s1gfqq0mBnStAzkAkDSHeGCnhFuyKc9L+12YxlT9Y+FH9r97WRpOSsj6P2qw50nQ44GGmPqBJdeMIUGZbRGrf0JtsLOh0DbYWI0pONL2xQfAeX8nCkABzDAtdTuaFPRrm8pD7IpJDeq8w8cq4tbmMVTZUAeRHS0dfiNTy8DMeo5DMNLM2bLuKePww+7HVq7gU8YZfyWr55Ypp/tlXKFh4uWV803AGNCm1CnTC61z3PBqNZxEGbOALQbnGrQ35R5nR8urS5YN5W/q4TwFKWPmiBevz8cK7zUPEu3ajUf0N//Nkkl6t9UuOOvwKmETk1Kwco2ZpQwpkvVQ64feKpnWVxkH155/YuOnbVmboPYeaonAHDGLUlbjsYjPe1jjSnKZypT5cz2RUIKtwhNWggtRXKq6WwbnKlu/c4xPytNBjrtgd6zReouuwgZLdN0Mg9j31uhfkyBguh6d9OyYbJubWNroEr1GfvGgFBE8gkeq1yxkCuHzp5NbVV0rYCnMnAgivLW041Nc7lyi2PFoqgXOYAbjt3DpAstKYxQZWTEaWWBe+8A4xvg0zPRj8aeq+hmHOx5VsvaeHBD3Ju1IoTebkfj4FTU0doQeeQqYb7c8jaCY/XbnxSa8CYinrrGzhXL4/dVc65FYNf87azcNZUT8DxQzzjLd+vu/btBlGxkFpnwmM27yKHQ3Va+K4uzEbvzqQ/9ovYTG4BnzNiLgOjRv8kAcoKa/BnFhNd5fTOk7CIKGeWjz1HrxivKpPEpe9KU5WHwkKC1BC3bdy00MKo7iUTQ5bVSgZ+E0X3b0qPt7LBbymxQFmSYr57ponQA0o2SnBIA9MFm8fBKX8hswxjWU8f9f+p3z7ADbs3KplwCCJJciX4kNQsTHUMY9WzQw1rxsyPw9t5nH+VLHOLew/cke6eW46cG7y91b7LfG1l32zNptX5YD47/nly8egbPh7stzgbu8g8IFd+xqoV8uspRYY8oQSJNR4QI0GzaMFizl6qjEoar6fSVoF00AuhRsyarzjq/5Q39kIDgpVhSJDP6YIk/1XH1hv8bes77PPO3D9eyz8wGQyUdPq1CVNc7AYmSEAUnw/4i7AL8ZUKuUkQ5mXcxmtaT9z3FJ44ctTyQZMpkzzDIMlAKZ0UICtIdhbJt8HBtWAxvexGTL21OGxrL7vZhh51G7h2Q95ANFZ0aZa9gkx1DB6MVbaFqfFT9CAZZlpW+OtjqrddNAJ1RfGT15tXI5BZoWiQY1Xehp4kRDARN4e69ms3+ALTAWsZn3CYCWEBAEAAUAQlNwIwAAf2Uek3Nmz+3nxbJ50rpOqpnsqQsQMHk0gz+TgnBnyemtlehWu61Abdck9998/AAwQ1VUIgBwBgdOJkzc3Mn3xs475FKHk39ueRkke2XoyM7ZXlpML1pVwD7wS9S/ffYUUfhadaouqgP3DQjveFM/gFuggF3YlcMF2mCJXT5uGIhL7H15bytKD18ZCkHpbNaWF06StTtnAEICAEUzQFZWAN0Nt9/vd7+3eW933vfunDsy5y3nlsxyuUbZNdZZZmQCzJIogAkgw2gxGHwUAiIBT3wAACJ8kOEDKB+AgBhQQAEgVPXk54+pEKxSEBPzI5/YRGypn/GHNAngc6OKr1epycVeR+1//PTgHfV/4vK/Vi9SxgnGrxj3NcVUq0YdmM87xkMqxrFie26QG8qBRMaGrJRW0kzEyPbSRrf3iH8uwIf0E63DJF7MpHLOmYhHHdaAdTI50mNcKh/VKCtvJupMRbtcJeEm4SUr/ouapNKei/SiT8l2MnTK/3bIFNWDdeQchFZYhnTBnFLh5HSn9dgkSE1p/DtnB7+EYbBalIy1gJKerGkGqdiNqgyEIKusi376TlNffpkxWLohI/alFSOzKTSJFrdqvVrs1NyYZEXItnk5ORof9LseU5SgyxciBZt0GKsmihK1rqjFgnwKSmsLSiencYgZv75cSC7FsCFnxBQsViKVj5RnebnsmjM+O+KKK5gsJgBu1Z0B7wxDBU0Qi/yzGbJoxVfYVxb81YmUPYlSUIyFlk36q41harWCrGoiU1k0DeD+EXdeiXqQPusghs2KH4lolOaetY/JEcdX6cbqwMPJfeoNtizL1MtOICzFptgZtMffozi7BgHEKTFfA/TcXi2a1ihW+oZOujpUsgvFWc5Jjodis+mOT8WJE1djLJwVawBmpc+mmgUa7EoaO5vsNp83OwM6gse3MEABdo4eqK3+iIjiroG/4GPmhBWN4i4ybMvWRNS78HyS/VNDAVvuEtTFH7V7gNGOKtaQwHpMZcMqw0+s7K2riiIIxFXBRmNDxhhuqUMBsiIzaxDeBWd/nXnuqNm3ni0/D/ZuqyHdcl/mgoI9Eixrc/+2QXXG+OtR29FzCHPqVebUBDZzM6n8mTeEA/XzPAdcVdpsyshJujPofIoitOAMmezuB7tBfOMDapSOg3y3Y9vSO527teM+j07anVy4vHTGrpKv/rIfx3w5PsGHcKfR6OCs8jASkQY9jmirCz5QNVTrqNu6HJHntuZIo62Yx1eFqYKlBkwpJoiNFVkiD8xVLu967ePfUG+YqzlstgJaN0xP6o2aWp7UbXi5gj6+GjIOQMTj/ggPQNaXUw59fUActkyzaCQIMBZYSIzYkDg1kWvVKbRhjSzGiTHiV70qsRHFmHI2V77HZBqCCCO5lRShafB0+KJFQp+gZJ1E/NIM58b1TEJ7dblVzYmKrU+GUbIdMzo86srXKvvLtN5T6gXw3SeZ8B3buO0luuJMuJapYqVkj5LT70iDzqPv2O0aqve7ff/uelQgP/C3tmTCARFcsbFeUbt4njCxhoZTnfwj/UmTR3Q2HJXDSKsD6OSShqtjAoewSh34yY/qljnERUc9//DEcGuxsiFWaz9K9byZyc1B2hoxoeHqb/2XeHYOQK57uF46ae4kHPPfz3qEyTuua4YVNkaOU0T1k23UMhBpQa7UoV2gYVZiljiXlUfsn6259N5Pr9xTAjuEd1xGV5WVk3TCYUrSm2TWbaUmQPRV76ox52L9FYrwVmKpxTaqXA5hmNVgca8gmVDOP2u5Avuws0vcYto9kbUsER5ZjPZFVljL4iw3CjDOPKxRDisahzeeh1ISkMBdmKwfsCX18KzZbTw99ZLYs0l0Jpq7RgBV8MRHQWysq6oX7dMKzNDilbv4yeyfNG1ftpLPYMQT8whZEuGq6Fr5odH7PD5YNuwinuu8TV02PasGVyPJtqnmp/Psa1O/LF8kmsUA6/8PyywGqBm9LJ+yx0CL/Y19+C0p6krZqoB6eaxoPO3KclGycMEJitadc4aE5LtaxHs+l1hyMsGfSzUqpphSmLdNRLugQLq0qi6SolZ7i9sQFkOrEbAynL+zvKtx5iVj48gdcJlFONVwYfyx0S9b+zX5jls9S2fFqSA2faNDMFZrNxBtNA2Tq7TrWjzK3GSz9L4LSTeEd6Kb/vudD2ff6cujY4HCY0jpdeYJz1ycx61sfhNnCyUr3sVU7C6kQPIpllEePtOtZmlRcJWNH/nn41eUlDTh4SCU2tJEUns4il5NBZBRtbQqZrf2+bcd78BeOr6xzO66SrpgXq/EYYiWaOI5xQVOqWpo2emhWci4ZPhotqobl6aGO4J6LBVoBwGTeixS2H7xhr6/0QwvCKeosii7pMR62bKkzpgK6hMOlBnw+5w4P36JFfuBfp8jC34kiOxYQqso46i3p2sYol2h4N81nKoqmV7t9zSzMnI7Cv4pwoCuEhIRA9DnI86avFbk+R5RgTSVY4FOBOdfJHmy61hryDFgK4bDnJt7h6MbEBvp5ecvqOInik2kJ+kAJku7pQyQirtcY4S5+cLknA/h6eIWMaevFauL6k//r3cxUQjBU2IHQwKKV0S4A/F0rHNg4S6rXw6G+bKmk/argmRTqLOG/VC7RgMzm/OgbGMeNn+8Q7rgD5HreHDN3sEHq3i4LWhkA2QdYVPT+jZvgEyjfoGC/lDao4ca7pjDbeS8ibkhD0yrGQwg6kZ7pTw9WBWGB2q/rKcisjJOISXdj4cRXZZhxUikanCZhP+yMjxM8KrqalWNHhKtxeGqV/p5WAfjsP5WbXUPm49g9MVWj/v/AFIif/RJ8zeK9I/Epc8bpvUaxfMnw6dNmGDsbhTWmyDGf+hWqccovj9TrzhR4YVM7DDbtB43etSHtoU8CKfHvQy1DxQaISxH6AtE+xABEpvsSO3eDz9GSe4XSvQPZKRPC6T1CSXz5+OjnQ/T2FsorTtArO/IZFMUoQbulOdfX8d9QPAzpu6gcqltvKW586s+DDAImrwqsnMyXsJVX6SKv3c6GiU2frF6tvLxWTCqNcj9NQ1ZUXDPzeyeBshD5eGEzvqndMw8LOM94BTCtyfnnM5f/d95fm0jsRW9E5r2HetUOwRNv4Ob6r5iPXrHNGg7JzvXJKwJ7tCrHXXZHaww7lRVuQ4LSfX/KcxzZPzN+NF742bDO3DYOFGzHgry9WEUIwZDvclGFiaiaXuxE65p1Il69PF2pJDaEfca70SG9YjuNIe2FPpPT8DZvLD4ArVNdHBO6APA+i8kCwjdjyOnPYrU9Qfq6f8gQS85aeDmAUAtfMCoJg8m9ZRBBonGoAPogDlOHcQHKwM8iKng57ZxrjDQwXLUOoAOWgdXMVOgy2Xj1e500KAtOlhQVB1I6EgOMNwziZBnnq724TNrfD5Tllczu7J7JQLQQXGsOngOVgc20VKGx3Xy0IF5oukgPUV1AJ4cOLBeywSqRIdk8mc6IaE91QRpfM+Zc7cMnDTv8uzmuvxuVOwW1Rp97LOMvhIeu+JzrwQ/2oBHyuSWtpK4hPUXYwbSN388mNOgRgufmjaJZ6HL7yXBFysRhH7KQiLVx3srtdZ7TFP8y9ya/JJH6hm49PVXMgHugX499LH2Q2Z/fSBSDSJaHUUKEumU9LAu46gbyjm4L75DuuLx7luWiQgoFfMIlFLvJGiStIm0LiN++OiZhSxlxdpwTUWM6EZnmHoPpT82c4Jrhwm9gG3CVZojTGsENeASxV9bIgmROTCT6q6VHb3B31ig2+Eh5r2cgloU2VlT7dPXm5Kb9NN3qgFrlnPN1xnkK/Uq0ZCTB1PhrbL/u8Ft+6aXcF0XI/+OORCWvyWzMkG8qL/kZu4w/tsloGNqOQh5uVOo5RQJy8Fz7ftM0M9dcxdNPmOtp9ziywxCUq4tCTgCjDibz1f4Xywe8ZlLG9S29DXucZ3fru4Wxy+Ta13S6pGyPWuaovS/I7Tp+9uE924n2Ccg/7/hO6dIteRBRbKKRGEq4IBQhopZ694JITTFwuzStKynCnUCQ/W5ivfoiFvcp8CmbE+anD04xjOn9BqOdqcxyf6Xo1UYjHR6iTEckpMuFjx9o9TehAQDfu/NJ/a0An230ZbiNCeI59sS9Ii+Yjk3SqgSPzxPS2Z6432lFhI2fscOr+I0AKCZmDzJbTu+0xQbTpH9mv61OURLjkdGfsP/1+Zk4y6DbFKbGhpT+f3V89/aPPPj2dk7E0BQauhn2ojCimaHUWqKRTPO3FCuA2o0XWQjeCBDT1sKqej16o8UjnvTR+pGAHoRtMg0s6Ns9ruGmjj35hVQ8n3p/Q1ZZDw/dDeA5EyrpOuiOV7UZJrD/KCxA/IdZANx/8JYHz+Dx+ioHrfOqM2niwZV8f6YId91D1rdpcFOd5hyn5H+iCe/whifMPfKeFawjb9SNrNU0t1j2mOOFRcAxQ6Fc1etzVqg9BqBKjGVM2taNsgjMU99yDeE2/zDu5OKvfSqwz+0kL3tx6vXqBQD0UHRUKMQlQVI7W4yGDolZnx1ZP3kH3kkdsOl+uY8Dx9Ue98zANK6wrVtK6VeoLFFXSHO14cd+/PDnfdhBh9cf/Ps6SoB8IOwzh4uxNRlFOZ7Hz/BIKvE1lePDKVZlqo2xQpYrYzXKlTOfXLWZlTPg3XYR7fvaRWOBtOyVMx0gQ/8Ol2fcLnIxHDqkvyPpJmRyBrgJoI0JBZuWVdo5J6QIRGjvhZDio3I9YsYHZn1ozKGcjJCKmjEMTWD9mqhF+Kw3wcimnV3A1G4wT/HBfXgpED9/aufyrDuKGSEezJ7ERy0VZT2mvimZx+YuDATDcusYuzgIMrgA3KI3nF1EsYBYELAEfpWQvzh8WHUa3Q2Fmr3uNi8PRt2WFJNr6q+Q+clT8Dqy+eKTTzhVWyYcmnfk5jaFOTL2+QrEmngM9nz+zANAOCByTvoWBpJl/mCyRaMki+ymFV1x1cGuO8PcBgDr2df08yMJSDC0Lp/nX0MUv9kvXydA8XGm3NvPfHpNPxxPa2uErTBgkHSGXX/hcjODkExvAEf0zEi0GGpXOgaIJVHOZnRqZHTnSEEZzoJABKQ1oAKIRX+NEGDQfR0ySgNVdlE8SkkGopsab9EZ0cJPHhiDrEaecRnFZDupRWRgomEqAr37cAqPrPH1CoxGrRdeVklWBZmK1bqClFjqZWa5qJVxWbSNK6oQ93QTDIcRtrVpjaM9sh1wGaMz7QnKHyqa0hMI2gXIq6POC0qSVpHDQIJRU5Cfgk+ruAaX1W91XF56zxLMaWnCmt//FzW1gG5sPV4BMXBJNZ3NYCFgqzCnFi/Yp82hbLs0GEM/DHdnS5YE00FelEOayPbXU71GwsFjkWhrujTXGVYcQeQ1Cig68ZYlAq8rhH3zBiL3Ul+92c8WMap9aWQGnOr9VlbLv+39Ld9Pum0J1vy+ob/vju9/vYIEftnXv9D/0NjrBT+xWPhCa1frKKqmOL5YVK0hke0Jm4GFgDgX12gK1Z6S1ORha64HqI0I4BXObuffhg4cDz0n+FSLf0XfDImt48hfb4LsVz3peKid7Lx7EhfSjpLSxnefd/puuZ2/WdZZCjz/ot7Xif9StRw279ztslnnkiNLxILOx5WkY4GThhZql+jtNJGLxJMhuOHfjylDv72IX8XTwZMby1rRZolnGNdPHUteb3YOeVTlSDpPpH2CBVOpKUAY5IghkbJ6C/XQeoaVexUE0fkjzxDTWyyIBTtlK0xPHkg+hf//xIo/SVrJGMlrZ2BcgmfZLUi6mpQbZKlz83ek2wMnND2JItnC0SJk5UdpKUpWS3qUlUMcBO6jyOSdGfes0s0Lfiq0SaLHhAdT6lCe8eEuq20T5EuDo68jiPBB0fttnBoAx/dvOcHqHiCmRjuXaUC0Bpyba8I27guxw87Vj58iMvu/hDh
*/