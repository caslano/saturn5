/*!
@file
Defines `boost::hana::reverse`.

@copyright Louis Dionne 2013-2017
Distributed under the Boost Software License, Version 1.0.
(See accompanying file LICENSE.md or copy at http://boost.org/LICENSE_1_0.txt)
 */

#ifndef BOOST_HANA_REVERSE_HPP
#define BOOST_HANA_REVERSE_HPP

#include <boost/hana/fwd/reverse.hpp>

#include <boost/hana/at.hpp>
#include <boost/hana/concept/sequence.hpp>
#include <boost/hana/config.hpp>
#include <boost/hana/core/dispatch.hpp>
#include <boost/hana/core/make.hpp>
#include <boost/hana/length.hpp>

#include <cstddef>
#include <utility>


namespace boost { namespace hana {
    //! @cond
    template <typename Xs>
    constexpr auto reverse_t::operator()(Xs&& xs) const {
        using S = typename hana::tag_of<Xs>::type;
        using Reverse = BOOST_HANA_DISPATCH_IF(reverse_impl<S>,
            hana::Sequence<S>::value
        );

    #ifndef BOOST_HANA_CONFIG_DISABLE_CONCEPT_CHECKS
        static_assert(hana::Sequence<S>::value,
        "hana::reverse(xs) requires 'xs' to be a Sequence");
    #endif

        return Reverse::apply(static_cast<Xs&&>(xs));
    }
    //! @endcond

    template <typename S, bool condition>
    struct reverse_impl<S, when<condition>> : default_ {
        template <typename Xs, std::size_t ...i>
        static constexpr auto reverse_helper(Xs&& xs, std::index_sequence<i...>) {
            return hana::make<S>(
                hana::at_c<sizeof...(i) - i - 1>(static_cast<Xs&&>(xs))...
            );
        }

        template <typename Xs>
        static constexpr auto apply(Xs&& xs) {
            constexpr std::size_t N = decltype(hana::length(xs))::value;
            return reverse_helper(static_cast<Xs&&>(xs), std::make_index_sequence<N>{});
        }
    };
}} // end namespace boost::hana

#endif // !BOOST_HANA_REVERSE_HPP

/* reverse.hpp
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
*/