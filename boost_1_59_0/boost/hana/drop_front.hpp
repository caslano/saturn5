/*!
@file
Defines `boost::hana::drop_front`.

@copyright Louis Dionne 2013-2017
Distributed under the Boost Software License, Version 1.0.
(See accompanying file LICENSE.md or copy at http://boost.org/LICENSE_1_0.txt)
 */

#ifndef BOOST_HANA_DROP_FRONT_HPP
#define BOOST_HANA_DROP_FRONT_HPP

#include <boost/hana/fwd/drop_front.hpp>

#include <boost/hana/concept/integral_constant.hpp>
#include <boost/hana/concept/iterable.hpp>
#include <boost/hana/config.hpp>
#include <boost/hana/core/dispatch.hpp>
#include <boost/hana/core/tag_of.hpp>
#include <boost/hana/integral_constant.hpp>


namespace boost { namespace hana {
    //! @cond
    template <typename Xs, typename N>
    constexpr auto drop_front_t::operator()(Xs&& xs, N const& n) const {
        using It = typename hana::tag_of<Xs>::type;
        using DropFront = BOOST_HANA_DISPATCH_IF(drop_front_impl<It>,
            hana::Iterable<It>::value &&
            hana::IntegralConstant<N>::value
        );

    #ifndef BOOST_HANA_CONFIG_DISABLE_CONCEPT_CHECKS
        static_assert(hana::Iterable<It>::value,
        "hana::drop_front(xs, n) requires 'xs' to be an Iterable");

        static_assert(hana::IntegralConstant<N>::value,
        "hana::drop_front(xs, n) requires 'n' to be an IntegralConstant");
    #endif

        return DropFront::apply(static_cast<Xs&&>(xs), n);
    }

    template <typename Xs>
    constexpr auto drop_front_t::operator()(Xs&& xs) const {
        return (*this)(static_cast<Xs&&>(xs), hana::size_t<1>{});
    }
    //! @endcond

    template <typename It, bool condition>
    struct drop_front_impl<It, when<condition>> : default_ {
        template <typename Xs, typename N>
        static constexpr auto apply(Xs&&, N const&) = delete;
    };
}} // end namespace boost::hana

#endif // !BOOST_HANA_DROP_FRONT_HPP

/* drop_front.hpp
q+ibM118ovZSNLTHyD9nu7QDJt4R4fbNZqKPMYe62+bBxSZpIvPL0+1SC6rouOXvRltbBih1CGi5AqsQx2OcoVdrubwQ9jW/YnlzMhkjlLBeynytB7mAuY33dxRUXI/V/jmJAl7yckrA7qUAkHH/yhAqoTEvHJ8xh85IyJcDSw+viil0+uvtqvkwZ3n+LjLcavdRCNR5shx6gskZ8BD+ObGIEMUTQxVPDNU3o2Itiikef35U8JS1QiuT11SCe4VcybSMNtyasaZFlOgwOqfSync4dgpTUKFHpI+XMCm/BVda7gL285p+0cG7yPoawR4f0af9id7iC+KMWYxYZuBMWsH13zCmlUW/0pWMK5953PgTp7GZFceA6VJhgEz1sRTPpIfNFa7oBcr3w4llO8RQxYMXkDHCWeB2Ucxx/2gJZOib0eAJlRgZaJVu6zISsW76xHzFmAJrFR3dbVEiQwAH6Dfd0N3cD4x//6lzbMWyFBBAjax7AMRn0vBzxhV7fQriOFpIYo3AM53eZ9HE7Eqc/hcrNHbldCPw3IEljtlp6HTiLecfzQ4agELAn/gwDpsGDEcFruKYFJnzNQeXAuq+AMdXpULow0UsI7e5mpPOFSHE9B9TH1AffsX+P1mlTCbAgrD1YS+1IGJgKxFDAFCoVGMIKo8ApZk4turKzBNeWDPMCg4/enVWdLFyhIAqkgW91HQa41SaQK/IaiN2zUPyz6T7CQiqFNlB6XrKb0wW4iyF17RExGtHl3UGCTQXh74gw7UzAWCHolZo9gkGtCLqzC8A4yPImO+dy3S1UoRROG3EUSxbo2xiucEmYsRGmGNhXYi8jQE23SIwVtNuo03Vo5eFaqlfu1lcg2606uXS2p8Ix/aVToE8LXQBXBUKWYEmPHc9U02EGstBnA0pSQgODrL5Etil4kMDSFXUEswlJIBhEG5AAc8sHSDEoykFB0VWyRbB5OEGPaCRm3qKAg08SJQbuyb1J8HiWP08iyP1IIP/dESN14ZrwSnY6oqPlS6Avo2PpqqLDI0PqQFtaLLJjI9Suf3g2C4p2LxWwRocz9IA2Ox2ikZHQwNiqdWw7S7wsf3/naT3j17IiwyJvUr8rr/fTPFDYbsqNj7w8qFgj90kNDgeTSU2PuzFVzQ6DrX442Dj937ph8futYI0OP4nPfks3RBueCQ0PIoaELuLHxsLJ/k7YvBmUDxrdqbwESA4f/1lKcqXg3qK/U0ClNO+mbbx9G5ByDmfUlUJKFkgI4q9d96TV/Mc/BPz+CZ2MB0tlcjplEiXen/fGgQIQ9nOCSp9jm3MCriRmJOHfdY9Osu++U7MAfYx9EWk1cEnQHWX3b6ZiErejNLGvbg9eQAPkAwYDR1dHSHBCOUsWZzg3S29kJq9Zzv39fiQuB5xsR7xXwFiUKZJZyCOxyCDqxPvPW9e7JE5xgkUYxN2reBIZ09qiGt+MyB4JKKpGuE4tUFLaiWnD9/991l7VaPAjPDM7vaPzf62QdfJjmHTTtMhaOhx/lbR5BUoYFcoM1DxhJv0Yf6nyJ7G6gqM1+zPTkV7wRtNKrGQpg415Al1KpePdpEmlWeEN4Rnx4DbdgRZKq77vmdpo/sG0ZajfN9S+bojLyC33CpxGsA4KtluPZtbB13J+JTwd9EHjNF6rZBgQZYbXLpaWqnGud5GC8GIIbAg74Ijgr+UnH4SQDNCzaaupDt6O10TRu7RYbeRcGA1YeYGqvY+l3zSbHJJp0mCXycQD240uk7L52gStLkZ4Aab/KBGgEkzScoVkfpsinCWDgEYNI6RGytjF5YMXqljoZAYn1FaORq7hHJBXK59W9mYzzqE0xF7StPUb4XLx3AKw+SmLC1N85SDpwU+A1FTdTrJSxKJPNMoJGW/KniMxtrgtZWZ20omz7MyB5loYZtrxC7iYEUFebZ3Bdtar6ZlsalUCyq90y5ERytxf+2bQ1n0/JfiwUwfTfcHbODpv8mZt9hkTR3s6UPJlaQEBmpbYkXngKmT01CnDitOGcOXfccOR30DnbhfwYvml13/03aeslVnhckjGEBectnas/VqNOeCq6+RynOujdM8HD2Fau7iXwQF97wZMNezfxW37W3KruFgchxhvSR50gA9/milNkN2sJps7iUlixmw8qnFVkuww7kkPp2UBZstNkRVsklpo0n9cfCkuPEjcegqiQ0ooKsuzc3YDi/gTXvlM2kf34/UDWaBeyTWnNAVaU8RWlMLqDO5UBF8DVnNJQqKzosKQDFqyzmetlFZQxXLOD2xb8q85vdkonOY0s85NrEiQAQRIqGi4/rtVw3LqFVLPh9pJUsebGKrlmxtla5Z8c3Brljc8MQRXrIMfiIr1n746DVrX3O/oXrChwL4oZkOrrzTIHFWbOF5ymZCoyZFGyZBZsDEta4B1zFbM4sBOiPCkHNjRHPoKoj57McLHPLvYMik5h4epQumiuta/dRUzM6aNd08XuoFltq3kVGF8SINnhEeSrTQ3f9g75/VqPegtGAClXVei2samoWElspgobLsrsFliycx10TkcyfDfIQ+cu7d3QCwnYbb+EbCbOCaCIMfUG1eTNzQmpTbPqCxJ8FJiKbuSsXZUkBTe1+kdkCddnZvJoOgTAeFg+wQdMUlZ+Xm5B3kPi0xpiLBcTQjsjMjsmN7uVEKcK0hgbQMU0AF2xTJ07GKCmyzY9o89G8ALKgrGTWvfVBPiyzuWoKb8JzvxvoXR9oFmoIWC940Q8H6ZqMIDuJlzdxG9BGpZgWv4ekddAks0SW0fJnExomvKEHb85QSNg7Xp66rwBXtrQ4rS8Ibkc32MUF9LKOd2hAx93zAWLxSgE08Qxt6C2I2UwSi93JJ4rWaeawA4wIPpIcOsm0KhtJHH5UT98q/WDhOh4PXSSE7sVBl8oxO4CcTYtoFETs+KZlkf2Q9XjA7UiuIHGU+aJieBOnT06fJpgRg+ZcYZ6DyhKYcoDjPUaD02IvzBK0/5w/jDTikKXRHqVihsu/i+JLnUyF28H+IBbWxFCv/+28w0TvIigguZoc3/jV4J34VpOG/cRHMrrc+PgK3q6CGrkaWgB1ia6B13hoykC50pGu9wEUtDIyurbVvovUeY0mWaz/PO4D13OY6/etVUEP3nUmFa7ynqpAdxisi47eFHqvr1b3vp4Yu1af64VvQLuB13sHa6RjVTMQG70KoLkh2D38oN/FBPEusYyloJIppuWKGKRsfHkUPL1uCH9UwtWBoRHOJ93rmdZ1DI74451dl0ZDUSF+iuokgCGC0YJn26f4F0zDResOWemChDWpfog0VQU2jPbsmWJxjK6pY599bZC3YPdGaUAwLgCl/MXVUH3hTtro8Eb4aOklRLCYlRpTjx8IS4CobVO2HhCEMORuzXXYGUNWwi9k7nzUCYvJ9KxBgZdOaezB6enGB1y8w6/aIIVHQeXs8EDnNLKujdGF2da2SUFDQzvHOwehL11AKDngADwhayydMw7a+eCnv5oyhPr70GqZNes2QEfRPB8U7pDF3SPh+5jCC1TtgxlSIAOpRNFzQHilqn2bxzKB4QTln+WI+4nB2H3k3/9Yj2LFbzeJWjkwzezLzKyqPC6EHjK8yvOfW75KIF2/oNMaDMkaK5CpUJQlAA8nx7ZVoWIvhLzp/m4WnWC+XKodF1BcmoZBBADmTS7kZUKSDKsUmqtWc+x2PbjBSlheSssnfgBz8L4weSdG5DL7IPLW3Qw/s37WOY6lN1fmsC88gxP8GmCWWMHyGu/xe/rMxwi6kdmBcfA6NR8niYvS7yxKLaYJQaXp660WSW5fOpjDcQTJ0z1FHXJ2FhyK8AkzasRyrsSagtoN0ZBVi7rSpk34QzfZHXLTrpUayzO+UFtUqueH+nmdrAM9LYt+iAQq11vzBPmiNRookfWziQVi5/QfBPUfoefQtsVd7RnRfs6OrMO6HIp9wiYSZqHqWgqjpJ8dKBH6MeLCmiaByluBztThe1kdnCOU7wiqsNPQlkmtQZomDef/hVesALDuuikQ3BvIG1xNuM8FNcP2lgBxhHPvfhdXVOH0An2xOdjcE9KyReV9zttf17RiNcrWUvfUkIeM6/4HMb2xNAT/RM5+4pgEZ5Q6dzdVAFD/geMyKXG2WA/Zt/8i2FxGAdun2UMk2tXcC9OtST5HCYFjJJsjz7Glf4KJ7v48cZFWd1qdAbZofAXFF52L2k9O9gVjBoKfSz4nSD2HJoC/bml7HYO97UazOSriELvcvC2lT1WB1KbwOtW/BR7hAqMK0UPSBf6CUvG2BKZy1RWbsgGmTRWZNARM3e4WpSlcDQzuM+JSDoGkeiWnO2+HTjZMf9+mZs6Uf00+Z8HqijpbgxxihIj0iG1qmoVsImVx8SgYi5UOZROSoRCT6mKjEl5NOCeYWIqMre5kWbSlKMZBQkAFKeNcKXkhlB8q+pSeaUEp3eb0g71u4HtSbZVoZxoTeQbEHGdHKgwKc/XOmNT4lBYXB3AcPuotPjzhG6V1FXf3VasdRbKfZVUaxjaawltuJRDbHOtmq9ocxam412IbOxebhN9tuhrJpSyTtClebF4R2ZbWIOVv3FhN3tE8vePuXl3aZ2wdLY+hU335eOeiVI0+tTE28Rn7sGoWqFnWyEWejrk0oVe4M2zsKBVlxK5/v7Et6OHjnhfyZZDOTN5dlP3bc22I1l+ZaKHhGlhZuHo+mzGuUfgMjq/K4ZIpGU/VrSyDlnljQXD7edIp9oXykzAd5yfMFyRiUmo2jzlxn+YgG4/WH1/SAsyPqjMzJ0f31Zc+kN0KvDd9s2Rwrk7W/bK+CUXdMZQd+vN+psxiSTdBRvvVlwh31k65x7appOjDwXpinR63sb2WrUnJxTy4yuPOFOndXD7FRiT0Zk3X4QLP3JQFbrrSJVctzdeSiujmrphCf5zbCSfLLc7jYjKxGW8IXytmOIYSLRXWgS0SlJ+Id4MbP65bxrCe8boLYnG3GxcVqZpaV4jXzKtmdpFQ/ThnOkYUvQ8R2sEMEpX1xyRLnaXLfUWCAzAiP0zVUtow8+hFvVHt9NMidAGbvvMBRPMkB44S2RHETEqMOkDLntIA8AiyRJk7xds45NiXymTYPjyDFU2reMwniYnJGq/iDrazkYjHHOmsti7pSJWX2nFTVToKR9lwesoaveAD3h9fP+mKnRnXlbNYF5Urz59y7mn19GBywigh9dYsJE2v1fiT+Ka8kG6EzWMm2Ek/ScvYF6ZtbDaWkB1yMntmNzWZYyJq4IXaZQYobH3Whm0qoPdjybQdCscpN7x0Ukq6B5Q6RRf/iqWhNryRXq8eBYtkpfYhxfiFI/lgK+1K5RpkPDB9g4FRiR4Jq+kF+owtLguFEazBPekjtNvictRelKF+A+YJwENF7XSDMg82poNnNlYdNuTuK8hMPT0LjwZTyZAQ9VgaMDFcTuv2RqOIzXXpbZ3pBoELEg2vEJDwT3beo0jBj4Ak/apWLic4EIp22lxKUMl/uvinNzNw/dqukm80HNka+UBQw4KH/UDVsTuX0g3kqwy5TJEuXQGWrNGVDCa/9hbBDv7FbAjFDy/tTMF/MbedjpCygPoxcW+h/4s5l2tMmVH7A4JlfhIDRrRLrdrmcJL8vhMq+MsTwqnEXEXgD/Z3GWzJiuBaUXX2LGva/+RZ8eL4LTXpTN84j52F4AW80NmEKMhZjllLgkRswPaBRDuqddwG8aW90TKwedk/LrwRIMWQILOAmj1DBj0504xjnuHum7vkjta5YqKwIlR+XkBiv9j5LeBxL4wfuh3VbPxG/7piUpi61OX4wqwIN2OuKdhxMRAuO0XsZ3XpjKnB/tzb/jYmr6kLPHcsMJsDkAAKBeIJiEGLcxB4SG1ac9sPkAJsDwBJEwV9KLFPr0HIGKxDAk3fMNGBG/9uMV7Pt6FnVrrWtbY2q1RIiIOlGAmQNSI3QeuMoeFjAEMiwr22d637s/+n18ydxnuX7r+N196p1TQ8a9z9RcS/2jZ5WWoJ1xg1yVs9L8EWH5pUkaSB8qhpKrpRfU2OhFFddu1YSmEivKuLoxZPOxWXuQo8MfL3IhT67cMs5niaaOsIg1Y+t2pZT/9ZQjJgjvjDGCcIDZ94WKF9yDt7rhHjW4AYeJHLngtE8oVcSqJYbymPrIuD9wpRukcTwm6Qx+2JaH/SdbY9SFnXzNZpsOs0gc2aXDe9YqPj6OpwApyfbuiCnSkHDg9Lhl2tqeE/GR7FK581CJ9FNSKPbm2RXlY+BcOn7YGC80YNgXDwFQa2o9CeywWBReO+n/Y3S4V2xYn+xQnS4/Zlk3Nm7ogbdF93ujNrJqq6PQpuXlZLec9+CQlifHSQVzJ74W/JBDDJYYdJ9IwZW8WIVf+bf3WgQQuX5SbnLeAWWMe1Qt2vQrKblo4gA2gHf+qZ6yfHwPM9BaeOFBS2HsKkms+UyGtiQCA3lHtVoWIGcguFXz6s4ddeSi+i8UDbR8xCoSCKpAXw88pomaAf7JIchmiB7vkEO50imHOV1PlhVIX2rRfSoFvVkOFRzTH2grQbgnY8Jfi0pZZZMB+s3lI5X8hbnLlRjkC/12JH7PXMZpXs4qx3/hPT4A/y5ZAmN577IrI6AsjBqpuJ/o1oxjh6U2D8m3dDVAqfo5mKX92d1EqSGx830dVEYEcHaMYH35vExjMkr4zdFt/hZrvAIrlsFdhcj4MTsBr2bPaNYqlxkYF7+Yj4FTweWoyjFMn7FmsDb/51z8vzjuIVNNwTogOxN0lnLWsg7NFXrQNMltJ9cwGDQj31xy3clAcLWI5TlSpPo/wSWF+8Vg6HAjfYRcz/FEhglFS/kDfekLumpEPGL49+L/sKvxpjbSWTgbQXl70DHwBtOzjeZbO14TiBdyxO1ndE7UpKpxZa0YBlyAJtbP+bqJvw8pEXE/6mJni6L1DSfqxy8UUPZM41gR2HfV2JxJWT4IudiTdobF0TgcWrTR0BJzMSo/TfqZQ0E8khG+YDGmV3RnHxJ0iB31zfrTuu7LAkJoWZNpeEvS9YC0EXzPhVzSlwzWeROjmQicy86tW9K92U53zSY9XFlroSNLx0bPzwK61//URKy/BGDZliaBedEM8p+36gWiyuDZPdzrM64JL4CYSNgemeoHivYPkJEAA4s8dNPILkeiD7hXjWtHlC1WQpaUqVbHaaO8nKBnPL+AlJfF6by3yHIT+yWcq7qxmEpV3SFoX4Xeqt5vnWNrqH+UwxF1PU/9I95TZ1Khswk6/ohaYcXu0cCdQkOpxGh7hvh3U/XtlgUURv4Y1CVXbI1toOU4+W28da7AtiHTOlY7eX7Q7ePWLSfbzsU4ljq5f1RtqusibzDF4bQeCW/ipoIAUjh0HAw1lNr4G59lFbDQbLIU3Sm1krG6fUYW9Gzj3s06iLY95oG3pVbSUBuQiqPPZYYOpaQHlsvjKqQgU+NZLrn03GVE3/JdH1TRUtig6VxWAt31aZGW1kySebdz9jzk2KQZLysUX3N5IaeTjRHe/DXaWX9IjQ7mycU++uSJcW8ebe7SLnDVmskk6cWaF/OCB29PAZL1ti6tEyhMy9W0ftu3heaCg3SExBHJJJ1J82cBlT2smNCaOan/8zPvP3LuUTIgAZ7n3nQi9fq
*/