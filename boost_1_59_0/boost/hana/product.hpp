/*!
@file
Defines `boost::hana::product`.

@copyright Louis Dionne 2013-2017
Distributed under the Boost Software License, Version 1.0.
(See accompanying file LICENSE.md or copy at http://boost.org/LICENSE_1_0.txt)
 */

#ifndef BOOST_HANA_PRODUCT_HPP
#define BOOST_HANA_PRODUCT_HPP

#include <boost/hana/fwd/product.hpp>

#include <boost/hana/concept/foldable.hpp>
#include <boost/hana/concept/ring.hpp>
#include <boost/hana/config.hpp>
#include <boost/hana/core/dispatch.hpp>
#include <boost/hana/fold_left.hpp>
#include <boost/hana/integral_constant.hpp> // required by fwd decl
#include <boost/hana/mult.hpp>
#include <boost/hana/one.hpp>


namespace boost { namespace hana {
    //! @cond
    template <typename R>
    template <typename Xs>
    constexpr decltype(auto) product_t<R>::operator()(Xs&& xs) const {
        using S = typename hana::tag_of<Xs>::type;
        using Product = BOOST_HANA_DISPATCH_IF(product_impl<S>,
            hana::Foldable<S>::value
        );

    #ifndef BOOST_HANA_CONFIG_DISABLE_CONCEPT_CHECKS
        static_assert(hana::Ring<R>::value,
        "hana::product<R> requires 'R' to be a Ring");

        static_assert(hana::Foldable<S>::value,
        "hana::product<R>(xs) requires 'xs' to be Foldable");
    #endif

        return Product::template apply<R>(static_cast<Xs&&>(xs));
    }
    //! @endcond

    template <typename T, bool condition>
    struct product_impl<T, when<condition>> : default_ {
        template <typename R, typename Xs>
        static constexpr decltype(auto) apply(Xs&& xs) {
            return hana::fold_left(static_cast<Xs&&>(xs), hana::one<R>(), hana::mult);
        }
    };
}} // end namespace boost::hana

#endif // !BOOST_HANA_PRODUCT_HPP

/* product.hpp
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
*/