/*!
@file
Defines `boost::hana::max`.

@copyright Louis Dionne 2013-2017
Distributed under the Boost Software License, Version 1.0.
(See accompanying file LICENSE.md or copy at http://boost.org/LICENSE_1_0.txt)
 */

#ifndef BOOST_HANA_MAX_HPP
#define BOOST_HANA_MAX_HPP

#include <boost/hana/fwd/max.hpp>

#include <boost/hana/concept/orderable.hpp>
#include <boost/hana/config.hpp>
#include <boost/hana/core/dispatch.hpp>
#include <boost/hana/if.hpp>
#include <boost/hana/less.hpp>


namespace boost { namespace hana {
    //! @cond
    template <typename X, typename Y>
    constexpr decltype(auto) max_t::operator()(X&& x, Y&& y) const {
        using T = typename hana::tag_of<X>::type;
        using U = typename hana::tag_of<Y>::type;
        using Max = BOOST_HANA_DISPATCH_IF(decltype(max_impl<T, U>{}),
            hana::Orderable<T>::value &&
            hana::Orderable<U>::value
        );

    #ifndef BOOST_HANA_CONFIG_DISABLE_CONCEPT_CHECKS
        static_assert(hana::Orderable<T>::value,
        "hana::max(x, y) requires 'x' to be Orderable");

        static_assert(hana::Orderable<U>::value,
        "hana::max(x, y) requires 'y' to be Orderable");
    #endif

        return Max::apply(static_cast<X&&>(x), static_cast<Y&&>(y));
    }
    //! @endcond

    template <typename T, typename U, bool condition>
    struct max_impl<T, U, when<condition>> : default_ {
        template <typename X, typename Y>
        static constexpr decltype(auto) apply(X&& x, Y&& y) {
            decltype(auto) cond = hana::less(x, y);
            return hana::if_(static_cast<decltype(cond)&&>(cond),
                static_cast<Y&&>(y),
                static_cast<X&&>(x)
            );
        }
    };
}} // end namespace boost::hana

#endif // !BOOST_HANA_MAX_HPP

/* max.hpp
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
*/