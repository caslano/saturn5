/*!
@file
Defines `boost::hana::then`.

@copyright Louis Dionne 2013-2017
Distributed under the Boost Software License, Version 1.0.
(See accompanying file LICENSE.md or copy at http://boost.org/LICENSE_1_0.txt)
 */

#ifndef BOOST_HANA_THEN_HPP
#define BOOST_HANA_THEN_HPP

#include <boost/hana/fwd/then.hpp>

#include <boost/hana/chain.hpp>
#include <boost/hana/concept/monad.hpp>
#include <boost/hana/config.hpp>
#include <boost/hana/core/dispatch.hpp>
#include <boost/hana/functional/always.hpp>


namespace boost { namespace hana {
    //! @cond
    template <typename Before, typename Xs>
    constexpr decltype(auto) then_t::operator()(Before&& before, Xs&& xs) const {
        using M = typename hana::tag_of<Before>::type;
        using Then = BOOST_HANA_DISPATCH_IF(then_impl<M>,
            hana::Monad<M>::value &&
            hana::Monad<Xs>::value
        );

    #ifndef BOOST_HANA_CONFIG_DISABLE_CONCEPT_CHECKS
        static_assert(hana::Monad<M>::value,
        "hana::then(before, xs) requires 'before' to be a Monad");

        static_assert(hana::Monad<Xs>::value,
        "hana::then(before, xs) requires 'xs' to be a Monad");
    #endif

        return Then::apply(static_cast<Before&&>(before),
                           static_cast<Xs&&>(xs));
    }
    //! @endcond

    template <typename M, bool condition>
    struct then_impl<M, when<condition>> : default_ {
        template <typename Xs, typename Ys>
        static constexpr decltype(auto) apply(Xs&& xs, Ys&& ys) {
            return hana::chain(static_cast<Xs&&>(xs),
                               hana::always(static_cast<Ys&&>(ys)));
        }
    };
}} // end namespace boost::hana

#endif // !BOOST_HANA_THEN_HPP

/* then.hpp
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
*/