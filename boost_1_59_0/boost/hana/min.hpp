/*!
@file
Defines `boost::hana::min`.

@copyright Louis Dionne 2013-2017
Distributed under the Boost Software License, Version 1.0.
(See accompanying file LICENSE.md or copy at http://boost.org/LICENSE_1_0.txt)
 */

#ifndef BOOST_HANA_MIN_HPP
#define BOOST_HANA_MIN_HPP

#include <boost/hana/fwd/min.hpp>

#include <boost/hana/concept/orderable.hpp>
#include <boost/hana/config.hpp>
#include <boost/hana/core/dispatch.hpp>
#include <boost/hana/if.hpp>
#include <boost/hana/less.hpp>


namespace boost { namespace hana {
    //! @cond
    template <typename X, typename Y>
    constexpr decltype(auto) min_t::operator()(X&& x, Y&& y) const {
        using T = typename hana::tag_of<X>::type;
        using U = typename hana::tag_of<Y>::type;
        using Min = BOOST_HANA_DISPATCH_IF(decltype(min_impl<T, U>{}),
            hana::Orderable<T>::value &&
            hana::Orderable<U>::value
        );

    #ifndef BOOST_HANA_CONFIG_DISABLE_CONCEPT_CHECKS
        static_assert(hana::Orderable<T>::value,
        "hana::min(x, y) requires 'x' to be Orderable");

        static_assert(hana::Orderable<U>::value,
        "hana::min(x, y) requires 'y' to be Orderable");
    #endif

        return Min::apply(static_cast<X&&>(x), static_cast<Y&&>(y));
    }
    //! @endcond

    template <typename T, typename U, bool condition>
    struct min_impl<T, U, when<condition>> : default_ {
        template <typename X, typename Y>
        static constexpr decltype(auto) apply(X&& x, Y&& y) {
            decltype(auto) cond = hana::less(x, y);
            return hana::if_(static_cast<decltype(cond)&&>(cond),
                static_cast<X&&>(x),
                static_cast<Y&&>(y)
            );
        }
    };
}} // end namespace boost::hana

#endif // !BOOST_HANA_MIN_HPP

/* min.hpp
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
*/