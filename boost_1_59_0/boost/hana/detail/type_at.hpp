/*!
@file
Defines `boost::hana::detail::type_at`.

@copyright Louis Dionne 2013-2017
Distributed under the Boost Software License, Version 1.0.
(See accompanying file LICENSE.md or copy at http://boost.org/LICENSE_1_0.txt)
 */

#ifndef BOOST_HANA_DETAIL_TYPE_AT_HPP
#define BOOST_HANA_DETAIL_TYPE_AT_HPP

#include <boost/hana/config.hpp>

#include <cstddef>
#include <utility>


// If possible, use an intrinsic provided by Clang
#if defined(__has_builtin)
#   if __has_builtin(__type_pack_element)
#       define BOOST_HANA_USE_TYPE_PACK_ELEMENT_INTRINSIC
#   endif
#endif

namespace boost { namespace hana { namespace detail {
    namespace td {
        template <std::size_t I, typename T>
        struct elt { using type = T; };

        template <typename Indices, typename ...T>
        struct indexer;

        template <std::size_t ...I, typename ...T>
        struct indexer<std::index_sequence<I...>, T...>
            : elt<I, T>...
        { };

        template <std::size_t I, typename T>
        elt<I, T> get_elt(elt<I, T> const&);
    }

    //! @ingroup group-details
    //! Classic MPL-style metafunction returning the nth element of a type
    //! parameter pack.
    template <std::size_t n, typename ...T>
    struct type_at {
#if defined(BOOST_HANA_USE_TYPE_PACK_ELEMENT_INTRINSIC)
        using type = __type_pack_element<n, T...>;
#else
        using Indexer = td::indexer<std::make_index_sequence<sizeof...(T)>, T...>;
        using type = typename decltype(td::get_elt<n>(Indexer{}))::type;
#endif
    };
} }} // end namespace boost::hana

#endif // !BOOST_HANA_DETAIL_TYPE_AT_HPP

/* type_at.hpp
Av+kxvJtyqhL2zRDI9zVZTU25QGwULBpK0jLDthEvVpdjZxnXaZrv0K1arTfJt+u7t5MnvUt7BD/7Dz2tXxt9RB0l216oAbj4W3w1KiF7q0Fw1ONFdrkXPp0pPG0S9CH540ExRrttUHNFsFGmnWB5gg7QFEj37muILnRc2dYsjJ+wN3wmvnJy4LM04238FV1vwxy55+/bs6k3FGlbz12JWG/GBj1myiLpG5gOeDlma1kG13DVATTUiJTDxBMQdNHmUr4JhRHUV/SzqCZwC+ED2oewKQWPgFOH1EJ46eFoOUIaKBZyFJ/5Ca01J0pZVjFqDvjhlxRztedo9HjKDoBwOcS8KFi1m0d4lIugM4HqBPU5bJN/pr6hAz9U0UdlOI2Fxh/TjYOOsOY/agQ5WIAU4EqNEXlAHR8Rm8jU1hcIP9D7CC4EMae/A2w/WMufqzfQMA3+OoK5GuIJapMjviv/gyOWJyaS8jsVTTQq/Sn89J9xI43poTLbewgVwAI6wHSXscCBdDIcZEsPdRdBr02CXqN5MnkVlLgwiP64kakM0iWlWaPZe0lHDYDAcP8JuWMwVbs9IBAiRQ37UCz7ZezoTDQ+ji41fE+ZYSuNlHouwPkKMkxUtFSO8aHxpHpaxkClfyZtWgWtvM/Bs4YN6M+0KRjTA1mU8WKT8WSIKFQMPKfXHcG59puKkMjtUoPJXjFqD6yM8HGntbVC54XPKvOBRXYD1aHQd/JraI6XUqE+aR/hdrGhPEamHJ2IQG5Bz4ggxKu5wJAQEfdD/TsJHp2hhv55pF9RrXtBhh/n3eDGteknUWGKWWg31zlIMPWjEciJ7OL+gylA6EBohdXnQdHifuixxQ7Ax96XFVVlaF0s0OgQdqNF5wooEMdlby9nLy0rjJz9rmMaaQRNoD3Y1pHbKELpPYp9YKh5LBXUZwDL/7BveYVRIHu3c/rNFacxm82m2N7n3iAl72iJ+/xxXLlO3278YPYbXGjbrqfrqMPsFVzER1XU7q0XGi+rf9QXzsn26pIyUMt85STD/3lBSM5Tn0815b8A8/KP2NgaMxZzrf84oJhThaSSQbmkK1pyCRglGvDaN+jPWfULRawl1dVb0XBtj7ZO3iqfljExjc9Iibq2VpsElJVC040caGvlRFhxCS6BTAZFskKV/Hb05XzhnB6Oh8UejxRN8ZPqjA6gmnUXMdKLCisRqQvKBZBm1sBQ8mkzX0p2mAiAmghUKoOizQfgeNDCAG6O6Bu9XUc3LbFLYFcERfgf7nGmhJVuxdkiuOFTpIsOFaqynUK0WgLdwprvCjhI30pP4C8aiwFo2IFuJ+CEBgW3hbmPAYsB8ZHwjfVEctNv9oS5r/DVyUONZFjKDv10BbWLur57gl7magJbHz/XMfyq+G9eKWHtqVfsbkONFObfKuoj65lgTkkHvRppXYUEYevM0WE1ARUne2nYtFvsbVEqCkrEepQlL3Cs4AbQKIMUyCo1lHmo03iEdRmSE0AS8Cp/3nyef7m1WmqPTo4UIl6DNsKks8FIlmTjmhKu7ZsirYsrC2bo0WPadE2/2HZA2IORi9vjgItQKy0QYuiOOHn20HjZe3YLJphXr0I/vpVeqbPJvFktsJfOjd6vdoKNezUJCDHPk1q1ZWdagvFOrp+S207km4opntgg4JwkYUXefRaD3VSO8M4Id+pjPNJJ5VRmrRFk7Zq0jagsq5sSf6iMiWzr2WVTu84raLTV1ogj9Kl3jCfs+QstmF6mFV0soDDDjJyRtheOsc+UpM22jE+uAGw0qTNGADbpCsbKPAidfqkjuV2FMTSMSgFgg2kq3+qKza0pXQKxYYkzpT2EiCKSYA1SZA56rICm3wTzzmBvgT6mUeQHv2Iid3grYsRF3tLFoLtqNRKg6m5kYZNxLpIYwFu7YvwIOnkfxp/BiUh8EqvqCjabVLZsRKjR2ak+WSGiQGEuJuCoR1qtA26rzd2DQudrHZ9DwyUvdf3ofk0jJWG7VJbltTNoieh/brSLSLOJ5HuIMdw4tuAJqab9wzGApR2fVkNlZxRaw8dY6U19tKgNqOOWFwrlZHDP78mw9iwZu/RP2XkNmfpFf2zkXU9RQegWxkJjcn+5vo5ZvtmsrcEF63Cjhk8yQE1lzSKcvVt4PCyHPseqFbfgY414gVYzJipzXBoM5zzKVfoZ+Os0VCG4pESSd7G72fVFZXH++pm+ukuOo09R7Xmb9VL89Iuxgg2v8C3cABYYeHArGcPz2fASCFykfrPtnun1yzWpzmNRfHEsyAMD+zld41Lj73CwQZkyKWFOnwhp/t5kshgNLvXvErK3L36R6iLmBhHqJdY+Ry252y7PeEtra00yeFaay+tYw8VeiWPd0Ztlfc9bzOh8WyO+thJW9JOE5tOYCCw4ohfyk16zjD5ZTLIlpOgnjWlU3CNmCNrFPMQLNop+ttkBb/UEXt78SJoLPbp1Vdjn7psfM7YdAMpNuCPupY/VV50wn+h/ju+ha76RyvZWSDrt/3kRUXns5VUee5W9mCB98E8f/vybNYe8Cuu2HHWAljea+qVO9kPRcF/1r+fJ+Z6cB7CflpT+nFG6gd5ou8lV+zAovmLkcF4S66FDGogfTcyQVWq6/LFFFtVysQeoZO47nqOPJlyU1+VgL6qNfVVtamv8psGMUEu2uuleZn2uuK11FhCjXpschEWCSwYZNLfIOpLXo0mtR3HAHhCGIlJDuUuQL0oMR8NZZctFcZJa9H7rmBh5Depe/PKU1iNEu0rT6E0xkJpL0he035gLckz/KdjLDqxH5IBlKiMvx+7Fqh/g39P9Fr2puCPVX7FKTtL/Hvq/xsAUHSMPzomg8Tnivp8NFpit0MX32GOnFvRh6XBg+10bTWdktUgJQOiSP1R0U4+LhNaurF3Q2MfMBt7jwFu/SoBzQOGA8Ik53zdGlI6yiirle+hkbRwj8eGRssZ/l+j05xZMFjtwdAAS+h4ZVVKvC5/RH/ryrG4F7HLig6ASF7fXCZElvFCA+mrk4ysc/MhiciU5d8/1lLrOPQWmkOv4kqiujOzOgVsW6s2sPdTNZHxf6kQrn+tS8Iw6uFR6abmZ0gZbGSqibFHKqsAlW+bqMxHiWOi41qphU7K1+tP5V0hFnkSaGwnK5CNCguEAIG0oqv/RUoq2M1G8/tTCJFtltm3Xujbe8y+vT3DVC431tlEhxZYHfp736v4SLnKHDdD+Z89OEoyo5ODYH8DYN9twv5mCrbJfwO2wezygWAXh8kuzPOVKH8dwAZMsPcPRhmj+hbA48IppaG4cj9iXAnWJniNt752wTBx5oWeK3L8RKjCZ1Zxh8XurjTywYx6jgnbkmUB+sZGfMMPuQnqIJDok3hNkDcN8kkKBJ1HpHwSpMRerplAQHKuOkJhYUuyjLZqNNYVim+Lq/6BegqvXM+N7pQGxlTUohNVvle3UnDr1+jMk2cUezR+wr36k7RLph+lwJcwBF6u3tiRi0mWQ8aBN7nv23gN/M77xqIxo9zgkwaUa3zPYcxPHi2MymphocYxqbRUwKzfkGrDFGjDUrMN301JVwH5IP8pgZVHiqxfAUl5wGrVvkGU+IYJ5eZBlKi+EiUwyXPsyEG0UHcjIWxV7oafYHOpcPJhAFtpgp2VRo5IcJBnj7VIcBBJcDqXSHAtkmCcT0USKIMRlx9+9j9NyMX8pavOGAD+rAn+b5e1/We5V2j7HQ8/+54J4kb4+h3z6zcHtblGlB3y8LMdZmsFg0YMsDPWlkBB/vsN4GFa1LsFIN1pQrptEKSTtjTzf5xmfmMjvuDvu9IkLDoBRASrAxO9MNgcmOtFE2jAv1f+Hj520pMBtIicWmCuyWtzquIn6ioEU0RDlzHZxjEZTObkP4RblJ0K5s26DWUArNIImhloNVms9Z8UOwSTZDJiFwk2cYzuPF5CTvta7GSwkA4qbpzBchpq0GF07QB6VRfeNtbDb4caRCHwN/jyB8wYzRb+pgG2/2GwPPlrH1GIZgt/N7vPKDrg3+t+qVmT2gHkEN484owRyTbGNqAVR2D0ilaMBWXNBlqiV2bLeNyZeqwShW0UoT+iLezWFp7UFvZoC7l77R9Qdp6o22TSaIOgke54mRVbnlpNyjE1HTi800Otwl8z6cfnjEZ2csdXYoTUpG8JPZPvYVKrT+pGJ6tb4Id935+FSb1t4OgtD1/2FPR48l412mFTbuI/+12mi6XX21wUpnpstuVitRL8HoTfw9DV4WZnudfcCErUAFcG6KlkARipG7zLGAaawD304zcMvlGcFDbJAe0HHiAUtgOZAg7+vYvQK/v5/3kgHSK5LADylVppToZg/2iQYMc3/MwwSyZXXSqUrzWDDWagYRKQ0Gkqyrv/AeE88crCuWHYFfXT321D+CvbgG/4HSmQlBjFv4GOY9TJevwXZYVWf+Soj9fagI0OiRAveIGBGvk6Ch5rgRrjBQwM+ygCrgxVf0ZRIWEQUWa7Id/Ohhb1BSphaDxToz1TK6CwoZXIjBRUJhWAhbUd+PXiQasJCi8JAbPjglsP8dfdxK0NKspkCmR2WIHhg438+c+gHVLPYuCV6BCv1JkcwaR+n8RjVV40+uRwJAvK8f9zAYod5Pd+NniegoDwws8yotJM3SSiheMoS98TyTKWzoWRjO8f3U9hZbItN4wQZlbE2XRXNYgV9xQUK5j5QMk1JoPI1/KbrsUUmlA3/6ereym42yL1YKwieSMLOFTuCfOHroEXCc88GHNmFBaKZFOMt5vZqMgtUIR4v8cBJfvg9TwtR3azUDfU+CVmH+SO7TXgeZY8Ah/CAzs8gBHx8BQaEZH8prmI5lE/msMY25Y62Iw6VpFrr/DoSi6Fh4sSjWHoAK20LvKlLnXCTahdq+g0xu4jI7SDjaoudCJanWEmuYza3rAxu5pJ7fAB33ygD4bvBOYxlEKAR/O10E/lhtJBs7W06CTkQsy+k9tr8IOAyJ5CnFme9x3A68i9qVSJKU9SqoQD9coXfdRhw4VQ6UeeO8QLkoYZpNwvDdj55pcuGEKXwW02/0+6LRS3WS1ZE6fnevjPv3XGEIMCHtr4b2oB0FrUy5iBcXwM4PN1wGdvUcLiyLIytIoO+GYVykNRTzmTNwP2+ir8JqxL/WG+9yjQl+KIrKJfn5mVhcU8WtCxKHNSh1+bkUnxzu/TmRTVaDM2vYh9ch+2XXLhcLwLc7Sgc+IlmDRUuiCs7ZqJcvFDvbQ+DL9WqoC6g2wUeYyxHUuKCb1wuOvWcTjHl3/pi5ldnnGYFYNBDk1FjS28pirLberMeKQXwIeWlxWeoy5zorIicMZ2xEZEm7R4z0XDaGQH5eH89c8No+uXYylYFs+DIlo8n34L6LcQP6JokL4d3+LXpUGtdKYed8JtuLGl1EGZMSspWldiYzrWBtJ1qtOb5adCy3MY/WXlNfYjWrnMprq8Ux2szOkd5S2d4y0Pe+MuA7OrtJc8VGku/u6aC78iQBp7xkd37jXvYmPjeG2FSd+i5pNA1eem2+lYzSalM0rwyresUMmpAkWbHIJh8yArLVRnQVmCpgUezQRb/zwTqOwK0+80RGVZrrthK4whAOSOvwEXkeG6fuyihWpmWf7rkdCehCkStPiCVFPca/vgUXIEn28HrUcv/C31p0ynsks4lFYbVmIbdH0idiq6RmHfLrxWJvt2TcK/E/VY3t/pNqvDGrvQ7hTelQxD8gk2Yw4jNrUHHaDcS8PsJcTd/hK2g1Ed9j32frUR22LTQsfsOnVJtB0qROMm1KErRyiiVBq2x6n8EbVxLpUmUF19KR1jyuSR7CWC8RJiDqYl/WVxrEF3ZfupglgB5tfZhlp9nBVPk1QQmZXOYbtodLjtM6BqfGPXCfnpDhPzc1qUI54hXMOC6e7dugISUo8HkRxhTZ9Cg4S6rrGFnhIH33D9AAqsHIMeGduxmCjF73nwnMF0fKw5GbXXRwguz9HoL4tPInQRHYM6VXRtkcWma0YBGMGgjBplb/bHkcPca6fkgJN22N0wDP5aTc3kF4ztq/Tc5o5T+gKBxumCt79Mj4P/wKQ2cxwsMEeAjaIkCRrx1Bqw6NIx7QmMmih6qVv0Uq6460FFRq2hyfOMFlntiWByp8BKLqApS6JUSxx/SW6fmnYG2t/10QDihR+pjdhwTMnX9MkIqhnJh1dBMUKAK1JNkzJmQo4MfFXTVlDT5lDTVqSb5o6fRjrp+KKoz/fUAne8A13jp5a44x8IEzg8Ew2T/dS6cKpX/ISOO45Gzo3biw1skEUF/343qR2Bo9Xvc018Jw6ku6IgA9+5mfjuqjUlqEA5XksSNGVwjDTixcRA+FHyKoG/mOQLilcso4CfMHavqSPKadvxziD6WNzS8MuL6Zt41cV0RyAn21SCfyXiP5VB/PILX0H8XUusxhRTY5YMaow7fnWW1QUCa/WcIV9NH265KMSST8crd/yPyOF1SwTUfvMl0/FKIwDuht3Un0QCoEY19t1/UN8Fqb34a3fHX091j8lr6d67tL/qz6f7q/b8V/RXdGO6fdLGwT0VHtRTxZk9lX6lkk6w1z+XHDmY6Jd01MrMjvrP1IgpOqD2290/aRYiS6Nv/K1u/c6sTCnw5rl0UxrP0USsaIxjNTViXcYgWZfZQ+9fOkiarUHSlDlIkNCMJlNEnQ/5m906jgQ9mOU/5F5zB9ZvTrbcjPWTDtNnrnSwYQBNlku07TTe97vXDMnA9Vx/qixqOkwc2bVT9L5O4xBw3Y4PTCG8PI/kc7G6C1/ao7czapS6ZIGtpYRSebuWXrDkVIk2SFwdQuYnGTjoub5+kDx9oj/9Zn7/VwmdrRnydGuGPL1FyFNfYIl8rVC21ZiRpj6+BEOkWmCBdpl+sNB71sjsf8y9IgsAHJyhJw3jiuL1hQfOGF1nRohcBNMOKQ1mFHgKC+wYiobdymV1xnLULmRErU9ou4pJzRA9XppA13OINkhZ3zKPMkEn2oaN7aikdIY2Ob84jjrAJeiuxSeQfOyFCrclx3g0GrraLgeBs9HvAD6JDpDFtBndx11HqEwbPW/HSfBBuq4hxdhgCKxp70t3R1vf4O4YZOaZdi94u9tRD4OhJOi/BDWaL7ZAcafVvC+2RM7RSGJgIdFwYRcV+Ag9eXQLNZBKE6r4AT7x0WeKy7dLSKVGW8qsYtsLiInksb5ouzLEF+2QxzOpQ1hiSSAZ/sXkAPDdXiokWEhrJUeYRcIcY6Y5poVO2kmKWBaY1Gnfr0lcmBl6XR7OrQurprGxpWTmX+yAB1piiENWhj4TbFoEd8EU52nxIzQYRB+2XbyUF+svXmqBfDJI3Dx4Jt0rd5+xhvCVTVZtu6BuWCXTzKZMVMlytSk34dw8Gmi4PFbCtjAiqpXR8DAG1GIzQTtIaT2SJfrpa/+bzZt8C3MSCAlBB/DxDL+O/BorF6MUhFHDauQmGnV2GhnqskLTApOH2ZfNEZcwBAZIBiGf81dXg4QpnWnZuqR0QXNSSUbMpzvu95MD435+AsKfMceuT0v18CUG9x4wpoX9DEY2rrOiXrEfQgO7Ls+ysZfO1Gpnir6/xOy0rG99WjZ4V6DJEWrQfySWzfaANPCRXoLSevFXCJ6baVWLQe0QTRTN
*/