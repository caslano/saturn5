/*!
@file
Defines `boost::hana::detail::any_of`.

@copyright Louis Dionne 2013-2017
Distributed under the Boost Software License, Version 1.0.
(See accompanying file LICENSE.md or copy at http://boost.org/LICENSE_1_0.txt)
 */

#ifndef BOOST_HANA_DETAIL_ANY_OF_HPP
#define BOOST_HANA_DETAIL_ANY_OF_HPP

#include <boost/hana/config.hpp>

#include <type_traits>
#include <utility>


namespace boost { namespace hana { namespace detail {
    std::false_type expand(...);

    template <template <typename ...> class Predicate, typename ...T>
    decltype(expand(
        typename std::enable_if<!Predicate<T>::value, void*>::type{}...
    )) any_of_impl(int);

    template <template <typename ...> class Predicate, typename ...T>
    std::true_type any_of_impl(...);

    //! @ingroup group-details
    //! Returns whether the `Predicate` is satisfied by any of the `T...`.
    //!
    //! This metafunction will short-circuit the evaluation at the first
    //! type satisfying the predicate, if such a type exists.
    //!
    //!
    //! @note
    //! The implementation technique used here was originally shown to
    //! me by Eric Fiselier. All credits where due.
    template <template <typename ...> class Predicate, typename ...T>
    struct any_of
        : decltype(any_of_impl<Predicate, T...>(int{}))
    { };
} }} // end namespace boost::hana

#endif // !BOOST_HANA_DETAIL_ANY_OF_HPP

/* any_of.hpp
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
*/