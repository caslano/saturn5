/*!
@file
Forward declares `boost::hana::detail::nested_by`.

@copyright Louis Dionne 2013-2017
Distributed under the Boost Software License, Version 1.0.
(See accompanying file LICENSE.md or copy at http://boost.org/LICENSE_1_0.txt)
 */

#ifndef BOOST_HANA_DETAIL_NESTED_BY_FWD_HPP
#define BOOST_HANA_DETAIL_NESTED_BY_FWD_HPP

#include <boost/hana/config.hpp>


namespace boost { namespace hana { namespace detail {
    template <typename Algorithm>
    struct nested_by_t {
        template <typename Predicate, typename Object>
        constexpr decltype(auto)
        operator()(Predicate&& predicate, Object&& object) const;

        template <typename Predicate>
        constexpr decltype(auto) operator()(Predicate&& predicate) const;
    };

    //! @ingroup group-details
    //! Provides a `.by` static constexpr function object.
    //!
    //! When creating a binary function object of type `Algorithm` whose
    //! signature is `Object x Predicate -> Return`, `nested_by<Algorithm>`
    //! can be used as a base class to `Algorithm`. Doing so will provide a
    //! static constexpr member called `by`, which has the two following
    //! signatures:
    //! @code
    //!     Predicate x Object -> Return
    //!     Predicate -> (Object -> Return)
    //! @endcode
    //!
    //! In other words, `nested_by` is a `curry`ed and `flip`ped version of
    //! `Algorithm`. Note that the function object `Algorithm` must be
    //! default-constructible, since the algorithm will be called as
    //! `Algorithm{}(arguments...)`.
    //!
    //! @note
    //! This function object is especially useful because it takes care of
    //! avoiding ODR violations caused by the nested static constexpr member.
    template <typename Algorithm>
    struct nested_by { static constexpr nested_by_t<Algorithm> by{}; };

    template <typename Algorithm>
    constexpr nested_by_t<Algorithm> nested_by<Algorithm>::by;
} }} // end namespace boost::hana

#endif // !BOOST_HANA_DETAIL_NESTED_BY_FWD_HPP

/* nested_by_fwd.hpp
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
*/