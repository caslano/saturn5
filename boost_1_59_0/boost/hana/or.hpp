/*!
@file
Defines `boost::hana::or_`.

@copyright Louis Dionne 2013-2017
Distributed under the Boost Software License, Version 1.0.
(See accompanying file LICENSE.md or copy at http://boost.org/LICENSE_1_0.txt)
 */

#ifndef BOOST_HANA_OR_HPP
#define BOOST_HANA_OR_HPP

#include <boost/hana/fwd/or.hpp>

#include <boost/hana/concept/logical.hpp>
#include <boost/hana/config.hpp>
#include <boost/hana/core/dispatch.hpp>
#include <boost/hana/detail/variadic/foldl1.hpp>
#include <boost/hana/if.hpp>


namespace boost { namespace hana {
    //! @cond
    template <typename X, typename Y>
    constexpr decltype(auto) or_t::operator()(X&& x, Y&& y) const {
        using Bool = typename hana::tag_of<X>::type;
        using Or = BOOST_HANA_DISPATCH_IF(or_impl<Bool>,
            hana::Logical<Bool>::value
        );

    #ifndef BOOST_HANA_CONFIG_DISABLE_CONCEPT_CHECKS
        static_assert(hana::Logical<Bool>::value,
        "hana::or_(x, y) requires 'x' to be a Logical");
    #endif

        return Or::apply(static_cast<X&&>(x), static_cast<Y&&>(y));
    }

    template <typename X, typename ...Y>
    constexpr decltype(auto) or_t::operator()(X&& x, Y&& ...y) const {
        return detail::variadic::foldl1(
            *this,
            static_cast<X&&>(x),
            static_cast<Y&&>(y)...
        );
    }
    //! @endcond

    template <typename L, bool condition>
    struct or_impl<L, when<condition>> : hana::default_ {
        template <typename X, typename Y>
        static constexpr decltype(auto) apply(X&& x, Y&& y) {
            //! @todo How to forward `x` here? Since the arguments to `if_`
            //! can be evaluated in any order, we have to be careful not to
            //! use `x` in a moved-from state.
            return hana::if_(x, x, static_cast<Y&&>(y));
        }
    };
}} // end namespace boost::hana

#endif // !BOOST_HANA_OR_HPP

/* or.hpp
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
*/