/*!
@file
Defines `boost::hana::and_`.

@copyright Louis Dionne 2013-2017
Distributed under the Boost Software License, Version 1.0.
(See accompanying file LICENSE.md or copy at http://boost.org/LICENSE_1_0.txt)
 */

#ifndef BOOST_HANA_AND_HPP
#define BOOST_HANA_AND_HPP

#include <boost/hana/fwd/and.hpp>

#include <boost/hana/concept/logical.hpp>
#include <boost/hana/config.hpp>
#include <boost/hana/core/dispatch.hpp>
#include <boost/hana/detail/variadic/foldl1.hpp>
#include <boost/hana/if.hpp>


namespace boost { namespace hana {
    //! @cond
    template <typename X, typename Y>
    constexpr decltype(auto) and_t::operator()(X&& x, Y&& y) const {
        using Bool = typename hana::tag_of<X>::type;
        using And = BOOST_HANA_DISPATCH_IF(and_impl<Bool>,
            hana::Logical<Bool>::value
        );

    #ifndef BOOST_HANA_CONFIG_DISABLE_CONCEPT_CHECKS
        static_assert(hana::Logical<Bool>::value,
        "hana::and_(x, y) requires 'x' to be a Logical");
    #endif

        return And::apply(static_cast<X&&>(x), static_cast<Y&&>(y));
    }

    template <typename X, typename ...Y>
    constexpr decltype(auto) and_t::operator()(X&& x, Y&& ...y) const {
        return detail::variadic::foldl1(
            *this,
            static_cast<X&&>(x),
            static_cast<Y&&>(y)...
        );
    }
    //! @endcond

    template <typename L, bool condition>
    struct and_impl<L, when<condition>> : default_ {
        template <typename X, typename Y>
        static constexpr decltype(auto) apply(X&& x, Y&& y) {
            return hana::if_(x, static_cast<Y&&>(y), x);
        }
    };
}} // end namespace boost::hana

#endif // !BOOST_HANA_AND_HPP

/* and.hpp
M3LBEyTqDLenOWAMLHUQGdGf+yhkV4FTCZzCudu3+ZUCTOU+Gl/w+9apDBmdWHgQ0sJ8qlgANSKHqytWo9xti13TtmadN7h83FpR17Yqva+CtWQjZZu0MeFzo/RoP8HMkNeTgtakvObEwxyUIkr8B0tX5KMlKTKf65Pd8XsFrfNtBGkhn0F5ACrl84oycuUflm5QY0wreiFXANX+5YLH2wuyKI45IuXuP66hX+DRNvsf6+fnrIjfKK+dXJ+WZ1p20HBeqUaLwRzn94qZPCe4VT08AyznSsHiHZZcdsuKrFZMjIoMcvKaGFIPc14XiFngF13MFDhEJf7g7KG3SV0zZrLUdDZSB/DCREpnYKHNUcu2DUQXnp6StjQS2avVvzfFz5mC+9u4hvkC/uhgRAMYM2Ll8dN5vwUUfVqya1XkigBK2i2+Bmmgru5UZ5CI4N46qwrjLWcJN9mhA0R5wFobTDqkckzwJxPts2V9xzXJ7rNTUwB0zAy9B+ycSJh3LoJkCnsbiMRyd4jj2q/Bhw7SXMknd6pSrExUwFijXcZ7vi38GQwp6bqJrYpEf2WkzosGErtVGTTLm6rpaNlWqpEWBmioeeJ75xJvL4hiPgOXaLmSLmaNn1CmdubwiDW6c5LUX1XHitZGlnqnY5IWwEXJejEdkjb8SVB+Z+rNra3BqXjxpHjsPPhLGUQdkzPjgKsMFFqYSvJst2i6FbTu+DCRUfO43fIhvGsWZq2ex6AQnJ2y2IKh+HRGql+QwivhGTCYpgUQp4QvnaWcs4Vz4Y5kOQj4OtXHMdtsPoQ4BRatXzYsRAFtbDmFGqrsCYYdIlB6k8a8sSCPq7yhnOK8XQ5zpNeldtLb3AyZm6uqnPR0EX65QmVDG15o86g+k42kJM5uHV+iuNJFIzkzE0rswchro0mp1T3f2ju49Ejc3ccKDj9nRypH3/yK8B1mZ6ypE19rrMARbMN7/Zln44S62umio5kZ2HJ6QeZD8XFhkH442tts7LlrtJOga+mpMdzWHJ6/QLE+hsOCfS5sKkhpJzslCDbVvzNm0kI2/0uzIrKtZ+yqLZBZTuJl3BS5PfOsOubESmxTPQTBqU32CMGpc+xvAY/+GVTtabAxGFIW/lhmS0vKyC6quR2IIfUbIoCZGGlSqsSvMsC3UbXFnsnWQcNGzShjutuxUDLEVAtwt7TbSYMIzOXEuWPX+1d4msdG/Gg8aAr+25AVxAhMr/3gbfIH6XlkIog6r4VONbiyRB+Zh7UUpfvGAn+f7v0kep/m12Ues/PVxBuOLjTJZoCDFpXQ8kNEU4VTQuIVzvBm8URTIPgO2C0jE6J0IF7WuMD8FcDKriln76R0ySykRYFjR4IXMDWcf9K7ZBZJMmJufNopMhdoncNVIS8ywpBCD2661MUd1kyWvQ4SigbwOIKEWXJ9EgqQoQAsAiIuQqE4ALsycoYjc40D4BesNLEK6TylXCAYYd2lrTlLBpTcHn9f+GApAxAF7YFSd/6PiVCPJ9E8AGrIr8B+GUjZ/2gn4cvV2VPm/rLXg4t1Pk2mecpGcZLnLg3Yrx3tXyCznTXwqszVok2Uos1juQd1PeacEV+Tue6VnDdJwI/uuOWtgsTuQrGDPqZmRl7yogHEjrhE8vqtA3DhVl1eDkFx8N0IhpLAC91Ve2fC0G49hikIZJU7+8J2h1PXU1VyI87CwFdYTlkHRQWJTQ9cz7vQ1CImGKFzF5LxdHHXRR/xsmhFG2DhaQH/C/zMc/OJGjYW6wBLAfTB+ZMW1FmaxJ5vagfsupiY9SGbzMsMHnuZqp5IE9fPFuWZg3VGfrm6RuHL14k7HmmcrhOI1RcKIqnMk4wBfE76R3+NOXVILBJ6wBb9N4Vi02/rO+JrFndI4ib+InqObX1TrVL4hJXTt7mRu5YRRVpm+9lh+5khh6F55MeLKr8C06yzL+Cz/g3vf5HZgu0WyWvO0fPV+BkrefEqvT4phuXsq1obq0Z2/jtMgVVrOG61BdPNCzt85rhjcgZ6xZTAj0Q5E3EJDSq1GYlbseiU9ZbxpTNDHjkQADLldlPKFcWpi8rnRml8561jv7jhNyVf8Rkh/Ep+q0mm3y3kHt9xfknls2gdh+gw6qf9Ijnc01x+N7WNznRoOXl+fa11zqKAWrClgFMnBFO5uCaX5+WieeDPDBRh0nmi6nYXUQWgjpgIQyElLpvjDq+egrPM/AgD8PlqNwJPbihKx8mI0V6+b7qVx8ktbeMWz3rx2an1AugA5TNL/H7ZcQdWfE4DDKI7Emj94w4keL/tv4z4vyx8P5AcvhgRh0Dd5/cBwFeSMPYrt28A6Py5OHvYg7DxSju5STha/HJMqvQR2dROj/CfZXhEQatFgiyF4f/qJnreazoWELBTelfZy5xFHdKbQZaBpFmoTfOgysUWgPzFTlRO2F9Dc2ZPbaOiE6xvHafVz3GRD+zWe1Iye1KH7C6VvP67nJBqSXmwbP9ynwvHtpyE5Dq1Hd4bpttcUBLVpdMoZJ3TGXv/ciTsEKHMU80Md4UEEqeGwmHOBVjQ0FOakF3blwzHXcrzZicc4vneLIY+wXBsV0FNAwwk89ChOiaVHkqEkhmM5BSbFNJyJX+yljS/9iY8CqKXO+ifN67o/UzNG87cj3vx9BcQCICgwUJ4jFVrihl2WLoVb/RfA4rDp1VB6hoj3+L9729Z5bslbAkDNQPXMPPX1aa65o505R+J7Tu68efwGcfthWkYYGqrLOem1uDrDiR+YwbaOUd1Ty7GyIGkwafZDdXgG9MBKel/wHWHAUR6ZsvmGHXNZQtMqJeFyNfYQsYFls0+g+XIy7u8kO87lNqr1Lggpk808FXCWdeojLRjiO5ATRIrvhjF56QMdmu4ahSeuOFrr+YaL8w//ukLJrZ+JgVeROwdL746gj3R+U1q5EfX8mOrKWjrsV4+XoaPAwHyjPZBbvdZPu71x/ZarkVlq7/aT0DxOEXfGj7C4VR7Y+7+sHlizb5N1BOlDVxM8byKCxStepxSWzsmVdgn47J4m2lXAluXewlWeHupjXLnuW441enc8WasOzFit777imiOi5Yx4Vy3uSpSCYKsaLK25/H0wSb9uhKRH2Ysig/Pk9y3rHHNS1b2MjfRs3wqz82RLyzwfNflUDMDLsOsCMM7Acyymvafxufh4TB4DNab7POfpjyFgTh9/hqMsNe7OF6sU5VpZlFkIYeFWKXgvd5XyS17KlCZRHPkf+EPdez1YAoSHJPlz0SnG1BQ0bp4hY9p+lreSND6YIh71vEjyJw+vP+XLgv48WAnDXL2+d0+NHsAAG5qKDM0LxeqgX9vzzTEdT3ftxr0ciaahES4As+XDFPPx/iAgC+GBncYGfbG4BvZe9HutJdTQvw8C086qPgZtmyjOLT1W77qeUKvU1vSAvGhTxeMSXC9Mu37pmxyfaL0loW7kHtQOil/HzRTprfnVj5/prFpcdHBtdJjsS8FQTEvWrvTQMLKsy0pi+72EdffQi67irTgrEjQTRlHisI7qwlG5blyJUvReYGPWXlWIUHlKdGr1IPYyQzwqDTohUeqKs8cZy4GqrjMXDU15v2Ns+CuipVBny0shXexnXuY4MBz4z8fzZVbtKFFp24twos+eVUjVr+f0sjorR6drAfMEtjwUp31pDPr2dZBHfYLo+Bb0QlzXSL95gP4q/gmH65iXLJyJDNzMnv6kAeqU6824kf1Nqj10xj5u/TodinB240426lpCvfsRvKCrsf6GJjTZYBOHw6TlfB+RaLk9bwwbfcOi754kxH8DnA/56xCV20UEdVwuvftUDvsmKSW+CzV8b4HTY82Nlf7Thuusb2wqyyB/cLWs3E9jNNKi18WnsNK/CxdIDDZn/xG8Xj9qOFwTfbhDtBTltI27AoD0nFRvR9oenr2H7OFuJadZPAY7zcOzF+XJdIeiL+GPQiM0AkssA+kF/OywgbOvBRYzJvFJOJ3ffSZIHR3JDlH5Ges4qIdLd8bm1KekKCHm4xfFznwMiQEBuASyRyIe7MUS3+/GEq68gjPjl8V82+XfFR2Q7H638vuJBXBfJn8BfmjBawp7bknodR0KAzL6wtxQo5LKWHD4gOgO5+xpd8zs9vYl4nW5Qzm0B08BLe5AV/ar7T19rbuWNrvgNDVQR5R+n0GYB0lgly5He6Ha1TjigQcdAx7HXFtCdYH1hGalBKN4vPDSZm4cmDTFO97lV2aB6cpypkvjRpNb7nJGjVLAG/pPBzLOMwgV58JiYlnKsqzILYSx1lk7mYAc/v58DBD81t9/E0keIDZ/UHpgGw07pDWQy02EXOc3LKfT+j9qsLnKnYJhPoohcmE+mU4xEzh+pKuvCu0I7YPR6cJ6KKr2yIa+zLMEIX8qbM0w3dmhkWerJFv+J/KfLwfNg82Ewq/THP7jdRsnKlql/gSCnM6GUsNw6eVhM6IMyhnQQca73QQ5t5e84KU7hUJX2R5YkbToSwI8kZNO54TnNqAbE54K1L9r5nxuEq7+tp9+XCnZsfmdeETtU1zc38IPJUD+/zgXFEebxnUxBahFroRImW37GclzN8MmRckPjeWuG/2nSHgDRlrh3efBZuex5nntM+F84UbbxnPFWoZP37Z4ppE6OPywprMkfxrqFGwde2jhh+goJr74pMvsGdOhs77pzHWHJqu8SbAU2WpLPfQC20aXD0meHk43u5cca9mgJRgdDLQjWgNT9awqZv4CHAraP2H4SsXW7SJ9CU3SoEW9snb6DN0NRGEsANk5eMnpCcmd0eqcJUnWsF8Yk33PPYD17OCjKIOkrVDj97u85IPxWtzArmKIvh3eRKNtmdlle4Kp4OSisvz4DPbSZGRUL6ip0+mCuznEj8WtolpW9TqWbkAU+arsMhyHainSoVHH/t2EJFxW43C7/12psc50mp+nfEUpPygKjmLBL9rvNq5wmM/8sHfyVqZeuDbXyPweakVYkGe/RopEmou5PYrv+CWjfUKRij4dOHhLM6YGgtyxMsLJvXkWIaYHyo5TV0EdD1EANjyKDXaXiqei59gwzOfsvDZYBrYkLlnrfleHQx8mpfM0ghoaIIqtag6kYX3lZGCTxtC45h6Jfff9yeQFU+kGwIGmZigywMqf8BsuUWBG92Bu9nJsCQm2YRd4KJxMwfv1SytGU9yhikyqwrRG+fLtiNyfC5h+gfE/Noge1xqAH/3FaF5lGa3Y9m7q2a7sawA1ZkJPC4ks9Fy7/Px4T6ylo16upZdTjClw5Jj+C9gQVP99uACUf1MmU8tR/pO/gIVECN5Ma5iQt8lfze+toqDFbnTAM4v6UnwvMoR4dMjHgPMP/NMpR3KbrI5Pb9Bk3+xJBz5268EpvQTyhNmMoe1yHY/I7tHwRNRpaQadAJ0xi0lGmC8E/NxboVbCQKMC5NjhRRXtldFASOjlqTXhkCHcuMAGQ6+eGMdPQ7z9W30cTT0fdflclbNIj0rN3QEwl026cRCnphli2M02f7G6ojEWesQKzH4uTfqKItMcW2Egq+zfEEc99sfMW5OzQ5AU/TrRiGaKyDNU7aQcFhvVlmUl8EIVPK3ZqzyYYyJwLUvluwxSSptWRLjHuxyL6kitudQIV7gtEQWFSodNadfdkmQ7aH99P/5s1ZntVUvxqn37HBg1LrzYwarMzEhu5f4GCsxjXVZEkuBeREjr2GFxAoTycmFZt6xNTD8cKKjSz9PmxFTA33laRpnPzWEffhhHSctd2or03QdoacTCUnzNgQcbFzqScmxaZVpT/22RKi7WwDL3R7rYiPY6TY5EOxcyLAfImTHktxUZpvQZPW7E51KXFigflssWBq1nVqOki8U25AyndJjJEduJws+wuNI+pyaNt5gsH34ld+wlHMTWANlads75tb8bDG1/m7GYvysjwYrH5vizsTxmnOp4C9XlWIcPThCjBuGDqCpL3hcyn0bZQj/i7asC0RNS7SBlQkkjjEipD6YGXMna8fKVOd4fL1gw2ydEKxmgFI16UuhpSnfjECIDPcvhHTdr841C9y0993nRS59KvPnlvSr7gncQgfwyRvYiTpBytq38xT322dZyMqLuGdEIXvSyqs97Peg8vqXUtO8LLQlaPBLh6uHks2UGzilVqQwoGZHlHd43bCmYzNpZzuMQG25W3hRneZGZMrjqGCqXYK2TVYxXcGLPfZTAi9acJFwomzmzcmTCS1SyuVkn4Pizk3ri9vlw4+6E1sqXpUluajbcByDONberJL384D/exfGn57ycqbQB20zPBtkKRFcOQrrS7+pdUDswdkf0yM62yJR7cHRDrDuWTPOxsSPHQZSxuIh5UJDRTrjRtV6p2Dl89HLRqLqbpH+GqziNjPPbHAf+SU4Hbp14e33lKUXdAUwPtMAtNdtbMNODofmLgzlPEL1z9SeYs2H7vlEmuZiGhQyxmdU8uOj/xTsy1zWcDR6Ki/mUIaGesKWM50qatstWliUV8GFbiUH/PawzDA/eB5K2i/EuHU71OrtP/kbYraPWyzbHr/sEVhEsj1JTefsgyxtf0nibwUX1BwXyDEMOR6ZrA1WDXkRG4chcCSNKykqz3mRSXuPF7kVi7SfoFcXfm4gkHuPIe8W4gNE8ghy62frx+z02D6xzvLGsowcXbmcGCUzO2M3cvcPVevLI7Z6WkdBIdnHM/CgJRarHIIZJQs9hkrgV8li6D1LR/I9/VB64kMN8kusO4EtLN4lKx9UdR5fOHmvz1KRJ2p3XSL4mwEHgd4V2wyb3Mw7BVCeCdPjvuDGIPt15u7gSVceDho65tO0LLH9JwxuhN7CXAeF/iNNmZLO3ZpDDP5DlxU/8QYcrOSkINiReiYm9U6QXIAaNDoGVIaHSBar5BxKFOlwwxwTz/eaBM0DqWLJ902MmfZp3IH27Ufm3F9LvLzEds8zlnSkGqy4+iXfdTllBSWq4e+XVlQI9WGownnESFdQvJbhbXeaqpJFJ6kD2F7z5MZofUvQyBYhyewBN5S0Bxt2J9f4aTfSRrn+i1VesnjxsUNTNTZ+qQwTFTWX8JPvzs+z6M8YzlIuBFKwXt/ZNUAzRlM+3i36ejGQ/hi5hUJ7KdAx1a3RlCjb7rC43513yBnWYFjDp17cj3/fV+KeQturj47y/A+3YRHgvYU9/7p/+ftAUqsOjlNzC7fsHxJCDQ0MPlXfsnr67MOK9C36CLvZyBIeKRxDDqpo9oAn5hvf/DdqZO/MJ3UZCDY8iZPTF6roezCFB+rml5emcOdkaucxCnHjQ382S/xL2OxlVUABYxak1179mTz8ljpB5RmeLWPExYj07LK3lsTKNnM+Vg2DYaSwMPGP7Qo1zuWnBxJowM3XRsXyykfjoJZeV/oNbalCjywxTnhgc8LnYICA800pr1wNUn504qqR/D+gixi1TNuNJF9+UubJ4OhmxEC8KV1Pxhvrg4pRC6dgCPRjBjx/veKhddU7E5dVy/Hw475GNAg4ySLZMhb0jAf7MCcFRehqtCCdYPQpKRWsdNXSbVigNmNcoeo1u2vzbTp7XBFJJ2njl46BpVVg3MDY/d0Wa2+Gbd2I3FactBX99KaTzBGwv+u4Epnxd7EyXrlBlFdjOdhhIUHKYPx4Ir8RFKSFoNmD
*/