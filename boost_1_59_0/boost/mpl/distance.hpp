
#ifndef BOOST_MPL_DISTANCE_HPP_INCLUDED
#define BOOST_MPL_DISTANCE_HPP_INCLUDED

// Copyright Aleksey Gurtovoy 2000-2004
//
// Distributed under the Boost Software License, Version 1.0. 
// (See accompanying file LICENSE_1_0.txt or copy at 
// http://www.boost.org/LICENSE_1_0.txt)
//
// See http://www.boost.org/libs/mpl for documentation.

// $Id$
// $Date$
// $Revision$

#include <boost/mpl/distance_fwd.hpp>
#include <boost/mpl/iter_fold.hpp>
#include <boost/mpl/iterator_range.hpp>
#include <boost/mpl/long.hpp>
#include <boost/mpl/next.hpp>
#include <boost/mpl/tag.hpp>
#include <boost/mpl/apply_wrap.hpp>
#include <boost/mpl/aux_/msvc_eti_base.hpp>
#include <boost/mpl/aux_/value_wknd.hpp>
#include <boost/mpl/aux_/na_spec.hpp>
#include <boost/mpl/aux_/config/forwarding.hpp>
#include <boost/mpl/aux_/config/static_constant.hpp>


namespace boost { namespace mpl {

// default implementation for forward/bidirectional iterators
template< typename Tag > struct distance_impl
{
    template< typename First, typename Last > struct apply
#if !defined(BOOST_MPL_CFG_NO_NESTED_FORWARDING)
        : aux::msvc_eti_base< typename iter_fold<
              iterator_range<First,Last>
            , mpl::long_<0>
            , next<>
            >::type >
    {
#else
    {
        typedef typename iter_fold<
              iterator_range<First,Last>
            , mpl::long_<0>
            , next<>
            >::type type;
        
        BOOST_STATIC_CONSTANT(long, value =
              (iter_fold<
                  iterator_range<First,Last>
                , mpl::long_<0>
                , next<>
                >::type::value)
            );
#endif
    };
};

template<
      typename BOOST_MPL_AUX_NA_PARAM(First)
    , typename BOOST_MPL_AUX_NA_PARAM(Last)
    >
struct distance
    : distance_impl< typename tag<First>::type >
        ::template apply<First, Last>
{
    BOOST_MPL_AUX_LAMBDA_SUPPORT(2, distance, (First, Last))
};

BOOST_MPL_AUX_NA_SPEC(2, distance)

}}

#endif // BOOST_MPL_DISTANCE_HPP_INCLUDED

/* distance.hpp
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
*/