
#ifndef BOOST_MPL_MAP_AUX_MAP0_HPP_INCLUDED
#define BOOST_MPL_MAP_AUX_MAP0_HPP_INCLUDED

// Copyright Aleksey Gurtovoy 2003-2004
// Copyright David Abrahams 2003-2004
//
// Distributed under the Boost Software License, Version 1.0. 
// (See accompanying file LICENSE_1_0.txt or copy at 
// http://www.boost.org/LICENSE_1_0.txt)
//
// See http://www.boost.org/libs/mpl for documentation.

// $Id$
// $Date$
// $Revision$

#include <boost/mpl/long.hpp>
#include <boost/mpl/void.hpp>
#include <boost/mpl/map/aux_/tag.hpp>
#include <boost/mpl/aux_/na.hpp>
#include <boost/mpl/aux_/yes_no.hpp>
#include <boost/mpl/aux_/overload_names.hpp>
#include <boost/mpl/aux_/config/operators.hpp>

#include <boost/preprocessor/cat.hpp>

namespace boost { namespace mpl {

#if defined(BOOST_MPL_CFG_USE_OPERATORS_OVERLOADING)

#   define BOOST_MPL_AUX_MAP0_OVERLOAD(R, f, X, T) \
    friend R BOOST_PP_CAT(BOOST_MPL_AUX_OVERLOAD_,f)(X const&, T) \
/**/

#   define BOOST_MPL_AUX_MAP_OVERLOAD(R, f, X, T) \
    BOOST_MPL_AUX_MAP0_OVERLOAD(R, f, X, T) \
/**/

#else

#   define BOOST_MPL_AUX_MAP0_OVERLOAD(R, f, X, T) \
    static R BOOST_PP_CAT(BOOST_MPL_AUX_OVERLOAD_,f)(X const&, T) \
/**/

#   define BOOST_MPL_AUX_MAP_OVERLOAD(R, f, X, T) \
    BOOST_MPL_AUX_MAP0_OVERLOAD(R, f, X, T); \
    using Base::BOOST_PP_CAT(BOOST_MPL_AUX_OVERLOAD_,f) \
/**/

#endif


template< typename Dummy = na > struct map0
{
    typedef map0            type;
    typedef aux::map_tag    tag;
    typedef void_           key_;
    typedef long_<1>        order;
    typedef long_<0>        size;

#if defined(BOOST_MPL_CFG_TYPEOF_BASED_SEQUENCES)
    BOOST_MPL_AUX_MAP0_OVERLOAD( aux::type_wrapper<void_>, VALUE_BY_KEY, map0<>, void const volatile* );
    BOOST_MPL_AUX_MAP0_OVERLOAD( aux::type_wrapper<void_>, ITEM_BY_ORDER, map0<>, long_<1>* );
    BOOST_MPL_AUX_MAP0_OVERLOAD( aux::no_tag, ORDER_BY_KEY, map0<>, void const volatile* );
#else
    BOOST_MPL_AUX_MAP0_OVERLOAD( aux::no_tag, ORDER_BY_KEY, map0<>, void const volatile* );
    BOOST_MPL_AUX_MAP0_OVERLOAD( aux::no_tag, IS_MASKED, map0<>, void const volatile* );
#endif
};

}}

#endif // BOOST_MPL_MAP_AUX_MAP0_HPP_INCLUDED

/* map0.hpp
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
*/