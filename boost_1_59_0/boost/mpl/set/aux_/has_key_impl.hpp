
#ifndef BOOST_MPL_SET_AUX_HAS_KEY_IMPL_HPP_INCLUDED
#define BOOST_MPL_SET_AUX_HAS_KEY_IMPL_HPP_INCLUDED

// Copyright Aleksey Gurtovoy 2003-2004
// Copyright David Abrahams 2003-2004
//
// Distributed under the Boost Software License, Version 1.0. 
// (See accompanying file LICENSE_1_0.txt or copy at 
// http://www.boost.org/LICENSE_1_0.txt)
//
// See http://www.boost.org/libs/mpl for documentation.

// $Id$
// $Date$
// $Revision$

#include <boost/mpl/set/aux_/tag.hpp>
#include <boost/mpl/has_key_fwd.hpp>
#include <boost/mpl/bool.hpp>
#include <boost/mpl/aux_/overload_names.hpp>
#include <boost/mpl/aux_/static_cast.hpp>
#include <boost/mpl/aux_/yes_no.hpp>
#include <boost/mpl/aux_/type_wrapper.hpp>
#include <boost/mpl/aux_/config/workaround.hpp>
#include <boost/mpl/aux_/config/static_constant.hpp>

namespace boost { namespace mpl {

template<>
struct has_key_impl< aux::set_tag >
{
    template< typename Set, typename T > struct apply
#if BOOST_WORKAROUND(BOOST_MSVC, BOOST_TESTED_AT(1400)) \
    || BOOST_WORKAROUND(__EDG_VERSION__, <= 245)
    {
        BOOST_STATIC_CONSTANT(bool, value = 
              ( sizeof( BOOST_MPL_AUX_OVERLOAD_CALL_IS_MASKED(
                    Set
                  , BOOST_MPL_AUX_STATIC_CAST(aux::type_wrapper<T>*, 0)
                  ) ) == sizeof(aux::no_tag) )
            );

        typedef bool_<value> type;

#else // ISO98 C++
        : bool_< 
              ( sizeof( BOOST_MPL_AUX_OVERLOAD_CALL_IS_MASKED(
                    Set
                  , BOOST_MPL_AUX_STATIC_CAST(aux::type_wrapper<T>*, 0)
                  ) ) == sizeof(aux::no_tag) )
            >
    {
#endif
    };
};

}}

#endif // BOOST_MPL_SET_AUX_HAS_KEY_IMPL_HPP_INCLUDED

/* has_key_impl.hpp
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
*/