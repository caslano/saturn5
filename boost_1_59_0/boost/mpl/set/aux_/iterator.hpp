
#ifndef BOOST_MPL_SET_AUX_ITERATOR_HPP_INCLUDED
#define BOOST_MPL_SET_AUX_ITERATOR_HPP_INCLUDED

// Copyright Aleksey Gurtovoy 2003-2007
// Copyright David Abrahams 2003-2004
//
// Distributed under the Boost Software License, Version 1.0. 
// (See accompanying file LICENSE_1_0.txt or copy at 
// http://www.boost.org/LICENSE_1_0.txt)
//
// See http://www.boost.org/libs/mpl for documentation.

// $Id$
// $Date$
// $Revision$

#include <boost/mpl/set/aux_/set0.hpp>
#include <boost/mpl/has_key.hpp>
#include <boost/mpl/iterator_tags.hpp>
#include <boost/mpl/next.hpp>
#include <boost/mpl/eval_if.hpp>
#include <boost/mpl/if.hpp>
#include <boost/mpl/identity.hpp>
#include <boost/mpl/aux_/config/ctps.hpp>

namespace boost { namespace mpl {

// used by 's_iter_get'
template< typename Set, typename Tail > struct s_iter;

template< typename Set, typename Tail > struct s_iter_get
    : eval_if< 
          has_key< Set,typename Tail::item_type_ >
        , identity< s_iter<Set,Tail> >
        , next< s_iter<Set,Tail> >
        >
{
};

template< typename Set, typename Tail > struct s_iter_impl
{
    typedef Tail                        tail_;
    typedef forward_iterator_tag        category;
    typedef typename Tail::item_type_   type;

#if defined(BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION)
    typedef typename s_iter_get< Set,typename Tail::base >::type next;
#endif
};

#if !defined(BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION)

template< typename Set, typename Tail > 
struct next< s_iter<Set,Tail> >
    : s_iter_get< Set,typename Tail::base >
{
};

template< typename Set > 
struct next< s_iter<Set,set0<> > >
{
    typedef s_iter<Set,set0<> > type;
};

template< typename Set, typename Tail > struct s_iter
    : s_iter_impl<Set,Tail>
{
};

template< typename Set > struct s_iter<Set, set0<> >
{
    typedef forward_iterator_tag category;
};

#else

template< typename Set >
struct s_end_iter
{
    typedef forward_iterator_tag    category;
    typedef s_iter<Set,set0<> >     next;
};

template< typename Set, typename Tail > struct s_iter
    : if_< 
          is_same< Tail,set0<> >
        , s_end_iter<Set>
        , s_iter_impl<Set,Tail>
        >::type
{
};

#endif // BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION

}}

#endif // BOOST_MPL_SET_AUX_ITERATOR_HPP_INCLUDED

/* iterator.hpp
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
*/