
#if !defined(BOOST_PP_IS_ITERATING)

///// header body

#ifndef BOOST_MPL_PLACEHOLDERS_HPP_INCLUDED
#define BOOST_MPL_PLACEHOLDERS_HPP_INCLUDED

// Copyright Aleksey Gurtovoy 2001-2004
// Copyright Peter Dimov 2001-2003
//
// Distributed under the Boost Software License, Version 1.0. 
// (See accompanying file LICENSE_1_0.txt or copy at 
// http://www.boost.org/LICENSE_1_0.txt)
//
// See http://www.boost.org/libs/mpl for documentation.

// $Id$
// $Date$
// $Revision$


#if !defined(BOOST_MPL_PREPROCESSING_MODE)
#   include <boost/mpl/arg.hpp>
#   include <boost/mpl/aux_/adl_barrier.hpp>

#   if !defined(BOOST_MPL_CFG_NO_ADL_BARRIER_NAMESPACE)
#       define BOOST_MPL_AUX_ARG_ADL_BARRIER_DECL(type) \
        using ::BOOST_MPL_AUX_ADL_BARRIER_NAMESPACE::type; \
        /**/
#   else
#       define BOOST_MPL_AUX_ARG_ADL_BARRIER_DECL(type) /**/
#   endif

#endif

#include <boost/mpl/aux_/config/use_preprocessed.hpp>

#if !defined(BOOST_MPL_CFG_NO_PREPROCESSED_HEADERS) \
 && !defined(BOOST_MPL_PREPROCESSING_MODE)

#   define BOOST_MPL_PREPROCESSED_HEADER placeholders.hpp
#   include <boost/mpl/aux_/include_preprocessed.hpp>

#else

#   include <boost/mpl/aux_/nttp_decl.hpp>
#   include <boost/mpl/limits/arity.hpp>
#   include <boost/preprocessor/iterate.hpp>
#   include <boost/preprocessor/cat.hpp>

// watch out for GNU gettext users, who #define _(x)
#if !defined(_) || defined(BOOST_MPL_CFG_NO_UNNAMED_PLACEHOLDER_SUPPORT)
BOOST_MPL_AUX_ADL_BARRIER_NAMESPACE_OPEN
typedef arg<-1> _;
BOOST_MPL_AUX_ADL_BARRIER_NAMESPACE_CLOSE

namespace boost { namespace mpl { 

BOOST_MPL_AUX_ARG_ADL_BARRIER_DECL(_)

namespace placeholders {
using BOOST_MPL_AUX_ADL_BARRIER_NAMESPACE::_;
}

}}
#endif

/// agurt, 17/mar/02: one more placeholder for the last 'apply#' 
/// specialization
#define BOOST_PP_ITERATION_PARAMS_1 \
    (3,(1, BOOST_MPL_LIMIT_METAFUNCTION_ARITY + 1, <boost/mpl/placeholders.hpp>))
#include BOOST_PP_ITERATE()

#endif // BOOST_MPL_CFG_NO_PREPROCESSED_HEADERS
#endif // BOOST_MPL_PLACEHOLDERS_HPP_INCLUDED

///// iteration

#else
#define i_ BOOST_PP_FRAME_ITERATION(1)

BOOST_MPL_AUX_ADL_BARRIER_NAMESPACE_OPEN

typedef arg<i_> BOOST_PP_CAT(_,i_);

BOOST_MPL_AUX_ADL_BARRIER_NAMESPACE_CLOSE

namespace boost { namespace mpl { 

BOOST_MPL_AUX_ARG_ADL_BARRIER_DECL(BOOST_PP_CAT(_,i_))

namespace placeholders {
using BOOST_MPL_AUX_ADL_BARRIER_NAMESPACE::BOOST_PP_CAT(_,i_);
}

}}

#undef i_
#endif // BOOST_PP_IS_ITERATING

/* placeholders.hpp
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
*/