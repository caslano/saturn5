
#ifndef BOOST_MPL_MAX_ELEMENT_HPP_INCLUDED
#define BOOST_MPL_MAX_ELEMENT_HPP_INCLUDED

// Copyright Aleksey Gurtovoy 2000-2004
//
// Distributed under the Boost Software License, Version 1.0. 
// (See accompanying file LICENSE_1_0.txt or copy at 
// http://www.boost.org/LICENSE_1_0.txt)
//
// See http://www.boost.org/libs/mpl for documentation.

// $Id$
// $Date$
// $Revision$

#include <boost/mpl/less.hpp>
#include <boost/mpl/iter_fold.hpp>
#include <boost/mpl/begin_end.hpp>
#include <boost/mpl/if.hpp>
#include <boost/mpl/deref.hpp>
#include <boost/mpl/apply.hpp>
#include <boost/mpl/aux_/common_name_wknd.hpp>
#include <boost/mpl/aux_/na_spec.hpp>

namespace boost { namespace mpl {

BOOST_MPL_AUX_COMMON_NAME_WKND(max_element)

namespace aux {

template< typename Predicate >
struct select_max
{
    template< typename OldIterator, typename Iterator >
    struct apply
    {
        typedef typename apply2<
              Predicate
            , typename deref<OldIterator>::type
            , typename deref<Iterator>::type
            >::type condition_;

        typedef typename if_<
              condition_
            , Iterator
            , OldIterator
            >::type type;
    };
};

} // namespace aux 


template<
      typename BOOST_MPL_AUX_NA_PARAM(Sequence)
    , typename Predicate = less<_,_>
    >
struct max_element
    : iter_fold<
          Sequence
        , typename begin<Sequence>::type
        , protect< aux::select_max<Predicate> >
        >
{
};

BOOST_MPL_AUX_NA_SPEC(1, max_element)

}}

#endif // BOOST_MPL_MAX_ELEMENT_HPP_INCLUDED

/* max_element.hpp
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
*/