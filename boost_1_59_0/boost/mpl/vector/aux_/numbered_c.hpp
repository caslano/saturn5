
// NO INCLUDE GUARDS, THE HEADER IS INTENDED FOR MULTIPLE INCLUSION

#if defined(BOOST_PP_IS_ITERATING)

// Copyright Aleksey Gurtovoy 2000-2004
//
// Distributed under the Boost Software License, Version 1.0. 
// (See accompanying file LICENSE_1_0.txt or copy at 
// http://www.boost.org/LICENSE_1_0.txt)
//
// See http://www.boost.org/libs/mpl for documentation.

// $Id$
// $Date$
// $Revision$

#include <boost/preprocessor/enum_params.hpp>
#include <boost/preprocessor/enum_shifted_params.hpp>
#include <boost/preprocessor/comma_if.hpp>
#include <boost/preprocessor/repeat.hpp>
#include <boost/preprocessor/dec.hpp>
#include <boost/preprocessor/cat.hpp>

#define i_ BOOST_PP_FRAME_ITERATION(1)

#if defined(BOOST_MPL_CFG_TYPEOF_BASED_SEQUENCES)

#   define AUX778076_VECTOR_TAIL(vector, i_, C) \
    BOOST_PP_CAT(BOOST_PP_CAT(vector,i_),_c)<T \
          BOOST_PP_COMMA_IF(i_) BOOST_PP_ENUM_PARAMS(i_, C) \
        > \
    /**/

#if i_ > 0
template<
      typename T
    , BOOST_PP_ENUM_PARAMS(i_, T C)
    >
struct BOOST_PP_CAT(BOOST_PP_CAT(vector,i_),_c)
    : v_item<
          integral_c<T,BOOST_PP_CAT(C,BOOST_PP_DEC(i_))>
        , AUX778076_VECTOR_TAIL(vector,BOOST_PP_DEC(i_),C)
        >
{
    typedef BOOST_PP_CAT(BOOST_PP_CAT(vector,i_),_c) type;
    typedef T value_type;
};
#endif

#   undef AUX778076_VECTOR_TAIL

#else // "brute force" implementation

#   define AUX778076_VECTOR_C_PARAM_FUNC(unused, i_, param) \
    BOOST_PP_COMMA_IF(i_) \
    integral_c<T,BOOST_PP_CAT(param,i_)> \
    /**/

template<
      typename T
    , BOOST_PP_ENUM_PARAMS(i_, T C)
    >
struct BOOST_PP_CAT(BOOST_PP_CAT(vector,i_),_c)
    : BOOST_PP_CAT(vector,i_)< BOOST_PP_REPEAT(i_,AUX778076_VECTOR_C_PARAM_FUNC,C) >
{
    typedef BOOST_PP_CAT(BOOST_PP_CAT(vector,i_),_c) type;
    typedef T value_type;
};

#   undef AUX778076_VECTOR_C_PARAM_FUNC

#endif // BOOST_MPL_CFG_TYPEOF_BASED_SEQUENCES

#undef i_

#endif // BOOST_PP_IS_ITERATING

/* numbered_c.hpp
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
*/