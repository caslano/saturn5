
#ifndef BOOST_MPL_VECTOR_AUX_ITEM_HPP_INCLUDED
#define BOOST_MPL_VECTOR_AUX_ITEM_HPP_INCLUDED

// Copyright Aleksey Gurtovoy 2000-2004
//
// Distributed under the Boost Software License, Version 1.0. 
// (See accompanying file LICENSE_1_0.txt or copy at 
// http://www.boost.org/LICENSE_1_0.txt)
//
// See http://www.boost.org/libs/mpl for documentation.

// $Id$
// $Date$
// $Revision$

#include <boost/mpl/long.hpp>
#include <boost/mpl/void.hpp>
#include <boost/mpl/next_prior.hpp>
#include <boost/mpl/aux_/type_wrapper.hpp>
#include <boost/mpl/aux_/config/typeof.hpp>
#include <boost/mpl/aux_/config/ctps.hpp>

namespace boost { namespace mpl {

#if defined(BOOST_MPL_CFG_TYPEOF_BASED_SEQUENCES)

template< 
      typename T
    , typename Base
    , int at_front = 0
    >
struct v_item
    : Base
{
    typedef typename Base::upper_bound_ index_;
    typedef typename next<index_>::type upper_bound_;
    typedef typename next<typename Base::size>::type size;
    typedef Base base;
    typedef v_item type;

    // agurt 10/sep/04: MWCW <= 9.3 workaround here and below; the compiler
    // breaks if using declaration comes _before_ the new overload
    static aux::type_wrapper<T> item_(index_);
    using Base::item_;
};

template<
      typename T
    , typename Base
    >
struct v_item<T,Base,1>
    : Base
{
    typedef typename prior<typename Base::lower_bound_>::type index_;
    typedef index_ lower_bound_;
    typedef typename next<typename Base::size>::type size;
    typedef Base base;
    typedef v_item type;

    static aux::type_wrapper<T> item_(index_);
    using Base::item_;
};

// "erasure" item
template< 
      typename Base
    , int at_front
    >
struct v_mask
    : Base
{
    typedef typename prior<typename Base::upper_bound_>::type index_;
    typedef index_ upper_bound_;
    typedef typename prior<typename Base::size>::type size;
    typedef Base base;
    typedef v_mask type;

    static aux::type_wrapper<void_> item_(index_);
    using Base::item_;
};

template< 
      typename Base
    >
struct v_mask<Base,1>
    : Base
{
    typedef typename Base::lower_bound_ index_;
    typedef typename next<index_>::type lower_bound_;
    typedef typename prior<typename Base::size>::type size;
    typedef Base base;
    typedef v_mask type;

    static aux::type_wrapper<void_> item_(index_);
    using Base::item_;
};

#endif // BOOST_MPL_CFG_TYPEOF_BASED_SEQUENCES

}}

#endif // BOOST_MPL_VECTOR_AUX_ITEM_HPP_INCLUDED

/* item.hpp
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
*/