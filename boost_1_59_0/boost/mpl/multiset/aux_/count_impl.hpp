
#ifndef BOOST_MPL_MULTISET_AUX_COUNT_IMPL_HPP_INCLUDED
#define BOOST_MPL_MULTISET_AUX_COUNT_IMPL_HPP_INCLUDED

// Copyright Aleksey Gurtovoy 2003-2004
//
// Distributed under the Boost Software License, Version 1.0. 
// (See accompanying file LICENSE_1_0.txt or copy at 
// http://www.boost.org/LICENSE_1_0.txt)
//
// See http://www.boost.org/libs/mpl for documentation.

// $Id$
// $Date$
// $Revision$

#include <boost/mpl/multiset/aux_/tag.hpp>
#include <boost/mpl/count_fwd.hpp>
#include <boost/mpl/int.hpp>
#include <boost/mpl/aux_/type_wrapper.hpp>
#include <boost/mpl/aux_/static_cast.hpp>
#include <boost/mpl/aux_/config/static_constant.hpp>
#include <boost/mpl/aux_/config/workaround.hpp>
#include <boost/mpl/aux_/config/msvc.hpp>

#if BOOST_WORKAROUND(BOOST_MSVC, <= 1300)
#   include <boost/mpl/if.hpp>
#   include <boost/type_traits/is_reference.hpp>
#endif

namespace boost { namespace mpl {

#if BOOST_WORKAROUND(BOOST_MSVC, <= 1300)

namespace aux {
template< typename S, typename U >
struct multiset_count_impl
    : int_< sizeof(S::key_count(BOOST_MPL_AUX_STATIC_CAST(U*,0))) - 1 >
{
};

template< typename S, typename U >
struct multiset_count_ref_impl
{
    typedef U (* u_)();
    typedef int_< sizeof(S::ref_key_count(BOOST_MPL_AUX_STATIC_CAST(u_,0))) - 1 > type_;
    BOOST_STATIC_CONSTANT(int, value = type_::value);
    typedef type_ type;
};
}

template<>
struct count_impl< aux::multiset_tag >
{
    template< typename Set, typename Key > struct apply
        : if_< 
              is_reference<Key>
            , aux::multiset_count_ref_impl<Set,Key>
            , aux::multiset_count_impl<Set,Key>
            >::type
    {
    };
};

#else

template<>
struct count_impl< aux::multiset_tag >
{
    template< typename Set, typename Key > struct apply
    {
        enum { msvc71_wknd_ = sizeof(Set::key_count(BOOST_MPL_AUX_STATIC_CAST(aux::type_wrapper<Key>*,0))) - 1 };
        typedef int_< msvc71_wknd_ > type;
        BOOST_STATIC_CONSTANT(int, value = msvc71_wknd_);
    };
};

#endif // BOOST_WORKAROUND(BOOST_MSVC, <= 1300)

}}

#endif // BOOST_MPL_MULTISET_AUX_COUNT_IMPL_HPP_INCLUDED

/* count_impl.hpp
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
*/