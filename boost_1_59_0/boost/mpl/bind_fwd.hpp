
#if !defined(BOOST_PP_IS_ITERATING)

///// header body

#ifndef BOOST_MPL_BIND_FWD_HPP_INCLUDED
#define BOOST_MPL_BIND_FWD_HPP_INCLUDED

// Copyright Aleksey Gurtovoy 2000-2004
//
// Distributed under the Boost Software License, Version 1.0. 
// (See accompanying file LICENSE_1_0.txt or copy at 
// http://www.boost.org/LICENSE_1_0.txt)
//
// See http://www.boost.org/libs/mpl for documentation.

// $Id$
// $Date$
// $Revision$

#if !defined(BOOST_MPL_PREPROCESSING_MODE)
#   include <boost/mpl/aux_/na.hpp>
#endif

#include <boost/mpl/aux_/config/bind.hpp>
#include <boost/mpl/aux_/config/use_preprocessed.hpp>

#if !defined(BOOST_MPL_CFG_NO_PREPROCESSED_HEADERS) \
    && !defined(BOOST_MPL_PREPROCESSING_MODE)

#   define BOOST_MPL_PREPROCESSED_HEADER bind_fwd.hpp
#   include <boost/mpl/aux_/include_preprocessed.hpp>

#else

#   include <boost/mpl/limits/arity.hpp>
#   include <boost/mpl/aux_/preprocessor/params.hpp>
#   include <boost/mpl/aux_/preprocessor/default_params.hpp>
#   include <boost/mpl/aux_/config/dmc_ambiguous_ctps.hpp>

#   include <boost/preprocessor/comma_if.hpp>
#   include <boost/preprocessor/iterate.hpp>
#   include <boost/preprocessor/cat.hpp>

namespace boost { namespace mpl {

// local macros, #undef-ined at the end of the header

#   if defined(BOOST_MPL_CFG_DMC_AMBIGUOUS_CTPS)
#       define AUX778076_DMC_PARAM() , int dummy_ = 0
#   else
#       define AUX778076_DMC_PARAM()
#   endif

#   define AUX778076_BIND_DEFAULT_PARAMS(param, value) \
    BOOST_MPL_PP_DEFAULT_PARAMS( \
          BOOST_MPL_LIMIT_METAFUNCTION_ARITY \
        , param \
        , value \
        ) \
    AUX778076_DMC_PARAM() \
    /**/

#   define AUX778076_BIND_N_PARAMS(n, param) \
    BOOST_PP_COMMA_IF(n) BOOST_MPL_PP_PARAMS(n, param) \
    AUX778076_DMC_PARAM() \
    /**/

#if !defined(BOOST_MPL_CFG_NO_BIND_TEMPLATE)
template<
      typename F, AUX778076_BIND_DEFAULT_PARAMS(typename T, na)
    >
struct bind;
#endif

#define BOOST_PP_ITERATION_PARAMS_1 \
    (3,(0, BOOST_MPL_LIMIT_METAFUNCTION_ARITY, <boost/mpl/bind_fwd.hpp>))
#include BOOST_PP_ITERATE()

#   undef AUX778076_BIND_N_PARAMS
#   undef AUX778076_BIND_DEFAULT_PARAMS
#   undef AUX778076_DMC_PARAM
}}

#endif // BOOST_MPL_CFG_NO_PREPROCESSED_HEADERS
#endif // BOOST_MPL_BIND_FWD_HPP_INCLUDED

///// iteration

#else
#define i_ BOOST_PP_FRAME_ITERATION(1)

template<
      typename F AUX778076_BIND_N_PARAMS(i_, typename T)
    >
struct BOOST_PP_CAT(bind,i_);

#undef i_
#endif // BOOST_PP_IS_ITERATING

/* bind_fwd.hpp
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
*/