
// Copyright Aleksey Gurtovoy 2000-2004
//
// Distributed under the Boost Software License, Version 1.0. 
// (See accompanying file LICENSE_1_0.txt or copy at 
// http://www.boost.org/LICENSE_1_0.txt)
//
// See http://www.boost.org/libs/mpl for documentation.

// $Id$
// $Date$
// $Revision$

// NO INCLUDE GUARDS, THE HEADER IS INTENDED FOR MULTIPLE INCLUSION!

#if !defined(BOOST_MPL_PREPROCESSING_MODE)
#   include <boost/mpl/bool.hpp>
#   include <boost/mpl/aux_/nested_type_wknd.hpp>
#   include <boost/mpl/aux_/na_spec.hpp>
#   include <boost/mpl/aux_/lambda_support.hpp>
#endif

#include <boost/mpl/limits/arity.hpp>
#include <boost/mpl/aux_/preprocessor/params.hpp>
#include <boost/mpl/aux_/preprocessor/ext_params.hpp>
#include <boost/mpl/aux_/preprocessor/def_params_tail.hpp>
#include <boost/mpl/aux_/preprocessor/enum.hpp>
#include <boost/mpl/aux_/preprocessor/sub.hpp>
#include <boost/mpl/aux_/config/ctps.hpp>
#include <boost/mpl/aux_/config/workaround.hpp>

#include <boost/preprocessor/dec.hpp>
#include <boost/preprocessor/inc.hpp>
#include <boost/preprocessor/cat.hpp>

namespace boost { namespace mpl {

#   define AUX778076_PARAMS(param, sub) \
    BOOST_MPL_PP_PARAMS( \
          BOOST_MPL_PP_SUB(BOOST_MPL_LIMIT_METAFUNCTION_ARITY, sub) \
        , param \
        ) \
    /**/

#   define AUX778076_SHIFTED_PARAMS(param, sub) \
    BOOST_MPL_PP_EXT_PARAMS( \
          2, BOOST_MPL_PP_SUB(BOOST_PP_INC(BOOST_MPL_LIMIT_METAFUNCTION_ARITY), sub) \
        , param \
        ) \
    /**/

#   define AUX778076_SPEC_PARAMS(param) \
    BOOST_MPL_PP_ENUM( \
          BOOST_PP_DEC(BOOST_MPL_LIMIT_METAFUNCTION_ARITY) \
        , param \
        ) \
    /**/

namespace aux {

#if !defined(BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION)

template< bool C_, AUX778076_PARAMS(typename T, 1) >
struct BOOST_PP_CAT(AUX778076_OP_NAME,impl)
    : BOOST_PP_CAT(AUX778076_OP_VALUE1,_)
{
};

template< AUX778076_PARAMS(typename T, 1) >
struct BOOST_PP_CAT(AUX778076_OP_NAME,impl)< AUX778076_OP_VALUE2,AUX778076_PARAMS(T, 1) >
    : BOOST_PP_CAT(AUX778076_OP_NAME,impl)<
          BOOST_MPL_AUX_NESTED_TYPE_WKND(T1)::value
        , AUX778076_SHIFTED_PARAMS(T, 1)
        , BOOST_PP_CAT(AUX778076_OP_VALUE2,_)
        >
{
};

template<>
struct BOOST_PP_CAT(AUX778076_OP_NAME,impl)<
          AUX778076_OP_VALUE2
        , AUX778076_SPEC_PARAMS(BOOST_PP_CAT(AUX778076_OP_VALUE2,_))
        >
    : BOOST_PP_CAT(AUX778076_OP_VALUE2,_)
{
};

#else

template< bool C_ > struct BOOST_PP_CAT(AUX778076_OP_NAME,impl)
{
    template< AUX778076_PARAMS(typename T, 1) > struct result_
        : BOOST_PP_CAT(AUX778076_OP_VALUE1,_)
    {
    };
};

template<> struct BOOST_PP_CAT(AUX778076_OP_NAME,impl)<AUX778076_OP_VALUE2>
{
    template< AUX778076_PARAMS(typename T, 1) > struct result_
        : BOOST_PP_CAT(AUX778076_OP_NAME,impl)< 
              BOOST_MPL_AUX_NESTED_TYPE_WKND(T1)::value
            >::template result_< AUX778076_SHIFTED_PARAMS(T,1),BOOST_PP_CAT(AUX778076_OP_VALUE2,_) >
    {
    };

#if BOOST_WORKAROUND(BOOST_MSVC, == 1300)
    template<> struct result_<AUX778076_SPEC_PARAMS(BOOST_PP_CAT(AUX778076_OP_VALUE2,_))>
        : BOOST_PP_CAT(AUX778076_OP_VALUE2,_)
    {
    };
};
#else
};

template<>
struct BOOST_PP_CAT(AUX778076_OP_NAME,impl)<AUX778076_OP_VALUE2>
    ::result_< AUX778076_SPEC_PARAMS(BOOST_PP_CAT(AUX778076_OP_VALUE2,_)) >
        : BOOST_PP_CAT(AUX778076_OP_VALUE2,_)
{
};
#endif // BOOST_MSVC == 1300

#endif // BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION

} // namespace aux

template<
      typename BOOST_MPL_AUX_NA_PARAM(T1)
    , typename BOOST_MPL_AUX_NA_PARAM(T2)
    BOOST_MPL_PP_DEF_PARAMS_TAIL(2, typename T, BOOST_PP_CAT(AUX778076_OP_VALUE2,_))
    >
struct AUX778076_OP_NAME
#if !defined(BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION)
    : aux::BOOST_PP_CAT(AUX778076_OP_NAME,impl)<
          BOOST_MPL_AUX_NESTED_TYPE_WKND(T1)::value
        , AUX778076_SHIFTED_PARAMS(T,0)
        >
#else
    : aux::BOOST_PP_CAT(AUX778076_OP_NAME,impl)< 
          BOOST_MPL_AUX_NESTED_TYPE_WKND(T1)::value
        >::template result_< AUX778076_SHIFTED_PARAMS(T,0) >
#endif
{
    BOOST_MPL_AUX_LAMBDA_SUPPORT(
          BOOST_MPL_LIMIT_METAFUNCTION_ARITY
        , AUX778076_OP_NAME
        , (AUX778076_PARAMS(T, 0))
        )
};

BOOST_MPL_AUX_NA_SPEC2(
      2
    , BOOST_MPL_LIMIT_METAFUNCTION_ARITY
    , AUX778076_OP_NAME
    )

}}

#undef AUX778076_SPEC_PARAMS
#undef AUX778076_SHIFTED_PARAMS
#undef AUX778076_PARAMS
#undef AUX778076_OP_NAME
#undef AUX778076_OP_VALUE1
#undef AUX778076_OP_VALUE2

/* logical_op.hpp
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
*/