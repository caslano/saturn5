
#ifndef BOOST_MPL_AUX_ORDER_IMPL_HPP_INCLUDED
#define BOOST_MPL_AUX_ORDER_IMPL_HPP_INCLUDED

// Copyright Aleksey Gurtovoy 2003-2004
// Copyright David Abrahams 2003-2004
//
// Distributed under the Boost Software License, Version 1.0. 
// (See accompanying file LICENSE_1_0.txt or copy at 
// http://www.boost.org/LICENSE_1_0.txt)
//
// See http://www.boost.org/libs/mpl for documentation.

// $Id$
// $Date$
// $Revision$

#include <boost/mpl/order_fwd.hpp>
#include <boost/mpl/if.hpp>
#include <boost/mpl/long.hpp>
#include <boost/mpl/has_key.hpp>
#include <boost/mpl/aux_/overload_names.hpp>
#include <boost/mpl/aux_/static_cast.hpp>
#include <boost/mpl/aux_/type_wrapper.hpp>
#include <boost/mpl/aux_/traits_lambda_spec.hpp>
#include <boost/mpl/aux_/config/msvc.hpp>
#include <boost/mpl/aux_/config/static_constant.hpp>
#include <boost/mpl/aux_/config/workaround.hpp>

namespace boost { namespace mpl {

// default implementation; requires 'Seq' to provide corresponding overloads 
// of BOOST_MPL_AUX_OVERLOAD_ORDER_BY_KEY

template< typename Seq, typename Key > struct x_order_impl
#if BOOST_WORKAROUND(BOOST_MSVC, BOOST_TESTED_AT(1400)) \
    || BOOST_WORKAROUND(__EDG_VERSION__, <= 245)
{
    BOOST_STATIC_CONSTANT(long, value = 
          sizeof( BOOST_MPL_AUX_OVERLOAD_CALL_ORDER_BY_KEY(
              Seq
            , BOOST_MPL_AUX_STATIC_CAST(aux::type_wrapper<Key>*, 0)
            ) )
        );

    typedef long_<value> type;

#else // ISO98 C++
    : long_< 
          sizeof( BOOST_MPL_AUX_OVERLOAD_CALL_ORDER_BY_KEY(
              Seq
            , BOOST_MPL_AUX_STATIC_CAST(aux::type_wrapper<Key>*, 0)
            ) )
        >
{
#endif
};

template< typename Tag >
struct order_impl
{
    template< typename Seq, typename Key > struct apply
        : if_<
              typename has_key_impl<Tag>::template apply<Seq,Key>
            , x_order_impl<Seq,Key>
            , void_
            >::type
    {
    };
};

BOOST_MPL_ALGORITM_TRAITS_LAMBDA_SPEC(2,order_impl)

}}

#endif // BOOST_MPL_AUX_ORDER_IMPL_HPP_INCLUDED

/* order_impl.hpp
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
*/