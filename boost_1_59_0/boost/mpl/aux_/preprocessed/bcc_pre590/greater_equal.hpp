
// Copyright Aleksey Gurtovoy 2000-2004
//
// Distributed under the Boost Software License, Version 1.0. 
// (See accompanying file LICENSE_1_0.txt or copy at 
// http://www.boost.org/LICENSE_1_0.txt)
//

// *Preprocessed* version of the main "greater_equal.hpp" header
// -- DO NOT modify by hand!

namespace boost { namespace mpl {

template<
      typename Tag1
    , typename Tag2
    >
struct greater_equal_impl
    : if_c<
          ( BOOST_MPL_AUX_NESTED_VALUE_WKND(int, Tag1)
              > BOOST_MPL_AUX_NESTED_VALUE_WKND(int, Tag2)
            )

        , aux::cast2nd_impl< greater_equal_impl< Tag1,Tag1 >,Tag1, Tag2 >
        , aux::cast1st_impl< greater_equal_impl< Tag2,Tag2 >,Tag1, Tag2 >
        >::type
{
};

/// for Digital Mars C++/compilers with no CTPS/TTP support
template<> struct greater_equal_impl< na,na >
{
    template< typename U1, typename U2 > struct apply
    {
        typedef apply type;
        BOOST_STATIC_CONSTANT(int, value  = 0);
    };
};

template< typename Tag > struct greater_equal_impl< na,Tag >
{
    template< typename U1, typename U2 > struct apply
    {
        typedef apply type;
        BOOST_STATIC_CONSTANT(int, value  = 0);
    };
};

template< typename Tag > struct greater_equal_impl< Tag,na >
{
    template< typename U1, typename U2 > struct apply
    {
        typedef apply type;
        BOOST_STATIC_CONSTANT(int, value  = 0);
    };
};

template< typename T > struct greater_equal_tag
{
    typedef typename T::tag type;
};

template<
      typename BOOST_MPL_AUX_NA_PARAM(N1)
    , typename BOOST_MPL_AUX_NA_PARAM(N2)
    >
struct greater_equal

    : greater_equal_impl<
          typename greater_equal_tag<N1>::type
        , typename greater_equal_tag<N2>::type
        >::template apply< N1,N2 >::type
{
    BOOST_MPL_AUX_LAMBDA_SUPPORT(2, greater_equal, (N1, N2))

};

BOOST_MPL_AUX_NA_SPEC2(2, 2, greater_equal)

}}

namespace boost { namespace mpl {

template<>
struct greater_equal_impl< integral_c_tag,integral_c_tag >
{
    template< typename N1, typename N2 > struct apply

        : bool_< ( BOOST_MPL_AUX_VALUE_WKND(N1)::value >= BOOST_MPL_AUX_VALUE_WKND(N2)::value ) >
    {
    };
};

}}

/* greater_equal.hpp
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
*/