
// Copyright Aleksey Gurtovoy 2000-2004
//
// Distributed under the Boost Software License, Version 1.0. 
// (See accompanying file LICENSE_1_0.txt or copy at 
// http://www.boost.org/LICENSE_1_0.txt)
//

// Preprocessed version of "boost/mpl/greater_equal.hpp" header
// -- DO NOT modify by hand!

namespace boost { namespace mpl {

template<
      typename Tag1
    , typename Tag2
    >
struct greater_equal_impl
    : if_c<
          ( BOOST_MPL_AUX_NESTED_VALUE_WKND(int, Tag1)
              > BOOST_MPL_AUX_NESTED_VALUE_WKND(int, Tag2)
            )

        , aux::cast2nd_impl< greater_equal_impl< Tag1,Tag1 >,Tag1, Tag2 >
        , aux::cast1st_impl< greater_equal_impl< Tag2,Tag2 >,Tag1, Tag2 >
        >::type
{
};

/// for Digital Mars C++/compilers with no CTPS/TTP support
template<> struct greater_equal_impl< na,na >
{
    template< typename U1, typename U2 > struct apply
    {
        typedef apply type;
        BOOST_STATIC_CONSTANT(int, value  = 0);
    };
};

template< typename Tag > struct greater_equal_impl< na,Tag >
{
    template< typename U1, typename U2 > struct apply
    {
        typedef apply type;
        BOOST_STATIC_CONSTANT(int, value  = 0);
    };
};

template< typename Tag > struct greater_equal_impl< Tag,na >
{
    template< typename U1, typename U2 > struct apply
    {
        typedef apply type;
        BOOST_STATIC_CONSTANT(int, value  = 0);
    };
};

template< typename T > struct greater_equal_tag
{
    typedef typename T::tag type;
};

template<
      typename BOOST_MPL_AUX_NA_PARAM(N1)
    , typename BOOST_MPL_AUX_NA_PARAM(N2)
    >
struct greater_equal

    : greater_equal_impl<
          typename greater_equal_tag<N1>::type
        , typename greater_equal_tag<N2>::type
        >::template apply< N1,N2 >::type
{
    BOOST_MPL_AUX_LAMBDA_SUPPORT(2, greater_equal, (N1, N2))

};

BOOST_MPL_AUX_NA_SPEC2(2, 2, greater_equal)

}}

namespace boost { namespace mpl {

template<>
struct greater_equal_impl< integral_c_tag,integral_c_tag >
{
    template< typename N1, typename N2 > struct apply

        : bool_< ( BOOST_MPL_AUX_VALUE_WKND(N1)::value >= BOOST_MPL_AUX_VALUE_WKND(N2)::value ) >
    {
    };
};

}}

/* greater_equal.hpp
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
*/