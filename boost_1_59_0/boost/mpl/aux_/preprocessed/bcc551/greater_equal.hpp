
// Copyright Aleksey Gurtovoy 2000-2004
//
// Distributed under the Boost Software License, Version 1.0. 
// (See accompanying file LICENSE_1_0.txt or copy at 
// http://www.boost.org/LICENSE_1_0.txt)
//

// Preprocessed version of "boost/mpl/greater_equal.hpp" header
// -- DO NOT modify by hand!

namespace boost { namespace mpl {

template<
      typename Tag1
    , typename Tag2
    >
struct greater_equal_impl
    : if_c<
          ( BOOST_MPL_AUX_NESTED_VALUE_WKND(int, Tag1)
              > BOOST_MPL_AUX_NESTED_VALUE_WKND(int, Tag2)
            )

        , aux::cast2nd_impl< greater_equal_impl< Tag1,Tag1 >,Tag1, Tag2 >
        , aux::cast1st_impl< greater_equal_impl< Tag2,Tag2 >,Tag1, Tag2 >
        >::type
{
};

/// for Digital Mars C++/compilers with no CTPS/TTP support
template<> struct greater_equal_impl< na,na >
{
    template< typename U1, typename U2 > struct apply
    {
        typedef apply type;
        BOOST_STATIC_CONSTANT(int, value  = 0);
    };
};

template< typename Tag > struct greater_equal_impl< na,Tag >
{
    template< typename U1, typename U2 > struct apply
    {
        typedef apply type;
        BOOST_STATIC_CONSTANT(int, value  = 0);
    };
};

template< typename Tag > struct greater_equal_impl< Tag,na >
{
    template< typename U1, typename U2 > struct apply
    {
        typedef apply type;
        BOOST_STATIC_CONSTANT(int, value  = 0);
    };
};

template< typename T > struct greater_equal_tag
{
    typedef typename T::tag type;
};

template<
      typename BOOST_MPL_AUX_NA_PARAM(N1)
    , typename BOOST_MPL_AUX_NA_PARAM(N2)
    >
struct greater_equal

    : greater_equal_impl<
          typename greater_equal_tag<N1>::type
        , typename greater_equal_tag<N2>::type
        >::template apply< N1,N2 >::type
{
    BOOST_MPL_AUX_LAMBDA_SUPPORT(2, greater_equal, (N1, N2))

};

BOOST_MPL_AUX_NA_SPEC2(2, 2, greater_equal)

}}

namespace boost { namespace mpl {

template<>
struct greater_equal_impl< integral_c_tag,integral_c_tag >
{
    template< typename N1, typename N2 > struct apply

        : bool_< ( BOOST_MPL_AUX_VALUE_WKND(N1)::value >= BOOST_MPL_AUX_VALUE_WKND(N2)::value ) >
    {
    };
};

}}

/* greater_equal.hpp
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
*/