
// Copyright Aleksey Gurtovoy 2000-2006
//
// Distributed under the Boost Software License, Version 1.0. 
// (See accompanying file LICENSE_1_0.txt or copy at 
// http://www.boost.org/LICENSE_1_0.txt)
//
// See http://www.boost.org/libs/mpl for documentation.

// $Id$
// $Date$
// $Revision$

// NO INCLUDE GUARDS, THE HEADER IS INTENDED FOR MULTIPLE INCLUSION!

#include <boost/mpl/integral_c_tag.hpp>
#include <boost/mpl/aux_/static_cast.hpp>
#include <boost/mpl/aux_/nttp_decl.hpp>
#include <boost/mpl/aux_/config/static_constant.hpp>
#include <boost/mpl/aux_/config/workaround.hpp>

#include <boost/preprocessor/cat.hpp>

#if !defined(AUX_WRAPPER_NAME)
#   define AUX_WRAPPER_NAME BOOST_PP_CAT(AUX_WRAPPER_VALUE_TYPE,_)
#endif

#if !defined(AUX_WRAPPER_PARAMS)
#   define AUX_WRAPPER_PARAMS(N) BOOST_MPL_AUX_NTTP_DECL(AUX_WRAPPER_VALUE_TYPE, N)
#endif

#if !defined(AUX_WRAPPER_INST)
#   if BOOST_WORKAROUND(__MWERKS__, <= 0x2407)
#       define AUX_WRAPPER_INST(value) AUX_WRAPPER_NAME< value >
#   else 
#       define AUX_WRAPPER_INST(value) BOOST_MPL_AUX_ADL_BARRIER_NAMESPACE::AUX_WRAPPER_NAME< value >
#   endif
#endif

BOOST_MPL_AUX_ADL_BARRIER_NAMESPACE_OPEN

template< AUX_WRAPPER_PARAMS(N) >
struct AUX_WRAPPER_NAME
{
    BOOST_STATIC_CONSTANT(AUX_WRAPPER_VALUE_TYPE, value = N);
// agurt, 08/mar/03: SGI MIPSpro C++ workaround, have to #ifdef because some 
// other compilers (e.g. MSVC) are not particulary happy about it
#if BOOST_WORKAROUND(__EDG_VERSION__, <= 238)
    typedef struct AUX_WRAPPER_NAME type;
#else
    typedef AUX_WRAPPER_NAME type;
#endif
    typedef AUX_WRAPPER_VALUE_TYPE value_type;
    typedef integral_c_tag tag;

// have to #ifdef here: some compilers don't like the 'N + 1' form (MSVC),
// while some other don't like 'value + 1' (Borland), and some don't like
// either
#if BOOST_WORKAROUND(__EDG_VERSION__, <= 243)
 private:
    BOOST_STATIC_CONSTANT(AUX_WRAPPER_VALUE_TYPE, next_value = BOOST_MPL_AUX_STATIC_CAST(AUX_WRAPPER_VALUE_TYPE, (N + 1)));
    BOOST_STATIC_CONSTANT(AUX_WRAPPER_VALUE_TYPE, prior_value = BOOST_MPL_AUX_STATIC_CAST(AUX_WRAPPER_VALUE_TYPE, (N - 1)));
 public:
    typedef AUX_WRAPPER_INST(next_value) next;
    typedef AUX_WRAPPER_INST(prior_value) prior;
#elif BOOST_WORKAROUND(BOOST_BORLANDC, BOOST_TESTED_AT(0x561)) \
    || BOOST_WORKAROUND(__IBMCPP__, BOOST_TESTED_AT(502)) \
    || (BOOST_WORKAROUND(__HP_aCC, <= 53800) && (BOOST_WORKAROUND(__hpxstd98, != 1)))
    typedef AUX_WRAPPER_INST( BOOST_MPL_AUX_STATIC_CAST(AUX_WRAPPER_VALUE_TYPE, (N + 1)) ) next;
    typedef AUX_WRAPPER_INST( BOOST_MPL_AUX_STATIC_CAST(AUX_WRAPPER_VALUE_TYPE, (N - 1)) ) prior;
#else
    typedef AUX_WRAPPER_INST( BOOST_MPL_AUX_STATIC_CAST(AUX_WRAPPER_VALUE_TYPE, (value + 1)) ) next;
    typedef AUX_WRAPPER_INST( BOOST_MPL_AUX_STATIC_CAST(AUX_WRAPPER_VALUE_TYPE, (value - 1)) ) prior;
#endif

    // enables uniform function call syntax for families of overloaded 
    // functions that return objects of both arithmetic ('int', 'long',
    // 'double', etc.) and wrapped integral types (for an example, see 
    // "mpl/example/power.cpp")
    BOOST_CONSTEXPR operator AUX_WRAPPER_VALUE_TYPE() const { return static_cast<AUX_WRAPPER_VALUE_TYPE>(this->value); } 
};

#if !defined(BOOST_NO_INCLASS_MEMBER_INITIALIZATION)
template< AUX_WRAPPER_PARAMS(N) >
AUX_WRAPPER_VALUE_TYPE const AUX_WRAPPER_INST(N)::value;
#endif

BOOST_MPL_AUX_ADL_BARRIER_NAMESPACE_CLOSE

#undef AUX_WRAPPER_NAME
#undef AUX_WRAPPER_PARAMS
#undef AUX_WRAPPER_INST
#undef AUX_WRAPPER_VALUE_TYPE

/* integral_wrapper.hpp
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
*/