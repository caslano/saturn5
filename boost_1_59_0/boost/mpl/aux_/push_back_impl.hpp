
#ifndef BOOST_MPL_AUX_PUSH_BACK_IMPL_HPP_INCLUDED
#define BOOST_MPL_AUX_PUSH_BACK_IMPL_HPP_INCLUDED

// Copyright Aleksey Gurtovoy 2000-2008
//
// Distributed under the Boost Software License, Version 1.0. 
// (See accompanying file LICENSE_1_0.txt or copy at 
// http://www.boost.org/LICENSE_1_0.txt)
//
// See http://www.boost.org/libs/mpl for documentation.

// $Id$
// $Date$
// $Revision$

#include <boost/mpl/push_back_fwd.hpp>
#include <boost/mpl/assert.hpp>
#include <boost/mpl/aux_/has_type.hpp>
#include <boost/mpl/aux_/traits_lambda_spec.hpp>
#include <boost/mpl/aux_/config/forwarding.hpp>
#include <boost/mpl/aux_/config/static_constant.hpp>

#include <boost/type_traits/is_same.hpp>

namespace boost { namespace mpl {

struct has_push_back_arg {};

// agurt 05/feb/04: no default implementation; the stub definition is needed 
// to enable the default 'has_push_back' implementation below
template< typename Tag >
struct push_back_impl
{
    template< typename Sequence, typename T > struct apply
    {
        // should be instantiated only in the context of 'has_push_back_impl';
        // if you've got an assert here, you are requesting a 'push_back' 
        // specialization that doesn't exist.
        BOOST_MPL_ASSERT_MSG(
              ( boost::is_same< T, has_push_back_arg >::value )
            , REQUESTED_PUSH_BACK_SPECIALIZATION_FOR_SEQUENCE_DOES_NOT_EXIST
            , ( Sequence )
            );
    };
};

template< typename Tag >
struct has_push_back_impl
{
    template< typename Seq > struct apply
#if !defined(BOOST_MPL_CFG_NO_NESTED_FORWARDING)
        : aux::has_type< push_back< Seq, has_push_back_arg > >
    {
#else
    {
        typedef aux::has_type< push_back< Seq, has_push_back_arg > > type;
        BOOST_STATIC_CONSTANT(bool, value = 
              (aux::has_type< push_back< Seq, has_push_back_arg > >::value)
            );
#endif
    };
};

BOOST_MPL_ALGORITM_TRAITS_LAMBDA_SPEC(2, push_back_impl)
BOOST_MPL_ALGORITM_TRAITS_LAMBDA_SPEC(1, has_push_back_impl)

}}

#endif // BOOST_MPL_AUX_PUSH_BACK_IMPL_HPP_INCLUDED

/* push_back_impl.hpp
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
*/