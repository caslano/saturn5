
#ifndef BOOST_MPL_AUX_PUSH_FRONT_IMPL_HPP_INCLUDED
#define BOOST_MPL_AUX_PUSH_FRONT_IMPL_HPP_INCLUDED

// Copyright Aleksey Gurtovoy 2000-2008
//
// Distributed under the Boost Software License, Version 1.0. 
// (See accompanying file LICENSE_1_0.txt or copy at 
// http://www.boost.org/LICENSE_1_0.txt)
//
// See http://www.boost.org/libs/mpl for documentation.

// $Id$
// $Date$
// $Revision$

#include <boost/mpl/push_front_fwd.hpp>
#include <boost/mpl/assert.hpp>
#include <boost/mpl/aux_/has_type.hpp>
#include <boost/mpl/aux_/traits_lambda_spec.hpp>
#include <boost/mpl/aux_/config/forwarding.hpp>
#include <boost/mpl/aux_/config/static_constant.hpp>

#include <boost/type_traits/is_same.hpp>

namespace boost { namespace mpl {

struct has_push_front_arg {};

// agurt 05/feb/04: no default implementation; the stub definition is needed 
// to enable the default 'has_push_front' implementation below

template< typename Tag >
struct push_front_impl
{
    template< typename Sequence, typename T > struct apply
    {
        // should be instantiated only in the context of 'has_push_front_impl';
        // if you've got an assert here, you are requesting a 'push_front' 
        // specialization that doesn't exist.
        BOOST_MPL_ASSERT_MSG(
              ( boost::is_same< T, has_push_front_arg >::value )
            , REQUESTED_PUSH_FRONT_SPECIALIZATION_FOR_SEQUENCE_DOES_NOT_EXIST
            , ( Sequence )
            );
    };
};

template< typename Tag >
struct has_push_front_impl
{
    template< typename Seq > struct apply
#if !defined(BOOST_MPL_CFG_NO_NESTED_FORWARDING)
        : aux::has_type< push_front< Seq, has_push_front_arg > >
    {
#else
    {
        typedef aux::has_type< push_front< Seq, has_push_front_arg > > type;
        BOOST_STATIC_CONSTANT(bool, value = 
              (aux::has_type< push_front< Seq, has_push_front_arg > >::value)
            );
#endif
    };
};

BOOST_MPL_ALGORITM_TRAITS_LAMBDA_SPEC(2, push_front_impl)
BOOST_MPL_ALGORITM_TRAITS_LAMBDA_SPEC(1, has_push_front_impl)

}}

#endif // BOOST_MPL_AUX_PUSH_FRONT_IMPL_HPP_INCLUDED

/* push_front_impl.hpp
sNA6U6V/XnAnlU4owfie24/R/t36pytekOuRu/xlTTfDVIFkVrgdfzmotkqXY6LZ++kSYawqC8vH82QadzCshntJ/pjX296+5b/dcBVSklWZQep0sPfL1jAT1jkmRbQjgKSHy38rjuuBLRLkL5C2EV3furLIb43hKei8vWAALECmpiS0Wo+siLnL6bvLzzKu/Bifd1YWT8DpR+QvHkAjGVIi6U1yi3hOxOQrM5gFVvfpNZHsAxg+HoTFgiqRQQgjGG/gH+k204eBo4Jgh9NvZ/7YHWQv4/ES7l93MEMRYDti6qLRj4xJlZwiSfjG1JrPrZN0zdoeZn+CN6fGDdNcvqkrCFu0dsMpR/5YD3YMmJgMJwSMQMTPpjxbrpKfeVvK1sgGIVDulnecSlDiPvgj1U6xaAVex/0g6T+CwT+5EYu3ieM+F/qTv9PPVKW8QotTy88DyMdG/xdZ1REie8OxaTM9iZo7KCAs3GTyXt05aGYyIAQwTWqGeqJu1ZaLGILFm3qL24i8KCmSLlweiIcpUPSsmB4MDxkh8JT3GobYy2IX5BI4qvh+0MFqMF5ObLy31BLSuhQ8zcpOsbwGDjioQdZZIHxtHbPJm9EIC+M/QI60p9e5wr3+OxwPYnExMv1+xhsFVJVp4CDoZ50p46TEcUidIqR/K8sYBAmRls9EghHIeNecQhlwgUeRsn8xYy8G8eZJes9uLG9iUq6ixi0VPqIcnMKZHol/9+CF5dvBaMqr7tnn38pO0wryIQM4OjcjaNYYOLLqx7ZzCsjTh4Z0iFEcjjtQqEW4sWX8f3kGijfZtiEmb90CLq8uvY+Y6BlUqIpftPP2Ov/ipfDkX5ER2F8S4/kZQ67lXAH5JOcjI6ch+bEiz3dOEr0opBiprJ9oPpax3d8xympeoRYxQoYlcnICXNUSbwglqqZHcfZo9+NI86jkA3xQYA04Q0YmsxCk1ZLdOtt9vkqoz7MubYGD7JwqrnQTivfCB1aLOWPr/H9JQPpdJavfqNWYkP6IV/ORo/xNSCkn/WVki8pksbLa479NpLwzUj+svUHtZV6Xp73dPz/sKQ/nERUWUqsKcLLopMWJOY0dyd4scPTVgsiW9gTeCSsSSig6hw7Rvzrg/98yhjUuNgRV/yXq3fjPwNnpG+4Rwxmrdtbak6H/8Kb9q8R5xzs/e4FxvFcz0TIne8/I5oAELJbDD1OHHekzLIeQKkZBS8zj/6g8hqAcxR4AqL4cfpeJvb/F631IFctDFUVtoG79IWFFVRvYMOIn2cOzbaXVGIXs1W8jx+PkTu5QrE0+DG2Wisrfv+Z/dQp4DlyFqmNTvbiX0cY0OypAPaKzrO6n4Cqr44UoBCZaZ0AP/rIkXyvczbv/5sxeprFeQ+rYk+Sbu3Gs51jYWJpemuUW+xWx1FVL+1iaODPMMnmj8EgaHrn3T/8VXVEkeY7fC8V2FdVt3C9F1UNI0hyRul7liV19ThiLSVWaeqHTmmZlGGMjT7HEKQOU3X+5GzMv+LLS8f/EecpehrToUkFKj2Yqj/hmGrGND9BFuwNdG1MHNyaK0uME3nVcSPlnuEUV0vGDlGdfoDFB8Y0mbDjQg+2QNYbqtayLrGwbMWVpACcPKVbEPhxFUM70GGZIT+Sz9K70u4mmz3a5YtQX+VCpFAEr6up7XzZYDnJbGH5BCwCsnzS7XcfsUFVfUdzD8THQOwTbApW1T0/kLe0QGBqf7ewDRdH9FKnn67GbZl2yDDACeyfLk7F/sHvmFyBBVg8UZMW59EwVXGTQwMmw4TOXIIHGfFASoXejeCLl5pOk9E6xtDqvTrbSV1vTjgpFOG0eND5g01P1EISBBzrv/RrtL3wkgIT+52VPdWsej2ZCxd2PdycC4NwNUhdJqN8BVJmFh5RhdcUiBVWkN2/pXMG3N9/mzRVUv5s1w/SIiwNu9Bv6u2Ko4KvmgIo2UhM5eqH3zIdLKdsBK2gOR+q6lvOo1jRneuqE0MjKiwUyETXmupIL7GO+cEiyOnmdTK3FJmovrWJAPTEhEk/V95qD4mqe/UhnxDfhg3oohE0i93ZuVX3RQPYl8Y54EmNyVHJQRChZfjhKBUicj7B9+MKMrrV+U28T/h3I5ddfe0MnMDGKKmkw6kpYNZq/IlBI4b3nxJAPnctLOdSWk73+D3upKLz/lmSml2Z35faH8Fto4myKLb4VaaHijj3VtRV27XAi4O9LVgt5h3WZ59Wf4fWae0Xl7ZCX7OLRtmGdey7+SVlKG8l9sxUX8Dl2MGOqjSxY9K3diWmB9N7Zknxa2KdWGM4GIe+/wcj0Ekim91OdiP53xN96VEqd707Jd0zDt60fYTBYPedWUF8nBo+hcj1hoSY+TKg2mCESrHBlQ0JS4d5g0kZazXfiNCraOcr1YHQZKEp/nfDKtviGp7k3djmTieXB6AbUArz9Tnf8zM+W2MBxBgohYw7ZSxDZMv/ihs0WCmLsHpz/1aNBkW61yJ6KIKsIUqczsxicTryZfF4Wm4fgAYXS9QqAop2zG8GHBc7sdCyK5rrWjKH3YLaFUAMkY17fu5sBOp+T/GpsbSLc8EThVNdM8O8iT9r+/5RvwUA/CvozkfrYxf7HhlkMlZWSaE/d8CnoPP64G8UeZV3d8PunRJal14ebJlnP4QOhBt1o0jxfzBGrzc79d0cPurtMvyyqkyZcYXo3k/BxSVzYUk+M2i/mtf0QLrnTzvXkP2NcARydRGTF4WZD039jLtHKAfWRILyFjoypc8z7u3MzBYDo9dyJFb7i670HAh0mEqggvmH/ipaTcJRdPupXOXK1YqSjWA/+6S/90ME5v5frfwxEpGMM5+k0oGQ11jUmB9jQiBjfGo1xuao4kaKgD1l5yykugBNM3ENKA0KZBy2z/ChNn+2q/OkYAlAs+NHfgutnbWpKc2gee1wswePq797yTMWaS7weUfi74oNzjJPopRNt+z51uPAQ1wKN4Fk/lwvSKEe92zdAEaAIFcl+Gx8AF4SbcD/WO0Cn0aryW/EQF/0nsgUAjg44+jdmaz+n6W4zW/Hnpn6DZc9K76qz6jVQakRBS10BZJaG8G3c70s8W2T2Tr/YTgsP0j23UFtbe8ZzEBWB/WCp7O7fg58y5kgANDPLPv2/bYXTJPy4VG2TQjoLyGk1fsCi3gNS3NAPBPhZhDXUhUxyPGivvYUyYzDavpnnwJKRsvfbXof8uiP8OtZ7jSUBsi6usJvSN1LtKIcXtX+qgrXwna7xfWQhZ3DFvl+zhhr2Q0jnk5MPOdh3qGTjS+yrPe/ERL5bTzQMt9+ZRVhf1PY/srp6wOh9LcjlKXbYNOu8mFFm4YVtrmb2XPuGZsS7QHojQJBmZl3XsAn+rmVh/4YTtZH93uk1oA/FfVDj/ds8Z698HpTaG07k9N2tYEvv9RVWbpQtWi1dbUZwezLX9up2Dzie8Zkkr+TOZOomnH052+FfhM2ZhHBjGJGMz+NJiWpqtjRNDP0d8EzykKdOgtA9Zv9LGtBNYvxouW5V6QXkCgCFef/7oQ2Im09S+uRu4wo1Zd8orPjoAzsu/jFHCjEUSJb7iCHfTR8MxnOdJNkPwfOP0AvW+0f5N4BSdRXM0+PTk8vfSkYCVH4To2sTWX7IlICMtRPp6/m0xKVQ+tKHluC/BOZSpH8o02JvOWcvMQzM/REAu2ZUgZYN4DJIYiPwo2hUcNfbPi1ocffCi6pzqdtlgMUUmhgJ98mgrYsae/56L8RVuVKqDav0X4X5sLTsYSYvpsjCjdW9BWAg+cqXlD0ByExKH0jB0aG+vKZ/RXWla8G4gMpIrNct/DBbfdPrlmEWAviZo7WTQ013tBuD8OXpZ5c5QTzFBTo6TkNxDt6LvXOQ4jCLCNs5PfgDUu2Pfqy0ialOIJp6TXRNgIXJCnqSCqlppWsuczjGjm8QG/8oPhSiOapKOsQT9AntEGI+BZWeQ+rTrx7oDlsF6w2AsX9hSJCwv0pUNrtoLY2xaUa679yjs0crsa4sZUkLVFR49Y81PyRz9guXJOo5MdgG+p6B5DmXPnqigkLUPy25eEN7Dh+kUUU8I69k9toFZTZVH53gzenl77FCiT7UUm1LItQbpQlgVl2idjxNjG/QNMLOjhWdqSXl3hAOGLOKRrHiKL91p9n61MJfN1zv422R+HuqYcXu8uwS1U6r6++tv9MRo/2p9BxvfTm14VpELsUVmdr3fz85uoYYmbWm4hVsP3bhwt3X+JXg17U7xzAZY6uQscyBQcVp9LB2tf/k03JUKatw7mNf+7mW5pvGR1gmpZ3Fl33+KMOhmtp7WZ6kCLCo4nu2ZHfIwAMJhUOKfNKzfwNNV9/iWtDDLpj57tUwhDLw1pUSOeT0HDFrbkh/4UBDlf7gv0DF+HgWjCWhHqXjTDPRx/ZcvC8xEuG1cz6mDcHKzRTMbAaUbt43Ve8gmvW8Ffs1AegFfD7FUjIT9m0QwsTS+tClVolApNQbhIgYKmLG7/eLwpW5btFys69jzYfCxjjPfPK9mDzqrT/NLbGEvxmLBjcieDqiflsg9daF9Xzn/m+jIU+HbeU+k38FqcC/nG9dsfDy52STwViZgTkm7vNupmhAo2IYnIjp/qvRoqPFPyhEWg55eWDbgGOn4P0j9Ewe2AnZMlTl/B/k5aLyLIYwIwotyaV+U3yyDVxMovVsYdRKBqDxKTioBLddWQGhJu2f9qI2wBGds0ld6K5mxSQPDIgXjLbaKK+eA2jb5LNTVdJF+nX2cc97MP8UFKKqYBZjvktPHWY2orSnLljxiuHwM/CdMGOeaJ94eOtBBY64SMhhabWgDI2Dw8VMQJtVF6gwffPT8xjR3mF33owM6ia6Ov78noGj2UThY1iZ7/Ld5n/RIzncV9CuKCY7NL335jb3pZZDr0bhaT2AI4HK2I8qzcdmOpJ4SuudWv38baGmupX4JQqtu4ex9akAj9FRNJIBwqPZUql63KS85gikbgkcY2XQTfjcYjrsN/gAZjXfkamgvPr05Ytd825aok+IrgrwJNCkaPqt8bJlODMmdwTBSh2Y10sFhwTf8Snfi1EfrMVvtcSC8UUGr9ofo762a4l1eDIOcstTQXzSik3xE27PB2l0bYlyWWs5+Tl7/MaY1E6oFL9hhCH65N8/7/538l1BIn7JV3oittNoRlNSQpVzX5l73B30z2d3TT28kTyxrVd7NySKwLs5kcC7NRDa9pnrM7fwn0ndMubY2KlKOXHwr3cMPBgEng9JptxHFqasNm91ntMcT2pJ3yGpG1tIsGZw+F9USptpNBw0k4gX84b/9vJZWb/0ywCpbDrBoGcHsPSKMT5m4962Slsm+bZyQc0G5+kA7AKer7ajpIjx5SMRVL6M06mCqj8uheyY6q2ocXiqR7VNCxbLI3bDv355zmjwJX+xLzLkTe5f41nP+1We39+Q7KpTv5hmNEkuF0V/Vjfv8nj8J1PkwNKzZlNL3WPAsRg9LJ1FVvrs7mAduq1IaxgaGPyJJoPnKNfmlx27DogQA9iHhAEdUCb4i7vcQHFFjVFpPo7tYDF371MwD4utSChEJNgrzQgnFwgebn+ZbT4/1X9dBuS5lDnKYQgJygdawDR+xEz7TWszZubqzUAro1uwtNd5EWXrdL2mYLLFtTNEMP19SWIQ77Oa+QZf1/pwhdNcHcoYgqJ0S5UV6o7ah8c/aBbHLYGRAB9kwDaKr6IeaCZZTXzk522ezuz+ts481o9l/CwVHfSCMU5A4fj0fkh+h0054BxN4vcUAX67KggoYxdLmU3QNBW2G2N4BQnlFLhgGwDqFFVsyVPGlpdqpdpr57/Kwd81eTZu4l039ErFPWlkoOJuoQ3DV4YnezM2HydTCKFWKKanW+XKsZaLfMOsuiIFAved3ZZC+EXdDsKO7LsUcVlZ5aSaCUdQRpPOMiysjgTKKvvypQMOf0jg+a/1QVxUGnaTyZitIZMm0tvQf9Lt411jxcpCF7o3veuP1vTXeNf8iTSxxVhn03Psi+U2nCLln86cA5Jm8K/3Nk7PC9o1l59N896JA/wXJ9GJt1We7jSXwT1hB1QWKArtHhVVZ1KNhSFPvGxfK6n9tJSs7vkweanYRZozpcVRNlZ+HMiDiU83hXSyyDjSIGwa5y64eVGRTmLkD02UcvzNiln8ACAQEAAAAAADAAATAAAgAKr6nKqqelMbHj2omlTVTM21GVVVQQ1VtcM2Q1VRVVW1sVERmxmiM6oAAAEAfYBI7zbfI9aAWCpG2gJJQy0AKqKkREYqJqoT5QieYg59EIAEUPv+gCBumT4igKBioj2qecoEtifkiR2ogaqJzonSUNHoPmLaHuk9w8YbqCmAMAAAAABMzRDU2cLwagLgF9P3QPP3hIdxPv4Bp9v5rWJBUZsgHDrKAfu8aDlWD5a5YKge0owpsb1Vu66xcjYXggVY51NVDAhagfxBlOW/IriNWF4gfJxF4o5NVLxXZru/1treCfbivcZvhXMxFm17iAmxHf0Uptmin4AAv64LkJJUrpnQRxB95kmPMCIXc1q9beBEI3eW2u02NO8kCoXXkgBbGApAJeeMF57H168ZbEAMNwESQd4AH09UCiCxSpWhNBwTOPdApLHmilJFvMuLUgStargnz/Xk7/CljaCX95rGxuJVg8ysarK951+nb+gbvQMwyAA06J5asjW/yH8D27+grDRw82T3Bcovo9yM6GHzxUebFIlYpgPJ7JHFAjIdSKphgUWt3wTOGCElnfXokPiOJtOMM5F2A98sPFMiYIzKRVJom4Ju4v5P0fGv01nSOjr6H/64f9+iMDFKPJkocqYmWpBRvTtTenMPJ5lbEG0KwIi6U2ORsObJi0LDl7vC4RRybKPKrJ3xCgQth8dKOQLdfwpHTC4shWcJJCZJd3N6ScOwPOhrMPbr5vm2s52hM40RMcb0etGQlF430+G5PngJelrqiZs76LHCRRQU/P+bsrqNCwnh7htimmtDYYPVXvJzESqCJWvtdgSholGGkZpOk+CoG3VbWPMiTZxhyXiyqWt7eBBN29Mr5tveNctFR/DYJ7CpNWtRtPh7KgpU74i3nQfyniAesR/X1HhwZmtGKBY+s3o7A3bMAyvDixU65GivMO8I03CkZQaE9w/wq/c/wtf6Y4iq1+xX+d7SSuiZMKVVuqNRR0Iv62iCgRMMNUeBuT/03W50oYw2NV95GAdeKF7KPsYgD6dcKxKnreCSQ8oJB4d3joHMBvDYnbBuOVBG22EyM1QxTJzYtI0ejdHUHvG5ofXUFweo8GIpw1pOTtJ4oQqxWBIogPy/oteCpbIPupxwYzOS40gEhJiPT/sxovmA6N4+Kc2ERPQ0z443hQS2qAwu4+9/aTMtNQUeG3/vlLAOGDej787mu2tmZejcO38OH0x7a+hRRe6qUaPJcHf0WkdVF81mMtmqHSfRz5yiXa/kmpie9qJ2fkjWOFprOGF65K38MPSfwoI7tX0bCVbBO1JJi8yQqt4KF+mn21UfWXhikAsZpwrhWQrR7hMW+Qy3fS3qKXNQx2BNWC3iOoOExCjX+p6LihvQUxLPA/QxsqE7MQsKDYOHFsmsGCOeUJrSb7pe3JFFde/jpuf7uOFUlv7OrDsAIpJo
*/