
#ifndef BOOST_MPL_AUX_PREPROCESSOR_TOKEN_EQUAL_HPP_INCLUDED
#define BOOST_MPL_AUX_PREPROCESSOR_TOKEN_EQUAL_HPP_INCLUDED

// Copyright Paul Mensonides 2003
// Copyright Aleksey Gurtovoy 2003-2004
//
// Distributed under the Boost Software License, Version 1.0. 
// (See accompanying file LICENSE_1_0.txt or copy at 
// http://www.boost.org/LICENSE_1_0.txt)
//
// See http://www.boost.org/libs/mpl for documentation.

// $Id$
// $Date$
// $Revision$

#include <boost/mpl/aux_/preprocessor/is_seq.hpp>

#include <boost/preprocessor/if.hpp>
#include <boost/preprocessor/logical/bitand.hpp>
#include <boost/preprocessor/logical/compl.hpp>
#include <boost/preprocessor/tuple/eat.hpp>
#include <boost/preprocessor/cat.hpp>

// compares tokens 'a' and 'b' for equality:
//
//   #define BOOST_MPL_PP_TOKEN_EQUAL_apple(x) x
//   #define BOOST_MPL_PP_TOKEN_EQUAL_orange(x) x
//
//   BOOST_PP_ASSERT( BOOST_PP_NOT( BOOST_MPL_PP_TOKEN_EQUAL(apple, abc) ) )
//   BOOST_PP_ASSERT( BOOST_PP_NOT( BOOST_MPL_PP_TOKEN_EQUAL(abc, apple) ) )
//   BOOST_PP_ASSERT( BOOST_PP_NOT( BOOST_MPL_PP_TOKEN_EQUAL(apple, orange) ) )
//   BOOST_PP_ASSERT( BOOST_MPL_PP_TOKEN_EQUAL(apple, apple) )
//   BOOST_PP_ASSERT( BOOST_MPL_PP_TOKEN_EQUAL(orange, orange) )

#define BOOST_MPL_PP_TOKEN_EQUAL(a, b) \
    BOOST_PP_IIF( \
        BOOST_PP_BITAND( \
              BOOST_MPL_PP_IS_SEQ( BOOST_PP_CAT(BOOST_MPL_PP_TOKEN_EQUAL_, a)((unused)) ) \
            , BOOST_MPL_PP_IS_SEQ( BOOST_PP_CAT(BOOST_MPL_PP_TOKEN_EQUAL_, b)((unused)) ) \
            ) \
        , BOOST_MPL_PP_TOKEN_EQUAL_I \
        , 0 BOOST_PP_TUPLE_EAT(2) \
        )(a, b) \
/**/

#define BOOST_MPL_PP_TOKEN_EQUAL_I(a, b) \
    BOOST_PP_COMPL(BOOST_MPL_PP_IS_SEQ( \
        BOOST_MPL_PP_TOKEN_EQUAL_ ## a( \
            BOOST_MPL_PP_TOKEN_EQUAL_ ## b \
            )((unused)) \
        )) \
/**/

#endif // BOOST_MPL_AUX_PREPROCESSOR_TOKEN_EQUAL_HPP_INCLUDED

/* token_equal.hpp
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
*/