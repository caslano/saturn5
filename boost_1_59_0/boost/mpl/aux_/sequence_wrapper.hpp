
// NO INCLUDE GUARDS, THE HEADER IS INTENDED FOR MULTIPLE INCLUSION

#if !defined(BOOST_PP_IS_ITERATING)

///// header body

// Copyright Aleksey Gurtovoy 2000-2008
//
// Distributed under the Boost Software License, Version 1.0. 
// (See accompanying file LICENSE_1_0.txt or copy at 
// http://www.boost.org/LICENSE_1_0.txt)
//
// See http://www.boost.org/libs/mpl for documentation.

// $Id$
// $Date$
// $Revision$

#   include <boost/mpl/aux_/config/ctps.hpp>
#   include <boost/mpl/aux_/config/static_constant.hpp>
#   include <boost/mpl/aux_/nttp_decl.hpp>

#   include <boost/preprocessor/arithmetic/sub.hpp>
#   include <boost/preprocessor/tuple/elem.hpp>
#   include <boost/preprocessor/enum_params_with_a_default.hpp>
#   include <boost/preprocessor/enum_params.hpp>
#   include <boost/preprocessor/enum.hpp>
#   include <boost/preprocessor/repeat.hpp>
#   include <boost/preprocessor/comma_if.hpp>
#   include <boost/preprocessor/iterate.hpp>

#if defined(BOOST_MPL_PREPROCESSING_MODE)
#   undef LONG_MAX
#endif

namespace boost { namespace mpl {

#if !defined(AUX778076_SEQUENCE_BASE_NAME)
#   define AUX778076_SEQUENCE_BASE_NAME AUX778076_SEQUENCE_NAME
#endif

#if !defined(AUX778076_SEQUENCE_INTEGRAL_WRAPPER)

#   define AUX778076_SEQUENCE_PARAM_NAME T
#   define AUX778076_SEQUENCE_TEMPLATE_PARAM typename T
#   define AUX778076_SEQUENCE_DEFAULT na

#   define AUX778076_SEQUENCE_NAME_N(n) \
    BOOST_PP_CAT(AUX778076_SEQUENCE_BASE_NAME,n) \
    /**/

#   define AUX778076_SEQUENCE_PARAMS() \
    BOOST_PP_ENUM_PARAMS( \
          AUX778076_SEQUENCE_LIMIT \
        , AUX778076_SEQUENCE_TEMPLATE_PARAM \
        ) \
    /**/

#   define AUX778076_SEQUENCE_ARGS() \
    BOOST_PP_ENUM_PARAMS( \
          AUX778076_SEQUENCE_LIMIT \
        , T \
        ) \
    /**/

#   define AUX778076_SEQUENCE_DEFAULT_PARAMS() \
     BOOST_PP_ENUM_PARAMS_WITH_A_DEFAULT( \
          AUX778076_SEQUENCE_LIMIT \
        , AUX778076_SEQUENCE_TEMPLATE_PARAM \
        , AUX778076_SEQUENCE_DEFAULT \
        ) \
    /**/

#   define AUX778076_SEQUENCE_N_PARAMS(n) \
    BOOST_PP_ENUM_PARAMS(n, AUX778076_SEQUENCE_TEMPLATE_PARAM) \
    /**/

#   define AUX778076_SEQUENCE_N_ARGS(n) \
    BOOST_PP_ENUM_PARAMS(n, T) \
    /**/

#   define AUX778076_SEQUENCE_N_PARTIAL_SPEC_ARGS(n) \
    BOOST_PP_ENUM_PARAMS(n, T) \
    BOOST_PP_COMMA_IF(n) \
    BOOST_PP_ENUM( \
          BOOST_PP_SUB_D(1,AUX778076_SEQUENCE_LIMIT,n) \
        , BOOST_PP_TUPLE_ELEM_3_2 \
        , AUX778076_SEQUENCE_DEFAULT \
        ) \
    /**/

#else // AUX778076_SEQUENCE_INTEGRAL_WRAPPER

#   define AUX778076_SEQUENCE_PARAM_NAME C
#   define AUX778076_SEQUENCE_TEMPLATE_PARAM BOOST_MPL_AUX_NTTP_DECL(long, C)
#   define AUX778076_SEQUENCE_DEFAULT LONG_MAX

#   define AUX778076_SEQUENCE_PARAMS() \
    typename T, BOOST_PP_ENUM_PARAMS( \
          AUX778076_SEQUENCE_LIMIT \
        , AUX778076_SEQUENCE_TEMPLATE_PARAM \
        ) \
    /**/

#   define AUX778076_SEQUENCE_ARGS() \
    T, BOOST_PP_ENUM_PARAMS( \
          AUX778076_SEQUENCE_LIMIT \
        , C \
        ) \
    /**/

#   define AUX778076_SEQUENCE_DEFAULT_PARAMS() \
    typename T, \
    BOOST_PP_ENUM_PARAMS_WITH_A_DEFAULT( \
          AUX778076_SEQUENCE_LIMIT \
        , AUX778076_SEQUENCE_TEMPLATE_PARAM \
        , AUX778076_SEQUENCE_DEFAULT \
        ) \
    /**/

#   define AUX778076_SEQUENCE_N_PARAMS(n) \
    typename T BOOST_PP_COMMA_IF(n) \
    BOOST_PP_ENUM_PARAMS(n, AUX778076_SEQUENCE_TEMPLATE_PARAM) \
    /**/

#   if !defined(AUX778076_SEQUENCE_CONVERT_CN_TO)
#       define AUX778076_SEQUENCE_CONVERT_CN_TO(z,n,TARGET) BOOST_PP_CAT(C,n)
#   endif

#   define AUX778076_SEQUENCE_N_ARGS(n) \
    T BOOST_PP_COMMA_IF(n) \
    BOOST_PP_ENUM(n,AUX778076_SEQUENCE_CONVERT_CN_TO,T) \
    /**/

#   define AUX778076_SEQUENCE_N_PARTIAL_SPEC_ARGS(n) \
    T, BOOST_PP_ENUM_PARAMS(n, C) \
    BOOST_PP_COMMA_IF(n) \
    BOOST_PP_ENUM( \
          BOOST_PP_SUB_D(1,AUX778076_SEQUENCE_LIMIT,n) \
        , BOOST_PP_TUPLE_ELEM_3_2 \
        , AUX778076_SEQUENCE_DEFAULT \
        ) \
    /**/

#endif // AUX778076_SEQUENCE_INTEGRAL_WRAPPER


#if !defined(BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION)
// forward declaration
template<
      AUX778076_SEQUENCE_DEFAULT_PARAMS()
    >
struct AUX778076_SEQUENCE_NAME;
#else
namespace aux {
template< BOOST_MPL_AUX_NTTP_DECL(int, N) > 
struct BOOST_PP_CAT(AUX778076_SEQUENCE_NAME,_chooser);
}
#endif

#define BOOST_PP_ITERATION_PARAMS_1 \
    (3,(0, AUX778076_SEQUENCE_LIMIT, <boost/mpl/aux_/sequence_wrapper.hpp>))
#include BOOST_PP_ITERATE()

// real C++ version is already taken care of
#if defined(BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION)

namespace aux {
// ???_count_args
#define AUX778076_COUNT_ARGS_PREFIX         AUX778076_SEQUENCE_NAME
#define AUX778076_COUNT_ARGS_DEFAULT        AUX778076_SEQUENCE_DEFAULT
#define AUX778076_COUNT_ARGS_PARAM_NAME     AUX778076_SEQUENCE_PARAM_NAME
#define AUX778076_COUNT_ARGS_TEMPLATE_PARAM AUX778076_SEQUENCE_TEMPLATE_PARAM
#define AUX778076_COUNT_ARGS_ARITY          AUX778076_SEQUENCE_LIMIT
#define AUX778076_COUNT_ARGS_USE_STANDARD_PP_PRIMITIVES
#include <boost/mpl/aux_/count_args.hpp>

template<
      AUX778076_SEQUENCE_PARAMS()
    >
struct BOOST_PP_CAT(AUX778076_SEQUENCE_NAME,_impl)
{
    typedef aux::BOOST_PP_CAT(AUX778076_SEQUENCE_NAME,_count_args)<
          BOOST_PP_ENUM_PARAMS(AUX778076_SEQUENCE_LIMIT, AUX778076_SEQUENCE_PARAM_NAME)
        > arg_num_;
    
    typedef typename aux::BOOST_PP_CAT(AUX778076_SEQUENCE_NAME,_chooser)< arg_num_::value >
        ::template result_< AUX778076_SEQUENCE_ARGS() >::type type;
};

} // namespace aux

template<
      AUX778076_SEQUENCE_DEFAULT_PARAMS()
    >
struct AUX778076_SEQUENCE_NAME
    : aux::BOOST_PP_CAT(AUX778076_SEQUENCE_NAME,_impl)<
          AUX778076_SEQUENCE_ARGS()
        >::type
{
    typedef typename aux::BOOST_PP_CAT(AUX778076_SEQUENCE_NAME,_impl)<
          AUX778076_SEQUENCE_ARGS()
        >::type type;
};

#endif // BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION

#   undef AUX778076_SEQUENCE_N_PARTIAL_SPEC_ARGS
#   undef AUX778076_SEQUENCE_N_ARGS
#   undef AUX778076_SEQUENCE_CONVERT_CN_TO
#   undef AUX778076_SEQUENCE_N_PARAMS
#   undef AUX778076_SEQUENCE_DEFAULT_PARAMS
#   undef AUX778076_SEQUENCE_ARGS
#   undef AUX778076_SEQUENCE_PARAMS
#   undef AUX778076_SEQUENCE_NAME_N
#   undef AUX778076_SEQUENCE_DEFAULT
#   undef AUX778076_SEQUENCE_TEMPLATE_PARAM
#   undef AUX778076_SEQUENCE_PARAM_NAME
#   undef AUX778076_SEQUENCE_LIMIT
#   undef AUX778076_SEQUENCE_BASE_NAME
#   undef AUX778076_SEQUENCE_NAME
#   undef AUX778076_SEQUENCE_INTEGRAL_WRAPPER

}}

///// iteration

#else
#define i_ BOOST_PP_FRAME_ITERATION(1)

#   if !defined(BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION)

#if i_ == AUX778076_SEQUENCE_LIMIT

/// primary template (not a specialization!)
template<
      AUX778076_SEQUENCE_N_PARAMS(i_)
    >
struct AUX778076_SEQUENCE_NAME
    : AUX778076_SEQUENCE_NAME_N(i_)< AUX778076_SEQUENCE_N_ARGS(i_) >
{
    typedef typename AUX778076_SEQUENCE_NAME_N(i_)< AUX778076_SEQUENCE_N_ARGS(i_) >::type type;
};

#else

template<
      AUX778076_SEQUENCE_N_PARAMS(i_)
    >
struct AUX778076_SEQUENCE_NAME< AUX778076_SEQUENCE_N_PARTIAL_SPEC_ARGS(i_) >
    : AUX778076_SEQUENCE_NAME_N(i_)< AUX778076_SEQUENCE_N_ARGS(i_) >
{
#if i_ > 0 || defined(AUX778076_SEQUENCE_INTEGRAL_WRAPPER)
    typedef typename AUX778076_SEQUENCE_NAME_N(i_)< AUX778076_SEQUENCE_N_ARGS(i_) >::type type;
#else
    typedef AUX778076_SEQUENCE_NAME_N(i_)< AUX778076_SEQUENCE_N_ARGS(i_) >::type type;
#endif
};

#endif // i_ == AUX778076_SEQUENCE_LIMIT

#   else

namespace aux {

template<>
struct BOOST_PP_CAT(AUX778076_SEQUENCE_NAME,_chooser)<i_>
{
    template<
          AUX778076_SEQUENCE_PARAMS()
        >
    struct result_
    {
#if i_ > 0 || defined(AUX778076_SEQUENCE_INTEGRAL_WRAPPER)
        typedef typename AUX778076_SEQUENCE_NAME_N(i_)<
              AUX778076_SEQUENCE_N_ARGS(i_)
            >::type type;
#else
        typedef AUX778076_SEQUENCE_NAME_N(i_)<
              AUX778076_SEQUENCE_N_ARGS(i_)
            >::type type;
#endif
    };
};

} // namespace aux

#   endif // BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION

#undef i_
#endif // BOOST_PP_IS_ITERATING

/* sequence_wrapper.hpp
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
*/