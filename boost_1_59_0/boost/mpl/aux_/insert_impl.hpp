
#ifndef BOOST_MPL_INSERT_IMPL_HPP_INCLUDED
#define BOOST_MPL_INSERT_IMPL_HPP_INCLUDED

// Copyright Aleksey Gurtovoy 2000-2004
//
// Distributed under the Boost Software License, Version 1.0. 
// (See accompanying file LICENSE_1_0.txt or copy at 
// http://www.boost.org/LICENSE_1_0.txt)
//
// See http://www.boost.org/libs/mpl for documentation.

// $Id$
// $Date$
// $Revision$

#include <boost/mpl/reverse_fold.hpp>
#include <boost/mpl/iterator_range.hpp>
#include <boost/mpl/clear.hpp>
#include <boost/mpl/push_front.hpp>
#include <boost/mpl/aux_/na_spec.hpp>
#include <boost/mpl/aux_/traits_lambda_spec.hpp>
#include <boost/type_traits/is_same.hpp>

namespace boost { namespace mpl {

// default implementation; conrete sequences might override it by 
// specializing either the 'insert_impl' or the primary 'insert' template

template< typename Tag >
struct insert_impl
{
    template<
          typename Sequence
        , typename Pos
        , typename T
        >
    struct apply
    {
        typedef iterator_range<
              typename begin<Sequence>::type
            , Pos
            > first_half_;

        typedef iterator_range<
              Pos
            , typename end<Sequence>::type
            > second_half_;

        typedef typename reverse_fold<
              second_half_
            , typename clear<Sequence>::type
            , push_front<_,_>
            >::type half_sequence_;

        typedef typename reverse_fold<
              first_half_
            , typename push_front<half_sequence_,T>::type
            , push_front<_,_>
            >::type type;
    };
};

BOOST_MPL_ALGORITM_TRAITS_LAMBDA_SPEC(3,insert_impl)

}}

#endif // BOOST_MPL_INSERT_IMPL_HPP_INCLUDED

/* insert_impl.hpp
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
*/