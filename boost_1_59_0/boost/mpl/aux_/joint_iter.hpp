
#ifndef BOOST_MPL_AUX_JOINT_ITER_HPP_INCLUDED
#define BOOST_MPL_AUX_JOINT_ITER_HPP_INCLUDED

// Copyright Aleksey Gurtovoy 2000-2004
//
// Distributed under the Boost Software License, Version 1.0. 
// (See accompanying file LICENSE_1_0.txt or copy at 
// http://www.boost.org/LICENSE_1_0.txt)
//
// See http://www.boost.org/libs/mpl for documentation.

// $Id$
// $Date$
// $Revision$

#include <boost/mpl/next_prior.hpp>
#include <boost/mpl/deref.hpp>
#include <boost/mpl/iterator_tags.hpp>
#include <boost/mpl/aux_/lambda_spec.hpp>
#include <boost/mpl/aux_/config/ctps.hpp>

#if defined(BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION)
#   include <boost/type_traits/is_same.hpp>
#endif

namespace boost { namespace mpl {

#if !defined(BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION)

template<
      typename Iterator1
    , typename LastIterator1
    , typename Iterator2
    >
struct joint_iter
{
    typedef Iterator1 base;
    typedef forward_iterator_tag category;
};

template<
      typename LastIterator1
    , typename Iterator2
    >
struct joint_iter<LastIterator1,LastIterator1,Iterator2>
{
    typedef Iterator2 base;
    typedef forward_iterator_tag category;
};


template< typename I1, typename L1, typename I2 >
struct deref< joint_iter<I1,L1,I2> >
{
    typedef typename joint_iter<I1,L1,I2>::base base_;
    typedef typename deref<base_>::type type;
};

template< typename I1, typename L1, typename I2 >
struct next< joint_iter<I1,L1,I2> >
{
    typedef joint_iter< typename mpl::next<I1>::type,L1,I2 > type;
};

template< typename L1, typename I2 >
struct next< joint_iter<L1,L1,I2> >
{
    typedef joint_iter< L1,L1,typename mpl::next<I2>::type > type;
};

#else // BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION

template<
      typename Iterator1
    , typename LastIterator1
    , typename Iterator2
    >
struct joint_iter;

template< bool > struct joint_iter_impl
{
    template< typename I1, typename L1, typename I2 > struct result_
    {
        typedef I1 base;
        typedef forward_iterator_tag category;
        typedef joint_iter< typename mpl::next<I1>::type,L1,I2 > next;
        typedef typename deref<I1>::type type;
    };
};

template<> struct joint_iter_impl<true>
{
    template< typename I1, typename L1, typename I2 > struct result_
    {
        typedef I2 base;
        typedef forward_iterator_tag category;
        typedef joint_iter< L1,L1,typename mpl::next<I2>::type > next;
        typedef typename deref<I2>::type type;
    };
};

template<
      typename Iterator1
    , typename LastIterator1
    , typename Iterator2
    >
struct joint_iter
    : joint_iter_impl< is_same<Iterator1,LastIterator1>::value >
        ::template result_<Iterator1,LastIterator1,Iterator2>
{
};

#endif // BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION

BOOST_MPL_AUX_PASS_THROUGH_LAMBDA_SPEC(3, joint_iter)

}}

#endif // BOOST_MPL_AUX_JOINT_ITER_HPP_INCLUDED

/* joint_iter.hpp
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
*/