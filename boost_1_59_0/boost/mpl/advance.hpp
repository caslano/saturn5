
#ifndef BOOST_MPL_ADVANCE_HPP_INCLUDED
#define BOOST_MPL_ADVANCE_HPP_INCLUDED

// Copyright Aleksey Gurtovoy 2000-2004
//
// Distributed under the Boost Software License, Version 1.0. 
// (See accompanying file LICENSE_1_0.txt or copy at 
// http://www.boost.org/LICENSE_1_0.txt)
//
// See http://www.boost.org/libs/mpl for documentation.

// $Id$
// $Date$
// $Revision$

#include <boost/mpl/advance_fwd.hpp>
#include <boost/mpl/less.hpp>
#include <boost/mpl/negate.hpp>
#include <boost/mpl/long.hpp>
#include <boost/mpl/if.hpp>
#include <boost/mpl/tag.hpp>
#include <boost/mpl/apply_wrap.hpp>
#include <boost/mpl/aux_/advance_forward.hpp>
#include <boost/mpl/aux_/advance_backward.hpp>
#include <boost/mpl/aux_/value_wknd.hpp>
#include <boost/mpl/aux_/na_spec.hpp>
#include <boost/mpl/aux_/nttp_decl.hpp>

namespace boost { namespace mpl {

// default implementation for forward/bidirectional iterators
template< typename Tag >
struct advance_impl
{
    template< typename Iterator, typename N > struct apply
    {
        typedef typename less< N,long_<0> >::type backward_;
        typedef typename if_< backward_, negate<N>, N >::type offset_;

        typedef typename if_<
              backward_
            , aux::advance_backward< BOOST_MPL_AUX_VALUE_WKND(offset_)::value >
            , aux::advance_forward< BOOST_MPL_AUX_VALUE_WKND(offset_)::value >
            >::type f_;

        typedef typename apply_wrap1<f_,Iterator>::type type;
    };
};


template<
      typename BOOST_MPL_AUX_NA_PARAM(Iterator)
    , typename BOOST_MPL_AUX_NA_PARAM(N)
    >
struct advance
    : advance_impl< typename tag<Iterator>::type >
        ::template apply<Iterator,N>
{
};

template<
      typename Iterator
    , BOOST_MPL_AUX_NTTP_DECL(long, N)
    >
struct advance_c
    : advance_impl< typename tag<Iterator>::type >
        ::template apply<Iterator,long_<N> >
{
};

BOOST_MPL_AUX_NA_SPEC(2, advance)

}}

#endif // BOOST_MPL_ADVANCE_HPP_INCLUDED

/* advance.hpp
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
*/