// (C) Copyright Jonathan Turkanis 2004-2005.
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt.)

// Contains the definition of move_ptrs::default_deleter, the default
// Deleter template argument to move_ptr. Uses a technique of Daniel
// Wallin to capture the type of a pointer at the time the deleter 
// is constructed, so that move_ptrs can delete objects of incomplete 
// type by default.

#ifndef BOOST_MOVE_PTR_DEFAULT_DELETER_HPP_INCLUDED
#define BOOST_MOVE_PTR_DEFAULT_DELETER_HPP_INCLUDED 

#include <boost/checked_delete.hpp>
#include <boost/mpl/if.hpp>
#include <boost/type_traits/is_array.hpp>
#include <boost/type_traits/remove_bounds.hpp>

namespace boost { namespace ptr_container_detail { namespace move_ptrs {

namespace ptr_container_detail {

template<typename T>
struct deleter_base {
    typedef void (*deleter)(T*);
    deleter_base(deleter d) { delete_ = d; }
    void operator() (T* t) const { delete_(t); }
    static deleter delete_;
};

template<class T>
typename deleter_base<T>::deleter 
deleter_base<T>::delete_;

template<typename T>
struct scalar_deleter : deleter_base<T> {
    typedef deleter_base<T> base;
    scalar_deleter() : base(do_delete) { }
    static void do_delete(T* t) { checked_delete(t); }
};

template<typename T>
struct array_deleter 
    : deleter_base<typename remove_bounds<T>::type>
{
    typedef typename remove_bounds<T>::type element_type;
    typedef deleter_base<element_type> base;
    array_deleter() : base(do_delete) { }
    static void do_delete(element_type* t) { checked_array_delete(t); }
};

} // End namespace ptr_container_detail.

template<typename T>
struct default_deleter
    : mpl::if_<
          is_array<T>,
          ptr_container_detail::array_deleter<T>,
          ptr_container_detail::scalar_deleter<T>
      >::type
{ 
    default_deleter() { }
    template<typename TT>
    default_deleter(default_deleter<TT>) { }
};

} } } // End namespaces ptr_container_detail, move_ptrs, boost.

#endif // #ifndef BOOST_MOVE_PTR_DEFAULT_DELETER_HPP_INCLUDED

/* default_deleter.hpp
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
*/