/* boost random.hpp header file
 *
 * Copyright Jens Maurer 2000-2001
 * Distributed under the Boost Software License, Version 1.0. (See
 * accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * See http://www.boost.org/libs/random for documentation.
 *
 * $Id$
 *
 * Revision history
 *  2000-02-18  portability fixes (thanks to Beman Dawes)
 *  2000-02-21  shuffle_output, inversive_congruential_schrage,
 *              generator_iterator, uniform_smallint
 *  2000-02-23  generic modulus arithmetic helper, removed *_schrage classes,
 *              implemented Streamable and EqualityComparable concepts for 
 *              generators, added Bernoulli distribution and Box-Muller
 *              transform
 *  2000-03-01  cauchy, lognormal, triangle distributions; fixed 
 *              uniform_smallint; renamed gaussian to normal distribution
 *  2000-03-05  implemented iterator syntax for distribution functions
 *  2000-04-21  removed some optimizations for better BCC/MSVC compatibility
 *  2000-05-10  adapted to BCC and MSVC
 *  2000-06-13  incorporated review results
 *  2000-07-06  moved basic templates from namespace detail to random
 *  2000-09-23  warning removals and int64 fixes (Ed Brey)
 *  2000-09-24  added lagged_fibonacci generator (Matthias Troyer)
 *  2001-02-18  moved to individual header files
 */

#ifndef BOOST_RANDOM_HPP
#define BOOST_RANDOM_HPP

// generators
#include <boost/random/additive_combine.hpp>
#include <boost/random/discard_block.hpp>
#include <boost/random/independent_bits.hpp>
#include <boost/random/inversive_congruential.hpp>
#include <boost/random/lagged_fibonacci.hpp>
#include <boost/random/linear_congruential.hpp>
#include <boost/random/linear_feedback_shift.hpp>
#include <boost/random/mersenne_twister.hpp>
#include <boost/random/mixmax.hpp>
#include <boost/random/ranlux.hpp>
#include <boost/random/shuffle_order.hpp>
#include <boost/random/shuffle_output.hpp>
#include <boost/random/subtract_with_carry.hpp>
#include <boost/random/taus88.hpp>
#include <boost/random/xor_combine.hpp>

// misc
#include <boost/random/generate_canonical.hpp>
#include <boost/random/seed_seq.hpp>
#include <boost/random/random_number_generator.hpp>
#include <boost/random/variate_generator.hpp>

// distributions
#include <boost/random/bernoulli_distribution.hpp>
#include <boost/random/beta_distribution.hpp>
#include <boost/random/binomial_distribution.hpp>
#include <boost/random/cauchy_distribution.hpp>
#include <boost/random/chi_squared_distribution.hpp>
#include <boost/random/discrete_distribution.hpp>
#include <boost/random/exponential_distribution.hpp>
#include <boost/random/extreme_value_distribution.hpp>
#include <boost/random/fisher_f_distribution.hpp>
#include <boost/random/gamma_distribution.hpp>
#include <boost/random/geometric_distribution.hpp>
#include <boost/random/hyperexponential_distribution.hpp>
#include <boost/random/laplace_distribution.hpp>
#include <boost/random/lognormal_distribution.hpp>
#include <boost/random/negative_binomial_distribution.hpp>
#include <boost/random/non_central_chi_squared_distribution.hpp>
#include <boost/random/normal_distribution.hpp>
#include <boost/random/piecewise_constant_distribution.hpp>
#include <boost/random/piecewise_linear_distribution.hpp>
#include <boost/random/poisson_distribution.hpp>
#include <boost/random/student_t_distribution.hpp>
#include <boost/random/triangle_distribution.hpp>
#include <boost/random/uniform_01.hpp>
#include <boost/random/uniform_int.hpp>
#include <boost/random/uniform_int_distribution.hpp>
#include <boost/random/uniform_on_sphere.hpp>
#include <boost/random/uniform_real.hpp>
#include <boost/random/uniform_real_distribution.hpp>
#include <boost/random/uniform_smallint.hpp>
#include <boost/random/weibull_distribution.hpp>

#include <boost/random/generate_canonical.hpp>

#endif // BOOST_RANDOM_HPP

/* random.hpp
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
*/