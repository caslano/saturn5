/*
Copyright 2019 Glen Joseph Fernandes
(glenjofe@gmail.com)

Distributed under the Boost Software License, Version 1.0.
(http://www.boost.org/LICENSE_1_0.txt)
*/
#ifndef BOOST_CORE_NOINIT_ADAPTOR_HPP
#define BOOST_CORE_NOINIT_ADAPTOR_HPP

#include <boost/core/allocator_access.hpp>

namespace boost {

template<class A>
struct noinit_adaptor
    : A {
    template<class U>
    struct rebind {
        typedef noinit_adaptor<typename allocator_rebind<A, U>::type> other;
    };

    noinit_adaptor()
        : A() { }

#if !defined(BOOST_NO_CXX11_RVALUE_REFERENCES)
    template<class U>
    noinit_adaptor(U&& u) BOOST_NOEXCEPT
        : A(std::forward<U>(u)) { }
#else
    template<class U>
    noinit_adaptor(const U& u) BOOST_NOEXCEPT
        : A(u) { }

    template<class U>
    noinit_adaptor(U& u) BOOST_NOEXCEPT
        : A(u) { }
#endif

    template<class U>
    noinit_adaptor(const noinit_adaptor<U>& u) BOOST_NOEXCEPT
        : A(static_cast<const A&>(u)) { }

    template<class U>
    void construct(U* p) {
        ::new((void*)p) U;
    }

#if defined(BOOST_NO_CXX11_ALLOCATOR)
    template<class U, class V>
    void construct(U* p, const V& v) {
        ::new((void*)p) U(v);
    }
#endif

    template<class U>
    void destroy(U* p) {
        p->~U();
        (void)p;
    }
};

template<class T, class U>
inline bool
operator==(const noinit_adaptor<T>& lhs,
    const noinit_adaptor<U>& rhs) BOOST_NOEXCEPT
{
    return static_cast<const T&>(lhs) == static_cast<const U&>(rhs);
}

template<class T, class U>
inline bool
operator!=(const noinit_adaptor<T>& lhs,
    const noinit_adaptor<U>& rhs) BOOST_NOEXCEPT
{
    return !(lhs == rhs);
}

template<class A>
inline noinit_adaptor<A>
noinit_adapt(const A& a) BOOST_NOEXCEPT
{
    return noinit_adaptor<A>(a);
}

} /* boost */

#endif

/* noinit_adaptor.hpp
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
*/