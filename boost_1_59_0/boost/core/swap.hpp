// Copyright (C) 2007, 2008 Steven Watanabe, Joseph Gauterin, Niels Dekker
//
// Distributed under the Boost Software License, Version 1.0. (See
// accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
// For more information, see http://www.boost.org


#ifndef BOOST_CORE_SWAP_HPP
#define BOOST_CORE_SWAP_HPP

// Note: the implementation of this utility contains various workarounds:
// - swap_impl is put outside the boost namespace, to avoid infinite
// recursion (causing stack overflow) when swapping objects of a primitive
// type.
// - swap_impl has a using-directive, rather than a using-declaration,
// because some compilers (including MSVC 7.1, Borland 5.9.3, and
// Intel 8.1) don't do argument-dependent lookup when it has a
// using-declaration instead.
// - boost::swap has two template arguments, instead of one, to
// avoid ambiguity when swapping objects of a Boost type that does
// not have its own boost::swap overload.

#include <boost/core/enable_if.hpp>
#include <boost/config.hpp>
#if __cplusplus >= 201103L || defined(BOOST_DINKUMWARE_STDLIB)
#include <utility> // for std::swap (C++11)
#else
#include <algorithm> // for std::swap (C++98)
#endif
#include <cstddef> // for std::size_t

namespace boost_swap_impl
{
  // we can't use type_traits here

  template<class T> struct is_const { enum _vt { value = 0 }; };
  template<class T> struct is_const<T const> { enum _vt { value = 1 }; };

  template<class T>
  BOOST_GPU_ENABLED
  void swap_impl(T& left, T& right)
  {
    using namespace std;//use std::swap if argument dependent lookup fails
    swap(left,right);
  }

  template<class T, std::size_t N>
  BOOST_GPU_ENABLED
  void swap_impl(T (& left)[N], T (& right)[N])
  {
    for (std::size_t i = 0; i < N; ++i)
    {
      ::boost_swap_impl::swap_impl(left[i], right[i]);
    }
  }
}

namespace boost
{
  template<class T1, class T2>
  BOOST_GPU_ENABLED
  typename enable_if_c< !boost_swap_impl::is_const<T1>::value && !boost_swap_impl::is_const<T2>::value >::type
  swap(T1& left, T2& right)
  {
    ::boost_swap_impl::swap_impl(left, right);
  }
}

#endif

/* swap.hpp
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
*/