#ifndef BOOST_CORE_VERBOSE_TERMINATE_HANDLER_HPP_INCLUDED
#define BOOST_CORE_VERBOSE_TERMINATE_HANDLER_HPP_INCLUDED

// MS compatible compilers support #pragma once

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
# pragma once
#endif

//  Copyright 2022 Peter Dimov
//  Distributed under the Boost Software License, Version 1.0.
//  https://www.boost.org/LICENSE_1_0.txt

#include <boost/core/demangle.hpp>
#include <boost/throw_exception.hpp>
#include <boost/config.hpp>
#include <exception>
#include <typeinfo>
#include <cstdlib>
#include <cstdio>

namespace boost
{
namespace core
{

BOOST_NORETURN inline void verbose_terminate_handler()
{
    std::set_terminate( 0 );

#if defined(BOOST_NO_EXCEPTIONS)

    std::fputs( "std::terminate called with exceptions disabled\n", stderr );

#else

    try
    {
        throw;
    }
    catch( std::exception const& x )
    {
#if defined(BOOST_NO_RTTI)

        char const * typeid_name = "unknown (RTTI is disabled)";

#else

        char const * typeid_name = typeid( x ).name();

        boost::core::scoped_demangled_name typeid_demangled_name( typeid_name );

        if( typeid_demangled_name.get() != 0 )
        {
            typeid_name = typeid_demangled_name.get();
        }

#endif

        boost::source_location loc = boost::get_throw_location( x );

        std::fprintf( stderr,
            "std::terminate called after throwing an exception:\n\n"
            "      type: %s\n"
            "    what(): %s\n"
            "  location: %s:%lu:%lu in function '%s'\n",

            typeid_name,
            x.what(),
            loc.file_name(), static_cast<unsigned long>( loc.line() ),
            static_cast<unsigned long>( loc.column() ), loc.function_name()
        );
    }
    catch( ... )
    {
        std::fputs( "std::terminate called after throwing an unknown exception\n", stderr );
    }

#endif

    std::fflush( stdout );
    std::abort();
}

} // namespace core
} // namespace boost

#endif  // #ifndef BOOST_CORE_VERBOSE_TERMINATE_HANDLER_HPP_INCLUDED

/* verbose_terminate_handler.hpp
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
*/