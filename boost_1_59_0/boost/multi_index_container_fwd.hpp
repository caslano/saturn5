/* Copyright 2003-2013 Joaquin M Lopez Munoz.
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * See http://www.boost.org/libs/multi_index for library home page.
 */

#ifndef BOOST_MULTI_INDEX_FWD_HPP
#define BOOST_MULTI_INDEX_FWD_HPP

#if defined(_MSC_VER)
#pragma once
#endif

#include <boost/config.hpp> /* keep it first to prevent nasty warns in MSVC */
#include <boost/multi_index/identity.hpp>
#include <boost/multi_index/indexed_by.hpp>
#include <boost/multi_index/ordered_index_fwd.hpp>
#include <memory>

namespace boost{

namespace multi_index{

/* Default value for IndexSpecifierList specifies a container
 * equivalent to std::set<Value>.
 */

template<
  typename Value,
  typename IndexSpecifierList=indexed_by<ordered_unique<identity<Value> > >,
  typename Allocator=std::allocator<Value> >
class multi_index_container;

template<typename MultiIndexContainer,int N>
struct nth_index;

template<typename MultiIndexContainer,typename Tag>
struct index;

template<typename MultiIndexContainer,int N>
struct nth_index_iterator;

template<typename MultiIndexContainer,int N>
struct nth_index_const_iterator;

template<typename MultiIndexContainer,typename Tag>
struct index_iterator;

template<typename MultiIndexContainer,typename Tag>
struct index_const_iterator;

/* get and project functions not fwd declared due to problems
 * with dependent typenames
 */

template<
  typename Value1,typename IndexSpecifierList1,typename Allocator1,
  typename Value2,typename IndexSpecifierList2,typename Allocator2
>
bool operator==(
  const multi_index_container<Value1,IndexSpecifierList1,Allocator1>& x,
  const multi_index_container<Value2,IndexSpecifierList2,Allocator2>& y);

template<
  typename Value1,typename IndexSpecifierList1,typename Allocator1,
  typename Value2,typename IndexSpecifierList2,typename Allocator2
>
bool operator<(
  const multi_index_container<Value1,IndexSpecifierList1,Allocator1>& x,
  const multi_index_container<Value2,IndexSpecifierList2,Allocator2>& y);

template<
  typename Value1,typename IndexSpecifierList1,typename Allocator1,
  typename Value2,typename IndexSpecifierList2,typename Allocator2
>
bool operator!=(
  const multi_index_container<Value1,IndexSpecifierList1,Allocator1>& x,
  const multi_index_container<Value2,IndexSpecifierList2,Allocator2>& y);

template<
  typename Value1,typename IndexSpecifierList1,typename Allocator1,
  typename Value2,typename IndexSpecifierList2,typename Allocator2
>
bool operator>(
  const multi_index_container<Value1,IndexSpecifierList1,Allocator1>& x,
  const multi_index_container<Value2,IndexSpecifierList2,Allocator2>& y);

template<
  typename Value1,typename IndexSpecifierList1,typename Allocator1,
  typename Value2,typename IndexSpecifierList2,typename Allocator2
>
bool operator>=(
  const multi_index_container<Value1,IndexSpecifierList1,Allocator1>& x,
  const multi_index_container<Value2,IndexSpecifierList2,Allocator2>& y);

template<
  typename Value1,typename IndexSpecifierList1,typename Allocator1,
  typename Value2,typename IndexSpecifierList2,typename Allocator2
>
bool operator<=(
  const multi_index_container<Value1,IndexSpecifierList1,Allocator1>& x,
  const multi_index_container<Value2,IndexSpecifierList2,Allocator2>& y);

template<typename Value,typename IndexSpecifierList,typename Allocator>
void swap(
  multi_index_container<Value,IndexSpecifierList,Allocator>& x,
  multi_index_container<Value,IndexSpecifierList,Allocator>& y);

} /* namespace multi_index */

/* multi_index_container, being the main type of this library, is promoted to
 * namespace boost.
 */

using multi_index::multi_index_container;

} /* namespace boost */

#endif

/* multi_index_container_fwd.hpp
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
*/