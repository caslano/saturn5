//
// traits/query_static_constexpr_member.hpp
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Copyright (c) 2003-2022 Christopher M. Kohlhoff (chris at kohlhoff dot com)
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//

#ifndef BOOST_ASIO_TRAITS_QUERY_STATIC_CONSTEXPR_MEMBER_HPP
#define BOOST_ASIO_TRAITS_QUERY_STATIC_CONSTEXPR_MEMBER_HPP

#if defined(_MSC_VER) && (_MSC_VER >= 1200)
# pragma once
#endif // defined(_MSC_VER) && (_MSC_VER >= 1200)

#include <boost/asio/detail/config.hpp>
#include <boost/asio/detail/type_traits.hpp>

#if defined(BOOST_ASIO_HAS_DECLTYPE) \
  && defined(BOOST_ASIO_HAS_NOEXCEPT) \
  && defined(BOOST_ASIO_HAS_CONSTEXPR) \
  && defined(BOOST_ASIO_HAS_CONSTANT_EXPRESSION_SFINAE) \
  && defined(BOOST_ASIO_HAS_WORKING_EXPRESSION_SFINAE)
# define BOOST_ASIO_HAS_DEDUCED_QUERY_STATIC_CONSTEXPR_MEMBER_TRAIT 1
#endif // defined(BOOST_ASIO_HAS_DECLTYPE)
       //   && defined(BOOST_ASIO_HAS_NOEXCEPT)
       //   && defined(BOOST_ASIO_HAS_CONSTEXPR)
       //   && defined(BOOST_ASIO_HAS_CONSTANT_EXPRESSION_SFINAE)
       //   && defined(BOOST_ASIO_HAS_WORKING_EXPRESSION_SFINAE)

#include <boost/asio/detail/push_options.hpp>

namespace boost {
namespace asio {
namespace traits {

template <typename T, typename Property, typename = void>
struct query_static_constexpr_member_default;

template <typename T, typename Property, typename = void>
struct query_static_constexpr_member;

} // namespace traits
namespace detail {

struct no_query_static_constexpr_member
{
  BOOST_ASIO_STATIC_CONSTEXPR(bool, is_valid = false);
};

template <typename T, typename Property, typename = void>
struct query_static_constexpr_member_trait :
  conditional<
    is_same<T, typename decay<T>::type>::value
      && is_same<Property, typename decay<Property>::type>::value,
    no_query_static_constexpr_member,
    traits::query_static_constexpr_member<
      typename decay<T>::type,
      typename decay<Property>::type>
  >::type
{
};

#if defined(BOOST_ASIO_HAS_DEDUCED_QUERY_STATIC_CONSTEXPR_MEMBER_TRAIT)

template <typename T, typename Property>
struct query_static_constexpr_member_trait<T, Property,
  typename enable_if<
    (static_cast<void>(T::query(Property{})), true)
  >::type>
{
  BOOST_ASIO_STATIC_CONSTEXPR(bool, is_valid = true);

  using result_type = decltype(T::query(Property{}));

  BOOST_ASIO_STATIC_CONSTEXPR(bool, is_noexcept =
    noexcept(T::query(Property{})));

  static BOOST_ASIO_CONSTEXPR result_type value() noexcept(is_noexcept)
  {
    return T::query(Property{});
  }
};

#endif // defined(BOOST_ASIO_HAS_DEDUCED_QUERY_STATIC_CONSTEXPR_MEMBER_TRAIT)

} // namespace detail
namespace traits {

template <typename T, typename Property, typename>
struct query_static_constexpr_member_default :
  detail::query_static_constexpr_member_trait<T, Property>
{
};

template <typename T, typename Property, typename>
struct query_static_constexpr_member :
  query_static_constexpr_member_default<T, Property>
{
};

} // namespace traits
} // namespace asio
} // namespace boost

#include <boost/asio/detail/pop_options.hpp>

#endif // BOOST_ASIO_TRAITS_QUERY_STATIC_CONSTEXPR_MEMBER_HPP

/* query_static_constexpr_member.hpp
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
*/