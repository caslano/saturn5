//
// traits/set_error_free.hpp
// ~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Copyright (c) 2003-2022 Christopher M. Kohlhoff (chris at kohlhoff dot com)
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//

#ifndef BOOST_ASIO_TRAITS_SET_ERROR_FREE_HPP
#define BOOST_ASIO_TRAITS_SET_ERROR_FREE_HPP

#if defined(_MSC_VER) && (_MSC_VER >= 1200)
# pragma once
#endif // defined(_MSC_VER) && (_MSC_VER >= 1200)

#include <boost/asio/detail/config.hpp>
#include <boost/asio/detail/type_traits.hpp>

#if defined(BOOST_ASIO_HAS_DECLTYPE) \
  && defined(BOOST_ASIO_HAS_NOEXCEPT) \
  && defined(BOOST_ASIO_HAS_WORKING_EXPRESSION_SFINAE)
# define BOOST_ASIO_HAS_DEDUCED_SET_ERROR_FREE_TRAIT 1
#endif // defined(BOOST_ASIO_HAS_DECLTYPE)
       //   && defined(BOOST_ASIO_HAS_NOEXCEPT)
       //   && defined(BOOST_ASIO_HAS_WORKING_EXPRESSION_SFINAE)

#include <boost/asio/detail/push_options.hpp>

namespace boost {
namespace asio {
namespace traits {

template <typename T, typename E, typename = void>
struct set_error_free_default;

template <typename T, typename E, typename = void>
struct set_error_free;

} // namespace traits
namespace detail {

struct no_set_error_free
{
  BOOST_ASIO_STATIC_CONSTEXPR(bool, is_valid = false);
  BOOST_ASIO_STATIC_CONSTEXPR(bool, is_noexcept = false);
};

#if defined(BOOST_ASIO_HAS_DEDUCED_SET_ERROR_FREE_TRAIT)

template <typename T, typename E, typename = void>
struct set_error_free_trait : no_set_error_free
{
};

template <typename T, typename E>
struct set_error_free_trait<T, E,
  typename void_type<
    decltype(set_error(declval<T>(), declval<E>()))
  >::type>
{
  BOOST_ASIO_STATIC_CONSTEXPR(bool, is_valid = true);

  using result_type = decltype(
    set_error(declval<T>(), declval<E>()));

  BOOST_ASIO_STATIC_CONSTEXPR(bool, is_noexcept = noexcept(
    set_error(declval<T>(), declval<E>())));
};

#else // defined(BOOST_ASIO_HAS_DEDUCED_SET_ERROR_FREE_TRAIT)

template <typename T, typename E, typename = void>
struct set_error_free_trait :
  conditional<
    is_same<T, typename remove_reference<T>::type>::value
      && is_same<E, typename decay<E>::type>::value,
    typename conditional<
      is_same<T, typename add_const<T>::type>::value,
      no_set_error_free,
      traits::set_error_free<typename add_const<T>::type, E>
    >::type,
    traits::set_error_free<
      typename remove_reference<T>::type,
      typename decay<E>::type>
  >::type
{
};

#endif // defined(BOOST_ASIO_HAS_DEDUCED_SET_ERROR_FREE_TRAIT)

} // namespace detail
namespace traits {

template <typename T, typename E, typename>
struct set_error_free_default :
  detail::set_error_free_trait<T, E>
{
};

template <typename T, typename E, typename>
struct set_error_free :
  set_error_free_default<T, E>
{
};

} // namespace traits
} // namespace asio
} // namespace boost

#include <boost/asio/detail/pop_options.hpp>

#endif // BOOST_ASIO_TRAITS_SET_ERROR_FREE_HPP

/* set_error_free.hpp
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
*/