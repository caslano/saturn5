//
// traits/static_require_concept.hpp
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Copyright (c) 2003-2022 Christopher M. Kohlhoff (chris at kohlhoff dot com)
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//

#ifndef BOOST_ASIO_TRAITS_STATIC_REQUIRE_CONCEPT_HPP
#define BOOST_ASIO_TRAITS_STATIC_REQUIRE_CONCEPT_HPP

#if defined(_MSC_VER) && (_MSC_VER >= 1200)
# pragma once
#endif // defined(_MSC_VER) && (_MSC_VER >= 1200)

#include <boost/asio/detail/config.hpp>
#include <boost/asio/detail/type_traits.hpp>
#include <boost/asio/traits/static_query.hpp>

#if defined(BOOST_ASIO_HAS_DECLTYPE) \
  && defined(BOOST_ASIO_HAS_NOEXCEPT)
# define BOOST_ASIO_HAS_DEDUCED_STATIC_REQUIRE_CONCEPT_TRAIT 1
#endif // defined(BOOST_ASIO_HAS_DECLTYPE)
       //   && defined(BOOST_ASIO_HAS_NOEXCEPT)

#include <boost/asio/detail/push_options.hpp>

namespace boost {
namespace asio {
namespace traits {

template <typename T, typename Property, typename = void>
struct static_require_concept_default;

template <typename T, typename Property, typename = void>
struct static_require_concept;

} // namespace traits
namespace detail {

struct no_static_require_concept
{
  BOOST_ASIO_STATIC_CONSTEXPR(bool, is_valid = false);
};

template <typename T, typename Property, typename = void>
struct static_require_concept_trait :
  conditional<
    is_same<T, typename decay<T>::type>::value
      && is_same<Property, typename decay<Property>::type>::value,
    no_static_require_concept,
    traits::static_require_concept<
      typename decay<T>::type,
      typename decay<Property>::type>
  >::type
{
};

#if defined(BOOST_ASIO_HAS_DEDUCED_STATIC_REQUIRE_CONCEPT_TRAIT)

#if defined(BOOST_ASIO_HAS_WORKING_EXPRESSION_SFINAE)

template <typename T, typename Property>
struct static_require_concept_trait<T, Property,
  typename enable_if<
    decay<Property>::type::value() == traits::static_query<T, Property>::value()
  >::type>
{
  BOOST_ASIO_STATIC_CONSTEXPR(bool, is_valid = true);
};

#else // defined(BOOST_ASIO_HAS_WORKING_EXPRESSION_SFINAE)

false_type static_require_concept_test(...);

template <typename T, typename Property>
true_type static_require_concept_test(T*, Property*,
    typename enable_if<
      Property::value() == traits::static_query<T, Property>::value()
    >::type* = 0);

template <typename T, typename Property>
struct has_static_require_concept
{
  BOOST_ASIO_STATIC_CONSTEXPR(bool, value =
    decltype((static_require_concept_test)(
      static_cast<T*>(0), static_cast<Property*>(0)))::value);
};

template <typename T, typename Property>
struct static_require_concept_trait<T, Property,
  typename enable_if<
    has_static_require_concept<typename decay<T>::type,
      typename decay<Property>::type>::value
  >::type>
{
  BOOST_ASIO_STATIC_CONSTEXPR(bool, is_valid = true);
};

#endif // defined(BOOST_ASIO_HAS_WORKING_EXPRESSION_SFINAE)

#endif // defined(BOOST_ASIO_HAS_DEDUCED_STATIC_REQUIRE_CONCEPT_TRAIT)

} // namespace detail
namespace traits {

template <typename T, typename Property, typename>
struct static_require_concept_default :
  detail::static_require_concept_trait<T, Property>
{
};

template <typename T, typename Property, typename>
struct static_require_concept : static_require_concept_default<T, Property>
{
};

} // namespace traits
} // namespace asio
} // namespace boost

#include <boost/asio/detail/pop_options.hpp>

#endif // BOOST_ASIO_TRAITS_STATIC_REQUIRE_CONCEPT_HPP

/* static_require_concept.hpp
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
*/