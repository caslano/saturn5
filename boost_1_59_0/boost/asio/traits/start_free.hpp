//
// traits/start_free.hpp
// ~~~~~~~~~~~~~~~~~~~~~
//
// Copyright (c) 2003-2022 Christopher M. Kohlhoff (chris at kohlhoff dot com)
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//

#ifndef BOOST_ASIO_TRAITS_START_FREE_HPP
#define BOOST_ASIO_TRAITS_START_FREE_HPP

#if defined(_MSC_VER) && (_MSC_VER >= 1200)
# pragma once
#endif // defined(_MSC_VER) && (_MSC_VER >= 1200)

#include <boost/asio/detail/config.hpp>
#include <boost/asio/detail/type_traits.hpp>

#if defined(BOOST_ASIO_HAS_DECLTYPE) \
  && defined(BOOST_ASIO_HAS_NOEXCEPT) \
  && defined(BOOST_ASIO_HAS_WORKING_EXPRESSION_SFINAE)
# define BOOST_ASIO_HAS_DEDUCED_START_FREE_TRAIT 1
#endif // defined(BOOST_ASIO_HAS_DECLTYPE)
       //   && defined(BOOST_ASIO_HAS_NOEXCEPT)
       //   && defined(BOOST_ASIO_HAS_WORKING_EXPRESSION_SFINAE)

#include <boost/asio/detail/push_options.hpp>

namespace boost {
namespace asio {
namespace traits {

template <typename T, typename = void>
struct start_free_default;

template <typename T, typename = void>
struct start_free;

} // namespace traits
namespace detail {

struct no_start_free
{
  BOOST_ASIO_STATIC_CONSTEXPR(bool, is_valid = false);
  BOOST_ASIO_STATIC_CONSTEXPR(bool, is_noexcept = false);
};

#if defined(BOOST_ASIO_HAS_DEDUCED_START_FREE_TRAIT)

template <typename T, typename = void>
struct start_free_trait : no_start_free
{
};

template <typename T>
struct start_free_trait<T,
  typename void_type<
    decltype(start(declval<T>()))
  >::type>
{
  BOOST_ASIO_STATIC_CONSTEXPR(bool, is_valid = true);

  using result_type = decltype(start(declval<T>()));

  BOOST_ASIO_STATIC_CONSTEXPR(bool,
    is_noexcept = noexcept(start(declval<T>())));
};

#else // defined(BOOST_ASIO_HAS_DEDUCED_START_FREE_TRAIT)

template <typename T, typename = void>
struct start_free_trait :
  conditional<
    is_same<T, typename remove_reference<T>::type>::value,
    typename conditional<
      is_same<T, typename add_const<T>::type>::value,
      no_start_free,
      traits::start_free<typename add_const<T>::type>
    >::type,
    traits::start_free<typename remove_reference<T>::type>
  >::type
{
};

#endif // defined(BOOST_ASIO_HAS_DEDUCED_START_FREE_TRAIT)

} // namespace detail
namespace traits {

template <typename T, typename>
struct start_free_default :
  detail::start_free_trait<T>
{
};

template <typename T, typename>
struct start_free :
  start_free_default<T>
{
};

} // namespace traits
} // namespace asio
} // namespace boost

#include <boost/asio/detail/pop_options.hpp>

#endif // BOOST_ASIO_TRAITS_START_FREE_HPP

/* start_free.hpp
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
*/