//
// traits/require_free.hpp
// ~~~~~~~~~~~~~~~~~~~~~~~
//
// Copyright (c) 2003-2022 Christopher M. Kohlhoff (chris at kohlhoff dot com)
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//

#ifndef BOOST_ASIO_TRAITS_REQUIRE_FREE_HPP
#define BOOST_ASIO_TRAITS_REQUIRE_FREE_HPP

#if defined(_MSC_VER) && (_MSC_VER >= 1200)
# pragma once
#endif // defined(_MSC_VER) && (_MSC_VER >= 1200)

#include <boost/asio/detail/config.hpp>
#include <boost/asio/detail/type_traits.hpp>

#if defined(BOOST_ASIO_HAS_DECLTYPE) \
  && defined(BOOST_ASIO_HAS_NOEXCEPT) \
  && defined(BOOST_ASIO_HAS_WORKING_EXPRESSION_SFINAE)
# define BOOST_ASIO_HAS_DEDUCED_REQUIRE_FREE_TRAIT 1
#endif // defined(BOOST_ASIO_HAS_DECLTYPE)
       //   && defined(BOOST_ASIO_HAS_NOEXCEPT)
       //   && defined(BOOST_ASIO_HAS_WORKING_EXPRESSION_SFINAE)

#include <boost/asio/detail/push_options.hpp>

namespace boost {
namespace asio {
namespace traits {

template <typename T, typename Property, typename = void>
struct require_free_default;

template <typename T, typename Property, typename = void>
struct require_free;

} // namespace traits
namespace detail {

struct no_require_free
{
  BOOST_ASIO_STATIC_CONSTEXPR(bool, is_valid = false);
  BOOST_ASIO_STATIC_CONSTEXPR(bool, is_noexcept = false);
};

#if defined(BOOST_ASIO_HAS_DEDUCED_REQUIRE_FREE_TRAIT)

template <typename T, typename Property, typename = void>
struct require_free_trait : no_require_free
{
};

template <typename T, typename Property>
struct require_free_trait<T, Property,
  typename void_type<
    decltype(require(declval<T>(), declval<Property>()))
  >::type>
{
  BOOST_ASIO_STATIC_CONSTEXPR(bool, is_valid = true);

  using result_type = decltype(
    require(declval<T>(), declval<Property>()));

  BOOST_ASIO_STATIC_CONSTEXPR(bool, is_noexcept = noexcept(
    require(declval<T>(), declval<Property>())));
};

#else // defined(BOOST_ASIO_HAS_DEDUCED_REQUIRE_FREE_TRAIT)

template <typename T, typename Property, typename = void>
struct require_free_trait :
  conditional<
    is_same<T, typename decay<T>::type>::value
      && is_same<Property, typename decay<Property>::type>::value,
    no_require_free,
    traits::require_free<
      typename decay<T>::type,
      typename decay<Property>::type>
  >::type
{
};

#endif // defined(BOOST_ASIO_HAS_DEDUCED_REQUIRE_FREE_TRAIT)

} // namespace detail
namespace traits {

template <typename T, typename Property, typename>
struct require_free_default :
  detail::require_free_trait<T, Property>
{
};

template <typename T, typename Property, typename>
struct require_free :
  require_free_default<T, Property>
{
};

} // namespace traits
} // namespace asio
} // namespace boost

#include <boost/asio/detail/pop_options.hpp>

#endif // BOOST_ASIO_TRAITS_REQUIRE_FREE_HPP

/* require_free.hpp
9y8PlZzsstZrQ3uoOrvUIJ1Q5juJFdZ8iihO+si7q69k75ARHqft37J3W7sHlUfaK3vV68SHQZijUdt+Lf89r20W1uJ0fw6J/rcirzcR6oV1W4tv33P7bxQcr0kHHz6oMnhPe6G71kFsvtA95n+7576LOfREdzb+UF5p4Uf7FGAiX+gF7iBwgaBwsX+3Y+t9IPO/5vvcETTyw+WJywyVGjhY0gQIK/EmQEBy8WnkRicNHDQGbQoWNHox/8SQEyA8VZHE8MRHixocCqnAAoUKFDEO3QH2ugCyXHFBzBLBrlcxIKaFfqjeY8WIf8VaISJGbQUO+uyi+R6+Xa1DBv2m3DlRKo6d8Gcx87O6b8bvPxwcLSPlZSSy2SXkSALvPrMDKUfuonfqE+ZXjlp8dOfWFHyl5NQ9clyiLOxekg6ST2p1TjyYOOQyzwQYFbHDvGRgYhCid5qlJ6k2JtExHwWIh1OXeRdb/MhBE4TWIxkP8kVrHWdXPwg0tqvt/Zd6rA0MZnJgE/HqGjkbsY7o7KcG62Fh63Zvk5JrlL+2WRbME5VVarVP1SzX6vjw27U+UBSX0c0c3nJLkb+5m2tXIT+thsMfvJsi66gtxZnDv+0yyUcVJXYSnCgTR6ozA+aTZy7HmUI02PnhZCo4l9U3KcanlE2ua5/3M580cb+shzBn3S5ymHeAf26DVSP9fNc0ha3ly7sbLbHZ6ZNR5QJjRFeTO9BrOVodGej+NM0anMSwzGc5XOEHYzk2iTr9iU5sG5ld0rh2uhizWZsWWNQoBMzFIpUNuQQBUa2gdfv2+HvhDZGt/rxqu63aKCopbcUc7jmzNk0vEvwPg/hwA+It3sWFQWje5sQJvuG5gGzBZOm4gSCZ7OqD03aMwhkCNdMx3UQysUEAmRkF19G2BhDIylmZB1WvOaDh6SMFYIQrazkbvh1E8l6e1BU/Ln8OyujMKsBORXa6fRW5s9Up0kwNSaAfJk05Gb4Yy+5Tz78tZUg3ZY5ge3rYO/vXrdguLQlprY2upezhon5uloe6X+IQZ+O+RQqFn4N1WfZ66QRykeT+LSCJRpPYvi9agF14GCDgxYTsBsUkFdPeMhYJxKzOH/49DmFsTlcbwpHsiZawpouwu36AHlcDhTlUsSBXv6ydx4QzgrlUnfL7cvO9Y21a/VzzbUR+En9JZ3l2fUDl0xYhMoBfZPfKwrWhHJovsachawtRLI2kMIT/btvs+SCxdrCYF3vRhvt5B/1VhhqVZLAHKZ5b38YYTkj0lHomNquRbAuJDACDIM3RVo7jTap7rKoUnuvVlreZQAWXKUFPd4k+E0UF+Y4Qkxo20716jdnM+NrZX/KlhFZ01E9Pbg2jSfmVkRAItSoFi/JRfkyG8Cm4xMmMaEv40GHxYyh29hTaU0YVEnV+oEEJctYu3aQlqqktc5scswAtLlmMbBKv+JDLuUyqD+J8Tb119FpSycgjTtD02UpIFdElX5/AVbzNe5nDK9IMZ5GI6Evhw3RQtIjc//GXDRjkySZBNZvHSXUw4WXZZ5KcUGRwXV3DaVAABbvOTMMa8+BA8SRlmspavtD+iq3dBKnSmsMEtNSbUQ2EkIZ7rvrd6JZ9aVIF16LlWlArLrw728895NH5ZxxCT9PeBS8EKpu5vpwuSWpDVzQfOpoqa+XwFandpSdwW3Hiwg9V0w67mC5iPQtlav0oNcGFLSt2fjDd2RJPZjuNd5cpkeoJBV36WpImuHGHZ7ise/6mes5bTzcQmhk5qDhi8eZ/GG5TLyQNDbmtf6nRqqpWsSywR2BguKuMtLHB7tb75tex2eWFiwS+y/a6HLIF2WwI3xELX3c8p3POI/qJua00KqDeaY7N6SoiSXgFJKNCO5/A8DW99SVjFMz7lYKkLbktaM4IeZxdZRJl0qAXMl+Yg3UUOIz3JUzqgn8WjYIyCvZPw8wlMdQ7mwMx0toCC3t4IK4ahZxIuTU+fAQ+SXPte9X/eeYi3LJ2hKW3ye0zZcAcef6zaPneljOQ1hjUUV7Kdi7mqTpZzT21oR6mtn0uvDVX//ZNYBQnm+hV2DwMVmoV099S0BpLvBNy8KbNhdYpNCsEd2vDFJkVofW2T4WBmmVq8E+3zCBJvyyRnuj8pG3biIOSFu5nXO/bmATw+zEFVEEwQxudXB+vH5lGYJg63AQQXhWArc54zvAcVgBR1xt+RGWiqnlEcuMu8TrCoWi1YFNhNFotNcZq4pY6Wey46emssUUaVQ47uluhdY0I3v0Oc1UTM/5WlKJm/oqCvdJdrMiVoumJRtNYSucMVnMnZlxXjrCf9z45Gg4oZdxw0Sqjs8xtZXK2CYzvuijnEGhezDQzOZwqMrqdNCRDnDSke4Wtr4wLeVpLWo5SBKY+GgVKTaSxop/YZL+nt0QAl8h8Qh1EEZi9jhOEvQf6zpXqho7ZOjs5yrNvWlbt+k+sWBhLleDHgRC+owEKymE+Po35FuxIcguY2yH1wo6QL520v6XAAyzhJK+Tsko5em4hcktG/PsXTwUwLUtU9fwW/YCIXYC5Ct2ZXBcFPVge0lEu0o5b5k0kTMDGCZhcob/AIgFpmTAn32n/bZtjflwzQrwx5j6NyUU07AG6vsiUynjtS5WYhZ53FfzaOJk6uVPvWfa6AnOJOnuu/AKhyq8e5Z8HskYLLGKBKU5vk1j6wvZ8POVhcGckTPQFbPgb1r2Hjvteqs8Huvd+uoAa5lepNjmhpASgq7Vts1gSO6l5THjR/+oc3P/2hpxJ3gleYypA0CKZIIAeAgyTMDxZYGCKCGFgM7kRzTEShOeAm4QSdHTIR0AGiLQzAJ/MW4KKlo0iXDDC61h31hv6i4qKHt8555NTfp9UM/Oa497t8gkxQyRHFivlq0ym5gpU2EQCqBozLtRKbIAAiwrnJw+UqQiU9BfbUJA+zdGQrPOgq54hG7uNDw5xBNRkAeXIa+cCx7kpG3BkBchTaoQ/TK8hzyAg2PcGr0Dn+FUrUyZyZBHgBh5PgBJ2UiYqsQEqsQkCTJ1h0havJMuTTJTcCJyYzIk7qvsQNCQzz80HuaotUi4advIzdz7g77zE3X6Ku/8UdfWW3Qr58Y6DBZqAdBQ2SBvl/rrEw8LFCu4reMA8OnfP5t0f/JorNlmQ5JaLkR0qQvCAxZDtQ5IgxUYHDjU8ahRi4Qkr7eaXi40mQECwaKbkg40hOFp4kiAWRIof3mughEWHH/UKL9uw538XChiQSSKk86KBnI4DB6pzB/crWBK0+c4URAkW9GLKvhDjdrbDptt/OKNr9AK3//sga7cIcEcmc/jcLtGmtofIhdg6zVRs+JwIFjercM4itEXHgTctebCPNoeb9H2h+h6FSmFnjowY+5R9rPPkGTEt9XS/JHu7XY+ccaBZVN1Gm58+3V1EShaLrfOxnNrmBt4M6+L3dRWf75wpeDMLglkTcynX3J324sS5JTPXVPEgrjKjoH18TzniqVhZRLtOm8Qr3uwlXNoFrduskHXaHe62fFfUDGkOTWb/dujSH1nq7LQ2mLwqAN80e4ujzsO/N1Y6qzdjptp0DR5UJ+P1EVvmliNQ0XXVLnivTWrtCZrH1kJEE/Q1zVLAJc3Cs2Pb1rOXm62xsIw7j/VL8HTkNd35JBroIdaJ8W3xZi+ZN5XPpndEfvBcMMkIkpf/x/Ta/RH9hFNw/6DKYR9xoxoABiz508tGpT6d0AqgebV0AkjKhqMoRKYCvaL8TskN5yR2D9N99NH8TSgcEejViz42RVenkFheVyyKX12u5MtN2X7ym+uYNclA365Tb1lHqb9yDhmxnkm9Kn+HhO1F57z9ZKg98XG6o5qlcVuldIO4SGhnJOqoTuvUetaCTrnGo3CdMZ2vp3lj/Dz8hYbE63D6SCfLpZJhOWl++trEORK4gVlXhCauUovTfueUdOUPFityyG+/y3e3w/D+R8fhhC3xfjaY8MuPGyIyyPjIDxcyvL//n/XWy3gwYYUmkVdWFow7dFfyoMmT7ENEQxiA5AJGA8lUagREExrNB1gKF0x4wOARyhMM9SFDfEDV658SMEQxxOP74oYM/+QISLD8SmMcu7UB54JjQhnqZY1b0qGEOYnZrdLdgmOOWsetDRI8ZQc0apqd8Ll94lbj3GoXBAsretLJH2QHSrrvfueCV2l3EMt8c+W9NiCgycWJ01sqJWdVx/FVy/km0GdoTVtxUhQzG24ysE/Kv0jKbH/76cqLKN5yND6dv3A/U1pWdVHH5kWU8527rbf6RbZNCFluHTAelAawaobnd25XWc6HJxygujc/D5XZXVAkxOM18t0VWCEKsW76In05M9+5YNW3rL7nwbH9st5F7Cg7qp1qtGaHh8vYaE8g47DK5MjNimiEeG6njG4Gxi4BhwevWsfeuGWKZDs3XW/oo96xZJDW+vGGPievXfsS5XEb2QpuTsAuns3idZlDTs3DyyM4XmPIutVH4E0r7cA0zK7WIuNt0j8+yw5cESgj1iwdXd4xcaDOwobCdNa+cVz3+Qns9S4sRPkt6Kk0JBn7CkD9Mlmf7wOjJzh/amGbklBoxDBOekxZheqCRz8OkNXJhWMU0q9yTvPYTWh7lxj0zD88xdXyKUM7exXm9J6VR9eHCwNwqhwEyZlGKgdEfwSm6U2ydTp3PPzmzthr75a8VvQTWVFR85LFSqJ5yl7Yd6BFOPrq73z8puYTFmuRL52vO8x3wjRHVJNeQYtX4QWeFbQqT/Z9ZI+E7BZ8aX78oJmK1GHV7i3h0fB5BBq9qjjm7I6DxUD/MIPBLtQTDkgqhnuHa/91/xADW2c6TiE8TJT+SEb904+OD6Mn+i/dH6N0vOfx8u2iuoz6wCD/oYclW9zYTSHIy9mXxWbkZsAMzCx49bUiGpDvYL7FVevyYNTcnv6LO/gjQTfY4e5cn7pZh+5WjMXTY3DlxLU21zZwyrthOAoNmsLEZXBzNOkmwUaQ3mUWs48K+qZIBoz5BGGi8cMDCU1jXm51c//E4P8b0mH+Z1qLCTiP/wCGwEx9XGQONg20vJ7KZZuerqnhifjJY51vdChx6DQ3PWyhXtOnoUfHac6kjB3hG28c1K5R5/AraT0p16molR0/M3u9nvkbdfmVc9n004phlTOVxFjb+DYv+UaBcY7/wtZDoPfNVZ5h3d/Q8HuiwZfqkm8rmyohbOwl9RKw4ye11jIjxsTE9FQfYDHbkw4k3yV2toj7QL9Mek58cfuHNlGjsi/3y5k1yfeSjtVCOazYqWdH4HP1pLtWikUiPpTc4vYlbNo5VzvcYkP7AvHoW4A9sKfaKsWFmvNdd2DVmgepCID2DT11SV5DMvCxBTiljhQSATq9firpFEyAwBDiKskNso7xKJSBKBHU+4LluGbXwN/+UfopZn12QBaDfQOP/XhIQpvzxnFbGdmupMLhthH7vbt1P9GkBYt/wCaOW8fwh7BIk2v/qCQ2SrofETWavrnMe+f7EQ1LW+peub7XIvrHJo8QbUMhcST/iOVos2zxr4Vr841CXDvzfPwdmBvhdru9gVhWVvYKN39BoL65/8pzkB2fs4hxxdwrz5JLwdm3TT6i2+K773WXi6p2fwIdnwcEGi+oC8zdPZywHXl7BxdIMAgWDycINMjaAYLLA8w9qAuG65x4b8f3a7b35+b2Lnvvo+fnaKZjx7Wqq+o2uzbTW97X6tNN1RjTXbQ+cr/Ar9FIviQ1sbDmVpkp57EU3MOAn9MuMjJy9uxqTUQeiXBIFQjwvm/eoFov94h/eSODjfGzj2qaorT4xfxhpiFhqgU7Kh2sXMHRAoBimLTSZ3JDDnN9Xefn63H3rTKEnxuDMQ+wtc8OQgrr75F2L9PMWG9NLHSCQw3pG3VOR9HcE3GMZ0BX4+OE/hnZ4rMPFw0OO2QyC3P4O6/s3d1kzLIjxXTnfKqk7nhpcvhXXmhZxyf7z9fnbU+6a3Dgj/hG6vOU3gk27t5+sTYZAqf0j+3u86vbDzoUVSnZNXsntbK/jWR/Jnmxe7hIr4anaH3AtGVpoGTQV+gOH6XvYKfbXegG/xk0DlKA0C9BJUb7duMhZCm0jrT9E8ajBU2x9xAHx/GrbI2f3JoZ6Wh4itNsX37s/R8TC8aN/UUwWJ+cKSDArsK7GzG8fUxJUFN7vz+LtSyr9YzGooYJsy0AwMO8bu4bH4cz4sjKulcYvo0zJhbZPfHv63ePidWomLmV2J8pMMKfk7393d87HixP9vZfza0JxN+rvfw/evgh/wn1fuD4+P3fNR/QwT2VEXAcOEhX9W3/L5UQUnAmtrqhyMdk2KB6J1S6r6w1ZfYX5qMi7i8kidIyXpVay8UQqU9JR2BBOmDatX0Jly+e8Lrc07C5gOa62fdC+2xH0T0YsbMeoY9H+ZF8fAquY0H+8DmqN+p5UV/qAD+4CNVH1JGvkufbt6g/ih7iimzKKfcY895LUixNz80cDRW+3srgQlTPg259J5ysJSjbSbM0n5sQhuQp5UYxPpllnSrXYK15Glbcik3R8AzvOCgoU+GcVO6D7NI/xV0f4eTo/OjDOchvk0m5IaqOfFEa/RjVt5Pr3IFT918f35QgaLHofTWuffyyRMX1e/I7BgWHKuvkCwR+eEwG9PvyuNXQOQpHuCOrBpj8PlZ/7u+kukPhPsIHmqFbuscVdBhamhn3E5O9j7N6Ft6/jn21BF9yFpKQiLZfzvfvYydSPfwBxK+8m6N7/57nP68Lf2X6k98/aL7j/fe7o5K/We34hD/pq3MyZu8WQIBBJ3lPAFGmS3GAbP0KMwgeKu9NfvZf8j+kww962dbIivBw0tABaZ4v9MvPOpme7KyKu742nTt95Tuev4frL5pMf58vbpIFkQPp7EQTDyEnMH4xNsBr+NitCQ/JD6c8Wgq2I3c/SksvLMajEJfqPFXxEYCk2eU5+Q43sb3ULzb01DLl2N0Sa1K/JPmBAAoQrshpEqrkDTc7iTaYhqZAT38/c/MiVKVxT+m7T9bvAN2JNLFN9u689ZMYTw0UaGyh4zn7m4ONk7p2L8xdIlS/YWF2/4wB6MPDPwfGmz/leLoSgpqDq1vDi3f0aB9McJemehdvyFnKkA5Qjw5PTw/T93ZP0Pf2D5D1DdGNZdoaW/3ag6/FqYdF6qmpiamnNt2hpZGRgcWHu5CmqMhf1coLmjKCGqPLR/7gb/+QG39CQHbttD6Ha/6elBt/rKf/YktAX9jp99ugD1zvH6z80fHn3Ks6G1DMhq+Z/xPn3VGlpZZz9OLzZQtyDBZ0wYHpcWF5eyPNg3soxRq/9G7DDxNFYpv+DiNxg+ptGmjT8uZJZSjKh2tNxWhQIbO1lD80E4OzdVrkAcf1HNR3rt1NAhNUl+7d3O67klTfxV6kg1wAoTMFNc648OUujh9Z6BZSLEkcVmD0xdtBXKoUx8qix0keXMoQDCI+2AKno670atZa1HCGIUK3itFysLyTWWBWxOERvLR1mapgkrWMK782IL8R2zI/rTvdCHk5jAje6JVF12wuTBpp3+tCtmqk7qluUY62Xw09e/sfpHX5ZXu47PniygO/zhP1A3rEQ/6+gfmZadJ94y/52enBiUESk+tH2ogSTvdf9LqHQvfZ4fEHd9nqLcr2X33wsT7D
*/