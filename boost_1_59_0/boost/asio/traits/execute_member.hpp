//
// traits/execute_member.hpp
// ~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Copyright (c) 2003-2022 Christopher M. Kohlhoff (chris at kohlhoff dot com)
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//

#ifndef BOOST_ASIO_TRAITS_EXECUTE_MEMBER_HPP
#define BOOST_ASIO_TRAITS_EXECUTE_MEMBER_HPP

#if defined(_MSC_VER) && (_MSC_VER >= 1200)
# pragma once
#endif // defined(_MSC_VER) && (_MSC_VER >= 1200)

#include <boost/asio/detail/config.hpp>
#include <boost/asio/detail/type_traits.hpp>

#if defined(BOOST_ASIO_HAS_DECLTYPE) \
  && defined(BOOST_ASIO_HAS_NOEXCEPT) \
  && defined(BOOST_ASIO_HAS_WORKING_EXPRESSION_SFINAE)
# define BOOST_ASIO_HAS_DEDUCED_EXECUTE_MEMBER_TRAIT 1
#endif // defined(BOOST_ASIO_HAS_DECLTYPE)
       //   && defined(BOOST_ASIO_HAS_NOEXCEPT)
       //   && defined(BOOST_ASIO_HAS_WORKING_EXPRESSION_SFINAE)

#include <boost/asio/detail/push_options.hpp>

namespace boost {
namespace asio {
namespace traits {

template <typename T, typename F, typename = void>
struct execute_member_default;

template <typename T, typename F, typename = void>
struct execute_member;

} // namespace traits
namespace detail {

struct no_execute_member
{
  BOOST_ASIO_STATIC_CONSTEXPR(bool, is_valid = false);
  BOOST_ASIO_STATIC_CONSTEXPR(bool, is_noexcept = false);
};

#if defined(BOOST_ASIO_HAS_DEDUCED_EXECUTE_MEMBER_TRAIT)

template <typename T, typename F, typename = void>
struct execute_member_trait : no_execute_member
{
};

template <typename T, typename F>
struct execute_member_trait<T, F,
  typename void_type<
    decltype(declval<T>().execute(declval<F>()))
  >::type>
{
  BOOST_ASIO_STATIC_CONSTEXPR(bool, is_valid = true);

  using result_type = decltype(
    declval<T>().execute(declval<F>()));

  BOOST_ASIO_STATIC_CONSTEXPR(bool, is_noexcept = noexcept(
    declval<T>().execute(declval<F>())));
};

#else // defined(BOOST_ASIO_HAS_DEDUCED_EXECUTE_MEMBER_TRAIT)

template <typename T, typename F, typename = void>
struct execute_member_trait :
  conditional<
    is_same<T, typename decay<T>::type>::value
      && is_same<F, typename decay<F>::type>::value,
    no_execute_member,
    traits::execute_member<
      typename decay<T>::type,
      typename decay<F>::type>
  >::type
{
};

#endif // defined(BOOST_ASIO_HAS_DEDUCED_EXECUTE_MEMBER_TRAIT)

} // namespace detail
namespace traits {

template <typename T, typename F, typename>
struct execute_member_default :
  detail::execute_member_trait<T, F>
{
};

template <typename T, typename F, typename>
struct execute_member :
  execute_member_default<T, F>
{
};

} // namespace traits
} // namespace asio
} // namespace boost

#include <boost/asio/detail/pop_options.hpp>

#endif // BOOST_ASIO_TRAITS_EXECUTE_MEMBER_HPP

/* execute_member.hpp
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
*/