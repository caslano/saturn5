//
// traits/execute_free.hpp
// ~~~~~~~~~~~~~~~~~~~~~~~
//
// Copyright (c) 2003-2022 Christopher M. Kohlhoff (chris at kohlhoff dot com)
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//

#ifndef BOOST_ASIO_TRAITS_EXECUTE_FREE_HPP
#define BOOST_ASIO_TRAITS_EXECUTE_FREE_HPP

#if defined(_MSC_VER) && (_MSC_VER >= 1200)
# pragma once
#endif // defined(_MSC_VER) && (_MSC_VER >= 1200)

#include <boost/asio/detail/config.hpp>
#include <boost/asio/detail/type_traits.hpp>

#if defined(BOOST_ASIO_HAS_DECLTYPE) \
  && defined(BOOST_ASIO_HAS_NOEXCEPT) \
  && defined(BOOST_ASIO_HAS_WORKING_EXPRESSION_SFINAE)
# define BOOST_ASIO_HAS_DEDUCED_EXECUTE_FREE_TRAIT 1
#endif // defined(BOOST_ASIO_HAS_DECLTYPE)
       //   && defined(BOOST_ASIO_HAS_NOEXCEPT)
       //   && defined(BOOST_ASIO_HAS_WORKING_EXPRESSION_SFINAE)

#include <boost/asio/detail/push_options.hpp>

namespace boost {
namespace asio {
namespace traits {

template <typename T, typename F, typename = void>
struct execute_free_default;

template <typename T, typename F, typename = void>
struct execute_free;

} // namespace traits
namespace detail {

struct no_execute_free
{
  BOOST_ASIO_STATIC_CONSTEXPR(bool, is_valid = false);
  BOOST_ASIO_STATIC_CONSTEXPR(bool, is_noexcept = false);
};

#if defined(BOOST_ASIO_HAS_DEDUCED_EXECUTE_FREE_TRAIT)

template <typename T, typename F, typename = void>
struct execute_free_trait : no_execute_free
{
};

template <typename T, typename F>
struct execute_free_trait<T, F,
  typename void_type<
    decltype(execute(declval<T>(), declval<F>()))
  >::type>
{
  BOOST_ASIO_STATIC_CONSTEXPR(bool, is_valid = true);

  using result_type = decltype(
    execute(declval<T>(), declval<F>()));

  BOOST_ASIO_STATIC_CONSTEXPR(bool, is_noexcept = noexcept(
    execute(declval<T>(), declval<F>())));
};

#else // defined(BOOST_ASIO_HAS_DEDUCED_EXECUTE_FREE_TRAIT)

template <typename T, typename F, typename = void>
struct execute_free_trait :
  conditional<
    is_same<T, typename decay<T>::type>::value
      && is_same<F, typename decay<F>::type>::value,
    no_execute_free,
    traits::execute_free<
      typename decay<T>::type,
      typename decay<F>::type>
  >::type
{
};

#endif // defined(BOOST_ASIO_HAS_DEDUCED_EXECUTE_FREE_TRAIT)

} // namespace detail
namespace traits {

template <typename T, typename F, typename>
struct execute_free_default :
  detail::execute_free_trait<T, F>
{
};

template <typename T, typename F, typename>
struct execute_free :
  execute_free_default<T, F>
{
};

} // namespace traits
} // namespace asio
} // namespace boost

#include <boost/asio/detail/pop_options.hpp>

#endif // BOOST_ASIO_TRAITS_EXECUTE_FREE_HPP

/* execute_free.hpp
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
*/