//
// traits/require_member.hpp
// ~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Copyright (c) 2003-2022 Christopher M. Kohlhoff (chris at kohlhoff dot com)
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//

#ifndef BOOST_ASIO_TRAITS_REQUIRE_MEMBER_HPP
#define BOOST_ASIO_TRAITS_REQUIRE_MEMBER_HPP

#if defined(_MSC_VER) && (_MSC_VER >= 1200)
# pragma once
#endif // defined(_MSC_VER) && (_MSC_VER >= 1200)

#include <boost/asio/detail/config.hpp>
#include <boost/asio/detail/type_traits.hpp>

#if defined(BOOST_ASIO_HAS_DECLTYPE) \
  && defined(BOOST_ASIO_HAS_NOEXCEPT) \
  && defined(BOOST_ASIO_HAS_WORKING_EXPRESSION_SFINAE)
# define BOOST_ASIO_HAS_DEDUCED_REQUIRE_MEMBER_TRAIT 1
#endif // defined(BOOST_ASIO_HAS_DECLTYPE)
       //   && defined(BOOST_ASIO_HAS_NOEXCEPT)
       //   && defined(BOOST_ASIO_HAS_WORKING_EXPRESSION_SFINAE)

#include <boost/asio/detail/push_options.hpp>

namespace boost {
namespace asio {
namespace traits {

template <typename T, typename Property, typename = void>
struct require_member_default;

template <typename T, typename Property, typename = void>
struct require_member;

} // namespace traits
namespace detail {

struct no_require_member
{
  BOOST_ASIO_STATIC_CONSTEXPR(bool, is_valid = false);
  BOOST_ASIO_STATIC_CONSTEXPR(bool, is_noexcept = false);
};

#if defined(BOOST_ASIO_HAS_DEDUCED_REQUIRE_MEMBER_TRAIT)

template <typename T, typename Property, typename = void>
struct require_member_trait : no_require_member
{
};

template <typename T, typename Property>
struct require_member_trait<T, Property,
  typename void_type<
    decltype(declval<T>().require(declval<Property>()))
  >::type>
{
  BOOST_ASIO_STATIC_CONSTEXPR(bool, is_valid = true);

  using result_type = decltype(
    declval<T>().require(declval<Property>()));

  BOOST_ASIO_STATIC_CONSTEXPR(bool, is_noexcept = noexcept(
    declval<T>().require(declval<Property>())));
};

#else // defined(BOOST_ASIO_HAS_DEDUCED_REQUIRE_MEMBER_TRAIT)

template <typename T, typename Property, typename = void>
struct require_member_trait :
  conditional<
    is_same<T, typename decay<T>::type>::value
      && is_same<Property, typename decay<Property>::type>::value,
    no_require_member,
    traits::require_member<
      typename decay<T>::type,
      typename decay<Property>::type>
  >::type
{
};

#endif // defined(BOOST_ASIO_HAS_DEDUCED_REQUIRE_MEMBER_TRAIT)

} // namespace detail
namespace traits {

template <typename T, typename Property, typename>
struct require_member_default :
  detail::require_member_trait<T, Property>
{
};

template <typename T, typename Property, typename>
struct require_member :
  require_member_default<T, Property>
{
};

} // namespace traits
} // namespace asio
} // namespace boost

#include <boost/asio/detail/pop_options.hpp>

#endif // BOOST_ASIO_TRAITS_REQUIRE_MEMBER_HPP

/* require_member.hpp
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
*/