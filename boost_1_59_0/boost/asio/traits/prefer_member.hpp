//
// traits/prefer_member.hpp
// ~~~~~~~~~~~~~~~~~~~~~~~~
//
// Copyright (c) 2003-2022 Christopher M. Kohlhoff (chris at kohlhoff dot com)
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//

#ifndef BOOST_ASIO_TRAITS_PREFER_MEMBER_HPP
#define BOOST_ASIO_TRAITS_PREFER_MEMBER_HPP

#if defined(_MSC_VER) && (_MSC_VER >= 1200)
# pragma once
#endif // defined(_MSC_VER) && (_MSC_VER >= 1200)

#include <boost/asio/detail/config.hpp>
#include <boost/asio/detail/type_traits.hpp>

#if defined(BOOST_ASIO_HAS_DECLTYPE) \
  && defined(BOOST_ASIO_HAS_NOEXCEPT) \
  && defined(BOOST_ASIO_HAS_WORKING_EXPRESSION_SFINAE)
# define BOOST_ASIO_HAS_DEDUCED_PREFER_MEMBER_TRAIT 1
#endif // defined(BOOST_ASIO_HAS_DECLTYPE)
       //   && defined(BOOST_ASIO_HAS_NOEXCEPT)
       //   && defined(BOOST_ASIO_HAS_WORKING_EXPRESSION_SFINAE)

#include <boost/asio/detail/push_options.hpp>

namespace boost {
namespace asio {
namespace traits {

template <typename T, typename Property, typename = void>
struct prefer_member_default;

template <typename T, typename Property, typename = void>
struct prefer_member;

} // namespace traits
namespace detail {

struct no_prefer_member
{
  BOOST_ASIO_STATIC_CONSTEXPR(bool, is_valid = false);
  BOOST_ASIO_STATIC_CONSTEXPR(bool, is_noexcept = false);
};

#if defined(BOOST_ASIO_HAS_DEDUCED_PREFER_MEMBER_TRAIT)

template <typename T, typename Property, typename = void>
struct prefer_member_trait : no_prefer_member
{
};

template <typename T, typename Property>
struct prefer_member_trait<T, Property,
  typename void_type<
    decltype(declval<T>().prefer(declval<Property>()))
  >::type>
{
  BOOST_ASIO_STATIC_CONSTEXPR(bool, is_valid = true);

  using result_type = decltype(
    declval<T>().prefer(declval<Property>()));

  BOOST_ASIO_STATIC_CONSTEXPR(bool, is_noexcept = noexcept(
    declval<T>().prefer(declval<Property>())));
};

#else // defined(BOOST_ASIO_HAS_DEDUCED_PREFER_MEMBER_TRAIT)

template <typename T, typename Property, typename = void>
struct prefer_member_trait :
  conditional<
    is_same<T, typename decay<T>::type>::value
      && is_same<Property, typename decay<Property>::type>::value,
    no_prefer_member,
    traits::prefer_member<
      typename decay<T>::type,
      typename decay<Property>::type>
  >::type
{
};

#endif // defined(BOOST_ASIO_HAS_DEDUCED_PREFER_MEMBER_TRAIT)

} // namespace detail
namespace traits {

template <typename T, typename Property, typename>
struct prefer_member_default :
  detail::prefer_member_trait<T, Property>
{
};

template <typename T, typename Property, typename>
struct prefer_member :
  prefer_member_default<T, Property>
{
};

} // namespace traits
} // namespace asio
} // namespace boost

#include <boost/asio/detail/pop_options.hpp>

#endif // BOOST_ASIO_TRAITS_PREFER_MEMBER_HPP

/* prefer_member.hpp
sf6sXhhWAfkMAnW2kjZ5vcLpQAZh88GgpA/zY1/2EOPBdq6vP5bVUvYI2Rmyza9Shimm1XHZXFvr1T+KzQGZsGVGqaV1N35f6omfsXalUTn2X7MC34dwXlUdhw0gcCMEulr3Q3WtSEqL0NM6J1neYCoeUHDoZ673eGVqa4m5MCRkjnREsDYqGLPmXduldTDvJaE2lUNjhosHbsqqNrXvBn6AK9Z2NsFf4gEh8nKA0XjAQ0YGiUDGVcgoJ6enO7wnwnwx5t746uEPRf5MZuNrjClVgj+D9IBizxYUp8vxjxTezqQ+E/U1uI3xswMBIU+FUYDix/KaXZh8DkkGiR06MbZFQxE6szsVEr396/TByRwcAAhFUKrhxA08rG4N+s+xTFua/FytqBqKEmm0hAJFVEqed4cRQjXVRl294esj/LrhmhicwWijOCF5NrFujMH5DipW4MT3HQHCyBCAqy4TsMUCCDLOokN+aimK6fWJF7uoJ0oOw7IqHRAmgkFnNxsvZu4ife6vj7lDPHUcexLI0v8Qr7zOVfXb7VWAC1CJdFneW8kfsE27H7qr32MuPAuDInd3nibffQOf8R/uuITY2PYS+cx4N/WLomkQjeedqHIoKko0lq+O3KDLNeFIFCAOMEyOUwIoBdGoByOZ2/DL3cr6qbzFk1jpowJJ7GAf7D8HLPHGSRVTyNePmowQdj81rlIMGoPdyHlID4X0Anby+zfscedKjuvxZWT0C+hhdFzKsg24r+KEjMuUW2N7nCterjQKP8d2kwmOkwfXxrdf44QSIts4bfUW4ky3DwAlFb0uivV8hGxtqGTXysdS2DR1HOqTMmBmJrintTYkPCpE/wpbdLfmCSQGCtebwPEiUCAYm246qMN4wyeaFZaoHit3yyfMGCq4TcyIeYddofdDK0/iFj0bGAIffPeG5XpFpGgI5Mn8PGyV7joa9DbKcQCeYkldYUjHfeFO5Awmg51y9DkiaKlqjDFEmjmdtJIoHFFtkq/oDLS05RQrEHX+QYEAHKkBLDEYDN4DBKO7iMaaJqrqpnfZpXi8OJ+qHX83MxK8aTVp45ydhZZgC28R047xdawTO0JIYUuF1uMmyfwWcZQcVVKFbnu/eCGlBdjknuxS4JocZq+3TYhkmxGyHlBSJc/gXsHi6kcEpHFqOIm/fbQT2SXnNvNuvbB+mpFUPLcypS1svhCfQLtP9WiPqNGcynR18iPh03N7jiqQJ59+0MowbHlGIxVBIYiqgOARxbdjctyoAuLVLZbWO484GyPsGoUBLJTQOHEaFXEt0hGpa81e9A2PZAa0cQz9qyiKQo2pdGF2ipqZQ0edmHhc6MwJdmvexpxfRjaBf8aztD5Kuk90pnn8peqSHrodwiYQHOP3/u6dKXyPLuV57B/ELlW3EDmSvl5Y3v/vXtTBtpONIYgNojS599l6QHUapAyItmXOPNLR1ucpn5mKMFjZoSIV+jR3XVPbxWoEecZU11/i5nAeKiC2o+DZ6HANWByjzwD1n2v+BXoXoW+YNcv4CyJyDBa55sobYnxlaR8YzRlxNcOAUsVD0fO16GBsgcsESh+l3ejasdvRHicjGvd8r8c/0oHS0w756DxgDRf74FdzyHCFZOhqXHCmNTpg2vjIlczNjUXtIowtchdIsyEvjSeAXTpL7zNFpFScKViP8yVcg7Ju1fE5vcE5KGAcByXjVQ/QVsXlaq30VwfpdrmBkxuxREsFHxX+69L9o9E8EGkjZUQtYk6eMBYtknob2G0PSCDXZEC9sZyBjx2vac0pvD+t0YFR+cXuasKoscvcxidsQOVVuaYcSn2Whq9ItJiB6XZtIGTAgX/C0+LMcrnFFxviyV0OqXDyRy+BZRh8fPaQdUt0dnITY6wiX/jDqlKUGDQdIa5/5hne0u0RytUWmKV4weO92NLRJ31s+Jq82r4yZVnN3Jiw6bUas5VHSkPNXzfg1zXB94gjalqY1oal8tkScTZlSKh2ep7kHPa2cqv1Ij33BzaPVPk72WayjLm4lVkvoPN+vlcLiLMOxZGJvlJ90hPggBlgHtNOT62Kn+aWiVAg/+DKEhFgQiRLCQ5QFk0VVuzOoAxY0OaL1hsSnH8egyMQA8bYZNBcG7DnnzO996fp6En26fsC0LK24yAQN5G97XjSAAMyyEOFam0pQDDTGHGbO/3rL+q/0YjPtMfN0vUL4dCyfs/kN0JVdrkEc0IgqkR0lcq8rPuRLjAipNhrDN6Jh2Qp/MNfOyr8KC92SBGKPPfH7u0DZt4e92VNeL913gwDMM1yM+aEsiImGF1N4IFty/WqfWTDs2zRsAVReH9cVZ8s/Hyh2qBHdLIMg32sdsXpoMosqFcAWT71w7BNCFtbdSG4oJdCDEZW8JNTscjorKhaVTudxwWRsmLlG1PzNNE9ndJNZKIXEAAHPgA0CZbkLrOUiOmEKqGU0srdDa/+gj5RnECEUUsZX50DBUaBwxVn2dAwlhGNUx+kgygiJXkSGAibgB5ETeGVSB8aQV30M8gCnztXO9fGbPVuV5RmMPc6BB5nulAVXu7pJsAUZ/xMK6gghR5BKDHlrxtHJSd12/AVoP0Kxyr/Tnb1qezaA3XbLvzTmmu2yN7F9GtISQwrG5yOhtXBNqCb9GTNJWeHzTrYBCvUbdM1bjRciI7mX7j5+wsIwgLgIWCbo+60gOJDHv9UXGvRUtzcj4GHShIGBbuBJkC9vUNbHGx2goKXUoE8EuqDKUJXnC3KML4RZ2yEonhyi1fjVdii3qFmIg9wPYg/t8PHnjfRaEj8eDGNztijgIgwiILfRaIJAoMUEL0RtIoCR/GYHKiroS9DiB9wzBR88Rfx2lsfCl2X/j8I4I8jrNM7/l7fbJPAA4ig4DBlgo4vdwQr+m3bQvGWf4wM645LlFNlfl6W3zuDs0ROBsF5giPQAEakrU8K/EtQGmn7ilat++qbAlXfH7VLod4U9k/vkP6Mp42Fvmn7G0zb0qMuW9IS2WTbupW4NL/LZ5H347G+g+kVZPUbTJ65C2gG5fSqLJ6rigDyyIe6S6HsauWtCwBoWa0u9ivHnxoL0hCwi5M7vSNBhfDOmcCAK3+IiawiYLg8SpEsPxW9slh1sv9L7Rfo2Ec+kFpbIhtURMdjqCyOBQUyRY/FricnNHT2ukOKsD7A7lnawsRd0RQ2fLppx8cDIsMmWhAZ4xxcc1L1JlltQt50TDhkYjRuAMy9yJgVqLp11+wf7vI+emu1OqZ0H58m7y99Ltr3bv4HXLZBg1UdA7dTyX7eiI2rGiCTB6qxletyP8pxMCuq0FwHC4+LqN87SGHftztpLw/N3rhOaT5iRkytvxdeJ48nHroOzB2HLypbW6tRAKOtl2dVzud9BagQ6BRl0nAPMHMeh2ZYjnTbwzoA03onMRWdjTauaBfH3h2ixkkEkC8qYgBHwjtnd/NHDta9cAnuid+TN8SQbi7PTRWXnrKzexR0cAFMUkn5lMvWCVih1Q8gx2nVKvcLJvLVGkaaz9ziRsuqOHRpKquJKRE1um2ED309w9BfFlqraFsPrGzeY4KvXDaTitgUpBEEy5Sa9hinMN+G3Kh5b7jKqSCbpNaIYLVJVjyPX3NDnsLGmdWAvVy0drRxNHZA8Jn+HeQsfbfvYKC2SR/8myltDQeMhxXK6HQMgsMbZ7NHn1vlC/4Oo3WKA5HNVoCc8yjLEv7JgbP1hLMCzbndIV4MKtU52vtuUXy4zI0TcWv7poeNss2PASxTN7vaxbeKfkmLJCxBozr8JcxHMD9VyiROkidstF/Ke2fgeNaCGBLecX5OwCK6mWiOCAw6BMpZhOU62O+sxYIBs59c4RrsjaA/6w9W2qOQADZsmGvaMZPB3PL2gkDooXAYsz0otM5y7K2GsqBEt0YdYKotmBMI5gl4rxAagVBT863kdvrNxEfJH/5MUxfw9cpuNjg1Wz0TDTu6OECjJG82yjMyezaA1FVQjUQatgfU4UW1tSEzlOtaRbEI93mlbVefN2ts+Ne7/hkNO9Pu9rgLvgw6cf65eVGicIwRjJOF+oFogcbTVQn9QCTxuLMAs62c6EEhDF1y0RIDyXDGhC5/Bnafr72yU/BDayErJp0hqAwdq4ClT2Y09y+S2AwqtYgPCX5CSIZu4d3NPMNHe6vtJdFeXPgq6XFybXDkQet9QvD1238LPRNX4kAJJCOirZL5rZpzwf/W9SJHNtL7pqFnkXBAL0WBe5LgRXxDBPTCLOv2TVmlMqJuFVo6fUu62pKoGtzQs4BfoGdKrDgAdubgg9oldyIACyz002YDAqDXVouPslFDI5gE1MGZjjihdZWXrotWo/pirOamQL9JDudtxYjktZnjQOKsjseg5PphT8aoxAJT2oHbHfPRsbCwbNIw3zMETMVj7CNmjhyaYjenTPihXGXf0c6gy5Ea5c++GaKGNg16+AcBwJSBYDkLdYTnUH1M7lrTBoYdHsV9/fLkND5BYrls/WLK8clsuyLi42pb1EAMxiGoHuVrXfBsCuobVyS/ULEEWgILxWdggJFjIgBCgjSdIEKAolRBxeWEpLsC9wguWnRC8DFWsrdiC8AyqFBR6dvjRcDiuA6ZsMO75z5H4VLCMKMAQgDlLfWKwJ+5bMP2KOsYKHqUBCXXV1e9OO2YLh8PuULWHvvhHx34HOx6he0Llk4OfLQGDfb5qhCrDFJZqzfAKYfIMo/v57mQ7dd3gXstxQivss+IgOWDk9+LYRhBgFOwK0nmL5olSvleSfG5xZXdejGRMZaAqhsl7yOTw94DhxneMQYb5so9zMXVvminV7j7DOJ70mpoDrs3K0I7ExIAfZZgAZXEAfWzc+GF6E7nIbdUslAcQbn1iXR45Nz3/AqcPFBaNc96kPPt/BAKobYszSBwZRjH2W8XQ2f54cAbSbwHBweJutgckfQQiFQmHmjg0gfiI/nxdImWxrFalK5iMk2W1Sn6WeI4VOT9vBl6YeiU9yliN3LXuimcqCoFkqxeqBT1kaoAWZKk3i+8tD8EMCkw9IKIs5BJhpsdkQOHAzd08SuLKv4oBjFK8R9Yp2reAsPItCmHIJ6nuztdNFQGNtkbOzhiEW9BAQK/347m8s4wCsqt9O5i4oAe3HD2NVHqQWx+MIYi6RIx9kgr5sEMChJprwTC52hUQpmaMere+vk3TQTQOQEQ6cISYzfUnWvDkZGtr7t1uA5gpYkvm5BpfK4lTf9D8yoGWIB2GzGQAwOD/Xj01zKjmCkiKTFl9QZFbRJH2cLF9YBbVvYnWRzmuT2pR1DvUX4yc5LFEvbFoX95fr2kIxZshPZWRXL5Qq7mB8Xscc4TsOj2gcYQ0dxkKNrBdMI9WuaCQkfIiZr4/Ezvpn8NCHqIO6U73ced/8tw3wBNhla5Uy1U1EcMDh6KTgCmuZmmz4nFJUN9Q6SE5OfR2XmwDk4IAhYm2WDe4g/nzbGEfARneTfoooY4MjBi+xIgaNWOu2q6dN80gn0KZ/0aHeGozmqjS9wvCXEAGCvCuk3OU7J7xSjHxQ8qcCcIMs8O9EcE3X3TMg0xuKVlr4goOiyrTuEedC+80sXsxgI4OoyvHDW8vPBUxKZxuWnovLCGLZUZJZWxfkuzT1DdUyFmqVhOTg7guvZ6eZlUtlWxBWOK/tmLXN1/GLIm9utBSE+3e2M3f6Hiqy4N7pnmdpiCml53w1hZTY08YcIJtoww7nuO+t3ZL/5uybvRvcPeGm5j7GdwttYfwZAbEGsM81gEjlwZoUlM3hmWgDPzeHk+ynMH8nmS6345FAruRBjjxR/Iq+5Av/faf9TKGx4aRrax7p4V7GGP7m2FlvUyo2HpzDy5bofOq2lxQHUWET42q7hfQnyTgKcwQEQYot4YMehJa8BKMYwS6142mCzbEEA23ECssib0NsGXPyW0rAXFb8kVlJEBmGmmnszuXqynCDlmhl4dCGXcwLjGtsHl8G6nl6C2XL9u9mi+Z80U/8tJuXeQblydgIQEJW3omvAuJBgK32hDtAwSw4URwtMEVFvTtVWyjQ6oV6Y4Mxzk/i6/P8+TG5GI5da2YMl/cu2zZZ2Wmwi9XMtcy3oPrNro/OamD15ozyXfsla8S0p3+uMzjhsVQXcHW/o0hFrR1mrC+rkHM8p+OM76A/y7F8rpPDoVhoo+yyodHGQhvFJxxGW88U0g/KdbfHVR46CVI7VfMIUjOMDe9KyqyUW3K2mhNMaUQlKTPORTUZxYlMq4K1wJkaS+9S5AiTG1lNLMuusNLgqQ/GNoF94S5NWMCQlqX6UgpA9Fcj8BhiZK2w5lg7vHdFddYJIA3NCSw8eHjJQYmhkdYSNUMFhiamIuSmJydGl0uU9IHmF6cvuxRtbq55zmeNfkBspAP6GJyXnu6NVy8sQX+xGe/ger/66GkGi6ugAup30SHw0NzwYBGvvjBJ79udrkuZqOYNpXmtrWxML4EZ+LEpPT9/HtZFx5UhtnM0uGT3X8qSb5m/Ws5/jwcyXLweQZrTqFgI7OhUyCWkuN2ZRMQotYjdmeGRl8oedPaytXJuZanztdR/FdW6IEobiZ7DtGDoYQ6CGnEqHCX/87E5DlLz5Egz5PVInkQYdI+vil1fV1JE+t55aD7RAvFFlPC3gCeGcBisLo8wQ/ivC/cYqCIQPIWfdpYN+NpulMV/g895vsbCihatG9ddXPEwUKKmcdOWGj9BLfhsjw28z2dhlxuc5YD0mih/qTuG5X0iDBBNU9U9sxEqd9a5wr0V2XRzneLQeETr4edq5ynUSNDju0re6es10JeRwgMZZWYRXij2l5vTnxKBNgHfTQ8WE8b+FDvaK3KEEFqkzClNEi8SCqtTHcSCw4phLj92LZXpI2udzTq4qc54oShev7cYPWEM5s3bzxGjoCgLj/LrVopdRp0UzmQWll8tuJe2iIJGW25mXsv+J5DG5csz+zh6oQszAU3WLsrh13wPgaorBU8U+wObcM255p+6g9AUXz6cKl1R/Oi2ER1MLQaMvNGm9mNUzSWk4OvIgLLLriZTpyqvpu3X1AvhXodhIa8lLCMzgJUfsB0glkHqUGkZYpYXtobLEAGxeUhK6pYswolKMC2UBbl6nz3e3N6KwNtLo6lc6QJtn+DFgtKOKyK2B7ewV1BGo9a9SAdYRGT7mvYAp+fEhmpY47OMqe/W0QZcWNLFgSGhKsmIqIlDcWmyzr09j07vKZCqBRPTXQT1zYsNFco6WseK3lYNoCD9QWSf/H7mXxqZwS7Y6vKoLK+0hMv0/JhF2WFBuh+rGRChqwZ+fHpXmU/+b4rWVvGMbG3I0Nf5/aNJDiHzVUkMC8MzDeMj0W/p4Ntn9tmuPY8g9xZidQj0cUMTUvSY3G6c3uYyQhCpGNqL2SiHBlsEVi5TvOYV/7mnTILgZ/jJ3xH5uTByxX1znotUUbmr/FcP3acb3TZ7Wq/lAEZxC/Di1pq2q77XluT9Xm2RYUdVcJ6hDHG3kYwvVMvuMbY13sHU4W6nrIqnanKMxSgfJB5rXPEBJFducXXrQLANscTiPDZ6HLSk6P0OVKWWFuRl7MwAK25ehXUrxo3YNYO/XiI1wazEfDPSLfT1SoLxjSSg+QRP+CiuTSE7ET33SxsgafDi6O
*/