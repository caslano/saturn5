//
// traits/schedule_member.hpp
// ~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Copyright (c) 2003-2022 Christopher M. Kohlhoff (chris at kohlhoff dot com)
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//

#ifndef BOOST_ASIO_TRAITS_SCHEDULE_MEMBER_HPP
#define BOOST_ASIO_TRAITS_SCHEDULE_MEMBER_HPP

#if defined(_MSC_VER) && (_MSC_VER >= 1200)
# pragma once
#endif // defined(_MSC_VER) && (_MSC_VER >= 1200)

#include <boost/asio/detail/config.hpp>
#include <boost/asio/detail/type_traits.hpp>

#if defined(BOOST_ASIO_HAS_DECLTYPE) \
  && defined(BOOST_ASIO_HAS_NOEXCEPT) \
  && defined(BOOST_ASIO_HAS_WORKING_EXPRESSION_SFINAE)
# define BOOST_ASIO_HAS_DEDUCED_SCHEDULE_MEMBER_TRAIT 1
#endif // defined(BOOST_ASIO_HAS_DECLTYPE)
       //   && defined(BOOST_ASIO_HAS_NOEXCEPT)
       //   && defined(BOOST_ASIO_HAS_WORKING_EXPRESSION_SFINAE)

#include <boost/asio/detail/push_options.hpp>

namespace boost {
namespace asio {
namespace traits {

template <typename T, typename = void>
struct schedule_member_default;

template <typename T, typename = void>
struct schedule_member;

} // namespace traits
namespace detail {

struct no_schedule_member
{
  BOOST_ASIO_STATIC_CONSTEXPR(bool, is_valid = false);
  BOOST_ASIO_STATIC_CONSTEXPR(bool, is_noexcept = false);
};

#if defined(BOOST_ASIO_HAS_DEDUCED_SCHEDULE_MEMBER_TRAIT)

template <typename T, typename = void>
struct schedule_member_trait : no_schedule_member
{
};

template <typename T>
struct schedule_member_trait<T,
  typename void_type<
    decltype(declval<T>().schedule())
  >::type>
{
  BOOST_ASIO_STATIC_CONSTEXPR(bool, is_valid = true);

  using result_type = decltype(declval<T>().schedule());

  BOOST_ASIO_STATIC_CONSTEXPR(bool,
    is_noexcept = noexcept(declval<T>().schedule()));
};

#else // defined(BOOST_ASIO_HAS_DEDUCED_SCHEDULE_MEMBER_TRAIT)

template <typename T, typename = void>
struct schedule_member_trait :
  conditional<
    is_same<T, typename remove_reference<T>::type>::value,
    typename conditional<
      is_same<T, typename add_const<T>::type>::value,
      no_schedule_member,
      traits::schedule_member<typename add_const<T>::type>
    >::type,
    traits::schedule_member<typename remove_reference<T>::type>
  >::type
{
};

#endif // defined(BOOST_ASIO_HAS_DEDUCED_SCHEDULE_MEMBER_TRAIT)

} // namespace detail
namespace traits {

template <typename T, typename>
struct schedule_member_default :
  detail::schedule_member_trait<T>
{
};

template <typename T, typename>
struct schedule_member :
  schedule_member_default<T>
{
};

} // namespace traits
} // namespace asio
} // namespace boost

#include <boost/asio/detail/pop_options.hpp>

#endif // BOOST_ASIO_TRAITS_SCHEDULE_MEMBER_HPP

/* schedule_member.hpp
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
*/