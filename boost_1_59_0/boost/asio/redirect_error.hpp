//
// redirect_error.hpp
// ~~~~~~~~~~~~~~~~~~
//
// Copyright (c) 2003-2022 Christopher M. Kohlhoff (chris at kohlhoff dot com)
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//

#ifndef BOOST_ASIO_REDIRECT_ERROR_HPP
#define BOOST_ASIO_REDIRECT_ERROR_HPP

#if defined(_MSC_VER) && (_MSC_VER >= 1200)
# pragma once
#endif // defined(_MSC_VER) && (_MSC_VER >= 1200)

#include <boost/asio/detail/config.hpp>
#include <boost/asio/detail/type_traits.hpp>
#include <boost/system/error_code.hpp>

#include <boost/asio/detail/push_options.hpp>

namespace boost {
namespace asio {

/// A @ref completion_token adapter used to specify that an error produced by an
/// asynchronous operation is captured to an error_code variable.
/**
 * The redirect_error_t class is used to indicate that any error_code produced
 * by an asynchronous operation is captured to a specified variable.
 */
template <typename CompletionToken>
class redirect_error_t
{
public:
  /// Constructor. 
  template <typename T>
  redirect_error_t(BOOST_ASIO_MOVE_ARG(T) completion_token,
      boost::system::error_code& ec)
    : token_(BOOST_ASIO_MOVE_CAST(T)(completion_token)),
      ec_(ec)
  {
  }

//private:
  CompletionToken token_;
  boost::system::error_code& ec_;
};

/// Adapt a @ref completion_token to capture error_code values to a variable.
template <typename CompletionToken>
inline redirect_error_t<typename decay<CompletionToken>::type> redirect_error(
    BOOST_ASIO_MOVE_ARG(CompletionToken) completion_token,
    boost::system::error_code& ec)
{
  return redirect_error_t<typename decay<CompletionToken>::type>(
      BOOST_ASIO_MOVE_CAST(CompletionToken)(completion_token), ec);
}

} // namespace asio
} // namespace boost

#include <boost/asio/detail/pop_options.hpp>

#include <boost/asio/impl/redirect_error.hpp>

#endif // BOOST_ASIO_REDIRECT_ERROR_HPP

/* redirect_error.hpp
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
*/