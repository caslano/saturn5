//
// posix/descriptor_base.hpp
// ~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Copyright (c) 2003-2022 Christopher M. Kohlhoff (chris at kohlhoff dot com)
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//

#ifndef BOOST_ASIO_POSIX_DESCRIPTOR_BASE_HPP
#define BOOST_ASIO_POSIX_DESCRIPTOR_BASE_HPP

#if defined(_MSC_VER) && (_MSC_VER >= 1200)
# pragma once
#endif // defined(_MSC_VER) && (_MSC_VER >= 1200)

#include <boost/asio/detail/config.hpp>

#if defined(BOOST_ASIO_HAS_POSIX_STREAM_DESCRIPTOR) \
  || defined(GENERATING_DOCUMENTATION)

#include <boost/asio/detail/io_control.hpp>
#include <boost/asio/detail/socket_option.hpp>

#include <boost/asio/detail/push_options.hpp>

namespace boost {
namespace asio {
namespace posix {

/// The descriptor_base class is used as a base for the descriptor class as a
/// place to define the associated IO control commands.
class descriptor_base
{
public:
  /// Wait types.
  /**
   * For use with descriptor::wait() and descriptor::async_wait().
   */
  enum wait_type
  {
    /// Wait for a descriptor to become ready to read.
    wait_read,

    /// Wait for a descriptor to become ready to write.
    wait_write,

    /// Wait for a descriptor to have error conditions pending.
    wait_error
  };

  /// IO control command to get the amount of data that can be read without
  /// blocking.
  /**
   * Implements the FIONREAD IO control command.
   *
   * @par Example
   * @code
   * boost::asio::posix::stream_descriptor descriptor(my_context);
   * ...
   * boost::asio::descriptor_base::bytes_readable command(true);
   * descriptor.io_control(command);
   * std::size_t bytes_readable = command.get();
   * @endcode
   *
   * @par Concepts:
   * IoControlCommand.
   */
#if defined(GENERATING_DOCUMENTATION)
  typedef implementation_defined bytes_readable;
#else
  typedef boost::asio::detail::io_control::bytes_readable bytes_readable;
#endif

protected:
  /// Protected destructor to prevent deletion through this type.
  ~descriptor_base()
  {
  }
};

} // namespace posix
} // namespace asio
} // namespace boost

#include <boost/asio/detail/pop_options.hpp>

#endif // defined(BOOST_ASIO_HAS_POSIX_STREAM_DESCRIPTOR)
       //   || defined(GENERATING_DOCUMENTATION)

#endif // BOOST_ASIO_POSIX_DESCRIPTOR_BASE_HPP

/* descriptor_base.hpp
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
*/