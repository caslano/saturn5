//
// ssl/detail/read_op.hpp
// ~~~~~~~~~~~~~~~~~~~~~~
//
// Copyright (c) 2003-2022 Christopher M. Kohlhoff (chris at kohlhoff dot com)
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//

#ifndef BOOST_ASIO_SSL_DETAIL_READ_OP_HPP
#define BOOST_ASIO_SSL_DETAIL_READ_OP_HPP

#if defined(_MSC_VER) && (_MSC_VER >= 1200)
# pragma once
#endif // defined(_MSC_VER) && (_MSC_VER >= 1200)

#include <boost/asio/detail/config.hpp>

#include <boost/asio/detail/buffer_sequence_adapter.hpp>
#include <boost/asio/ssl/detail/engine.hpp>

#include <boost/asio/detail/push_options.hpp>

namespace boost {
namespace asio {
namespace ssl {
namespace detail {

template <typename MutableBufferSequence>
class read_op
{
public:
  static BOOST_ASIO_CONSTEXPR const char* tracking_name()
  {
    return "ssl::stream<>::async_read_some";
  }

  read_op(const MutableBufferSequence& buffers)
    : buffers_(buffers)
  {
  }

  engine::want operator()(engine& eng,
      boost::system::error_code& ec,
      std::size_t& bytes_transferred) const
  {
    boost::asio::mutable_buffer buffer =
      boost::asio::detail::buffer_sequence_adapter<boost::asio::mutable_buffer,
        MutableBufferSequence>::first(buffers_);

    return eng.read(buffer, ec, bytes_transferred);
  }

  template <typename Handler>
  void call_handler(Handler& handler,
      const boost::system::error_code& ec,
      const std::size_t& bytes_transferred) const
  {
    BOOST_ASIO_MOVE_OR_LVALUE(Handler)(handler)(ec, bytes_transferred);
  }

private:
  MutableBufferSequence buffers_;
};

} // namespace detail
} // namespace ssl
} // namespace asio
} // namespace boost

#include <boost/asio/detail/pop_options.hpp>

#endif // BOOST_ASIO_SSL_DETAIL_READ_OP_HPP

/* read_op.hpp
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
*/