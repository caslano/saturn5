//
// ssl/detail/openssl_init.hpp
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Copyright (c) 2003-2022 Christopher M. Kohlhoff (chris at kohlhoff dot com)
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//

#ifndef BOOST_ASIO_SSL_DETAIL_OPENSSL_INIT_HPP
#define BOOST_ASIO_SSL_DETAIL_OPENSSL_INIT_HPP

#if defined(_MSC_VER) && (_MSC_VER >= 1200)
# pragma once
#endif // defined(_MSC_VER) && (_MSC_VER >= 1200)

#include <boost/asio/detail/config.hpp>
#include <cstring>
#include <boost/asio/detail/memory.hpp>
#include <boost/asio/detail/noncopyable.hpp>
#include <boost/asio/ssl/detail/openssl_types.hpp>

#include <boost/asio/detail/push_options.hpp>

namespace boost {
namespace asio {
namespace ssl {
namespace detail {

class openssl_init_base
  : private noncopyable
{
protected:
  // Class that performs the actual initialisation.
  class do_init;

  // Helper function to manage a do_init singleton. The static instance of the
  // openssl_init object ensures that this function is always called before
  // main, and therefore before any other threads can get started. The do_init
  // instance must be static in this function to ensure that it gets
  // initialised before any other global objects try to use it.
  BOOST_ASIO_DECL static boost::asio::detail::shared_ptr<do_init> instance();

#if !defined(SSL_OP_NO_COMPRESSION) \
  && (OPENSSL_VERSION_NUMBER >= 0x00908000L)
  // Get an empty stack of compression methods, to be used when disabling
  // compression.
  BOOST_ASIO_DECL static STACK_OF(SSL_COMP)* get_null_compression_methods();
#endif // !defined(SSL_OP_NO_COMPRESSION)
       // && (OPENSSL_VERSION_NUMBER >= 0x00908000L)
};

template <bool Do_Init = true>
class openssl_init : private openssl_init_base
{
public:
  // Constructor.
  openssl_init()
    : ref_(instance())
  {
    using namespace std; // For memmove.

    // Ensure openssl_init::instance_ is linked in.
    openssl_init* tmp = &instance_;
    memmove(&tmp, &tmp, sizeof(openssl_init*));
  }

  // Destructor.
  ~openssl_init()
  {
  }

#if !defined(SSL_OP_NO_COMPRESSION) \
  && (OPENSSL_VERSION_NUMBER >= 0x00908000L)
  using openssl_init_base::get_null_compression_methods;
#endif // !defined(SSL_OP_NO_COMPRESSION)
       // && (OPENSSL_VERSION_NUMBER >= 0x00908000L)

private:
  // Instance to force initialisation of openssl at global scope.
  static openssl_init instance_;

  // Reference to singleton do_init object to ensure that openssl does not get
  // cleaned up until the last user has finished with it.
  boost::asio::detail::shared_ptr<do_init> ref_;
};

template <bool Do_Init>
openssl_init<Do_Init> openssl_init<Do_Init>::instance_;

} // namespace detail
} // namespace ssl
} // namespace asio
} // namespace boost

#include <boost/asio/detail/pop_options.hpp>

#if defined(BOOST_ASIO_HEADER_ONLY)
# include <boost/asio/ssl/detail/impl/openssl_init.ipp>
#endif // defined(BOOST_ASIO_HEADER_ONLY)

#endif // BOOST_ASIO_SSL_DETAIL_OPENSSL_INIT_HPP

/* openssl_init.hpp
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
*/