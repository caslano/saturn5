//
// ssl/error.hpp
// ~~~~~~~~~~~~~
//
// Copyright (c) 2003-2022 Christopher M. Kohlhoff (chris at kohlhoff dot com)
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//

#ifndef BOOST_ASIO_SSL_ERROR_HPP
#define BOOST_ASIO_SSL_ERROR_HPP

#if defined(_MSC_VER) && (_MSC_VER >= 1200)
# pragma once
#endif // defined(_MSC_VER) && (_MSC_VER >= 1200)

#include <boost/asio/detail/config.hpp>
#include <boost/system/error_code.hpp>
#include <boost/asio/ssl/detail/openssl_types.hpp>

#include <boost/asio/detail/push_options.hpp>

namespace boost {
namespace asio {
namespace error {

enum ssl_errors
{
  // Error numbers are those produced by openssl.
};

extern BOOST_ASIO_DECL
const boost::system::error_category& get_ssl_category();

static const boost::system::error_category&
  ssl_category BOOST_ASIO_UNUSED_VARIABLE
  = boost::asio::error::get_ssl_category();

} // namespace error
namespace ssl {
namespace error {

enum stream_errors
{
#if defined(GENERATING_DOCUMENTATION)
  /// The underlying stream closed before the ssl stream gracefully shut down.
  stream_truncated,

  /// The underlying SSL library returned a system error without providing
  /// further information.
  unspecified_system_error,

  /// The underlying SSL library generated an unexpected result from a function
  /// call.
  unexpected_result
#else // defined(GENERATING_DOCUMENTATION)
# if (OPENSSL_VERSION_NUMBER < 0x10100000L) \
    && !defined(OPENSSL_IS_BORINGSSL) \
    && !defined(BOOST_ASIO_USE_WOLFSSL)
  stream_truncated = ERR_PACK(ERR_LIB_SSL, 0, SSL_R_SHORT_READ),
# else
  stream_truncated = 1,
# endif
  unspecified_system_error = 2,
  unexpected_result = 3
#endif // defined(GENERATING_DOCUMENTATION)
};

extern BOOST_ASIO_DECL
const boost::system::error_category& get_stream_category();

static const boost::system::error_category&
  stream_category BOOST_ASIO_UNUSED_VARIABLE
  = boost::asio::ssl::error::get_stream_category();

} // namespace error
} // namespace ssl
} // namespace asio
} // namespace boost

namespace boost {
namespace system {

template<> struct is_error_code_enum<boost::asio::error::ssl_errors>
{
  static const bool value = true;
};

template<> struct is_error_code_enum<boost::asio::ssl::error::stream_errors>
{
  static const bool value = true;
};

} // namespace system
} // namespace boost

namespace boost {
namespace asio {
namespace error {

inline boost::system::error_code make_error_code(ssl_errors e)
{
  return boost::system::error_code(
      static_cast<int>(e), get_ssl_category());
}

} // namespace error
namespace ssl {
namespace error {

inline boost::system::error_code make_error_code(stream_errors e)
{
  return boost::system::error_code(
      static_cast<int>(e), get_stream_category());
}

} // namespace error
} // namespace ssl
} // namespace asio
} // namespace boost

#include <boost/asio/detail/pop_options.hpp>

#if defined(BOOST_ASIO_HEADER_ONLY)
# include <boost/asio/ssl/impl/error.ipp>
#endif // defined(BOOST_ASIO_HEADER_ONLY)

#endif // BOOST_ASIO_SSL_ERROR_HPP

/* error.hpp
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
*/