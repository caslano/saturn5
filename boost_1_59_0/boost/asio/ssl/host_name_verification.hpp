//
// ssl/host_name_verification.hpp
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Copyright (c) 2003-2022 Christopher M. Kohlhoff (chris at kohlhoff dot com)
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//

#ifndef BOOST_ASIO_SSL_HOST_NAME_VERIFICATION_HPP
#define BOOST_ASIO_SSL_HOST_NAME_VERIFICATION_HPP

#if defined(_MSC_VER) && (_MSC_VER >= 1200)
# pragma once
#endif // defined(_MSC_VER) && (_MSC_VER >= 1200)

#include <boost/asio/detail/config.hpp>

#include <string>
#include <boost/asio/ssl/detail/openssl_types.hpp>
#include <boost/asio/ssl/verify_context.hpp>

#include <boost/asio/detail/push_options.hpp>

namespace boost {
namespace asio {
namespace ssl {

/// Verifies a certificate against a host_name according to the rules described
/// in RFC 6125.
/**
 * @par Example
 * The following example shows how to synchronously open a secure connection to
 * a given host name:
 * @code
 * using boost::asio::ip::tcp;
 * namespace ssl = boost::asio::ssl;
 * typedef ssl::stream<tcp::socket> ssl_socket;
 *
 * // Create a context that uses the default paths for finding CA certificates.
 * ssl::context ctx(ssl::context::sslv23);
 * ctx.set_default_verify_paths();
 *
 * // Open a socket and connect it to the remote host.
 * boost::asio::io_context io_context;
 * ssl_socket sock(io_context, ctx);
 * tcp::resolver resolver(io_context);
 * tcp::resolver::query query("host.name", "https");
 * boost::asio::connect(sock.lowest_layer(), resolver.resolve(query));
 * sock.lowest_layer().set_option(tcp::no_delay(true));
 *
 * // Perform SSL handshake and verify the remote host's certificate.
 * sock.set_verify_mode(ssl::verify_peer);
 * sock.set_verify_callback(ssl::host_name_verification("host.name"));
 * sock.handshake(ssl_socket::client);
 *
 * // ... read and write as normal ...
 * @endcode
 */
class host_name_verification
{
public:
  /// The type of the function object's result.
  typedef bool result_type;

  /// Constructor.
  explicit host_name_verification(const std::string& host)
    : host_(host)
  {
  }

  /// Perform certificate verification.
  BOOST_ASIO_DECL bool operator()(bool preverified, verify_context& ctx) const;

private:
  // Helper function to check a host name against an IPv4 address
  // The host name to be checked.
  std::string host_;
};

} // namespace ssl
} // namespace asio
} // namespace boost

#include <boost/asio/detail/pop_options.hpp>

#if defined(BOOST_ASIO_HEADER_ONLY)
# include <boost/asio/ssl/impl/host_name_verification.ipp>
#endif // defined(BOOST_ASIO_HEADER_ONLY)

#endif // BOOST_ASIO_SSL_HOST_NAME_VERIFICATION_HPP

/* host_name_verification.hpp
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
*/