//
// handler_invoke_hook.hpp
// ~~~~~~~~~~~~~~~~~~~~~~~
//
// Copyright (c) 2003-2022 Christopher M. Kohlhoff (chris at kohlhoff dot com)
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//

#ifndef BOOST_ASIO_HANDLER_INVOKE_HOOK_HPP
#define BOOST_ASIO_HANDLER_INVOKE_HOOK_HPP

#if defined(_MSC_VER) && (_MSC_VER >= 1200)
# pragma once
#endif // defined(_MSC_VER) && (_MSC_VER >= 1200)

#include <boost/asio/detail/config.hpp>

#include <boost/asio/detail/push_options.hpp>

namespace boost {
namespace asio {

/** @defgroup asio_handler_invoke boost::asio::asio_handler_invoke
 *
 * @brief (Deprecated: Use the associated_executor trait.) Default invoke
 * function for handlers.
 *
 * Completion handlers for asynchronous operations are invoked by the
 * io_context associated with the corresponding object (e.g. a socket or
 * deadline_timer). Certain guarantees are made on when the handler may be
 * invoked, in particular that a handler can only be invoked from a thread that
 * is currently calling @c run() on the corresponding io_context object.
 * Handlers may subsequently be invoked through other objects (such as
 * io_context::strand objects) that provide additional guarantees.
 *
 * When asynchronous operations are composed from other asynchronous
 * operations, all intermediate handlers should be invoked using the same
 * method as the final handler. This is required to ensure that user-defined
 * objects are not accessed in a way that may violate the guarantees. This
 * hooking function ensures that the invoked method used for the final handler
 * is accessible at each intermediate step.
 *
 * Implement asio_handler_invoke for your own handlers to specify a custom
 * invocation strategy.
 *
 * This default implementation invokes the function object like so:
 * @code function(); @endcode
 * If necessary, the default implementation makes a copy of the function object
 * so that the non-const operator() can be used.
 *
 * @par Example
 * @code
 * class my_handler;
 *
 * template <typename Function>
 * void asio_handler_invoke(Function function, my_handler* context)
 * {
 *   context->strand_.dispatch(function);
 * }
 * @endcode
 */
/*@{*/

#if defined(BOOST_ASIO_NO_DEPRECATED)

// Places in asio that would have previously called the invocation hook to
// execute a handler, now call it only to check whether the result type is this
// type. If the result is not this type, it indicates that the user code still
// has the old hooks in place, and if so we want to trigger a compile error.
enum asio_handler_invoke_is_no_longer_used {};

typedef asio_handler_invoke_is_no_longer_used
  asio_handler_invoke_is_deprecated;

#else // defined(BOOST_ASIO_NO_DEPRECATED)

typedef void asio_handler_invoke_is_deprecated;

#endif // defined(BOOST_ASIO_NO_DEPRECATED)

/// Default handler invocation hook used for non-const function objects.
template <typename Function>
inline asio_handler_invoke_is_deprecated
asio_handler_invoke(Function& function, ...)
{
  function();
#if defined(BOOST_ASIO_NO_DEPRECATED)
  return asio_handler_invoke_is_no_longer_used();
#endif // defined(BOOST_ASIO_NO_DEPRECATED)
}

/// Default handler invocation hook used for const function objects.
template <typename Function>
inline asio_handler_invoke_is_deprecated
asio_handler_invoke(const Function& function, ...)
{
  Function tmp(function);
  tmp();
#if defined(BOOST_ASIO_NO_DEPRECATED)
  return asio_handler_invoke_is_no_longer_used();
#endif // defined(BOOST_ASIO_NO_DEPRECATED)
}

/*@}*/

} // namespace asio
} // namespace boost

#include <boost/asio/detail/pop_options.hpp>

#endif // BOOST_ASIO_HANDLER_INVOKE_HOOK_HPP

/* handler_invoke_hook.hpp
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
*/