//
// handler_alloc_hook.hpp
// ~~~~~~~~~~~~~~~~~~~~~~
//
// Copyright (c) 2003-2022 Christopher M. Kohlhoff (chris at kohlhoff dot com)
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//

#ifndef BOOST_ASIO_HANDLER_ALLOC_HOOK_HPP
#define BOOST_ASIO_HANDLER_ALLOC_HOOK_HPP

#if defined(_MSC_VER) && (_MSC_VER >= 1200)
# pragma once
#endif // defined(_MSC_VER) && (_MSC_VER >= 1200)

#include <boost/asio/detail/config.hpp>
#include <cstddef>

#include <boost/asio/detail/push_options.hpp>

namespace boost {
namespace asio {

#if defined(BOOST_ASIO_NO_DEPRECATED)

// Places in asio that would have previously called the allocate or deallocate
// hooks to manage memory, now call them only to check whether the result types
// are these types. If the result is not the correct type, it indicates that
// the user code still has the old hooks in place, and if so we want to trigger
// a compile error.
enum asio_handler_allocate_is_no_longer_used {};
enum asio_handler_deallocate_is_no_longer_used {};

typedef asio_handler_allocate_is_no_longer_used
  asio_handler_allocate_is_deprecated;
typedef asio_handler_deallocate_is_no_longer_used
  asio_handler_deallocate_is_deprecated;

#else // defined(BOOST_ASIO_NO_DEPRECATED)

typedef void* asio_handler_allocate_is_deprecated;
typedef void asio_handler_deallocate_is_deprecated;

#endif // defined(BOOST_ASIO_NO_DEPRECATED)

/// (Deprecated: Use the associated_allocator trait.) Default allocation
/// function for handlers.
/**
 * Asynchronous operations may need to allocate temporary objects. Since
 * asynchronous operations have a handler function object, these temporary
 * objects can be said to be associated with the handler.
 *
 * Implement asio_handler_allocate and asio_handler_deallocate for your own
 * handlers to provide custom allocation for these temporary objects.
 *
 * The default implementation of these allocation hooks uses <tt>::operator
 * new</tt> and <tt>::operator delete</tt>.
 *
 * @note All temporary objects associated with a handler will be deallocated
 * before the upcall to the handler is performed. This allows the same memory to
 * be reused for a subsequent asynchronous operation initiated by the handler.
 *
 * @par Example
 * @code
 * class my_handler;
 *
 * void* asio_handler_allocate(std::size_t size, my_handler* context)
 * {
 *   return ::operator new(size);
 * }
 *
 * void asio_handler_deallocate(void* pointer, std::size_t size,
 *     my_handler* context)
 * {
 *   ::operator delete(pointer);
 * }
 * @endcode
 */
BOOST_ASIO_DECL asio_handler_allocate_is_deprecated
asio_handler_allocate(std::size_t size, ...);

/// Default deallocation function for handlers.
/**
 * Implement asio_handler_allocate and asio_handler_deallocate for your own
 * handlers to provide custom allocation for the associated temporary objects.
 *
 * The default implementation of these allocation hooks uses <tt>::operator
 * new</tt> and <tt>::operator delete</tt>.
 *
 * @sa asio_handler_allocate.
 */
BOOST_ASIO_DECL asio_handler_deallocate_is_deprecated
asio_handler_deallocate(void* pointer, std::size_t size, ...);

} // namespace asio
} // namespace boost

#include <boost/asio/detail/pop_options.hpp>

#if defined(BOOST_ASIO_HEADER_ONLY)
# include <boost/asio/impl/handler_alloc_hook.ipp>
#endif // defined(BOOST_ASIO_HEADER_ONLY)

#endif // BOOST_ASIO_HANDLER_ALLOC_HOOK_HPP

/* handler_alloc_hook.hpp
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
*/