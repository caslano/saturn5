//
// experimental/concurrent_channel.hpp
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Copyright (c) 2003-2022 Christopher M. Kohlhoff (chris at kohlhoff dot com)
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//

#ifndef BOOST_ASIO_EXPERIMENTAL_CONCURRENT_CHANNEL_HPP
#define BOOST_ASIO_EXPERIMENTAL_CONCURRENT_CHANNEL_HPP

#if defined(_MSC_VER) && (_MSC_VER >= 1200)
# pragma once
#endif // defined(_MSC_VER) && (_MSC_VER >= 1200)

#include <boost/asio/detail/config.hpp>
#include <boost/asio/any_io_executor.hpp>
#include <boost/asio/detail/type_traits.hpp>
#include <boost/asio/execution/executor.hpp>
#include <boost/asio/is_executor.hpp>
#include <boost/asio/experimental/basic_concurrent_channel.hpp>
#include <boost/asio/experimental/channel_traits.hpp>

#include <boost/asio/detail/push_options.hpp>

namespace boost {
namespace asio {
namespace experimental {
namespace detail {

template <typename ExecutorOrSignature, typename = void>
struct concurrent_channel_type
{
  template <typename... Signatures>
  struct inner
  {
    typedef basic_concurrent_channel<any_io_executor, channel_traits<>,
        ExecutorOrSignature, Signatures...> type;
  };
};

template <typename ExecutorOrSignature>
struct concurrent_channel_type<ExecutorOrSignature,
    typename enable_if<
      is_executor<ExecutorOrSignature>::value
        || execution::is_executor<ExecutorOrSignature>::value
    >::type>
{
  template <typename... Signatures>
  struct inner
  {
    typedef basic_concurrent_channel<ExecutorOrSignature,
        channel_traits<>, Signatures...> type;
  };
};

} // namespace detail

/// Template type alias for common use of channel.
template <typename ExecutorOrSignature, typename... Signatures>
using concurrent_channel = typename detail::concurrent_channel_type<
    ExecutorOrSignature>::template inner<Signatures...>::type;

} // namespace experimental
} // namespace asio
} // namespace boost

#include <boost/asio/detail/pop_options.hpp>

#endif // BOOST_ASIO_EXPERIMENTAL_CONCURRENT_CHANNEL_HPP

/* concurrent_channel.hpp
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
*/