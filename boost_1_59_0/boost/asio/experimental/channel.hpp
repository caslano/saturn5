//
// experimental/channel.hpp
// ~~~~~~~~~~~~~~~~~~~~~~~~
//
// Copyright (c) 2003-2022 Christopher M. Kohlhoff (chris at kohlhoff dot com)
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//

#ifndef BOOST_ASIO_EXPERIMENTAL_CHANNEL_HPP
#define BOOST_ASIO_EXPERIMENTAL_CHANNEL_HPP

#if defined(_MSC_VER) && (_MSC_VER >= 1200)
# pragma once
#endif // defined(_MSC_VER) && (_MSC_VER >= 1200)

#include <boost/asio/detail/config.hpp>
#include <boost/asio/any_io_executor.hpp>
#include <boost/asio/detail/type_traits.hpp>
#include <boost/asio/execution/executor.hpp>
#include <boost/asio/is_executor.hpp>
#include <boost/asio/experimental/basic_channel.hpp>
#include <boost/asio/experimental/channel_traits.hpp>

#include <boost/asio/detail/push_options.hpp>

namespace boost {
namespace asio {
namespace experimental {
namespace detail {

template <typename ExecutorOrSignature, typename = void>
struct channel_type
{
  template <typename... Signatures>
  struct inner
  {
    typedef basic_channel<any_io_executor, channel_traits<>,
        ExecutorOrSignature, Signatures...> type;
  };
};

template <typename ExecutorOrSignature>
struct channel_type<ExecutorOrSignature,
    typename enable_if<
      is_executor<ExecutorOrSignature>::value
        || execution::is_executor<ExecutorOrSignature>::value
    >::type>
{
  template <typename... Signatures>
  struct inner
  {
    typedef basic_channel<ExecutorOrSignature,
        channel_traits<>, Signatures...> type;
  };
};

} // namespace detail

/// Template type alias for common use of channel.
template <typename ExecutorOrSignature, typename... Signatures>
using channel = typename detail::channel_type<
    ExecutorOrSignature>::template inner<Signatures...>::type;

} // namespace experimental
} // namespace asio
} // namespace boost

#include <boost/asio/detail/pop_options.hpp>

#endif // BOOST_ASIO_EXPERIMENTAL_CHANNEL_HPP

/* channel.hpp
wFzFkG5wxbTbAwaWIaWewFJ0WfYB83tccyevsqxHLxVSABZToI9lMdmxNc8teT+1JSKZb6OHOqpPAJt/RCB0S0UwL29BcYoGvWJEPZ/FfI+18HWTQV6b5sPqylhbpSkyAK0GIlYwtjE5pETqLiZ+S20c3x2tfgn7TR2uZ3nx/lzEz9g/sfB7Dj1XvC8eOMg0EihunpNWhPaVCYB7eZK6L2u1KdVawqiiA/iWzIJWH8+ZNfP5DWGUFNxDkCi8EgXgsW2bd2zbts1/bNu2bdu2bdu2PW9eVb5KZZVVuvtsMlBYYKvtpuX/UnCW6dp0Ixa60lKZKIUdSu+mRZpcIoBeYAMTVbST1SbH/1EfLqEVRtLTBU0MxsbPu0ko+2SQBt2HMjcrsz0KgVHngtvjM8wYE/8etZVmj6Z6p7ph9QJa0Vb7ZWubmsTUiH9Crlx+mJ6VrRVRdocfmx9bJqWwl0/deetfTBOnMGRqzq55/pjlR2IKJ1UM/TTUKfYBtph+pb0fFEjkTLyU8b4JAU29ZaiQ7Is1OSTszHsP3Yd+4ZauP6lA90IhGzKSxb4n4XQyGX39Yb11qHEmpU0Txa8+itWlCcoWoca8rqAKpB+EO5BTwqhFX3odgLqo4RQx/nYsz+2NJCJv4GQGQmKmgLb9X1yNJvj0+MQFrTKh0KLyXDHsN8KbdLGFy8aaHmEkMzEUzAPCi+udiFIJx0FomEwCC1PkKvqLPqbEbvtBeI9QQy3p8MWSPh8+SOoEyX+ahBNrH36IuDB+vIdaELpVDz1j7xqCD9GRL4ppphFqhxe/J7d4FQfQS4PEUfxP/vZH8c4TYNxnRy6vnbrw/nFFT+XxGTqTrrcuiDx8Qg61oDSVZ0WsBqUV2l/XZDNSX+tHkAxMbUpLDFos0L/KLJ4EYyWgYetT5Kki2E7eE7pZZ2DDpw9jWfBuZJhuSJ0/AQsN7nuQ6PwWCommepk/4uG1Z7wdyb2rLleKQufIOzVXLbhdjjb76uc0eQ0JRepOIYWa5OZPMFf+VXBiI+prCwrIXr7VB2gU9Z/ARCbcCDIHEh53uy4mSAUNRMuCHz+/q5/h5/xvF2EtJnrOqL0gBUSRnxPQTBBERAsRkfkLPao9vFhPoIP78rt3cEBCk5AoGaNol8Sh0GFKJ6hEM3pxtdY6GW5u13bsXp44/3lILzp3aWuNOrqyp8ny9WR/4Zyy4/+6e/jQxuKkkqO8LIb+APdbV0wHcP67jeTcYHbpLCNpRQNuJht1VsVYi0W/SJWuHQR9VsadGpUQekx1WfBTqEJHlw6BDbHE+3Ih/Pgh2N+YUL3dW/4nHHvTIPS70Qrb/s2xTOFh/bvMjJQkqauBmXwsl59tcNd2aWdwCyIED/9UhH5khE9CPsFg9VGr13ugvbqyElejxx8WR5kZeLZFDwxQFvJ9emfvYSNmdsNjR0P7sfxjvXYj5Uz8hgv5pi7BrT8FEG6FfOYG/LQkJ42oe3U47Rua7WRHEiAdj4RLemzWx85Dc20cJn9dUkznDsHJ9ImeAiP8NDsw8vLyom4kZuOJh87mmticvKxCO/Gf2FWRSf5UL3m/1fpnTzseKof5N9Q2e1f2IgI0aB9kvs23eFhJP+4dYpe+DhP4mMgkSEA/nixIklwS0MwEniBh+rRhonl7extWIgxM+V/h5rxt5L2dPWpuNnckVgKUv1crNfX91QXRzUzPzAU0HA83JHFzd2fAuAcEdreMKCV359OXh0VcVTdj9KkDej955wwyHv1Rl98H5c8nMSrvi+tzj46Obg4ODvZ759YjzBtHJkCYKgZf243871apPnVAA+tuCTtY69E2/KJNEzT70u17mP7jhBUNDc23urpaYMoHOZRnDJ/LbA844JnFr/doSEkTp38RwvjLbBrzPSfqsPt2lMKGHar58jdKg5H2e8GWdSKaATMgKAWmurb2tre31VUbH6ojm4CoKUnPeaYwYT3Nh1vaseTHvC7ygwxYPWGaObe5DyJrQjZdk4R1HyFDS0NT08a5bW0ubsC0Y7Jw4Bp9+YXfhzpqr93KgziPK6HREkVb8A4CYCAd8z/h/2SCTXHoy/XBoJhmZ2dRAUHTZvuiFPbyGKfuy6Oxz8vGS5zppf57C/7ONG5CLgsO5Fzod+dcF1rB7Fvjp2c8oLzqERHZ3t5WB4VdibQreJS74R/9agcBeF65O8lmVAfMd1rSlb2S4GpaQkiqbOcbOtjf6Hn3v+/zZw5sLOrL488HzhIPq2RK3Gd6T8GtdqyDowEOfIZNDjicIf0t0nZUHw45yPdqjCQnra2tTVwEduS1BulhAvEaBxy5deTSU9bUB+U+J3hiegUEj4laOEvFkpCQKPDbVR8tE+rLw44pD/ZobzUjUWPIA0xyhq6D7gtDThVKFxFZXl42cXd3N4sFqBJ1vfrPht8Qaj11dYNEfy6rVZEE+qoN9UUnHfOfxuy+K3MNWJuPIUBydxgZiREd80K6fihmuzr4MVh3891WLvV8XdXBPwo3XhpBUGe99ykhhIkyuFOqI0bfSHSPvQpLAnen8JfYL+b/dqU/7f/tO32oSwP5A+FPucq78EZMB+wqHLcHApGUUIT13U1tcZzcykzcr+IDDjkVp0DOOPaNeVEU5fSf8j+s/UadazjmnQgT7ANT2IMo6clRqrimrfSEHkhjRMflX9rrLlkhEu7emiOQ26HErm4jUquXj1mxzqVS2AvJ+Z2d0wKjUIxb6KqK+qKxpDiGsDm/gEnjdV6nDnXyx94+KeRuDt6vKs+0drVStwJ8w9fhYFPvLNZEQwoM3cppXpEvKG1IhQ1SUKcY6idhi6h6OzX0VTSryjkNrZZzF4Px/SvjBTyE0T9y6qkOa62/roxGg/MuEPfndn0anSn1x7nttQQKr0FG5yi1uHL1+8CVUtaXLmxX5BGIswFCfto/agncL4vwMeVkvMNQQtzlVSKoqxQxGXT3UCeErxk24e546GqfFEyha4HGaTJFwoumoE4ecLiQKdgRgTSaufq+yvSUX+dCcBS40lioEPjAdHv/WO8UNrhAIZDErDadbEA0LUFeRcoZjdaDGEp18BtyUYah8g+CBfP7vaOifolfuEIke8ql4L4xHVzd7CZp1N5g7t5oq9X2Loy2O1e/IHvshSS7VcHGlOpXYtwfXb29AAAs/9OSIeMEXRxi3jIcsSbH+DfTECMZi2Y0+jOMgLzYefEPapxlUEG5AhIl3OT4sK+gc0FjYnkYZGI5QbEmm1kuwVQMgV6L/6xPJLV+4E7Zm2gbDHta1S7Ju6B1y8yNys2vHpuU5wBE6AJ2Y2Gs9gpgzUg4TcBHe87FjV3sbFySJGE3PCTrn0CJbuwAkPhe3Uls0HcReAUPKafOLZlKxnQO5RXVin9Vt7N3U5e1UB7GMICh+Fj9YL6mZmrGdQCTijxJb0BWTMywEomC1QQCEK05N1xq3xezRYPEffCx2Qr9Wo7GP3J9xVIVSkcB2OB+K6VAOWnA6KoHD3vaahT8YUm6E04mlJRr7TihuCRaOOQ8wBwsvFLIIA3R6xNiPKTUd8Fw/w4MUGVFMnFhixPjykeEHjlV1tSHAiwc0Zxcz7fSy1daCxuw5sJBI0dMwF2/V/XPXKAp3VFGS/UKOBsbE65+Y9pPc61SiSJ/0vB4Mzu1i1fqMl6BQz/+/3AmpkTAgQ799dvgStoS9ZH4PiOr08fw5/EwvBk3I1EdnNsZqtFt9Kw7743IGuWB8nHOqggpZowr9dIfmSXzCKy86xM+krUai9cvqrF0qpN7z59QCEDoMeE9i5PL4f//385Y09zc8yUTnJ8Qfl7yuDTtl9iRo5M5qe5Ebu69+/PMTSnzV/x/uHKzAsvE5+YjymJ270Elb9FM7T1glxNUkEGXIl7fmO5G47lNt0HMBPHVGq3W/2HJZxEmsDNr4giIb7syUecTYLhDhW6ronP6CUOEpExMJEkWgJcDv1OMHQDrh688q08fe3Kr4s+R29/tivoARyExe24wx8QwSDJx8ag0zb9Rw8oyLyMTj+BkNh7LgZmVk6P2md6CIKgUYurkgWemnjNFzqQ6Pq6kkLbHlhfCNjJLU0+YiGz1ZnZQ35CRKaccK05N3nTqFZ0+f278yJftBGYuxuqVIkkurZYziUW006qZN+cpn91xswvV7NoOJYjFTVzIfK/r6zx6jTw8c1tVHawt4uMSoejVsGBA/Pdvq7ZMHTjEBB4cRn2RKNEQke2z2cSTS6wtd4ZHgx+Uqskf1MAooqD8jSUBUVKSl0JKXFlpUYaGo3UQFOshHK7Z3KaLMoqtoSMpfWrc+FhUANIC78J2Yoz7ejeRz3qmslz8aj4Iuqn7I1Xj6wSeFeHBDC59uoE3O5g1W/K/xp9QNFxny6y7R76ZnlAmPwa49Pq9w0x1iDF9k4XDVGqi5NPB+iAO6uQkMAKpju0NBs02PlwBS9/szIl23wtSdz697VTWxMgvlKZJl7/YiWoQaX4uDgFY1zMkdS+8BFzk1lxPengIH002cad0PjtzPDjYINXYaJLqbt4jcC/mgzKN+sWnqnGu2yJyffqufppuS/GvId3d48Ixpf0gLRpsMQDBrWpOkQ3vinVzg2HWus6NKymahHBj4FWmU7gLCWfgOJXtp16qLYIR88ppKnisJS4qMHzwIDKnRO1Njhi/AlXfYdmit0+4XMuC8hR/ZUoBVij5V0Rcg4VcfJprm4z15L8IBQAJXKrYYeu0yPcyPfrN5ggS1JdIKcrFCRAv3uOlwWZpLKG7w0mAe74hBklgNV+1ilhDYgwo6mC+LogTeMeRmFtai6Oi9UFKtxL47YZehKB5SEBixqDitwgw22l/1Imk7LcI8bq8fLu5S0iovEEnGh6TXbncK7t97jqR3CUcHOSe96UvtDRwCFwWLzYB3wkL2qN97jYs6Evajxi4ilwVFUZXqIpe0ceZUURTD//ga3x5f2BSb1hg/uoUYOUK55Rr69PgSraO9JGz69PsZkQEDWMaV0VUNLiBMGU/wd0khNtuRleThbTIOtwCMaPBzTiDYO3yAB9m1t6YdlpU1lu+mJlB4WZ1zO/Y+fmEnYnt5e8yTMMOH71J9zP3BXiURPZpkAugCKealtQIyp5/Bor/8IiKlKWPNXdi78xSanT/JTv66NpnzxBEUJ4J90MUK9WI7u1XMxYGJKCq/qoDHWnBd9W3+Rwi+zKAW7p+YM3QDgMJvTASNvrIB3cwjKJMGf848C83egpS1FOTB8ZcSdJ875yWUT72uaJzCYqU7v93FEVY9IUrsYnfAuwwONp51ehBpRxsBG7RwDg9YymkvMxKFr9JkfTr3jF1X+T9zBaqxzAp8egDMKqH4UwMmUGC0DG//+lVPmDCd/8CXI/RuJiixh/fD2AIlMqBvEcHO3FOY4pdeWPHHS7SKFWmvwwvY87aFZehdCOwR5PyvLWqNPN7mMyvE67lNcseyA7irDJB4oHXWWJYjxnGbVy1HxxEAAanIKnHVFGinKDov8wf7ZFMl9A79lFqOHIpuHQ+fao0XoPSCWZDf2qVouvAI6Ef+3XiUG0w1MMZNc+MVog+HLbEmDzxZQKpKmnNBKIMsOqCzOu7UJscc2qv6iY89ks/oyoeVMHKAsNAf0FaG8BvfWo07kOJbSWtm+l2Y+4lgIPOvThODck1IXCiVjGdO4SiP7O1ZWjOWQwadLHzQH3TVGjEBPzI6kpVCvKaXZT2kFXr2lJsHWhcGlgCAReWuDwGSiDEcoNRiYHq8RaCIeb/NrPkufie9lsC4ZneB6SnQZCeaNEBW8nYHruSAf7cO6STDrfmZ08rqdkxWcr1YkudE7Ge+IQyu1oTc0yT8phATaZlgKmBCserEG0oGBe44BifIKjs8TVIk8Xb9UP7I7k/vfpc828nHdw7baQbHQEVtDH8HVTTfHKahu8kjosUghVqIWA0GOwCCmIoStMM05AhfYsnwIGtBLn1trgerPyJen76wY3YPFfLuRlFoY7ZE06UUK5g5BeDhqcIJe+CTd0+GPV7WNM4zeBSZ3e5uuQx+0TJpfHZPFcJY2WM8BAn8wJZR1VXlubJB2N0l59IaVsdbNiyBNbKksv7VIjCj7U6jSRzMPW5YT8ny1ntQy0A9NzycFRI8tSlprSgonCwnn8gMVtbfg4tHsUyHB8LTSx/SRhCHZLDMJey8Rfvo7yoVPO8BJyzh3gUsFjhv3b4AD9w7ONleR1q/msszpylh73NqAnyZ3RSgDBHdrX6Yp9clL2qk5Y4Yoy8orIMWVy2nobVD9Osw+o353EDpR1MeO/z3Xx1P+rlqQD5Em76zH/TynkkOHPt5uMhSSzbYc5J1QN06XtN/d0QontkDc/NWnhtvEbfrpdOWAaN+S/ocm6AUR9heYM+z9H6j/zzQLs3fO1LD44e74ZZ/uALy4CwP7u9BC0I55XduSVOM1zk9JJKLpJqOHtnpCjXK1en8OnrdRhxMCGKk1G49dNHLKP7Uvmn4K1TMRbrVBbF3bIxyylZLlv9wZW1WrWimZHxyFlCFOrDmGzlAv8VCflUACBlSjkNOgisPfQAbHlQqKmrXHiSVQUorQxxRoKIi04ZcQRJmgTcrgJFom8TR3d9d6wBKC074mplNIuzYip7oww7mQss8qdJkXvI0e9CJGDk0CoEsbpk9iakFe2G3BtGoagr3Mn4neqZ4nv0FenxOgtxQHXD9/TlmeGq3y6kPzDJdrtboBLd5Ks/LCaRsvPu3t9OMnlAWQuZlqGXx+HgkgFo421bgSJQ5lkByqotE/VwbOjBFcqQSTIDvebfiBZ8svTEwTQG73H54mTpKwbgB/C0NHIjwx0a43oA/lCJ8v4k6GB0FnofdaalwBGRIbdQyQarO9DKyh3D7MA534Lr+Sb7V/gqKib8hDViIpBzoYFQOqSXSlodAT8RMK11Bu2JCjslO6NeUE+NpJz2uhZpilZFvfiFMLQ43p9I2Nl0GI4hfvSY2ReHHY0xOh8vR9oX7RGAYmDvxufphJkqw4oLzpMh330HRuSXc7kWRK0Ydt1AUH+8cQTxRKNhkMk7YlBEByZfLmw/9apCw1MgTQ4qCpDIJBI1oXFdGKTM+dywOwc3KR7xsHKGrz2JkdyHY374fMg0bsfwvSjtadT8rI+zTtXsFNciWjBfmCfqY8JPIwbNUUtNm2EfCS1JTKA+3lBHXAl9fxGjabrTFtE3E+oIQFBrU1HDZ6GOAz+s2iIHN7xKtaU7/Ny2VvY9V2NGCEV5DulXB+g2b567qA8wt6OPLojqz20vyZttTizlFchAn3/YKXzOMd8XmFpii8Bck8eQyZUGXOOKbmkvxc9MV1Nqo4T33QEk7bIuLiZ3q+NQoyQaKVnYpr3o4o+OnJbQvCK2GDB7qp9fSH3OAlmJ98lSAN2Pi3FF84fueoDcI/7A+1bVV/CZx2Y4iPc3rAtPjz1q1UyluKpZVt65UBYeIyPdjGivy3cSJJfIhhcJ/Bt9Qs6IdyTSQDPu/FBpgq7eBWuaCYR0c0SAJLA09AcSsoIdGltbLLIpduTTuX0JLZOVRaIUzT9+9OAAgSwBklajc+GDYyb9G+suyFY3VbJf1gwlnbm3kht7my39VCnsz5m8yU/sqUJJwuHZhSkcKW0ADNpuAg2v
*/