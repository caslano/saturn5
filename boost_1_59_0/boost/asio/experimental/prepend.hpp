//
// experimental/prepend.hpp
// ~~~~~~~~~~~~~~~~~~~~~~~~
//
// Copyright (c) 2003-2022 Christopher M. Kohlhoff (chris at kohlhoff dot com)
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//

#ifndef BOOST_ASIO_EXPERIMENTAL_PREPEND_HPP
#define BOOST_ASIO_EXPERIMENTAL_PREPEND_HPP

#if defined(_MSC_VER) && (_MSC_VER >= 1200)
# pragma once
#endif // defined(_MSC_VER) && (_MSC_VER >= 1200)

#include <boost/asio/detail/config.hpp>
#include <tuple>
#include <boost/asio/detail/type_traits.hpp>

#include <boost/asio/detail/push_options.hpp>

namespace boost {
namespace asio {
namespace experimental {

/// Completion token type used to specify that the completion handler
/// arguments should be passed additional values before the results of the
/// operation.
template <typename CompletionToken, typename... Values>
class prepend_t
{
public:
  /// Constructor.
  template <typename T, typename... V>
  BOOST_ASIO_CONSTEXPR explicit prepend_t(
      BOOST_ASIO_MOVE_ARG(T) completion_token,
      BOOST_ASIO_MOVE_ARG(V)... values)
    : token_(BOOST_ASIO_MOVE_CAST(T)(completion_token)),
      values_(BOOST_ASIO_MOVE_CAST(V)(values)...)
  {
  }

//private:
  CompletionToken token_;
  std::tuple<Values...> values_;
};

/// Completion token type used to specify that the completion handler
/// arguments should be passed additional values before the results of the
/// operation.
template <typename CompletionToken, typename... Values>
BOOST_ASIO_NODISCARD inline BOOST_ASIO_CONSTEXPR prepend_t<
  typename decay<CompletionToken>::type, typename decay<Values>::type...>
prepend(BOOST_ASIO_MOVE_ARG(CompletionToken) completion_token,
    BOOST_ASIO_MOVE_ARG(Values)... values)
{
  return prepend_t<
    typename decay<CompletionToken>::type, typename decay<Values>::type...>(
      BOOST_ASIO_MOVE_CAST(CompletionToken)(completion_token),
      BOOST_ASIO_MOVE_CAST(Values)(values)...);
}

} // namespace experimental
} // namespace asio
} // namespace boost

#include <boost/asio/detail/pop_options.hpp>

#include <boost/asio/experimental/impl/prepend.hpp>

#endif // BOOST_ASIO_EXPERIMENTAL_PREPEND_HPP

/* prepend.hpp
+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
*/