//
// detail/recycling_allocator.hpp
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Copyright (c) 2003-2022 Christopher M. Kohlhoff (chris at kohlhoff dot com)
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//

#ifndef BOOST_ASIO_DETAIL_RECYCLING_ALLOCATOR_HPP
#define BOOST_ASIO_DETAIL_RECYCLING_ALLOCATOR_HPP

#if defined(_MSC_VER) && (_MSC_VER >= 1200)
# pragma once
#endif // defined(_MSC_VER) && (_MSC_VER >= 1200)

#include <boost/asio/detail/config.hpp>
#include <boost/asio/detail/memory.hpp>
#include <boost/asio/detail/thread_context.hpp>
#include <boost/asio/detail/thread_info_base.hpp>

#include <boost/asio/detail/push_options.hpp>

namespace boost {
namespace asio {
namespace detail {

template <typename T, typename Purpose = thread_info_base::default_tag>
class recycling_allocator
{
public:
  typedef T value_type;

  template <typename U>
  struct rebind
  {
    typedef recycling_allocator<U, Purpose> other;
  };

  recycling_allocator()
  {
  }

  template <typename U>
  recycling_allocator(const recycling_allocator<U, Purpose>&)
  {
  }

  T* allocate(std::size_t n)
  {
    void* p = thread_info_base::allocate(Purpose(),
        thread_context::top_of_thread_call_stack(),
        sizeof(T) * n, BOOST_ASIO_ALIGNOF(T));
    return static_cast<T*>(p);
  }

  void deallocate(T* p, std::size_t n)
  {
    thread_info_base::deallocate(Purpose(),
        thread_context::top_of_thread_call_stack(), p, sizeof(T) * n);
  }
};

template <typename Purpose>
class recycling_allocator<void, Purpose>
{
public:
  typedef void value_type;

  template <typename U>
  struct rebind
  {
    typedef recycling_allocator<U, Purpose> other;
  };

  recycling_allocator()
  {
  }

  template <typename U>
  recycling_allocator(const recycling_allocator<U, Purpose>&)
  {
  }
};

template <typename Allocator, typename Purpose>
struct get_recycling_allocator
{
  typedef Allocator type;
  static type get(const Allocator& a) { return a; }
};

template <typename T, typename Purpose>
struct get_recycling_allocator<std::allocator<T>, Purpose>
{
  typedef recycling_allocator<T, Purpose> type;
  static type get(const std::allocator<T>&) { return type(); }
};

} // namespace detail
} // namespace asio
} // namespace boost

#include <boost/asio/detail/pop_options.hpp>

#endif // BOOST_ASIO_DETAIL_RECYCLING_ALLOCATOR_HPP

/* recycling_allocator.hpp
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
*/