//
// detail/blocking_executor_op.hpp
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Copyright (c) 2003-2022 Christopher M. Kohlhoff (chris at kohlhoff dot com)
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//

#ifndef BOOST_ASIO_DETAIL_BLOCKING_EXECUTOR_OP_HPP
#define BOOST_ASIO_DETAIL_BLOCKING_EXECUTOR_OP_HPP

#if defined(_MSC_VER) && (_MSC_VER >= 1200)
# pragma once
#endif // defined(_MSC_VER) && (_MSC_VER >= 1200)

#include <boost/asio/detail/config.hpp>
#include <boost/asio/detail/event.hpp>
#include <boost/asio/detail/fenced_block.hpp>
#include <boost/asio/detail/handler_invoke_helpers.hpp>
#include <boost/asio/detail/mutex.hpp>
#include <boost/asio/detail/scheduler_operation.hpp>

#include <boost/asio/detail/push_options.hpp>

namespace boost {
namespace asio {
namespace detail {

template <typename Operation = scheduler_operation>
class blocking_executor_op_base : public Operation
{
public:
  blocking_executor_op_base(typename Operation::func_type complete_func)
    : Operation(complete_func),
      is_complete_(false)
  {
  }

  void wait()
  {
    boost::asio::detail::mutex::scoped_lock lock(mutex_);
    while (!is_complete_)
      event_.wait(lock);
  }

protected:
  struct do_complete_cleanup
  {
    ~do_complete_cleanup()
    {
      boost::asio::detail::mutex::scoped_lock lock(op_->mutex_);
      op_->is_complete_ = true;
      op_->event_.unlock_and_signal_one_for_destruction(lock);
    }

    blocking_executor_op_base* op_;
  };

private:
  boost::asio::detail::mutex mutex_;
  boost::asio::detail::event event_;
  bool is_complete_;
};

template <typename Handler, typename Operation = scheduler_operation>
class blocking_executor_op : public blocking_executor_op_base<Operation>
{
public:
  blocking_executor_op(Handler& h)
    : blocking_executor_op_base<Operation>(&blocking_executor_op::do_complete),
      handler_(h)
  {
  }

  static void do_complete(void* owner, Operation* base,
      const boost::system::error_code& /*ec*/,
      std::size_t /*bytes_transferred*/)
  {
    blocking_executor_op* o(static_cast<blocking_executor_op*>(base));

    typename blocking_executor_op_base<Operation>::do_complete_cleanup
      on_exit = { o };
    (void)on_exit;

    BOOST_ASIO_HANDLER_COMPLETION((*o));

    // Make the upcall if required.
    if (owner)
    {
      fenced_block b(fenced_block::half);
      BOOST_ASIO_HANDLER_INVOCATION_BEGIN(());
      boost_asio_handler_invoke_helpers::invoke(o->handler_, o->handler_);
      BOOST_ASIO_HANDLER_INVOCATION_END;
    }
  }

private:
  Handler& handler_;
};

} // namespace detail
} // namespace asio
} // namespace boost

#include <boost/asio/detail/pop_options.hpp>

#endif // BOOST_ASIO_DETAIL_BLOCKING_EXECUTOR_OP_HPP

/* blocking_executor_op.hpp
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
*/