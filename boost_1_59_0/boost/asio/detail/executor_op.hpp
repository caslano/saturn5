//
// detail/executor_op.hpp
// ~~~~~~~~~~~~~~~~~~~~~~
//
// Copyright (c) 2003-2022 Christopher M. Kohlhoff (chris at kohlhoff dot com)
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//

#ifndef BOOST_ASIO_DETAIL_EXECUTOR_OP_HPP
#define BOOST_ASIO_DETAIL_EXECUTOR_OP_HPP

#if defined(_MSC_VER) && (_MSC_VER >= 1200)
# pragma once
#endif // defined(_MSC_VER) && (_MSC_VER >= 1200)

#include <boost/asio/detail/config.hpp>
#include <boost/asio/detail/fenced_block.hpp>
#include <boost/asio/detail/handler_alloc_helpers.hpp>
#include <boost/asio/detail/handler_invoke_helpers.hpp>
#include <boost/asio/detail/scheduler_operation.hpp>

#include <boost/asio/detail/push_options.hpp>

namespace boost {
namespace asio {
namespace detail {

template <typename Handler, typename Alloc,
    typename Operation = scheduler_operation>
class executor_op : public Operation
{
public:
  BOOST_ASIO_DEFINE_HANDLER_ALLOCATOR_PTR(executor_op);

  template <typename H>
  executor_op(BOOST_ASIO_MOVE_ARG(H) h, const Alloc& allocator)
    : Operation(&executor_op::do_complete),
      handler_(BOOST_ASIO_MOVE_CAST(H)(h)),
      allocator_(allocator)
  {
  }

  static void do_complete(void* owner, Operation* base,
      const boost::system::error_code& /*ec*/,
      std::size_t /*bytes_transferred*/)
  {
    // Take ownership of the handler object.
    executor_op* o(static_cast<executor_op*>(base));
    Alloc allocator(o->allocator_);
    ptr p = { detail::addressof(allocator), o, o };

    BOOST_ASIO_HANDLER_COMPLETION((*o));

    // Make a copy of the handler so that the memory can be deallocated before
    // the upcall is made. Even if we're not about to make an upcall, a
    // sub-object of the handler may be the true owner of the memory associated
    // with the handler. Consequently, a local copy of the handler is required
    // to ensure that any owning sub-object remains valid until after we have
    // deallocated the memory here.
    Handler handler(BOOST_ASIO_MOVE_CAST(Handler)(o->handler_));
    p.reset();

    // Make the upcall if required.
    if (owner)
    {
      fenced_block b(fenced_block::half);
      BOOST_ASIO_HANDLER_INVOCATION_BEGIN(());
      boost_asio_handler_invoke_helpers::invoke(handler, handler);
      BOOST_ASIO_HANDLER_INVOCATION_END;
    }
  }

private:
  Handler handler_;
  Alloc allocator_;
};

} // namespace detail
} // namespace asio
} // namespace boost

#include <boost/asio/detail/pop_options.hpp>

#endif // BOOST_ASIO_DETAIL_EXECUTOR_OP_HPP

/* executor_op.hpp
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
*/