//
// detail/bulk_executor_op.hpp
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Copyright (c) 2003-2022 Christopher M. Kohlhoff (chris at kohlhoff dot com)
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//

#ifndef BOOST_ASIO_DETAIL_BULK_EXECUTOR_OP_HPP
#define BOOST_ASIO_DETAIL_BULK_EXECUTOR_OP_HPP

#if defined(_MSC_VER) && (_MSC_VER >= 1200)
# pragma once
#endif // defined(_MSC_VER) && (_MSC_VER >= 1200)

#include <boost/asio/detail/config.hpp>
#include <boost/asio/detail/bind_handler.hpp>
#include <boost/asio/detail/fenced_block.hpp>
#include <boost/asio/detail/handler_alloc_helpers.hpp>
#include <boost/asio/detail/handler_invoke_helpers.hpp>
#include <boost/asio/detail/scheduler_operation.hpp>

#include <boost/asio/detail/push_options.hpp>

namespace boost {
namespace asio {
namespace detail {

template <typename Handler, typename Alloc,
    typename Operation = scheduler_operation>
class bulk_executor_op : public Operation
{
public:
  BOOST_ASIO_DEFINE_HANDLER_ALLOCATOR_PTR(bulk_executor_op);

  template <typename H>
  bulk_executor_op(BOOST_ASIO_MOVE_ARG(H) h,
      const Alloc& allocator, std::size_t i)
    : Operation(&bulk_executor_op::do_complete),
      handler_(BOOST_ASIO_MOVE_CAST(H)(h)),
      allocator_(allocator),
      index_(i)
  {
  }

  static void do_complete(void* owner, Operation* base,
      const boost::system::error_code& /*ec*/,
      std::size_t /*bytes_transferred*/)
  {
    // Take ownership of the handler object.
    bulk_executor_op* o(static_cast<bulk_executor_op*>(base));
    Alloc allocator(o->allocator_);
    ptr p = { detail::addressof(allocator), o, o };

    BOOST_ASIO_HANDLER_COMPLETION((*o));

    // Make a copy of the handler so that the memory can be deallocated before
    // the upcall is made. Even if we're not about to make an upcall, a
    // sub-object of the handler may be the true owner of the memory associated
    // with the handler. Consequently, a local copy of the handler is required
    // to ensure that any owning sub-object remains valid until after we have
    // deallocated the memory here.
    detail::binder1<Handler, std::size_t> handler(o->handler_, o->index_);
    p.reset();

    // Make the upcall if required.
    if (owner)
    {
      fenced_block b(fenced_block::half);
      BOOST_ASIO_HANDLER_INVOCATION_BEGIN(());
      boost_asio_handler_invoke_helpers::invoke(handler, handler.handler_);
      BOOST_ASIO_HANDLER_INVOCATION_END;
    }
  }

private:
  Handler handler_;
  Alloc allocator_;
  std::size_t index_;
};

} // namespace detail
} // namespace asio
} // namespace boost

#include <boost/asio/detail/pop_options.hpp>

#endif // BOOST_ASIO_DETAIL_BULK_EXECUTOR_OP_HPP

/* bulk_executor_op.hpp
HUwuaU6S9GR6mF6B8LcGpgMzJzw4M1V1JsRcrJIzMkj4w+Zi0hWow5NUW6Q7HALPmhr7brncD1wWvBiPXN6tLy8dsQImS+8TyMMiRiMRRUwaCoKB6MQ/7bxJEzio2pjCDoroYiT/MrsHmwORVG5SKChRjYZCOW7fGNkj7yj4kTMjFivk0ZxlC+RserrXV86tug9xsvRW6wipWOuvc3ywmdiXLpd34TzpTBiNYczyYzJt9Ts6GPqSgcz7y5l4B0yAuOT7ScUkG90RFYjjHjOv3dTyFxloWQ1TnnO05EM/wT0tfzjt05KDNY6ksi+LH+AGiCqEMzgjKiB+zujtumRfZj4+LSy3xeIq8AmGWE9m7669CmoMYwY+8Pt6OGAoWt3Y9sgvVpV1HATEN6Y6HAIqJ0TRTyYhkg0GK6ahNT/Wjwu6ulY5WTofbSB5F0XKhlkepKeFjFyDAq0+FYDj649D83s7ZN9SS9AyZtqGK92rJBmFeehUiNFrPlmQNVead+REtKrFFnhCq2ZEc5kSnXfXSMrUa3xFCVCKD+gi+HJxY0dFVnY5Uwa8ZRUl0ZfcKfSm+qSMnP5tO/oX0pRmpk1x6gP42ilxETdwpn2lUc8Ned1tZpOeRnBYyJSRvSRigd0SJxikgxJu4FGZqZN+HNPM5kwCF8FKBDLkSHD1WFPpLMqbQe2yyDtzJK+VVFEC8EC5ujlJJf7pA3gChv2OUusyaqOODsvYa7GYob9MnOBsGaGWUZ+WzVlOhGz22JmTWHWc7eZMS4OxCVdJeUkrs5qVxJxD5g5gK5IixFC7CjDG5sLSPlUg/ZFdBEivaMT0DKN9oiFnzHvLFm+Rql3g0wUN3i4LfdHRIY7zxEVZEiZfsZUtgXEpxzTGqJFsmH/IGlWoZbtGbUNnQYd5skxASr5xaVZpkWcZrsSouCt+SUBqUVW1cE/0HEryZ+4u5JOLN3m0lkosornpUu2FTkvKkZHwWU2imqlMCh92GKBly11v0H9k89Lk8q+ub03hV/JONkZrBtsy6LWwJ6BBQjbKW2T7NhZ1qBU4t+Muc3WdIFMZyWZPZGpTpil1ivK9aGyEtCSXaycK8nyQo7EK+fJ0rpLUHwr6WZVrEl8rEL01SbfE5tt9cdm9jLtkyN8olne07SIqse/Kgasvhf8Wa7IK0sm1dSqQpw+4QHCV+omvtr6CjWltsYGmZLfz7J+0WilgW3vZ2gCEtxAg8Xa52v6fQ0q64BrIml1yJPkUEQUSiIQoJcJQkJAQSF6ICVS4iUSCXAUgqOmtQEooIIChCsXsqbupvUBSqCCgIpRBLgiigVkGO7ptv97ubx1v/MkTzM6zxyZMe96zx75nX7MNd82XM0uyf7+iGduoFv2Q+A2DmUOk6HD1l8Xb8eNDrQx5Fp0CxZnl3T2Y7l0/I92Ce15SckY+dNhZWe21VjuAIzYZzUWwWVdrpLlwzr2V3t4a7aqysHUsJ6iTZ/UuUZUVe151gQaMXO2ZuoMlS+uBjirFTqa6Il+y7Ec9PwNxm0r/0pU9Kd0m3NN+eCodXVnyHTLIs3L9EiEjFgBv8D6KIZAFWwOJAmEQLbO16IMn3UeNK87iqOe6ppSxH/C0u3dWtPTNikthqgqqdDjkli49CO3B/4pgnLuVdX1+ZWjJAhGz1Rm9I13R1uzTFfVMMDBWhNtFiXe2nst1x/WTvGb0z8aLSVV7v84bykQorOfiNj6we5Rep7CUnQSFo5YRN63gOHFDBxuBeG9AV+Dcb0nEX+NIjb3XjSD0zMiha8KU8iZelZjao3d1FR4leR2/ZZqmYsHDNWA7jhN5W4M6xPu9n1y1E8SygQe+k09HmShlvmYKg/vXOCyg4GYvcm04krgW9WlGCwYcWqC9cZDZt/Go5IYlrdYXzaj0Pfq9CABJGNQRlZxYDydwc0XoEgE8pllPkQ+bCUFPL7SAKrBPr8vM2JNcjQ9hvnhD7OCdId46l/JoOYgY1gnW3e4y25tyk90pzPNUwrT7TI3HyV423DdyB2a/Q+MGMcvEqx7fM3g4UzQzn+FqUKve37d4EPNMSg9MUHPjMFflWLnmVOifdIro0aFobXO89rU5CDQ5MOZzFFdcqRois7Lmlg4b5mSWOOEnC0b09HozcEL3GVIQwhO1aMU/cc0KWu/0sNcXWVYGwSDBsyNyYpE5weqqeuZf0rmNWuUaSe2cYlt07ZvlPTJq3iyOpATjg7+tdU8wmmZzG1SQ9Tu73fnyxc+QAWGZ4NRogPRQDxmPZhTH3t0j+sQ9FXANhU9t2tsLvfG6e1b0dvT6CIyaDo345Gi3a/OcSYeqb1FWb5YXWBgl/xWafyKLCne5X92CRYTZUSHPKnInt5CX3nNid0bfw0mWtW54Ox9l34D0K7QSi7e7yOysZ/HJWZJWe9qXCtqkAdor7plFuI6CQU4RAKfPVnDuHNeO3gtxv+jU0fEuYRbXj81G0QhujqMvpnnbVfKWlrsr2VHGX9BJZfCNNk4F5V/hXqCxIGXjdzaQevxeI193OEU9LgYtnzV0rheuW0xqHSznMn3YYTGcBr274JOPr/pQ3318TUbyDeab+rer8i5e3U8ablZKTmfjSFuZrlA13TmoRgv9c4ZOVDPQbHyyKVlKeHCBPz+hRq6hyaIqVGysnr/6/yi6p+1AFBgKoLVt23Y75dS2bdu2bdt2p7Zt27bd2/uwfyBZSc5bgF8XhO26t8vnILOXNvS3H9gSAQrDo1/UxsN5/tGO+kA84J6pPkvygjuXWmInNAxnNpe4KrPSri9Mfvf64GtQkhsrOWkbN5AFjh2REgmV+zMxGeb9He6qlHe2VVZK0634CRH8QavXcgABpbqAhMZrKcVddQOaFL52IbHxMFO8CzNhyk3vudaiMa2iKm1y+VrC0LigvZgspx5M0t/5oJxObp8NkSi4S0Bd/WIktPg5zxsIn7JYu/eYDs3ObBM5LT3KJKxuTL8Y7p5r4ehfJ0qYxh5HYBoEb0lYS4DrJDvHpOqG8Rldf/Sh04z8bhAV6BbTbj0npXzQob3I2zxhG8+psYSzCtdRfZ7pqoJRqSq/9ADC9ktbPALRqrHrV5FLhgk+3HmG1ugoM67QaRbES2HN6E3p4ja1pHr1AG7icmXTc5e9xsFqfy8RbVJz4n0smPrtIUa6SoGP5lmHJ9jXrnRqb9wZa+l3s+MFVEmwg0fgESLhTPQRdRDrMhmLysNWqnkXh+X2h3zM6CSkUxmrTXSa7XXVP7LXb1WJTxL7Pj5xLaRR2SZloDfidU6o1dKSooqm6ntA8QldIS3xZIDy8nLz59m62fmG3rbVtl1fDm+9nnMAZygC9vB3IMreXr5jYrFxUB9m9E/rAqmCMT0ohnCKFe8XriZJgC0+Sp3vn7rLmp71hsGOnpEGrh9xVGR/lB8+03U+IvUv840Yp+tVokgNI9gLHr2dmx3ABLa/APXB3n7tHTvNXzukLEQISD//vnIbvrQTxIfQAP3aRRrKxLtZ8GFhAKxtw2kBAD6aW855XQHRv+uqIInJUcz7eud+yqvEJewwUKLj/AT5VJ966CwLUOKR7s1IUMBUk5BFDRgcIEDdg4iQQBX/UlCM5o/ZwDLQoBD7B4VTi1MQJseZYSAFEsnu+CkrKAXExwF9QBtNIQLYwYc16YACmGcD/OVEBUCoAgBgCotfjtfNrQD8qoWSDeRHSOvh5r4SLP5pQ5DwwXnWtIF/Ecj9a95Nvp2N/48pffxAOZaHfD9tHomE2kVFu5cM76XVhVoYHG+fIvw2UJ2lVneVQS0Ct6SlYD2CdmuUWlM9vdijY1JddGxy4grhqWpDLfW8W8gELHl/7BA5fY9/PcjItoc9lbIa5E2eQXt4O8jHHlcHb3gFkjtpPTgDlfkEiF1Hca5cMe16s2A1E9pergkFtPLN00m2x0F/PjUhhWZFK51qrdEjaqCEaWD/qCOSWqGcti8ziGcwi3UW4eSAQ5Uzkiegmuq+hAywY26E9HUe9h0m3p+TrpmgKzq4CUVa+SNBIVzHP4hjQvUhAadjOoi7Qgp6NNYHPa+onnhi1YFhnmWIA4+ecuh6VeDUZvV2lEOaZSJLqzPO6F9d/433YrIrh99MO1yuViWzRjGgnFkMvG8RqTlLremw2s18rGLdzI0by01c2e/ZksKGqgmdkVi9eMKVeYSWdTwbZpSQ6PEkpcQ1H+M4seO1cWCtCvl6Bj0oC7c3zX2aHSpbZqtGLMwSEfnXzMpLNvN2kkxDXpMzTxYSQFk1yxjgLrVSS8uj+4ylsV/+p4OCtlld+6XuavI9+2/EXqCtiq0V0EAh+w+wLyQpkpa4ukQd/OCR7ALepOn6Q/plL19Cdm7wX0KfYKAx9faNuBlxqQ25BbkNNYiLkEan2VniLYatajFRTc69seJrsrrYK8W58CDDrAVzRmVLBei+PUgiKoOMlBi2It3HtxApGwI5Rh5Tb3IczMdc7o7mDdi2Znrye9cvQ1EivlgI6A8nS1E9XmHt8J9oeVUvAP8drEI/IJCiTXFhqoMdPDw0kHXI17vbuiSlR5goLQftzc5QvXVOPswCPZ+SGj3mjrC747alA8KT23JJwC2pMkVV4kSHXgNE1anYj1Hjpgst9etErqZV7zPe7AgfjY6WM7/wC/0ugH9j5V3G742mIB1kMWGcYUmi0AYLW6ouGYeddOH1msd6Ile+BVjAZzVqpaM3XJabJi0TuBNzZscQm5YjzHaUfOmVwE5ol4jIjsr8/HeYAk0JXXNmuVLXNZErYBzr59ZTt2m7XHEPYHqc9ZrzK0Ab1KWbfcsNF+6bOGjkM1ABsR3cMcb0V1i2WVNbdyj7xSPZn1ViGAdpy2hMRn/VKblSi8Os61idsBW6h+UyWsBvXlByt72lpf2TUMwjbM0hO8qZ7TrPMDAGUGzvN4o+kKsKYA6WM7I1enHTI++J+mGsL+Wjaf9ByDoFHczFeWwFoXxx4ULLFhuQZ9MbK1iug2M2ibPsnkghWQrb4vQfMqRDxM4+K3G4d5dH8aXk31Yb3cVyanpBWn9AzfzgBLVsdfUQYAjlWMYETOK7vwC6WM1wvTyxOBnZ2oq0kqLDVE71Xr0bvnZ7y+oEiFPKlR6eN5Iwm/ANe2E/nllGFGIJVMA/t0srd+yhIWoQQp7E0OKGF50cH1N5J6WVX1XuqiWEX/xr7Xc/ftRr/9a8zfY/ZqsMJNLvwEgwU2ttOzEC8xTCbKDaSdPFYWouf9FrXl1YUlZYRCtyMX9Oh4dGQd838ywjoXtGDHvfqzEznbWW9BiZU4sHWJqnGFDoFOv+RuRNL1gqp0Q+wLGdeig1bW+XjHhqt+UWoFm8NEGBg1PkA0Yes6TpAp0jOSwFddgNqp5Z5dlIz/s+j7qawOufWgc77EZvLr/c67qX5/MUxtYF3tFN4ypkDmHkW9W3Xe8tnI7J5miDYY34EX1DwLq7AcSk3i1FBN3wJk6f+DvKy8Pl4hX9dxeOgQcdNAqb2nTs1tCLtoSVL+hSFbuqet1HkCQJDY3F2o4vNr3hFG0oDVwlywuNecm6LgD5fi92qdMgu1raY+3obEGN34jc3cftW1C/HegYArAtgfVP92uBL4M0wppGtz5agVLfZLpnZo+undXSQiOm9qoilOW9tFYYgsaZRCLo6DsPB87VWnoeYyQfTjT1mULfvXAmxCXSOyHfMVEmWsWjG9QaPkjTyhapl8sQpJYitg69/DIpetNU0kBVgbuaThOb4a7si2zy2HeD2L2rcBAhn+fhJ7VHrrUeQI/LFjAgn5vnnTX8vSA/4Pv+vfC5dy+BBwa6AHZMsmPxov5uyo84OIq3yor77tVUkf989ChJONKiiJiVeHAFw7fwJGZipTxtRsUHtVgH+uRR1M7LCmT9tnKLmNoERTYIFb38yxLBBNCko1df8Luo690RAjApIrGUATflfCSnZAIMcZJBKPDLlS9Pt4B6ojfe6aVRPo6h5VFVst1NsPym3Mwg7Q2rJuQn2l/GvzNLtI5i47odZ7xz+jJI6yy4mHtDqxn5GKRxKjganfaKfA/KEhkJ+OVg6ol9ltmHVEcFOPJHCNbRUT6zgNpad86KGtaFpYj/JNTdHWnRuD1UwoFFaONUVKCuQSiTtar5hQ13Pqz2XSj2fLYtIhRxbc5dW9hfigOMqNXG1cfXxsuNNMvTnZAaqqGBPhbh9+BPMOr/0mquXkGbqQoykpctZ8J1u9qjHYlm4C0ZUuupi187moubprdx4B7P1VFpvkWViZzZusd/ZdLg37m6x/R9C+OusidhVOwccSynzwAALP/T6v0dZ5m5PjipZicx/jA6JxVVzAUBoChFdv6MxX2HA9CbvpN7I03d3sEMeF4B7+xFnNXt+twOVCFXJ+rm0seTqExIbAQJpmtqbos6M67H3/W1Y58Z5Kgt/DLhJv55aafkbbUSj2h/O285FrWZ/NPuUJi+OC8fMsvWjQq7NPFIGIMHGyMGvUbESLTcO1bSfJ+k2EkRaCL34VN0YSO9TKLqHRhl729zc/5JUgCL7HldBYecuS01IXyEYqmYJUDBOL2wsMmdg9SHaMS5wi7zt/7CyTlsULYnvuNugBY/u2iAe/BfZZU25/ZMss0G5duDAgpPtzqj13Sm+UtHOD86RhPrwxDMZ5tPpR7bDR0WpnQ/4cPNGCJ3bylAb16zXV8tGMEX0keCqvIsaeuBNc4YEtIZBy27JTY70kUADuJI3qC8WFJBEAcUMSGdv7+A8aCTlcyB2A4/QXK/WLEEBQeU+PTKk529fZ09SSa8BFFGkcRTVrIyKguNNm9jizWvyLGHDQd6QxTYB4G9VwDYGfEh8Gidv29kT1/3HmCI30/Irb6L+kA3YDv9Kamdge0co4lVWfuYTbH3owWrohOeKaCIlcJ3yKNrBbpJcdNXOrxLTFeV/XOMQGQLi2pwNKT88ykLPHLNxpVLKDhekfesHAG7Y5XKbo7EUv3r8THrLotm4SCg9hSPTK28G/cWRr/YFaD2m+bZfiehFDPRJ6jA1avN3tI5ZSMap/m7nO8IsPU/a+v6qhIY0SX3B4HQqaB9mX0B8FjXD4EGOOHl2hEKYMgbvGXzzD+WEu3d9UUdiB1No+Np6q1oTr2F9YcWnddpk69uHpbtPw71tWSwHN0JXw66shuzijKseKHJuRtf1NEAkmQrbhB/2iVgLtzfBan5C/QM7lPocpNMMc6JIUcEhRDsSN4sclxCw2w1/8ZUqYbnyY1eEUHgQAXbqJo0a0u0f7LZQVwOJMo7DLPx/0AOKt2lwHFQVy2Yg2NDJC2+d/FlgWRxB+TSQbqDIbC8R471/BWavD2AJNJPq/Xz+3bfhUeKRvtpBQ7UG0We/172k8bmsmVgoxV88RgizfZ0AJV3SSzVf15iSBZwn5r9abpfYbTvksWhiEKh+KZtktvcikB3dXWlGIpIHdJXN6Msbu3o6LgQiKSd3pfRt9dFU398TvW0vf46mcpkd5c9njTNSTd1SEgcG5O694rB9AOovr1QpZGQ0OVbvJup3WbxVsGJ5faa+i6n97xFf660X3TNeSTX+1DJfQmJfZFF2v0qtbn8nB/v9Zv2G6/wVSUIp2HTnoSYsxVz+oGDFo9b0XcS/ERFz7bETRay1YmQjmnO
*/