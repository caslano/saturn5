//
// detail/completion_handler.hpp
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Copyright (c) 2003-2022 Christopher M. Kohlhoff (chris at kohlhoff dot com)
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//

#ifndef BOOST_ASIO_DETAIL_COMPLETION_HANDLER_HPP
#define BOOST_ASIO_DETAIL_COMPLETION_HANDLER_HPP

#if defined(_MSC_VER) && (_MSC_VER >= 1200)
# pragma once
#endif // defined(_MSC_VER) && (_MSC_VER >= 1200)

#include <boost/asio/detail/config.hpp>
#include <boost/asio/detail/fenced_block.hpp>
#include <boost/asio/detail/handler_alloc_helpers.hpp>
#include <boost/asio/detail/handler_work.hpp>
#include <boost/asio/detail/memory.hpp>
#include <boost/asio/detail/operation.hpp>

#include <boost/asio/detail/push_options.hpp>

namespace boost {
namespace asio {
namespace detail {

template <typename Handler, typename IoExecutor>
class completion_handler : public operation
{
public:
  BOOST_ASIO_DEFINE_HANDLER_PTR(completion_handler);

  completion_handler(Handler& h, const IoExecutor& io_ex)
    : operation(&completion_handler::do_complete),
      handler_(BOOST_ASIO_MOVE_CAST(Handler)(h)),
      work_(handler_, io_ex)
  {
  }

  static void do_complete(void* owner, operation* base,
      const boost::system::error_code& /*ec*/,
      std::size_t /*bytes_transferred*/)
  {
    // Take ownership of the handler object.
    completion_handler* h(static_cast<completion_handler*>(base));
    ptr p = { boost::asio::detail::addressof(h->handler_), h, h };

    BOOST_ASIO_HANDLER_COMPLETION((*h));

    // Take ownership of the operation's outstanding work.
    handler_work<Handler, IoExecutor> w(
        BOOST_ASIO_MOVE_CAST2(handler_work<Handler, IoExecutor>)(
          h->work_));

    // Make a copy of the handler so that the memory can be deallocated before
    // the upcall is made. Even if we're not about to make an upcall, a
    // sub-object of the handler may be the true owner of the memory associated
    // with the handler. Consequently, a local copy of the handler is required
    // to ensure that any owning sub-object remains valid until after we have
    // deallocated the memory here.
    Handler handler(BOOST_ASIO_MOVE_CAST(Handler)(h->handler_));
    p.h = boost::asio::detail::addressof(handler);
    p.reset();

    // Make the upcall if required.
    if (owner)
    {
      fenced_block b(fenced_block::half);
      BOOST_ASIO_HANDLER_INVOCATION_BEGIN(());
      w.complete(handler, handler);
      BOOST_ASIO_HANDLER_INVOCATION_END;
    }
  }

private:
  Handler handler_;
  handler_work<Handler, IoExecutor> work_;
};

} // namespace detail
} // namespace asio
} // namespace boost

#include <boost/asio/detail/pop_options.hpp>

#endif // BOOST_ASIO_DETAIL_COMPLETION_HANDLER_HPP

/* completion_handler.hpp
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
*/