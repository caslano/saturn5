//
// detail/atomic_count.hpp
// ~~~~~~~~~~~~~~~~~~~~~~~
//
// Copyright (c) 2003-2022 Christopher M. Kohlhoff (chris at kohlhoff dot com)
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//

#ifndef BOOST_ASIO_DETAIL_ATOMIC_COUNT_HPP
#define BOOST_ASIO_DETAIL_ATOMIC_COUNT_HPP

#if defined(_MSC_VER) && (_MSC_VER >= 1200)
# pragma once
#endif // defined(_MSC_VER) && (_MSC_VER >= 1200)

#include <boost/asio/detail/config.hpp>

#if !defined(BOOST_ASIO_HAS_THREADS)
// Nothing to include.
#elif defined(BOOST_ASIO_HAS_STD_ATOMIC)
# include <atomic>
#else // defined(BOOST_ASIO_HAS_STD_ATOMIC)
# include <boost/detail/atomic_count.hpp>
#endif // defined(BOOST_ASIO_HAS_STD_ATOMIC)

namespace boost {
namespace asio {
namespace detail {

#if !defined(BOOST_ASIO_HAS_THREADS)
typedef long atomic_count;
inline void increment(atomic_count& a, long b) { a += b; }
inline void decrement(atomic_count& a, long b) { a -= b; }
inline void ref_count_up(atomic_count& a) { ++a; }
inline bool ref_count_down(atomic_count& a) { return --a == 0; }
#elif defined(BOOST_ASIO_HAS_STD_ATOMIC)
typedef std::atomic<long> atomic_count;
inline void increment(atomic_count& a, long b) { a += b; }
inline void decrement(atomic_count& a, long b) { a -= b; }

inline void ref_count_up(atomic_count& a)
{
  a.fetch_add(1, std::memory_order_relaxed);
}

inline bool ref_count_down(atomic_count& a)
{
  if (a.fetch_sub(1, std::memory_order_release) == 1)
  {
    std::atomic_thread_fence(std::memory_order_acquire);
    return true;
  }
  return false;
}
#else // defined(BOOST_ASIO_HAS_STD_ATOMIC)
typedef boost::detail::atomic_count atomic_count;
inline void increment(atomic_count& a, long b) { while (b > 0) ++a, --b; }
inline void decrement(atomic_count& a, long b) { while (b > 0) --a, --b; }
inline void ref_count_up(atomic_count& a) { ++a; }
inline bool ref_count_down(atomic_count& a) { return --a == 0; }
#endif // defined(BOOST_ASIO_HAS_STD_ATOMIC)

} // namespace detail
} // namespace asio
} // namespace boost

#endif // BOOST_ASIO_DETAIL_ATOMIC_COUNT_HPP

/* atomic_count.hpp
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
*/