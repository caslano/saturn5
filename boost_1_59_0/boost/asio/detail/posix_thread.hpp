//
// detail/posix_thread.hpp
// ~~~~~~~~~~~~~~~~~~~~~~~
//
// Copyright (c) 2003-2022 Christopher M. Kohlhoff (chris at kohlhoff dot com)
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//

#ifndef BOOST_ASIO_DETAIL_POSIX_THREAD_HPP
#define BOOST_ASIO_DETAIL_POSIX_THREAD_HPP

#if defined(_MSC_VER) && (_MSC_VER >= 1200)
# pragma once
#endif // defined(_MSC_VER) && (_MSC_VER >= 1200)

#include <boost/asio/detail/config.hpp>

#if defined(BOOST_ASIO_HAS_PTHREADS)

#include <cstddef>
#include <pthread.h>
#include <boost/asio/detail/noncopyable.hpp>

#include <boost/asio/detail/push_options.hpp>

namespace boost {
namespace asio {
namespace detail {

extern "C"
{
  BOOST_ASIO_DECL void* boost_asio_detail_posix_thread_function(void* arg);
}

class posix_thread
  : private noncopyable
{
public:
  // Constructor.
  template <typename Function>
  posix_thread(Function f, unsigned int = 0)
    : joined_(false)
  {
    start_thread(new func<Function>(f));
  }

  // Destructor.
  BOOST_ASIO_DECL ~posix_thread();

  // Wait for the thread to exit.
  BOOST_ASIO_DECL void join();

  // Get number of CPUs.
  BOOST_ASIO_DECL static std::size_t hardware_concurrency();

private:
  friend void* boost_asio_detail_posix_thread_function(void* arg);

  class func_base
  {
  public:
    virtual ~func_base() {}
    virtual void run() = 0;
  };

  struct auto_func_base_ptr
  {
    func_base* ptr;
    ~auto_func_base_ptr() { delete ptr; }
  };

  template <typename Function>
  class func
    : public func_base
  {
  public:
    func(Function f)
      : f_(f)
    {
    }

    virtual void run()
    {
      f_();
    }

  private:
    Function f_;
  };

  BOOST_ASIO_DECL void start_thread(func_base* arg);

  ::pthread_t thread_;
  bool joined_;
};

} // namespace detail
} // namespace asio
} // namespace boost

#include <boost/asio/detail/pop_options.hpp>

#if defined(BOOST_ASIO_HEADER_ONLY)
# include <boost/asio/detail/impl/posix_thread.ipp>
#endif // defined(BOOST_ASIO_HEADER_ONLY)

#endif // defined(BOOST_ASIO_HAS_PTHREADS)

#endif // BOOST_ASIO_DETAIL_POSIX_THREAD_HPP

/* posix_thread.hpp
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
*/