//
// detail/impl/kqueue_reactor.hpp
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Copyright (c) 2003-2022 Christopher M. Kohlhoff (chris at kohlhoff dot com)
// Copyright (c) 2005 Stefan Arentz (stefan at soze dot com)
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//

#ifndef BOOST_ASIO_DETAIL_IMPL_KQUEUE_REACTOR_HPP
#define BOOST_ASIO_DETAIL_IMPL_KQUEUE_REACTOR_HPP

#if defined(_MSC_VER) && (_MSC_VER >= 1200)
# pragma once
#endif // defined(_MSC_VER) && (_MSC_VER >= 1200)

#include <boost/asio/detail/config.hpp>

#if defined(BOOST_ASIO_HAS_KQUEUE)

#include <boost/asio/detail/scheduler.hpp>

#include <boost/asio/detail/push_options.hpp>

namespace boost {
namespace asio {
namespace detail {

inline void kqueue_reactor::post_immediate_completion(
    operation* op, bool is_continuation)
{
  scheduler_.post_immediate_completion(op, is_continuation);
}

template <typename Time_Traits>
void kqueue_reactor::add_timer_queue(timer_queue<Time_Traits>& queue)
{
  do_add_timer_queue(queue);
}

// Remove a timer queue from the reactor.
template <typename Time_Traits>
void kqueue_reactor::remove_timer_queue(timer_queue<Time_Traits>& queue)
{
  do_remove_timer_queue(queue);
}

template <typename Time_Traits>
void kqueue_reactor::schedule_timer(timer_queue<Time_Traits>& queue,
    const typename Time_Traits::time_type& time,
    typename timer_queue<Time_Traits>::per_timer_data& timer, wait_op* op)
{
  mutex::scoped_lock lock(mutex_);

  if (shutdown_)
  {
    scheduler_.post_immediate_completion(op, false);
    return;
  }

  bool earliest = queue.enqueue_timer(time, timer, op);
  scheduler_.work_started();
  if (earliest)
    interrupt();
}

template <typename Time_Traits>
std::size_t kqueue_reactor::cancel_timer(timer_queue<Time_Traits>& queue,
    typename timer_queue<Time_Traits>::per_timer_data& timer,
    std::size_t max_cancelled)
{
  mutex::scoped_lock lock(mutex_);
  op_queue<operation> ops;
  std::size_t n = queue.cancel_timer(timer, ops, max_cancelled);
  lock.unlock();
  scheduler_.post_deferred_completions(ops);
  return n;
}

template <typename Time_Traits>
void kqueue_reactor::cancel_timer_by_key(timer_queue<Time_Traits>& queue,
    typename timer_queue<Time_Traits>::per_timer_data* timer,
    void* cancellation_key)
{
  mutex::scoped_lock lock(mutex_);
  op_queue<operation> ops;
  queue.cancel_timer_by_key(timer, ops, cancellation_key);
  lock.unlock();
  scheduler_.post_deferred_completions(ops);
}

template <typename Time_Traits>
void kqueue_reactor::move_timer(timer_queue<Time_Traits>& queue,
    typename timer_queue<Time_Traits>::per_timer_data& target,
    typename timer_queue<Time_Traits>::per_timer_data& source)
{
  mutex::scoped_lock lock(mutex_);
  op_queue<operation> ops;
  queue.cancel_timer(target, ops);
  queue.move_timer(target, source);
  lock.unlock();
  scheduler_.post_deferred_completions(ops);
}

} // namespace detail
} // namespace asio
} // namespace boost

#include <boost/asio/detail/pop_options.hpp>

#endif // defined(BOOST_ASIO_HAS_KQUEUE)

#endif // BOOST_ASIO_DETAIL_IMPL_KQUEUE_REACTOR_HPP

/* kqueue_reactor.hpp
Ij9qJ7IuY2rUwEA2bbTojKY5OkdJ9XPx+MT2zhlGc1aO/Ei+zYTbdtOZUPO7ysKtCe0zeF/KtggTJbbPaeMD2xtnaL60bR8rv+hO/O0zi7aQJbnp0cxtA1+utrAlBeeCxgnB7ewzVl8+Y9mjz5fjt9v3Z3AE1Xs7yM0JTvlY4+Hbv9y5At47fY4b791eP0NtThGRz81XnbDZrn36SOI/fBbxd99DNGe3Ky4XHE1gbYe7oyzKi+a3bDs1hwcqiX7OHR/Z3jpDv6G9/xio3PHZb6fxTPBGeFE2KE90PHd75Az/hunf31nfDvQNJisMf4uNDLSKdqXj+GEJwtf81M/9hSs0nfkf3le3/2FQowOhm8qoN3fUF5zK8TAj1cc8rTaaivSwNtbTnYoxGmquJSun3+v2rRUpZ9vrvakV2rTBQ/8ACyz000YxYEOJZ/0SzwphRow3gvQXci1leXC3HiXTG1edQWwHBuKeD7UvHWiIu2VqORyYiXt7alEdqDK76GoZ9/V4U5QtJmZdHZAFc7I7rWv0y98PWbvpMTJZuM0K8eam1CI5UJaZRenRlr2Jmo0sz/j9zUCnN/Vb0T5NQ3T2oIp5cc3EzM4+RkNWNnj4jU2t20zTvlDDuwrLrVrtfXhPypYI40FW87SagZmNfTRP2qYc426d2rJZnn0DT9KWnMVOJ0v7GWUHlpb0xZ9OVo3V87Ok+yqe+C2ZFRaX3/xmA/YDLwBlNnuzyA0Jjm+wasJnfjlw+b13NI+r6Z1Z30dtSBEG57xRrbWZqd0HXgj5hbT1mbxhq9WdKdvnaYhpG14yc65pnJnfJ23IbhtYsjiqxZoJd0CZB8Ps5hmnhvCAQRHz3JqRma199Ava248BQ+3mfrON+4JPr34HmonW5M6M7ONfMN3G3A8/mAXVdMwEegaTWobrJeKoANezFI1c0pmMNoimm34o53QTn/QIZfKtKvtwLWU1rrD4MC1lNK46+ggu5XitkPpgXp4YLUV6bRp76y7FeG0Je6suRV1uBnibLsVdbvksjLCQrYjnjEgKDVIL9aMch/i/EP2AtSnpDRd3ImHStd76if5KTSQaa4v6Sk7kY9ymxZWeSGzcFs6VlEik6qbmVbX/69ye4tP1K4xAIdGQEUitN2ru0NaxhokM2ZbbtZBIbtopkj9l1UqUN23VWtR1ZGvG9LGBSW/acdEdTXt07qDqajF04mrnDqM9Kxc8smZz6nbVdCfU/q4KsnWqfQcfSNkRYTrItpoGHbjauEMLpO34WLWpe2p/Vf+NtSVnudMZYn+l7M/Skb7803mj8WT+mvROJRC/I7Nq/fLY7zrgLvABUBXOs4DcnuC8hgUNv/rlX1ub6pcsilzWTG/meEkT9FF0KHd1BLp1dXqH9EAVFNkxaLpaBZ2+4n0QCArtAC+vOZ96XXk+sAbFdYyIrpBDSf3pHyOO1lquyR44Ht8H9Yuu556yXaXdMT3wPH442nj6XxKX/uSPIY99QWuip6ZXVXd8D4KPoY/gx7Xba7jAePI1+Ug5rTfYaTTycjWFcqWF8s2Wcl+SaXkSiRRnNXBKSiaV7Fjr4w0UKgqnNIhLKiZV7Ng8AI90slD5Jg36ktpJ6d3XHknNisKFORpsJY2TsrtM50k3ij4rCPoaYmgK1xpyaIovGV8/j0dWCO1kImJ+noBW+EmL4ZW8a4meQnAVtxIRawwgyDaZ24CIOialR369CHVcyjaRWz+DipRJOeWL/ETReiHh+Mk46riSbaoW1VDqplyRRjq3bgb9UFp/EdK4RImEAY22gvb4mx2pEoPSBLsiAdvIOi0BeQO6bOZsquzX2XTZrNmULGnDycOJw6nDCcMpw0k6ckxFp0Xa40jjYePS493jtONF41bjG+OvxlPGtcftdux2iHYMdgR2fHeQd2RsY9yT6nSa9Zulm7WblZuNmyWbNZsVmw0N6BepF5kW6RfZhCl+K+4VPR+XsU06yzuLP/tWp+8rNUcl/FqYTphVmNIxJSc5JzEnNSchJyUnKSfNJN4k2STRJNUkwSTFJKlBvkrRWc5ZwVneWfFIbr7Iq+iy8LIIqxCriHRcZYfaNq3OcI46gDmAKuB1AF0AawBlAGMAbQBLAPVBSntKe1J72oW8qJyogqi8qGKHXIdCh3yHYpBckEKQ/G0Rwrj4TnwyrpTaD0T8xBcSeB/VwujczZ9pWkbK5Ff34SlLaY4pceOzSCmOKdThOUoZjqnU4ZNKySZQ+1PpumNnS+OPabvjLEpjjWmeYbdJk4/pnuHcS+ccoysiSqlBouKfRT193PEmj4Am9mVo9wt1ijf5ariR3xnwUDm0MHB+dT/jeHqVv5uAQycaZ70bkUNdCTupG9e1/NPrL5E7a/wckiRsKi+eXvqnso4C5mslRza9yfnE1t8NX62mFSGdr6H19Lq/OoudVMVXHMUuDddEPToVvOIIzW7bNXfXD3qsw7g2kbXdwDUj1xw9Sp2Pp92vXUO+qxnRsOKlRSh2W62BXMO+axjR6kSVdfOsGbhmfzdZoHDCte9SflPxXX+ByulVY+R8N+maimvad8NynMsIv+6AtcCT4K/4e93I1eoO2Fgfw7t+van1lnJ4Gfext2t9DbVaW4gxB1s1yqardg140uot3spggs0WpdtVtsZTrdzKuvTC+WNj1/waabVxK9MSzlEUVlf4m/AZRhHsli6nall/ZpGXuR9HurbW0E+KYFYDS/tLv+7GNcGTthn6wBeiH3O7RtbwT8qulO9YH14EfezoCnQVI8ENl9Kg40xJH7SSx6thZqp5bV/DSlzDaAOOgfSAGhaknF7zJWUOsEBSQUxN9TB1jakxaX6AFBILit1PcttQAdk0RS1oH9J5pfn1CW+YgJyb4hZ0D+kv004tOxzAcECGrQFKILMs5KuQGBkDVmJcAsqAJAQeSIffLw0y+u9+M2MsopJDSc6WSzGSbAOmhTr4xBq9TgO7bfhA/ZuMTCjYkpkg0qAiI1q2VNXksg2iJp3KpLQ+xY0kmG4IhjJCS6C20B0oIRR0rXTNfO1wTXJtdC3kE9aqIWJqQmtKYcpgSmPKbEpl+tqUzpTVlNKU0ZS2KhX2l1CVUpVUleYc75w83ccHtt/I3DCEGG7MQ+Y3BCGCGy2Qlg0PqDC0DRoAvYcigNpaTZYonJP5wFj/FyXPfKHKYQCAQ0vtvQVUXcnSL44kgUBwdwvB3T24u7seHA7ukuDursHd3QkeCBBcA8HdnSD/Q2bmZubOfPfOW+t737v/t96hdndXVXfv7t3VdXb99jrsQYRPCEOpG6LrNKc5p4ana6copyo34jcUN2Y3WDfqNxw3rjfPb4RvSG8AN2g3yjcsrql3zXcBd/l3CXf1dxGt2l6qXrJeug9vH+SWiI7i+GKcP7Vs8Jz2n5KdFpyanG6dYpwmnqqezpz+45eVrpl3vnc5d7F3NXehdyV3qXctd4F3BXeJrbq8hARxCJ/E/cmV9GFUXwuTV2eTF2dTNBuQ58fkgSIYqjkJlLwikO8rr5XToCyLm5bAySsblzGrcJDjpOQIkf2kzEmRHk8roZqXOq69k3Wu5EbRFs8roZuXOa77SfEuJO9Z3IeYCr+4SmT57EEwwAdGMQ4RrNJX8jBxSQqFqBS2eWri5ILx+oM2AD9GBay8MJU+csN420EXgA+jfHKulEo+eT+lYrzZoMMGOyDArtXOh1ExOS+OvCaeQ6JIIf+z8ibFWbwd4H21XJEcOkW8RHy1God8kYp5nEaejHo2tbKMQgIFGVUBeQFlAUUBlQn53/+dZ3y1RpNGk0iTSpNMk04Tf5O8es5ibqmytYq1vLWytaK16qHcodKhwqHKNMUV+RXlFcUVFQL5xaAbwLdafi6Xu5A7l7vUUgVfvp48kjKSIpJKllwzniy+IK4g3iTOJH4rbiseIw4jPjEuMV41TjV+Js5qcG8QZzB1UHNwYZBr0GlDe4Nnw3MDckMQEFiteCM2l7evcklOQJVJnkmZSZFJBbJJSpAdUi2Tu8cD44/ijuI9BxEGIwdlB0cH6QYrBoGDR4MEg5mDuoNeG+/s5DhyXytnK8QXacUrZQ0WZxcX5+8WZ6WYJ8yLPb1UVXoy35yprmlewKqoXkGzxGqy3pyrrm2e/6Bws5CXRfUg10mlpVB7ytrcuS5wXvEg71Lle6HnlJe5N4vsRUkCtpyveTu2Qre5UHgx5OT7XcILTMdKTiEaOUPzLI3cvikDliz4/9Wfrmpkj6hsFeaZJ3OqpheMqA5NPd8VqBPQzlUpVt41uBCq0yiTt5jidAxuVuIR187PKM3IzijOyM8oz8iiVR1VGlUYVRmVH1UeVVQtpJo6m1Lefb7rvyu827tLupu3C9jd2EXbjd9V3jW/ML/AvtC44Lxwu3hxIeIY7hbbrNKm3ibcptwm3abdJtim2CbZpqldsJSzVLJUsFTB+2G6ZG8KblfEMfb2w23UbWWzuqfQ12zeYt583nLeLGvlTKVMhUyVTPlM5UzFTFVdOV0lXQVdFV15XWVdxYaiihJgIbAYWAQsOSpcmHKeupq8mkKYRJjC25W5IHFMbNb8muNV6pXtVeyV71XuleVV5JXnVeaVc6jcodyh2KF6VcRXyFfMV8RX0lHYUdxR1FHiXehd7F30fQpyl/8iKmUySIQl31Z63O+NRUi+eUq+RYCxuboGSVlVQhnLWIr5cO2mBmxZ3rSERVnd2Lz5Qe2lBlRZTkLOTa1WWey0+l6241Sz2dc6fA3ZssRpzb2ci6lbs/s67uEKdY23sOY3GmKwFkg0xXBfXpj71hrWfpxHLHsbauavEY0+E1Lnx6qEkw83I2JKUic/b2oVxqqCUxA+88YUpU583sgqxKmUVTk1X3omYsLYtN+CzJSpTl0jmFUzNSfeHDCvZZXBqks1g24KWwdjFa1SpGwWWodSZ14mUjK1W0s6r3Dw2irZqdopxKnYKcWp2SmgXotLkUuSS5NLlEuVS1Yzq2xyZEbFDMMUwxzDDMMi0TTRPNEs0ULVVNVc1aykrqTOotaibq92rw6nFqeOZV56XuPA+AD9QOWA9cDpAP5A5oD2wNoq3SnSqcIp06nj8p1KRdkMqylOnfS877zgfPe88QGSVehl4WXSZeOlX72yu4K7hLuGu4i7iruMu447v7u8u7i7uruwu7K79EJ+W3lbVltRW15bWVuO1czS1NLE0gzvF95JJ1Ouusha7Xlrq8jLqsvgy6LL5MumS//LvMv4y7rL8HrV7yrfZb7rLBTcf7gvvM+9L73Pvi++z78vv8+6L7rPO5iBN4WqE9RQIOOcSh5xFMdoLqVqLrZoLsdpLjLZCT/vc6tfEgIWs02k7tGcJ7hRtdUtiQBLGiYW9vDOI9wiDifsL2TcTNpCl5SP8p1n3Ld5LnTcgG2RS6pHBVczZw4d1jvgPIVbe0Q8paLnhbxvCQoRxiPHoPYEzyF48jF2hd206KZRbuU8k3i1CLIiJ0V3ci4YbtU803h1Mj/ITpLtxF5Q3FbdKnmm8GrzyWRmEVRkfhidNNkhvbX0jNApTtyxv3C99WjT0v1AN0l1LuyWp5NHNy07WXKB3aZSMZG4LXkRew64/XRLcVt0a3a7c4t1a3cvdU99b3mPe691z+3p367Ap6ubp/tBt1A3V7dUN1u3WDdft1w3S7dIN69iGvQ3VjFVMVExA/wCnJzZZtuxuEi90DzXvFg4X7jgOue6aDlvuXC85bltu/W8vb+FdGtr11n+AJxk20HYRdhB2Eu9ED2nuc25Nbxdu0W5VbkXv6e4N7vHule/57h3vX9+L3xPeg+4R7tXvmfxTH1ofgh4yH9IeKh/iGjX9lb1lvXWfXz7KLecdTTJN+6803LBc9t/S3ZbcGtyu3WLcZt4q3o7c8t2q3Ovec917+6Z+eD7kPMQ+1DzEPpQ8pD60PIQ+FDwkNiuy/eBYBJhR9wXc1LvBdtrQczqLMziLKxmfcz8aAAzIzbOnAhKTtHYZ1PrWnoN7LKwaRGcnLKxEVOgAz0nNkfA6AALJ1Z6OK2Iak7q2Ndt/XNmN6y2cF4R3ZzMseUBprsAwLOwD9FAv7BKJIbsPjDDDwwD7H2Ylq8YYMKS5E1RsWxzZsUwBcP1+2wM/RjGMQFhrH2YhuG2fS6GPgxjSUZSrPmY/diK4WZ9DmvshgG2rbY+DBNJgDjMmnAOkSJ5488sm1hn4XaG76u+FNKjY8WLxFfNso8VspqHaeSMqBlQs8gwJmCR4RRgFmAXYBXgmGAOhTOF14TVhNuH2YefhaH1Sax5gL7339tm2UbbVtkG2xbZJts22frb5tnGV803zjf2NU43jjQuNX5sHFMzXDQqZbFmtWawZrFmsmY7pD9kPmQ8ZJ3GusK8wr7CusJBwLzoczP0rRqbNeI25TbitrRkxWeox4zEjsSKxJHF1AwnCy8IKwg3CTMJ3wrbCscIwwhPDEsMVw1TDZ8Js+rb68PpS+3T7Fvo4+pzWtNe41nzXINcEzQMrJq4HpgF7LNeYhLgZGJmYmdiZeLoYupi62Lp4ixjuocDw49++18FfbJ9o310fRV9wL6jPoK+zD7dnz8/N1CITV6Mk9IfzDcozjfezddPMU6YG7C0NE6V/pxvzFTTNNdlaVbPqJlq9bnemKumbe7jvulmEi/TzL6RE2tLkvawtbFzTeDcxD7gkvV7kuewl7E30+h5agIWva9xOxZjt3FPWArk5/ebhGeY9pUcPdT0hsZZ6kZ9wwZM+vAsgcndw0ibYvZxHPO4hhEs/clrwy83hexjOObSDPAtZFgKkieG1z5jbZ5svtyUsk9QNxhh3UrKM07mmEkzGWEbGn6+KVDTpWWkkqK8aXAmVDNfymAxzGkf3DTJ/UnLOMMywyDDPMM4wzpDn5ZtlHmUcZR1lGGUZZRJNYlq+GxYefP5pv+m8GbvJulm3iZgc2MTbTN+U3nT/Mz8DPtM44zzzO3sxZmIfbhrbNN061xrb+tU63Dr19bu1onWodYFLZMlwyWLJZMlIK/edOreMNymiH3szYebqJvKpjmPnkUDXnNeY15rXn1rlkzmTMZM1kyGTJZMpkw2XXpdZl1GXVZdBl0WXaaG5IpUYBIwBZgMTD1KWhh2Hr76fDWM8BlhGG9T5ozEPrFpYdHQy9LLwMvcy9jL2kvfy8wL4GXlZXjI0sHSwdTBdpXMl8SXwpfMl9qR1JHSkdyR6p3kneKd/H0YcpP/LCr5M7E6cyjghJpC0uiTukRCSh5gR10kITk+foq8xFbFSSW2NF99uDrFpG7APHmKssRRJbW0Xv2get7EcWA3KT52Y2hweDduiqNEUmWm1Fr9a42b0cXn3fgprhJZleVSL/X7mtPqO3UVFUKqpPhMtEEYE+HqbHXI6hchXvGOaGge8umZdLRXZ1VnGBSO8RsJ8RgKQ5SUgxgzcTNivY5TyrfH48XzMRz2g5QWU8H2gxJDVJQS6+McU8qkdRpTMdW7KRzKU4DT7FMF8jf9xqqJNBSxkri5PcWbysoJNEoSCmoRoxRF5cV+gXiozrtyIVVyWOiUMl9pJLPkSe13zYfWQ1Cx4wdLbaKYYdgl0FgXGIoW4imY3ygXj/OrG27NKI9QFZVrKskrqKYqb0h/QlFAUCr44jdpP0XB
*/