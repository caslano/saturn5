//
// detail/impl/dev_poll_reactor.hpp
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Copyright (c) 2003-2022 Christopher M. Kohlhoff (chris at kohlhoff dot com)
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//

#ifndef BOOST_ASIO_DETAIL_IMPL_DEV_POLL_REACTOR_HPP
#define BOOST_ASIO_DETAIL_IMPL_DEV_POLL_REACTOR_HPP

#if defined(_MSC_VER) && (_MSC_VER >= 1200)
# pragma once
#endif // defined(_MSC_VER) && (_MSC_VER >= 1200)

#include <boost/asio/detail/config.hpp>

#if defined(BOOST_ASIO_HAS_DEV_POLL)

#include <boost/asio/detail/scheduler.hpp>

#include <boost/asio/detail/push_options.hpp>

namespace boost {
namespace asio {
namespace detail {

inline void dev_poll_reactor::post_immediate_completion(
    reactor_op* op, bool is_continuation)
{
  scheduler_.post_immediate_completion(op, is_continuation);
}

template <typename Time_Traits>
void dev_poll_reactor::add_timer_queue(timer_queue<Time_Traits>& queue)
{
  do_add_timer_queue(queue);
}

template <typename Time_Traits>
void dev_poll_reactor::remove_timer_queue(timer_queue<Time_Traits>& queue)
{
  do_remove_timer_queue(queue);
}

template <typename Time_Traits>
void dev_poll_reactor::schedule_timer(timer_queue<Time_Traits>& queue,
    const typename Time_Traits::time_type& time,
    typename timer_queue<Time_Traits>::per_timer_data& timer, wait_op* op)
{
  boost::asio::detail::mutex::scoped_lock lock(mutex_);

  if (shutdown_)
  {
    scheduler_.post_immediate_completion(op, false);
    return;
  }

  bool earliest = queue.enqueue_timer(time, timer, op);
  scheduler_.work_started();
  if (earliest)
    interrupter_.interrupt();
}

template <typename Time_Traits>
std::size_t dev_poll_reactor::cancel_timer(timer_queue<Time_Traits>& queue,
    typename timer_queue<Time_Traits>::per_timer_data& timer,
    std::size_t max_cancelled)
{
  boost::asio::detail::mutex::scoped_lock lock(mutex_);
  op_queue<operation> ops;
  std::size_t n = queue.cancel_timer(timer, ops, max_cancelled);
  lock.unlock();
  scheduler_.post_deferred_completions(ops);
  return n;
}

template <typename Time_Traits>
void dev_poll_reactor::cancel_timer_by_key(timer_queue<Time_Traits>& queue,
    typename timer_queue<Time_Traits>::per_timer_data* timer,
    void* cancellation_key)
{
  boost::asio::detail::mutex::scoped_lock lock(mutex_);
  op_queue<operation> ops;
  queue.cancel_timer_by_key(timer, ops, cancellation_key);
  lock.unlock();
  scheduler_.post_deferred_completions(ops);
}

template <typename Time_Traits>
void dev_poll_reactor::move_timer(timer_queue<Time_Traits>& queue,
    typename timer_queue<Time_Traits>::per_timer_data& target,
    typename timer_queue<Time_Traits>::per_timer_data& source)
{
  boost::asio::detail::mutex::scoped_lock lock(mutex_);
  op_queue<operation> ops;
  queue.cancel_timer(target, ops);
  queue.move_timer(target, source);
  lock.unlock();
  scheduler_.post_deferred_completions(ops);
}

} // namespace detail
} // namespace asio
} // namespace boost

#include <boost/asio/detail/pop_options.hpp>

#endif // defined(BOOST_ASIO_HAS_DEV_POLL)

#endif // BOOST_ASIO_DETAIL_IMPL_DEV_POLL_REACTOR_HPP

/* dev_poll_reactor.hpp
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
*/