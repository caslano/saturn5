//
// detail/impl/epoll_reactor.hpp
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Copyright (c) 2003-2022 Christopher M. Kohlhoff (chris at kohlhoff dot com)
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//

#ifndef BOOST_ASIO_DETAIL_IMPL_EPOLL_REACTOR_HPP
#define BOOST_ASIO_DETAIL_IMPL_EPOLL_REACTOR_HPP

#if defined(_MSC_VER) && (_MSC_VER >= 1200)
# pragma once
#endif // defined(_MSC_VER) && (_MSC_VER >= 1200)

#if defined(BOOST_ASIO_HAS_EPOLL)

#include <boost/asio/detail/scheduler.hpp>

#include <boost/asio/detail/push_options.hpp>

namespace boost {
namespace asio {
namespace detail {

inline void epoll_reactor::post_immediate_completion(
    operation* op, bool is_continuation)
{
  scheduler_.post_immediate_completion(op, is_continuation);
}

template <typename Time_Traits>
void epoll_reactor::add_timer_queue(timer_queue<Time_Traits>& queue)
{
  do_add_timer_queue(queue);
}

template <typename Time_Traits>
void epoll_reactor::remove_timer_queue(timer_queue<Time_Traits>& queue)
{
  do_remove_timer_queue(queue);
}

template <typename Time_Traits>
void epoll_reactor::schedule_timer(timer_queue<Time_Traits>& queue,
    const typename Time_Traits::time_type& time,
    typename timer_queue<Time_Traits>::per_timer_data& timer, wait_op* op)
{
  mutex::scoped_lock lock(mutex_);

  if (shutdown_)
  {
    scheduler_.post_immediate_completion(op, false);
    return;
  }

  bool earliest = queue.enqueue_timer(time, timer, op);
  scheduler_.work_started();
  if (earliest)
    update_timeout();
}

template <typename Time_Traits>
std::size_t epoll_reactor::cancel_timer(timer_queue<Time_Traits>& queue,
    typename timer_queue<Time_Traits>::per_timer_data& timer,
    std::size_t max_cancelled)
{
  mutex::scoped_lock lock(mutex_);
  op_queue<operation> ops;
  std::size_t n = queue.cancel_timer(timer, ops, max_cancelled);
  lock.unlock();
  scheduler_.post_deferred_completions(ops);
  return n;
}

template <typename Time_Traits>
void epoll_reactor::cancel_timer_by_key(timer_queue<Time_Traits>& queue,
    typename timer_queue<Time_Traits>::per_timer_data* timer,
    void* cancellation_key)
{
  mutex::scoped_lock lock(mutex_);
  op_queue<operation> ops;
  queue.cancel_timer_by_key(timer, ops, cancellation_key);
  lock.unlock();
  scheduler_.post_deferred_completions(ops);
}

template <typename Time_Traits>
void epoll_reactor::move_timer(timer_queue<Time_Traits>& queue,
    typename timer_queue<Time_Traits>::per_timer_data& target,
    typename timer_queue<Time_Traits>::per_timer_data& source)
{
  mutex::scoped_lock lock(mutex_);
  op_queue<operation> ops;
  queue.cancel_timer(target, ops);
  queue.move_timer(target, source);
  lock.unlock();
  scheduler_.post_deferred_completions(ops);
}

} // namespace detail
} // namespace asio
} // namespace boost

#include <boost/asio/detail/pop_options.hpp>

#endif // defined(BOOST_ASIO_HAS_EPOLL)

#endif // BOOST_ASIO_DETAIL_IMPL_EPOLL_REACTOR_HPP

/* epoll_reactor.hpp
Z+6D6keE/cb/nTYD3sf1fC0Ykz08bDYwm77P7MkrGJ5d1j44bME0qTup+3t60nF3b5d4N3PXcHd+V3DX89z4XPg84BzhXNIjvFnzXm6x6OlwQvKy3K+5pbkluWWmX01LTUuWv/r9dv59NHn0O2AXazduV3V3ZJdtt2rXefdol3w3d9fUgVbQ1DKKbjfwPPjt64wSlN+S+U1vKQ0+6thpUBP9/vSWZe6tURL3Z3BGPsz02Mn4nJ5f8ZZ+Lgozv6BvrKZOxsCCxfBKqnKbRsBeue6LAVdF05SEfUn9uIG9Y12DgWBF29O5hRtvRVh09wo9hhPr//HwQin8Me29svOJG3ufDNPaumC8SWh9PN4UlYEWMUVz5OGcmGO8ZzSvHnH+q7ccFWpM42sG1ansgZyBUx/sftX8+6FNmsSVMaMydgV1Y3MEjuW8KsRVyqN0dkl14DncAz1HOx0dnYLyHv3ZOW7HZs8sXklBE0HxzJKhcYW62TmSCi2miU2707prg6aTqAaxp6MNo+oUKhQMy7O/atvzGFToFLOY41dHzdLua3gStmQZmx/VVf/uqdq383z+17HsRJ5JDZNXQ1eLV7+ukgLsF8wXnBZsF6wWHMu5DjkOX8Gts10ABSz60wjP945AbE7drtECRcrzWVd1+QUt+X4SrVxQH8a3dZlaiJI0yF7wPMYerYvWkM+q7ttcoN+m3PcE2gRFRER8hOsJ6LnvQegJXA92HeW3pFH++WAZVH2/DxDsw6ymoc8C9QDTZhqN+FscELopOPRwOyfChlXmv33I5s1Z368feoUuVfQVT9HbyxXacdBwskR464hlddh40r7meGJi1xtz2532pmqGPhCv4zFgJOYoZb6PNLZ1r+fUShGz/6Ue5XNk5w61WDdt1lSc//ScX0Zo9dM5v0KkhyQ25Xy8XzZ+eTi5cNGS22BVaeWwpRFjWe+veHALNgl6+1iPRvMLeru6fQLufiNtvd6Er/05k/JboOz5fcRhfssO2Q3HvZTirlSxwEQT645Emoe0rofytIck3zlzW8KS3shU5rbyubWv2w3jvdKN8o3xjeSN5o3inLMDlwnfEvsS9xLnEu8SRwPxEdER4REx+beqmel94oZp79hyeuKZ19dAIhqsxPA+rjO3mgQHqhGikaTaPk1LJHKEvWHUbx+IVNny8YnZjsH+aKKpqhs41zT38Tncz65TAm3VQse+/XgeKcyYrULGZdbMg0s9//aNE9cfZ5VZ4hOQJ9qDvSC2IMGmLEzKtFECYwm2grQJpm2NmvQcu7egCiN6NqsR4jgCw2jZmN7o3hj66IqepB7NfaQLKr/ItkET86qa6RneCwG/0Dbw0hvnWmMHvvlfIta531RnbfbdLpBusetOCUZ7It8kfhp0+x63BVXJS3KTKmFAECZl6ok8ySvi6mZWh88QfDpQW3w659VI5Jb4ssmrqkjHvBaefJ3JEDzdyO41qaXsyxVhH7bRTc2ukjXuUcipeK5usIgp4CYA+WjoNljHtOcWGtgqOrIe6HQCwHqX+kAV+KojpCeQqR1nOTTHOvQLb73PuxzPZPzgStZkpiuTh+edjXlpHKODVKNnwmsWJ6hvnVVHVw/zfrVJSwwn3edNGIvn3r7Dw0pGAfdG5OTTj2xRPnA9dou4KGhQIt2qoVh0AV/t3SPwNdFYSv92/zVoN8nfIj9hPWRY5/C7WXne80DQffBkw3N3oci+8VDY92J3sdi548EnkOnFIFYY9RgcAgopl7ecePk3BpMsAgGHq4iEApk4QkGnu/eRSXSqQM/dup3eIf6H9+m1Cn37wCIrt60hNtNv396oW/1ewymzt9tLZRa2nQUXZ/nO7dgwi56W144AL1tfMY2YevwIwzf2BxelGQd2p+hWtN9k2FdR8y183/xSz7cM2nNsXHbdMvaqaglf9lu+x5qsWv7mOhGKJdx6ncASJ3JxhWOY6/9R6HTfbaTjeE2RrQO6az9vEhTaej01f+QQdCkM/REu6BlYZ385RtD/v+SDYj9HsBQ+FzN0pbel9qCuQJUPRD1OicFKoe+oOZr/FICQc2WNKHFIdTkGOi5pTCzeweq6ICeHI/VOqKNyBSF4/9BNfCVFN0G55c8J94DW15HYIO9Edf9DdBNQJT5r8UN1ScJgfApc9cNGJK3juWq2Yo0cPTb1eudEe0SswlQCoWWjOy9qkvpKENuXgSTNJHx6NtUlZIOTZ0EcPvEEhSzeF2599uCj7ltwdiGbkOurt8NOvk0XFIwA1oHPkJiVWtPeuLS3IBMo21txVu/DqpeR0XRVY/T6zl/bov3lDSc0fV5OguxrRK6Zk+1UY8M9Oj1WJjYnPjPrDsrFqrTLGMBj3c632IORCeCwQpTI6Mk1NO/iW1muEWwlb+JXj0Uy+3hvaETdjwclJcXewBdOJkmtqrzygZ8idw4+usMtw/7yrZM1J8s/nJs+kJPQwI9e6BrpntQa9Gng+lSDSl+OKMSItbZIOQfBtJ3lCtdiB/cYt3SGyERZa2U7vKPomwYw1wih/gi+aoPyWM5kq1HhUu52AzP8goZYPM6devrX3A6jHmUdclz7hxyknN3i8oih99cbOIFF7o1nqRprWfiGiHslfmbnY8ky296+JNmqqkVMZmfG6IGPxGdMeBZJMxKfbDdPca7XNSjvshl+y9mEfjClCPJ4u/vZBqvNZ/uyMEUoLholgB/HIOhVeT9vSE4rZjsExZLv+j2a3hb3u46LuTecwkgPOZi863g2RbWo31vFRT+bhopeMC06k8fAB5VlH3D9WB4uz2AJA0KRCaYv+h5S78GGJyrsX6DXFCIxuuJlOseKq0ehdxYlFWcC3td4d8YsTu+A62QndVfivCm1WvntvitToW2YhwJSmBVCdTejHyQzE8mT8EbDHcXRgJYv6toRH1iDH0yeE10CfIh1rCs+o/iO/XDHlbOmMxZTLaQPoRkJ0V48UJk/CveYsv8GP4PiOAwfN+LkJnr8G21W78oPnsmC/qdQEHC+a8kqyBVp831PK9JRdzh03YewamPgys5kxDSs6QrngVgUEJSUyLohl13opOFs+5VbszRpSs5UwfQjoVmASJqHT4I/WXlQoJZEv5lVFqcJkEzoLjzZa1K/IQxZ8P7YXHxMeIUc9xQF3M1MUQ83//35mQ8d40YB4dvXLVGVlsVjyuVR/PJkfcjjHBCUEuK+Gx9PHG84hOu3AokqNOifyC1Ihoo8gpHlR+KPCntXFhvEh+jBdMLZB0nKNSHYeEg5IydCJXxBYf59XprSzen78e56PoG9h5B1MXSyNOSoEpq0ZbHDLfrxib7Q8k8vAjp8KbdPCJox93/S2I2Jeie68CLXMQyKhnk8SlyIDGIpghVAPCwpmwlR8sE5aHvXgmZaZ7gpZnCGo2l6TXUfeQoynyUdfmiM+vkxJWoTQuIr1KGy1CsS7HG3l6jieeL3+byq9vb67Q4KR8hw+EsXImBc1iehJGYcTZjtIPSpoTi+cpzsm1MxSLEfyR9ZL4XQbILs3Vgb0r5YdNyHrKk8YIEYG11o2HfMBxPJ/WUuflQZGzeC5RRL4lka1TeZYKGxiHe/KaV8N0YROYV9UJp4gXFadGz0AT/IyuVy0HiWpEXo0+JbtpvCVSij5GUJgC3bDAlmVVFSNWyG3SJmOLO7v27xCxdfTZ0td5repgkjR8mCX+8IcyZgyJt8WsCcW0Rg3q+35CWEYzqThvitsEeLysOH93w7ByOaYhy1ZEarLqUPfhZIzy2nsABbQDyl47GL+M5chQPQly5xNXroaOx9Zj+D4n/RUoTBx+uQzuSeon+kU/34CoPQfzAvBCE/wSWQ3ez69OZyb77YqypHuNlrb67IrdjIVKUX82C+3nGiWXsAbyiTxzFx8bt6qu12RmmfxFp0okh3Nk6t//mi9W/FRQEs4qlpFS/WkGhs1Z5yX3JLWkw2zaPMDdxTUpMagMLwEIN+/Gv9ldTC2XZxS7Vlkfa14fab6bXsgMydsxPNkHaGJZ+MqgfBcLKD0TQBd7zRpqbj4Krv53ffq3KGoa+m6VMHTbWFmDB/V/Cd5Q9LW/kui1i2OQFsAdrLpadr53W/zXZflGufBJ9Hf9Uf/XrTkL3efe4o0HuAN3la2U1bdL7eo8oS2zgwlD3VqCrMkjHh4ym8Y6S3/L1R8z0u0GF3I9+323ydqXH5g9GK4fIWWBvfaZiu1uacV1EwLXXwk8GI4pdZoYwz5PaTGx36oKlmStQUPpaM5p9+jaSm2gvNCzb0uhUGq2WmgoGll06VAdm8z3eDbfSnu8q1Uc0CKJ+5QqTIXSy2VDINVEeQUkVulfcbFdpM9bfeCNpMwZu2TTV9O73TRrcWn64z1lalYx5YHG1w/EENFi50rHb+XViS7bYXXrcnVEGzFBjgVmP3sybGEc3fEbNjonHkZp+O8Uel8yQBKteAYnLTJUk/o5MmNf33xCLPKAEslLCvl0Mn4opfPD94fZxJq3mmz0MP370ywo2m+jtNIi552l66VscK69vpwdae9PT+cLt2B/Zo8PBygJ+3Cupmn3FtEC2v7V5kmZ2LqPL05aHxcllaBZXCyzPGOtdvScNH8zZg66mm0zUHcooX5IQoNSzpvHmiEaJ804cr6Lz48bPxX01FAu1eH1DXzjtSIN37qZbZ1O4Lqn45qvvksKyf074uIlLG9RZKZyNbId02N3Q/zd9iVbt2jbBrO/Do0sLsEQTpGqbuVc3dZTLhQbcSBI2bl0zeR/hhldxYS2v6CH7Ate/NbslL5lr46fmmVJ/NIyyopmCyKPPVq7px8Od2qYCLcvOSPW5hvssO/7duUJRbRhQeoQ9D5eSjt8dnnb/Gw3lGjLo//2DXjs3iDvj9+v6bX54d44dfL0N6kuQ13QKkzy05owcrj53doOCI5xNzv/GD+z7uw+cFlTArkel8Ix2fWImryA64pekcrTBI2d5XLM+oL7V0A13D1nF/uIzMXLW2WJeFNSdFJ2sIzIJfV6ZqxP/ckicXM1j8h9zqzbD7xtU5kvtG144mOZiuqxE0Pvk8uiZfP2zCQbwmX16zrW0LI9I2ALUg1o9pX65NQs4paYHOePXNY/wYHHkQVCyE9OJCXnWupbrMvHIPyR5NHO/Vp2T51gKKUtX8cWtPG3GLMFfyc3EOU0/eTCVe+qD5ye8c2Pr6mCfTdBNdJBPJjmtx8MJM6F/XN0K4DC6HHyoaT7euxFFQYOJGiBDeO0KUbZRmlKaxe7d41vDNgKno8tb2N7M0IeEmyFB6DMp9aYNmts9pqmqLYIvOiFwU2/1eSOhpTaSdQPGi7a5XzDN1ZHIiyY81YFOsOw+Q569NrgdwfxrHwIXPi91ZPwhiyYc6AEGlO4ViNy5nSiXFxKwAqPR5KwJj/CHtbzVP0kKL4MaZEYlrMKAFDhlOCe5tlE8BnAKAbs6W4Tbinnmyeqay9wePZXOGZGlXMkR8pdGgVWwTvhzuBm9HE5RGQhtFEUAs1KhNReOQFmKjM7DXxxMfhLCQi+BjD1ANOxsSGwnegsZPJUeZLT4jEPtwl6M2gnTVvnitSUPzm0b0g1c6skcsgB/LOxohC0CAapUBx4qoJ25KwbSDDjZcETED8R6bmm8hdL3ECvUdDruVXGlijRch3m4YxSR0sQg2CibbN8G2GgJbBN/+uiXP9HUOxu/zv81e9Hp3YZH5gFnCG3sGf+xPkscVRSeKUu4zl4pqY9PpQkYxAMeG+BaFPadNBk++4BmSjzGTCP0C8qigoUoLIDZBAUzwW2TyBS1ONx0oOxuZ4EBMGZrnjqA/EET58rtXTSvRUgEu5LkJ/23Mmc1yYjtIF4S8rUuyK4pj9nzyOqUAq8gS+/gIhZ8i4HB71AeAD18VYAucrQk5Sx+twgmehvMT6jzFgfsg0cGM8vXbPMLd7Txn4222ChA3rCZXPJ2QVyyQCWVl0TG7Lrc6N7y5OZ9saTwYzKK2SRW/R9aJLYbe8tzW5QwD7lAY67wOLh5OAHCGcEWyghccBkAAyMCfAZYQr0CypuI2DovuZwjukq0AzvcNQIFM33AelaAvPYNDemlD9LrtacxSffV7db1RFbWjqec7zQccVntKRII3baNjt0cHl3Ue/d3sF4Vtll8XkW0w3jkVVQsf5g1deOs9b3CkXdkTixtp8JhyMiWaB1V7DCWgRqN2hQodZWxFv+zMih/+umdT7GqAx5qj6hQqYAOu/fGlnPZXoYEeipGMtaJoPP+R/E2kUF/oZUjNuQNbet5PIrgbEHNh1VDn9EyeQzF6V9JxzmWwUGMSsfgXeoV5fXpbwVdrOZDpd6NpXcL77uEPxMOIN5a7OTGOx0u3uZuPuQA/3QUE3tMcCN8bP07UI7cmYbrkNm6szrSe+A44M6AYWz1fm4yxHB9TknyDUh8bQFsDjpACTY7gSwelBvq3U3Y8iqCaq08OG/gJp0UHYKxtUE2WI/0WI4scavkG0XzrTAvEgXj/Bo7tYnvMXCCtRNE2a2payWHef7KEpJMzusPxWS7lHfIx0/aY3CiY92LBbN7GJhBA/NzFRME0Kajp5hq7ifQYyfZ+cHQijPDG1nrXis5zE+/b0Y4r2gG/6P1DQ0CdY5YjtaOgzXy6+7XSvk/gK0MUX4f51ek+d5Lp7BcyYsSiP6qxPAlubmcsNVRojpL5aI/WlJO8wHijRwgRkOzjJfomt91JCGWWqt+XrXEtEY7x06/P4qXfwtTc/SFViIINWfZanWoSOYVNxP3okRlC9kVlN8cz6HtPtmTrkMEqavyffnWrTGZCEiKdGIZ0KqYvxudy8PeBCaZIoIat/Ki+WX+UK/SLWrjxrnS2D/EWnw/YgD7sxXMzwzi9iYaQtq5EutCKgMTkuQCrjvBFspaj3wKJRQ0Awersq6KWz0ro+ZJN9bEYaH3ZsSYzI6yI4WiWnwcp0bb3CRgspr1qT5XgbD9Cvw8lhJ0KXVE1YM7XBAts4Fm+W1fdp+WLBEP0CCT5mAbAQyszLwnwvcRJG3+5JR00dLo5Zl/fvAaRRFelmGXqvBuijH1QVT3cuuy8zUL0JA1mQyFclDSI2qD4FTbc0luUHGNsHkfeHute6yHVjrb/7UDVSFpHvk2+ujXeCNEHP0R3HuHKBOCz1Xk1FFrtJyKUG+qZCTg6pVwO9Iw4GJgReSdskgw/rmRyeAXXZRt6UAwIeuBpSo+jYBKPs9jVpgh3kzddu/tadG9f3JULTx8g8DOMMa/EFKhwD7BmHaErnr1mFluCx0SmlPfDDJASSEpW1Izovmf3zIxvH89k13mkmT7tsfxyxtlkMqfEWjehwTUe+ssu2Bl+eXw4KDu69nTWML79g1Ia8o9TJvki7qTJ4/M8v6MXxhnoAc9HIqPEVZs7T0XF256daXJmq4ZUe5CNBtEd1Q8AhXhp4+rFiWRuBEZ8Om3tiTjnBmV+GsYEi4RdzJ2ZH4Q1NB8oNZ48O3BbmqjEz6kdkJtOEqcozgYYa16Nenu+bEIxY7mNxz0ZsyRsY2pCgmT0BZsv1SWrqiJt028khcMNIzZjrdADyOSKfngN0AsChsOac+Fbx0zwZzrR5Pt64huRV4iCdccvW81OgRrt+FItkNRf41g/jRDEguSdqilrhfqAiHcS
*/