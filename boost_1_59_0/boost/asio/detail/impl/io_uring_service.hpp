//
// detail/impl/io_uring_service.hpp
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Copyright (c) 2003-2022 Christopher M. Kohlhoff (chris at kohlhoff dot com)
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//

#ifndef BOOST_ASIO_DETAIL_IMPL_IO_URING_SERVICE_HPP
#define BOOST_ASIO_DETAIL_IMPL_IO_URING_SERVICE_HPP

#if defined(_MSC_VER) && (_MSC_VER >= 1200)
# pragma once
#endif // defined(_MSC_VER) && (_MSC_VER >= 1200)

#if defined(BOOST_ASIO_HAS_IO_URING)

#include <boost/asio/detail/scheduler.hpp>

#include <boost/asio/detail/push_options.hpp>

namespace boost {
namespace asio {
namespace detail {

inline void io_uring_service::post_immediate_completion(
    operation* op, bool is_continuation)
{
  scheduler_.post_immediate_completion(op, is_continuation);
}

template <typename Time_Traits>
void io_uring_service::add_timer_queue(timer_queue<Time_Traits>& queue)
{
  do_add_timer_queue(queue);
}

template <typename Time_Traits>
void io_uring_service::remove_timer_queue(timer_queue<Time_Traits>& queue)
{
  do_remove_timer_queue(queue);
}

template <typename Time_Traits>
void io_uring_service::schedule_timer(timer_queue<Time_Traits>& queue,
    const typename Time_Traits::time_type& time,
    typename timer_queue<Time_Traits>::per_timer_data& timer, wait_op* op)
{
  mutex::scoped_lock lock(mutex_);

  if (shutdown_)
  {
    scheduler_.post_immediate_completion(op, false);
    return;
  }

  bool earliest = queue.enqueue_timer(time, timer, op);
  scheduler_.work_started();
  if (earliest)
  {
    update_timeout();
    post_submit_sqes_op(lock);
  }
}

template <typename Time_Traits>
std::size_t io_uring_service::cancel_timer(timer_queue<Time_Traits>& queue,
    typename timer_queue<Time_Traits>::per_timer_data& timer,
    std::size_t max_cancelled)
{
  mutex::scoped_lock lock(mutex_);
  op_queue<operation> ops;
  std::size_t n = queue.cancel_timer(timer, ops, max_cancelled);
  lock.unlock();
  scheduler_.post_deferred_completions(ops);
  return n;
}

template <typename Time_Traits>
void io_uring_service::cancel_timer_by_key(timer_queue<Time_Traits>& queue,
    typename timer_queue<Time_Traits>::per_timer_data* timer,
    void* cancellation_key)
{
  mutex::scoped_lock lock(mutex_);
  op_queue<operation> ops;
  queue.cancel_timer_by_key(timer, ops, cancellation_key);
  lock.unlock();
  scheduler_.post_deferred_completions(ops);
}

template <typename Time_Traits>
void io_uring_service::move_timer(timer_queue<Time_Traits>& queue,
    typename timer_queue<Time_Traits>::per_timer_data& target,
    typename timer_queue<Time_Traits>::per_timer_data& source)
{
  mutex::scoped_lock lock(mutex_);
  op_queue<operation> ops;
  queue.cancel_timer(target, ops);
  queue.move_timer(target, source);
  lock.unlock();
  scheduler_.post_deferred_completions(ops);
}

} // namespace detail
} // namespace asio
} // namespace boost

#include <boost/asio/detail/pop_options.hpp>

#endif // defined(BOOST_ASIO_HAS_IO_URING)

#endif // BOOST_ASIO_DETAIL_IMPL_IO_URING_SERVICE_HPP

/* io_uring_service.hpp
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
*/