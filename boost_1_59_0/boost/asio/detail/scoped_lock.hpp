//
// detail/scoped_lock.hpp
// ~~~~~~~~~~~~~~~~~~~~~~
//
// Copyright (c) 2003-2022 Christopher M. Kohlhoff (chris at kohlhoff dot com)
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//

#ifndef BOOST_ASIO_DETAIL_SCOPED_LOCK_HPP
#define BOOST_ASIO_DETAIL_SCOPED_LOCK_HPP

#if defined(_MSC_VER) && (_MSC_VER >= 1200)
# pragma once
#endif // defined(_MSC_VER) && (_MSC_VER >= 1200)

#include <boost/asio/detail/noncopyable.hpp>

#include <boost/asio/detail/push_options.hpp>

namespace boost {
namespace asio {
namespace detail {

// Helper class to lock and unlock a mutex automatically.
template <typename Mutex>
class scoped_lock
  : private noncopyable
{
public:
  // Tag type used to distinguish constructors.
  enum adopt_lock_t { adopt_lock };

  // Constructor adopts a lock that is already held.
  scoped_lock(Mutex& m, adopt_lock_t)
    : mutex_(m),
      locked_(true)
  {
  }

  // Constructor acquires the lock.
  explicit scoped_lock(Mutex& m)
    : mutex_(m)
  {
    mutex_.lock();
    locked_ = true;
  }

  // Destructor releases the lock.
  ~scoped_lock()
  {
    if (locked_)
      mutex_.unlock();
  }

  // Explicitly acquire the lock.
  void lock()
  {
    if (!locked_)
    {
      mutex_.lock();
      locked_ = true;
    }
  }

  // Explicitly release the lock.
  void unlock()
  {
    if (locked_)
    {
      mutex_.unlock();
      locked_ = false;
    }
  }

  // Test whether the lock is held.
  bool locked() const
  {
    return locked_;
  }

  // Get the underlying mutex.
  Mutex& mutex()
  {
    return mutex_;
  }

private:
  // The underlying mutex.
  Mutex& mutex_;

  // Whether the mutex is currently locked or unlocked.
  bool locked_;
};

} // namespace detail
} // namespace asio
} // namespace boost

#include <boost/asio/detail/pop_options.hpp>

#endif // BOOST_ASIO_DETAIL_SCOPED_LOCK_HPP

/* scoped_lock.hpp
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
*/