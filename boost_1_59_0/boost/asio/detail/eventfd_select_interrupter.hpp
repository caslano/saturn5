//
// detail/eventfd_select_interrupter.hpp
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Copyright (c) 2003-2022 Christopher M. Kohlhoff (chris at kohlhoff dot com)
// Copyright (c) 2008 Roelof Naude (roelof.naude at gmail dot com)
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//

#ifndef BOOST_ASIO_DETAIL_EVENTFD_SELECT_INTERRUPTER_HPP
#define BOOST_ASIO_DETAIL_EVENTFD_SELECT_INTERRUPTER_HPP

#if defined(_MSC_VER) && (_MSC_VER >= 1200)
# pragma once
#endif // defined(_MSC_VER) && (_MSC_VER >= 1200)

#include <boost/asio/detail/config.hpp>

#if defined(BOOST_ASIO_HAS_EVENTFD)

#include <boost/asio/detail/push_options.hpp>

namespace boost {
namespace asio {
namespace detail {

class eventfd_select_interrupter
{
public:
  // Constructor.
  BOOST_ASIO_DECL eventfd_select_interrupter();

  // Destructor.
  BOOST_ASIO_DECL ~eventfd_select_interrupter();

  // Recreate the interrupter's descriptors. Used after a fork.
  BOOST_ASIO_DECL void recreate();

  // Interrupt the select call.
  BOOST_ASIO_DECL void interrupt();

  // Reset the select interrupter. Returns true if the reset was successful.
  BOOST_ASIO_DECL bool reset();

  // Get the read descriptor to be passed to select.
  int read_descriptor() const
  {
    return read_descriptor_;
  }

private:
  // Open the descriptors. Throws on error.
  BOOST_ASIO_DECL void open_descriptors();

  // Close the descriptors.
  BOOST_ASIO_DECL void close_descriptors();

  // The read end of a connection used to interrupt the select call. This file
  // descriptor is passed to select such that when it is time to stop, a single
  // 64bit value will be written on the other end of the connection and this
  // descriptor will become readable.
  int read_descriptor_;

  // The write end of a connection used to interrupt the select call. A single
  // 64bit non-zero value may be written to this to wake up the select which is
  // waiting for the other end to become readable. This descriptor will only
  // differ from the read descriptor when a pipe is used.
  int write_descriptor_;
};

} // namespace detail
} // namespace asio
} // namespace boost

#include <boost/asio/detail/pop_options.hpp>

#if defined(BOOST_ASIO_HEADER_ONLY)
# include <boost/asio/detail/impl/eventfd_select_interrupter.ipp>
#endif // defined(BOOST_ASIO_HEADER_ONLY)

#endif // defined(BOOST_ASIO_HAS_EVENTFD)

#endif // BOOST_ASIO_DETAIL_EVENTFD_SELECT_INTERRUPTER_HPP

/* eventfd_select_interrupter.hpp
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
*/