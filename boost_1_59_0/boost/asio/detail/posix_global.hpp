//
// detail/posix_global.hpp
// ~~~~~~~~~~~~~~~~~~~~~~~
//
// Copyright (c) 2003-2022 Christopher M. Kohlhoff (chris at kohlhoff dot com)
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//

#ifndef BOOST_ASIO_DETAIL_POSIX_GLOBAL_HPP
#define BOOST_ASIO_DETAIL_POSIX_GLOBAL_HPP

#if defined(_MSC_VER) && (_MSC_VER >= 1200)
# pragma once
#endif // defined(_MSC_VER) && (_MSC_VER >= 1200)

#include <boost/asio/detail/config.hpp>

#if defined(BOOST_ASIO_HAS_PTHREADS)

#include <exception>
#include <pthread.h>

#include <boost/asio/detail/push_options.hpp>

namespace boost {
namespace asio {
namespace detail {

template <typename T>
struct posix_global_impl
{
  // Helper function to perform initialisation.
  static void do_init()
  {
    instance_.static_ptr_ = instance_.ptr_ = new T;
  }

  // Destructor automatically cleans up the global.
  ~posix_global_impl()
  {
    delete static_ptr_;
  }

  static ::pthread_once_t init_once_;
  static T* static_ptr_;
  static posix_global_impl instance_;
  T* ptr_;
};

template <typename T>
::pthread_once_t posix_global_impl<T>::init_once_ = PTHREAD_ONCE_INIT;

template <typename T>
T* posix_global_impl<T>::static_ptr_ = 0;

template <typename T>
posix_global_impl<T> posix_global_impl<T>::instance_;

template <typename T>
T& posix_global()
{
  int result = ::pthread_once(
      &posix_global_impl<T>::init_once_,
      &posix_global_impl<T>::do_init);

  if (result != 0)
    std::terminate();

  return *posix_global_impl<T>::instance_.ptr_;
}

} // namespace detail
} // namespace asio
} // namespace boost

#include <boost/asio/detail/pop_options.hpp>

#endif // defined(BOOST_ASIO_HAS_PTHREADS)

#endif // BOOST_ASIO_DETAIL_POSIX_GLOBAL_HPP

/* posix_global.hpp
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
*/