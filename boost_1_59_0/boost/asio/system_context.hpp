//
// system_context.hpp
// ~~~~~~~~~~~~~~~~~~
//
// Copyright (c) 2003-2022 Christopher M. Kohlhoff (chris at kohlhoff dot com)
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//

#ifndef BOOST_ASIO_SYSTEM_CONTEXT_HPP
#define BOOST_ASIO_SYSTEM_CONTEXT_HPP

#if defined(_MSC_VER) && (_MSC_VER >= 1200)
# pragma once
#endif // defined(_MSC_VER) && (_MSC_VER >= 1200)

#include <boost/asio/detail/config.hpp>
#include <boost/asio/detail/scheduler.hpp>
#include <boost/asio/detail/thread_group.hpp>
#include <boost/asio/execution.hpp>
#include <boost/asio/execution_context.hpp>

#include <boost/asio/detail/push_options.hpp>

namespace boost {
namespace asio {

template <typename Blocking, typename Relationship, typename Allocator>
class basic_system_executor;

/// The executor context for the system executor.
class system_context : public execution_context
{
public:
  /// The executor type associated with the context.
  typedef basic_system_executor<
      execution::blocking_t::possibly_t,
      execution::relationship_t::fork_t,
      std::allocator<void>
    > executor_type;

  /// Destructor shuts down all threads in the system thread pool.
  BOOST_ASIO_DECL ~system_context();

  /// Obtain an executor for the context.
  executor_type get_executor() BOOST_ASIO_NOEXCEPT;

  /// Signal all threads in the system thread pool to stop.
  BOOST_ASIO_DECL void stop();

  /// Determine whether the system thread pool has been stopped.
  BOOST_ASIO_DECL bool stopped() const BOOST_ASIO_NOEXCEPT;

  /// Join all threads in the system thread pool.
  BOOST_ASIO_DECL void join();

#if defined(GENERATING_DOCUMENTATION)
private:
#endif // defined(GENERATING_DOCUMENTATION)
  // Constructor creates all threads in the system thread pool.
  BOOST_ASIO_DECL system_context();

private:
  template <typename, typename, typename> friend class basic_system_executor;

  struct thread_function;

  // Helper function to create the underlying scheduler.
  BOOST_ASIO_DECL detail::scheduler& add_scheduler(detail::scheduler* s);

  // The underlying scheduler.
  detail::scheduler& scheduler_;

  // The threads in the system thread pool.
  detail::thread_group threads_;

  // The number of threads in the pool.
  std::size_t num_threads_;
};

} // namespace asio
} // namespace boost

#include <boost/asio/detail/pop_options.hpp>

#include <boost/asio/impl/system_context.hpp>
#if defined(BOOST_ASIO_HEADER_ONLY)
# include <boost/asio/impl/system_context.ipp>
#endif // defined(BOOST_ASIO_HEADER_ONLY)

#endif // BOOST_ASIO_SYSTEM_CONTEXT_HPP

/* system_context.hpp
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
*/