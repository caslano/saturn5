//
// impl/execution_context.hpp
// ~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Copyright (c) 2003-2022 Christopher M. Kohlhoff (chris at kohlhoff dot com)
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//

#ifndef BOOST_ASIO_IMPL_EXECUTION_CONTEXT_HPP
#define BOOST_ASIO_IMPL_EXECUTION_CONTEXT_HPP

#if defined(_MSC_VER) && (_MSC_VER >= 1200)
# pragma once
#endif // defined(_MSC_VER) && (_MSC_VER >= 1200)

#include <boost/asio/detail/handler_type_requirements.hpp>
#include <boost/asio/detail/scoped_ptr.hpp>
#include <boost/asio/detail/service_registry.hpp>

#include <boost/asio/detail/push_options.hpp>

namespace boost {
namespace asio {

#if !defined(GENERATING_DOCUMENTATION)

template <typename Service>
inline Service& use_service(execution_context& e)
{
  // Check that Service meets the necessary type requirements.
  (void)static_cast<execution_context::service*>(static_cast<Service*>(0));

  return e.service_registry_->template use_service<Service>();
}

#if defined(BOOST_ASIO_HAS_VARIADIC_TEMPLATES)

template <typename Service, typename... Args>
Service& make_service(execution_context& e, BOOST_ASIO_MOVE_ARG(Args)... args)
{
  detail::scoped_ptr<Service> svc(
      new Service(e, BOOST_ASIO_MOVE_CAST(Args)(args)...));
  e.service_registry_->template add_service<Service>(svc.get());
  Service& result = *svc;
  svc.release();
  return result;
}

#else // defined(BOOST_ASIO_HAS_VARIADIC_TEMPLATES)

template <typename Service>
Service& make_service(execution_context& e)
{
  detail::scoped_ptr<Service> svc(new Service(e));
  e.service_registry_->template add_service<Service>(svc.get());
  Service& result = *svc;
  svc.release();
  return result;
}

#define BOOST_ASIO_PRIVATE_MAKE_SERVICE_DEF(n) \
  template <typename Service, BOOST_ASIO_VARIADIC_TPARAMS(n)> \
  Service& make_service(execution_context& e, \
      BOOST_ASIO_VARIADIC_MOVE_PARAMS(n)) \
  { \
    detail::scoped_ptr<Service> svc( \
        new Service(e, BOOST_ASIO_VARIADIC_MOVE_ARGS(n))); \
    e.service_registry_->template add_service<Service>(svc.get()); \
    Service& result = *svc; \
    svc.release(); \
    return result; \
  } \
  /**/
  BOOST_ASIO_VARIADIC_GENERATE(BOOST_ASIO_PRIVATE_MAKE_SERVICE_DEF)
#undef BOOST_ASIO_PRIVATE_MAKE_SERVICE_DEF

#endif // defined(BOOST_ASIO_HAS_VARIADIC_TEMPLATES)

template <typename Service>
inline void add_service(execution_context& e, Service* svc)
{
  // Check that Service meets the necessary type requirements.
  (void)static_cast<execution_context::service*>(static_cast<Service*>(0));

  e.service_registry_->template add_service<Service>(svc);
}

template <typename Service>
inline bool has_service(execution_context& e)
{
  // Check that Service meets the necessary type requirements.
  (void)static_cast<execution_context::service*>(static_cast<Service*>(0));

  return e.service_registry_->template has_service<Service>();
}

#endif // !defined(GENERATING_DOCUMENTATION)

inline execution_context& execution_context::service::context()
{
  return owner_;
}

} // namespace asio
} // namespace boost

#include <boost/asio/detail/pop_options.hpp>

#endif // BOOST_ASIO_IMPL_EXECUTION_CONTEXT_HPP

/* execution_context.hpp
XCW3QRuj+mf+3yZ+sKhg0IT1TddJx7fVjxeK+BtnaKQEazUQrF0lrZQz1dR1xWkrhrRqmzVJ9Z3BSlZ/INN64iKbkvCkypNHlzyla6/pNp7NCm1028X9Bra8nqdiLfLvDjnkKM6oIv43ejVny45W7pe13bbcrtWvXXolpqd5g3Zc7gizulU+pqtN2a5dc9f/0FrrGoohLF7h9BIJIgTCwvjDGqC4pv+bnxJABJZh6O8nWi83oZISH2u0pb8oq/Kuy3aq9tiD5923ul/zynS4dp6RfrQWzzYRFPJuOi2AqAnXFSOpabbxjPOa1CxQKMkgji9A64m2LfoVUewRRu1Y79Fm6pnBeF3AHBk9bZ2wQTexFINZtnd5E5ewFufyVKLr9BhOt3QEgETipwgJ6eOKUvDYC0BaNP/15LJrcShM5R9s2OWHuGyQz4QJS5oHB+KZ0BfyobcMS2vdTc3M4rghcWyIQGUza1TpZJ/yaJis7Ds/vMs4YHMXluoG00+IB45JsdA1MZ/2IceNsunSjZudonfAQdgP+sQqZjGK9Wsc2JmegoZszxKzLr3nwN/ZJhUd1BIkAIiHVNK4hDK6IxOrcHQ+IU6hTXHVMVCosp2LjQLylebSV/w0huDayBev0ADhPzTr38/6LWzg9Wp3RuznFJ3SDVk4Z0SQHWk+IP11z3mpu9gmb8freCD4L6RKCPurKfo/Kgkrqz2d4wtFCBQ3n0DUCoiXQx8uynK/L43aWotpYhyM7rAkFv2ck1CvnvH2G2CHGMKSMZRXgQTpVgN8hJZI1edV+xM9jLGF8ZycMNXAoRr5Mq1RGTXkWcvgW5dEsdWlKDqZ0itTA/gY850r7VYYIxXC5kYEvMM2K/HTraHzEgplZy8h7pBw9kcIOG0tpelqItXeRnb9LKZU25ZLd5E8E0DIMRvoYR+WkRhAH32QJb/HVLQljX556s4ejm4+d1nl1CGH5GxcBY1X7tlKuYgYcePYxjXwpo66w92fNJdEVCB/g0QGb9Jev3CxqLHgTaYZBB0RE8Z8/C4spGD2TKEO3k1U74FfSBp+4RN78VGfww1hC03FaLoUyjaGgdONeo5mOtb1i1PeCdjWwdOiC7Jw5/avnvXmY5feqhV6HyjX9UACj398n1kzL4MFj+r7nixeEt9Pa/zFdaKP+O6ONTgdxRI/emUfYvGXBv1B/7xX/JGE+M5SxQnsOnQOC7G8U7tLq24ArjHenTM9WktfDTtyL7j3qq2fekfFYfZUKgHCe1had4M41kVRWq2h4aR2JqtJfrIm1gnWIa5PNXS6ETW2LEmRm7IPpi52eeJ0gKO83fQAaZjGRl4KfA16pAffZS/CbfUE0k0W4/fwNGUlUsd28ZnyI2fIKAylNx87T5KySVdyqlQn26sS34mqojljaVovQPURAqyIZVufLwvUw8tiBLXpHxGYT+V0sAaBacN9p+4/zGNnzAlRYodJ5d6SM+ucWei7hyDHYALbOw99TTiuj28oYrqNqLfwv4HM3dB4YodgU2xzWKdqq8AGgtQH1tXXgtgyPrtKwz/oakZWIN4d0ZNAEwC3XXc0UjtvTX7lXLZOZV7XNwp1LNmyRS9Hg1gvL2RtTG5qv7gY9NqY64ncaR+c/UbIROLv5n9A4F7oSCF9R8bZgguRMjeBDtEoQ3jmanUZM2W7Oe2FeSo6ZgovgcTJq1zRepnmh1roMqhfJMQ3aVyBGDx672MX78V0R4dWmHdLFib2bECmTNhGyjLSvGrJyGZGE++NBaV/cuUuUBijRSKl+/BzVD+CeV0TcuUWH1jTefP2n2wDDZE1KvxEXbbXSBEzZOdnMk1etgvBsM3W2Swm4U3AAp9z18/mE6JfolISRh6aepmjZKV/lXt7vPPcGCyiwVMsI61P5bWmoF8GNwLwXD9fn94B/Q3NF9guTX8DEBlfDXJJc2zu47ndNU9ciSFo2B4zXilW3GusL2vYl0WkxXw7D6kk5OsAbsVxnJ9WUku4W1oyr/T+qx3xEf4Uo+8jS52nY9FJL8MiYuLaHeXA3Jk4++EwYctAE2vGdkXe5lQRGcWhlDLVDDeKpWaHqofImLzPRdM9+k+klh6DgMDWo7caBprsEy+kQwJBtdYEV2D4W6zhEnwD+A6Bzc7CTjvNJQ3/oGO1t3S76yLvR+XNVKX5qUNmEEnWabDkoLgo/Hi/i8Hc0Y1uiQpciM9hxm2WADdMNxxEBY/KzIXGlBngwM7gYNjDwpTD/QbVxEmg2wE8Z2/Ei0ap1O7g3h005gYI+PN4G3yh+vswzIMGwlcl4QqgymiVbvSL2Mki10QGdf/BBoWSL4nwnRZ6NMBgY1+YfxS+l3JrYx5ye3ql4+6O611j9zTRT3C/50klTA7s5gYyYB3q699NZ6EziM6+9+mjq6GqcEq++qRSIrqhO+/ppQFt0lhH9Y2yEsJcck+sjhhsmH62/s5Oq2Vjr/Bpfy9faQGJ06/eaL5hAL/O3D8Tz9vDc7AvX157HA/v6hd09bX1Z3l52C1xHO4S6xhE21QsXu/vVEcryyVLhrTztDW+Qum1zpgU2CaMqMvsuaSmxv8yawpmQhNr9v9rTXo+hK4+Ygm73fBpUlHYD8OZnbR0GYlfiwItM9Bk43ZaSGORp8R9JSnJrS8tU03ddEyzg0tGd9duh0gbNXcjwDGbFPX6YkCtT+gwrE0Wdp4o1bmLqE8Hm6DXsRbquQuh602re5U+p+iYeuXwTBl2+yLsuqHsAu6fBRkS0TNFCRXDocbapEvKaWSvDcVdyneUSaH385LKhApL1lyouFZ75Mj6J6vpZBN/ZE2V9LbljneHpM++lNAT0XqFQ8CaaF/PHcYB4rdhMHjUDKMwc4OSxtRue/vbK3ver70RhqKQR+441VHQerdpS6kxy3XaCCMEAEf6PGgLCkd8xZ7X0GL/cGWKPGlBOaV1a4aGmfVho9PTWokDsGOZd3Tna3ThiZIJer0BLtSy/yrPP4yIMU1A3u4/dyqyl7cir0vUdBaa6yyza5LyzAkIui97K3US0cAm1Px6NlZV1Dlr+TYSunE88tJ0aMF55iQyWzS/DI2k0ZrIvNuPlz6Wpai3Etzt+9Shfr321vz93UE75Rla1lD5BoGzgRs8A2wh+QjDM6xZS7i++IhZvGS08bggExi9TQbPQujOGG7NfDSJWXtDjJ9jJ1jwb1hKgAfRSor28Ixr6WPnLMqb7TWqYrEBWhVpOoHPMo+8utMX5Khn1TS0FdpKrqc5XTP3/CoTqAI85CwgGRry2EUwwLLLqNbZa6FIK7IlUlhurY1xdwYWCJMdQ4ZSlVCFhvs/cyKbH8inOW/o59tVz7l/r5RHkPhqxkDkit3WvELRFqLD1qvCbtcPoedqWFYCK4/lY6ImTtGqdW8MUtMH/GDdYU0PF5TTVdVZx24OVhzw2JeyKWRy8FS+uPn3HU33wAMfFQvIJC8Zx5ebGkJJYUqTsfChXIPfdqplAYEe0nFQmf/Q6Mohs4AWVCdrIdxmrERVpEjyFg2UznxKfs4fcPI0O1Cg+ji+rmGLaHCAvKj6rG6vxUeKezuj89BV7zO7uU0kPQSYWjlmjQbCI5V7FeHL0IfJyRMvf17g1/b01qqyit2kQDpa8BLaRkFkCERJ3zLAMyHOHJ55UL2K+tx3C6qwvKsMeRSzudCVsZ9HDSL3fXACqoL847A1Vkukb06qLzpi/NbtPq0wElIlHuecG1VhlWS9Ho0V+GSYwHS0LjPgxxxHMbXbo7D1XEtk0/LLyf2iuarFGhgdVwk/+57GDrEV+SYFsbxIT/26kiK12LiI91hmdBiWFZfyOHqxA9A/CE6uidYFkLIdPjWhupfTONyaIq7uDqfdLhcn4xP56K9ICA4oXPbM0cv+UdabZpF3lX/1UNuvbXtYUHvFhusSLIhPWbluxr9QkVT0FSZGrZ64N/3OwMdpq9Tnzfq22nuxgjSlaWaPfAHmv/nT+Vpf0a+9Liv38QCLfChV7LEPzNo0Yi3JvZ8ZHWieiyfzjwfd/ztmS5335twrUBXtKvg+HkSQ9IAKS/nPoYN6IfyD63b393IdPw1AEL9hQKlP6LlFdfKLuguqsDqCmvJ44gwY21sA6PbvT/C86EvjhbsbbIauuW38z9MzsgxDyp4PRPltvAx1r9y0Fp2yM5qs4tKjVBzhEvEh/ISg9Z68y83A6BlZGJlPFtJfshuzuhj8KQzrv8Xvq7HXmIVbgpecySNAIX6WCnNb9IZmWU/FA+eeiLd0pwqmE1YU3frpSsN/0kp9ZHjtJQv7zY/6MJnr+SdsVzu7E9DUSYedmDVZK95GPAjAOiNKNYGEtd4W+/yIauPcDcTPtSuzPldJA59GGdqdyC8fu73P6qA0I+knQc47whMIHn3XgU6+bPS1wklr0aQsLm6aP0XrREpf69CmeTpW2NGUhAVp5APHJ0G+RjW/ubNPVctoJdPbG5qT2R4yXj1TXJBKYKxl0vvkLlqgO00j2dRmwV/QXfpiAE7HY36fHO0QMQPCynQenz1Rl1sA6oEpirWWLVLsAlGGa6vSc6NMZkecctNFkt/3EhOIMvWlnR/LlWTvw5NUCTDO2JfPJ1za9vFOMFmGFn3bLyoPcsVmk2xMK9Y9WmWQgrdR7npLf5Ogle5fTtbAz+iiUU+b+Umt8zE0RXxlFNZ6FWShMVa+p1Uiq1W8KNhC1GNasKDHNSCuZCuYYLStlR1fWSWimYBdkoWLcq4CMhJDfAA+G0zJR9tSk6AkFpE/j9C8gYBwz0TT8qMM3TMzmskYYyUvR6TBxc5tMJWpVI/K7goAbR4agU4IQK0XdLsl2yQeSnprbzFKe5kNsIwnH6a9y3ef862EM0k0NTRLE8gBbvNrk52uFpXDf2EZSG6SgrOklae+RKjgd8fbG4l/Do86K4D9/LMvucHZCiA3VfOSrvr0FoVAzAOGf43vEp7NOxrBlTojckzFWVvh+rwVlFaelXJq2U9syeX/kX2p4Z+2bLrFCx3M0G/e6Z2BvxZQDmdEVO4kuGTTXXizVjTf5DXhMomh0HsAeCtyHUxVID4RF0H79tGWpMGvDmHk0f7V2zqwQ0sMAGmY3cYhmTeJhIRDeWkx5PHPct7Q4nNu2NRQ97SGcKJ2J/OVZIzpEz1pP4kSndp00egtni9luCHt5G5trEGeNWBMlkCKOibaVRXOHSJF4VNr3RQjND/4oIXUJruJCI7xmosriv+tOr01qAUJHjDfwZNd7Et54bcihSEVwbMxFJyZDI8m/5Btc1fUQsoomPWzmuGlL0fZqXAPdE/IiuT7RPC2Ct3eeoMxrIgPpIfeEBIDJFogPCPVKFXy95LM10zOO7yg9JE6HzzvQiZqE2+1MsrLhVxfboDgx2dQ236XZLKMqvqDqDOClg5PzBdXL+dhyzA77IMxbvxzG2lDOJpJ6U5lQz2/bsMPpw8O5h7Wz4fhKYFowek2l+1cR9mJFTP+NP8zCd6mQvJ9IjW2tVyO1hCP/PkAvfQQ+KWjk1Po2wCjDkZXfeXKIdPg8hkGrxAVc4BeB4nhcQ3d4lDDknhG6btld5S2mkWlPMHL8dcMQFJwctyFbth7Q1MLjE41SpIjSckhNUsVqMrU0KfNH+swfYUK6GECZohJn8JaVckR0pYTA2Wh2IYvtO6ma8aPTXEORETxP/wVrlsf/TwW+SxW7OyHRdbWtBqzYRUaQuUjWMkanvPv6wmi8Cx//qgqLcQfi2vVa2ARqsvtJMt/C2ndUBYMyFlkMKWqUQwni8z6uHhXSwqj/KZ89hANDTrtmV9n+BHCXPcOAp1udY+S7d5hF0EH5XGPULoS+WAhsxJW/4kw8I304JMGyaSp/ppof7IYzlyXl6acRVybsco5pNKjmkYb7fWu9Q+bFbWH0JplmftkcKkkHPw+NpV7AZcDAck0p8l2+xnrCW1kbeh67BQ6XVWoEdjvOOThTXKW0O5yTWdq4Nm4zzPBx4dzspE9OA/tzu01ex7StWTVuQsUtjysi8Ql87YhUwmcAEGDvdAuGzdQnJMmqKFXHT6G2EUJu8MlbcLMGoRGmMBEoYGlNuRkTHODvTv78ahqfSbTbiQZLU47iW7s0h6brD2eulR3V3tmSkoRVcnKV7RneKEykspsJ2Mk9t2fkDPhc/WxVHRmf9TBsGF4JoNMOgC0272tfcYmN+Nr11y4jAZcfMuEyTldOd8ShzYnsgxGVIHKf8wZ6e1gY/QDVcSWfMNrSzAYfxlc8B5/cnNXafts55Ysj+J7P9VfFqAc8v3LqsvPzocTTXoHu4SZCtmBGPlIq4bANHbmgUz5dpAH4YH4j5E+JS4pnKpjjNRHg83Xl4xNDAtOzEniMKd+YqyNftKtbuxjvXuVMy5javfQa9X8EHvTfFZtvzhLhqpICVFicpkrwD/wfphCbyBB52DCKWdgSG3nMEvL3qrAVhNBUoRnVFzf7+aI10WmAC6HaONnY4CXgbjUKYgTRAuxjvcLe9Ri3RfB0MQL8WTYbV39EkEAsMNzsSo20qBt1UPMhuVxyCqZaCRYEgeUodt2b8DQwB+Aq4Jm4cZcjYGOLt5d0ie4rd97TJVHG/5LxrLHdPVKS+CwGZoohcwsg+huko62DcRV6HFNr1pRmih/Hsw7OaWGGUgIyFoTU5Wp9gHchct6bbl9frUXFM/ODoD7ajMuLhyzyxTBonuGzNMUuAAx7nLWrMlm5vsid1x6C5UdrLuaklAl87aG69mAnMlfAeKZu2hiiKbSK61kAu+xdTdnXvrDme5QmTuxXTygyzVDEApzaT0BJ5u7l1QnnlnPdujK8Q7pNCCpL3fuWv+Q8ZdRjpqSfiFvz0K2BVOE3bCZs4r3aTt/OI5vm2oHzXYdJS6gX2uwf0PeeDY/4Q4bxiXnTdbvPyLbwGlInjgF0RasQmGrcBfw0ZeozpaT2rHJqHvgPHcjhzGw5kNy4SpXz0qPvNrVo0OsHUvGLA/VsdrchHv9XuY5xpfqx6fLfw79Z3ApETTgmY3COBb+sZeFVLG82lsItaxfoAMMVxJn2Th+XfzgRsG5OmuXCbDXuqPwtfDlhZFurYX6it/CDNlitFvkQuV0r+1GWTdkUiNXXhse3eK+L7A9tVpT2ov+0P6MQikkAF/lVP5+q4hUmljZHG80sTYwbZ3eRwfA81b6AKiXE1aYSrtmOw7yW6AVFa8wa09Ev98E+Inw5/qKcqkuaZWgoDrXk3BvW3gaJDqndMvzqUnTk1TVLGTJSMXA6LaOBWqQ+EPvuWCOHu2td6UBhg3KB+5lVyeMW8FmU2aP1mg42QmjqM6PDb8XgtfTrcIkSrsDuKYZtKleBw6ZOjnReDMTjjaIgwgWE86r7Z84xcZo2Q+/PQBTDok37R3S5JvLH0QsLpWqLRDTTpAPckaW0qWYOq1WVwI8WNG39TL1qO/sfFD7QjJtjtJStw0NRDljBvRCJDwj7Zn2uME31s+geijTF9Cwbey8BEh+lhKNWMrJoe7XanVlwMlXDt+0Xrm180ETJw8GPODhbGPqXMTWkEIFJAMAQR//LT1nXsI+0k4krWi+9KS78kGGXPo617KoZ4TXSlMMBG624ZEBa3W0bthvPRCEFQ8AgAu5vzzBZl6ytr41Yy7xz/Rx
*/