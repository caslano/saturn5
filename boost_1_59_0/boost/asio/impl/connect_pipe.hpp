//
// impl/connect_pipe.hpp
// ~~~~~~~~~~~~~~~~~~~~~
//
// Copyright (c) 2003-2022 Christopher M. Kohlhoff (chris at kohlhoff dot com)
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//

#ifndef BOOST_ASIO_IMPL_CONNECT_PIPE_HPP
#define BOOST_ASIO_IMPL_CONNECT_PIPE_HPP

#if defined(_MSC_VER) && (_MSC_VER >= 1200)
# pragma once
#endif // defined(_MSC_VER) && (_MSC_VER >= 1200)

#include <boost/asio/detail/config.hpp>

#if defined(BOOST_ASIO_HAS_PIPE)

#include <boost/asio/connect_pipe.hpp>
#include <boost/asio/detail/throw_error.hpp>

#include <boost/asio/detail/push_options.hpp>

namespace boost {
namespace asio {

template <typename Executor1, typename Executor2>
void connect_pipe(basic_readable_pipe<Executor1>& read_end,
    basic_writable_pipe<Executor2>& write_end)
{
  boost::system::error_code ec;
  boost::asio::connect_pipe(read_end, write_end, ec);
  boost::asio::detail::throw_error(ec, "connect_pipe");
}

template <typename Executor1, typename Executor2>
BOOST_ASIO_SYNC_OP_VOID connect_pipe(basic_readable_pipe<Executor1>& read_end,
    basic_writable_pipe<Executor2>& write_end, boost::system::error_code& ec)
{
  detail::native_pipe_handle p[2];
  detail::create_pipe(p, ec);
  if (ec)
    BOOST_ASIO_SYNC_OP_VOID_RETURN(ec);

  read_end.assign(p[0], ec);
  if (ec)
  {
    detail::close_pipe(p[0]);
    detail::close_pipe(p[1]);
    BOOST_ASIO_SYNC_OP_VOID_RETURN(ec);
  }

  write_end.assign(p[1], ec);
  if (ec)
  {
    boost::system::error_code temp_ec;
    read_end.close(temp_ec);
    detail::close_pipe(p[1]);
    BOOST_ASIO_SYNC_OP_VOID_RETURN(ec);
  }

  BOOST_ASIO_SYNC_OP_VOID_RETURN(ec);
}

} // namespace asio
} // namespace boost

#include <boost/asio/detail/pop_options.hpp>

#endif // defined(BOOST_ASIO_HAS_PIPE)

#endif // BOOST_ASIO_IMPL_CONNECT_PIPE_HPP

/* connect_pipe.hpp
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
*/