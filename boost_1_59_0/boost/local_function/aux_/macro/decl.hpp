
// Copyright (C) 2009-2012 Lorenzo Caminiti
// Distributed under the Boost Software License, Version 1.0
// (see accompanying file LICENSE_1_0.txt or a copy at
// http://www.boost.org/LICENSE_1_0.txt)
// Home at http://www.boost.org/libs/local_function

#ifndef BOOST_LOCAL_FUNCTION_AUX_DECL_HPP_
#define BOOST_LOCAL_FUNCTION_AUX_DECL_HPP_

#include <boost/local_function/aux_/macro/code_/result.hpp>
#include <boost/local_function/aux_/macro/code_/bind.hpp>
#include <boost/local_function/aux_/macro/code_/functor.hpp>
#include <boost/local_function/aux_/preprocessor/traits/decl.hpp>
#include <boost/local_function/aux_/preprocessor/traits/decl_error.hpp>
#include <boost/scope_exit.hpp>
#include <boost/mpl/assert.hpp>
#include <boost/preprocessor/control/iif.hpp>
#include <boost/preprocessor/facilities/is_empty.hpp>
#include <boost/preprocessor/list/adt.hpp>
#include <boost/preprocessor/tuple/eat.hpp>

// PRIVATE //

#define BOOST_LOCAL_FUNCTION_AUX_DECL_OK_(id, typename01, decl_traits) \
    BOOST_LOCAL_FUNCTION_AUX_CODE_RESULT(id, typename01, decl_traits) \
    BOOST_LOCAL_FUNCTION_AUX_CODE_BIND(id, typename01, decl_traits) \
    BOOST_LOCAL_FUNCTION_AUX_CODE_FUNCTOR(id, typename01, decl_traits) 

#define BOOST_LOCAL_FUNCTION_AUX_DECL_ERROR_(id, typename01, decl_traits) \
    BOOST_PP_IIF(BOOST_PP_LIST_IS_CONS( \
            BOOST_LOCAL_FUNCTION_AUX_PP_DECL_TRAITS_RETURNS(decl_traits)), \
        /* return specified, so no result type before this macro expansion */ \
        BOOST_PP_TUPLE_EAT(1) \
    , \
        /* even if error, must declare result type to prevent additional */ \
        /* error due to result type appearing before this macro expansion */ \
        BOOST_LOCAL_FUNCTION_AUX_CODE_RESULT_DECL \
    )(id) \
    ; /* close eventual previous statements, otherwise it has no effect */ \
    BOOST_MPL_ASSERT_MSG(false, /* always fails (there's an error) */ \
            BOOST_LOCAL_FUNCTION_AUX_PP_DECL_TRAITS_ERROR_MSG(decl_traits), ())\
    ; /* must close ASSERT macro for eventual use within class scope */

// PUBLIC //

#define BOOST_LOCAL_FUNCTION_AUX_DECL_ARGS_VAR \
    BOOST_LOCAL_FUNCTION_AUX_SYMBOL( (args) )

// Undefine local function bound args global variable. Actual declaration of
// this variable is made using SFINAE mechanisms by each local function macro.
extern boost::scope_exit::detail::undeclared
        BOOST_LOCAL_FUNCTION_AUX_DECL_ARGS_VAR;

// sign_params: parsed parenthesized params.
#define BOOST_LOCAL_FUNCTION_AUX_DECL(id, typename01, decl_traits) \
    BOOST_PP_IIF(BOOST_PP_IS_EMPTY( \
            BOOST_LOCAL_FUNCTION_AUX_PP_DECL_TRAITS_ERROR_MSG(decl_traits)), \
        BOOST_LOCAL_FUNCTION_AUX_DECL_OK_ \
    , \
        BOOST_LOCAL_FUNCTION_AUX_DECL_ERROR_ \
    )(id, typename01, decl_traits)

#endif // #include guard


/* decl.hpp
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
*/