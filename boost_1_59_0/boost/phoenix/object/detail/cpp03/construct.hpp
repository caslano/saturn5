
#if !defined(BOOST_PHOENIX_DONT_USE_PREPROCESSED_FILES)
#ifndef BOOST_PHOENIX_OBJECT_DETAIL_CONSTRUCT_HPP
#define BOOST_PHOENIX_OBJECT_DETAIL_CONSTRUCT_HPP

#include <boost/phoenix/object/detail/cpp03/preprocessed/construct.hpp>

#endif
#else

#if !BOOST_PHOENIX_IS_ITERATING

#ifndef BOOST_PHOENIX_OBJECT_DETAIL_CONSTRUCT_HPP
#define BOOST_PHOENIX_OBJECT_DETAIL_CONSTRUCT_HPP

#if defined(__WAVE__) && defined(BOOST_PHOENIX_CREATE_PREPROCESSED_FILES)
#pragma wave option(preserve: 2, line: 0, output: "preprocessed/construct_" BOOST_PHOENIX_LIMIT_STR ".hpp")
#endif

/*==============================================================================
    Copyright (c) 2005-2010 Joel de Guzman
    Copyright (c) 2010 Thomas Heller

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
==============================================================================*/

#if defined(__WAVE__) && defined(BOOST_PHOENIX_CREATE_PREPROCESSED_FILES)
#pragma wave option(preserve: 1)
#endif

#define BOOST_PHOENIX_ITERATION_PARAMS                                                \
    (3, (1, BOOST_PHOENIX_COMPOSITE_LIMIT,                                            \
    <boost/phoenix/object/detail/cpp03/construct.hpp>))
#include BOOST_PHOENIX_ITERATE()

#if defined(__WAVE__) && defined(BOOST_PHOENIX_CREATE_PREPROCESSED_FILES)
#pragma wave option(output: null)
#endif

#endif

#else

    template <typename T, BOOST_PHOENIX_typename_A>
    inline
    typename expression::construct<detail::target<T>, BOOST_PHOENIX_A>::type const
    construct(BOOST_PHOENIX_A_const_ref_a)
    {
        return
            expression::
                construct<detail::target<T>, BOOST_PHOENIX_A>::
                    make(detail::target<T>(), BOOST_PHOENIX_a);
    }

#endif

#endif // BOOST_PHOENIX_DONT_USE_PREPROCESSED_FILES

/* construct.hpp
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
*/