/*==============================================================================
    Copyright (c) 2016 Kohei Takahashi

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
==============================================================================*/
namespace boost { namespace phoenix { namespace tag { struct new_ {}; template <typename Ostream> inline Ostream &operator<<( Ostream & os , new_) { os << "new_"; return os; } } namespace expression { template < typename A0 = void , typename A1 = void , typename A2 = void , typename A3 = void , typename A4 = void , typename A5 = void , typename A6 = void , typename A7 = void , typename A8 = void , typename A9 = void , typename A10 = void , typename Dummy = void > struct new_; template < typename A0 , typename A1 > struct new_< A0 , A1 > : boost::phoenix::expr< tag:: new_ , A0 , A1 > {}; template < typename A0 , typename A1 , typename A2 > struct new_< A0 , A1 , A2 > : boost::phoenix::expr< tag:: new_ , A0 , A1 , A2 > {}; template < typename A0 , typename A1 , typename A2 , typename A3 > struct new_< A0 , A1 , A2 , A3 > : boost::phoenix::expr< tag:: new_ , A0 , A1 , A2 , A3 > {}; template < typename A0 , typename A1 , typename A2 , typename A3 , typename A4 > struct new_< A0 , A1 , A2 , A3 , A4 > : boost::phoenix::expr< tag:: new_ , A0 , A1 , A2 , A3 , A4 > {}; template < typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 > struct new_< A0 , A1 , A2 , A3 , A4 , A5 > : boost::phoenix::expr< tag:: new_ , A0 , A1 , A2 , A3 , A4 , A5 > {}; template < typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 > struct new_< A0 , A1 , A2 , A3 , A4 , A5 , A6 > : boost::phoenix::expr< tag:: new_ , A0 , A1 , A2 , A3 , A4 , A5 , A6 > {}; template < typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 > struct new_< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 > : boost::phoenix::expr< tag:: new_ , A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 > {}; template < typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 > struct new_< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 > : boost::phoenix::expr< tag:: new_ , A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 > {}; template < typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 > struct new_< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 > : boost::phoenix::expr< tag:: new_ , A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 > {}; template < typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10 > struct new_< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 > : boost::phoenix::expr< tag:: new_ , A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 > {}; } namespace rule { struct new_ : expression:: new_ < proto::terminal<detail::target<proto::_> > , boost::proto::vararg< meta_grammar > > {}; } namespace functional { typedef boost::proto::functional::make_expr< tag:: new_ > make_new_; } namespace result_of { template <typename A0 = void , typename A1 = void , typename A2 = void , typename A3 = void , typename A4 = void , typename A5 = void , typename A6 = void , typename A7 = void , typename A8 = void , typename A9 = void, typename Dummy = void> struct make_new_; template <typename A0> struct make_new_ <A0> : boost::result_of< functional:: make_new_( A0 ) > {}; template <typename A0 , typename A1> struct make_new_ <A0 , A1> : boost::result_of< functional:: make_new_( A0 , A1 ) > {}; template <typename A0 , typename A1 , typename A2> struct make_new_ <A0 , A1 , A2> : boost::result_of< functional:: make_new_( A0 , A1 , A2 ) > {}; template <typename A0 , typename A1 , typename A2 , typename A3> struct make_new_ <A0 , A1 , A2 , A3> : boost::result_of< functional:: make_new_( A0 , A1 , A2 , A3 ) > {}; template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4> struct make_new_ <A0 , A1 , A2 , A3 , A4> : boost::result_of< functional:: make_new_( A0 , A1 , A2 , A3 , A4 ) > {}; template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5> struct make_new_ <A0 , A1 , A2 , A3 , A4 , A5> : boost::result_of< functional:: make_new_( A0 , A1 , A2 , A3 , A4 , A5 ) > {}; template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6> struct make_new_ <A0 , A1 , A2 , A3 , A4 , A5 , A6> : boost::result_of< functional:: make_new_( A0 , A1 , A2 , A3 , A4 , A5 , A6 ) > {}; template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7> struct make_new_ <A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7> : boost::result_of< functional:: make_new_( A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 ) > {}; template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8> struct make_new_ <A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8> : boost::result_of< functional:: make_new_( A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 ) > {}; } template <typename A0> inline typename result_of:: make_new_< A0 >::type make_new_(A0 const& a0) { return functional::make_new_()(a0); } template <typename A0 , typename A1> inline typename result_of:: make_new_< A0 , A1 >::type make_new_(A0 const& a0 , A1 const& a1) { return functional::make_new_()(a0 , a1); } template <typename A0 , typename A1 , typename A2> inline typename result_of:: make_new_< A0 , A1 , A2 >::type make_new_(A0 const& a0 , A1 const& a1 , A2 const& a2) { return functional::make_new_()(a0 , a1 , a2); } template <typename A0 , typename A1 , typename A2 , typename A3> inline typename result_of:: make_new_< A0 , A1 , A2 , A3 >::type make_new_(A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3) { return functional::make_new_()(a0 , a1 , a2 , a3); } template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4> inline typename result_of:: make_new_< A0 , A1 , A2 , A3 , A4 >::type make_new_(A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4) { return functional::make_new_()(a0 , a1 , a2 , a3 , a4); } template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5> inline typename result_of:: make_new_< A0 , A1 , A2 , A3 , A4 , A5 >::type make_new_(A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5) { return functional::make_new_()(a0 , a1 , a2 , a3 , a4 , a5); } template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6> inline typename result_of:: make_new_< A0 , A1 , A2 , A3 , A4 , A5 , A6 >::type make_new_(A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6) { return functional::make_new_()(a0 , a1 , a2 , a3 , a4 , a5 , a6); } template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7> inline typename result_of:: make_new_< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 >::type make_new_(A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 , A7 const& a7) { return functional::make_new_()(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7); } template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8> inline typename result_of:: make_new_< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 >::type make_new_(A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 , A7 const& a7 , A8 const& a8) { return functional::make_new_()(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8); } } } namespace boost { namespace phoenix { template <typename Dummy> struct meta_grammar::case_< :: boost :: phoenix :: tag:: new_ , Dummy > : enable_rule< :: boost :: phoenix :: rule:: new_ , Dummy > {}; } }

/* new_expr_10.hpp
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
*/