/*==============================================================================
    Copyright (c) 2016 Kohei Takahashi

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
==============================================================================*/
namespace boost { namespace phoenix { namespace tag { struct construct {}; template <typename Ostream> inline Ostream &operator<<( Ostream & os , construct) { os << "construct"; return os; } } namespace expression { template < typename A0 = void , typename A1 = void , typename A2 = void , typename A3 = void , typename A4 = void , typename A5 = void , typename A6 = void , typename A7 = void , typename A8 = void , typename A9 = void , typename A10 = void , typename A11 = void , typename A12 = void , typename A13 = void , typename A14 = void , typename A15 = void , typename A16 = void , typename A17 = void , typename A18 = void , typename A19 = void , typename A20 = void , typename Dummy = void > struct construct; template < typename A0 , typename A1 > struct construct< A0 , A1 > : boost::phoenix::expr< tag:: construct , A0 , A1 > {}; template < typename A0 , typename A1 , typename A2 > struct construct< A0 , A1 , A2 > : boost::phoenix::expr< tag:: construct , A0 , A1 , A2 > {}; template < typename A0 , typename A1 , typename A2 , typename A3 > struct construct< A0 , A1 , A2 , A3 > : boost::phoenix::expr< tag:: construct , A0 , A1 , A2 , A3 > {}; template < typename A0 , typename A1 , typename A2 , typename A3 , typename A4 > struct construct< A0 , A1 , A2 , A3 , A4 > : boost::phoenix::expr< tag:: construct , A0 , A1 , A2 , A3 , A4 > {}; template < typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 > struct construct< A0 , A1 , A2 , A3 , A4 , A5 > : boost::phoenix::expr< tag:: construct , A0 , A1 , A2 , A3 , A4 , A5 > {}; template < typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 > struct construct< A0 , A1 , A2 , A3 , A4 , A5 , A6 > : boost::phoenix::expr< tag:: construct , A0 , A1 , A2 , A3 , A4 , A5 , A6 > {}; template < typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 > struct construct< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 > : boost::phoenix::expr< tag:: construct , A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 > {}; template < typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 > struct construct< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 > : boost::phoenix::expr< tag:: construct , A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 > {}; template < typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 > struct construct< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 > : boost::phoenix::expr< tag:: construct , A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 > {}; template < typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10 > struct construct< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 > : boost::phoenix::expr< tag:: construct , A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 > {}; template < typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10 , typename A11 > struct construct< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 > : boost::phoenix::expr< tag:: construct , A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 > {}; template < typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10 , typename A11 , typename A12 > struct construct< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 > : boost::phoenix::expr< tag:: construct , A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 > {}; template < typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10 , typename A11 , typename A12 , typename A13 > struct construct< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 > : boost::phoenix::expr< tag:: construct , A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 > {}; template < typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10 , typename A11 , typename A12 , typename A13 , typename A14 > struct construct< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 > : boost::phoenix::expr< tag:: construct , A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 > {}; template < typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10 , typename A11 , typename A12 , typename A13 , typename A14 , typename A15 > struct construct< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 > : boost::phoenix::expr< tag:: construct , A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 > {}; template < typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10 , typename A11 , typename A12 , typename A13 , typename A14 , typename A15 , typename A16 > struct construct< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 > : boost::phoenix::expr< tag:: construct , A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 > {}; template < typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10 , typename A11 , typename A12 , typename A13 , typename A14 , typename A15 , typename A16 , typename A17 > struct construct< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 > : boost::phoenix::expr< tag:: construct , A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 > {}; template < typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10 , typename A11 , typename A12 , typename A13 , typename A14 , typename A15 , typename A16 , typename A17 , typename A18 > struct construct< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 > : boost::phoenix::expr< tag:: construct , A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 > {}; template < typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10 , typename A11 , typename A12 , typename A13 , typename A14 , typename A15 , typename A16 , typename A17 , typename A18 , typename A19 > struct construct< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 > : boost::phoenix::expr< tag:: construct , A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 > {}; template < typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10 , typename A11 , typename A12 , typename A13 , typename A14 , typename A15 , typename A16 , typename A17 , typename A18 , typename A19 , typename A20 > struct construct< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 > : boost::phoenix::expr< tag:: construct , A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 > {}; } namespace rule { struct construct : expression:: construct < proto::terminal<detail::target<proto::_> > , boost::proto::vararg< meta_grammar > > {}; } namespace functional { typedef boost::proto::functional::make_expr< tag:: construct > make_construct; } namespace result_of { template <typename A0 = void , typename A1 = void , typename A2 = void , typename A3 = void , typename A4 = void , typename A5 = void , typename A6 = void , typename A7 = void , typename A8 = void , typename A9 = void , typename A10 = void , typename A11 = void , typename A12 = void , typename A13 = void , typename A14 = void , typename A15 = void , typename A16 = void , typename A17 = void , typename A18 = void , typename A19 = void, typename Dummy = void> struct make_construct; template <typename A0> struct make_construct <A0> : boost::result_of< functional:: make_construct( A0 ) > {}; template <typename A0 , typename A1> struct make_construct <A0 , A1> : boost::result_of< functional:: make_construct( A0 , A1 ) > {}; template <typename A0 , typename A1 , typename A2> struct make_construct <A0 , A1 , A2> : boost::result_of< functional:: make_construct( A0 , A1 , A2 ) > {}; template <typename A0 , typename A1 , typename A2 , typename A3> struct make_construct <A0 , A1 , A2 , A3> : boost::result_of< functional:: make_construct( A0 , A1 , A2 , A3 ) > {}; template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4> struct make_construct <A0 , A1 , A2 , A3 , A4> : boost::result_of< functional:: make_construct( A0 , A1 , A2 , A3 , A4 ) > {}; template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5> struct make_construct <A0 , A1 , A2 , A3 , A4 , A5> : boost::result_of< functional:: make_construct( A0 , A1 , A2 , A3 , A4 , A5 ) > {}; template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6> struct make_construct <A0 , A1 , A2 , A3 , A4 , A5 , A6> : boost::result_of< functional:: make_construct( A0 , A1 , A2 , A3 , A4 , A5 , A6 ) > {}; template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7> struct make_construct <A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7> : boost::result_of< functional:: make_construct( A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 ) > {}; template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8> struct make_construct <A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8> : boost::result_of< functional:: make_construct( A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 ) > {}; template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9> struct make_construct <A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9> : boost::result_of< functional:: make_construct( A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 ) > {}; template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10> struct make_construct <A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10> : boost::result_of< functional:: make_construct( A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 ) > {}; template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10 , typename A11> struct make_construct <A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11> : boost::result_of< functional:: make_construct( A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 ) > {}; template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10 , typename A11 , typename A12> struct make_construct <A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12> : boost::result_of< functional:: make_construct( A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 ) > {}; template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10 , typename A11 , typename A12 , typename A13> struct make_construct <A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13> : boost::result_of< functional:: make_construct( A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 ) > {}; template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10 , typename A11 , typename A12 , typename A13 , typename A14> struct make_construct <A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14> : boost::result_of< functional:: make_construct( A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 ) > {}; template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10 , typename A11 , typename A12 , typename A13 , typename A14 , typename A15> struct make_construct <A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15> : boost::result_of< functional:: make_construct( A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 ) > {}; template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10 , typename A11 , typename A12 , typename A13 , typename A14 , typename A15 , typename A16> struct make_construct <A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16> : boost::result_of< functional:: make_construct( A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 ) > {}; template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10 , typename A11 , typename A12 , typename A13 , typename A14 , typename A15 , typename A16 , typename A17> struct make_construct <A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17> : boost::result_of< functional:: make_construct( A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 ) > {}; template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10 , typename A11 , typename A12 , typename A13 , typename A14 , typename A15 , typename A16 , typename A17 , typename A18> struct make_construct <A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18> : boost::result_of< functional:: make_construct( A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 ) > {}; } template <typename A0> inline typename result_of:: make_construct< A0 >::type make_construct(A0 const& a0) { return functional::make_construct()(a0); } template <typename A0 , typename A1> inline typename result_of:: make_construct< A0 , A1 >::type make_construct(A0 const& a0 , A1 const& a1) { return functional::make_construct()(a0 , a1); } template <typename A0 , typename A1 , typename A2> inline typename result_of:: make_construct< A0 , A1 , A2 >::type make_construct(A0 const& a0 , A1 const& a1 , A2 const& a2) { return functional::make_construct()(a0 , a1 , a2); } template <typename A0 , typename A1 , typename A2 , typename A3> inline typename result_of:: make_construct< A0 , A1 , A2 , A3 >::type make_construct(A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3) { return functional::make_construct()(a0 , a1 , a2 , a3); } template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4> inline typename result_of:: make_construct< A0 , A1 , A2 , A3 , A4 >::type make_construct(A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4) { return functional::make_construct()(a0 , a1 , a2 , a3 , a4); } template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5> inline typename result_of:: make_construct< A0 , A1 , A2 , A3 , A4 , A5 >::type make_construct(A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5) { return functional::make_construct()(a0 , a1 , a2 , a3 , a4 , a5); } template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6> inline typename result_of:: make_construct< A0 , A1 , A2 , A3 , A4 , A5 , A6 >::type make_construct(A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6) { return functional::make_construct()(a0 , a1 , a2 , a3 , a4 , a5 , a6); } template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7> inline typename result_of:: make_construct< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 >::type make_construct(A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 , A7 const& a7) { return functional::make_construct()(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7); } template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8> inline typename result_of:: make_construct< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 >::type make_construct(A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 , A7 const& a7 , A8 const& a8) { return functional::make_construct()(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8); } template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9> inline typename result_of:: make_construct< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 >::type make_construct(A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 , A7 const& a7 , A8 const& a8 , A9 const& a9) { return functional::make_construct()(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 , a9); } template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10> inline typename result_of:: make_construct< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 >::type make_construct(A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 , A7 const& a7 , A8 const& a8 , A9 const& a9 , A10 const& a10) { return functional::make_construct()(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 , a9 , a10); } template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10 , typename A11> inline typename result_of:: make_construct< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 >::type make_construct(A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 , A7 const& a7 , A8 const& a8 , A9 const& a9 , A10 const& a10 , A11 const& a11) { return functional::make_construct()(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 , a9 , a10 , a11); } template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10 , typename A11 , typename A12> inline typename result_of:: make_construct< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 >::type make_construct(A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 , A7 const& a7 , A8 const& a8 , A9 const& a9 , A10 const& a10 , A11 const& a11 , A12 const& a12) { return functional::make_construct()(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 , a9 , a10 , a11 , a12); } template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10 , typename A11 , typename A12 , typename A13> inline typename result_of:: make_construct< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 >::type make_construct(A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 , A7 const& a7 , A8 const& a8 , A9 const& a9 , A10 const& a10 , A11 const& a11 , A12 const& a12 , A13 const& a13) { return functional::make_construct()(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 , a9 , a10 , a11 , a12 , a13); } template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10 , typename A11 , typename A12 , typename A13 , typename A14> inline typename result_of:: make_construct< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 >::type make_construct(A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 , A7 const& a7 , A8 const& a8 , A9 const& a9 , A10 const& a10 , A11 const& a11 , A12 const& a12 , A13 const& a13 , A14 const& a14) { return functional::make_construct()(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 , a9 , a10 , a11 , a12 , a13 , a14); } template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10 , typename A11 , typename A12 , typename A13 , typename A14 , typename A15> inline typename result_of:: make_construct< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 >::type make_construct(A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 , A7 const& a7 , A8 const& a8 , A9 const& a9 , A10 const& a10 , A11 const& a11 , A12 const& a12 , A13 const& a13 , A14 const& a14 , A15 const& a15) { return functional::make_construct()(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 , a9 , a10 , a11 , a12 , a13 , a14 , a15); } template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10 , typename A11 , typename A12 , typename A13 , typename A14 , typename A15 , typename A16> inline typename result_of:: make_construct< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 >::type make_construct(A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 , A7 const& a7 , A8 const& a8 , A9 const& a9 , A10 const& a10 , A11 const& a11 , A12 const& a12 , A13 const& a13 , A14 const& a14 , A15 const& a15 , A16 const& a16) { return functional::make_construct()(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 , a9 , a10 , a11 , a12 , a13 , a14 , a15 , a16); } template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10 , typename A11 , typename A12 , typename A13 , typename A14 , typename A15 , typename A16 , typename A17> inline typename result_of:: make_construct< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 >::type make_construct(A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 , A7 const& a7 , A8 const& a8 , A9 const& a9 , A10 const& a10 , A11 const& a11 , A12 const& a12 , A13 const& a13 , A14 const& a14 , A15 const& a15 , A16 const& a16 , A17 const& a17) { return functional::make_construct()(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 , a9 , a10 , a11 , a12 , a13 , a14 , a15 , a16 , a17); } template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10 , typename A11 , typename A12 , typename A13 , typename A14 , typename A15 , typename A16 , typename A17 , typename A18> inline typename result_of:: make_construct< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 >::type make_construct(A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 , A7 const& a7 , A8 const& a8 , A9 const& a9 , A10 const& a10 , A11 const& a11 , A12 const& a12 , A13 const& a13 , A14 const& a14 , A15 const& a15 , A16 const& a16 , A17 const& a17 , A18 const& a18) { return functional::make_construct()(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 , a9 , a10 , a11 , a12 , a13 , a14 , a15 , a16 , a17 , a18); } } } namespace boost { namespace phoenix { template <typename Dummy> struct meta_grammar::case_< :: boost :: phoenix :: tag:: construct , Dummy > : enable_rule< :: boost :: phoenix :: rule:: construct , Dummy > {}; } }

/* construct_expr_20.hpp
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
*/