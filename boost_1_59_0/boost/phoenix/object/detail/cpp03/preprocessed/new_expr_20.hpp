/*==============================================================================
    Copyright (c) 2016 Kohei Takahashi

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
==============================================================================*/
namespace boost { namespace phoenix { namespace tag { struct new_ {}; template <typename Ostream> inline Ostream &operator<<( Ostream & os , new_) { os << "new_"; return os; } } namespace expression { template < typename A0 = void , typename A1 = void , typename A2 = void , typename A3 = void , typename A4 = void , typename A5 = void , typename A6 = void , typename A7 = void , typename A8 = void , typename A9 = void , typename A10 = void , typename A11 = void , typename A12 = void , typename A13 = void , typename A14 = void , typename A15 = void , typename A16 = void , typename A17 = void , typename A18 = void , typename A19 = void , typename A20 = void , typename Dummy = void > struct new_; template < typename A0 , typename A1 > struct new_< A0 , A1 > : boost::phoenix::expr< tag:: new_ , A0 , A1 > {}; template < typename A0 , typename A1 , typename A2 > struct new_< A0 , A1 , A2 > : boost::phoenix::expr< tag:: new_ , A0 , A1 , A2 > {}; template < typename A0 , typename A1 , typename A2 , typename A3 > struct new_< A0 , A1 , A2 , A3 > : boost::phoenix::expr< tag:: new_ , A0 , A1 , A2 , A3 > {}; template < typename A0 , typename A1 , typename A2 , typename A3 , typename A4 > struct new_< A0 , A1 , A2 , A3 , A4 > : boost::phoenix::expr< tag:: new_ , A0 , A1 , A2 , A3 , A4 > {}; template < typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 > struct new_< A0 , A1 , A2 , A3 , A4 , A5 > : boost::phoenix::expr< tag:: new_ , A0 , A1 , A2 , A3 , A4 , A5 > {}; template < typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 > struct new_< A0 , A1 , A2 , A3 , A4 , A5 , A6 > : boost::phoenix::expr< tag:: new_ , A0 , A1 , A2 , A3 , A4 , A5 , A6 > {}; template < typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 > struct new_< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 > : boost::phoenix::expr< tag:: new_ , A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 > {}; template < typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 > struct new_< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 > : boost::phoenix::expr< tag:: new_ , A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 > {}; template < typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 > struct new_< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 > : boost::phoenix::expr< tag:: new_ , A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 > {}; template < typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10 > struct new_< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 > : boost::phoenix::expr< tag:: new_ , A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 > {}; template < typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10 , typename A11 > struct new_< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 > : boost::phoenix::expr< tag:: new_ , A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 > {}; template < typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10 , typename A11 , typename A12 > struct new_< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 > : boost::phoenix::expr< tag:: new_ , A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 > {}; template < typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10 , typename A11 , typename A12 , typename A13 > struct new_< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 > : boost::phoenix::expr< tag:: new_ , A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 > {}; template < typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10 , typename A11 , typename A12 , typename A13 , typename A14 > struct new_< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 > : boost::phoenix::expr< tag:: new_ , A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 > {}; template < typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10 , typename A11 , typename A12 , typename A13 , typename A14 , typename A15 > struct new_< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 > : boost::phoenix::expr< tag:: new_ , A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 > {}; template < typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10 , typename A11 , typename A12 , typename A13 , typename A14 , typename A15 , typename A16 > struct new_< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 > : boost::phoenix::expr< tag:: new_ , A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 > {}; template < typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10 , typename A11 , typename A12 , typename A13 , typename A14 , typename A15 , typename A16 , typename A17 > struct new_< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 > : boost::phoenix::expr< tag:: new_ , A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 > {}; template < typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10 , typename A11 , typename A12 , typename A13 , typename A14 , typename A15 , typename A16 , typename A17 , typename A18 > struct new_< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 > : boost::phoenix::expr< tag:: new_ , A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 > {}; template < typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10 , typename A11 , typename A12 , typename A13 , typename A14 , typename A15 , typename A16 , typename A17 , typename A18 , typename A19 > struct new_< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 > : boost::phoenix::expr< tag:: new_ , A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 > {}; template < typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10 , typename A11 , typename A12 , typename A13 , typename A14 , typename A15 , typename A16 , typename A17 , typename A18 , typename A19 , typename A20 > struct new_< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 > : boost::phoenix::expr< tag:: new_ , A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 > {}; } namespace rule { struct new_ : expression:: new_ < proto::terminal<detail::target<proto::_> > , boost::proto::vararg< meta_grammar > > {}; } namespace functional { typedef boost::proto::functional::make_expr< tag:: new_ > make_new_; } namespace result_of { template <typename A0 = void , typename A1 = void , typename A2 = void , typename A3 = void , typename A4 = void , typename A5 = void , typename A6 = void , typename A7 = void , typename A8 = void , typename A9 = void , typename A10 = void , typename A11 = void , typename A12 = void , typename A13 = void , typename A14 = void , typename A15 = void , typename A16 = void , typename A17 = void , typename A18 = void , typename A19 = void, typename Dummy = void> struct make_new_; template <typename A0> struct make_new_ <A0> : boost::result_of< functional:: make_new_( A0 ) > {}; template <typename A0 , typename A1> struct make_new_ <A0 , A1> : boost::result_of< functional:: make_new_( A0 , A1 ) > {}; template <typename A0 , typename A1 , typename A2> struct make_new_ <A0 , A1 , A2> : boost::result_of< functional:: make_new_( A0 , A1 , A2 ) > {}; template <typename A0 , typename A1 , typename A2 , typename A3> struct make_new_ <A0 , A1 , A2 , A3> : boost::result_of< functional:: make_new_( A0 , A1 , A2 , A3 ) > {}; template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4> struct make_new_ <A0 , A1 , A2 , A3 , A4> : boost::result_of< functional:: make_new_( A0 , A1 , A2 , A3 , A4 ) > {}; template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5> struct make_new_ <A0 , A1 , A2 , A3 , A4 , A5> : boost::result_of< functional:: make_new_( A0 , A1 , A2 , A3 , A4 , A5 ) > {}; template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6> struct make_new_ <A0 , A1 , A2 , A3 , A4 , A5 , A6> : boost::result_of< functional:: make_new_( A0 , A1 , A2 , A3 , A4 , A5 , A6 ) > {}; template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7> struct make_new_ <A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7> : boost::result_of< functional:: make_new_( A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 ) > {}; template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8> struct make_new_ <A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8> : boost::result_of< functional:: make_new_( A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 ) > {}; template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9> struct make_new_ <A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9> : boost::result_of< functional:: make_new_( A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 ) > {}; template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10> struct make_new_ <A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10> : boost::result_of< functional:: make_new_( A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 ) > {}; template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10 , typename A11> struct make_new_ <A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11> : boost::result_of< functional:: make_new_( A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 ) > {}; template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10 , typename A11 , typename A12> struct make_new_ <A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12> : boost::result_of< functional:: make_new_( A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 ) > {}; template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10 , typename A11 , typename A12 , typename A13> struct make_new_ <A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13> : boost::result_of< functional:: make_new_( A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 ) > {}; template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10 , typename A11 , typename A12 , typename A13 , typename A14> struct make_new_ <A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14> : boost::result_of< functional:: make_new_( A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 ) > {}; template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10 , typename A11 , typename A12 , typename A13 , typename A14 , typename A15> struct make_new_ <A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15> : boost::result_of< functional:: make_new_( A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 ) > {}; template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10 , typename A11 , typename A12 , typename A13 , typename A14 , typename A15 , typename A16> struct make_new_ <A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16> : boost::result_of< functional:: make_new_( A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 ) > {}; template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10 , typename A11 , typename A12 , typename A13 , typename A14 , typename A15 , typename A16 , typename A17> struct make_new_ <A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17> : boost::result_of< functional:: make_new_( A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 ) > {}; template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10 , typename A11 , typename A12 , typename A13 , typename A14 , typename A15 , typename A16 , typename A17 , typename A18> struct make_new_ <A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18> : boost::result_of< functional:: make_new_( A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 ) > {}; } template <typename A0> inline typename result_of:: make_new_< A0 >::type make_new_(A0 const& a0) { return functional::make_new_()(a0); } template <typename A0 , typename A1> inline typename result_of:: make_new_< A0 , A1 >::type make_new_(A0 const& a0 , A1 const& a1) { return functional::make_new_()(a0 , a1); } template <typename A0 , typename A1 , typename A2> inline typename result_of:: make_new_< A0 , A1 , A2 >::type make_new_(A0 const& a0 , A1 const& a1 , A2 const& a2) { return functional::make_new_()(a0 , a1 , a2); } template <typename A0 , typename A1 , typename A2 , typename A3> inline typename result_of:: make_new_< A0 , A1 , A2 , A3 >::type make_new_(A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3) { return functional::make_new_()(a0 , a1 , a2 , a3); } template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4> inline typename result_of:: make_new_< A0 , A1 , A2 , A3 , A4 >::type make_new_(A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4) { return functional::make_new_()(a0 , a1 , a2 , a3 , a4); } template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5> inline typename result_of:: make_new_< A0 , A1 , A2 , A3 , A4 , A5 >::type make_new_(A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5) { return functional::make_new_()(a0 , a1 , a2 , a3 , a4 , a5); } template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6> inline typename result_of:: make_new_< A0 , A1 , A2 , A3 , A4 , A5 , A6 >::type make_new_(A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6) { return functional::make_new_()(a0 , a1 , a2 , a3 , a4 , a5 , a6); } template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7> inline typename result_of:: make_new_< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 >::type make_new_(A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 , A7 const& a7) { return functional::make_new_()(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7); } template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8> inline typename result_of:: make_new_< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 >::type make_new_(A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 , A7 const& a7 , A8 const& a8) { return functional::make_new_()(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8); } template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9> inline typename result_of:: make_new_< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 >::type make_new_(A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 , A7 const& a7 , A8 const& a8 , A9 const& a9) { return functional::make_new_()(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 , a9); } template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10> inline typename result_of:: make_new_< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 >::type make_new_(A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 , A7 const& a7 , A8 const& a8 , A9 const& a9 , A10 const& a10) { return functional::make_new_()(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 , a9 , a10); } template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10 , typename A11> inline typename result_of:: make_new_< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 >::type make_new_(A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 , A7 const& a7 , A8 const& a8 , A9 const& a9 , A10 const& a10 , A11 const& a11) { return functional::make_new_()(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 , a9 , a10 , a11); } template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10 , typename A11 , typename A12> inline typename result_of:: make_new_< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 >::type make_new_(A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 , A7 const& a7 , A8 const& a8 , A9 const& a9 , A10 const& a10 , A11 const& a11 , A12 const& a12) { return functional::make_new_()(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 , a9 , a10 , a11 , a12); } template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10 , typename A11 , typename A12 , typename A13> inline typename result_of:: make_new_< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 >::type make_new_(A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 , A7 const& a7 , A8 const& a8 , A9 const& a9 , A10 const& a10 , A11 const& a11 , A12 const& a12 , A13 const& a13) { return functional::make_new_()(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 , a9 , a10 , a11 , a12 , a13); } template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10 , typename A11 , typename A12 , typename A13 , typename A14> inline typename result_of:: make_new_< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 >::type make_new_(A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 , A7 const& a7 , A8 const& a8 , A9 const& a9 , A10 const& a10 , A11 const& a11 , A12 const& a12 , A13 const& a13 , A14 const& a14) { return functional::make_new_()(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 , a9 , a10 , a11 , a12 , a13 , a14); } template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10 , typename A11 , typename A12 , typename A13 , typename A14 , typename A15> inline typename result_of:: make_new_< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 >::type make_new_(A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 , A7 const& a7 , A8 const& a8 , A9 const& a9 , A10 const& a10 , A11 const& a11 , A12 const& a12 , A13 const& a13 , A14 const& a14 , A15 const& a15) { return functional::make_new_()(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 , a9 , a10 , a11 , a12 , a13 , a14 , a15); } template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10 , typename A11 , typename A12 , typename A13 , typename A14 , typename A15 , typename A16> inline typename result_of:: make_new_< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 >::type make_new_(A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 , A7 const& a7 , A8 const& a8 , A9 const& a9 , A10 const& a10 , A11 const& a11 , A12 const& a12 , A13 const& a13 , A14 const& a14 , A15 const& a15 , A16 const& a16) { return functional::make_new_()(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 , a9 , a10 , a11 , a12 , a13 , a14 , a15 , a16); } template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10 , typename A11 , typename A12 , typename A13 , typename A14 , typename A15 , typename A16 , typename A17> inline typename result_of:: make_new_< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 >::type make_new_(A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 , A7 const& a7 , A8 const& a8 , A9 const& a9 , A10 const& a10 , A11 const& a11 , A12 const& a12 , A13 const& a13 , A14 const& a14 , A15 const& a15 , A16 const& a16 , A17 const& a17) { return functional::make_new_()(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 , a9 , a10 , a11 , a12 , a13 , a14 , a15 , a16 , a17); } template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10 , typename A11 , typename A12 , typename A13 , typename A14 , typename A15 , typename A16 , typename A17 , typename A18> inline typename result_of:: make_new_< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 >::type make_new_(A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 , A7 const& a7 , A8 const& a8 , A9 const& a9 , A10 const& a10 , A11 const& a11 , A12 const& a12 , A13 const& a13 , A14 const& a14 , A15 const& a15 , A16 const& a16 , A17 const& a17 , A18 const& a18) { return functional::make_new_()(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 , a9 , a10 , a11 , a12 , a13 , a14 , a15 , a16 , a17 , a18); } } } namespace boost { namespace phoenix { template <typename Dummy> struct meta_grammar::case_< :: boost :: phoenix :: tag:: new_ , Dummy > : enable_rule< :: boost :: phoenix :: rule:: new_ , Dummy > {}; } }

/* new_expr_20.hpp
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
*/