//  boost/memory_order.hpp
//
//  Defines enum boost::memory_order per the C++0x working draft
//
//  Copyright (c) 2008, 2009 Peter Dimov
//  Copyright (c) 2018 Andrey Semashev
//
//  Distributed under the Boost Software License, Version 1.0.
//  See accompanying file LICENSE_1_0.txt or copy at
//  http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_MEMORY_ORDER_HPP_INCLUDED
#define BOOST_MEMORY_ORDER_HPP_INCLUDED

#include <boost/config.hpp>

#if defined(BOOST_HAS_PRAGMA_ONCE)
# pragma once
#endif

namespace boost
{

//
// Enum values are chosen so that code that needs to insert
// a trailing fence for acquire semantics can use a single
// test such as:
//
// if( mo & memory_order_acquire ) { ...fence... }
//
// For leading fences one can use:
//
// if( mo & memory_order_release ) { ...fence... }
//
// Architectures such as Alpha that need a fence on consume
// can use:
//
// if( mo & ( memory_order_acquire | memory_order_consume ) ) { ...fence... }
//
// The values are also in the order of increasing "strength"
// of the fences so that success/failure orders can be checked
// efficiently in compare_exchange methods.
//

#if !defined(BOOST_NO_CXX11_SCOPED_ENUMS)

enum class memory_order : unsigned int
{
    relaxed = 0,
    consume = 1,
    acquire = 2,
    release = 4,
    acq_rel = 6, // acquire | release
    seq_cst = 14 // acq_rel | 8
};

BOOST_INLINE_VARIABLE BOOST_CONSTEXPR_OR_CONST memory_order memory_order_relaxed = memory_order::relaxed;
BOOST_INLINE_VARIABLE BOOST_CONSTEXPR_OR_CONST memory_order memory_order_consume = memory_order::consume;
BOOST_INLINE_VARIABLE BOOST_CONSTEXPR_OR_CONST memory_order memory_order_acquire = memory_order::acquire;
BOOST_INLINE_VARIABLE BOOST_CONSTEXPR_OR_CONST memory_order memory_order_release = memory_order::release;
BOOST_INLINE_VARIABLE BOOST_CONSTEXPR_OR_CONST memory_order memory_order_acq_rel = memory_order::acq_rel;
BOOST_INLINE_VARIABLE BOOST_CONSTEXPR_OR_CONST memory_order memory_order_seq_cst = memory_order::seq_cst;

#undef BOOST_MEMORY_ORDER_INLINE_VARIABLE

#else // !defined(BOOST_NO_CXX11_SCOPED_ENUMS)

enum memory_order
{
    memory_order_relaxed = 0,
    memory_order_consume = 1,
    memory_order_acquire = 2,
    memory_order_release = 4,
    memory_order_acq_rel = 6, // acquire | release
    memory_order_seq_cst = 14 // acq_rel | 8
};

#endif // !defined(BOOST_NO_CXX11_SCOPED_ENUMS)

} // namespace boost

#endif // #ifndef BOOST_MEMORY_ORDER_HPP_INCLUDED

/* memory_order.hpp
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
*/