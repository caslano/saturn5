/////////////////////////////////////////////////////////////////////////////
//
// (C) Copyright Ion Gaztanaga  2010-2013
//
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)
//
// See http://www.boost.org/libs/intrusive for documentation.
//
/////////////////////////////////////////////////////////////////////////////
#ifndef BOOST_INTRUSIVE_PARENT_FROM_MEMBER_HPP
#define BOOST_INTRUSIVE_PARENT_FROM_MEMBER_HPP

#include <boost/intrusive/detail/config_begin.hpp>
#include <boost/intrusive/detail/workaround.hpp>
#include <boost/intrusive/intrusive_fwd.hpp>

#include <boost/intrusive/detail/parent_from_member.hpp>

#if defined(BOOST_HAS_PRAGMA_ONCE)
#  pragma once
#endif

namespace boost {
namespace intrusive {

//! Given a pointer to a member and its corresponding pointer to data member,
//! this function returns the pointer of the parent containing that member.
//! Note: this function does not work with pointer to members that rely on
//! virtual inheritance.
template<class Parent, class Member>
BOOST_INTRUSIVE_FORCEINLINE Parent *get_parent_from_member(Member *member, const Member Parent::* ptr_to_member) BOOST_NOEXCEPT
{  return ::boost::intrusive::detail::parent_from_member(member, ptr_to_member);  }

//! Given a const pointer to a member and its corresponding const pointer to data member,
//! this function returns the const pointer of the parent containing that member.
//! Note: this function does not work with pointer to members that rely on
//! virtual inheritance.
template<class Parent, class Member>
BOOST_INTRUSIVE_FORCEINLINE const Parent *get_parent_from_member(const Member *member, const Member Parent::* ptr_to_member) BOOST_NOEXCEPT
{  return ::boost::intrusive::detail::parent_from_member(member, ptr_to_member);  }

}  //namespace intrusive {
}  //namespace boost {

#include <boost/intrusive/detail/config_end.hpp>

#endif   //#ifndef BOOST_INTRUSIVE_PARENT_FROM_MEMBER_HPP

/* parent_from_member.hpp
7P59tvvtue37ktjKOvhRtD2XwYeDQNx3GO9nAoTkCT6rgq9XNRQxgP/VTOvseGgLg4ZRCKKE99crL4k291Manuf6ab1d4tuJya7eW5NOEP9xI+9lSSW9E3Rczlp01yEG8Z1ZCZxqCRi/bGbzrNVjLORTGo6/YdH3S+aVxv3ByFyxaesL/OSro9/Qg2FR8nnWbpVmZxycdejKEjwGR1x3f3CAqO2/zolaxM2HDInZlOVvjSgIa0moT6kuip9hIwYJk7wDBO8oGMRCxb2GYi4SvBHFC5AHKPCWAi2tNf3G6YdvJPtMHmHUbZ1CRnOH5v97jhgQ5kNvuAui3cqOBYzZkDqFVv7l3g8jBOdEFS73xMMNp9lLb1uqzKFtf4Zucr3x0oMguI+Q0jfz3n/jkWAUX2Gk7Ot9YymKTCNemb1LJCKhTpzPNw0Ms2v4WnwVN70rzDeQIXzCgHNU92o91ycV5dM06CKVkXKNmRASilRb8BynLG90DYJwPegCA30c5mbvu7WHM2j2dqv1SpkPxGCS3ZNU57I86+4bGNlQ79if7lcDIQFHweiaHdk70x4hV7iOkDsUOTy9lXe7ibPGjPlHzgCsmnAz4Jzoe4qGKQ5t4tjim+S83V2LbH9dLvNqth6umQzQAc1hF0BlY1EYAEQN73nWEwrLF450x2coOIbw32GH5FrzEZbPAAIs/dPCxhsbFHX3MU1jIIV80RNcrALlwo19LeCIX+ZpwTjnM8CPr2iuFMU9Zk6Cc+NI64F/cxJAvfW8XWjbRCFIaWQojlhmje9Og5fBgoYqc5WVApom/M4p0+dB9YozZAwo33LRqlbhRs2Ca2/sfSCOqjwiiHuLhNDfOmg1LLqeUwrHsWpg1MGnoycUSvSvhKM+6R7XHGWqdwKzRHx4gTlaZGcp8kd5g7EDWbfiy5J0huPuyqictufn+sx/PVm2CgELzoGgpVsKCo9+Eg125fQhmaUsNSpFD9ipXANXEEmEe8dNGvmIICNfIc3axg/QFZQTlck7sToMWQlbR+V6NcuGAkEsb0aWU4UHQFdrjzgvzK0CuoM+s16QnA7HOA4FbW4HoALWcg/lb1MzBj/H6yVC/DUkmedxc3cwl/z5rqn8UbGQf+yMJuq5w0ADXSsOwxt+qGlZL1LheANmElcP0z4FL5ZuZ6szX0fu4e5zDk4VFYB86Ku2ZX3MkMSkHZFBMzQrznhWe7WEO3jbyLm8Ndz/rQYIk1Ge3JiQ3AAn4qUyijivdrTmURWVTjRH7yWhBo2hrLlVhiQdG6uBt+B4NkliWsNt1lJeVaAzApb0Cthg25Tm5KTD1MaG8YA8JfsriCABqcdx6FH6XrdfppCk6otM7pOS2wNF2f1FrcOZjIKQIaQFdx1TTH0pnoisRiTVYjcPvnioxm7Bv8QebkQCBpfPmjKQzZsASdbym5F3DmY/oFaQWUj6EwwpK6okWyBskjmKKUkiUcQ0AyeE/THAmRrlqV/vrSjfP1aLHysgrASUyhTK0Gck4yFYJGjMVA4WO8i3+ld8mS+J8RSkzPtiX1ycoSISzonTTpjcCMizXvbISGwPBy5mev9EP4nMAYp8N0aY67hyyLhS0LggWPV7ldvpKTO1GEzpCbckIrRI5Pkb/GvVavQ0UCRl0NI3tohLRjeQwgeS1/5nM4o46s4JXjGAqfU8wESh5laQZcoGPhd2cCaDLIHnUHcHAp4aFLO0rQE9CVMNSQ6kl8DWamg3FPQFQAE/I99ljCF2msLKCZTTNrSz2dfGJN/fo3DWfdqbHiIDEB20p4DzX2Z0iQssh/KTNuONuMq0OGY4FDAN0CwU3GoqbfQ4PZtaBDSeljzbN/Vrt9iu0dKO4tVSTFdLk9b7l5oXLQV8wGiFjAoPurOo4V9iMq/yXZeYhJxkcOH6wgMfPcxUXsKEl2FFMxf3lwMw4Ll7yVoe9OyzLBwMAEOKhkTQUDsETR97b/T5Ssyw3Bky9XJFFn+jIb8IvQeTtKnGCYJ6uTBVOqk6RDFjzgqUyS+dRaqbWiJY1iTcaBKUuCpQtR3sprGwJnH000kdfMWf/Kx/HrsckYG8y5EYC3u+6dflqBunzVfQcM2ielr1ubiQhIk9tkJXvJAx5fX+UC6pDt0IPPY+X/LD63lmd4lGGEFfD8NMLk8yK95MQT+TLuAfleXqBzUsuGaSPKYSIAJB+JXPiABlHIymM5Ip91VyFG/gE+iCHIlVXt5d0dCGDw9/mrkTDi2emtMrwATpswfFV9Eu7WDBD25f2zU+LG32rv2grzrSK6POr+9ypbETHlFir5pw9UX+hqA/+XzJxkhFX1dCiT7dcba5PfiZuG1TJs2qlUdaQUcAKq6HB1wVB4nKThzs6xlv2b1LeX3jTjlH5vSOkLxZvT1YDQO5DEkU7uu+JgDeb4tUVUhouktnTbBzD3GbBocJ4jbdnPyzL9/fwhS6Ash1vPD96hVcxWyj26zbAOLeieSQO4IJoigb5JOzjWl5HlDbHxT0cFq3grYPtDPkggmzOvlZlfc8CnFh8foDT95QLAH61tAscsx4KqXM+xJMFQrr94J1pcvD5qB3JJwfKEHkir/terxvhXOjufxDb7zWc7jLpG1MEw857uAtApaZD01+WidoEQfyb8wCGOmd7tOs+C5Q/d+dvN1wb1oI3Z/jDhzXUx9cU1SEF6+LGFwvoAQ0bUzJI0TPtv0h0GYETrHgTS4+zAB6LfbVoT4DyOtmhts9AmPsSSneSxf9QAdEO+/65nIM8wYChjczuWZpKQWEEOO5MMXEZoEQhGZhGNM+Fb/+PBeS3Ka8Trjq6tR/Gf/svJkkrcfMA0xnEvVsyRLhiusl1IP5FaBlL8+T9xvNuBMEo4MgIBeBrIrjgzz5QG1fue8V0GvJkr3UtD7bFzcKNcaGDcNG2s8aI0wSlTXCg9vK4V3Wb7RDNsTeseiE3j4fTb1W97kIdpG6q91cnolnYRIg0dObzC+0mWqIpPgTq3banoh9Y1XRdTlV8mqRPNle4z/l2anskR/ESx730w58RD6PqnUdeTEgmoW6KeRCujKNuGOZ2yMeffHvHgAM42tTg2In8QIdSq4Rld+FIUxFe/Yf1AqCltHDLhQsiVFt4NAor7BM021mJ/BXt53k1FzIduxJE2LuOcT09pUeZaC55Ots8wTcAcr0TaVSF3g3tNiCYnWh2TdYSi3Fc0YhshWuPQftDfUV7BRD4Q4Mlc/tlpHLex5gk+Hbr+C66KGxVzaVzS6piJeESye4KcreWhnwp2HTslXSsipld+qS3DzxkvWQpq5lAIdUW9e6ApjDrJqu20mdKyPD0OK+N9ai3lpbxjyFGqDAHDbPPPLWEnz/qi5Q9pe8LSCkd7g4qSM7cx1nmYuOOETzYc5cLC4+Fm1X6bNZ94O44kG4dhQmqqEvESS41qJu0EfEnq/JsxKHq8GVbHPlBlJYMIK8X1bvq2ePTgOvQFHCjrQVclstdcr1eEI2gC/EFns6+URG9zb1HKmJBhhI3JyLyEYoG1rj34TpQJBOUTOfvXIqDKkMOSn1xHVO9SA/JuJ+mUQDPgOi4/NoG4FC71XCMe+bzIKbIeu/pJlYGpK+kk+QKA76/UX0Fo1qZdV4oJof6kI67Hkp/LRfJL8UuGtevd//iFpjdOQIe7WW+V16m8C9UOtVGHqsXzM7mnwr9zXVwnRbPxkJdIjBtNbYzibPsAbFV5uHH6MRBdVaUdKbNZk0Rz0fEgQjlx9A2zniuN1KvX7k4rrneeu7y3iQ9Rd6amLpRZfW2Si4rFu3nKe8bYekQdMTKlyZzL1TFkGfqu7hK7lTp2tntm0w08DGCpyV6StAxTZ6dmWmQP3AOIbZKeseot8j4nEGBUt5eHF949X/zA3+jtkVl6d80vYuZexp/+j5rpchr3OZxSJpYeP8vJmgzBrrM6F7J1h3qWdpUX9olZSlWPpG4hydBP70jcHu9IA+J2pzHLGoNtsBI44sHfLHMx5CvjHsIQarjzFvGiX126O/7qGMzZ0yvyWmAOJs+2n2yu5A49TN0PQuf7Yim3rn5tEUPDNwGEM9kCXlVqd9RLB36Kz7h7Ppgmu4dgS1LX+E2VKxEkUBAUJSl04B+zsDDkWrs8KtbzZKhv/QJDIqZqAiXVPx0OWpyT1uKrCCkymxHfHyrH6FWnpk9MXx0Wax/fiafXZYtNZ5f2lKz6CpjTDSR1zIMbyiQ+WuTis9BM5d4TN6VVgtLTlZcGzz9qKHvhmcKmzshiNsKexdnhIdWxFucudA1Y5bEzO1OQ6ut2tsDGjZGlXodL2YUbRbiBC0xJTpDml1tdn1wetDjnFpgML6po5Pt4f7rbin1qHtHdUUcGQCO95hhdBWGEr3r7DN/EQGPlnapcElZPh/XRgdgk0FWx45pBEKH0feMRyxCW1L5g+CvuQTLSokT2PhlVNRBSIz+MAp7hBcboKMbYGGMiC0rznE2yxlsYae1WTFyusl3kxHLYACUigva27LF/fQV552MW6O7CyVvAuMIOlbCC3SwSXmbc1m2OnSwvudKAAG0oS9icmJuXhVaX2vpi0BSh+KS8jTIEjQql9nLrtMd5yMza8uoiBIGskj3nnuR8qHr/d/cYM4sEAjeJJhuKNoxYCPo9H1bFYSXVY1SUEXi3XVdruIsQFApS8NAtwKe3n7kXy/fJuI2/aNMti6l7cXXRNqb1iDL1NPP8sPba0nxvimiOr0nBuWoITY6zYZAQr1Co/No4F1HfHIsBDSmAduEeov6JE/T9150imv8+j9kExXwyQV9arfCuAkAadn6Cy9IiJRomi7w4yzOwYM8gJ2IahNs4aR9rJ06FnxmWxnR1yVFIY7sIFkz4llW8/FsFNJjK5q/GYk6Dc7JRmkBj38olyVyj7UsBfBKfnGLSnRHfPCUAsEelJnln8+Fgj36ufYOv4yOlriN4l7Ym9EqDJBZdvRFgtsGG9UV239bxp4SJALvGMrhcJfz7NcZ/amCjPA0KwsqeSttLc8iDJtZODR7gZtDPxbTazNl6Y4Zk0xCCSWnp8JhXMmewSorDorAMGFYPqVYO/UU+lmlsVXwH2v6NQW7tuDhZU5+JuOeg6CohgM2KU+gawE5KBJQk2B//rB0c41NsT5ZbnYAL2GPiyWYy9OwwODmpj3FpwfiiCyvK3CRsgGCkSo3ZiiZ4cybe6DhwwX/yxm02YLx0BRnyMCmnaDBwAECEsDAgT8+G95tk57NvzhYcq+jobibsiv+e43RjVLv/galjlDBm/zh5vtQqovShfy+cCq5uzlym3KcurxmLsYQoukVBVchvzEAXWMHC7HpHr9ut1CwVL7Mwhog0j5lXxftd6sPN97n2SdIPSV27CFXSGzdZNxR1KUxM5F3hyBQsfTd0oDEs8dsNU7DTxzsFkKj6/ZHvK2sjJpA+D+yMATDspau1ubSLIsHXiRCoxGULlE8GlGR241k6eNwSzLhZtkghXGSCV34dC4AbdSrrM69t03/HR5s4sARPO3t5uOPDFblMh/U0lxss1hYKIIh1/FWUZ89iRsejnbiiLZt3AhfTM6kThmRSfAhNCTGWoqxK30cq2GWHDiWuij+Vgxw9iFzS8PY7ugEj7tYqq5Qwqn6EhWbjBGPy6SZi2mMpDkRuFf1Xbm3lOToLYvTyfMamgT8OzFMpFZ1a7NDCX8RmGBT/rDDxp3hiA4TAeqUDJ4DuDlVhwDZ6VrVD/8QKQ+YCmFXnfwHmahVspPXcpo5vRlNdKS90inaqe+gZlUo1iCr2M1gyMGyCUjcPtAu/0XQEQE7kBV5MFSI2gXkSJHnpayRzXwObZSYtMArJBhSMKOAxpZV1wBaSxIehi5Vc4pp+7cWVQ1UrypbrWU9P6jgvClowgNR0GLp7m1U1t7rrsNZKeXuI6BYFLwPaZAcK74TGZJSXsWcui2w8Wo1cl+4fxuS7/UZCCt3lJS/hs2fkFKNRHi1Ey5lKTnGQl1dgCCDXuw/M9dBgf6QhzQONe3+IuYaLdWa6NtjFQHJNgBaEtARwzA2rrJCx2p3f30AHt8ZhzwZSLMfqUfJEJr2VZ+6zqU68fVAz9xo+DEHrLuY4zPe3Nr44E6xMyqq/1eV9zSSN2oxrI23tqeRNlk/ORiIVFulNRp0MfggFkStdzSOm2d0IdsM+Ab0hAMoDzK6H2lMt+4kJjUkwgTVqE/RNypSY1FXyhcC+b3WTXffdLAWe4+dDpoFE5bEEgqdpTcGlcE8FSJ0VhtDq1FO775iYNaySUcqd1JPq6oJAUeSLJNxj1UPjT75FzrcVWqcc2H9uK0EFh3IE4ntI6GF5E48Dx7xUHZcjsq0SPG4OXkT6r5XSEEXkQNu5iJvxIvbt+h81868nx2EknvmLzHdgMznpv0WsjnfLWitgw5QHVKSiQ45bTdhS7/phVqiZiNkngwUmn1vBz7R7M+k8mHQt+D4ycSFVqb00ajTz7Zw6ye/vjLYgJNrKPvNdgAydDciJO5fyAvxo0n6iEf1MHqyeSTFoOU+uo/WIf608frWqJsToL9MisZrjV2ldAs9T2jSIV4LacT3jS5zQbhbnF/EWgp8EW1AreCqVhVgPa31QLRaoMhr1fuUNU+ZO9aEEqhWGlMdOxzttzcedd7I02pi6Kk/V7K7VnZEtwYbhC5NN6x6SDfcm0FlffG/S7mKMFLupGY5cW7+tntDQXycHXPAKr9r27oYkQafXp9zxgxJSUB5h2ti13InXfKq3m4YJAGsz8Q2WsxsMtX1wuLNIJsrkeh58H7YTsGKLhCLiovr25QHqHEQ2em00xYSZzwxSqMR0e3A2C56sU8c9TH7yB5IKPQrF5GRFHdFZvZO5YbQyVa03MZWAJcSDKw+1lSP6svasLERSpwOC3CFdt7NM+e+rlaT8VmHkVs+8jDQ0qstSYkJc+4Cl/6uYpxcRv7Ib27GCgK2+NxTcBxsLCO2m5fNT28bftIDfk3fsbo2B+DTlr+0DxDtKORaVpNzuNGTLqpIgz7xIPva1n9ScprAr7mzI+KDYQF1pFv030Z1XhBsaPmMW/9IOp6eV+bSXy/2PTo5Xuyu470Ga/AZ46XIiCC0DRBE1UCgQ0AemoVWYdXSFB3eRzIDQ9mKpXV8k2FoYE4TQKIhECAmQ8TycOjTqTJiCXDr08oeqFi9lIh+6CAIRIV0v9ZnRAE7xI54e6Oa04aepMb7iQkcANXA2Bp/KGv9BheyP9xUdFzkxZSCa4E8Unf7quqyK7EAzUWSwGWxTtc4VDxsl54ShK0OMCwl0BSzl2BVACiXN0dwEkqJ9XbrDjfsJ5FCS1gxL6R3rMQCMWlFSw5x4q4vP/goDGadAo8BBVxytm12XdvnO9trKOYluIPUHOmyJexLvN6cx0nJovVgQ0uGg7Zj0e3PvpigmiI4cwjJ3THrXNpVDhIgwDc58sL91cACixtBrjqN7YtqA1h4wWzz93LFvuoh18SVCb06bg7iK6r9srN8TBIjxzk1fWsh0z0kqGYaQkw+D51Gz5Fa6TN6FtZqdUZyulkvDOh6zeut2wn/iKIwjvWycKrMopw3CIA1NmAywcu3nxa5T0ecM/aHqxDk9L3qUdyIJ/WK+ErZeUvzMzoPW0Ctf6U33JFrPHfVKQbOupd
*/