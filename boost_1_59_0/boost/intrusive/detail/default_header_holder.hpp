/////////////////////////////////////////////////////////////////////////////
//
// (C) Copyright Ion Gaztanaga  2014-2014
//
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)
//
// See http://www.boost.org/libs/intrusive for documentation.
//
/////////////////////////////////////////////////////////////////////////////

#ifndef BOOST_INTRUSIVE_DETAIL_DEFAULT_HEADER_HOLDER_HPP
#define BOOST_INTRUSIVE_DETAIL_DEFAULT_HEADER_HOLDER_HPP

#ifndef BOOST_CONFIG_HPP
#  include <boost/config.hpp>
#endif

#if defined(BOOST_HAS_PRAGMA_ONCE)
#  pragma once
#endif

#include <boost/intrusive/detail/workaround.hpp>
#include <boost/intrusive/pointer_traits.hpp>
#include <boost/move/detail/to_raw_pointer.hpp>

namespace boost {
namespace intrusive {
namespace detail {

// trivial header node holder
template < typename NodeTraits >
struct default_header_holder : public NodeTraits::node
{
   typedef NodeTraits node_traits;
   typedef typename node_traits::node node;
   typedef typename node_traits::node_ptr node_ptr;
   typedef typename node_traits::const_node_ptr const_node_ptr;

   default_header_holder() : node() {}

   BOOST_INTRUSIVE_FORCEINLINE const_node_ptr get_node() const
   { return pointer_traits< const_node_ptr >::pointer_to(*static_cast< const node* >(this)); }

   BOOST_INTRUSIVE_FORCEINLINE node_ptr get_node()
   { return pointer_traits< node_ptr >::pointer_to(*static_cast< node* >(this)); }

   // (unsafe) downcast used to implement container-from-iterator
   BOOST_INTRUSIVE_FORCEINLINE static default_header_holder* get_holder(node_ptr p)
   { return static_cast< default_header_holder* >(boost::movelib::to_raw_pointer(p)); }
};

// type function producing the header node holder
template < typename ValueTraits, typename HeaderHolder >
struct get_header_holder_type
{
   typedef HeaderHolder type;
};
template < typename ValueTraits >
struct get_header_holder_type< ValueTraits, void >
{
   typedef default_header_holder< typename ValueTraits::node_traits > type;
};

} //namespace detail
} //namespace intrusive
} //namespace boost

#endif //BOOST_INTRUSIVE_DETAIL_DEFAULT_HEADER_HOLDER_HPP

/* default_header_holder.hpp
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
*/