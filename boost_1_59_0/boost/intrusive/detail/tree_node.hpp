/////////////////////////////////////////////////////////////////////////////
//
// (C) Copyright Ion Gaztanaga  2007-2013
//
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)
//
// See http://www.boost.org/libs/intrusive for documentation.
//
/////////////////////////////////////////////////////////////////////////////

#ifndef BOOST_INTRUSIVE_TREE_NODE_HPP
#define BOOST_INTRUSIVE_TREE_NODE_HPP

#ifndef BOOST_CONFIG_HPP
#  include <boost/config.hpp>
#endif

#if defined(BOOST_HAS_PRAGMA_ONCE)
#  pragma once
#endif

#include <boost/intrusive/detail/config_begin.hpp>
#include <boost/intrusive/detail/workaround.hpp>
#include <boost/intrusive/pointer_rebind.hpp>

namespace boost {
namespace intrusive {

template<class VoidPointer>
struct tree_node
{
   typedef typename pointer_rebind<VoidPointer, tree_node>::type  node_ptr;

   node_ptr parent_, left_, right_;
};

template<class VoidPointer>
struct tree_node_traits
{
   typedef tree_node<VoidPointer> node;

   typedef typename node::node_ptr   node_ptr;
   typedef typename pointer_rebind<VoidPointer, const node>::type const_node_ptr;

   BOOST_INTRUSIVE_FORCEINLINE static node_ptr get_parent(const_node_ptr n)
   {  return n->parent_;  }

   BOOST_INTRUSIVE_FORCEINLINE static node_ptr get_parent(node_ptr n)
   {  return n->parent_;  }

   BOOST_INTRUSIVE_FORCEINLINE static void set_parent(node_ptr n, node_ptr p)
   {  n->parent_ = p;  }

   BOOST_INTRUSIVE_FORCEINLINE static node_ptr get_left(const_node_ptr n)
   {  return n->left_;  }

   BOOST_INTRUSIVE_FORCEINLINE static node_ptr get_left(node_ptr n)
   {  return n->left_;  }

   BOOST_INTRUSIVE_FORCEINLINE static void set_left(node_ptr n, node_ptr l)
   {  n->left_ = l;  }

   BOOST_INTRUSIVE_FORCEINLINE static node_ptr get_right(const_node_ptr n)
   {  return n->right_;  }

   BOOST_INTRUSIVE_FORCEINLINE static node_ptr get_right(node_ptr n)
   {  return n->right_;  }

   BOOST_INTRUSIVE_FORCEINLINE static void set_right(node_ptr n, node_ptr r)
   {  n->right_ = r;  }
};

} //namespace intrusive
} //namespace boost

#include <boost/intrusive/detail/config_end.hpp>

#endif //BOOST_INTRUSIVE_TREE_NODE_HPP

/* tree_node.hpp
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
*/