/////////////////////////////////////////////////////////////////////////////
//
// (C) Copyright Olaf Krzikalla 2004-2006.
// (C) Copyright Ion Gaztanaga  2006-2013
//
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)
//
// See http://www.boost.org/libs/intrusive for documentation.
//
/////////////////////////////////////////////////////////////////////////////

#ifndef BOOST_INTRUSIVE_SLIST_NODE_HPP
#define BOOST_INTRUSIVE_SLIST_NODE_HPP

#ifndef BOOST_CONFIG_HPP
#  include <boost/config.hpp>
#endif

#if defined(BOOST_HAS_PRAGMA_ONCE)
#  pragma once
#endif

#include <boost/intrusive/detail/config_begin.hpp>
#include <boost/intrusive/detail/workaround.hpp>
#include <boost/intrusive/pointer_rebind.hpp>

namespace boost {
namespace intrusive {

template<class VoidPointer>
struct slist_node
{
   typedef typename pointer_rebind<VoidPointer, slist_node>::type   node_ptr;
   node_ptr next_;
};

// slist_node_traits can be used with circular_slist_algorithms and supplies
// a slist_node holding the pointers needed for a singly-linked list
// it is used by slist_base_hook and slist_member_hook
template<class VoidPointer>
struct slist_node_traits
{
   typedef slist_node<VoidPointer>  node;
   typedef typename node::node_ptr  node_ptr;
   typedef typename pointer_rebind<VoidPointer, const node>::type    const_node_ptr;

   BOOST_INTRUSIVE_FORCEINLINE static node_ptr get_next(const_node_ptr n)
   {  return n->next_;  }

   BOOST_INTRUSIVE_FORCEINLINE static node_ptr get_next(node_ptr n)
   {  return n->next_;  }

   BOOST_INTRUSIVE_FORCEINLINE static void set_next(node_ptr n, node_ptr next)
   {  n->next_ = next;  }
};

} //namespace intrusive
} //namespace boost

#include <boost/intrusive/detail/config_end.hpp>

#endif //BOOST_INTRUSIVE_SLIST_NODE_HPP

/* slist_node.hpp
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
*/