/////////////////////////////////////////////////////////////////////////////
//
// (C) Copyright Ion Gaztanaga  2009-2013.
//
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)
//
// See http://www.boost.org/libs/intrusive for documentation.
//
/////////////////////////////////////////////////////////////////////////////

#ifndef BOOST_INTRUSIVE_DETAIL_IS_STATEFUL_VALUE_TRAITS_HPP
#define BOOST_INTRUSIVE_DETAIL_IS_STATEFUL_VALUE_TRAITS_HPP

#ifndef BOOST_CONFIG_HPP
#  include <boost/config.hpp>
#endif

#if defined(BOOST_HAS_PRAGMA_ONCE)
#  pragma once
#endif

#if defined(_MSC_VER) && (_MSC_VER <= 1310)

#include <boost/intrusive/detail/mpl.hpp>

namespace boost {
namespace intrusive {
namespace detail {

template<class ValueTraits>
struct is_stateful_value_traits
{
   static const bool value = !detail::is_empty<ValueTraits>::value;
};

}}}

#else

#include <boost/intrusive/detail/function_detector.hpp>

BOOST_INTRUSIVE_CREATE_FUNCTION_DETECTOR(to_node_ptr, boost_intrusive)
BOOST_INTRUSIVE_CREATE_FUNCTION_DETECTOR(to_value_ptr, boost_intrusive)

namespace boost {
namespace intrusive {
namespace detail {

template<class ValueTraits>
struct is_stateful_value_traits
{
   typedef typename ValueTraits::node_ptr       node_ptr;
   typedef typename ValueTraits::pointer        pointer;
   typedef typename ValueTraits::value_type     value_type;
   typedef typename ValueTraits::const_node_ptr const_node_ptr;
   typedef typename ValueTraits::const_pointer  const_pointer;

   typedef ValueTraits value_traits;

   static const bool value =
      (boost::intrusive::function_detector::NonStaticFunction ==
         (BOOST_INTRUSIVE_DETECT_FUNCTION(ValueTraits, boost_intrusive, node_ptr, to_node_ptr, (value_type&) )))
      ||
      (boost::intrusive::function_detector::NonStaticFunction ==
         (BOOST_INTRUSIVE_DETECT_FUNCTION(ValueTraits, boost_intrusive, pointer, to_value_ptr, (node_ptr) )))
      ||
      (boost::intrusive::function_detector::NonStaticFunction ==
         (BOOST_INTRUSIVE_DETECT_FUNCTION(ValueTraits, boost_intrusive, const_node_ptr, to_node_ptr, (const value_type&) )))
      ||
      (boost::intrusive::function_detector::NonStaticFunction ==
         (BOOST_INTRUSIVE_DETECT_FUNCTION(ValueTraits, boost_intrusive, const_pointer, to_value_ptr, (const_node_ptr) )))
      ;
};

}}}

#endif

#endif   //@ifndef BOOST_INTRUSIVE_DETAIL_IS_STATEFUL_VALUE_TRAITS_HPP

/* is_stateful_value_traits.hpp
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
*/