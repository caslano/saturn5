/////////////////////////////////////////////////////////////////////////////
//
// (C) Copyright Olaf Krzikalla 2004-2006.
// (C) Copyright Ion Gaztanaga  2006-2013
//
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)
//
// See http://www.boost.org/libs/intrusive for documentation.
//
/////////////////////////////////////////////////////////////////////////////

#ifndef BOOST_INTRUSIVE_LIST_NODE_HPP
#define BOOST_INTRUSIVE_LIST_NODE_HPP

#ifndef BOOST_CONFIG_HPP
#  include <boost/config.hpp>
#endif

#if defined(BOOST_HAS_PRAGMA_ONCE)
#  pragma once
#endif

#include <boost/intrusive/detail/workaround.hpp>
#include <boost/intrusive/pointer_rebind.hpp>

namespace boost {
namespace intrusive {

// list_node_traits can be used with circular_list_algorithms and supplies
// a list_node holding the pointers needed for a double-linked list
// it is used by list_derived_node and list_member_node

template<class VoidPointer>
struct list_node
{
   typedef typename pointer_rebind<VoidPointer, list_node>::type  node_ptr;
   node_ptr next_;
   node_ptr prev_;
};

template<class VoidPointer>
struct list_node_traits
{
   typedef list_node<VoidPointer>      node;
   typedef typename node::node_ptr     node_ptr;
   typedef typename pointer_rebind<VoidPointer, const node>::type   const_node_ptr;

   BOOST_INTRUSIVE_FORCEINLINE static node_ptr get_previous(const_node_ptr n)
   {  return n->prev_;  }

   BOOST_INTRUSIVE_FORCEINLINE static node_ptr get_previous(node_ptr n)
   {  return n->prev_;  }

   BOOST_INTRUSIVE_FORCEINLINE static void set_previous(node_ptr n, node_ptr prev)
   {  n->prev_ = prev;  }

   BOOST_INTRUSIVE_FORCEINLINE static node_ptr get_next(const_node_ptr n)
   {  return n->next_;  }

   BOOST_INTRUSIVE_FORCEINLINE static node_ptr get_next(node_ptr n)
   {  return n->next_;  }

   BOOST_INTRUSIVE_FORCEINLINE static void set_next(node_ptr n, node_ptr next)
   {  n->next_ = next;  }
};

} //namespace intrusive
} //namespace boost

#endif //BOOST_INTRUSIVE_LIST_NODE_HPP

/* list_node.hpp
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
*/