// DEPRECATED in favor of adl_postconstruct with deconstruct<T>().
// A simple framework for creating objects with postconstructors.
// The objects must inherit from boost::signals2::postconstructible, and
// have their lifetimes managed by
// boost::shared_ptr created with the boost::signals2::deconstruct_ptr()
// function.
//
// Copyright Frank Mori Hess 2007-2008.
//
// Use, modification and
// distribution is subject to the Boost Software License, Version
// 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_SIGNALS2_POSTCONSTRUCTIBLE_HPP
#define BOOST_SIGNALS2_POSTCONSTRUCTIBLE_HPP

namespace boost
{
  template<typename T> class shared_ptr;

  namespace signals2
  {
    namespace postconstructible_adl_barrier
    {
      class postconstructible;
    }
    namespace detail
    {
      void do_postconstruct(const boost::signals2::postconstructible_adl_barrier::postconstructible *ptr);
    } // namespace detail

    namespace postconstructible_adl_barrier
    {
      class postconstructible
      {
      public:
        friend void detail::do_postconstruct(const postconstructible *ptr);
        template<typename T>
          friend void adl_postconstruct(const shared_ptr<T> &, postconstructible *p)
        {
          p->postconstruct();
        }
      protected:
        postconstructible() {}
        virtual ~postconstructible() {}
        virtual void postconstruct() = 0;
      };
    } // namespace postconstructible_adl_barrier
    using postconstructible_adl_barrier::postconstructible;

  }
}

#endif // BOOST_SIGNALS2_POSTCONSTRUCTIBLE_HPP

/* postconstructible.hpp
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
*/