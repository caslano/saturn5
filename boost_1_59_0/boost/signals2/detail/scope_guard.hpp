/* Copyright 2003-2013 Joaquin M Lopez Munoz.
 *           2019 Mike Dev <mike.dev@gmx.de>
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or copy at
 * https://www.boost.org/LICENSE_1_0.txt)
 *
 * NOTE: internalized from Boost.MultiIndex
 *
 */


#ifndef BOOST_SIGNALS2_DETAIL_SCOPE_GUARD_HPP
#define BOOST_SIGNALS2_DETAIL_SCOPE_GUARD_HPP

#if defined(_MSC_VER)
#pragma once
#endif

#include <boost/core/no_exceptions_support.hpp>

namespace boost{

namespace signals2{

namespace detail{

/* This is a merely reformated version of
 * ScopeGuard.h as defined in:
 *   Alexandrescu, A., Marginean, P.:"Generic<Programming>: Change the Way You
 *     Write Exception-Safe Code - Forever", C/C++ Users Jornal, Dec 2000,
 *     http://www.drdobbs.com/184403758
 * with the following modifications:
 *   - General pretty formatting (pretty to my taste at least.)
 *   - Naming style changed to standard C++ library requirements.
 *   - Removed RefHolder and ByRef, whose functionality is provided
 *     already by Boost.Ref.
 *   - Removed static make_guard's and make_obj_guard's, so that the code
 *     will work even if BOOST_NO_MEMBER_TEMPLATES is defined. This forces
 *     us to move some private ctors to public, though.
 *
 * NB: CodeWarrior Pro 8 seems to have problems looking up safe_execute
 * without an explicit qualification.
 *
 *  TODO: Consider replacing with Boost.ScopeExit
 *
 */

class scope_guard_impl_base
{
public:
  scope_guard_impl_base():dismissed_(false){}
  void dismiss()const{dismissed_=true;}

protected:
  ~scope_guard_impl_base(){}

  scope_guard_impl_base(const scope_guard_impl_base& other):
    dismissed_(other.dismissed_)
  {
    other.dismiss();
  }

  template<typename J>
  static void safe_execute(J& j){
    BOOST_TRY{
      if(!j.dismissed_)j.execute();
    }
    BOOST_CATCH(...){}
    BOOST_CATCH_END
  }

  mutable bool dismissed_;

private:
  scope_guard_impl_base& operator=(const scope_guard_impl_base&);
};

typedef const scope_guard_impl_base& scope_guard;

template<class Obj,typename MemFun,typename P1,typename P2>
class obj_scope_guard_impl2:public scope_guard_impl_base
{
public:
  obj_scope_guard_impl2(Obj& obj,MemFun mem_fun,P1 p1,P2 p2):
    obj_(obj),mem_fun_(mem_fun),p1_(p1),p2_(p2)
  {}
  ~obj_scope_guard_impl2(){scope_guard_impl_base::safe_execute(*this);}
  void execute(){(obj_.*mem_fun_)(p1_,p2_);}

protected:
  Obj&     obj_;
  MemFun   mem_fun_;
  const P1 p1_;
  const P2 p2_;
};

template<class Obj,typename MemFun,typename P1,typename P2>
inline obj_scope_guard_impl2<Obj,MemFun,P1,P2>
make_obj_guard(Obj& obj,MemFun mem_fun,P1 p1,P2 p2)
{
  return obj_scope_guard_impl2<Obj,MemFun,P1,P2>(obj,mem_fun,p1,p2);
}

} /* namespace signals2::detail */

} /* namespace signals2 */

} /* namespace boost */

#endif

/* scope_guard.hpp
7MV8yu5fbJE35yshkZ0KeqeLtFAmko6ipdS1I4Uj+iUiXBzhtiPoeVjSc1bS83n2s75nPmAojJXIjpnMYWm4/YTyoA4gE1elSKLa2KYaz7MR6ew11dFFPNW59TNzd+f5DoUHwHSMPoPIokVOWnEqptsrpuEakGK6xduYb9+X4UqsQ0/VUkw+1iLN6bYHwShpw3Y+B+YFe8J9vP5uVnGArb798iUk6B6m0Vdfc7ifVw9TsZUp9DWDvi7ir1nahbTuMoWe3od9IyJJhL2t0KahhLSKq0Wkk9I3TDwBM3wv/OAEru5375DZRfai7uozYWxWRgrfEm3Lo0ftYn0gR8kFjx1j6fMdVUfNsuezCbIEHC7HTBFJrza1PrIlCG29LJ4+TxXLVkOEqtKSafP21RaIiS56u8enuynVomnwXMO7ePkUeMsN54tCt9wwH+zpYeHMwnD/Qm305vp3MjNi6Zvr8KfP5vX0p1i+eQHVG4Tk1/EfHzVfRjNpmNBTNra2B9x2OXLuCSZqmGud7qg7+A7Eqar+mCwb1aAroKZcyChplca0nX+MG2OwpVz4bte+y6WMM/+IW0HbMQycPCUJz8ZNwt0602FdGcclZerWxBtQVMT8wzfZeg6nanWoTW4jF8FpwjE7zqo5w4lJ9E1Y2/mGoSkR6MHd9JzcP+fNlmnSiQu2J6AznFtf/QHNxPYdwliroHOaWAKLKjvEEvjvsUUflN5zdME8lJtfkfAJQvEQ9xU6AKUx0RVlH2rKRQjFruTYdDD6E/vnkCwR7OJEaZ6ibMKT2A4lwWJLBfXQdttgSn4i8tM+a7ZkZrTs/pQ1UVu2H3pPhjwuh9EXST49HHN/+smh3Yfeo7D7s/c+a5ABfJzosnRVLamguPxHFoE2IEZyz64zQVtaULYDtu3KsmEbDEXRnjcfGV2G5SJ/tZAI8sOs+neRdRWMqysIwLhttZCKtqeoeO8vsZC0K6S3joXCiout1G5KbSV9ci6tlrb7gDZen6yVi3Hxd6NNR785MBMSkWcZmKJBMKLQjTRnGZlc/tpjjcz+3C45t5RFQjxESD186zHzNyDvwikF3gvPdEZzSFoNeGyy76hWKPwZTn9WsbrtsNywKAOkw53+zGLzbfT+OVPrydkOWZEOofy3nH6/O6ejBC6/ZOXr3WZsXqMfwggOam9fehzCmAVKsApGJe+fwAuV4H7/NAw0GLPcRB0RPq3ksPw9xcV04nU/p+rki5h4k4qoNj4N110PS6KEfWZZ7PY05Y4qoJhspb1sdWeq2xm5socpuT7egjLb8wJ2r3g4j1beOXRajCwDII+fFqy4ZguzvXkPDh0lzzYauyAeExxD+wzPNiPeMjGbWy++9Famh1Igq+fvVrLquYeNyvQG6dFbU6jDvlM4N4v5CgtHeTATnj3Dl+gRtyM8QFmGGEPwMwMpnOp6li1d6vd1MqboW83+0qrYCX0N736iH+IupQZQYVDQWfkckdArACsIOPSRV98OcZKNKvVUfe48Qpfxxj6u2HM9VICGQ20X0d7y+eHzjPL5dqLSuI944BTmWxzLBgLuNbaxfzfwvzpjTvpLDfi+XjncoQ0+s0+TDG67vnCeQ7vVkuRE1Xqkx6HqNcrnhbPsx0TtZ6lWj3Q7wtfq2zAA8CG1T/79JJNSF9iW+Qrm4YDbC9fytnCLXjnCEc7krIPMh9PV+MjvFsI0YKeDarYHbJBVF50YQRdLb8Wv1860Vi4EUpZU7/ZUvWxlAWOJWjLR3IBPZXN3ENy5+hELNfpuaXR9QsU/CdjPgfFSwCJ/Oy25uNUdwqXYN1xjXphngMtUY3qv0Lm9EDzvijkFdZPWC7fHunmG+AGt9AEl5tBRY7m0NFWarVP/5t+cCVsmtKtKBU9ntRmeXixXnuDd48o9TIXP4MItCbeVaEuxKvRuKnWkvijsCF+qPxB2KPd31DZ7taX7GsNuyzf3vbbdIb4vQwK+LwsX0MQnzTYWhb0Kwv+r5aBWIe298DWEF1amy4PdbLr8Ym95dlgZayy1VsQfu5NWROIurZebNbBGow8neRsQhxJmFK8We6Rm+3O5UBRkUyfPhQmR9iKatSwomwOesFcZ+ybn9lbrJmeJNWMpO5LUB8Yf7zTF4i0ZBFBCY+v+AKLtmcGUWIPeqdZCyN6AqA7UAvypjoQ+tuFvBn52LoZL2IhAiXxqNe6QmuX93ji776DQYViTKta8OlIShAJglF8VsND7+UVURHcpdIL/9Pwx23fVffuPgpSvl80vUapuwjpMzhduUtVBq1ROfo1qG8LOxWEWfAQX8hosz1pKxk3PQ0WxmU2EJ5h3WassrqB0vcsswS25tudo6F2DMbi6CINMeF+XqbVYPEHniyfhGtUbOaj4cufCAxiUIukEaTafVByzlhK5v9gBw+jvZ1jkZJEw+ER48bQZN9M0Kx0XOPopU0sTqwHO2WfxcggG+fjd8zjbYwm4zbfQXVuWA5fj0JRRM3mjtzIzfJ13GzKwXMlEHz9HbhXsvduSK1GpwyOsrxUfKUtpqiINkjNgCV+yixDdc/X7Mx2xv8oS/zETdmPchCU/DtW5vDgOzAYKW7FQnB5mwRA+xx5JUNqi0jJcw8jfbT2D9u4XcsgX7rJc/q1AlzCqRuEoqy2cWxvAbmJ+8SdqSb9QSrBUjklULud5EvS5YJdhQ3x8FEYGCIO761qChJZqpiXXwmMDGRm/NTY3x8emtzwgDw3LA6JB1NzPr3c69F9jczvmNBZkYnnM3iHHTUjIiyRdgltWlQU7eSgtjrK/UWNWvcLGiRjj8zJ8K9umWmDbpuKBwD12XVC6Hofyh/Dv9I53VWYmPq0PyrYVpmWiytTqo4H1olnV86PDziJVE+H4vhmuRefRd/UJlqnin8QMF9DULd4anqMLRME0Bg/RCflOgIgrWiwQ4d9CozrVx8kidwh2Di7GLUGpLASMvvALNYIZnlzrYCtqrYqi2kz/FipLlVPxm9jjMi0/MWr39hYdwDmGvrKyIC4YDsBD4cJxxsKgsXAay9Ls9e0PZ4Dj2BqUn0ZpLMDPh1BgCyTGNvN+WTFUkYzLZqfgUoDjolMZPFm98OXPiFwEm9T+LYafhmOn4W+Kalv0RlYZb3uX+3Yg0VHwb9ChQnpIwUMWf2ZxH3qDdoS/VTvX6z+iDTb86wz/esO/0fDXRbV1sd8mXKxcwI4Ujemt3vzs8GA2g55x4jj6MDEopreKApeTYOSkoDN/mnOQ4V/j9B8xAi9Sqwz/Wud7RuDVqPYiX+P7W73+lkVKKvIgBHUCMMzrG59e2deyToSbBK05Dz5o1AAsj0H9dCHRz5fJf/2ObTkRncl3zN1oidOUVd1oi7MxBcW2lBj5hQnvNriyYk95XlXcCviyi7nlWKgrsTRep6oo0m6NsmtJXPTI8B/pbbj4BpY9atEje2n6OivPF4EjZeVbCUH50U+YadlP5Aed/r0p/nYROUL9tz2KB45g3FOUsQ9bnE917xHcwmvN0YXzOOWk+c7AQZE/z5lfaEwq5yVu5IexwiccSkI2iJgqVqJ0h6JCGZ2NTu+eiqWbkbubplUw0Bjja6iYZvVvstigVlENJiYA41tGoNsI9ES1Dqo5r1alq9hLBK9Ic26naqObQVijXdSKSZONSS5jkltZnu++tZd3JSU2hfxTynOLq7vKJ/v4LTJBLOVah69PNnKlDRB3Z3tn9dBSmNUz5dH9dwtaSAHl4vJ4c87EeXOiE9zm7Op6WG/YvUP+PF6b3j6iNwIZSDcCLd6A2/M4Q2RCmj3LcU1DKOUycGp9PBJKYFUUTxPbjzc763Py55dYw5G+wplfLm4fkePPyJk0vzTnPdtuRJp+3xFHzMkOGN20gOBwHeul2BrPSdZ6gfTmETqeDa1VrRplxazWMmMWaVXzbS0Fn7+l8u24XOj8j5XomfzNLYkOMm/AF0lf9GAxfJ5U/NA7K73i3hJxnIb1Bz6moiJ3iyVceeZ6cVt2zm1ZvuZFqaK5wKelVx4SjdTKm6xz5TrxhEr4s+hDtKo7eJFpHc6jhtZNEx99LEvNvT+9cvfsu+dggcnh8cbgBIpuwyJIeEoarniopXEUe4ByC9QGNl6uWWydV3l0Xs23zqsy67waXtdrEcAzH0Uk4+tajn2M1bN721wkKbinF0p/saovdh5Qaif2wB6lihHrK793MyQG+BrYojjiHtm4VTefBcMYXqfvSPgk1gar/lmeiCliiN2kHQR5bVWUxtgx2TnOHifxBBLk1pdUf1B5AY3+xb7tkQvEm2p91Pg0d9id59te8Q8qQF1QvxPPip0DH4LcvGtpir9r7Zyr2IcgikA/bR+CK5elQASek8ABHbsR/FFyaYnO3qA8+3FpN7IbQVVaLzeCK5fzocOeBLnQ93p7EvTEy+7l1gDHHm0NwoQOWULPfC7fFd1wdl7cU5iy3N0Ekp9uKFIgy3wSrFHY+WDs3IpkEBnH/O88aB/r2HqzrK03/WygujW5Oo1wW7s2sS9REyP/ZwLhipfb/LheGuFLdHV4EpRBJ+NdrLyrpJSa8gOrKXcD4ljNSV9iBI6EL4o++E1Ha3QCQBCJsUDW/2EVbr9MHHQVv41Dhbs+VJ2WT910NjFnbkWOUg/hNlybhCoXmysdakKz7Qn9i3c1orSB1r7pK303YZckcyd7lQ1Z6Bussr8TL9taf2BTJy+XD9VycVnLpdX7rU2G268Cq9hbejd5cgrLeHOBhxRRyltxyS60uASa+3tk/h9PqO1HI/NovJpeVcDhoteq4rv2ck9PNL4wqZ6DCrcUKdR8cw2+yMtUqb2KtGTducjLetEkSRL0XKAl6/7ZWFsmPFqDvZCAd+fYNca9RY0t/V/UY6U9s56HVT04gS2TtN7VIFw8VbDD413Npd4LsR3Y77dIsuj7aIAqfdyqsvqrhuLW5PX7iJqEiJ3YT+tdrr6P9fEv9vp7tPO9S8HzC5+jkMoybounGrdE+arMihfjfRhHfVhg9eFHceiqSt4jJ3Kx4UHqGk+VpN1q92pnr5G4xirl8l4jYeXpPRK4tQnd2Gss9G0YCEepp+oldJcTx+6kYkusYqckGsdDsEf+9l57CPZgCF64l4fgAgzBuV4dQ6D1bnj4zkd/b5U8Vn5xAyU3y49bxf/nG32fdO9Z+v7dOx99zyriEsr9jpX7zV59nqfS9rnz0Rart2qBsrOEFXmUUKaMdDriowe1s+uskq7uVRLMONgj90li8Ztr2L7DlTckhjD3MA0iYR3hPgTmY2miYEYOUKAe347wTxHt5pgeYERuo2CGtdamWY6OuOrANxZZ4Q+SFplbeukVsFPDRZjH1HoIKw0BzQDWZC+t31sSE9K4HoI6hXXOD4lon2I6QbSvwCQThrRH8+Dmym3qhS6zbTONV5kjNDRDfvx9SKsiEWSWHr7VoXg06+QlBn3YD/s927cyi2advH45QcTdvh2eZxoMfzMV2UeeS1WGUs2hVcDiuJjo9CbwgmBrhWVdHEnRrfFonUfYwRz6A8asdrbl02HMkp4VfwXsPFz+qjVGL6oxirpWibE2pTYP1Nm6ogQBh7dooEnRa9b4yZ7vsaBh9RJKYo+v5LjwjcLf5PW3g8hqV+3D3HenwNTtXiL0FgW/EUvneOwmPdLi0C6TP1+dTGJFKxzpzKa6JGaTWE1cfgfK7xAgdaQ1WZ7ll5jQuW7GeP7j5yCv2om6rASjichDH/IIyqOxFQ4jjU4/ogApsZOGqcAl/7r0GFRObz/tjLNIvsEA+dZTCWo+cQZIL8COL/KOXBsml54JlC+wmA0WowGGeiyPm7Eb/hfAedTZgfOh6856Pv23fQh+ax/wRdbEi+QraXkNCMeIW3T4Toc1FudI0++f72B3TcziJSqwYF74QmYeGwXzzCfBGPYyB1zrq7/CXKGEDHS1Gb424SZxXpKnxBIsRmYqx41XGZuROxmB6E2XlTDzVa3WfXLKHCUWqwMmx30dMmN4T618/O8mTIXMobUS6ZPjb40NEP5ur19WluYA6QsHQymQo/yekqO86e+97ym4EDni70lcaaGD6Adbma/dM0Ip5oIZtJPxvQcK4hb3/uhuhWaF3HVBgJXjJwFW2EpRkppT+AJZdRfLZLXLD+9VMlmNfsiMEtQWBS4WOOo/yfYL0m5xYSkJoAC1Tzg4yed3sGSUHuhwUcou+jzTSAt7RKCdavwaslB/uv2oSfEp4QGIpIiNt0NwSt54indEaHjdAjTzHTSTbSr6W8SkcjE90zldWSRsra3Nra8N0gQY+eVsfY9eAs3G9FZLyyPQIgYrY4T+1qDwp9uOF/3NsG33+PNdtH1HwunaCCrvG76UWIpEiW2dTy2TG6gh20fgZvkztKvuhNNWRVq3hVWRIBgvv1J6xv0VUOnGmtsns2NJvi6c8vXHoIGUp15T5QZ+HaFeUxpTRl+YmSE75qRam5QF0cV8KmgFzmXYofx5IbXHQ+2JyxOwB/IpI8J9lQzY5bDyV4PkQdgLkG1v09AyC1FM745OTklBMlhOmJ18nyOzzYQ+yF9eS0j0lAFdrPMcpG5fjW7707ETr2cfLYeM6jzKFs2/J2hsnQyQ+FE0vyJIv7aUgL6Z0ZPwEHMTUqq7vGCw7apzcb03/MwPk9sy6IPgiwdDx2GtCKZSm2JqTYqKosk2gRWcpi9045zi4sxNaI1iNBnVHTBzKPaE+8vf/cs0214fynyy6ixKYlQP599s/oUfNMUIim7CV+TOLzTyJ0er3fQarG3Md2HFyyXMqMtziChqI8A63p2T4uNEi9IE/xXF85wHjOKwGJ+eM94litw5g3Pyp+UUB3Oq00321/dMBleaid+tM+hX8UYrH/Hym2c5bM+IajzbHFLWptEZlkYRb/XTtUyMTgiT4Mm7cISWVkpnbKwPOOaFIn+EPoXScmlGwb3JxVY8LlRTtgb5dwKasjDTU7XeDRNjIzzVr9FDqH80evC03dTktPKmS08RjWVBA6P6nnhXPCu6UmAjTm4aRQcef/A1Vnxp0ZNtipa0+7AEfYhG4ZOOxWCC3q141sZ4t47G31HRyqz/ZtrsCattYyVSJqzCtBsfEJOmCV6mzkIXnev5QfEM2u58Bv0QXIdzu7Nbr0VfHEbgoDPKUxJppgqB1wRaLMVKcDyrOf0BvXYGp+ai2rqsUTdXWuB4kHiGy3gGLSeskv+KatQQTU/1cQWV2RDNd/S15zilOjGkapBF/jSxlXeHxzmJqsYXZ5QbP9FltfyEEZFoZ6CVUBtacNPb2WxptLoQwxE0ouMwnmrqahs5llfwO46vAavSTI4yNyGZSiVv9J4wRRTRhltwf73cwEVpBv8V1ehNCjfH5ElVU5trL9Plg2HmLarScnMbfNVYYZ4V4+Bfab+nqh+c7lhdTV4vYOvrHO/wVLPkAheNm4K3v07sg9/BbJu1D/AdO8DBDJJ63vHcm4TvZ8JaRgruopqldjVLmeoNhgEauTcYmeQe2f0J0bPVqnA231bySDVW45dB9s13pRJd0vYxjHFwJr0WHXeEnDON6BgU1YDhw1Oh2iG0KuJdg/6U3bUDPd/WtcXctWnctcWJrnmqj2KcoviQ2+V98B5PNZs+f3Cup/pDfKH9Pxk4yS7u
*/