// Boost.Signals2 library

// Copyright Douglas Gregor 2001-2004.
// Copyright Frank Mori Hess 2007. Use, modification and
// distribution is subject to the Boost Software License, Version
// 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

// For more information, see http://www.boost.org

#ifndef BOOST_SIGNALS2_RESULT_TYPE_WRAPPER_HPP
#define BOOST_SIGNALS2_RESULT_TYPE_WRAPPER_HPP

#include <boost/config.hpp>

namespace boost {
  namespace signals2 {
    namespace detail {
      // A placeholder for void on compilers that don't support void returns
      struct void_type {};

      // Replaces void with void_type
      template<typename R>
      struct nonvoid {
        typedef R type;
      };
      template<>
      struct nonvoid<void> {
        typedef void_type type;
      };

      // Replaces void with void_type only if compiler doesn't support void returns
      template<typename R>
      struct result_type_wrapper {
        typedef R type;
      };
#ifdef BOOST_NO_VOID_RETURNS
      template<>
      struct result_type_wrapper<void> {
        typedef void_type type;
      };
#endif

      // specialization deals with possible void return from combiners
      template<typename R> class combiner_invoker
      {
      public:
        typedef R result_type;
        template<typename Combiner, typename InputIterator>
          result_type operator()(Combiner &combiner,
          InputIterator first, InputIterator last) const
        {
          return combiner(first, last);
        }
      };
      template<> class combiner_invoker<void>
      {
      public:
        typedef result_type_wrapper<void>::type result_type;
        template<typename Combiner, typename InputIterator>
          result_type operator()(Combiner &combiner,
          InputIterator first, InputIterator last) const
        {
          combiner(first, last);
          return result_type();
        }
      };
    } // end namespace detail
  } // end namespace signals2
} // end namespace boost

#endif // BOOST_SIGNALS2_RESULT_TYPE_WRAPPER_HPP

/* result_type_wrapper.hpp
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
*/