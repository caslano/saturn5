// optional_last_value function object (documented as part of Boost.Signals2)

// Copyright Frank Mori Hess 2007-2008.
// Copyright Douglas Gregor 2001-2003.
// Distributed under the Boost Software License, Version
// 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

// See http://www.boost.org/libs/signals2 for library home page.

#ifndef BOOST_SIGNALS2_OPTIONAL_LAST_VALUE_HPP
#define BOOST_SIGNALS2_OPTIONAL_LAST_VALUE_HPP

#include <boost/core/no_exceptions_support.hpp>
#include <boost/optional.hpp>
#include <boost/signals2/expired_slot.hpp>

namespace boost {
  namespace signals2 {

    template<typename T>
      class optional_last_value
    {
    public:
      typedef optional<T> result_type;

      template<typename InputIterator>
        optional<T> operator()(InputIterator first, InputIterator last) const
      {
        optional<T> value;
        while (first != last)
        {
          BOOST_TRY
          {
            value = *first;
          }
          BOOST_CATCH(const expired_slot &) {}
          BOOST_CATCH_END
          ++first;
        }
        return value;
      }
    };

    template<>
      class optional_last_value<void>
    {
    public:
      typedef void result_type;
      template<typename InputIterator>
        result_type operator()(InputIterator first, InputIterator last) const
      {
        while (first != last)
        {
          BOOST_TRY
          {
            *first;
          }
          BOOST_CATCH(const expired_slot &) {}
          BOOST_CATCH_END
          ++first;
        }
        return;
      }
    };
  } // namespace signals2
} // namespace boost
#endif // BOOST_SIGNALS2_OPTIONAL_LAST_VALUE_HPP

/* optional_last_value.hpp
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
*/