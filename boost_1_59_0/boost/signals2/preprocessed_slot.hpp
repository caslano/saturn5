// Boost.Signals2 library

// Copyright Frank Mori Hess 2007-2009.
// Copyright Timmo Stange 2007.
// Copyright Douglas Gregor 2001-2004. Use, modification and
// distribution is subject to the Boost Software License, Version
// 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

// For more information, see http://www.boost.org

#ifndef BOOST_SIGNALS2_PREPROCESSED_SLOT_HPP
#define BOOST_SIGNALS2_PREPROCESSED_SLOT_HPP

#include <boost/preprocessor/repetition.hpp>
#include <boost/signals2/detail/preprocessed_arg_type.hpp>
#include <boost/type_traits/function_traits.hpp>

#ifndef BOOST_SIGNALS2_SLOT_MAX_BINDING_ARGS
#define BOOST_SIGNALS2_SLOT_MAX_BINDING_ARGS 10
#endif


// template<typename Func, typename BindArgT0, typename BindArgT1, ..., typename BindArgTN-1> slotN(...
#define BOOST_SIGNALS2_SLOT_N_BINDING_CONSTRUCTOR(z, n, data) \
  template<typename Func, BOOST_SIGNALS2_PREFIXED_ARGS_TEMPLATE_DECL(n, BindArg)> \
  BOOST_SIGNALS2_SLOT_CLASS_NAME(BOOST_SIGNALS2_NUM_ARGS)( \
    const Func &func, BOOST_SIGNALS2_PREFIXED_FULL_REF_ARGS(n, const BindArg)) \
  { \
    init_slot_function(boost::bind(func, BOOST_SIGNALS2_SIGNATURE_ARG_NAMES(n))); \
  }
#define BOOST_SIGNALS2_SLOT_N_BINDING_CONSTRUCTORS \
  BOOST_PP_REPEAT_FROM_TO(1, BOOST_SIGNALS2_SLOT_MAX_BINDING_ARGS, BOOST_SIGNALS2_SLOT_N_BINDING_CONSTRUCTOR, ~)


#define BOOST_PP_ITERATION_LIMITS (0, BOOST_PP_INC(BOOST_SIGNALS2_MAX_ARGS))
#define BOOST_PP_FILENAME_1 <boost/signals2/detail/slot_template.hpp>
#include BOOST_PP_ITERATE()

#undef BOOST_SIGNALS2_SLOT_N_BINDING_CONSTRUCTOR
#undef BOOST_SIGNALS2_SLOT_N_BINDING_CONSTRUCTORS

namespace boost
{
  namespace signals2
  {
    template<typename Signature,
      typename SlotFunction = boost::function<Signature> >
    class slot: public detail::slotN<function_traits<Signature>::arity,
      Signature, SlotFunction>::type
    {
    private:
      typedef typename detail::slotN<boost::function_traits<Signature>::arity,
        Signature, SlotFunction>::type base_type;
    public:
      template<typename F>
      slot(const F& f): base_type(f)
      {}
      // bind syntactic sugar
// template<typename F, typename BindArgT0, typename BindArgT1, ..., typename BindArgTn-1> slot(...
#define BOOST_SIGNALS2_SLOT_BINDING_CONSTRUCTOR(z, n, data) \
  template<typename Func, BOOST_SIGNALS2_PREFIXED_ARGS_TEMPLATE_DECL(n, BindArg)> \
    slot(const Func &func, BOOST_SIGNALS2_PREFIXED_FULL_REF_ARGS(n, const BindArg)): \
    base_type(func, BOOST_SIGNALS2_SIGNATURE_ARG_NAMES(n)) \
  {}
      BOOST_PP_REPEAT_FROM_TO(1, BOOST_SIGNALS2_SLOT_MAX_BINDING_ARGS, BOOST_SIGNALS2_SLOT_BINDING_CONSTRUCTOR, ~)
#undef BOOST_SIGNALS2_SLOT_BINDING_CONSTRUCTOR
    };
  } // namespace signals2
}

#endif // BOOST_SIGNALS2_PREPROCESSED_SLOT_HPP

/* preprocessed_slot.hpp
m3csTpNZFfYBX+1V3v2C1dn+2v1gIoS9dnazlGAQTLCbSsfArVyoSQtGVQje1attE7HxSnsaMUCiauq+5Xwaoj5xvLvSMcWHzYQ3uR3NmYFFuis5uxC6txya2A++QIEoHfMz3qAc6UO75Ge8P3OAk577M96y+JClDfkZdqw2lJ3Se5GZUJI8i9rdlI131c8Z9wdc5iKfuSg77cyCzWKzXdr1ducqYjRwct+6HDpsVbMWoCRCzqN5VM6tOlHhJzEcXPgFVNKC9MixLdGibH8N8F4ar2CpT1tmlvqCiwKIiMTZwKjJi6mS0x3Lrj2sjbO7ZZxwawWqW3RP5Krqld844dEHCb/NLMmbgU6d8FRvw5gs1ocZ2/dRiS7di+YPoeZnxiJyOrnE7iRzlOrQngpq8boJAYhidho7ByyLxJJvrkfb2I6ySPgJ7l8DTg18Oit9xZE0HsOIbo4SOmHNGWOuR5GpIZx0gBqpMcYn2bc+/CYNTRpvZHXmQ+LWvOSMQtGb1L0EiKIb5Zd+RRjTI9S0OWIapjy5BZU3hU9mow20HvZR+mi59aEYqtaCzXDLM3ZnW5GTelvc6pfqRzzIrJ9QwBxHO8Kr8XC2qzKmXcRuPscab/AwaMoYWDXG2DFxo7z06RyXzWakDJqXXnY0PpWTxqQyvJ6I8JgKHCcFxe9VxoIV2dqCYH5jqCBA1KM5r8ucd8yc15vM82qD6aQuChfSGKZ8IpxXFPYJvdDTVTknqjyN5LfA7Ws6TJsdpE21KXkrtWn80zl9uPjNx4AbjHEw30wvLITxNlJLZmQrQ3whMBQIb7TJhSOnP2ki716fw6FVVBtUUDJ/7UpkpNOZ8xbTyTtrh/TFLmqKxrPlNzfn2IWK3TvkEH6bK+/o93Yov82RM9JvYzv+7b+opzI+QF5F7xB0ViV2Z3STTqQCWlgDDMHTku7snZ+is/axb69he3PxZqIFt5R9YywRpYFQ2KtVVRB26ys+LJpmULsrLtqJdr/+So6dXjRRu/ltrtzQ7+1QfpsjRfptxY5P/BediFG7H0q/c/be4gXsA1xJhm0QQoDp9oqY/MUJy8oAHPaWYA7xpS6GH/904AdcGfPt4gWZyV7CK5dxv9fFzqynZ2uBaFRML4if3+fdl3DCC7cQlnP7RWl1OBwC2NYSBwefFwQH3l8L+/9xaUog4XMxfG8IXJkf0D1QgkoEtk2gh1pLzxInCDkCk5COhbpeJSwZfQfdWFoPkOX7+aWWIvxjAE60GGGgvE4O2+As7LOiQMnMAUptZo7PgVJH+g2gL569ILkdztwzYOkYc4BK7a3uEFiYdH6V5slbsSObSlkSlxGZBnzH7lN9fMCb3u3jAzaUzHOEM6dF9yMqHojX0eJGrJNgHWRceiBYB5NQ3RusC9Bf2rC3B0L1a+h2+cLgrEna/OT6FfRQkbmF0s4/RlQkZwX6uXjSxsvoO8ct9mwQsF6Dq/rkQ2qDW7oEKgpGBMsTnXWudSn60e6Z7oOnh5g4TkXlUFExVdTrKMrY7RTlzSwqg92+sON3b7md21O/sm9PBxXGNhiDu2wPvp7KWHILemyb6NkWO8xcxDHU665+2Ng2BTnorGrUHhBbwACK51v5UAnxNIa6lk8XAjFwrXCX8fXeLLGjaLcZoaHqhLnhtiVZKkCtZWioZckJ00A8MHPLEv5dR7+pK8VkpXZNY/lB0sAXukkNQ3HOo7IRRPS1Y2Jeb9G8rirmhhY1g3mRFO1IRARBzS1QWbDdDY78JDdtNMiiMBny99rydUz8IoAeomaTlCnDnYRv5Q6MCOUoV3YLfX6o38jmkRjIXijAv844aW32CK8sP51j17hglDwTC8tjJk5WwBqiHpr1MnYACyz00+/nFj+9OIiebqYnO1t+cDsvyCHB7ViQek48ez5UmuKjovF8O3PHPZ9bC+xyL/m/8g2Jxoekxv1fqUZG43l2Y8Q9/2djYgQuk/VPFlLqhZQ6bRDIYwI0NoM/04//IAiPWJotDlnXJg0McJQjltpeFr1Gs9VxEUiTPUHB9Y8NCp9qh+D6h8A/xpXfc7s6GHIYz9NvLLTDvxoIachYg0WdRLwIIVj0NWklEQHWkuzk0oA1sZ/XPtsWZYkqo7ax+g7becY8KfROMSg5dWLoQGJm0X7/K41EeN+S7X+luyjS9Yz/lT1F73j2v9sbak5cojKnRtc2LrtQ1Z44167Zt9J4eJJLj5U9/Fc71W1yXwXoNkkrZBsC5FRfV2st+2doG+ejVJwvu8FYNsmljaBRMhoD1rV9PijHzgpxtuV7aJjSLu6v7VTsAtGUSjmr3NZt+hqNE50hZ4dzBL2hem/WgR2YIe1L5/7+/5Z7jPUa+pRZhtpShf1KU45aLuXzjn23nal69M7zbjsrti82Y9MsMDbSMVMc4c/JSiKePv1uTtobf2TvGcIfb5+v+W8Vmiu5iSuxNJTzJFuLSeDwHD7GiVw05Nfw99CU64sRIbWdQdJ2jX8ZSG1fzr8r+LeGf1fx72r+XcO/T/LvOv59ln+f598X+fdl/t3Ev5v591X+beDfN/m3kX/ZCdr2Zv7dR7/JeowKB05q4ZcH+beVf+EUWC7/tMdqqkOqXd8h8MnwgSnyBbQvt90L4nA93qm9zSF1ptMXcz0ek/XHhvFLj5zAL/GYrJ95Dr/MlqP4JR7VZqeXOTLrHmYK1EuaV3M9w4AXHvvcEmMBnY16DLqVrFObezsHgtqeze318q+PfwP8W8C/Y/gXJ5L1frIOAxfFDcN8czuvsO338u+d/HsX/1bxLx867xM9YtYhAK/ijpl14/keMMKsAzhK1mHcqbRCzjWBf5ljsn0K/07l35n8W8K/Zfz7AP9iCaNJmCRuW4u6MbdH+fttWUCA5VPnAtdaiT7Tn+fVH44+2WvpORuODEd4EFbbUC/kcCdeiHic1WHDXmFyfJGAE+vBjjLBwY4ISHlFXSd9V7JpwacP/fGpP9nqD5pvl7oSKsNs4hO3elrBX1OOLbnolePSCSvV4auM6q0PwFr7wHgbOg/u5OuYSdqsmoeQJpzi/XUDiHz/NVI4XxyqmufTpV+KxjM6sT0DnRhi8LATieX43BF1Xdwv6kWW6pP641V/AuoPVsHOJO9oghS5xrJslz5CmDCMULFmurt6LUQPol2eBb2kCQVpFBnbWy1aOpdzKUeT27VrREC+W3/cyljdz9z1uZWxA77Hj+ld8gg/pnfSA/yY3nIL+RF7kXk3T7yuFFAJYz5CmJh8qMBxxZVkOTk1eTATmjmy6MVeSzVOTkd7mEETlXnGKbpv43sv3UM4WFhzVqSuErEtX++kElKzraVeca285oues8ulwL9iHxazCuNZ0N5Xr9qvhSEfMDCa/75j587abv1XMLD2wcB6DbYFB8ecJEoLwX30lSsTUGT3vx6mK+Lb0R4YvAPLrcqD/enEp1W+wBwbzIlPuPuQ4G9+nIEEnx4c5mjxYSy04HrsW32Ks6Sgz2GLJvrH6EbnrMl5IwoUOglFwjdtP5601or/p2SBtI7Yx6Z9cEAZkCp6A3sICMVj0EXw18BGcNoGGn//d3+C25/gtq4Sty/w7WrcbuRbyIynvcS3S3H7Mt/CBe40ACV/LaTzxnaGj/4aeJiIDzvdgTNjNWiN15AX+GvqXezv9+94W4eMoh7AJbnM7WkOHU/ERdMzPQxicYKKP1aoOLsgTEQdXns4ExxX/yE1jU0cmurgURk70VqDTdWHCBMObN4Iic7zdnnWGgA/4yV2wQztd/Y2n9mM5W4r1EvU3X9rRfL2EHf30T+l3p6GYr5917Qs+rO0YBrWxdI503LwZ1DO8S+Iau11PzRd8GIX07Batg3I5m0+jN2WDmZmPxvpfCh4e5z9U8S78uFslK7nJ+uwq2tVwPCg219znfJBI//4OMe37dOBEQu9YkY2zX+IwVACumNzOHJMGk+LhDg8YSIs6vrjaQ8ynlbct2HOnxXibMv3ZMjMNh7vUbFVoZyX+kzuuDlt6Y+QIrCfZqjJtEVMTINqhDbbPgTT9Oa0C8K9F4RPstn1h/xLNbwPMoIT9rOyHnaaokvqS/YhmC7tpv9e2ubTSxtp8CHo3oAytZwNkEpGUz+hwby4t0dZ96c376R+m5cdweKY9Nc0YtHArlZvS4vxbaJuRJI9YEaV7xvrCTgLNjmbUjAI6l79ARt6mXonQXRTP2bqjlDXQONoBemDhcHYU/hYaqjRm6UPFMY+fu5FpA12frOPSVF7Xob0wl5gX3mFNbnwGhoth8my2CZHVausD1buxJFfgTBtCu/e3p4BQIzO8ad5GQKOrzr9PjrNjmeZ/kiGfRvRCWrBuGszWx5Wcniln9Iiwr53P4caDKpNToIiCnU49E5ikDmv0/OuOe9Y6k5hAA8MdVXPgT+dHfClU4Y+z7Cl+05JAVXSQackGrpeVVIXSupNDRdGmyrJC/dCO9ibZpJd6cds6641mBCbRdnhz4IhIlApf80/uHtYfSIXghYDGJloLhJACorCPmPHCaKUssQOMY3tR/JNgzG3MEyhm4nm8uwJNVfnxvOtDz2N6pvSZTrIRYbCrdXXi0irot2MHZ0bzQgdZ8dUGuBrJVFHJwKYDaxK7CMOZhzUDW5bMtEGhgkkfsjDWRwv38jS1peFb9i4i6vA+BdbHSwDmbwaR+QHUfnhZz1Qpa/lMEKcTBEv/hrA/+A26LOpAPPJ8LGoo34wkecbB4sQUHKDxXWkNz4TR3OkVzFTaAhRwVKuQB+vioKTgGOyYOYA1x00Honh8JgyyH7yr14JYN4nQQxRVjqD6Rye59vxl8Dg3yMKuDV5XObqhnl1cBtgjX6tfP6V47a3G2jv1CL644zlOCFS5wa3Af/Shsvl6TTguJgzluMg32sf5Pc+nXGQv/Qn5yBnXqOVjzEj+Hesxyra3dM6mlkvs9SAwWu2Ni50gvrXBykfoZQVtB3HZzaY4MyLz7hdrKn+1AnLWhxcj+Wn5ZnrGQPnp0ULrIsBKxYtUFiW7HrU7bJBqlZubAfibellMaUlVWtpQ4xHsxHJ44D8xQ8dnhBQDFoYyyH2ow9Tftj7XwyDWLuSsfOYfYAibs8lNuKrjWUqFIhRNtZYIYIwuQJQXph4LdhTO6sgsWkYDyz1kyGs40XHDdrqr5kB3MCjFoRo3uDbMSqgHHo2J2uXQewan2rW46CyJq9jEN9IrY1PTYZfjUXlT2Wu63vh768K7xWcmJ34v1q1ag2Yay3R3eH9OUQNT6LzJpkcD9Wn0U/3WkRhimm7qJTkeujOib3ymWcgbn6VTgb4cbr6GWhmqfTDfwhrDKUcUDsVhjQ7sPIR0jxZW2KxrchEcIjz91GB1lYksbN+SMVkdIdTqyO3usBIvOpK5FjhV1MeK/Iqnvy1GrKy7mhTeBfoZJnV1yz1QT61zjbzUlVseKrXSgXl3Tf1Wop3pV0q6rBPQ02PctidZJkyaDcaswnwEGAyuQGpHPkHWvXy776z64DNYx2wQ+Y8WfuefxUUl0Jrccr7k81A67aBlKWp+zXvbjACFASs3eOv/zEnVrypp/BdcXomrTF2O45bcUYyN+9KEe4MGcifyLcFRLa7phhyzpOVc2g6PiVysKPUDV/mzJ6ZG9zC7JnbgluA1OkzBTPXxLzOUEtiSFGLey2o6I5/o1pmt4rwsdBufz2Md0Rv0eeh4/7v99DHot1ug1PuQspIZ4j7sNxPR1OIO+VXAasFeBxFAlyPC/QjRUMCNKV0lt9c+96yYtGFqG/+1ZA7ifARhyn3YzzmimUFRcsCxu7souPuhLTCR4LzjlQfMF5ApS7jBdB3rtr3qssED0ER9yIYltXXiW34RnjYfJtfFnVGsUGUFhSVBop2qKZfFpazTE4c+nx5gwLOwAD6oHkfj8hxqg3saIC8sgQqPWlA9qfWjAOe5ZdHpf7z49BlYv+9Drza+wmRWedHqyB2kN/7OnsWi5yMMiO/j1e/0VoL0oIRJZt4ZpJNXogiHyoUrWn4h/KK7fKu5/KiDG1jCtxarNaT9grDGCTAUB1oP2gEKHcIcCuA+a6A879eMd8rvHTIwP0AIhIEmemiDQkys0NFP88qbgwmCvy1qzm3gz5nxF0LtWoP2kznnGDipH4/hNyKTxyw+cRexSfW/PRdGySYC1QUDpTF89JKO3A/mh+grv6XrFz0OSIS8ETGuCPe1NB4Xgz/7FxxN+4AiSsUHKapCCZ6/bUjafcvgOffApf88g2MXSvSETbM5dgriwr9NThOg+uxWf01U/meQW4ttNRjwfXcomnB9dyiycH1vJuuoIFZj7WlSH3/c41R2XI1wZf1GAv9YcFc0FAduFOp+1Si4HqsUn1ghXyJUlak5qMMrErO/cTV0PxEijJCI1a/hhGvU/sEntLtggttP0m+leLmglA9dkS1N8jM1uU8JxDDJ7eDG0HHyg3pFmnX2x3JtzsyxO5IhkhA1IGQV1YPeUbjEJx1a2/53BKvMQvhfFHtFdfSyQyHcVWKrhlcURE/P6bO49Cn+p8WI7DV8akOHcOxpmEGfxxhRs06jCtCvWTTE+LR5CBoLXOTzdLl5lNomHE8VxtoHB+gOb2Bezy0VP7y744NJGzvVdT5DPvXX6d67M9AIyDCGURrsamEGcfM5c1reG4d+D+5bJdma28XdvZAe7tdvr6ml7UgbKJGHyrqQDUUMYMv5RN1+/gJ3Nhn4q6id+Kud3tLorQNfZQbf73S/7FjXdwu36Ti5DO5rJhjfSuNyaCV1LQhVS9PyIPTw9u/qphTfawzovgsi2gWppLpVptDRDqhE5sAl1trD2vTFQENn5qsu4vBoSLZrumRdEVlVFHcFau6kL72oUx75RtXna4rm8FX6Q57QfEqtyIV8ezKJGt+VMjR3zplCU/xntAOfw0c9AfLCpXfvBgSbQeBHgMSHumCiC/SK/+5hDJA2J1nPEzk+FCFg8MnQN05p6w0FX0jQ29FRUeN7e0urG2HmNZyjD0WQZmybGvJeGQvF4MrZSnld6jpHWrCIUVYvICFe8WNi+R17yvtZLnk+gyr/MnZA1xV2eNpIf37N2dqyB6Hc4t/Zmda5e9L9QmTP/vNaXKF06g7AOPJIIshKjmUFlXStJxHJ0qTAVQU69AxGPl5R4/VAXVdYxtWG6h7zI8ih8FwMxS17eNC/DU/c/XD57/WAQq1DRTqGBsl/pCoBI4vtAXnWaVSl+KQS0sq09T9fdyY6GmNGYvSmKgVvcktqBiaOEQYyf3fw/F3BrPQIc/p3iaGHfK8A9FMMqkf7Tw4A/ExuQgkOMRyL93LjkC/sKxMmuFvdYSaM3Hj0m/qy5bmLl6ZwV10mJNnchfdGDjo1KfFYZe+m8FHtFmHCsbDG0WgA9x4MS8Qet+OwXhLYZKFJxmOm0PN/tr/YD86rLpPsQnGTrwGfuFA7mbyzBQ/zIwEAMdhm+HA8V/g9/WEj8gw745/BAZ/Lp5SS/27wflTxFisgKYclIkh0MavSHiztVz6zdHHxF3yqo8IwEV8BHuIRA6UV+UF1M5+n56w09lUlJ8jAeNiFAPfkMf/RHDAHY1nWa+54O4m/+S1TDrN/dRSKthqRZ3zDwYX1uQCez29nxohJ17Xa80RjvuVv3fZ
*/