/*
  A thread-safe version of Boost.Signals.

  Author: Frank Mori Hess <fmhess@users.sourceforge.net>
  Begin: 2007-01-23
*/
// Copyright Frank Mori Hess 2007-2008
// Use, modification and
// distribution is subject to the Boost Software License, Version
// 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

// For more information, see http://www.boost.org

#ifndef BOOST_SIGNALS2_PREPROCESSED_SIGNAL_HPP
#define BOOST_SIGNALS2_PREPROCESSED_SIGNAL_HPP

#include <boost/config.hpp>
#include <boost/preprocessor/arithmetic.hpp>
#include <boost/preprocessor/cat.hpp>
#include <boost/preprocessor/control/expr_if.hpp>
#include <boost/preprocessor/iteration.hpp>
#include <boost/preprocessor/repetition.hpp>
#include <boost/signals2/detail/preprocessed_arg_type.hpp>
#include <boost/type_traits/add_reference.hpp>
#include <boost/type_traits/is_void.hpp> 
#include <boost/utility/enable_if.hpp>

#define BOOST_PP_ITERATION_LIMITS (0, BOOST_SIGNALS2_MAX_ARGS)
#define BOOST_PP_FILENAME_1 <boost/signals2/detail/signal_template.hpp>
#include BOOST_PP_ITERATE()

namespace boost
{
  namespace signals2
  {
    template<typename Signature,
      typename Combiner = optional_last_value<typename boost::function_traits<Signature>::result_type>,
      typename Group = int,
      typename GroupCompare = std::less<Group>,
      typename SlotFunction = function<Signature>,
      typename ExtendedSlotFunction = typename detail::extended_signature<function_traits<Signature>::arity, Signature>::function_type,
      typename Mutex = mutex >
    class signal: public detail::signalN<function_traits<Signature>::arity,
      Signature, Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::type
    {
    private:
      typedef typename detail::signalN<boost::function_traits<Signature>::arity,
        Signature, Combiner, Group, GroupCompare, SlotFunction, ExtendedSlotFunction, Mutex>::type base_type;
    public:
      signal(const Combiner &combiner_arg = Combiner(), const GroupCompare &group_compare = GroupCompare()):
        base_type(combiner_arg, group_compare)
      {}
#if !defined(BOOST_NO_CXX11_RVALUE_REFERENCES) && BOOST_WORKAROUND(BOOST_MSVC, < 1800)
      signal(signal && other) BOOST_NOEXCEPT: base_type(std::move(other)) {}
      signal & operator=(signal && other) BOOST_NOEXCEPT{ base_type::operator=(std::move(other)); return *this; }
#endif
    };
  }
}

#endif // BOOST_SIGNALS2_PREPROCESSED_SIGNAL_HPP

/* preprocessed_signal.hpp
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
*/