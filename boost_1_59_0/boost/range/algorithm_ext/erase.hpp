// Boost.Range library
//
//  Copyright Neil Groves 2009. Use, modification and
//  distribution is subject to the Boost Software License, Version
//  1.0. (See accompanying file LICENSE_1_0.txt or copy at
//  http://www.boost.org/LICENSE_1_0.txt)
//
// For more information, see http://www.boost.org/libs/range/
//
#ifndef BOOST_RANGE_ALGORITHM_EXT_ERASE_HPP_INCLUDED
#define BOOST_RANGE_ALGORITHM_EXT_ERASE_HPP_INCLUDED

#include <boost/range/config.hpp>
#include <boost/range/concepts.hpp>
#include <boost/range/difference_type.hpp>
#include <boost/range/iterator_range_core.hpp>
#include <boost/range/begin.hpp>
#include <boost/range/end.hpp>
#include <boost/assert.hpp>

namespace boost
{
    namespace range
    {

template< class Container >
inline Container& erase( Container& on,
      iterator_range<BOOST_DEDUCED_TYPENAME Container::iterator> to_erase )
{
    BOOST_RANGE_CONCEPT_ASSERT(( ForwardRangeConcept<Container> ));
    on.erase( boost::begin(to_erase), boost::end(to_erase) );
    return on;
}

template< class Container, class T >
inline Container& remove_erase( Container& on, const T& val )
{
    BOOST_RANGE_CONCEPT_ASSERT(( ForwardRangeConcept<Container> ));
    on.erase(
        std::remove(boost::begin(on), boost::end(on), val),
        boost::end(on));
    return on;
}

template< class Container, class Pred >
inline Container& remove_erase_if( Container& on, Pred pred )
{
    BOOST_RANGE_CONCEPT_ASSERT(( ForwardRangeConcept<Container> ));
    on.erase(
        std::remove_if(boost::begin(on), boost::end(on), pred),
        boost::end(on));
    return on;
}

template< class Container >
inline Container& unique_erase( Container& on)
{
    BOOST_RANGE_CONCEPT_ASSERT(( ForwardRangeConcept<Container> ));
    on.erase(
        std::unique(boost::begin(on), boost::end(on)),
        boost::end(on));
    return on;
}

template< class Container, class Pred >
inline Container& unique_erase( Container& on, Pred pred )
{
    BOOST_RANGE_CONCEPT_ASSERT(( ForwardRangeConcept<Container> ));
    on.erase(
        std::unique(boost::begin(on), boost::end(on), pred),
        boost::end(on));
    return on;
}

    } // namespace range
    using range::erase;
    using range::remove_erase;
    using range::remove_erase_if;
    using range::unique_erase;
} // namespace boost

#endif // include guard

/* erase.hpp
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
*/