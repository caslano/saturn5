//  Copyright Neil Groves 2009. Use, modification and
//  distribution is subject to the Boost Software License, Version
//  1.0. (See accompanying file LICENSE_1_0.txt or copy at
//  http://www.boost.org/LICENSE_1_0.txt)
//
//
// For more information, see http://www.boost.org/libs/range/
//
#ifndef BOOST_RANGE_ALGORITHM_COPY_N_HPP_INCLUDED
#define BOOST_RANGE_ALGORITHM_COPY_N_HPP_INCLUDED

#include <boost/assert.hpp>
#include <boost/concept_check.hpp>
#include <boost/range/begin.hpp>
#include <boost/range/end.hpp>
#include <boost/range/concepts.hpp>
#include <boost/range/distance.hpp>
#include <boost/range/iterator.hpp>
#include <boost/range/iterator_range.hpp>
#include <algorithm>

namespace boost
{
    namespace range
    {

/// \brief template function copy
///
/// range-based version of the copy std algorithm
///
/// \pre SinglePassRange is a model of the SinglePassRangeConcept
/// \pre OutputIterator is a model of the OutputIteratorConcept
/// \pre 0 <= n <= distance(rng)
template< class SinglePassRange, class Size, class OutputIterator >
inline OutputIterator copy_n(const SinglePassRange& rng, Size n, OutputIterator out)
{
    BOOST_RANGE_CONCEPT_ASSERT(( SinglePassRangeConcept<const SinglePassRange> ));
    BOOST_ASSERT( n <= static_cast<Size>(::boost::distance(rng)) );
    BOOST_ASSERT( n >= static_cast<Size>(0) );

    BOOST_DEDUCED_TYPENAME range_iterator<const SinglePassRange>::type source = ::boost::begin(rng);

    for (Size i = 0; i < n; ++i, ++out, ++source)
        *out = *source;

    return out;
}

    } // namespace range
    using ::boost::range::copy_n;
} // namespace boost

#endif // include guard

/* copy_n.hpp
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
*/