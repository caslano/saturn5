// Boost.Range library
//
//  Copyright Neil Groves 2009. Use, modification and
//  distribution is subject to the Boost Software License, Version
//  1.0. (See accompanying file LICENSE_1_0.txt or copy at
//  http://www.boost.org/LICENSE_1_0.txt)
//
// For more information, see http://www.boost.org/libs/range/
//
#ifndef BOOST_RANGE_ALGORITHM_EXT_OVERWRITE_HPP_INCLUDED
#define BOOST_RANGE_ALGORITHM_EXT_OVERWRITE_HPP_INCLUDED

#include <boost/range/config.hpp>
#include <boost/range/concepts.hpp>
#include <boost/range/difference_type.hpp>
#include <boost/range/iterator.hpp>
#include <boost/range/begin.hpp>
#include <boost/range/end.hpp>
#include <boost/assert.hpp>

namespace boost
{
    namespace range
    {

template< class SinglePassRange1, class SinglePassRange2 >
inline void overwrite( const SinglePassRange1& from, SinglePassRange2& to )
{
    BOOST_RANGE_CONCEPT_ASSERT(( SinglePassRangeConcept<const SinglePassRange1> ));
    BOOST_RANGE_CONCEPT_ASSERT(( SinglePassRangeConcept<SinglePassRange2> ));

    BOOST_DEDUCED_TYPENAME range_iterator<const SinglePassRange1>::type
        i = boost::begin(from), e = boost::end(from);

    BOOST_DEDUCED_TYPENAME range_iterator<SinglePassRange2>::type
        out = boost::begin(to);

#ifndef NDEBUG
    BOOST_DEDUCED_TYPENAME range_iterator<SinglePassRange2>::type
        last_out = boost::end(to);
#endif

    for( ; i != e; ++out, ++i )
    {
#ifndef NDEBUG
        BOOST_ASSERT( out != last_out
            && "out of bounds in boost::overwrite()" );
#endif
        *out = *i;
    }
}

template< class SinglePassRange1, class SinglePassRange2 >
inline void overwrite( const SinglePassRange1& from, const SinglePassRange2& to )
{
    BOOST_RANGE_CONCEPT_ASSERT(( SinglePassRangeConcept<const SinglePassRange1> ));
    BOOST_RANGE_CONCEPT_ASSERT(( SinglePassRangeConcept<const SinglePassRange2> ));

    BOOST_DEDUCED_TYPENAME range_iterator<const SinglePassRange1>::type
        i = boost::begin(from), e = boost::end(from);

    BOOST_DEDUCED_TYPENAME range_iterator<const SinglePassRange2>::type
        out = boost::begin(to);

#ifndef NDEBUG
    BOOST_DEDUCED_TYPENAME range_iterator<const SinglePassRange2>::type
        last_out = boost::end(to);
#endif

    for( ; i != e; ++out, ++i )
    {
#ifndef NDEBUG
        BOOST_ASSERT( out != last_out
            && "out of bounds in boost::overwrite()" );
#endif
        *out = *i;
    }
}

    } // namespace range
    using range::overwrite;
} // namespace boost

#endif // include guard

/* overwrite.hpp
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
*/