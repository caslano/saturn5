//  Copyright Neil Groves 2010. Use, modification and
//  distribution is subject to the Boost Software License, Version
//  1.0. (See accompanying file LICENSE_1_0.txt or copy at
//  http://www.boost.org/LICENSE_1_0.txt)
//
//
// For more information, see http://www.boost.org/libs/range/
//
#ifndef BOOST_RANGE_COUNTING_RANGE_HPP_INCLUDED
#define BOOST_RANGE_COUNTING_RANGE_HPP_INCLUDED

#include <boost/config.hpp>
#if BOOST_MSVC >= 1400
#pragma warning(push)
#pragma warning(disable : 4244)
#endif

#include <boost/range/iterator_range_core.hpp>
#include <boost/range/value_type.hpp>
#include <boost/range/iterator.hpp>
#include <boost/iterator/counting_iterator.hpp>

namespace boost
{
    template<class Value>
    inline iterator_range<counting_iterator<Value> >
    counting_range(Value first, Value last)
    {
        typedef counting_iterator<Value> counting_iterator_t;
        typedef iterator_range<counting_iterator_t> result_t;
        return result_t(counting_iterator_t(first),
                        counting_iterator_t(last));
    }

    template<class Range>
    inline iterator_range<
        counting_iterator<
            BOOST_DEDUCED_TYPENAME range_iterator<const Range>::type
        >
    >
    counting_range(const Range& rng)
    {
        typedef counting_iterator<
            BOOST_DEDUCED_TYPENAME range_iterator<const Range>::type
        > counting_iterator_t;

        typedef iterator_range<counting_iterator_t> result_t;

        return result_t(counting_iterator_t(boost::begin(rng)),
                        counting_iterator_t(boost::end(rng)));
    }

    template<class Range>
    inline iterator_range<
        counting_iterator<
            BOOST_DEDUCED_TYPENAME range_iterator<Range>::type
        >
    >
    counting_range(Range& rng)
    {
        typedef counting_iterator<
            BOOST_DEDUCED_TYPENAME range_iterator<Range>::type
        > counting_iterator_t;

        typedef iterator_range<counting_iterator_t> result_t;

        return result_t(counting_iterator_t(boost::begin(rng)),
                        counting_iterator_t(boost::end(rng)));
    }
} // namespace boost

#if BOOST_MSVC >= 1400
#pragma warning(pop)
#endif

#endif // include guard

/* counting_range.hpp
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
*/