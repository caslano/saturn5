// Boost.Range library
//
//  Copyright Neil Groves 2009. Use, modification and
//  distribution is subject to the Boost Software License, Version
//  1.0. (See accompanying file LICENSE_1_0.txt or copy at
//  http://www.boost.org/LICENSE_1_0.txt)
//
// Acknowledgements:
// aschoedl supplied a fix to supply the level of interoperability I had
// originally intended, but failed to implement.
//
// For more information, see http://www.boost.org/libs/range/
//
#ifndef BOOST_RANGE_DETAIL_DEMOTE_ITERATOR_TRAVERSAL_TAG_HPP_INCLUDED
#define BOOST_RANGE_DETAIL_DEMOTE_ITERATOR_TRAVERSAL_TAG_HPP_INCLUDED

#include <boost/iterator/iterator_categories.hpp>

namespace boost
{
    namespace range_detail
    {

template<class IteratorTraversalTag1, class IteratorTraversalTag2>
struct inner_demote_iterator_traversal_tag
{
};

#define BOOST_DEMOTE_TRAVERSAL_TAG( Tag1, Tag2, ResultTag ) \
template<> struct inner_demote_iterator_traversal_tag< Tag1 , Tag2 > \
{ \
    typedef ResultTag type; \
};

BOOST_DEMOTE_TRAVERSAL_TAG( no_traversal_tag, no_traversal_tag,            no_traversal_tag )
BOOST_DEMOTE_TRAVERSAL_TAG( no_traversal_tag, incrementable_traversal_tag, no_traversal_tag )
BOOST_DEMOTE_TRAVERSAL_TAG( no_traversal_tag, single_pass_traversal_tag,   no_traversal_tag )
BOOST_DEMOTE_TRAVERSAL_TAG( no_traversal_tag, forward_traversal_tag,       no_traversal_tag )
BOOST_DEMOTE_TRAVERSAL_TAG( no_traversal_tag, bidirectional_traversal_tag, no_traversal_tag )
BOOST_DEMOTE_TRAVERSAL_TAG( no_traversal_tag, random_access_traversal_tag, no_traversal_tag )

BOOST_DEMOTE_TRAVERSAL_TAG( incrementable_traversal_tag, no_traversal_tag,            no_traversal_tag            )
BOOST_DEMOTE_TRAVERSAL_TAG( incrementable_traversal_tag, incrementable_traversal_tag, incrementable_traversal_tag )
BOOST_DEMOTE_TRAVERSAL_TAG( incrementable_traversal_tag, single_pass_traversal_tag,   incrementable_traversal_tag )
BOOST_DEMOTE_TRAVERSAL_TAG( incrementable_traversal_tag, forward_traversal_tag,       incrementable_traversal_tag )
BOOST_DEMOTE_TRAVERSAL_TAG( incrementable_traversal_tag, bidirectional_traversal_tag, incrementable_traversal_tag )
BOOST_DEMOTE_TRAVERSAL_TAG( incrementable_traversal_tag, random_access_traversal_tag, incrementable_traversal_tag )

BOOST_DEMOTE_TRAVERSAL_TAG( single_pass_traversal_tag, no_traversal_tag,            no_traversal_tag            )
BOOST_DEMOTE_TRAVERSAL_TAG( single_pass_traversal_tag, incrementable_traversal_tag, incrementable_traversal_tag )
BOOST_DEMOTE_TRAVERSAL_TAG( single_pass_traversal_tag, single_pass_traversal_tag,   single_pass_traversal_tag   )
BOOST_DEMOTE_TRAVERSAL_TAG( single_pass_traversal_tag, forward_traversal_tag,       single_pass_traversal_tag   )
BOOST_DEMOTE_TRAVERSAL_TAG( single_pass_traversal_tag, bidirectional_traversal_tag, single_pass_traversal_tag   )
BOOST_DEMOTE_TRAVERSAL_TAG( single_pass_traversal_tag, random_access_traversal_tag, single_pass_traversal_tag   )

BOOST_DEMOTE_TRAVERSAL_TAG( forward_traversal_tag, no_traversal_tag,            no_traversal_tag            )
BOOST_DEMOTE_TRAVERSAL_TAG( forward_traversal_tag, incrementable_traversal_tag, incrementable_traversal_tag )
BOOST_DEMOTE_TRAVERSAL_TAG( forward_traversal_tag, single_pass_traversal_tag,   single_pass_traversal_tag   )
BOOST_DEMOTE_TRAVERSAL_TAG( forward_traversal_tag, forward_traversal_tag,       forward_traversal_tag       )
BOOST_DEMOTE_TRAVERSAL_TAG( forward_traversal_tag, bidirectional_traversal_tag, forward_traversal_tag       )
BOOST_DEMOTE_TRAVERSAL_TAG( forward_traversal_tag, random_access_traversal_tag, forward_traversal_tag       )

BOOST_DEMOTE_TRAVERSAL_TAG( bidirectional_traversal_tag, no_traversal_tag,            no_traversal_tag            )
BOOST_DEMOTE_TRAVERSAL_TAG( bidirectional_traversal_tag, incrementable_traversal_tag, incrementable_traversal_tag )
BOOST_DEMOTE_TRAVERSAL_TAG( bidirectional_traversal_tag, single_pass_traversal_tag,   single_pass_traversal_tag   )
BOOST_DEMOTE_TRAVERSAL_TAG( bidirectional_traversal_tag, forward_traversal_tag,       forward_traversal_tag       )
BOOST_DEMOTE_TRAVERSAL_TAG( bidirectional_traversal_tag, bidirectional_traversal_tag, bidirectional_traversal_tag )
BOOST_DEMOTE_TRAVERSAL_TAG( bidirectional_traversal_tag, random_access_traversal_tag, bidirectional_traversal_tag )

BOOST_DEMOTE_TRAVERSAL_TAG( random_access_traversal_tag, no_traversal_tag,            no_traversal_tag            )
BOOST_DEMOTE_TRAVERSAL_TAG( random_access_traversal_tag, incrementable_traversal_tag, incrementable_traversal_tag )
BOOST_DEMOTE_TRAVERSAL_TAG( random_access_traversal_tag, single_pass_traversal_tag,   single_pass_traversal_tag   )
BOOST_DEMOTE_TRAVERSAL_TAG( random_access_traversal_tag, forward_traversal_tag,       forward_traversal_tag       )
BOOST_DEMOTE_TRAVERSAL_TAG( random_access_traversal_tag, bidirectional_traversal_tag, bidirectional_traversal_tag )
BOOST_DEMOTE_TRAVERSAL_TAG( random_access_traversal_tag, random_access_traversal_tag, random_access_traversal_tag )

#undef BOOST_DEMOTE_TRAVERSAL_TAG

template<class IteratorTraversalTag1, class IteratorTraversalTag2>
struct demote_iterator_traversal_tag
    : inner_demote_iterator_traversal_tag<
        typename boost::iterators::pure_traversal_tag< IteratorTraversalTag1 >::type,
        typename boost::iterators::pure_traversal_tag< IteratorTraversalTag2 >::type
      >
{
};

    } // namespace range_detail
} // namespace boost

#endif // include guard

/* demote_iterator_traversal_tag.hpp
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
*/