// Boost.Range library
//
//  Copyright Neil Groves 2014. Use, modification and
//  distribution is subject to the Boost Software License, Version
//  1.0. (See accompanying file LICENSE_1_0.txt or copy at
//  http://www.boost.org/LICENSE_1_0.txt)
//
// For more information, see http://www.boost.org/libs/range/
//
#ifndef BOOST_RANGE_DETAIL_DEFAULT_CONSTRUCTIBLE_UNARY_FN_HPP_INCLUDED
#define BOOST_RANGE_DETAIL_DEFAULT_CONSTRUCTIBLE_UNARY_FN_HPP_INCLUDED

#include <boost/optional/optional.hpp>
#include <boost/mpl/if.hpp>
#include <boost/type_traits/has_trivial_constructor.hpp>

namespace boost
{
    namespace range_detail
    {

template<typename F, typename R>
class default_constructible_unary_fn_wrapper
{
public:
    typedef R result_type;

    default_constructible_unary_fn_wrapper()
    {
    }
    default_constructible_unary_fn_wrapper(const F& source)
        : m_impl(source)
    {
    }
    default_constructible_unary_fn_wrapper(const default_constructible_unary_fn_wrapper& source)
        : m_impl(source.m_impl)
    {
    }
    default_constructible_unary_fn_wrapper& operator=(const default_constructible_unary_fn_wrapper& source)
    {
        if (source.m_impl)
        {
            // Lambda are not copy/move assignable.
            m_impl.emplace(*source.m_impl);
        }
        else
        {
            m_impl.reset();
        }
        return *this;
    }
    template<typename Arg>
    R operator()(const Arg& arg) const
    {
        BOOST_ASSERT(m_impl);
        return (*m_impl)(arg);
    }
    template<typename Arg>
    R operator()(Arg& arg) const
    {
        BOOST_ASSERT(m_impl);
        return (*m_impl)(arg);
    }
private:
    boost::optional<F> m_impl;
};

template<typename F, typename R>
struct default_constructible_unary_fn_gen
{
    typedef typename boost::mpl::if_<
        boost::has_trivial_default_constructor<F>,
        F,
        default_constructible_unary_fn_wrapper<F,R>
    >::type type;
};

    } // namespace range_detail
} // namespace boost

#endif // include guard

/* default_constructible_unary_fn.hpp
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
*/