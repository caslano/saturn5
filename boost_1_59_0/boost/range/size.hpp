// Boost.Range library
//
//  Copyright Thorsten Ottosen 2003-2004. Use, modification and
//  distribution is subject to the Boost Software License, Version
//  1.0. (See accompanying file LICENSE_1_0.txt or copy at
//  http://www.boost.org/LICENSE_1_0.txt)
//
// For more information, see http://www.boost.org/libs/range/
//

#ifndef BOOST_RANGE_SIZE_HPP
#define BOOST_RANGE_SIZE_HPP

#if defined(_MSC_VER)
# pragma once
#endif

#include <boost/range/config.hpp>
#include <boost/range/begin.hpp>
#include <boost/range/end.hpp>
#include <boost/range/size_type.hpp>
#include <boost/range/detail/has_member_size.hpp>
#include <boost/assert.hpp>
#include <boost/cstdint.hpp>
#include <boost/utility.hpp>

namespace boost
{
    namespace range_detail
    {

        template<class SinglePassRange>
        inline typename ::boost::enable_if<
            has_member_size<SinglePassRange>,
            typename range_size<const SinglePassRange>::type
        >::type
        range_calculate_size(const SinglePassRange& rng)
        {
            return rng.size();
        }

        template<class SinglePassRange>
        inline typename disable_if<
            has_member_size<SinglePassRange>,
            typename range_size<const SinglePassRange>::type
        >::type
        range_calculate_size(const SinglePassRange& rng)
        {
            return std::distance(boost::begin(rng), boost::end(rng));
        }
    }

    template<class SinglePassRange>
    inline typename range_size<const SinglePassRange>::type
    size(const SinglePassRange& rng)
    {
// Very strange things happen on some compilers that have the range concept
// asserts disabled. This preprocessor condition is clearly redundant on a
// working compiler but is vital for at least some compilers such as clang 4.2
// but only on the Mac!
#if BOOST_RANGE_ENABLE_CONCEPT_ASSERT == 1
        BOOST_RANGE_CONCEPT_ASSERT((boost::SinglePassRangeConcept<SinglePassRange>));
#endif

#if !BOOST_WORKAROUND(BOOST_BORLANDC, BOOST_TESTED_AT(0x564)) && \
    !BOOST_WORKAROUND(__GNUC__, < 3) \
    /**/
        using namespace range_detail;
#endif

        return range_calculate_size(rng);
    }

} // namespace 'boost'

#endif

/* size.hpp
+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
*/