//  Copyright Neil Groves 2009. Use, modification and
//  distribution is subject to the Boost Software License, Version
//  1.0. (See accompanying file LICENSE_1_0.txt or copy at
//  http://www.boost.org/LICENSE_1_0.txt)
//
//
// For more information, see http://www.boost.org/libs/range/
//
#ifndef BOOST_RANGE_ALGORITHM_PARTIAL_SORT_HPP_INCLUDED
#define BOOST_RANGE_ALGORITHM_PARTIAL_SORT_HPP_INCLUDED

#include <boost/concept_check.hpp>
#include <boost/range/begin.hpp>
#include <boost/range/end.hpp>
#include <boost/range/concepts.hpp>
#include <algorithm>

namespace boost
{
    namespace range
    {

/// \brief template function partial_sort
///
/// range-based version of the partial_sort std algorithm
///
/// \pre RandomAccessRange is a model of the RandomAccessRangeConcept
/// \pre BinaryPredicate is a model of the BinaryPredicateConcept
template<class RandomAccessRange>
inline RandomAccessRange& partial_sort(RandomAccessRange& rng,
    BOOST_DEDUCED_TYPENAME range_iterator<RandomAccessRange>::type middle)
{
    BOOST_RANGE_CONCEPT_ASSERT(( RandomAccessRangeConcept<RandomAccessRange> ));
    std::partial_sort(boost::begin(rng), middle, boost::end(rng));
    return rng;
}

/// \overload
template<class RandomAccessRange>
inline const RandomAccessRange& partial_sort(const RandomAccessRange& rng,
    BOOST_DEDUCED_TYPENAME range_iterator<const RandomAccessRange>::type middle)
{
    BOOST_RANGE_CONCEPT_ASSERT(( RandomAccessRangeConcept<const RandomAccessRange> ));
    std::partial_sort(boost::begin(rng), middle, boost::end(rng));
    return rng;
}

/// \overload
template<class RandomAccessRange, class BinaryPredicate>
inline RandomAccessRange& partial_sort(RandomAccessRange& rng,
    BOOST_DEDUCED_TYPENAME range_iterator<RandomAccessRange>::type middle,
    BinaryPredicate sort_pred)
{
    BOOST_RANGE_CONCEPT_ASSERT(( RandomAccessRangeConcept<RandomAccessRange> ));
    std::partial_sort(boost::begin(rng), middle, boost::end(rng),
                        sort_pred);
    return rng;
}

/// \overload
template<class RandomAccessRange, class BinaryPredicate>
inline const RandomAccessRange& partial_sort(const RandomAccessRange& rng,
    BOOST_DEDUCED_TYPENAME range_iterator<const RandomAccessRange>::type middle,
    BinaryPredicate sort_pred)
{
    BOOST_RANGE_CONCEPT_ASSERT(( RandomAccessRangeConcept<const RandomAccessRange> ));
    std::partial_sort(boost::begin(rng), middle, boost::end(rng),
                        sort_pred);
    return rng;
}

    } // namespace range
    using range::partial_sort;
} // namespace boost

#endif // include guard

/* partial_sort.hpp
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
*/