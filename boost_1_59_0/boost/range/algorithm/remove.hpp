//  Copyright Neil Groves 2009. Use, modification and
//  distribution is subject to the Boost Software License, Version
//  1.0. (See accompanying file LICENSE_1_0.txt or copy at
//  http://www.boost.org/LICENSE_1_0.txt)
//
//
// For more information, see http://www.boost.org/libs/range/
//
#ifndef BOOST_RANGE_ALGORITHM_REMOVE_HPP_INCLUDED
#define BOOST_RANGE_ALGORITHM_REMOVE_HPP_INCLUDED

#include <boost/concept_check.hpp>
#include <boost/range/begin.hpp>
#include <boost/range/end.hpp>
#include <boost/range/concepts.hpp>
#include <boost/range/detail/range_return.hpp>
#include <algorithm>

namespace boost
{
    namespace range
    {

/// \brief template function remove
///
/// range-based version of the remove std algorithm
///
/// \pre ForwardRange is a model of the ForwardRangeConcept
template< class ForwardRange, class Value >
inline BOOST_DEDUCED_TYPENAME range_iterator<ForwardRange>::type
remove(ForwardRange& rng, const Value& val)
{
    BOOST_RANGE_CONCEPT_ASSERT(( ForwardRangeConcept<ForwardRange> ));
    return std::remove(boost::begin(rng),boost::end(rng),val);
}

/// \overload
template< class ForwardRange, class Value >
inline BOOST_DEDUCED_TYPENAME range_iterator<const ForwardRange>::type
remove(const ForwardRange& rng, const Value& val)
{
    BOOST_RANGE_CONCEPT_ASSERT(( ForwardRangeConcept<const ForwardRange> ));
    return std::remove(boost::begin(rng),boost::end(rng),val);
}

// range_return overloads

/// \overload
template< range_return_value re, class ForwardRange, class Value >
inline BOOST_DEDUCED_TYPENAME range_return<ForwardRange,re>::type
remove(ForwardRange& rng, const Value& val)
{
    BOOST_RANGE_CONCEPT_ASSERT(( ForwardRangeConcept<ForwardRange> ));
    return range_return<ForwardRange,re>::pack(
        std::remove(boost::begin(rng), boost::end(rng), val),
        rng);
}

/// \overload
template< range_return_value re, class ForwardRange, class Value >
inline BOOST_DEDUCED_TYPENAME range_return<const ForwardRange,re>::type
remove(const ForwardRange& rng, const Value& val)
{
    BOOST_RANGE_CONCEPT_ASSERT(( ForwardRangeConcept<const ForwardRange> ));
    return range_return<const ForwardRange,re>::pack(
        std::remove(boost::begin(rng), boost::end(rng), val),
        rng);
}

    } // namespace range
    using range::remove;
} // namespace boost

#endif // include guard

/* remove.hpp
WVvaVLn0H7iYCTVX8RG4kQG0xifF8PUWrVRPlOud22vKh+MwMcIpELsBiUPncyzGBNMDFlyMF6eC5480XjZcK2zFgIKkXCkVvLXN9co2+Gpctt6xIjsI3821o3UqvjibP1+5sPNuQYrLe1BiRaYRw8euukijK63P5CegAsRr/W4mQgPYrFeeFCTLFKFj43GoD7epnm083GVBIYOsto/6ySgVo3VKVeVMf9I39dmFTzaXDbW5D1AL3A5LT91XXk+ANm2lPoLb0pdjgbT7/0tUmuSuQ2WJ5K82Rr0AXVVfJF+/ue4Apv86aj5lp2vpHUKYxmY/dpvLxtq6tKq8mOxXE9ZfQl19XC2x02j4ENQfnt7s8+q2WcSATjh06vNJYTuoZb46RYgphMSJ2oGAAXlyAL7uvunYIrQuacJrzB7tYF1M/2uzCbeW9rEZ8hq71plKEej2VWPx7tIHhrjcj1+nGe1cV8o07Kb7RZqTSSVV+tIwbUGiMOTSqK0XJI2YssVI1Z0SnVXQIrTq1ciGSSQnv0m2rYSq1iQPVxA3tcRd5cBZmAfP3LcW8qISwCD86repCwJ+durZS5O8GOBuzq3v02w5nvjMmiEJmW0GUvfXLB6PWabb7WZkU2f+t02j0dZ0xcTAjE6ye31pRawoZydeCPhYoyJXhmdTqPRs84IqHnE1gmiUZkNWwfuuKaf7qgUceXK8Rypn75wv2wH+PTl6AaxVoNNwfPP6hQbZ6seOLoqw+bsv/Z4bRXC7Y0a/gq2tGxWY5gxk12nlrnT0PwSEInjEnTdcUH4YapAgKLiftOYLTtFr88++7VqzK2gO1/QVuJhbRLIdV/QDN9+x84UabNb7gCJ9NTjJK7Z2fjaT7XE/sPeMOfK04l8dOVyfLO/OswPdfDw5y55mAVBkSAN4sG8NYdm6c4tNUqzw+2b2Mch1zTE4drCq7Wm8FkdW5XojBwphaXiMzU0MFFm/yhIspLoN86vddn5wKVezt4ATbjhdBVE5SOuulVs+jMD51KmliWahR3uRuBfgsWln1CbzsbwfF6SyPYMiOkeKbDKyDNNRHgbs/8rJvTr+cnD7sJbfR2JP2x4dQgQzfpAQf77nnUZ9+0PjCANL4b3mJJhKDW78UdrGFiNXMNbWxvgZSMghxUPi+ZkZj+xSq1f37kojhy/X0fvYlR4/fvHwM6Czj3r+lmObGMFFcTEnaz6tSzu9yB/IOg9bdNNjnwT/7b6FVDiNrq0ujO9mwHfTrjS0GDiG2uovygFajS2wHFyBpBsjXK9snILXk7dpHReE+dHhCjHABKx5SIWi6rl2XTTwbOqcV/p3Pk9KGfEm10WjDWjhd6lRsBhq0LHOi0JhmLP8XCa91Lt8kMF/6rVJ9ERfPT56buSopy3iS1s47py6u5l6pNbKObhh0ozY5iNUEMMZZHGCg9cD/u+iG+vVf9kKL/lEzBiQYJMCJ2NQjy0q6AJW0YU62L7iX8FAx/81QV11rAi9sx1faK6Dwz9qKvFryfiiXPG15WHM+4FX5eeRzx3Lfp1OxchXjLs+RSE3XpsIy6KnfWyovHq6Xsi3xNfa8+amxNjnp5NBrtglGQNHAbXNnIJGCV+2v8ZtveIOUdoTSq/dwzLsiB0il9/qs0KJIcq7RXaapxNT1DuDuQbonijNIuJszKa535UQimsLZdOAmd2KMbEX84MSC4CqTqm7OEdr1PcPbtob9AjcE+fnxRItH3Xw4UC0LAW7s/I2OHz/rbe/R2RSAgm0XmpLFdDYyIoyHuF9AfOjZgSjpl0q/S8EaXthAelh9iL6WduHbsWXBR6jWsU/fsuh5b6SXbGJnQVpQYNRsY9B0NEPDkZ3gb6/3qWwas75Aur199GJ9sknY94ck6OQl5Pa998EJ47zyxg8T2kLROyhE2tvXiYlhxbfw9Q2BTOJb1NPDxAyR9zfpo5pNShBfigxW7tpWGir9kofz95b3XW2QD4zWN2+qVqoA2dgeT5g9J1/v+PJ/yG8lSCkj6LdWDO0Iq9eeM2OSDaxVvr+oyIk/hIM+TV+pl44/hlTO5p7gVZ6HFF6NPkbSg7Gr3aecIGrAB+rCC+qhmW8u2HWh7+iuW1jXKxgKKdIOOAxCmLRNnEqlYO683pQwGFhX38x0OBEH0JxRaC8/RAtp+8ao2yrJ8x5DjHOf1Bu0bwUec+ibVZWr8vSE56dkGM5qw9S8e9x3JxMQONtWinYy8RQ291WSEE8H66CjkFT2/JjHA4pqAgU+bOJ6+fiGQY4Ar2vCKIzEdwCNhiHX5FJjE3X8v77NPryLi3qBU6qZHkI/tCgzU/ZvZIZ4vyE277tu+fGfp9FyIgrhCnBjn5EzVpx9pjU4guaZ2TrfCJFyVbdO4gVB7ps8IFp5UXd8DTiLzWq0Th1mzxRUHj9n7NO3dxLxeIBeFxdSK+zC4IzTb467dxsb0H3UHKZd0w2N1j1H+qMA/OK4Re50pMh4+qb3F+MDL1jbeYXfNCb0TiVHlXyUrN+c5gnJvqGr62ApemeqZhpFdBrXTaUJtrWVHkrVPaxJ6tWqtGfYvogyELuT4x3FrvK3Y9H8bNUtEKX2JbX9Vqn4U930auXvrgceR/DXJNZ9+a0iTnFL62B8Y0xk9MKLftX42ydg6BX0GMwmlLT/toMR1rdit8GtEX4N7Z7IlURsQI+stc/1NFRwmmNhO9f/75orq3BCpEHM42WkX0zaK1VwsJ+brOXqu0V69P3ng6FuQebgZL71zjquMUeKf5e7grxPLHqU4PgmSSNPbpWBShZJV1dXW1kZnYUUcmJSBmnTiNTIv7BQMjyzB1gj3U5AC+gq9lnDqyxpNVn3FcHMosy7HhgxqZpLvQNDAvrd+DFvaD+2xb4sQRMo6alz1Rw9KpvFAW/8t8Mlq64dsWoGndXYNsQ/dGcrKBIwa+i/pyXowdre3ReRpDbmVcG1dIEHvdVj9Y3Oxl9ny4bHxmP6JsFTNpadnIPHbjIC46p0ez4I50ROevMx/Ub/GdNDTd4R4zJUC+bg5g5LD7B/Pd1d4BuXRXkHeRYdMUFbRT9jMnfXzGiCflVeYWGBms+ffcODefROgodaf7fJIetrfXFjsbQ6VxBXjmfxQedhxWkJ5LwCOAiMqYPCoNmG/6jl9PGA/TF75wJ3cSyuhl/KvR7LSxqAlzvT9aZP8NTEDCQDBUB0b3mgYgDdXkFfTuXMlUGy16nE40tsFMP+vCS69JSGGrTqNnSKF+fYOxl76tOQIscf9ydjZeevv/eUhZOlDKBjyDRLRpvGQcbJy71wdH64uB31RXz5a08wJBvxw2/gnZhdQlv/8d4548tmglX4d3sPonjX0txEj+jQprL5AvtHQ2n5Mfe8ydb/YkWZ48pe16VVKG9WnEZbHm6ecA+synjmRJY6uEkmoBZLzb4U7i57nq7KDu2hqHj4t11YvxQeAJqzAchpJ3596EU83Qoj0qNhi4HKa+e946f1BdTM4oop/Xki4GWK5YfPt2MIEuphaoeuz7A48Ad29X1P1S0GNOd124J8BaYukiEaGzm/WPUu4KGlGXrUZ/bfUbYef8SPtojxgnzQ4kiOf2sgzdrDL+efI1Z071fWjFU/4zHPu8x8a9WUr4hfHQBSwY5v7mKIWoUFlvzMR58v+mtyhxUuoic28y+gDJQepPI95gz5QcbzZOgRSoXP5U9LNS7z/wkF9iBlBX2XjP+F8+Xi0d08rU5dmoGxnpQI5O/b9nP2xxsqKZSLNdNJJxZg54lkug9yrTBvtU1PRaXs+R1hjIS0ekq5RD1G7ayckKpHNK37E20ceqq6kY1Z1ZhCLbsVRZfNo4WjGqcjO4852dpZyzKznl1Gpdg1/ebwbWtAtIr8InUtV5w/AUDnUO4LrwuHwV7RJrR7b98LajjWxDOVqNhp2bj8imZFhAf4k+ZV/PhfgVyDVLGssro9fPp8xkykCXRckrUG/fYTxXgl8KmBTB0y7o1GFmkzKw2j3xxAuHAFPFAMd0l7eJFY4zASO8sM7wDemP+I0n7OmXoZZ41wS9d1wcVh2it0ZeH/jJvb0kHApTsZHOZt/oVrw/uj/TCpbIvOn0+Y8tfnviSzpcX/44p8PKmcyOP+lkudV8SNisP3ypGmIVFyPOQS8nEpurGak/dRbySW+v2nw2epbYt2kjnbifNJ+ukUBjxBvYE7/8+/L0Lotd1YFht3OHpLLkCqfsWdwg82/sk3eVbdizk/t6czjr6bHPfd+9wh9Qni0Z7jcuaFbsm7NAbjorJ1IHfzGyULZnJlRUT3tW6ES2t43bBKGhnsomgOV4y/YpeUjv3a02XZuy+xJ518uOP0c3gJgZ5hCQPYm9bvubvksZglToTL65d1EeqKqTTiPL+ulLxYnYcVcxKg2FcMxxVnDMALj4snlLD5Dv3oj2sqSvh4lpeZuAgbiXDCWubWqVJzCkEHw5xeEIw3zFQ4alka32Jt8Rd+zf7QqffvnaCe9Bujt3da6TgB3UlpqNLbmlPK8Exf7W1jr0rBC8IRYawoPSwDLoZ5DrAt2dvcED9RW0zUZ7VO9A+/n3bRo4v6Xdhv7sDh2+kdY4mOpWIeS7HifenlwLy+cnqlpB9mkRl+vK9yr4fsq+cS+XjDGv9tSXMpnIr34HDkbfbKZfnQ7OFRXY9i2KhZ2dUeMAfF3uKsCvj++QqNTA2CJNV202bDYQRfu50s0U/NuNO2PEa7WCSsITS1KmEK9oEARkRjAejAnGm5g/wH2Cs/76lspoHXNIyWMKNc/mDpOgSe+KeYMogfpZM6g/qmUpD1bA5zFyls5LJ6E7qQkX0bHIh+UP6Fr5dL2ECYTlhr6r2de6yeBwzjiEWes/L6SHRG3Pnu71gQ3f9Zt5lE72j/P+qwIpvZ5o8g3gA9zXrSwZZ68DGRNgqUomnPWXBtM8LY/VWWOSrKNfMYfHB8G28mWbVzJOJNAeqi7KFszfoQuQu5EnlFqpLClz+AW3EnYo5Fa/LHKDlFjHyPepx1jIG09unh4bxdcI+QM5YuLzdQVwBvvLtE/phVkVNc6QGDfPUD2OGMQTRRzLvakStWfc/O5e3nWnfCNEC6QZrW2vFauOIuRfyhDVbfgn0Lt5rpZ6t+ldVRD3vtrcyiNi5m4iL0dMVcmwhLlwoHCHsKKxvJ8t7kTv1Bdf3Zf6xmxS0rkB5ntPs71wnEnHSFWRNFq/Hvoi96OllxuXfqaUlnFnkk8aWtdMSloGhgFmmZSeaK7tSWT+xRLYSvvwwSd9+1sO+SxsrE1ttN/qkXrTavOWy6RhteyT9Lv0mvQzbg1h8pIS7Wc6jJKlaiUOLZcst2oJlGugPbDyXxyVkSyJlLfxHhUmFdekYJUiSc8g4ayZjwjOjhSE2/3ZuTY5v+ajF0DqGibvEqdk5mTIyhu7HmnDdRsTHYY/eWH6rTGLcDQTlHBWaRBhucvyKOJRl9iIymMkfwtLly7X7APg2QWvdlNLAslAVBDd0MU+mBEKLuDWRSG+SJR0t8rSkFYx9kxVjCHQq3OtCANQ7ZC+lirCeiOND6mLyYtKm69Y8wiTJW/SQnX/7mV4w5tblFm6N6loqO/eIfou+j06Jk/h5tsraVT1jZDJz/EqOXhmvw0rY/1Pk7hzoDwHm9SworV0NitqoSU3fOFk62Vqbj4zb1QU2LLZ1z483p+FTQRaHPGuFzBPRW0HQKahWlir76SjLQMNQwxJjpXrtHkM8a3is4mIJHz+h82in6eExuaMVHqlEz4uxQal9GYJrrCcHrSeToVJ/aZq0sRD9S5EOuDMkszsXoS5HD4WtC1P7vS6drHniNPkB3TVd23+0+ZIj+iP656EbYe3uEnZMR2d9XRLy15jbmIuYoZg5mFKMerJpUnzb2RcZ6OetT7Ka6LL7VryZM6NZ+RpjUv90NXw5SiTBW1N1WP2fBx6uM1jq/ssiN55ZYDLgvLx6oLmdPpp28iU5iHmZXuHunF4tqenG2QZXkPxuCpyc/Ij/h7u7vBoj2AVMwZV54fdI/QOdLjJa4H5i0OMKpMNgzZCKKSadO0Sagte/XUndJM3ln5xhkaDlwuOSmalhEAiE0sYYX7dWw5lhyT29lrrCTOZ6NI/FbV50FnBAr1Q2MzhrzVSknF+kZrtQOQ+1w/bFyR3jgD5BqWRvhv7LyhboMH1p30x1K+f9WK31peMjDFh5TdFuDx7U1+qm2Ar4j4bPngsindnmW3oxaLdGezrKBnQmCoFD9Y+/WyDhlGZZbnSxsK6fugnMRdRu4kJbwOIu+guM974DsbP6iv8xZNMrOv93u/z2olN2Rl+B0IwAV1YIJVGsXfwmT5Zh3xO22I7e8FrkVJT26ZR6Tlpta+myIBA+cotpS0t8NtE7TnxbFKWp80vQE3boABkAFCAsDQwU8OtPQPHd/RDopMFZI1J+vXcbthdjVol+IT5eWbv6can8tHxntntG8bz7xDfqYUzX3BKYYdAr8iIonvDrjrOM6NYc5Jf1E8UnWMZAwNwn9CE5XundaLzmeTU0/qnUnrslrqO+M5M1/kTxwH6/uOfpft/3eB+hRXajeQOJ3BXXRfL3+El4mBJzBTbSSJxR9IoubtAPH5lA3OcbC7m6YEmKqQR5oWfB6hz63NME1V6yqyS+pGjhdaFOqWVJoVfCjq4tdXNK10TLbeobSbzUsO/xyPTB6khibpx+AtKwQHXlx53ytcJ6qWJj7IO7nZFFeMV3YdKS5KovNN+SCxV7OTpjemtShaHhSpwj4/CK6gX1xvmG5ZXl6Ryzt+PTyT2xq6mrbDNYN9tJvcs4JFUI50iAJBQSXHaL4ieKGQs8jwVRh5/UNah0Jjxtft99bnc0s9J5GXNp+wL52ZxVSzpAPrWZb3xV3PqwmbgG7f02Z+N7A+La9rqd/EKvJ6sApyfGb7QtbKpYdiTbvtfCz/THROkceQnjoRcev4N2ZsFzvi+0XftKDP+L5Jub545MBraU5GsK6y3t/S7C+m+WnVkr4y0TAdHrB4p7fJIMq4kjo/d/3pw8cphH1XWNmI5N+zmHITdCvQzi7dISyKqODE7xZAfkjlntwj6I7mSJ0OTSQyWhC07D3zcPWB0ycorkBvGKF1DLAmIuPXxa9MGjsQxRMeEx5obneVh9/61mthH5+y0Wj4opcA98uj7ZRuRaI7PLM9JcmZJyBz43Oq9xr6dceVlsKr54v2jeiN5Y34DJVaDyg60rqr8yaMziZ884D6oNkOmB/3hFDeVrt0XAFmjrR+1Gmg/vlkwdEz14dEjohV4d8nr2ZcPkaQLJe4Y/kM6eFaNEJ1lUuCl+VhQteV54uXZ1wnoOsF+IalnX9KUGc19Ivb3ItyDf3Tw+j3wIf/zxrfkhNTrx9ophBHtddI8hL50qhiEpt7k6Zuqk0BXgF5E3SVyDXB9LePcfZTuK7+COSOSAyNj0PfhcOFUifXr3elfbClGbnJvSTjEaPlm0Yq4JXZGcErHpxavCn/dbkanugOiYVyBB7XBGuOE5shd2FC1SW4Qexx5zwnwkebdGZtZ3JnBFRMGAvS+E4OYid1eBqLx+wnkqwQhfPZhl2QAELPvT9AlYGyyEuvT9I7orN1dUZ4BvskIU/sf41ijNwbpDVyf5LvGuwkGGg5bm3+68
*/