//  Copyright Neil Groves 2009. Use, modification and
//  distribution is subject to the Boost Software License, Version
//  1.0. (See accompanying file LICENSE_1_0.txt or copy at
//  http://www.boost.org/LICENSE_1_0.txt)
//
//
// For more information, see http://www.boost.org/libs/range/
//
#ifndef BOOST_RANGE_ALGORITHM_FILL_N_HPP_INCLUDED
#define BOOST_RANGE_ALGORITHM_FILL_N_HPP_INCLUDED

#include <boost/assert.hpp>
#include <boost/concept_check.hpp>
#include <boost/range/begin.hpp>
#include <boost/range/end.hpp>
#include <boost/range/concepts.hpp>
#include <algorithm>

namespace boost
{
    namespace range
    {

/// \brief template function fill_n
///
/// range-based version of the fill_n std algorithm
///
/// \pre ForwardRange is a model of the ForwardRangeConcept
/// \pre n <= std::distance(boost::begin(rng), boost::end(rng))
template< class ForwardRange, class Size, class Value >
inline ForwardRange& fill_n(ForwardRange& rng, Size n, const Value& val)
{
    BOOST_RANGE_CONCEPT_ASSERT(( ForwardRangeConcept<ForwardRange> ));
    BOOST_ASSERT( static_cast<Size>(std::distance(boost::begin(rng), boost::end(rng))) >= n );
    std::fill_n(boost::begin(rng), n, val);
    return rng;
}

/// \overload
template< class ForwardRange, class Size, class Value >
inline const ForwardRange& fill_n(const ForwardRange& rng, Size n, const Value& val)
{
    BOOST_RANGE_CONCEPT_ASSERT(( ForwardRangeConcept<const ForwardRange> ));
    BOOST_ASSERT( static_cast<Size>(std::distance(boost::begin(rng), boost::end(rng))) >= n );
    std::fill_n(boost::begin(rng), n, val);
    return rng;
}

    } // namespace range
    using range::fill_n;
} // namespace boost

#endif // include guard

/* fill_n.hpp
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
*/