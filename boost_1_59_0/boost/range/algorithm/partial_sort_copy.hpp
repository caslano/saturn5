//  Copyright Neil Groves 2009. Use, modification and
//  distribution is subject to the Boost Software License, Version
//  1.0. (See accompanying file LICENSE_1_0.txt or copy at
//  http://www.boost.org/LICENSE_1_0.txt)
//
//
// For more information, see http://www.boost.org/libs/range/
//
#ifndef BOOST_RANGE_ALGORITHM_PARTIAL_SORT_COPY_HPP_INCLUDED
#define BOOST_RANGE_ALGORITHM_PARTIAL_SORT_COPY_HPP_INCLUDED

#include <boost/concept_check.hpp>
#include <boost/range/begin.hpp>
#include <boost/range/end.hpp>
#include <boost/range/concepts.hpp>
#include <boost/range/value_type.hpp>
#include <algorithm>

namespace boost
{
    namespace range
    {

/// \brief template function partial_sort_copy
///
/// range-based version of the partial_sort_copy std algorithm
///
/// \pre SinglePassRange is a model of the SinglePassRangeConcept
/// \pre RandomAccessRange is a model of the Mutable_RandomAccessRangeConcept
/// \pre BinaryPredicate is a model of the BinaryPredicateConcept
template<class SinglePassRange, class RandomAccessRange>
inline BOOST_DEDUCED_TYPENAME range_iterator<RandomAccessRange>::type
partial_sort_copy(const SinglePassRange& rng1, RandomAccessRange& rng2)
{
    BOOST_RANGE_CONCEPT_ASSERT((SinglePassRangeConcept<const SinglePassRange>));

    return std::partial_sort_copy(boost::begin(rng1), boost::end(rng1),
        boost::begin(rng2), boost::end(rng2));
}

/// \overload
template<class SinglePassRange, class RandomAccessRange>
inline BOOST_DEDUCED_TYPENAME range_iterator<RandomAccessRange>::type
partial_sort_copy(const SinglePassRange& rng1, const RandomAccessRange& rng2)
{
    BOOST_RANGE_CONCEPT_ASSERT((SinglePassRangeConcept<const SinglePassRange>));

    return std::partial_sort_copy(boost::begin(rng1), boost::end(rng1),
        boost::begin(rng2), boost::end(rng2));
}

/// \overload
template<class SinglePassRange, class RandomAccessRange,
         class BinaryPredicate>
inline BOOST_DEDUCED_TYPENAME range_iterator<RandomAccessRange>::type
partial_sort_copy(const SinglePassRange& rng1, RandomAccessRange& rng2,
    BinaryPredicate pred)
{
    BOOST_RANGE_CONCEPT_ASSERT((SinglePassRangeConcept<const SinglePassRange>));

    return std::partial_sort_copy(boost::begin(rng1), boost::end(rng1),
        boost::begin(rng2), boost::end(rng2), pred);
}

/// \overload
template<class SinglePassRange, class RandomAccessRange,
         class BinaryPredicate>
inline BOOST_DEDUCED_TYPENAME range_iterator<const RandomAccessRange>::type
partial_sort_copy(const SinglePassRange& rng1, const RandomAccessRange& rng2,
    BinaryPredicate pred)
{
    BOOST_RANGE_CONCEPT_ASSERT((SinglePassRangeConcept<const SinglePassRange>));

    return std::partial_sort_copy(boost::begin(rng1), boost::end(rng1),
        boost::begin(rng2), boost::end(rng2), pred);
}

    } // namespace range
    using range::partial_sort_copy;
} // namespace boost

#endif // include guard

/* partial_sort_copy.hpp
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
*/