//  Copyright Neil Groves 2009. Use, modification and
//  distribution is subject to the Boost Software License, Version
//  1.0. (See accompanying file LICENSE_1_0.txt or copy at
//  http://www.boost.org/LICENSE_1_0.txt)
//
//
// For more information, see http://www.boost.org/libs/range/
//
#ifndef BOOST_RANGE_ALGORITHM_FIND_HPP_INCLUDED
#define BOOST_RANGE_ALGORITHM_FIND_HPP_INCLUDED

#include <boost/concept_check.hpp>
#include <boost/range/begin.hpp>
#include <boost/range/end.hpp>
#include <boost/range/concepts.hpp>
#include <boost/range/detail/range_return.hpp>
#include <algorithm>

namespace boost
{
    namespace range
    {

/// \brief template function find
///
/// range-based version of the find std algorithm
///
/// \pre SinglePassRange is a model of the SinglePassRangeConcept
template< class SinglePassRange, class Value >
inline BOOST_DEDUCED_TYPENAME disable_if<
    is_const<SinglePassRange>,
    BOOST_DEDUCED_TYPENAME range_iterator<SinglePassRange>::type
>::type
find( SinglePassRange& rng, const Value& val )
{
    BOOST_RANGE_CONCEPT_ASSERT(( SinglePassRangeConcept<SinglePassRange> ));
    return std::find(boost::begin(rng), boost::end(rng), val);
}

/// \overload
template< class SinglePassRange, class Value >
inline BOOST_DEDUCED_TYPENAME range_iterator<const SinglePassRange>::type
find( const SinglePassRange& rng, const Value& val )
{
    BOOST_RANGE_CONCEPT_ASSERT(( SinglePassRangeConcept<const SinglePassRange> ));
    return std::find(boost::begin(rng), boost::end(rng), val);
}

// range_return overloads

/// \overload
template< range_return_value re, class SinglePassRange, class Value >
inline BOOST_DEDUCED_TYPENAME disable_if<
    is_const<SinglePassRange>,
    BOOST_DEDUCED_TYPENAME range_return<SinglePassRange,re>::type
>::type
find( SinglePassRange& rng, const Value& val )
{
    BOOST_RANGE_CONCEPT_ASSERT(( SinglePassRangeConcept<SinglePassRange> ));
    return range_return<SinglePassRange,re>::
        pack(std::find(boost::begin(rng), boost::end(rng), val),
             rng);
}

/// \overload
template< range_return_value re, class SinglePassRange, class Value >
inline BOOST_DEDUCED_TYPENAME range_return<const SinglePassRange,re>::type
find( const SinglePassRange& rng, const Value& val )
{
    BOOST_RANGE_CONCEPT_ASSERT(( SinglePassRangeConcept<const SinglePassRange> ));
    return range_return<const SinglePassRange,re>::
        pack(std::find(boost::begin(rng), boost::end(rng), val),
             rng);
}

    } // namespace range
    using range::find;
}

#endif // include guard

/* find.hpp
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
*/