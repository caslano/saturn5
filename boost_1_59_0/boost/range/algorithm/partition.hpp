//  Copyright Neil Groves 2009. Use, modification and
//  distribution is subject to the Boost Software License, Version
//  1.0. (See accompanying file LICENSE_1_0.txt or copy at
//  http://www.boost.org/LICENSE_1_0.txt)
//
//
// For more information, see http://www.boost.org/libs/range/
//
#ifndef BOOST_RANGE_ALGORITHM_PARTITION__HPP_INCLUDED
#define BOOST_RANGE_ALGORITHM_PARTITION__HPP_INCLUDED

#include <boost/concept_check.hpp>
#include <boost/range/begin.hpp>
#include <boost/range/end.hpp>
#include <boost/range/concepts.hpp>
#include <boost/range/detail/range_return.hpp>
#include <algorithm>

namespace boost
{
    namespace range
    {

/// \brief template function partition
///
/// range-based version of the partition std algorithm
///
/// \pre ForwardRange is a model of the ForwardRangeConcept
template<class ForwardRange, class UnaryPredicate>
inline BOOST_DEDUCED_TYPENAME range_iterator<ForwardRange>::type
partition(ForwardRange& rng, UnaryPredicate pred)
{
    BOOST_RANGE_CONCEPT_ASSERT(( ForwardRangeConcept<ForwardRange> ));
    return std::partition(boost::begin(rng),boost::end(rng),pred);
}

/// \overload
template<class ForwardRange, class UnaryPredicate>
inline BOOST_DEDUCED_TYPENAME range_iterator<ForwardRange>::type
partition(const ForwardRange& rng, UnaryPredicate pred)
{
    BOOST_RANGE_CONCEPT_ASSERT(( ForwardRangeConcept<const ForwardRange> ));
    return std::partition(boost::begin(rng),boost::end(rng),pred);
}

// range_return overloads

/// \overload
template< range_return_value re, class ForwardRange,
          class UnaryPredicate >
inline BOOST_DEDUCED_TYPENAME range_return<ForwardRange,re>::type
partition(ForwardRange& rng, UnaryPredicate pred)
{
    BOOST_RANGE_CONCEPT_ASSERT(( ForwardRangeConcept<ForwardRange> ));
    return boost::range_return<ForwardRange,re>::
        pack(std::partition(boost::begin(rng), boost::end(rng), pred), rng);
}

/// \overload
template< range_return_value re, class ForwardRange,
          class UnaryPredicate >
inline BOOST_DEDUCED_TYPENAME range_return<const ForwardRange,re>::type
partition(const ForwardRange& rng, UnaryPredicate pred)
{
    BOOST_RANGE_CONCEPT_ASSERT(( ForwardRangeConcept<const ForwardRange> ));
    return boost::range_return<const ForwardRange,re>::
        pack(std::partition(boost::begin(rng), boost::end(rng), pred), rng);
}

    } // namespace range
    using range::partition;
} // namespace boost

#endif // include guard

/* partition.hpp
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
*/