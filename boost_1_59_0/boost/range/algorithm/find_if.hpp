//  Copyright Neil Groves 2009. Use, modification and
//  distribution is subject to the Boost Software License, Version
//  1.0. (See accompanying file LICENSE_1_0.txt or copy at
//  http://www.boost.org/LICENSE_1_0.txt)
//
//
// For more information, see http://www.boost.org/libs/range/
//
#ifndef BOOST_RANGE_ALGORITHM_FIND_IF_HPP_INCLUDED
#define BOOST_RANGE_ALGORITHM_FIND_IF_HPP_INCLUDED

#include <boost/concept_check.hpp>
#include <boost/range/begin.hpp>
#include <boost/range/end.hpp>
#include <boost/range/concepts.hpp>
#include <boost/range/detail/range_return.hpp>
#include <algorithm>

namespace boost
{
    namespace range
    {

/// \brief template function find_if
///
/// range-based version of the find_if std algorithm
///
/// \pre SinglePassRange is a model of the SinglePassRangeConcept
/// \pre UnaryPredicate is a model of the UnaryPredicateConcept
template< class SinglePassRange, class UnaryPredicate >
inline BOOST_DEDUCED_TYPENAME disable_if<
    is_const<SinglePassRange>,
    BOOST_DEDUCED_TYPENAME range_iterator<SinglePassRange>::type
>::type
find_if( SinglePassRange& rng, UnaryPredicate pred )
{
    BOOST_RANGE_CONCEPT_ASSERT(( SinglePassRangeConcept<SinglePassRange> ));
    return std::find_if(boost::begin(rng), boost::end(rng), pred);
}

/// \overload
template< class SinglePassRange, class UnaryPredicate >
inline BOOST_DEDUCED_TYPENAME range_iterator<const SinglePassRange>::type
find_if( const SinglePassRange& rng, UnaryPredicate pred )
{
    BOOST_RANGE_CONCEPT_ASSERT(( SinglePassRangeConcept<const SinglePassRange> ));
    return std::find_if(boost::begin(rng), boost::end(rng), pred);
}

// range_return overloads

/// \overload
template< range_return_value re, class SinglePassRange, class UnaryPredicate >
inline BOOST_DEDUCED_TYPENAME disable_if<
    is_const<SinglePassRange>,
    BOOST_DEDUCED_TYPENAME range_return<SinglePassRange,re>::type
>::type
find_if( SinglePassRange& rng, UnaryPredicate pred )
{
    BOOST_RANGE_CONCEPT_ASSERT(( SinglePassRangeConcept<SinglePassRange> ));
    return range_return<SinglePassRange,re>::
        pack(std::find_if(boost::begin(rng), boost::end(rng), pred),
             rng);
}

/// \overload
template< range_return_value re, class SinglePassRange, class UnaryPredicate >
inline BOOST_DEDUCED_TYPENAME range_return<const SinglePassRange,re>::type
find_if( const SinglePassRange& rng, UnaryPredicate pred )
{
    BOOST_RANGE_CONCEPT_ASSERT(( SinglePassRangeConcept<const SinglePassRange> ));
    return range_return<const SinglePassRange,re>::
        pack(std::find_if(boost::begin(rng), boost::end(rng), pred),
             rng);
}

    } // namespace range
    using range::find_if;
} // namespace boost

#endif // include guard

/* find_if.hpp
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
*/