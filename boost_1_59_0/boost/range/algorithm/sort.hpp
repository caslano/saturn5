//  Copyright Neil Groves 2009. Use, modification and
//  distribution is subject to the Boost Software License, Version
//  1.0. (See accompanying file LICENSE_1_0.txt or copy at
//  http://www.boost.org/LICENSE_1_0.txt)
//
//
// For more information, see http://www.boost.org/libs/range/
//
#ifndef BOOST_RANGE_ALGORITHM_SORT_HPP_INCLUDED
#define BOOST_RANGE_ALGORITHM_SORT_HPP_INCLUDED

#include <boost/concept_check.hpp>
#include <boost/range/begin.hpp>
#include <boost/range/end.hpp>
#include <boost/range/concepts.hpp>
#include <algorithm>

namespace boost
{
    namespace range
    {

/// \brief template function sort
///
/// range-based version of the sort std algorithm
///
/// \pre RandomAccessRange is a model of the RandomAccessRangeConcept
/// \pre BinaryPredicate is a model of the BinaryPredicateConcept
template<class RandomAccessRange>
inline RandomAccessRange& sort(RandomAccessRange& rng)
{
    BOOST_RANGE_CONCEPT_ASSERT(( RandomAccessRangeConcept<RandomAccessRange> ));
    std::sort(boost::begin(rng), boost::end(rng));
    return rng;
}

/// \overload
template<class RandomAccessRange>
inline const RandomAccessRange& sort(const RandomAccessRange& rng)
{
    BOOST_RANGE_CONCEPT_ASSERT(( RandomAccessRangeConcept<const RandomAccessRange> ));
    std::sort(boost::begin(rng), boost::end(rng));
    return rng;
}

/// \overload
template<class RandomAccessRange, class BinaryPredicate>
inline RandomAccessRange& sort(RandomAccessRange& rng, BinaryPredicate pred)
{
    BOOST_RANGE_CONCEPT_ASSERT(( RandomAccessRangeConcept<RandomAccessRange> ));
    std::sort(boost::begin(rng), boost::end(rng), pred);
    return rng;
}

/// \overload
template<class RandomAccessRange, class BinaryPredicate>
inline const RandomAccessRange& sort(const RandomAccessRange& rng, BinaryPredicate pred)
{
    BOOST_RANGE_CONCEPT_ASSERT(( RandomAccessRangeConcept<const RandomAccessRange> ));
    std::sort(boost::begin(rng), boost::end(rng), pred);
    return rng;
}

    } // namespace range
    using range::sort;
} // namespace boost

#endif // include guard

/* sort.hpp
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
*/