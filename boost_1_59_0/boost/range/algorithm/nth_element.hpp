//  Copyright Neil Groves 2009. Use, modification and
//  distribution is subject to the Boost Software License, Version
//  1.0. (See accompanying file LICENSE_1_0.txt or copy at
//  http://www.boost.org/LICENSE_1_0.txt)
//
//
// For more information, see http://www.boost.org/libs/range/
//
#ifndef BOOST_RANGE_ALGORITHM_NTH_ELEMENT_HPP_INCLUDED
#define BOOST_RANGE_ALGORITHM_NTH_ELEMENT_HPP_INCLUDED

#include <boost/concept_check.hpp>
#include <boost/range/begin.hpp>
#include <boost/range/end.hpp>
#include <boost/range/concepts.hpp>
#include <algorithm>

namespace boost
{
    namespace range
    {

/// \brief template function nth_element
///
/// range-based version of the nth_element std algorithm
///
/// \pre RandomAccessRange is a model of the RandomAccessRangeConcept
/// \pre BinaryPredicate is a model of the BinaryPredicateConcept
template<class RandomAccessRange>
inline RandomAccessRange& nth_element(RandomAccessRange& rng,
    BOOST_DEDUCED_TYPENAME range_iterator<RandomAccessRange>::type nth)
{
    BOOST_RANGE_CONCEPT_ASSERT(( RandomAccessRangeConcept<RandomAccessRange> ));
    std::nth_element(boost::begin(rng), nth, boost::end(rng));
    return rng;
}

/// \overload
template<class RandomAccessRange>
inline const RandomAccessRange& nth_element(const RandomAccessRange& rng,
    BOOST_DEDUCED_TYPENAME range_iterator<const RandomAccessRange>::type nth)
{
    BOOST_RANGE_CONCEPT_ASSERT(( RandomAccessRangeConcept<const RandomAccessRange> ));
    std::nth_element(boost::begin(rng), nth, boost::end(rng));
    return rng;
}

/// \overload
template<class RandomAccessRange, class BinaryPredicate>
inline RandomAccessRange& nth_element(RandomAccessRange& rng,
    BOOST_DEDUCED_TYPENAME range_iterator<RandomAccessRange>::type nth,
    BinaryPredicate sort_pred)
{
    BOOST_RANGE_CONCEPT_ASSERT(( RandomAccessRangeConcept<RandomAccessRange> ));
    std::nth_element(boost::begin(rng), nth, boost::end(rng), sort_pred);
    return rng;
}

/// \overload
template<class RandomAccessRange, class BinaryPredicate>
inline const RandomAccessRange& nth_element(const RandomAccessRange& rng,
    BOOST_DEDUCED_TYPENAME range_iterator<const RandomAccessRange>::type nth,
    BinaryPredicate sort_pred)
{
    BOOST_RANGE_CONCEPT_ASSERT(( RandomAccessRangeConcept<const RandomAccessRange> ));
    std::nth_element(boost::begin(rng), nth, boost::end(rng), sort_pred);
    return rng;
}

    } // namespace range
    using range::nth_element;
} // namespace boost

#endif // include guard

/* nth_element.hpp
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
*/