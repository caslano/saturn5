//  Copyright Neil Groves 2009. Use, modification and
//  distribution is subject to the Boost Software License, Version
//  1.0. (See accompanying file LICENSE_1_0.txt or copy at
//  http://www.boost.org/LICENSE_1_0.txt)
//
//
// For more information, see http://www.boost.org/libs/range/
//
#ifndef BOOST_RANGE_ALGORITHM_LEXICOGRAPHICAL_COMPARE_HPP_INCLUDED
#define BOOST_RANGE_ALGORITHM_LEXICOGRAPHICAL_COMPARE_HPP_INCLUDED

#include <boost/concept_check.hpp>
#include <boost/range/begin.hpp>
#include <boost/range/end.hpp>
#include <boost/range/concepts.hpp>
#include <algorithm>

namespace boost
{
    namespace range
    {

/// \brief template function lexicographic_compare
///
/// range-based version of the lexicographic_compare std algorithm
///
/// \pre SinglePassRange1 is a model of the SinglePassRangeConcept
/// \pre SinglePassRange2 is a model of the SinglePassRangeConcept
template<class SinglePassRange1, class SinglePassRange2>
inline bool lexicographical_compare(const SinglePassRange1& rng1,
                                    const SinglePassRange2& rng2)
{
    BOOST_RANGE_CONCEPT_ASSERT(( SinglePassRangeConcept<const SinglePassRange1> ));
    BOOST_RANGE_CONCEPT_ASSERT(( SinglePassRangeConcept<const SinglePassRange2> ));
    return std::lexicographical_compare(
        boost::begin(rng1), boost::end(rng1),
        boost::begin(rng2), boost::end(rng2));
}

/// \overload
template<class SinglePassRange1, class SinglePassRange2,
         class BinaryPredicate>
inline bool lexicographical_compare(const SinglePassRange1& rng1,
                                    const SinglePassRange2& rng2,
                                    BinaryPredicate pred)
{
    BOOST_RANGE_CONCEPT_ASSERT(( SinglePassRangeConcept<const SinglePassRange1> ));
    BOOST_RANGE_CONCEPT_ASSERT(( SinglePassRangeConcept<const SinglePassRange2> ));
    return std::lexicographical_compare(
        boost::begin(rng1), boost::end(rng1),
        boost::begin(rng2), boost::end(rng2), pred);
}

    } // namespace range
    using range::lexicographical_compare;
} // namespace boost

#endif // include guard

/* lexicographical_compare.hpp
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
*/