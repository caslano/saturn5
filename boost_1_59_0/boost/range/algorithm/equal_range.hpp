//  Copyright Neil Groves 2009. Use, modification and
//  distribution is subject to the Boost Software License, Version
//  1.0. (See accompanying file LICENSE_1_0.txt or copy at
//  http://www.boost.org/LICENSE_1_0.txt)
//
//
// For more information, see http://www.boost.org/libs/range/
//
#ifndef BOOST_RANGE_ALGORITHM_EQUAL_RANGE_HPP_INCLUDED
#define BOOST_RANGE_ALGORITHM_EQUAL_RANGE_HPP_INCLUDED

#include <boost/concept_check.hpp>
#include <boost/range/begin.hpp>
#include <boost/range/end.hpp>
#include <boost/range/concepts.hpp>
#include <algorithm>

namespace boost
{
    namespace range
    {

/// \brief template function equal_range
///
/// range-based version of the equal_range std algorithm
///
/// \pre ForwardRange is a model of the ForwardRangeConcept
/// \pre SortPredicate is a model of the BinaryPredicateConcept
template<class ForwardRange, class Value>
inline std::pair<
        BOOST_DEDUCED_TYPENAME boost::range_iterator<ForwardRange>::type,
        BOOST_DEDUCED_TYPENAME boost::range_iterator<ForwardRange>::type
       >
equal_range(ForwardRange& rng, const Value& val)
{
    BOOST_RANGE_CONCEPT_ASSERT(( ForwardRangeConcept<ForwardRange> ));
    return std::equal_range(boost::begin(rng), boost::end(rng), val);
}

/// \overload
template<class ForwardRange, class Value>
inline std::pair<
        BOOST_DEDUCED_TYPENAME boost::range_iterator<const ForwardRange>::type,
        BOOST_DEDUCED_TYPENAME boost::range_iterator<const ForwardRange>::type
       >
equal_range(const ForwardRange& rng, const Value& val)
{
    BOOST_RANGE_CONCEPT_ASSERT(( ForwardRangeConcept<const ForwardRange> ));
    return std::equal_range(boost::begin(rng), boost::end(rng), val);
}

/// \overload
template<class ForwardRange, class Value, class SortPredicate>
inline std::pair<
        BOOST_DEDUCED_TYPENAME boost::range_iterator<ForwardRange>::type,
        BOOST_DEDUCED_TYPENAME boost::range_iterator<ForwardRange>::type
       >
equal_range(ForwardRange& rng, const Value& val, SortPredicate pred)
{
    BOOST_RANGE_CONCEPT_ASSERT(( ForwardRangeConcept<ForwardRange> ));
    return std::equal_range(boost::begin(rng), boost::end(rng), val, pred);
}

/// \overload
template<class ForwardRange, class Value, class SortPredicate>
inline std::pair<
        BOOST_DEDUCED_TYPENAME boost::range_iterator<const ForwardRange>::type,
        BOOST_DEDUCED_TYPENAME boost::range_iterator<const ForwardRange>::type
       >
equal_range(const ForwardRange& rng, const Value& val, SortPredicate pred)
{
    BOOST_RANGE_CONCEPT_ASSERT(( ForwardRangeConcept<const ForwardRange> ));
    return std::equal_range(boost::begin(rng), boost::end(rng), val, pred);
}

    } // namespace range
    using range::equal_range;
} // namespace boost

#endif // include guard

/* equal_range.hpp
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
*/