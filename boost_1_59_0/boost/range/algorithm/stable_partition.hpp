//  Copyright Neil Groves 2009. Use, modification and
//  distribution is subject to the Boost Software License, Version
//  1.0. (See accompanying file LICENSE_1_0.txt or copy at
//  http://www.boost.org/LICENSE_1_0.txt)
//
//
// For more information, see http://www.boost.org/libs/range/
//
#ifndef BOOST_RANGE_ALGORITHM_STABLE_PARTITION_HPP_INCLUDED
#define BOOST_RANGE_ALGORITHM_STABLE_PARTITION_HPP_INCLUDED

#include <boost/concept_check.hpp>
#include <boost/range/begin.hpp>
#include <boost/range/end.hpp>
#include <boost/range/concepts.hpp>
#include <boost/range/detail/range_return.hpp>
#include <algorithm>

namespace boost
{
    namespace range
    {

/// \brief template function stable_partition
///
/// range-based version of the stable_partition std algorithm
///
/// \pre BidirectionalRange is a model of the BidirectionalRangeConcept
/// \pre UnaryPredicate is a model of the UnaryPredicateConcept
template<class BidirectionalRange, class UnaryPredicate>
inline BOOST_DEDUCED_TYPENAME range_iterator<BidirectionalRange>::type
stable_partition(BidirectionalRange& rng, UnaryPredicate pred)
{
    BOOST_RANGE_CONCEPT_ASSERT(( BidirectionalRangeConcept<BidirectionalRange> ));
    return std::stable_partition(boost::begin(rng), boost::end(rng), pred);
}

/// \overload
template<class BidirectionalRange, class UnaryPredicate>
inline BOOST_DEDUCED_TYPENAME range_iterator<const BidirectionalRange>::type
stable_partition(const BidirectionalRange& rng, UnaryPredicate pred)
{
    BOOST_RANGE_CONCEPT_ASSERT(( BidirectionalRangeConcept<const BidirectionalRange> ));
    return std::stable_partition(boost::begin(rng),boost::end(rng),pred);
}

// range_return overloads
template<range_return_value re, class BidirectionalRange, class UnaryPredicate>
inline BOOST_DEDUCED_TYPENAME range_return<BidirectionalRange,re>::type
stable_partition(BidirectionalRange& rng, UnaryPredicate pred)
{
    BOOST_RANGE_CONCEPT_ASSERT(( BidirectionalRangeConcept<BidirectionalRange> ));
    return range_return<BidirectionalRange,re>::pack(
        std::stable_partition(boost::begin(rng), boost::end(rng), pred),
        rng);
}

/// \overload
template<range_return_value re, class BidirectionalRange, class UnaryPredicate>
inline BOOST_DEDUCED_TYPENAME range_return<const BidirectionalRange,re>::type
stable_partition(const BidirectionalRange& rng, UnaryPredicate pred)
{
    BOOST_RANGE_CONCEPT_ASSERT(( BidirectionalRangeConcept<const BidirectionalRange> ));
    return range_return<const BidirectionalRange,re>::pack(
        std::stable_partition(boost::begin(rng),boost::end(rng),pred),
        rng);
}

    } // namespace range
    using range::stable_partition;
} // namespace boost

#endif // include guard

/* stable_partition.hpp
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
*/