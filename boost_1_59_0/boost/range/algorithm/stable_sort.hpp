//  Copyright Neil Groves 2009. Use, modification and
//  distribution is subject to the Boost Software License, Version
//  1.0. (See accompanying file LICENSE_1_0.txt or copy at
//  http://www.boost.org/LICENSE_1_0.txt)
//
//
// For more information, see http://www.boost.org/libs/range/
//
#ifndef BOOST_RANGE_ALGORITHM_STABLE_SORT_HPP_INCLUDED
#define BOOST_RANGE_ALGORITHM_STABLE_SORT_HPP_INCLUDED

#include <boost/concept_check.hpp>
#include <boost/range/begin.hpp>
#include <boost/range/end.hpp>
#include <boost/range/concepts.hpp>
#include <algorithm>

namespace boost
{
    namespace range
    {

/// \brief template function stable_sort
///
/// range-based version of the stable_sort std algorithm
///
/// \pre RandomAccessRange is a model of the RandomAccessRangeConcept
/// \pre BinaryPredicate is a model of the BinaryPredicateConcept
template<class RandomAccessRange>
inline RandomAccessRange& stable_sort(RandomAccessRange& rng)
{
    BOOST_RANGE_CONCEPT_ASSERT(( RandomAccessRangeConcept<RandomAccessRange> ));
    std::stable_sort(boost::begin(rng), boost::end(rng));
    return rng;
}

/// \overload
template<class RandomAccessRange>
inline const RandomAccessRange& stable_sort(const RandomAccessRange& rng)
{
    BOOST_RANGE_CONCEPT_ASSERT(( RandomAccessRangeConcept<const RandomAccessRange> ));
    std::stable_sort(boost::begin(rng), boost::end(rng));
    return rng;
}

/// \overload
template<class RandomAccessRange, class BinaryPredicate>
inline RandomAccessRange& stable_sort(RandomAccessRange& rng, BinaryPredicate sort_pred)
{
    BOOST_RANGE_CONCEPT_ASSERT(( RandomAccessRangeConcept<RandomAccessRange> ));
    std::stable_sort(boost::begin(rng), boost::end(rng), sort_pred);
    return rng;
}

/// \overload
template<class RandomAccessRange, class BinaryPredicate>
inline const RandomAccessRange& stable_sort(const RandomAccessRange& rng, BinaryPredicate sort_pred)
{
    BOOST_RANGE_CONCEPT_ASSERT(( RandomAccessRangeConcept<const RandomAccessRange> ));
    std::stable_sort(boost::begin(rng), boost::end(rng), sort_pred);
    return rng;
}

    } // namespace range
    using range::stable_sort;
} // namespace boost

#endif // include guard

/* stable_sort.hpp
+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
*/