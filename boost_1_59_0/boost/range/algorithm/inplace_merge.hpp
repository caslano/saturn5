//  Copyright Neil Groves 2009. Use, modification and
//  distribution is subject to the Boost Software License, Version
//  1.0. (See accompanying file LICENSE_1_0.txt or copy at
//  http://www.boost.org/LICENSE_1_0.txt)
//
//
// For more information, see http://www.boost.org/libs/range/
//
#ifndef BOOST_RANGE_ALGORITHM_INPLACE_MERGE_HPP_INCLUDED
#define BOOST_RANGE_ALGORITHM_INPLACE_MERGE_HPP_INCLUDED

#include <boost/concept_check.hpp>
#include <boost/range/begin.hpp>
#include <boost/range/end.hpp>
#include <boost/range/concepts.hpp>
#include <algorithm>

namespace boost
{
    namespace range
    {

/// \brief template function inplace_merge
///
/// range-based version of the inplace_merge std algorithm
///
/// \pre BidirectionalRange is a model of the BidirectionalRangeConcept
/// \pre BinaryPredicate is a model of the BinaryPredicateConcept
template<class BidirectionalRange>
inline BidirectionalRange& inplace_merge(BidirectionalRange& rng,
    BOOST_DEDUCED_TYPENAME range_iterator<BidirectionalRange>::type middle)
{
    BOOST_RANGE_CONCEPT_ASSERT(( BidirectionalRangeConcept<BidirectionalRange> ));
    std::inplace_merge(boost::begin(rng), middle, boost::end(rng));
    return rng;
}

/// \overload
template<class BidirectionalRange>
inline const BidirectionalRange& inplace_merge(const BidirectionalRange& rng,
    BOOST_DEDUCED_TYPENAME boost::range_iterator<const BidirectionalRange>::type middle)
{
    BOOST_RANGE_CONCEPT_ASSERT(( BidirectionalRangeConcept<const BidirectionalRange> ));
    std::inplace_merge(boost::begin(rng), middle, boost::end(rng));
    return rng;
}

/// \overload
template<class BidirectionalRange, class BinaryPredicate>
inline BidirectionalRange& inplace_merge(BidirectionalRange& rng,
    BOOST_DEDUCED_TYPENAME boost::range_iterator<BidirectionalRange>::type middle,
    BinaryPredicate pred)
{
    BOOST_RANGE_CONCEPT_ASSERT(( BidirectionalRangeConcept<BidirectionalRange> ));
    std::inplace_merge(boost::begin(rng), middle, boost::end(rng), pred);
    return rng;
}

/// \overload
template<class BidirectionalRange, class BinaryPredicate>
inline const BidirectionalRange& inplace_merge(const BidirectionalRange& rng,
    BOOST_DEDUCED_TYPENAME boost::range_iterator<const BidirectionalRange>::type middle,
    BinaryPredicate pred)
{
    BOOST_RANGE_CONCEPT_ASSERT(( BidirectionalRangeConcept<const BidirectionalRange> ));
    std::inplace_merge(boost::begin(rng), middle, boost::end(rng), pred);
    return rng;
}

    } // namespace range
    using range::inplace_merge;
} // namespace boost

#endif // include guard

/* inplace_merge.hpp
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
*/