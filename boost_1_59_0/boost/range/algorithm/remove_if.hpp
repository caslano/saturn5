//  Copyright Neil Groves 2009. Use, modification and
//  distribution is subject to the Boost Software License, Version
//  1.0. (See accompanying file LICENSE_1_0.txt or copy at
//  http://www.boost.org/LICENSE_1_0.txt)
//
//
// For more information, see http://www.boost.org/libs/range/
//
#ifndef BOOST_RANGE_ALGORITHM_REMOVE_IF_HPP_INCLUDED
#define BOOST_RANGE_ALGORITHM_REMOVE_IF_HPP_INCLUDED

#include <boost/concept_check.hpp>
#include <boost/range/begin.hpp>
#include <boost/range/end.hpp>
#include <boost/range/concepts.hpp>
#include <boost/range/detail/range_return.hpp>
#include <algorithm>

namespace boost
{
    namespace range
    {

/// \brief template function remove_if
///
/// range-based version of the remove_if std algorithm
///
/// \pre ForwardRange is a model of the ForwardRangeConcept
/// \pre UnaryPredicate is a model of the UnaryPredicateConcept
template< class ForwardRange, class UnaryPredicate >
inline BOOST_DEDUCED_TYPENAME boost::range_iterator<ForwardRange>::type
remove_if(ForwardRange& rng, UnaryPredicate pred)
{
    BOOST_RANGE_CONCEPT_ASSERT(( ForwardRangeConcept<ForwardRange> ));
    return std::remove_if(boost::begin(rng), boost::end(rng), pred);
}

/// \overload
template< class ForwardRange, class UnaryPredicate >
inline BOOST_DEDUCED_TYPENAME boost::range_iterator<const ForwardRange>::type
remove_if(const ForwardRange& rng, UnaryPredicate pred)
{
    BOOST_RANGE_CONCEPT_ASSERT(( ForwardRangeConcept<const ForwardRange> ));
    return std::remove_if(boost::begin(rng), boost::end(rng), pred);
}

// range_return overloads

/// \overload
template< range_return_value re, class ForwardRange, class UnaryPredicate >
inline BOOST_DEDUCED_TYPENAME range_return<ForwardRange,re>::type
remove_if(ForwardRange& rng, UnaryPredicate pred)
{
    BOOST_RANGE_CONCEPT_ASSERT(( ForwardRangeConcept<ForwardRange> ));
    return range_return<ForwardRange,re>::pack(
        std::remove_if(boost::begin(rng), boost::end(rng), pred),
        rng);
}

/// \overload
template< range_return_value re, class ForwardRange, class UnaryPredicate >
inline BOOST_DEDUCED_TYPENAME range_return<const ForwardRange,re>::type
remove_if(const ForwardRange& rng, UnaryPredicate pred)
{
    BOOST_RANGE_CONCEPT_ASSERT(( ForwardRangeConcept<const ForwardRange> ));
    return range_return<const ForwardRange,re>::pack(
        std::remove_if(boost::begin(rng), boost::end(rng), pred),
        rng);
}

    } // namespace range
    using range::remove_if;
} // namespace boost

#endif // include guard

/* remove_if.hpp
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
*/