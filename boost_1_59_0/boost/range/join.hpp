// Boost.Range library
//
//  Copyright Neil Groves 2009. Use, modification and
//  distribution is subject to the Boost Software License, Version
//  1.0. (See accompanying file LICENSE_1_0.txt or copy at
//  http://www.boost.org/LICENSE_1_0.txt)
//
//
// For more information, see http://www.boost.org/libs/range/
//
#ifndef BOOST_RANGE_JOIN_HPP_INCLUDED
#define BOOST_RANGE_JOIN_HPP_INCLUDED

#include <boost/config.hpp>
#include <boost/range/detail/join_iterator.hpp>
#include <boost/range/concepts.hpp>
#include <boost/range/iterator_range.hpp>

namespace boost
{
    namespace range_detail
    {

template<class SinglePassRange1, class SinglePassRange2>
class joined_type
{
public:
    typedef iterator_range<
        range_detail::join_iterator<
            BOOST_DEDUCED_TYPENAME range_iterator<SinglePassRange1>::type,
            BOOST_DEDUCED_TYPENAME range_iterator<SinglePassRange2>::type,
            BOOST_DEDUCED_TYPENAME range_value<SinglePassRange1>::type
        >
    > type;
};

    } // namespace range_detail

namespace range
{

template<class SinglePassRange1, class SinglePassRange2>
class joined_range
    : public range_detail::joined_type<SinglePassRange1, SinglePassRange2>::type
{
    typedef range_detail::join_iterator<
        BOOST_DEDUCED_TYPENAME range_iterator<SinglePassRange1>::type,
        BOOST_DEDUCED_TYPENAME range_iterator<SinglePassRange2>::type,
        BOOST_DEDUCED_TYPENAME range_value<SinglePassRange1>::type
        > iterator_t;

    typedef BOOST_DEDUCED_TYPENAME range_detail::joined_type<
                    SinglePassRange1, SinglePassRange2>::type base_t;
public:
    joined_range(SinglePassRange1& rng1, SinglePassRange2& rng2)
        : base_t(
            iterator_t(rng1, rng2, range_detail::join_iterator_begin_tag()),
            iterator_t(rng1, rng2, range_detail::join_iterator_end_tag())
        )
    {
    }
};

template<class SinglePassRange1, class SinglePassRange2>
joined_range<const SinglePassRange1, const SinglePassRange2>
join(const SinglePassRange1& r1, const SinglePassRange2& r2)
{
    BOOST_RANGE_CONCEPT_ASSERT(( SinglePassRangeConcept<SinglePassRange1> ));
    BOOST_RANGE_CONCEPT_ASSERT(( SinglePassRangeConcept<SinglePassRange2> ));

    return joined_range<const SinglePassRange1, const SinglePassRange2>(r1, r2);
}

template<class SinglePassRange1, class SinglePassRange2>
joined_range<SinglePassRange1, SinglePassRange2>
join(SinglePassRange1& r1, SinglePassRange2& r2)
{
    BOOST_RANGE_CONCEPT_ASSERT(( SinglePassRangeConcept<SinglePassRange1> ));
    BOOST_RANGE_CONCEPT_ASSERT(( SinglePassRangeConcept<SinglePassRange2> ));

    return joined_range<SinglePassRange1, SinglePassRange2>(r1, r2);
}

} // namespace range

using ::boost::range::joined_range;
using ::boost::range::join;

} // namespace boost

#endif // include guard

/* join.hpp
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
*/