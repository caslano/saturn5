// Copyright 2018 Hans Dembinski
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt
// or copy at http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_HISTOGRAM_MAKE_PROFILE_HPP
#define BOOST_HISTOGRAM_MAKE_PROFILE_HPP

#include <boost/histogram/accumulators/mean.hpp>
#include <boost/histogram/accumulators/weighted_mean.hpp>
#include <boost/histogram/fwd.hpp>
#include <boost/histogram/make_histogram.hpp>

/**
  \file boost/histogram/make_profile.hpp
  Collection of factory functions to conveniently create profiles.

  Profiles are histograms which accept an additional sample and compute the mean of the
  sample in each cell.
*/

namespace boost {
namespace histogram {

/**
  Make profle from compile-time axis configuration.
  @param axis First axis instance.
  @param axes Other axis instances.
*/
template <class Axis, class... Axes, class = detail::requires_axis<Axis>>
auto make_profile(Axis&& axis, Axes&&... axes) {
  return make_histogram_with(profile_storage(), std::forward<Axis>(axis),
                             std::forward<Axes>(axes)...);
}

/**
  Make profle from compile-time axis configuration which accepts weights.
  @param axis First axis instance.
  @param axes Other axis instances.
*/
template <class Axis, class... Axes, class = detail::requires_axis<Axis>>
auto make_weighted_profile(Axis&& axis, Axes&&... axes) {
  return make_histogram_with(weighted_profile_storage(), std::forward<Axis>(axis),
                             std::forward<Axes>(axes)...);
}

/**
  Make profile from iterable range.
  @param iterable Iterable range of axis objects.
*/
template <class Iterable, class = detail::requires_sequence_of_any_axis<Iterable>>
auto make_profile(Iterable&& iterable) {
  return make_histogram_with(profile_storage(), std::forward<Iterable>(iterable));
}

/**
  Make profile from iterable range which accepts weights.
  @param iterable Iterable range of axis objects.
*/
template <class Iterable, class = detail::requires_sequence_of_any_axis<Iterable>>
auto make_weighted_profile(Iterable&& iterable) {
  return make_histogram_with(weighted_profile_storage(),
                             std::forward<Iterable>(iterable));
}

/**
  Make profile from iterator interval.
  @param begin Iterator to range of axis objects.
  @param end   Iterator to range of axis objects.
*/
template <class Iterator, class = detail::requires_iterator<Iterator>>
auto make_profile(Iterator begin, Iterator end) {
  return make_histogram_with(profile_storage(), begin, end);
}

/**
  Make profile from iterator interval which accepts weights.
  @param begin Iterator to range of axis objects.
  @param end   Iterator to range of axis objects.
*/
template <class Iterator, class = detail::requires_iterator<Iterator>>
auto make_weighted_profile(Iterator begin, Iterator end) {
  return make_histogram_with(weighted_profile_storage(), begin, end);
}

} // namespace histogram
} // namespace boost

#endif

/* make_profile.hpp
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
*/