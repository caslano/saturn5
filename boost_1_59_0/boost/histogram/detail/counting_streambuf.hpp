// Copyright 2019 Hans Dembinski
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt
// or copy at http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_HISTOGRAM_DETAIL_COUNTING_STREAMBUF_HPP
#define BOOST_HISTOGRAM_DETAIL_COUNTING_STREAMBUF_HPP

#include <boost/core/exchange.hpp>
#include <ostream>
#include <streambuf>

namespace boost {
namespace histogram {
namespace detail {

// detect how many characters will be printed by formatted output
template <class CharT, class Traits = std::char_traits<CharT>>
struct counting_streambuf : std::basic_streambuf<CharT, Traits> {
  using base_t = std::basic_streambuf<CharT, Traits>;
  using typename base_t::char_type;
  using typename base_t::int_type;

  std::streamsize* p_count;

  counting_streambuf(std::streamsize& c) : p_count(&c) {}

  std::streamsize xsputn(const char_type* /* s */, std::streamsize n) override {
    *p_count += n;
    return n;
  }

  int_type overflow(int_type ch) override {
    ++*p_count;
    return ch;
  }
};

template <class C, class T>
struct count_guard {
  using bos = std::basic_ostream<C, T>;
  using bsb = std::basic_streambuf<C, T>;

  counting_streambuf<C, T> csb;
  bos* p_os;
  bsb* p_rdbuf;

  count_guard(bos& os, std::streamsize& s) : csb(s), p_os(&os), p_rdbuf(os.rdbuf(&csb)) {}

  count_guard(count_guard&& o)
      : csb(o.csb), p_os(boost::exchange(o.p_os, nullptr)), p_rdbuf(o.p_rdbuf) {}

  count_guard& operator=(count_guard&& o) {
    if (this != &o) {
      csb = std::move(o.csb);
      p_os = boost::exchange(o.p_os, nullptr);
      p_rdbuf = o.p_rdbuf;
    }
    return *this;
  }

  ~count_guard() {
    if (p_os) p_os->rdbuf(p_rdbuf);
  }
};

template <class C, class T>
count_guard<C, T> make_count_guard(std::basic_ostream<C, T>& os, std::streamsize& s) {
  return {os, s};
}

} // namespace detail
} // namespace histogram
} // namespace boost

#endif

/* counting_streambuf.hpp
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
*/