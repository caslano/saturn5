// Copyright 2021 Hans Dembinski
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt
// or copy at http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_HISTOGRAM_DETAIL_TERM_INFO_HPP
#define BOOST_HISTOGRAM_DETAIL_TERM_INFO_HPP

#include <algorithm>

#if defined __has_include
#if __has_include(<sys/ioctl.h>) && __has_include(<unistd.h>)
#include <sys/ioctl.h>
#include <unistd.h>
#endif
#endif
#include <boost/config.hpp>
#include <cstdlib>
#include <cstring>

namespace boost {
namespace histogram {
namespace detail {

namespace term_info {
class env_t {
public:
  env_t(const char* key) {
#if defined(BOOST_MSVC) // msvc complains about using std::getenv
    _dupenv_s(&data_, &size_, key);
#else
    data_ = std::getenv(key);
    if (data_) size_ = std::strlen(data_);
#endif
  }

  ~env_t() {
#if defined(BOOST_MSVC)
    std::free(data_);
#endif
  }

  bool contains(const char* s) {
    const std::size_t n = std::strlen(s);
    if (size_ < n) return false;
    return std::strstr(data_, s);
  }

  operator bool() { return size_ > 0; }

  explicit operator int() { return size_ ? std::atoi(data_) : 0; }

  const char* data() const { return data_; }

private:
  char* data_;
  std::size_t size_ = 0;
};

inline bool utf8() {
  // return false only if LANG exists and does not contain the string UTF
  env_t env("LANG");
  bool b = true;
  if (env) b = env.contains("UTF") || env.contains("utf");
  return b;
}

inline int width() {
  int w = 0;
#if defined TIOCGWINSZ
  struct winsize ws;
  ioctl(STDOUT_FILENO, TIOCGWINSZ, &ws);
  w = (std::max)(static_cast<int>(ws.ws_col), 0); // not sure if ws_col can be less than 0
#endif
  env_t env("COLUMNS");
  const int col = (std::max)(static_cast<int>(env), 0);
  // if both t and w are set, COLUMNS may be used to restrict width
  return w == 0 ? col : (std::min)(col, w);
}
} // namespace term_info

} // namespace detail
} // namespace histogram
} // namespace boost

#endif

/* term_info.hpp
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
*/