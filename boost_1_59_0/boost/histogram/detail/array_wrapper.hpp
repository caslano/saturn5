// Copyright 2019 Hans Dembinski
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt
// or copy at http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_HISTOGRAM_DETAIL_ARRAY_WRAPPER_HPP
#define BOOST_HISTOGRAM_DETAIL_ARRAY_WRAPPER_HPP

#include <boost/core/nvp.hpp>
#include <boost/histogram/detail/span.hpp>
#include <boost/histogram/detail/static_if.hpp>
#include <boost/mp11/function.hpp>
#include <boost/mp11/utility.hpp>
#include <type_traits>

namespace boost {
namespace histogram {
namespace detail {

template <class T, class = decltype(&T::template save_array<int>)>
struct has_save_array_impl;

template <class T, class = decltype(&T::template load_array<int>)>
struct has_load_array_impl;

template <class T>
using has_array_optimization = mp11::mp_or<mp11::mp_valid<has_save_array_impl, T>,
                                           mp11::mp_valid<has_load_array_impl, T>>;

template <class T>
struct array_wrapper {
  using pointer = T*;

  pointer ptr;
  std::size_t size;

  template <class Archive>
  void serialize(Archive& ar, unsigned /* version */) {
    static_if_c<(has_array_optimization<Archive>::value &&
                 std::is_trivially_copyable<T>::value)>(
        [this](auto& ar) {
          // cannot use and therefore bypass save_array / load_array interface, because
          // it requires exact type boost::serialization::array_wrapper<T>
          static_if_c<Archive::is_loading::value>(
              [this](auto& ar) { ar.load_binary(this->ptr, sizeof(T) * this->size); },
              [this](auto& ar) { ar.save_binary(this->ptr, sizeof(T) * this->size); },
              ar);
        },
        [this](auto& ar) {
          for (auto&& x : boost::histogram::detail::make_span(this->ptr, this->size))
            ar& make_nvp("item", x);
        },
        ar);
  }
};

template <class T>
auto make_array_wrapper(T* t, std::size_t s) {
  return array_wrapper<T>{t, s};
}

} // namespace detail
} // namespace histogram
} // namespace boost

#endif

/* array_wrapper.hpp
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
*/