// Copyright 2018 Hans Dembinski
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt
// or copy at http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_HISTOGRAM_ALGORITHM_SUM_HPP
#define BOOST_HISTOGRAM_ALGORITHM_SUM_HPP

#include <boost/histogram/accumulators/sum.hpp>
#include <boost/histogram/fwd.hpp>
#include <boost/histogram/indexed.hpp>
#include <boost/mp11/utility.hpp>
#include <type_traits>

namespace boost {
namespace histogram {
namespace algorithm {

/** Compute the sum over all histogram cells (underflow/overflow included by default).

  The implementation favors accuracy and protection against overflow over speed. If the
  value type of the histogram is an integral or floating point type,
  accumulators::sum<double> is used to compute the sum, else the original value type is
  used. Compilation fails, if the value type does not support operator+=. The return type
  is double if the value type of the histogram is integral or floating point, and the
  original value type otherwise.

  If you need a different trade-off, you can write your own loop or use `std::accumulate`:
  ```
  // iterate over all bins
  auto sum_all = std::accumulate(hist.begin(), hist.end(), 0.0);

  // skip underflow/overflow bins
  double sum = 0;
  for (auto&& x : indexed(hist))
    sum += *x; // dereference accessor

  // or:
  // auto ind = boost::histogram::indexed(hist);
  // auto sum = std::accumulate(ind.begin(), ind.end(), 0.0);
  ```

  @returns accumulator type or double

  @param hist Const reference to the histogram.
  @param cov  Iterate over all or only inner bins (optional, default: all).
*/
template <class A, class S>
auto sum(const histogram<A, S>& hist, const coverage cov = coverage::all) {
  using T = typename histogram<A, S>::value_type;
  // T is arithmetic, compute sum accurately with high dynamic range
  using sum_type = mp11::mp_if<std::is_arithmetic<T>, accumulators::sum<double>, T>;
  sum_type sum;
  if (cov == coverage::all)
    for (auto&& x : hist) sum += x;
  else
    // sum += x also works if sum_type::operator+=(const sum_type&) exists
    for (auto&& x : indexed(hist)) sum += *x;
  using R = mp11::mp_if<std::is_arithmetic<T>, double, T>;
  return static_cast<R>(sum);
}

} // namespace algorithm
} // namespace histogram
} // namespace boost

#endif

/* sum.hpp
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
*/