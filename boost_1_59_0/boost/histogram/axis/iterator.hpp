// Copyright 2015-2017 Hans Dembinski
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt
// or copy at http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_HISTOGRAM_AXIS_ITERATOR_HPP
#define BOOST_HISTOGRAM_AXIS_ITERATOR_HPP

#include <boost/histogram/axis/interval_view.hpp>
#include <boost/histogram/detail/iterator_adaptor.hpp>
#include <iterator>

namespace boost {
namespace histogram {
namespace axis {

template <class Axis>
class iterator : public detail::iterator_adaptor<iterator<Axis>, index_type,
                                                 decltype(std::declval<Axis>().bin(0))> {
public:
  /// Make iterator from axis and index.
  iterator(const Axis& axis, index_type idx)
      : iterator::iterator_adaptor_(idx), axis_(axis) {}

  /// Return current bin object.
  decltype(auto) operator*() const { return axis_.bin(this->base()); }

private:
  const Axis& axis_;
};

/// Uses CRTP to inject iterator logic into Derived.
template <class Derived>
class iterator_mixin {
public:
  using const_iterator = iterator<Derived>;
  using const_reverse_iterator = std::reverse_iterator<const_iterator>;

  /// Bin iterator to beginning of the axis (read-only).
  const_iterator begin() const noexcept {
    return const_iterator(*static_cast<const Derived*>(this), 0);
  }

  /// Bin iterator to the end of the axis (read-only).
  const_iterator end() const noexcept {
    return const_iterator(*static_cast<const Derived*>(this),
                          static_cast<const Derived*>(this)->size());
  }

  /// Reverse bin iterator to the last entry of the axis (read-only).
  const_reverse_iterator rbegin() const noexcept {
    return std::make_reverse_iterator(end());
  }

  /// Reverse bin iterator to the end (read-only).
  const_reverse_iterator rend() const noexcept {
    return std::make_reverse_iterator(begin());
  }
};

} // namespace axis
} // namespace histogram
} // namespace boost

#endif

/* iterator.hpp
2yAClnrmFBa7Pjo/rWek57ExdZcHjys2rzf7/5d+Yy+sUYsdj6a/GjuzSdce6Iz6tdrrWvLpgsiETh6RFVEKaT8gsxzd/IGKw66NNn1W217nC0TcMm687Hkc/d2ErVaKW6njWdFxx0tWzw5/CrX/4eZxcDFYcsasn0wzCzg52eRD14t4zbKO0oQnzIUV/J9pDZT/BpYmv3tLQxZ2bUXoe5xg7EcUXiSiaBydCGIEVVvHE3Qr97Jajisu+FkQzp1nWf2r7NPhW83Jt7O7rGJpFnX9pn8n0LD2SIjJLMqA6/sQhr8VmVBseR00Pw9KwKzgZCx4IVP46btSTux33MTAaMLoVpA7KHmir0DIuxX31a2gxPcxA8/yGp5kdJwx7DCioLzcDDCqaLi2QHlu59QbWv4QZ3rBpJLHRaEdsHjIUHH+K4mGT38zh+mxyriy6X2zKcXaSLTeumTmBy8E/rlAjw8og1lbRySxCFuJVfQp27Eblebkbz+nOvRx8Xu9sdBNUOZUNjEbJZuIxedYTZoHMTNbvNM90BPxfzR1F7zDc7pD8hp+zxT14J5psA2ZtO4JhNGOVqxva8BkAvdR/YJHYM2GY7BiA5LkPw+MvZbp0QHNlc0uApwUJ2DFz8ikF0hUvzwa1MuA6JN5QPQdSjqoe/00lxreedlCe7SwmJ6/JFe3XONfCVzgOTWd7CvbWVl1vB4CV7wA7sjEM6wZThVOIYXKJI7xj5VPIRcsVlaRKhuoStUlpPHUAtLYzfPTWfgtd88USIs1wcoq2Ir17m5yD1tidpPc08R+G02DJ+aozblVYFavziBdvo/7bcLqAXwoNR3+bZ6E9ZjPB9btbMnUEI2SPk7HJ4QF1+ZRZF1TbG4oNqzAyrLvgSq/17H5QYX/2Z9UuauaKu62S7J3DFbmLt41fPHveKytTsPuyoLidR0P5ay41px+Q8mVfEP9/udTv/8lwb3T5TSKh0yEpdckf/QA5mUjgDllRibEhj/8IetDVkzWZx1GyLCIP3c4X1SRYbpByDB6tLKqwLpc5WDdCiBY4OfIu6ChdhlbnaX7pHoFyamad1EtzSYfFZEe2PXYUpNjXHyx741TzzPofD8xYOB/hrUJek9YVE+ePzyZecb4fHsCECxDHPP4Nw75nJIGCk3fxtNaQTTil2G42wJfzlEij1PbFctTZcJs6HrMoilBccz1T+m4xoeoLapfyowENw59fsOwLVP/r5jdy1rKkio4w1wiCzxOO2nc6vXoOJ+njJ10d9v4dCdgIIz2Sv8pGNgx54xDwPlSzQTQrO8EohpgQIwvEPW/3TKm77G3Tp5DZHWO7CrQfwAFGv5VDYhEc+AQ3UuCcT6ej+nQY4kaxJ1M/4Nr8IbnNfjR5J3M9J5Gwjm2AzL/00+UDk0w8Ad9OnE03Mm4eUb5Um6wRwuDPrxtPAC2cA+B+KfXYOXDQ+Cd6h7uWyQTpvBOGTzIthQedPLLg3XqM3QuffuGEjUEPtzavuF6MawjHvJ+9NicSsHjXvpEB8xUQaqUoHQK2lxBEe4wPxJwwrqReYqxk0T+KlPPTfMTbgRuOM0j/jehlDt1GE4foHRUl++vMhHe5VLNtXKfnze7Gv+7Dvx7q7HwhRAkzEfv8F7N1AKmk7TqvX2SL1wpDN2Cc5j5oCqZpAClhJXpllthZN5SkvNFDm3UpdWm8y7kzzycT1RYoeoTZ+hA1ACN/fJWzDAZUc/0m48obl0wivsVOtrOo6OtNzra5v2cnfDv797Y/IBXrJLpAp9HNYsOLFsMkeS+zJeQUNZ7V6tPVatXxCgkCS1ErLJ67F4WtKC9csBOWzd5JmzTEvdC5h9BxXdn6RH1YRwEsUgIzCY6n+My1GNyoQNwePxcLKtN8OZ99+ZZLOrruNPdew9LvCnOWrEgvOjW6bMyZWemO2QT3zolqfPxBd7vtVdC2tvbJP3M0c0s/rJoryQUvvD374rO6KeRqKUFM9QqDf6/YT14E1bc6LVwioqRoWwS5xYFQBUSwN/sPPC3PmVHQ1jhLpP/1CWJjTvqbdUxQoFTAsBQwVNkUWRUFFfcmDfbZZoM32UKHYDjyCDhUa1oqb6o9ao1RLfpfbCPicUtBTJ7fLfBI/TeVXp6Bawg0YUjlKVbdJl9hcoW2UeK2PxA0dm0AxyZK2DsKIKe0yJ3gKiHBASNr/ECtGLPUNmyH4GEWhQq+wnaETuAnZw1FN3M6RsZiYBvZWW2mWXtdxuvkuHaGhOoG3ViaOT1j9WjG3PF7qoWnI8/yF6n2xz4T+0anfIt+DdUdCDaKuPqUR0LzBpyZV1dPzQdvCv4+ejaFInHm2wVMjj5Df7UF9xvlRtPt1YoEZj0huqla1xVaHw0vjfIQHzGP/ku3cs48fHXivP4z/HR3JI/bfkR/ZOvlmpjkej0brlQWvLPzRnvHVNVOslSnuFftrmAmDvNNwLDVljKUs8GnH9VpP2wGvsptdcAZVpY/X0QZubeInBtkUrsZOf7Ie7IHvwh7mKZ6ian7O51tHMFT6xD7nZuPmWLCerZRB5/jV3bCj7+jwfPLBi/Pbj9TW/7ZKXdFLLEpvFKT7dFxYRcZHiQ59TW9BP3lgd++bezdze1W0wU3SnTmiVpp0x6VtxXG/18V5MjJYg+JRzXfR/UOwWR4Fhxz+FqV9wG/8/8YlG0XdPRKDoLyNUb130YyhA6WfbAGskUXRDg+VPcM2j9fx5tkIdTOARp6Fyik8LWXsnLA6b3H5cwhJIDv6Ub11RlRP2qUmeK7riIf4AnxTrE3dz48UWkEPj4lGb0NSE0n34EYtwhlcrynZD++L5zWxAeCt7Kqtzw6YekUz9r2v4ZuP39IkliH9LbVUgzZ7j509/SjJS3iRs8RJ5epgznmvIPj8sHiiK6p6PXeGL0n3/V2f7ydP8EONI+BYr7zKcz/ybsBHg9NfD7izsNpn3bDnhQtAPkiRA5z0gHnHPJHgO2eAN4keI6Mj94CzUud3cvY48m+Oi3GQ9gYMuXy4DfpvtsLdD6xwrShWqE311fvsB3sjKWX2f+Vxfxnsg/uIjbFPLhQgVVJPNGiNjwLeWvZDx+ElZG62c9iuDNO6E3ibizvlYSPOMwzx9j/f/4DY8lN34cPOE06pC+JolCv1X6BJ8nZTVr+/h5PuRoSKrR/ToWHrn35dTAbJTrkYjj8hlrJLeQNIyVrpAkcvMecPtLKyBf4oWdWMsyJk8fJvrgfN9tM9LBNNRBwXPuhUS1rytDdYbNvxv9CtOzQ5i8O7VBq265Dff50lot0EtXS/IjcOLcMbhLGyZTMZFBu2lVdJ9fO4XUsToC3y3eyCAXUE/pV1gsI3zxConCs12rkeNf/yDHC94BHiHBgMe/Qg4JXJbc6mqXEqg8mTe5Yf6+8cY1Php3qPMo8fpppxReWCrgj8kdbv9ad3YAOtpQfeqI0MV1HVc5uKspqe8iiNWlgiThmxy3q1s+WO46Ycaqajz9I//+uF3NAnfRzfGqVNnB3lpyJkJJVoYKky1qHXH6QvHX2Lrjg6vIIm5FFVySaCMQ+LFdQkgshtNxO4574V27Fs6SEzQInlhzY6Gfil7gDHS7sZD0G9yP9FdnUig5CeUiyrdm3MuMCeKKLaT6sbMWrD/OJ7D1KfCwsDJuskdmTiW9llt7O9+sM2dV0/xkoPOuPOmH1+d6rCG9wihkwPW6StC08tyC8aDVjB2wpaS8SUfMWtRO9TgsbGagpYe1qEDy6lWbdGmkYsKnXAepfG2el3c/BvaEHlyfRjK/xA+aHvi85kA0gfWHcmP9zRaYuEm5D4VxTJIGSapTUmazfHeUcdpRqazAYX55Gpy9/+xUk+rx2yn0icv50rfa4Z1DsEryW2Te9lHgqghMjahmyFspiPpkK7iqL/DjOL3GU9hR4lUAv1CfAVsj9sr4nioHLFzuFiWDiwGh/Y5FT6ICCufrARq9q/ndDfV81ebTPxs5RLT9/Pty+3156pwdJrUJI4ESJqbLw7pZLNbtiZCILNzQAmGhhc8/Y/AaK7ScyalSw5mEiM6TaPgL+hywE0qSSMGZkaG9wg8JBPXs7XaXpBokJHz0gCD7cYaB1dPldtiyx267EYaA7IE0bDA3IEqo9bSxjQOmYho7iLQmiEp8o3XiWM35iRhCjbXtP/fNrpOb8WrF0etEdiS345lxR9XvbY/79uvDCt+g4DkNFKtxx6NKh14nzkRd2EMh//JzU54gKJv2kNWNGnxYluUGwP/9Q3R1aNd/be+BA2Y5ti/Rt0LdMSuObauI1hxho95KQeir80VrI8OOvux/v7e+bTRKfRsFjZrKWAuYUOnazZa6FT6f9YU7ZGy+MP7hm6khPkXJU9qqIz7DymIpRLbhZWM19n5OepzpW7IbS+SFVgKxI6GiQWcZjf79Ed/nQcQPjOQXVk+U5XHoRzEaMWYwtjGUHp406mzqGT3Z2m1jfWtTykpWI/jvAtCT8sbC5LWzSiX5jsTV2jewUldntwO6JAmoz9HfQ9/DlhcZl8HNJ6Oou13F3wG2HV4p40QhX7vNa89nfhPzsmIO5/v0ns8+lp4LsYvkl8kdSnUFhSpoaZ0vdtxQEjB1yINx7gpx959W6Ckl1Kz8zKNWqjFxGP+y7zKi4IxwoLQpwk/MwMDHrMeYxCC7GHge9bOHwOktkrhnuyXdl4Cjl+z0NTbaNL2RZty0dMQym0P8LNLaiCbW8GjbgcvUphd/eB8RBmuECN7yTvJKdGjT34M9ZeBLRmQMQdas+igcRo/PgeCwIIbr+A0b/xlN5HToDcf8ujotoxf9eucn2sfTvlIpNHL0Cw8qf8oCfaFnNKPU3WzYiU9CRENyMQowsnlOst84qZisk37eNuNAvDHkIW87EPN8wC05bcblaUf9+ro0Y657vFO482bmkz11Y7Nh3xCXntVx4R1oWlQrYViCK799IH3ITfgAvMDsqJCnOv1eVBvzCsMT6yfGtG27a4WhYH2TIbHUKeuzZ1py04a86K26VIia+7EMrcNeJm4jRk6EZL6cjLdaPg/mU4MEF04WxHIfbtPPSHyEcYBT2mo5DWDzwmnTQdUWPLvRcI0vEMMx0U2lZksTFJHM37G/R7aCPkyJzJpJukUZtNTdMXUyoe8c7Ef/goXZmNM9ekL2IjZFZbllpWSJZEu+bp3oR9q9f7N9Yvt44C9ip6mU8+VP19Wtv6RVhFrVlES4UVZBn/h27W+A7Q6Uc9yQZk4x3dKFrsTbdj15nNtRhvByiWmakr5p77uArrAnzl++zgMjD/L5F1jzi9wIsQLxz/hDiL7xTUm9daq0H+2R4pjDGNfQJzyLcnXbw53VrJqNveCCp8EmloI6kyzfDGSjjskUgBulCBTvcRC5EFbF+WuamVO8orvmx+XAO9Fr19EUFC99MAb3vijwwI06RAf2F1JtewCljUG5FOoDN8xoTR5An/NfuWbMFkDEjrnBsOyOC9jwSwWgyaQA7PTNH2fa9xNt9bgu8iX2DESIBRASu3YVYEeai37EnMS8werBUsyUvHIlEbh2nYpGHTOWoFyI/pdMAbTMud9QtntIh+vLw+jZRU591XtGp9qEMWo9Iz7nIjifkHg5P0gdvqo8q4xU3oIo26Oyn29D3ASxp7EMsVOxKR6vzCn3KVQ16gXHxs0k4OEb1Rr+u3+2OLAwZI66zzzHj8gBiN9P+8xcudnQXi/OcfrUOiaNHRoNbY6zhH/LnqYp6NPRIS/iC48fO9UvAGfjM/pkKzKqrLU8cCNeI/ylgtFZcVLUcM3s5OnN3uo74mf0e3Ojkl48FG6JerbZiXh1U/lCMJ/+4hXJhUvnwT3FFOGdPAEFDKJv2WSwiTIyIyntazbfR9ZyzQM63quAY+oJWKsPWYvRjFmKUYMV/zRgGTDr7gCEkpcB2rIO4Prf/cQJkdFvOhebQa6NueGhe24sLyPYv1Q/Ef/l9/J5jwdk8v5y46u4pYr2jNr4y0VzrGXGN40klvYBYTrHfueBzHkFSTSB96jY3UosQVQI3zgO0L/b2BUSGDxzGHjY9VX3AvkI/oEk6eHfI6vFe6ljKnHlpIfJv31y0Nmxg1/sgciDZGTeoiICxW4dH5zLkzhhLcqDwRGiGEITcqYIQ+b9ejZLI/SkpW8vl7OXpvEVOubN0rxyUuov7x7/fjsE3/x8FxwaB0FNPt6Fn6nV9UiYui/o3OryLBHjMc1zsButUq89DZ26+dXE0WbGV41v5ar8fa8Jss1n5Ola7g42py7v0kzxIexB0pnvnn7Ugq2MGvLF0pZMOywpxpePTr4c5OH9QnsjCwBMa5veYW3/9bUvzvV7bXh91x/1NvxtshKpnqw9CE8o9TC09G0WZmlK9NuKr1ku1KM8QqP1PK6lrO+bEJrVR+mWPqoJbv2Uth46hswfbUCv5VUU9cAeOznjObv042LQ9Rlw/q601c4iDCkJPQ7M6P8dbPU0MYiVflz2KnSPcIL4z1XLC81FfkUT/rPHpbdac/yai2/x3j8NnuIV0TAipOL4qkda/zZFSVrzY6r+2/H7XPibnkvo2IjVEMDcD5ln7IoQHmXgeN73duPhJmEbPJZO3HtfSmgq4PzL1YvzOUvPDo0EQ8fiALKiJGq104Xjh+oCi9jufhRRopSJdSA+ecLI6KhoFz6dU+LxBmJymfNM38zbYCc1/1rwWHzsm5Jmfa7YTJhTjmJJoGvDrbdYP2me/fD8p/sVz4pkhNnVm/UrG1k+4prgWGrjAf333Holpyk2w5fWW3ARmxmPe58w4dtT/9g1onRbxvA9kmnfKForupjkNblf40k990zJGFYTn7ABYnpX+fhImkfJuOeaxfSBu++OkbQP06VdMFdnrB3YMSF+nx9T/pbMePP30fj9zMfsXYaOUky4ZGBt5rje/Tt4h81PM2nwemmClytJ1vj9yn4QeNpEPSH3w0+k91MTEZU1ZBLum2un8bcW+P0ZIA8W6Uhfko1qXLHZZLWqQJQPHX9+kfwTE41HmXqkPFXqJZxGq6fvpElszikv4WH0KtJzJIYju/YwyaxxHOWK3ctdZZezKBsH6V0RVsW48nNyoRu6PX8jNqxg85ZfJ3NuIa6Mg58AvER2EAHLjuxIeCbZcxxgyKMqMO8d1WWrkwbeLQFytBx3x0esSNh3tTZ3nEnwSf7uMdmlWFAzT36lyvfty+G8RROntsnArm112LAeWxKt8fUVUsI49Fqe5kYmSmwVEvcDAsbpZ4x2jiaMfgWCRg3WlRJZb1/6VPcGMlI+CQKe/0Ybrgu8W5GQBpP4On6YM77rJaHY1u7T5l45KNzgmcqU0STNRtg2Kdq7vW3i6tKh1a7bMcrZzOxo2ArqjqINeI1rGfYYlv81xMdZNKp5KPxehnlMlj5iIGLeNmXTQiYkwse8PBpWJIu3Wi4q8Cw0wriConf4/uvwMBbUY+xyFMpx0dll0de8Gfc9UCHoJ9wbTr29pKXy6/pbJLWQuPT0l3tCUezAbvNNVMPs2r0aTf8cAbGUogV3B/BAD1NvVn2s+ZtM3OnCm+RTEkyyrhjkSDkulVWJfirfqU967dzio5/jaQus639d6m/8/r5ovIF/qhVe29KmOLskwW2lLp/Io42BxRQEyGLACHrvoQUY
*/