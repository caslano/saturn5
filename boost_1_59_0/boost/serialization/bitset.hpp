/*!
 * \file      bitset.hpp
 * \brief     Provides Boost.Serialization support for std::bitset
 * \author    Brian Ravnsgaard Riis
 * \author    Kenneth Riddile
 * \date      16.09.2004, updated 04.03.2009
 * \copyright 2004 Brian Ravnsgaard Riis
 * \license   Boost Software License 1.0
 */
#ifndef BOOST_SERIALIZATION_BITSET_HPP
#define BOOST_SERIALIZATION_BITSET_HPP

// MS compatible compilers support #pragma once
#if defined(_MSC_VER)
# pragma once
#endif

#include <bitset>
#include <cstddef> // size_t

#include <boost/config.hpp>
#include <boost/serialization/split_free.hpp>
#include <boost/serialization/string.hpp>
#include <boost/serialization/nvp.hpp>

namespace boost{
namespace serialization{

template <class Archive, std::size_t size>
inline void save(
    Archive & ar,
    std::bitset<size> const & t,
    const unsigned int /* version */
){
    const std::string bits = t.template to_string<
        std::string::value_type,
        std::string::traits_type,
        std::string::allocator_type
    >();
    ar << BOOST_SERIALIZATION_NVP( bits );
}

template <class Archive, std::size_t size>
inline void load(
    Archive & ar,
    std::bitset<size> & t,
    const unsigned int /* version */
){
    std::string bits;
    ar >> BOOST_SERIALIZATION_NVP( bits );
    t = std::bitset<size>(bits);
}

template <class Archive, std::size_t size>
inline void serialize(
    Archive & ar,
    std::bitset<size> & t,
    const unsigned int version
){
    boost::serialization::split_free( ar, t, version );
}

// don't track bitsets since that would trigger tracking
// all over the program - which probably would be a surprise.
// also, tracking would be hard to implement since, we're
// serialization a representation of the data rather than
// the data itself.
template <std::size_t size>
struct tracking_level<std::bitset<size> >
    : mpl::int_<track_never> {} ;

} //serialization
} //boost

#endif // BOOST_SERIALIZATION_BITSET_HPP

/* bitset.hpp
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
*/