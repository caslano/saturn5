#ifndef BOOST_SERIALIZATION_UNORDERED_COLLECTIONS_LOAD_IMP_HPP
#define BOOST_SERIALIZATION_UNORDERED_COLLECTIONS_LOAD_IMP_HPP

// MS compatible compilers support #pragma once
#if defined(_MSC_VER) && (_MSC_VER >= 1020)
# pragma once
# pragma warning (disable : 4786) // too long name, harmless warning
#endif

/////////1/////////2/////////3/////////4/////////5/////////6/////////7/////////8
// unordered_collections_load_imp.hpp: serialization for loading stl collections

// (C) Copyright 2002 Robert Ramey - http://www.rrsd.com .
// (C) Copyright 2014 Jim Bell
// Use, modification and distribution is subject to the Boost Software
// License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

//  See http://www.boost.org for updates, documentation, and revision history.

// helper function templates for serialization of collections

#include <boost/assert.hpp>
#include <cstddef> // size_t
#include <boost/config.hpp> // msvc 6.0 needs this for warning suppression
#if defined(BOOST_NO_STDC_NAMESPACE)
namespace std{
    using ::size_t;
} // namespace std
#endif
#include <boost/detail/workaround.hpp>

#include <boost/serialization/access.hpp>
#include <boost/serialization/nvp.hpp>
#include <boost/serialization/collection_size_type.hpp>
#include <boost/serialization/item_version_type.hpp>
#include <boost/serialization/library_version_type.hpp>

namespace boost{
namespace serialization {
namespace stl {

//////////////////////////////////////////////////////////////////////
// implementation of serialization for STL containers
//
template<class Archive, class Container, class InputFunction>
inline void load_unordered_collection(Archive & ar, Container &s)
{
    collection_size_type count;
    collection_size_type bucket_count;
    boost::serialization::item_version_type item_version(0);
    boost::serialization::library_version_type library_version(
        ar.get_library_version()
    );
    // retrieve number of elements
    ar >> BOOST_SERIALIZATION_NVP(count);
    ar >> BOOST_SERIALIZATION_NVP(bucket_count);
    if(boost::serialization::library_version_type(3) < library_version){
        ar >> BOOST_SERIALIZATION_NVP(item_version);
    }
    s.clear();
    s.rehash(bucket_count);
    InputFunction ifunc;
    while(count-- > 0){
        ifunc(ar, s, item_version);
    }
}

} // namespace stl
} // namespace serialization
} // namespace boost

#endif //BOOST_SERIALIZATION_UNORDERED_COLLECTIONS_LOAD_IMP_HPP

/* unordered_collections_load_imp.hpp
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
*/