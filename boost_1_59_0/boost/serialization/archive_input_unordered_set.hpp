#ifndef  BOOST_SERIALIZATION_ARCHIVE_INPUT_UNORDERED_SET_HPP
#define BOOST_SERIALIZATION_ARCHIVE_INPUT_UNORDERED_SET_HPP

// MS compatible compilers support #pragma once
#if defined(_MSC_VER) && (_MSC_VER >= 1020)
# pragma once
#endif

/////////1/////////2/////////3/////////4/////////5/////////6/////////7/////////8
// archive_input_unordered_set.hpp

// (C) Copyright 2002 Robert Ramey - http://www.rrsd.com .
// (C) Copyright 2014 Jim Bell
// Use, modification and distribution is subject to the Boost Software
// License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

//  See http://www.boost.org for updates, documentation, and revision history.

#include <utility>
#include <boost/serialization/nvp.hpp>
#include <boost/serialization/detail/stack_constructor.hpp>
#include <boost/move/utility_core.hpp>

namespace boost {
namespace serialization {

namespace stl {

// unordered_set input
template<class Archive, class Container>
struct archive_input_unordered_set
{
    inline void operator()(
        Archive &ar,
        Container &s,
        const unsigned int v
    ){
        typedef typename Container::value_type type;
        detail::stack_construct<Archive, type> t(ar, v);
        // borland fails silently w/o full namespace
        ar >> boost::serialization::make_nvp("item", t.reference());
        std::pair<typename Container::const_iterator, bool> result =
            s.insert(boost::move(t.reference()));
        if(result.second)
            ar.reset_object_address(& (* result.first), & t.reference());
    }
};

// unordered_multiset input
template<class Archive, class Container>
struct archive_input_unordered_multiset
{
    inline void operator()(
        Archive &ar,
        Container &s,
        const unsigned int v
    ){
        typedef typename Container::value_type type;
        detail::stack_construct<Archive, type> t(ar, v);
        ar >> boost::serialization::make_nvp("item", t.reference());
        typename Container::const_iterator result =
            s.insert(boost::move(t.reference()));
        ar.reset_object_address(& (* result), & t.reference());
    }
};

} // stl
} // serialization
} // boost

#endif // BOOST_SERIALIZATION_ARCHIVE_INPUT_UNORDERED_SET_HPP

/* archive_input_unordered_set.hpp
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
*/