#ifndef BOOST_SERIALIZATION_TRAITS_HPP
#define BOOST_SERIALIZATION_TRAITS_HPP

// MS compatible compilers support #pragma once
#if defined(_MSC_VER)
# pragma once
#endif

/////////1/////////2/////////3/////////4/////////5/////////6/////////7/////////8
// traits.hpp:

// (C) Copyright 2002 Robert Ramey - http://www.rrsd.com .
// Use, modification and distribution is subject to the Boost Software
// License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

//  See http://www.boost.org for updates, documentation, and revision history.

// This header is used to apply serialization traits to templates.  The
// standard system can't be used for platforms which don't support
// Partial Templlate Specialization.

// The motivation for this is the Name-Value Pair (NVP) template.
// it has to work the same on all platforms in order for archives
// to be portable accross platforms.

#include <boost/config.hpp>
#include <boost/static_assert.hpp>

#include <boost/mpl/int.hpp>
#include <boost/mpl/bool_fwd.hpp>
#include <boost/serialization/level_enum.hpp>
#include <boost/serialization/tracking_enum.hpp>

namespace boost {
namespace serialization {

// common base class used to detect appended traits class
struct basic_traits {};

template <class T>
struct extended_type_info_impl;

template<
    class T,
    int Level,
    int Tracking,
    unsigned int Version = 0,
    class ETII = extended_type_info_impl< T >,
    class Wrapper = mpl::false_
>
struct traits : public basic_traits {
    BOOST_STATIC_ASSERT(Version == 0 || Level >= object_class_info);
    BOOST_STATIC_ASSERT(Tracking == track_never || Level >= object_serializable);
    typedef typename mpl::int_<Level> level;
    typedef typename mpl::int_<Tracking> tracking;
    typedef typename mpl::int_<Version> version;
    typedef ETII type_info_implementation;
    typedef Wrapper is_wrapper;
};

} // namespace serialization
} // namespace boost

#endif // BOOST_SERIALIZATION_TRAITS_HPP

/* traits.hpp
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
*/