#ifndef BOOST_SERIALIZATION_WRAPPER_HPP
#define BOOST_SERIALIZATION_WRAPPER_HPP

// (C) Copyright 2005-2006 Matthias Troyer
// Use, modification and distribution is subject to the Boost Software
// License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

#include <boost/serialization/traits.hpp>
#include <boost/type_traits/is_base_and_derived.hpp>
#include <boost/mpl/eval_if.hpp>
#include <boost/mpl/bool_fwd.hpp>

namespace boost { namespace serialization {

/// the base class for serialization wrappers
///
/// wrappers need to be treated differently at various places in the serialization library,
/// e.g. saving of non-const wrappers has to be possible. Since partial specialization
// is not supported by all compilers, we derive all wrappers from wrapper_traits.

template<
    class T,
    int Level = object_serializable,
    int Tracking = track_never,
    unsigned int Version = 0,
    class ETII = extended_type_info_impl< T >
>
struct wrapper_traits :
    public traits<T,Level,Tracking,Version,ETII,mpl::true_>
{};

template<class T>
struct is_wrapper_impl :
    boost::mpl::eval_if<
      boost::is_base_and_derived<basic_traits,T>,
      boost::mpl::true_,
      boost::mpl::false_
    >::type
{};

template<class T>
struct is_wrapper {
    typedef typename is_wrapper_impl<const T>::type type;
};

} // serialization
} // boost

// A macro to define that a class is a wrapper
#define BOOST_CLASS_IS_WRAPPER(T)                       \
namespace boost {                                       \
namespace serialization {                               \
template<>                                              \
struct is_wrapper_impl<const T> : boost::mpl::true_ {}; \
}                                                       \
}                                                       \
/**/

#endif //BOOST_SERIALIZATION_WRAPPER_HPP

/* wrapper.hpp
cqqqjpRaEacyYNU5Ukg9RSjcWt0RJPzOdSvLwnLNLEF0M9eecuugzLTwfQHPXJASJGYyL66MarTHGbw4VbKILbdn1UkTcT4v588r/9NnfBCTImBtTZoBab1J88yCeWLSg2bBg2JSplmQGY8BZkRsxtll/QmKTMoyC7JgYLvAq8R1lEMhaPIXZIuYcje0iWNGQRx8ko8O6o9i4PIoTpqIwbkiNehbiQyb+vCJfJ8iuCI2G49Xt/xGqNuK8RU7neX4E1HDHxfM3qurTwMmcKkdqXh+k7vOW4LzmL7QWyjT+LH4KfZkIgjD1cNthmAfKjvvY6MNO/fl7cx8jBbWjv0Jbdv120CyjcaFnEdomVAo0MbYb1nsmj10ORRajDyhjUhhe7LCSRZrmkDtJClu7IgoDl3NlgkC1UA6Yaf/hRDgykHwWwU/bmJw81QIcNJHKRgSrWBwWifGYdFaHxDw3CS/T3FvAxJBXLaimT4znMXHg3L2HQDSEnYADXbqyq2oU9uDUpyQASw6SDcfkc/ToxjHQteaT/Van5inZbKuSUgbo4/t3cm3eTdc0M8xljEa0PgIHbVjhgQTo744j50aWVXqD4qh3GaPk2L5x8PNcn4+mtdiGZvlaX4chVHSsuTccQTbVFbOg8fNVAq7FaNvmHYXXix6eRtqdGUqSTI11Wkn2ikHsfk2enjXKdZO6ExZHSVmnb2eGlM+wcsqnVmQ7KeGhvNZPSEZc0Tm5WNKd8oMAsi71Fl5ArNkGifkUy930rdmpvYM6jC/qtnPnsCLAjeHQyc40so7ZV96lp9soYU6Ggv1m1ioZ38LqXIII+NouZqlHTbh8MBisyHx3+LhvfLG2y4QEN8rx9/Oi8wyGm1gFd5qaieEtnlXh8BaaGPDii3UOjFhLH0vihTDSbWS+W+Wf+A1Rke0rHzcnO0LzW6rfJBHSJWohIv9hmbObjKNo0Jrjxe6i0TYFy9yT48Uod9c0FFZRQVFvXHtKF/gEQr56Ar0/yhTvESZl6ztJHKeLUJobYvXODL7crEZmn1C97PqgN0FtOsbjIc0iw74RaeRHbbWOaj3yn15NEUN8qXfKnZ4fWye19XgaiM0as9Bwpxohlr//lJnUqxZ/vXfPVej8Xk9V6NsW7r255iBT34DUOETJX5bSFcLKqEzXL8dM5/HWoP1864+BPImeQPxk31wzznSpQ9yRLaVwe4+AJjzPLvVsacEJ9UR5Jn0YOzJES7zeWYussQWlF2Y1whzRroPOlKxh7Jduadt4V9jlJ4eMkboOaEFo/RrIedakW0fHLZeKs84t06B2tzTYqpPTBph8u18rDPbuDpvn35lg7YeiJK5YARF6UND43SAvQEK8Cd8prE+8bdYo4WbJwu3WdoySJVRMSxlBBJf2JKvuie+IN80luOuDbYTzZI1UEBZA/XVAEX0t7usrUP0OsIJj9AZFV+wCI5Sl4hJi0tNrcr6kHXuJkUS6aLAl5NBcZucuBl0mhT4cwq80EDZDD0ff4iFFwNVL6hzTkydAZctGgCjGW5TX/XJQluWl45rLD1EGAHz7NIBcfmIF8Zy5e3FsQvFCRqq8cvWobb/tNNKDLPGZULT54LEcOCcraY5aFyilFz4IwttaCvhL2K5WbER6YI0S1mL+5kVIxq0jRjzUMVIvS+mDre5I0MVhALeA9yxYkSgehI/jAxU3+mB0SsfJscfmoDJCVQ9QIfLD7XRD5sVq5ZpL+zTXnSHKjbqvnWjt14SpIhQxSh9QOjJURRzo4qJT5oXqlhveOI0REEYR2WGo+KuUsmBqt3gxoQ3EWwwtZ2B1+sdCfG6+8rKTG01oXZxbX2kDCbhyxq0rUDTzHAtJdhtVuw1Kw6meNBZr/A3YGd/91Kytx7g4QTig/1HE8Cs8opu+chX4LQSi1x+7xYCz73wNo5eeBtmibmtjHrJdyiLkjan2SaqINOjLWHkzTKqnJtpgPhNQNwYWWPELbaD2XbGpSx+WjlbhNcv7YuYmLbeW2i0J6YGtgskCWyPAaVkXV96ftV5VvmuESXrIbKYllev9x2A/GZaIs38CkXHdnut8GqzZL3xFxZj7NWGbTr/YszBdzTW8BJZxRTt6tBb6A4fpH2VFLLyscr9/VPIGSLGJP9+qyNnwvhyclDl4B/TGr2TaraHhRpAI8OeTJ1xkUNvhWIbt0UcSm2N/Pk+bMvVoYrVgep1abyT/qexTe0DaLGKjYGqb1G20nicSQhzuNslKlbanuVjFm6RJ2D7yd/fQySpsQYrrWRd/J6b00zGkkV4c/yeQWnm8+B+iqDJwvei0VYxeBboYqQs6oh+I5JFv1HZBrnhJmWV0q78alRuLM+1Wj9wqy32QBI/np7U+lfCniv/7zoKSaOU/K0GVzDCGBiqyDb6YrdW/YsqgssVI5Mo75J6mBgeqfsUzsw2IIdFaOynjxEZjKLAxs5owIYH5a+mQh5E1+97ZRmNFDU2YEMZbulGSFZvxC7/Cu3R8q/2qQW5wqITbPpA26T+rMunnzX5Kqtq88ZkMa8s/x9LvvV/KPmikegpleCWkU4joH+rPBsQ8pBcehucHKykmkotY0RuHX0UBwKr6qiUTJlfR1PLhvMjvUahvKDPJ8ma/9PwU+EjqXAC/XqOCC9T8J1W1wBWI7Cpwh5kfcGD1oJ5RYls+xzIvShF1IIDnGVlZaV2jUoUjGm1iDz8OWhlnJ36YJsoTD1b+Rw1J41ovaIDrH55+68I6bC1zS+SjaJz7ASBz1ERccwainOPjrQrYg810ql+0Dm5cGN1NG40xitG4dRHaidtoPpH2Jdadtzwxyva8DnW4QlUPeNi6xADhebP0UZ5tDHQib411pFGp62WmaON8WijElfDtlw5v/tFeExOPUXmhEcpjyya39Nohk8RNhg32th3E3x6xbW2DZHIBiVUJcKnhNaW01i9v/JLomRMTsmovHf0rByt0a0RFTCGKs5rrEgTKNbUxghtJDdtZbJpY3O00R444OpI3IamUdToHG2sR+sAG2gkWvewCI9FbH2O1p4TptTKX4xba/eE281wx//Qtg5CFp22jc0pGa3adtCtjVY1O20bbWpjxThGOTCwH2BQlTPvNvvtJoheXoxDVVCvmgXyNyEnHXhIrpCUDNV/NuiuCqX4YiAq3Jbc03y8h3+ojRcVp3Iq2pZp/1AwZ4RH2/uwaUhhdOSAgksQzJDTmSJqcgD2g3B7ET4RgXwcCBN5lvZOQnMOszuE1kHDRbOTE25j+DVdgEXWEni9ZARuJz+crgqiTXyiyKZtoKMM+k20g3WW0s3q08pQ7U00ojlhwsBP5RBRvOD22Ddud0VdRTTqMFMFfPtvf2K8b5i54HYCaI6NwzsMsMfHUrvGg80TicSfXBQ3Rm2gBo3YQJVTaBMHCEPaIF8+BZ5sfNIiWt7tPB9sAeu9PcCpm81Jt4t9iV9EZ9Z+CvT7x68qtVqi4jaBil4+Btj/XqajQjcQzcOERg/RM+nLSbKZkJGjSnorQt3fzOSzQyAflf+8mQWaJkSt4vIf3uFyyUVehypJo4zy7R91Jiv63peZdAfBNm8M6/DNeZX5CaxH3ChzCX2xEcRpEWj0FsywvRTRV1vjFRrXQBmLi4rEXjPLnEkU0RrzoY3g/z93zCLC1sWiWKBEfXFtb3Exviz4HByyNXj87W6MT10vT+xU9xvUD5n2bSKhYBD1HgUuqq4FtBqaz29GVrKPqzzU0KGTKbp1ECXAOGRS/ghuFwrHgUNrDEgm/mYyccqwbFzZMywzb0oOy91fZg5pKyQACaq6ypehhGuohNrCEX16fGY3ZDC+8nUqxaG7hhan0F1V6UR3Xf9TmvjoekV3ncw9bm470gV0tYV+Hab1h17Yk2AJO7bf7foT2PTYvGXygReANiJ1PH4C3tJzx3RSp/yTgN0jAgvpXhoy0DTs47O4/IEXnY9ynPPlPf6y8TvJL8OdL0BJbFOhsKAXKaaVnKtG/iV7GnfhdrGUvneBe+qJVx/Fg51etv6+L3/stqByyRexEZ57brZ8h812FtoJ7O92WcmSoCvBjYjIFxuggsFKF/LW9cg7wlHCsJs+/3SHJXgcQ7P9C+8vLo56iqPucmrsElWnNdQPhLS6uQt+oSx9PK5Zum8B1xNRZnUTJ5qHqxXNH+LXhUMElw7f8S+f7LBaIeLYwEUEs3GpMEbvZ7+OgWDGiWRBsuxLmCN8Evk+7jiiqcol7DY6b4++njC6LluxydGm9cOxNCt8X5moinN5inMZaSjIZIb/TOqntQ0frKEjqK0baY01FEBZxRV4o/oHaABEaX2BFWFcSndkB+KTIct7ZaDqdlYPqEXrPr5GQZYeeoSj/3YD1BeW8YxmoSl2s4ao79gIk3POWq2fgZzqo+wxUE+gwrsTLfpAreFEhvkSr2X+DVS9juTxlRiL6uVdSp0B6dVQmfFG7o3ifGPEaJcOsSfNLrcV5tTj8Y1o5NXXnLXjU0Gj+nbNDc6oW9s22S1ar0q8sneJdiolGgXQlNRx4O/buE08Z4jjspRdh5cOcs/wJbAC1sfNl45yDHJU6ta2o5zzIP+qfCCWH4699RN6yTKr19EfIxi6HHYecKO58Q0asT7FEXn5G1AxxWf90sgXlcPC/7w7BP/mVaPOxcut6oMcd5DjuGXLH2ZEb31P7g8u6L+90ASPuNlHDSCDva9dD6LMmfBiGGPljUVdwPrKfqyftXC8dZscVgtKS964nRapupWSu3+Ueh21ld6SG8i8Qj7wzw6+ZvrsZXXNBB3I2m8BGJ6CiBHMiCwYGaj+N0UrdvsxmWLf5snvCAGxlI9+yvKWC+DRTh8Q4zjLZPJWTJppGiw2b0CZmy2qHGGD2YSBTnrAnATZV0JDtaOQ1NKa+QxHgtz9lGSmOfUBZXMl9zRkY+N82RQaow8JLcjUy0utLdiJdJLfitE+IMduo/kaBza6HrAWRFTyiNxA1GZ8hxqP364kUuG2+I6V/Lae30ILRuv9rAV+KqGUjjw2d2AyBcWSVntCW/bSs/5ZROqUXgjcNYgY2P95h/RltjUFQszWi/DW3Pfy9gWe3533QaBqCRDoQeJun1mC6HeHv3fmT4GqKGKDuJwAad9iGpsatI3gFwbe2B+hM7soHt5oGt1y4l/YqnCAXuUn14O+ac/bZ9xSiwuX0IIxYJyxGP+A0DgW40+vdRHEi5SWltpMoaG340JGa4dJCbBv2xXweDhW8ZPswBvaT8xJvseC1oLx8Jv3EQ1c60/drCTxE9/CdKrA8KuCA1UxUJ1Gu7q+g22W3KvOWqWpsIriJlwLQKUu7noqw/E0HkgucMGduHBtgUztNQx+mKXJHCEYidnJMrSNjirVCersAMZOKVvrKRdqPiLfzAaDeWcqmKHYesAfdPooathMOYc5OVl6niEKuCyObj99MRot4yAej9pQxGgLGQcrv0EYcshorIzwTUYbf1bAouIHWaa2jsDEOAdMLN0CMFEakad/CxGydWwMJplL6QVJock8rXHxZscUzMHFLzHldxRtc9rY7ugAncB8hY/wpn/kGuA6yr7NvGvYK147rdC99nByDsWF3kgriJGciqc7rZCxNVA9n4781gSd5PK+d7usg9HM2iZs6it/2pd9SLXHp+Y3eCCOIL955VkooS+ImAtmmAtmmgseMBfMMxc8SDvVvM183Gs+7jMf90OEdMEic8Fic8sSbPUtABRyYVcXnfaC7/F2ezstcwuM0zTEILqA9kT7xQXwFtpm5yy88CVZeKvFL3yz9hZ9oR6mmwuyzAXZ5oKR5gKvuWC0ucBvMl1kbmGVlC1suGZBZmjcTjCLx5aq2S/9uSIn8PxzkPEhpi90Ly2BdDn2CqhETDQHIE/Cg0ej5Zg0jRM2wDLomYjQFtC2DK0sG3ZtiAZnEoACaGoxMSmSqdUWgk4bNkQD920wi2fkvmdOHWNOvZ1IFIJTxQynih8koDXCZCtQ5qRRtMMaJgV/wC9jzUnj5RqAqT1y/k8IqJQvoYmszVxD03Lyx0rtGojnW9AxBMrZP9ZIs/cThsvmS1sRyxeE+lhHhaKsoRrRQDTU7SvULKqRP86/Ebmp3oI013k+FXYsgIBcoAr+ruLV+nneqWXJOx0ou5+HfNQM5QaWsDh6lfW0kpRiAyEzNRD7ZSRPFMw0WUsPCgws/iqqF52H3nflzKIilZdw3o9GjDT5vtSslijt++9aFjUbUseq2erAQwrFUeN83Hq5o9lpfDxeh4idIwhFaqCtwTltJIO/1F0F4LP8gi4ZmapMTnIFYX+tv8Qozvbr/agva88zYiaqV3KVtehU9Sp+Zuk0x1DR1+JxFNxLe+4XF8iYAN3aS4mgutly3ka3UBf/BqqYA2pXBO3R1IoS4/PO2iZZXsI3fRghQijrfyzxS4xMcEPjyOWJowNFdiYbc4P5A+BZTqb/5mJbzvcUbmuur8cIzR5+1o7vhcXxt7mAu9uOcM6NdrN2qtJvVaXrA3uXbKe2JRNQCAO1F6mg1ofQEVbB0a9LInmcjXtESN55heRxVYrl+xLGRA/2HhswOKkJMwmFSmna/7lBsUN2p7lNnmyHx80r5dSVrHi/pNu2JnZh4zDQxaqNqS3837Qhuaj62ObfBM+ROKSkLhwRou9s6sHf0pbBTFd8l8JXTj3NRrsYHOh+ezBUSQu901qvo7fo4toyAJU1zysDIp1QPuOz1qzYbBrr5c4rWdwq73MDok/x8HL5jUsvoD0o7jtXINUm+2QRj0dEeLN4agYLDzz6PUASva/QNov5M8WiB2hPBargsJlwyWj2w6ZWN5N+douGwOv72EwXjMoVs3tfY6Vzm2PUmhU72cH1QXP2Edjqmt1kzl5nX+bsMQoxS+GNaJdzvr20BKyA5UCCp13hTBq6JvN40uQNzzO8LCu1WJ8gyXzZKB9lzGETbDacyQY2tYYaTSQI81D4hs1YaZsJo2Ohos2+bZu9Xh/C5rpy68pKi3lkmt7otIS2pjdXZKV8hUoVxmaAl8GEjTcUsHg2VSmXbMKCMTYRDO6DA6C99Ro1Ty9insRzrIl1PDR3pN4vt04Wr2L7UqHZPv0kzd/Sv1Eh1pk/Dz995oOrDR/Qk9lBozTOMuAR+Wk1Qb5n+JDt149G4xk+Yq2+eOQDdk9nHxeNcIPWCBwTFuYJx6JyaAg//oAxzOsgRreExi8xI+9z/f3iUru8f77Js7wbTBbQLhiv/nLQEOj++k3NrzDRuWP0AaHLUzFQxU9iEUmmrCG/YGTZ5uyoHTyT71d2Wq0DLRxVmL/e8gXG1fzSg+Aks62phAvOVnibI4zsh9mEwD4+HoYcR7xGCM9LCoH9IRDYuUBgL1cIbLWNtz457MJ1Xiurh8Pk4coLGgDDglhlkr62FjDG5VPENRvxI0IFhh2u5DvM1UJbZSOwqVYOm8DZciwY2gjsRtkx9GIEdqN0AfSCsbcJZR+hnMOcnIi+AIHF+O5USD4eN9kI7Oy20OwWQmAhQHECCCyzX/HZRmB/Rgjs0VQ6t26jTeeO2wgE9miKNcNNF1ozTCKwLUBgj3BTe9poz5YADeezN6187TJGYDGO6y7D5pBEdvxQ3OvLa6xME/XmFB8sVN9Li+4SMcVbqhasqQXl
*/