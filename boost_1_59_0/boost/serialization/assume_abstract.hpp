#ifndef BOOST_SERIALIZATION_ASSUME_ABSTRACT_HPP
#define BOOST_SERIALIZATION_ASSUME_ABSTRACT_HPP

// MS compatible compilers support #pragma once
#if defined(_MSC_VER)
# pragma once
#endif

/////////1/////////2/////////3/////////4/////////5/////////6/////////7/////////8
// assume_abstract_class.hpp:

// (C) Copyright 2008 Robert Ramey
// Use, modification and distribution is subject to the Boost Software
// License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

//  See http://www.boost.org for updates, documentation, and revision history.

// this is useful for compilers which don't support the boost::is_abstract

#include <boost/type_traits/is_abstract.hpp>
#include <boost/mpl/bool_fwd.hpp>

#ifndef BOOST_NO_IS_ABSTRACT

// if there is an intrinsic is_abstract defined, we don't have to do anything
#define BOOST_SERIALIZATION_ASSUME_ABSTRACT(T)

// but forward to the "official" is_abstract
namespace boost {
namespace serialization {
    template<class T>
    struct is_abstract : boost::is_abstract< T > {} ;
} // namespace serialization
} // namespace boost

#else
// we have to "make" one

namespace boost {
namespace serialization {
    template<class T>
    struct is_abstract : boost::false_type {};
} // namespace serialization
} // namespace boost

// define a macro to make explicit designation of this more transparent
#define BOOST_SERIALIZATION_ASSUME_ABSTRACT(T)        \
namespace boost {                                     \
namespace serialization {                             \
template<>                                            \
struct is_abstract< T > : boost::true_type {};        \
template<>                                            \
struct is_abstract< const T > : boost::true_type {};  \
}}                                                    \
/**/

#endif // BOOST_NO_IS_ABSTRACT

#endif //BOOST_SERIALIZATION_ASSUME_ABSTRACT_HPP

/* assume_abstract.hpp
LKQFlICykBYTIsqlOIQnx5N6Vt5swdkJgrL8aBL4DZssVWbgMXnOUpcM3pRAdcDVGRSHN6opTzFo2JjTYueKZqVmw6iNmDJ6iCNVRrbmaX58QWlhYWwq8U//hY0QBLtcYKtEXjh2bDU3zv+NsDAybW/aa4FWrx/r5QA+A7ohu7rnCNg0nibjJqkyDUcJoGa0d8duhBWQjW4XhKBQLcnCyGHrnDx49ItDIVC/pYzKEq8I6UcYLsBa26Ggx41IpkRtpnSU9GwCDo30pG2UUP2eraLhSFlrp/jE44NXYuzp0vsYNaiFPJgcEeGsF4oY/82jDqYQo86pDmbcXBYS38xJx5DYXw/4Cv9oVWB/YMWYdToYK/4tWAb6H5xosd1kL24KDYHwLs/7RZavJ61UKLO0YE5YD3S2PnbMgit0zuG6MngHY7ieu8XY0yKlNBNquxDg81sWoDkNUtjPgbXTaj29ihqrU5QeJy9XJlLE5lqvRuaEBLjJ4PjsxXlK/T17gMBzLfm+04ANHkrb8EGokpB5fOsX8E8aojU9iWEo7qdH848iSj2gIIkbf5nDOVixkFxuhNHT2jAojArNs/DEWNN8tkhxfcDnnFBzPVivMPqvT08WUZxwZ0jeIWAoz+5EzwN+w+fW17MV5LwMAzIZ0JgoLisY27QTgX14UjkC6COhANeyyFhWhqRs1wCHCBPkiorVw00yppu+pK2ISrI4rjpMBxGSVGdIu7nAwzG3ENwk7xXELM0JpGJjOo8XiG2kgS841jvX4AdO2O0reeE8KQ2EPo41jkoSkfAUlckb5PCpm80ZyWWapCdT2ssLzLpC2ONS8t2qQC8aW6pGY8PZxex5gXkNGyEz8bLVPc3Q9pd2mJGx/22q1gNXjGKHbm77Gtq9RbeamLxcidjn1buaU/pyfyErOBq1bLcdUhdnjEDIqzc1d94b5/MsxDMEF1ObZTiibpHGTe1YPT3BuftbIelX8BWDRz1vl4zP7zEDAR+0HQdvY9n311V8u945vB2cRCN3W89EzxjeZhI6Tr/3f2PZZyjudfYu6N++W42T6U4nYQ+hel1CBdctPf4DRf3RzqJD1ue5eT22fkaP09fsIDcnEUoHBG17YPLPvv1gBswDf8EJmNvDjMsl9aqfouCCOYj1Qlh3BT3tZj8bZhVD/Klh88AF68J+PSvXmQzjuRU2nGksAm4MJXQ4/9HSbxyixlCvau7plqTuqabGMKqvIicAdOA09E3Wh3Z2u1frflYLNnj2sV0XN82l6XH5SoYmrzkq6Hrn6nYgRbPq8Y+yH8Z08g/7h9Zd3tV6QYka3KZzS2ti1t22tUfLApD0zaVDasU5Cwl2mVXaooYDDwXmM1JkBBnC5rF60Y3QgfCDtVfbPEdQdQtS7IKSLtYBGI1rYJe5vmF0EOJ4EB2yeOg3xnLAxITs5vxyJDL0UVsgYCZgLVGOxLv2K/YS72urcgORDgXrPdjNCTlYaCvAlr5Bn38VNBSGjMVTTSC2fCNgqnckMOTXsct6/hDjL75zqEGaZ/CDIirJPWBHUJluaZabG87NwJxK1xZ3ZMpsnNvuas1GLuKxcik+Ntw4TABMHFIzZ5Ain5C8hXCkW4woIkI3ghB5qd05azEcjOLwIqj/8+Zc6eM5zxDbeSDsAzcKsK0WN3C3wgDTIHm7bhFRuiPoCyF0JeRuD4b2OOJqDV9PRyJmmCdU36It8XDscZ0QnXOvmKaV4sHjtBZeaXPpxVMFrxSviiRQtOhLAM1qqImylTbwmVnnrv3Z1d4kdDpbM7/4z3toSZchLbvPJ3YAxFOZgb2q7TeibI7AG9279fyYYYJ09YpxjACl2hhZ52IaLFy5C3XCb6KW24uss7vyuHBNeVt0u50WsJPZBWRzDnZHJphdGZ454jL0kdXr3hprsoOf6bwFy1JDMSqIuOc0X6aV591vhDUA5uGf+/Tdic398Hqtyyu27+SUZm4X4fpi4EH6Vac7Bp8esw8/KF0mJ0+AWmdPrSoQsNYAQ97xgPQBVn5bAYPP9Gbrwtn0oncjTM9lv8Gd2Tkvau8M4LxphvttbaIDl3MjN3ycS6uroLcrihl0RwStVyHrWRa+PodbyTbBS/kqlfcMJqayc74UB5VfZO2sHmiMrdPrKNn9sDTGpqfjcd3pYODxyqxDq2TXgLZB2Hy/yyvW3TC49KatwVy34feASzwq6VTQ/k30x3FutHQXqHDWgHVqSp+6TllrDTPEem40VFZW0LbtWFotIZ87/UN7JUZe58CiL9nSY6A3vaErNWxCJjqsl2Nnf+cyAVq6eW8VJYZYtfDiNgc2ouAdDYPb5Mc/PM9Iev8fBqduV6N1T/2t1R0m5jvJGH2zl1SMLuqnMQ01jL9+PkTQxvU4CsCcATElAmbGJLaLsrrBhJgxTl0wNZTmbB/3FrUr5Ge2OyHtIYGNipW9fGMn5qfDcDWpyXDF6vHIOth3soLh2451u2BoPxNU8OMCG5f07VG6cVREqZZxjyXRrnCoy3hFLYsTlnqBN4/uJZbaRwBkp1HSHEzAkLURKQ41GMXuCeBURe2ogwkZQ00PfHo4qOoTDx1HHcpSE+JP3mCoA+hjT5bbuQ5QQbSJKoCE/QI2MchEw3HL7EdmJ6riZU/+VRPQC2YaANwURs3jBTKHJWdBivf98BhSKI/oXBGykoZYPZQJPRviYQeb38wAUs3WqH46HYlLpilNemsBgT8AxLudzHsLx2EQAzbhAhTvCOip5XPu3gdSYlp1avr+Rp4bRLiOD1oMjsvpeNcGsu1P7tibrLff9Yzrz7Ik3DRDgZHJyPSCalhVRr6hxXZFy8ziB6JPqOezyO+nEiEB44gELLGSfBVoeqsixbBJk8mrP95H8GZxT/dfwpqPfRyWYwAILPfTgYQc8wrM/I6cXhyHf5iD3xWkIge9DJr/2siXyWZdmTZ9qVDK6rvfEfLuTfP76wnJBLMeGhtVuwAca6rrT3PuJizOMoAUeKj9F4q1A+oSQZBPECl+XS7KiCSZD+eFySelw74x7kKjfsFe28DVsoAsD2VDBe7ySKCTfbBNfE9n1TcCg/JY91mhXkw2rNK8OdUyGoytsFB/BgVVSNTqZfUqdojSmZlIAa16ZK3BL+YLaxkApdfkzDTF9dg9UEx6iEj9Hk4EqHrc82yg3HDQtigwGbTvsSkxWQRhTKgAwtMEqpdoDEaQD8yBrdetGq8JxU7Y18BSGHafYFD3zl4oQCVDgPs/QcpVLbE6Y2CQTaaiZlMagjgKJK7FMsQVhA3cOIubMcFEoCAR0HO2A7eUMR9vTUXo2YSuvyE/QrRvdwP+3rg7cefrfgw6QBQKuKNobbvfEvDp5fGg7UW4pxrr1sgwypUqrm8ARGJSaiGIQSzRrX/Y+o52Gfkan+9qxlPSuGYNst3Bbcl8QBvBB6BxNj+o1nZMm3JdMDPQs0WmEleYoEv9amCPl8BE1cOxP5q6f0jtmaMRnQTFnJxEIT4IcRFUBeyqz6wtoQL+9G55fTTxP1vhNXDbQT4JXm8NG6aoVmychS1qR758/M3h3bjXjta3mKyhbO85vQOdw05QMqLIcKR4UjiyiYfEhuYEujea9SRxR3L5gjaEifOEh3GjgDdWLIl+gu6gS5IP7651saawUuBExqxi7y/3xIZufzApdk+vQTwdlbtRgx7WBuEOD0xSTbEZUwXNe+Atwsl49ojVCE1HN0bqFbru/0A2asH3h3zp5Ur8grUh5iitHdpPllyykd5HKS5/ORb7ibMbBfA4bGIHrsHTU58OedxPg5tZytj2mUp8QOzL8iOZsgyqkGzF9HPNRkW3isBbmjmFdHLNvdTyjumdosQ7epnahqo9S7fz4E9sVppqtCfdjnrPNZi3rLH7cd/hfNKLVl9gr8d2sWh3/3tFjRmkfTfkTnnoI6kSxdE78yoffaqy3YLJelcYC4POOR+PZ4/njcgSEwKpcdLxcO/NcNbxUOeJ7EGnOihynXqquXmL3VMFbhQSGe1uGwFsvBd3POce3pfAmXLtwE+v5oG5TjBGWgOr6c+KEfxi/O/hGa3LAi4nQN+xwnR+kw4dujAwIrVs6CFM5lJ6gOA/StwUc3drm3luRoLtLR+tYPJ/srZtY0Kv8XObWQ2tx6r264L26/tLTDx1NrWDsfjRg4TQ8w0AzH1LDR6L8h0+Xl110Y2HnY8ufQI4d1DiAmaWwlQKKzk+H6ETbPE/NJsnnPk0EB/06q+eP6XD4PzdpjbXHceqihxJWm5qEcFtbpY7ji2B0cM68ud4Qy45DQ6pqODPY/+A9rYAWaHuWsyf2BZaUA5kcIK49q87ffd4LaIXHp2VJw/yiw2aW4Yybt6Jw6WfHBsQvC2X/HAs8tm0/ptGKmGD3oVfOpk628herNvIhqyexiREO9goeR4tZzOv4vUxy7tmWBkihTanm0bOfJMKB5aiOMOF8+egxgBzUdBVzNHFkaLlnhIPyHrqn0ywsFoXbMr5pyeetbbqTxynaUpewDoJt3dJHpaTsRQXphgb1QkVry2h3D3JTLJYH0KdSGWDprxJHiKtL/hE1cfc0rhkLHgQ/7whJwSrRxpVVwmaxxyY2GdJEhieEP8PlnqNqavM7r75ypVLR2nCcoP+JUu1mHeScAFJErj/o5lBGE1OWlL83zOKH58GYWrq8EUjrkBXYFY0xZ6JBWBXy+IK3gZeV5Qh7Cx0B4K1UBrKiBQ9nI7H50M/tP0gBuGVJC1336yDJPcvYMZ7WR1HTJ3YKnXzFcnBa3ETpnBUd88EeTEHRluGSwp8V5eYPo3uPd3N3PIQJf1ocWPLFs0BYbv5lZMMVKlqnTl5zcN7ywS6Xh4j02chh0IE6IPPW0aZe9d5fN55T11c39xOeqQ3c0nAcO/hUShp1OxK+biWyKZmrG1bt8zBLnbTtzLxhlwhENB/FG/OVcKyHLPSrS9s510DDrE7gfTjBjbZ+oqAX1wIKw9nH6Aqjc+o2fr/LNWFSQUp9I+L/gOg2CbdZ525/Hd8wnBuPgamPYUzQzbpdZcSGsTI/B+IhQER7badIudxOm9fU2vas0eH2MRaNmK87j4gMgVYihyO8fWxPVIZkSF3jofL+I3LxOj98DHhD1inyzQ1k7eHd/osOLzhmB7xZDQDRL4hH4NZma4W0qwalPZIGdRgGyQ7Da4fpHcWw9X5ojHcwOBVlzX8B2+on8fXRd6NOvDluAfdqq+B2x4e/tavqTDMt6mwYqzgxzynjj3wYKUfC8cw4K+GlvzShPgdoxzfztzb+UZuzgtuyghGqljk4rP6oVf1+/vac1ucma/oV5Ulk4E5ZBQpwjOFWPfcm/wWjCu/l5ZxKo36vmz1pSP4geegV3ZBGkuGEHPH3BtmNfaghxcYeMI/dBPMqGdONOj3N4YYgopxYI7s9Mh05lHlY6b6SpJDOOuy6a8EkN0ltKI6ClZieKkp/XpmcFEfyV7o3hUGF5sYFE5r/N9An6Hfmk0g03VkcH8S2BqeDvMCXrzrNzd87aKY4cTyYRqd85KvxPkvCFRwExql6Ax2AU7/B8ZCeS9XhA/EKACPHbHC1Rh4DO81afWFf1H/xsSgPh1YMDOL7pE+mQbjah3znBad7ktu/ITF++ssXwviGuzBnFmUn7tgxxFH7gqwrv/Dqq418EBdrAJGAk0lZ57mirZstR1r6twjooT5IL/wAmMu03qDWOxZqZjj/NKqDx/qH2Ton42Mx90kHSrkY5YKiRyl8xEj7kTsGf3WPBCsR/GJOnNjOJz/KSqL8/N5OloTHniH1ge4rYiID0XgvJ9H51vCtcUxD3XIgo01rkJwSy5luMe4YSuQMXCDN0hm86c8NIs6jw+ap84uWBReazDnJTZnU/8v+m1yjZOo1gBlckajbMGzeAireyn+A1K9BYa7WLQ8v/RmWHd2P+THpnNKPgCwOMxZspe3vwb1XyhLWYfT0EqMRIWtmRUYHtVBGVeJmkUVEs9yGyTWCL8cSkzCrCEkttJVMlF+E2+us2dcb+vFfffzR1rKsbnOtCc0Qjt1Iyp6/GmfPnRcOS7GDP+0cQLvJayOfSkeAY1SzIBBbs0b7vaZ/bWdj3fsomjr3hijG8EOlbyzD5251eVo5tHQ6f7cL1qmso9dt7w/rt5cE7j+Zx0cq7Vh1VQfjDbU63HTge2WfddYDYv0fV2Qx+A/J5mOJpzDfJiONIJf+ILOepXMvNfwaBMpnmU6+0pBJATOrQ6aC5o9sE5Wnx+DVkEMaNJpcx4SXR/Jq/vs9oGy24seDDIsXw1O/QU4tEXsHctDLqfnHh3ia9i1Et75idJRHs7VvUCBD5us55yTPLJcI4/7c3lBm1kjzXJ7/uWsyl1CkRUYtE/ZsZmWKN6hBV5d/QMxqnE+PM2TtDagYcnMSF9QEIF08NBWtAtmw0yuYuQnAxYQ6MRytINXBQh/ktBBgur13FrX0k4sx5bkGI0EYycLdchb1TucsUvHjhdDQktys55b8JBVytxrsLj4J1pmoQKHTjGY16fhcMVNONYecvoUmu4Lvli/UQgqFLZb4B4xb+X3ttJzpIFiMR68xJgNssiGZ2jDIH5C3uBVGmepYXqA9/c3B9jto7d6+d9sPFLl88ZgD4uND9dI9mAX5EEE4WGaSNYf65wFVATFFJvqaGapt8kViW3wc0X0Www/xBgKfi/hEXS5z6cOeuVSyFGTKDLbMIqdCosnvXn0MFJRS5L6SpAyXl4mSw6pSkoELMbRxv/kHA/ql1jB0tyTPOrhxXXi4gPOI0fN5ryVtZVLoQ+R4JvxmbdXcyjxvhddfnU4cRgwVizPGGgvWdLdehM5z+ZtFjOfGdoY89biqFNNW3CDQt5Br0dDuqvRaX00Loch9mf3qm91yZw5WgvLBuQF7HLCBALuZH7NPX/cx6HToHhow+YGxjqGlNcjR782pkqqKUu+RGm2VIM/WQdQXbxBZmruwHS6165XD1wYUTFufLd3gvaL8FvxD4soXhlLJo/uLkPp70r0+OLj6MWNfjAT+PMW/KLywPvpmK/5uDzAK1U5lpiV4co+PmQ9ALzAH+cCK3Fy129HqmmkMoOLC1a+OdgYtmVzRgfGO1xlNATvgWrlxwQmADsksWcdi+nb7cvRJCvYbTyIZZ7Wu9u5FePHN05l+YJh7GDyRXgoLYZbHTtOHyCFI8OH8Maj/tMFosN19y9fft4oyXueuDITNogTUWVm7JptwygSCJGIMcCeoV53zUe7NZ7m0Jj8gEhxWP4vB0di940tIb0e7xMuF/GmYj4V0vmfcMtIDwOMUPKVZb+kXsjbAJ3La7giVDnMDhBuf/7QhtY/Ltmr49Fzvb6iXvT1U2e3mNV9h6kbVxzcgc09nD7cZAK4HZAWg9inBeiYi8D5O2acOFa3LhgooX3m6wGOrjiZDmP+OLySvhoAgTraYbqtw1Zt/T1YBmQBSWbxOEoySUwopgSm2PjitJC72b2rHRlFLWJbD8HzWALmiZ96BV/LT2iWK4EoUYxWeE8JSUiqFAfnfOxmP6JJ35bGcOXmE1zaJ8vMOBLYoFqIqUh86AWJM6fAUTe1W39Zq0+QY8iizRjL4kYWPVPLro+80sR3yOTrxJRi752Bsh3Yg4Azmg3PNiip
*/