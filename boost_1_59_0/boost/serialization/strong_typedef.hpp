#ifndef BOOST_SERIALIZATION_STRONG_TYPEDEF_HPP
#define BOOST_SERIALIZATION_STRONG_TYPEDEF_HPP

// MS compatible compilers support #pragma once
#if defined(_MSC_VER)
# pragma once
#endif

/////////1/////////2/////////3/////////4/////////5/////////6/////////7/////////8
// strong_typedef.hpp:

// (C) Copyright 2002 Robert Ramey - http://www.rrsd.com .
// (C) Copyright 2016 Ashish Sadanandan
// Use, modification and distribution is subject to the Boost Software
// License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

//  See http://www.boost.org/libs/serialization for updates, documentation, and revision history.

// macro used to implement a strong typedef.  strong typedef
// guarentees that two types are distinguised even though the
// share the same underlying implementation.  typedef does not create
// a new type.  BOOST_STRONG_TYPEDEF(T, D) creates a new type named D
// that operates as a type T.

#include <boost/config.hpp>
#include <boost/operators.hpp>
#include <boost/type_traits/has_nothrow_assign.hpp>
#include <boost/type_traits/has_nothrow_constructor.hpp>
#include <boost/type_traits/has_nothrow_copy.hpp>

#define BOOST_STRONG_TYPEDEF(T, D)                                                                               \
struct D                                                                                                         \
    : boost::totally_ordered1< D                                                                                 \
    , boost::totally_ordered2< D, T                                                                              \
    > >                                                                                                          \
{                                                                                                                \
    T t;                                                                                                         \
    explicit D(const T& t_) BOOST_NOEXCEPT_IF(boost::has_nothrow_copy_constructor<T>::value) : t(t_) {}          \
    D() BOOST_NOEXCEPT_IF(boost::has_nothrow_default_constructor<T>::value) : t() {}                             \
    D(const D & t_) BOOST_NOEXCEPT_IF(boost::has_nothrow_copy_constructor<T>::value) : t(t_.t) {}                \
    D& operator=(const D& rhs) BOOST_NOEXCEPT_IF(boost::has_nothrow_assign<T>::value) {t = rhs.t; return *this;} \
    D& operator=(const T& rhs) BOOST_NOEXCEPT_IF(boost::has_nothrow_assign<T>::value) {t = rhs; return *this;}   \
    operator const T&() const {return t;}                                                                        \
    operator T&() {return t;}                                                                                    \
    bool operator==(const D& rhs) const {return t == rhs.t;}                                                     \
    bool operator<(const D& rhs) const {return t < rhs.t;}                                                       \
};

#endif // BOOST_SERIALIZATION_STRONG_TYPEDEF_HPP

/* strong_typedef.hpp
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
*/