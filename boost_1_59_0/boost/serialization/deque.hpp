#ifndef  BOOST_SERIALIZATION_DEQUE_HPP
#define BOOST_SERIALIZATION_DEQUE_HPP

// MS compatible compilers support #pragma once
#if defined(_MSC_VER)
# pragma once
#endif

/////////1/////////2/////////3/////////4/////////5/////////6/////////7/////////8
// deque.hpp

// (C) Copyright 2002 Robert Ramey - http://www.rrsd.com .
// Use, modification and distribution is subject to the Boost Software
// License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

//  See http://www.boost.org for updates, documentation, and revision history.

#include <deque>

#include <boost/config.hpp>

#include <boost/serialization/library_version_type.hpp>
#include <boost/serialization/collections_save_imp.hpp>
#include <boost/serialization/collections_load_imp.hpp>
#include <boost/serialization/split_free.hpp>

namespace boost {
namespace serialization {

template<class Archive, class U, class Allocator>
inline void save(
    Archive & ar,
    const std::deque<U, Allocator> &t,
    const unsigned int /* file_version */
){
    boost::serialization::stl::save_collection<
        Archive, std::deque<U, Allocator>
    >(ar, t);
}

template<class Archive, class U, class Allocator>
inline void load(
    Archive & ar,
    std::deque<U, Allocator> &t,
    const unsigned int /* file_version */
){
    const boost::serialization::library_version_type library_version(
        ar.get_library_version()
    );
    // retrieve number of elements
    item_version_type item_version(0);
    collection_size_type count;
    ar >> BOOST_SERIALIZATION_NVP(count);
    if(boost::serialization::library_version_type(3) < library_version){
        ar >> BOOST_SERIALIZATION_NVP(item_version);
    }
    stl::collection_load_impl(ar, t, count, item_version);
}

// split non-intrusive serialization function member into separate
// non intrusive save/load member functions
template<class Archive, class U, class Allocator>
inline void serialize(
    Archive & ar,
    std::deque<U, Allocator> &t,
    const unsigned int file_version
){
    boost::serialization::split_free(ar, t, file_version);
}

} // namespace serialization
} // namespace boost

#include <boost/serialization/collection_traits.hpp>

BOOST_SERIALIZATION_COLLECTION_TRAITS(std::deque)

#endif // BOOST_SERIALIZATION_DEQUE_HPP

/* deque.hpp
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
*/