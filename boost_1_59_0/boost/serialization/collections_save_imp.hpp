#ifndef BOOST_SERIALIZATION_COLLECTIONS_SAVE_IMP_HPP
#define BOOST_SERIALIZATION_COLLECTIONS_SAVE_IMP_HPP

// MS compatible compilers support #pragma once
#if defined(_MSC_VER)
# pragma once
#endif

/////////1/////////2/////////3/////////4/////////5/////////6/////////7/////////8
// collections_save_imp.hpp: serialization for stl collections

// (C) Copyright 2002 Robert Ramey - http://www.rrsd.com .
// Use, modification and distribution is subject to the Boost Software
// License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

//  See http://www.boost.org for updates, documentation, and revision history.

// helper function templates for serialization of collections

#include <boost/config.hpp>
#include <boost/core/addressof.hpp>
#include <boost/serialization/nvp.hpp>
#include <boost/serialization/serialization.hpp>
#include <boost/serialization/version.hpp>
#include <boost/serialization/collection_size_type.hpp>
#include <boost/serialization/item_version_type.hpp>

namespace boost{
namespace serialization {
namespace stl {

//////////////////////////////////////////////////////////////////////
// implementation of serialization for STL containers
//

template<class Archive, class Container>
inline void save_collection(
    Archive & ar,
    const Container &s,
    collection_size_type count)
{
    ar << BOOST_SERIALIZATION_NVP(count);
    // record number of elements
    const item_version_type item_version(
        version<typename Container::value_type>::value
    );

    ar << BOOST_SERIALIZATION_NVP(item_version);

    typename Container::const_iterator it = s.begin();
    while(count-- > 0){
        // note borland emits a no-op without the explicit namespace
        boost::serialization::save_construct_data_adl(
            ar,
            boost::addressof(*it),
            item_version
        );
        ar << boost::serialization::make_nvp("item", *it++);
    }
}

template<class Archive, class Container>
inline void save_collection(Archive & ar, const Container &s)
{
    // record number of elements
    collection_size_type count(s.size());
    save_collection(ar, s, count);
}

} // namespace stl
} // namespace serialization
} // namespace boost

#endif //BOOST_SERIALIZATION_COLLECTIONS_SAVE_IMP_HPP

/* collections_save_imp.hpp
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
*/