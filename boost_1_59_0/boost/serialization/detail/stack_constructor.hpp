#ifndef  BOOST_SERIALIZATION_DETAIL_STACK_CONSTRUCTOR_HPP
#define BOOST_SERIALIZATION_DETAIL_STACK_CONSTRUCTOR_HPP

// MS compatible compilers support #pragma once
#if defined(_MSC_VER)
# pragma once
#endif

/////////1/////////2/////////3/////////4/////////5/////////6/////////7/////////8
// stack_constructor.hpp: serialization for loading stl collections

// (C) Copyright 2002 Robert Ramey - http://www.rrsd.com .
// Use, modification and distribution is subject to the Boost Software
// License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

//  See http://www.boost.org for updates, documentation, and revision history.

#include <boost/aligned_storage.hpp>
#include <boost/serialization/serialization.hpp>

namespace boost{
namespace serialization {
namespace detail {

// reserve space on stack for an object of type T without actually
// construction such an object
template<typename T >
struct stack_allocate
{
    T * address() {
        return static_cast<T*>(storage_.address());
    }
    T & reference() {
        return * address();
    }
private:
    typedef typename boost::aligned_storage<
        sizeof(T),
        boost::alignment_of<T>::value
    > type;
    type storage_;
};

// construct element on the stack
template<class Archive, class T>
struct stack_construct : public stack_allocate<T>
{
    stack_construct(Archive & ar, const unsigned int version){
        // note borland emits a no-op without the explicit namespace
        boost::serialization::load_construct_data_adl(
            ar,
            this->address(),
            version
        );
    }
    ~stack_construct(){
        this->address()->~T(); // undo load_construct_data above
    }
};

} // detail
} // serializaition
} // boost

#endif //  BOOST_SERIALIZATION_DETAIL_STACH_CONSTRUCTOR_HPP

/* stack_constructor.hpp
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
*/