#ifndef BOOST_SERIALIZATION_LIST_HPP
#define BOOST_SERIALIZATION_LIST_HPP

// MS compatible compilers support #pragma once
#if defined(_MSC_VER)
# pragma once
#endif

/////////1/////////2/////////3/////////4/////////5/////////6/////////7/////////8
// list.hpp: serialization for stl list templates

// (C) Copyright 2002 Robert Ramey - http://www.rrsd.com .
// Use, modification and distribution is subject to the Boost Software
// License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

//  See http://www.boost.org for updates, documentation, and revision history.

#include <list>

#include <boost/config.hpp>

#include <boost/serialization/collections_save_imp.hpp>
#include <boost/serialization/collections_load_imp.hpp>

#include <boost/serialization/access.hpp>
#include <boost/serialization/nvp.hpp>
#include <boost/serialization/collection_size_type.hpp>
#include <boost/serialization/item_version_type.hpp>
#include <boost/serialization/library_version_type.hpp>
#include <boost/serialization/split_free.hpp>

namespace boost {
namespace serialization {

template<class Archive, class U, class Allocator>
inline void save(
    Archive & ar,
    const std::list<U, Allocator> &t,
    const unsigned int /* file_version */
){
    boost::serialization::stl::save_collection<
        Archive,
        std::list<U, Allocator>
    >(ar, t);
}

template<class Archive, class U, class Allocator>
inline void load(
    Archive & ar,
    std::list<U, Allocator> &t,
    const unsigned int /* file_version */
){
    const boost::serialization::library_version_type library_version(
        ar.get_library_version()
    );
    // retrieve number of elements
    item_version_type item_version(0);
    collection_size_type count;
    ar >> BOOST_SERIALIZATION_NVP(count);
    if(boost::serialization::library_version_type(3) < library_version){
        ar >> BOOST_SERIALIZATION_NVP(item_version);
    }
    stl::collection_load_impl(ar, t, count, item_version);
}

// split non-intrusive serialization function member into separate
// non intrusive save/load member functions
template<class Archive, class U, class Allocator>
inline void serialize(
    Archive & ar,
    std::list<U, Allocator> & t,
    const unsigned int file_version
){
    boost::serialization::split_free(ar, t, file_version);
}

} // serialization
} // namespace boost

#include <boost/serialization/collection_traits.hpp>

BOOST_SERIALIZATION_COLLECTION_TRAITS(std::list)

#endif // BOOST_SERIALIZATION_LIST_HPP

/* list.hpp
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
*/