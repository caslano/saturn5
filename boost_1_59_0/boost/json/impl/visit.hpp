//
// Copyright (c) 2019 Vinnie Falco (vinnie.falco@gmail.com)
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//
// Official repository: https://github.com/boostorg/json
//

#ifndef BOOST_JSON_IMPL_VISIT_HPP
#define BOOST_JSON_IMPL_VISIT_HPP

BOOST_JSON_NS_BEGIN

template<class Visitor>
auto
visit(
    Visitor&& v,
    value& jv) -> decltype(
        std::declval<Visitor>()(nullptr))
{
    switch(jv.kind())
    {
    default: // unreachable()?
    case kind::null:    return std::forward<Visitor>(v)(nullptr);
    case kind::bool_:   return std::forward<Visitor>(v)(jv.get_bool());
    case kind::int64:   return std::forward<Visitor>(v)(jv.get_int64());
    case kind::uint64:  return std::forward<Visitor>(v)(jv.get_uint64());
    case kind::double_: return std::forward<Visitor>(v)(jv.get_double());
    case kind::string:  return std::forward<Visitor>(v)(jv.get_string());
    case kind::array:   return std::forward<Visitor>(v)(jv.get_array());
    case kind::object:  return std::forward<Visitor>(v)(jv.get_object());
    }
}

template<class Visitor>
auto
visit(
    Visitor&& v,
    value const& jv) -> decltype(
        std::declval<Visitor>()(nullptr))
{
    switch (jv.kind())
    {
    default: // unreachable()?
    case kind::null:    return std::forward<Visitor>(v)(nullptr);
    case kind::bool_:   return std::forward<Visitor>(v)(jv.get_bool());
    case kind::int64:   return std::forward<Visitor>(v)(jv.get_int64());
    case kind::uint64:  return std::forward<Visitor>(v)(jv.get_uint64());
    case kind::double_: return std::forward<Visitor>(v)(jv.get_double());
    case kind::string:  return std::forward<Visitor>(v)(jv.get_string());
    case kind::array:   return std::forward<Visitor>(v)(jv.get_array());
    case kind::object:  return std::forward<Visitor>(v)(jv.get_object());
    }
}

BOOST_JSON_NS_END

#endif

/* visit.hpp
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
*/