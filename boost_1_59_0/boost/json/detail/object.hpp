//
// Copyright (c) 2019 Vinnie Falco (vinnie.falco@gmail.com)
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//
// Official repository: https://github.com/boostorg/json
//

#ifndef BOOST_JSON_DETAIL_OBJECT_HPP
#define BOOST_JSON_DETAIL_OBJECT_HPP

#include <boost/json/storage_ptr.hpp>
#include <boost/json/string_view.hpp>
#include <cstdlib>

BOOST_JSON_NS_BEGIN

class object;
class value;
class key_value_pair;

namespace detail {

class unchecked_object
{
    // each element is two values,
    // first one is a string key,
    // second one is the value.
    value* data_;
    std::size_t size_;
    storage_ptr const& sp_;

public:
    inline
    ~unchecked_object();

    unchecked_object(
        value* data,
        std::size_t size, // # of kv-pairs
        storage_ptr const& sp) noexcept
        : data_(data)
        , size_(size)
        , sp_(sp)
    {
    }

    unchecked_object(
        unchecked_object&& other) noexcept
        : data_(other.data_)
        , size_(other.size_)
        , sp_(other.sp_)
    {
        other.data_ = nullptr;
    }

    storage_ptr const&
    storage() const noexcept
    {
        return sp_;
    }

    std::size_t
    size() const noexcept
    {
        return size_;
    }

    value*
    release() noexcept
    {
        auto const data = data_;
        data_ = nullptr;
        return data;
    }
};

template<class CharRange>
std::pair<key_value_pair*, std::size_t>
find_in_object(
    object const& obj,
    CharRange key) noexcept;

extern template
BOOST_JSON_DECL
std::pair<key_value_pair*, std::size_t>
find_in_object<string_view>(
    object const&,
    string_view key) noexcept;

} // detail
BOOST_JSON_NS_END

#endif

/* object.hpp
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
*/