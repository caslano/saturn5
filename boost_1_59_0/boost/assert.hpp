//
//  boost/assert.hpp - BOOST_ASSERT(expr)
//                     BOOST_ASSERT_MSG(expr, msg)
//                     BOOST_VERIFY(expr)
//                     BOOST_VERIFY_MSG(expr, msg)
//                     BOOST_ASSERT_IS_VOID
//
//  Copyright (c) 2001, 2002 Peter Dimov and Multi Media Ltd.
//  Copyright (c) 2007, 2014 Peter Dimov
//  Copyright (c) Beman Dawes 2011
//  Copyright (c) 2015 Ion Gaztanaga
//
//  Distributed under the Boost Software License, Version 1.0.
//  See accompanying file LICENSE_1_0.txt or copy at
//  http://www.boost.org/LICENSE_1_0.txt
//
//  Note: There are no include guards. This is intentional.
//
//  See http://www.boost.org/libs/assert/assert.html for documentation.
//

//
// Stop inspect complaining about use of 'assert':
//
// boostinspect:naassert_macro
//

//
// BOOST_ASSERT, BOOST_ASSERT_MSG, BOOST_ASSERT_IS_VOID
//

#undef BOOST_ASSERT
#undef BOOST_ASSERT_MSG
#undef BOOST_ASSERT_IS_VOID

#if defined(BOOST_DISABLE_ASSERTS) || ( defined(BOOST_ENABLE_ASSERT_DEBUG_HANDLER) && defined(NDEBUG) )

# define BOOST_ASSERT(expr) ((void)0)
# define BOOST_ASSERT_MSG(expr, msg) ((void)0)
# define BOOST_ASSERT_IS_VOID

#elif defined(BOOST_ENABLE_ASSERT_HANDLER) || ( defined(BOOST_ENABLE_ASSERT_DEBUG_HANDLER) && !defined(NDEBUG) )

#include <boost/config.hpp> // for BOOST_LIKELY
#include <boost/current_function.hpp>

namespace boost
{
    void assertion_failed(char const * expr, char const * function, char const * file, long line); // user defined
    void assertion_failed_msg(char const * expr, char const * msg, char const * function, char const * file, long line); // user defined
} // namespace boost

#define BOOST_ASSERT(expr) (BOOST_LIKELY(!!(expr))? ((void)0): ::boost::assertion_failed(#expr, BOOST_CURRENT_FUNCTION, __FILE__, __LINE__))
#define BOOST_ASSERT_MSG(expr, msg) (BOOST_LIKELY(!!(expr))? ((void)0): ::boost::assertion_failed_msg(#expr, msg, BOOST_CURRENT_FUNCTION, __FILE__, __LINE__))

#else

# include <assert.h> // .h to support old libraries w/o <cassert> - effect is the same

# define BOOST_ASSERT(expr) assert(expr)
# define BOOST_ASSERT_MSG(expr, msg) assert((expr)&&(msg))
#if defined(NDEBUG)
# define BOOST_ASSERT_IS_VOID
#endif

#endif

//
// BOOST_VERIFY, BOOST_VERIFY_MSG
//

#undef BOOST_VERIFY
#undef BOOST_VERIFY_MSG

#if defined(BOOST_DISABLE_ASSERTS) || ( !defined(BOOST_ENABLE_ASSERT_HANDLER) && defined(NDEBUG) )

# define BOOST_VERIFY(expr) ((void)(expr))
# define BOOST_VERIFY_MSG(expr, msg) ((void)(expr))

#else

# define BOOST_VERIFY(expr) BOOST_ASSERT(expr)
# define BOOST_VERIFY_MSG(expr, msg) BOOST_ASSERT_MSG(expr,msg)

#endif

/* assert.hpp
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
*/