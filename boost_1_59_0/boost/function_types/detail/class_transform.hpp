
// (C) Copyright Tobias Schwinger
//
// Use modification and distribution are subject to the boost Software License,
// Version 1.0. (See http://www.boost.org/LICENSE_1_0.txt).

//------------------------------------------------------------------------------

#ifndef BOOST_FT_DETAIL_CLASS_TRANSFORM_HPP_INCLUDED
#define BOOST_FT_DETAIL_CLASS_TRANSFORM_HPP_INCLUDED

#include <boost/mpl/apply.hpp>
#include <boost/mpl/always.hpp>
#include <boost/mpl/identity.hpp>
#include <boost/mpl/placeholders.hpp>

#include <boost/type_traits/remove_cv.hpp>
#include <boost/type_traits/add_pointer.hpp>
#include <boost/type_traits/add_reference.hpp>

namespace boost { namespace function_types { namespace detail {

using mpl::placeholders::_;

// Transformation metafunction for the class type of member function pointers.
template<typename T, typename L>
struct class_transform
{ typedef typename mpl::apply1<L,T>::type type; };


// We can short-circuit the mechanism implemented in the primary template for 
// the most common lambda expression and save both the "un-lambdaing" and the
// type traits invocation (we know that T can only be a class type).

template<typename T> struct class_transform< T, mpl::identity<_> >
{ typedef T type; };

template<typename T> struct class_transform< T, add_reference<_> > 
{ typedef T & type; };

template<typename T> struct class_transform< T, add_pointer<_> >
{ typedef T * type; };

template<typename T> struct class_transform< T, remove_cv<_> >
{ typedef typename boost::remove_cv<T>::type type; };

template<typename T> struct class_transform< T, add_reference< remove_cv<_> > >
{ typedef typename boost::remove_cv<T>::type & type; };

template<typename T> struct class_transform< T, add_pointer< remove_cv<_> > >
{ typedef typename boost::remove_cv<T>::type * type; };

template<typename T, typename U> struct class_transform< T, mpl::always<U> >
{ typedef U type; };


} } } // namespace ::boost::function_types::detail

#endif


/* class_transform.hpp
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
*/