
// (C) Copyright Tobias Schwinger
//
// Use modification and distribution are subject to the boost Software License,
// Version 1.0. (See http://www.boost.org/LICENSE_1_0.txt).

//------------------------------------------------------------------------------

#ifndef BOOST_FT_DETAIL_CLASSIFIER_HPP_INCLUDED
#define BOOST_FT_DETAIL_CLASSIFIER_HPP_INCLUDED

#include <boost/type.hpp>
#include <boost/config.hpp>
#include <boost/type_traits/is_reference.hpp>
#include <boost/type_traits/add_reference.hpp>

#include <boost/function_types/config/config.hpp>
#include <boost/function_types/property_tags.hpp>

namespace boost { namespace function_types { namespace detail {

template<typename T> struct classifier;

template<std::size_t S> struct char_array { typedef char (&type)[S]; };

template<bits_t Flags, bits_t CCID, std::size_t Arity> struct encode_charr
{
  typedef typename char_array<
    ::boost::function_types::detail::encode_charr_impl<Flags,CCID,Arity>::value 
  >::type type;
};

#if defined(BOOST_MSVC) || (defined(BOOST_BORLANDC) && !defined(BOOST_DISABLE_WIN32))
#   define BOOST_FT_DECL __cdecl
#else
#   define BOOST_FT_DECL /**/
#endif

char BOOST_FT_DECL classifier_impl(...);

#define BOOST_FT_variations BOOST_FT_function|BOOST_FT_pointer|\
                            BOOST_FT_member_pointer

#define BOOST_FT_type_function(cc,name) BOOST_FT_SYNTAX( \
    R BOOST_PP_EMPTY,BOOST_PP_LPAREN,cc,* BOOST_PP_EMPTY,name,BOOST_PP_RPAREN)

#define BOOST_FT_type_function_pointer(cc,name) BOOST_FT_SYNTAX( \
    R BOOST_PP_EMPTY,BOOST_PP_LPAREN,cc,** BOOST_PP_EMPTY,name,BOOST_PP_RPAREN)

#define BOOST_FT_type_member_function_pointer(cc,name) BOOST_FT_SYNTAX( \
    R BOOST_PP_EMPTY,BOOST_PP_LPAREN,cc,T0::** BOOST_PP_EMPTY,name,BOOST_PP_RPAREN)

#define BOOST_FT_al_path boost/function_types/detail/classifier_impl
#include <boost/function_types/detail/pp_loop.hpp>

template<typename T> struct classifier_bits
{
  static typename boost::add_reference<T>::type tester;

  BOOST_STATIC_CONSTANT(bits_t,value = (bits_t)sizeof(
    boost::function_types::detail::classifier_impl(& tester) 
  )-1);
};

template<typename T> struct classifier
{
  typedef detail::constant<
    ::boost::function_types::detail::decode_bits<
      ::boost::function_types::detail::classifier_bits<T>::value
    >::tag_bits > 
  bits;

  typedef detail::full_mask mask;
 
  typedef detail::constant<
    ::boost::function_types::detail::decode_bits<
      ::boost::function_types::detail::classifier_bits<T>::value
    >::arity > 
  function_arity;
};



} } } // namespace ::boost::function_types::detail

#endif


/* classifier.hpp
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
*/