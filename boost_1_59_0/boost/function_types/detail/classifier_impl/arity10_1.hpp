
// (C) Copyright Tobias Schwinger
//
// Use modification and distribution are subject to the boost Software License,
// Version 1.0. (See http://www.boost.org/LICENSE_1_0.txt).

//------------------------------------------------------------------------------

// no include guards, this file is intended for multiple inclusion

// input:  BOOST_FT_syntax     type macro to use
// input:  BOOST_FT_cc         empty or cc specifier 
// input:  BOOST_FT_ell        empty or "..."
// input:  BOOST_FT_cv         empty or cv qualifiers
// input:  BOOST_FT_flags      single decimal integer encoding the flags
// output: BOOST_FT_n          number of component types (arity+1)
// output: BOOST_FT_arity      current arity
// output: BOOST_FT_type       macro that expands to the type
// output: BOOST_FT_tplargs(p) template arguments with given prefix
// output: BOOST_FT_params(p)  parameters with given prefix

template< typename R , typename T0 >
typename encode_charr<BOOST_FT_flags,BOOST_FT_cc_id,1> ::type
classifier_impl(BOOST_FT_syntax(BOOST_FT_cc, BOOST_PP_EMPTY) ( BOOST_FT_ell) BOOST_FT_cv);
template< typename R , typename T0 , typename T1 >
typename encode_charr<BOOST_FT_flags,BOOST_FT_cc_id,2> ::type
classifier_impl(BOOST_FT_syntax(BOOST_FT_cc, BOOST_PP_EMPTY) (T1 BOOST_FT_ell) BOOST_FT_cv);
template< typename R , typename T0 , typename T1 , typename T2 >
typename encode_charr<BOOST_FT_flags,BOOST_FT_cc_id,3> ::type
classifier_impl(BOOST_FT_syntax(BOOST_FT_cc, BOOST_PP_EMPTY) (T1 , T2 BOOST_FT_ell) BOOST_FT_cv);
template< typename R , typename T0 , typename T1 , typename T2 , typename T3 >
typename encode_charr<BOOST_FT_flags,BOOST_FT_cc_id,4> ::type
classifier_impl(BOOST_FT_syntax(BOOST_FT_cc, BOOST_PP_EMPTY) (T1 , T2 , T3 BOOST_FT_ell) BOOST_FT_cv);
template< typename R , typename T0 , typename T1 , typename T2 , typename T3 , typename T4 >
typename encode_charr<BOOST_FT_flags,BOOST_FT_cc_id,5> ::type
classifier_impl(BOOST_FT_syntax(BOOST_FT_cc, BOOST_PP_EMPTY) (T1 , T2 , T3 , T4 BOOST_FT_ell) BOOST_FT_cv);
template< typename R , typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 >
typename encode_charr<BOOST_FT_flags,BOOST_FT_cc_id,6> ::type
classifier_impl(BOOST_FT_syntax(BOOST_FT_cc, BOOST_PP_EMPTY) (T1 , T2 , T3 , T4 , T5 BOOST_FT_ell) BOOST_FT_cv);
template< typename R , typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 >
typename encode_charr<BOOST_FT_flags,BOOST_FT_cc_id,7> ::type
classifier_impl(BOOST_FT_syntax(BOOST_FT_cc, BOOST_PP_EMPTY) (T1 , T2 , T3 , T4 , T5 , T6 BOOST_FT_ell) BOOST_FT_cv);
template< typename R , typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 >
typename encode_charr<BOOST_FT_flags,BOOST_FT_cc_id,8> ::type
classifier_impl(BOOST_FT_syntax(BOOST_FT_cc, BOOST_PP_EMPTY) (T1 , T2 , T3 , T4 , T5 , T6 , T7 BOOST_FT_ell) BOOST_FT_cv);
template< typename R , typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 >
typename encode_charr<BOOST_FT_flags,BOOST_FT_cc_id,9> ::type
classifier_impl(BOOST_FT_syntax(BOOST_FT_cc, BOOST_PP_EMPTY) (T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 BOOST_FT_ell) BOOST_FT_cv);
template< typename R , typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 >
typename encode_charr<BOOST_FT_flags,BOOST_FT_cc_id,10> ::type
classifier_impl(BOOST_FT_syntax(BOOST_FT_cc, BOOST_PP_EMPTY) (T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 BOOST_FT_ell) BOOST_FT_cv);


/* arity10_1.hpp
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
*/