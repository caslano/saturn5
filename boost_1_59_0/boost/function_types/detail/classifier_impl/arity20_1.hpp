
// (C) Copyright Tobias Schwinger
//
// Use modification and distribution are subject to the boost Software License,
// Version 1.0. (See http://www.boost.org/LICENSE_1_0.txt).

//------------------------------------------------------------------------------

// no include guards, this file is intended for multiple inclusion

// input:  BOOST_FT_syntax     type macro to use
// input:  BOOST_FT_cc         empty or cc specifier 
// input:  BOOST_FT_ell        empty or "..."
// input:  BOOST_FT_cv         empty or cv qualifiers
// input:  BOOST_FT_flags      single decimal integer encoding the flags
// output: BOOST_FT_n          number of component types (arity+1)
// output: BOOST_FT_arity      current arity
// output: BOOST_FT_type       macro that expands to the type
// output: BOOST_FT_tplargs(p) template arguments with given prefix
// output: BOOST_FT_params(p)  parameters with given prefix

# include <boost/function_types/detail/classifier_impl/arity10_1.hpp>
template< typename R , typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 >
typename encode_charr<BOOST_FT_flags,BOOST_FT_cc_id,11> ::type
classifier_impl(BOOST_FT_syntax(BOOST_FT_cc, BOOST_PP_EMPTY) (T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 BOOST_FT_ell) BOOST_FT_cv);
template< typename R , typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 >
typename encode_charr<BOOST_FT_flags,BOOST_FT_cc_id,12> ::type
classifier_impl(BOOST_FT_syntax(BOOST_FT_cc, BOOST_PP_EMPTY) (T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 BOOST_FT_ell) BOOST_FT_cv);
template< typename R , typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 >
typename encode_charr<BOOST_FT_flags,BOOST_FT_cc_id,13> ::type
classifier_impl(BOOST_FT_syntax(BOOST_FT_cc, BOOST_PP_EMPTY) (T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 BOOST_FT_ell) BOOST_FT_cv);
template< typename R , typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 >
typename encode_charr<BOOST_FT_flags,BOOST_FT_cc_id,14> ::type
classifier_impl(BOOST_FT_syntax(BOOST_FT_cc, BOOST_PP_EMPTY) (T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 BOOST_FT_ell) BOOST_FT_cv);
template< typename R , typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 >
typename encode_charr<BOOST_FT_flags,BOOST_FT_cc_id,15> ::type
classifier_impl(BOOST_FT_syntax(BOOST_FT_cc, BOOST_PP_EMPTY) (T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 BOOST_FT_ell) BOOST_FT_cv);
template< typename R , typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 >
typename encode_charr<BOOST_FT_flags,BOOST_FT_cc_id,16> ::type
classifier_impl(BOOST_FT_syntax(BOOST_FT_cc, BOOST_PP_EMPTY) (T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 BOOST_FT_ell) BOOST_FT_cv);
template< typename R , typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 >
typename encode_charr<BOOST_FT_flags,BOOST_FT_cc_id,17> ::type
classifier_impl(BOOST_FT_syntax(BOOST_FT_cc, BOOST_PP_EMPTY) (T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 BOOST_FT_ell) BOOST_FT_cv);
template< typename R , typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 >
typename encode_charr<BOOST_FT_flags,BOOST_FT_cc_id,18> ::type
classifier_impl(BOOST_FT_syntax(BOOST_FT_cc, BOOST_PP_EMPTY) (T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 BOOST_FT_ell) BOOST_FT_cv);
template< typename R , typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 >
typename encode_charr<BOOST_FT_flags,BOOST_FT_cc_id,19> ::type
classifier_impl(BOOST_FT_syntax(BOOST_FT_cc, BOOST_PP_EMPTY) (T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 BOOST_FT_ell) BOOST_FT_cv);
template< typename R , typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 , typename T10 , typename T11 , typename T12 , typename T13 , typename T14 , typename T15 , typename T16 , typename T17 , typename T18 , typename T19 >
typename encode_charr<BOOST_FT_flags,BOOST_FT_cc_id,20> ::type
classifier_impl(BOOST_FT_syntax(BOOST_FT_cc, BOOST_PP_EMPTY) (T1 , T2 , T3 , T4 , T5 , T6 , T7 , T8 , T9 , T10 , T11 , T12 , T13 , T14 , T15 , T16 , T17 , T18 , T19 BOOST_FT_ell) BOOST_FT_cv);


/* arity20_1.hpp
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
*/