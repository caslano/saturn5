
// (C) Copyright Tobias Schwinger
//
// Use modification and distribution are subject to the boost Software License,
// Version 1.0. (See http://www.boost.org/LICENSE_1_0.txt).

//------------------------------------------------------------------------------

// no include guards, this file is intended for multiple inclusion

#if   BOOST_FT_ARITY_LOOP_PREFIX

#   ifndef BOOST_FT_DETAIL_SYNTHESIZE_IMPL_MASTER_HPP_INCLUDED
#   define BOOST_FT_DETAIL_SYNTHESIZE_IMPL_MASTER_HPP_INCLUDED
#     include <boost/preprocessor/cat.hpp>
#     include <boost/preprocessor/arithmetic/dec.hpp>
#     include <boost/preprocessor/iteration/local.hpp>
#     include <boost/preprocessor/facilities/empty.hpp>
#     include <boost/preprocessor/facilities/identity.hpp>
#   endif

#   define BOOST_FT_type_name type

#   ifdef BOOST_FT_flags
#     define BOOST_FT_make_type(flags,cc,arity) BOOST_FT_make_type_impl(flags,cc,arity)
#     define BOOST_FT_make_type_impl(flags,cc,arity) make_type_ ## flags ## _ ## cc ## _ ## arity
#   else
BOOST_PP_EXPAND(#) define BOOST_FT_make_type(flags,cc,arity) BOOST_FT_make_type_impl(flags,cc,arity)
BOOST_PP_EXPAND(#) define BOOST_FT_make_type_impl(flags,cc,arity) make_type_ ## flags ## _ ## cc ## _ ## arity
#   endif

#   define BOOST_FT_iter(i) BOOST_PP_CAT(iter_,i)

#elif BOOST_FT_ARITY_LOOP_IS_ITERATING

template< BOOST_FT_tplargs(BOOST_PP_IDENTITY(typename)) >
struct BOOST_FT_make_type(BOOST_FT_flags,BOOST_FT_cc_id,BOOST_FT_arity)
{
  typedef BOOST_FT_type ;
};

template<> 
struct synthesize_impl_o< BOOST_FT_flags, BOOST_FT_cc_id, BOOST_FT_n > 
{ 
  template<typename S> struct synthesize_impl_i
  {
  private:
    typedef typename mpl::begin<S>::type BOOST_FT_iter(0);
#   if BOOST_FT_n > 1
#     define BOOST_PP_LOCAL_MACRO(i) typedef typename mpl::next< \
          BOOST_FT_iter(BOOST_PP_DEC(i)) >::type BOOST_FT_iter(i);
#     define BOOST_PP_LOCAL_LIMITS (1,BOOST_FT_n-1)
#     include BOOST_PP_LOCAL_ITERATE()
#   endif
  public:
    typedef typename detail::BOOST_FT_make_type(BOOST_FT_flags,BOOST_FT_cc_id,BOOST_FT_arity) 
    < typename mpl::deref< BOOST_FT_iter(0) >::type 
#   if BOOST_FT_mfp
    , typename detail::cv_traits< 
          typename mpl::deref< BOOST_FT_iter(1) >::type >::type
#   endif
#   if BOOST_FT_n > (BOOST_FT_mfp+1)
#     define BOOST_PP_LOCAL_LIMITS (BOOST_FT_mfp+1,BOOST_FT_n-1)
#     define BOOST_PP_LOCAL_MACRO(i) \
        , typename mpl::deref< BOOST_FT_iter(i) >::type
#     include BOOST_PP_LOCAL_ITERATE()
#   endif
    >::type type;
  };
};

#elif BOOST_FT_ARITY_LOOP_SUFFIX

#   ifdef BOOST_FT_flags
#     undef BOOST_FT_make_type
#     undef BOOST_FT_make_type_impl
#   else
BOOST_PP_EXPAND(#) undef BOOST_FT_make_type
BOOST_PP_EXPAND(#) undef BOOST_FT_make_type_impl
#   endif
#   undef BOOST_FT_iter
#   undef BOOST_FT_type_name

#else
#   error "attempt to use arity loop master file without loop"
#endif


/* master.hpp
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
*/