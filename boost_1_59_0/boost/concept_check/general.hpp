// Copyright David Abrahams 2006. Distributed under the Boost
// Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
#ifndef BOOST_CONCEPT_CHECK_MSVC_DWA2006429_HPP
# define BOOST_CONCEPT_CHECK_MSVC_DWA2006429_HPP

# ifdef BOOST_OLD_CONCEPT_SUPPORT
#  include <boost/concept_check/has_constraints.hpp>
#  include <boost/type_traits/conditional.hpp>
# endif


// This implementation works on GCC and Comeau, but has actually been
// fairly carefully tuned to work on GCC versions starting with
// gcc-2.95.x.  If you're trying to get an additional compiler to pass
// the tests you might consider breaking out a separate gcc.hpp and
// starting over on the general case.
namespace boost
{
  namespace concept_checking
  {
    template <void(*)()> struct instantiate {};
  }
  
  template <class ModelFn> struct concept_check_;

  template <class Model>
  void concept_check_failed()
  {
      ((Model*)0)->~Model();
  }

  template <class Model>
  struct concept_check
  {
      concept_checking::instantiate<concept_check_failed<Model> > x;
      enum { instantiate = 1 };
  };

# ifdef BOOST_OLD_CONCEPT_SUPPORT
  
  template <class Model>
  void constraint_check_failed()
  {
      ((Model*)0)->constraints();
  }

  template <class Model>
  struct constraint_check
  {
      concept_checking::instantiate<constraint_check_failed<Model> > x;
      enum { instantiate = 1 };
  };
  
  template <class Model>
  struct concept_check_<void(*)(Model)>
    : conditional<
          concept_checking::has_constraints<Model>::value
        , constraint_check<Model>
        , concept_check<Model>
      >::type
  {};
  
# else
  
  template <class Model>
  struct concept_check_<void(*)(Model)>
    : concept_check<Model>
  {};
  
# endif
  
  // Usage, in class or function context:
  //
  //     BOOST_CONCEPT_ASSERT((UnaryFunctionConcept<F,bool,int>));
#  define BOOST_CONCEPT_ASSERT( ModelInParens )                             \
  enum { BOOST_PP_CAT(boost_concept_check,__LINE__) =                       \
         ::boost::concept_check_<void(*) ModelInParens>::instantiate        \
  }
}

#endif // BOOST_CONCEPT_CHECK_MSVC_DWA2006429_HPP

/* general.hpp
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
*/