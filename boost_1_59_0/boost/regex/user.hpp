/*
 *
 * Copyright (c) 1998-2002
 * John Maddock
 *
 * Use, modification and distribution are subject to the 
 * Boost Software License, Version 1.0. (See accompanying file 
 * LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 *
 */
 
 /*
  *   LOCATION:    see http://www.boost.org for most recent version.
  *   FILE         user.hpp
  *   VERSION      see <boost/version.hpp>
  *   DESCRIPTION: User settable options.
  */

// define if you want the regex library to use the C locale
// even on Win32:
// #define BOOST_REGEX_USE_C_LOCALE

// define this is you want the regex library to use the C++
// locale:
// #define BOOST_REGEX_USE_CPP_LOCALE

// define this if the runtime library is a dll, and you
// want BOOST_REGEX_DYN_LINK to set up dll exports/imports
// with __declspec(dllexport)/__declspec(dllimport.)
// #define BOOST_REGEX_HAS_DLL_RUNTIME

// define this if you want to dynamically link to regex,
// if the runtime library is also a dll (Probably Win32 specific,
// and has no effect unless BOOST_REGEX_HAS_DLL_RUNTIME is set):
// #define BOOST_REGEX_DYN_LINK

// define this if you don't want the lib to automatically
// select its link libraries:
// #define BOOST_REGEX_NO_LIB

// define this if templates with switch statements cause problems:
// #define BOOST_REGEX_NO_TEMPLATE_SWITCH_MERGE
 
// define this to disable Win32 support when available:
// #define BOOST_REGEX_NO_W32

// define this if bool is not a real type:
// #define BOOST_REGEX_NO_BOOL

// define this if no template instances are to be placed in
// the library rather than users object files:
// #define BOOST_REGEX_NO_EXTERNAL_TEMPLATES

// define this if the forward declarations in regex_fwd.hpp
// cause more problems than they are worth:
// #define BOOST_REGEX_NO_FWD

// define this if your compiler supports MS Windows structured
// exception handling.
// #define BOOST_REGEX_HAS_MS_STACK_GUARD

// define this if you want to use the recursive algorithm
// even if BOOST_REGEX_HAS_MS_STACK_GUARD is not defined.
// NOTE: OBSOLETE!!
// #define BOOST_REGEX_RECURSIVE

// define this if you want to use the non-recursive
// algorithm, even if the recursive version would be the default.
// NOTE: OBSOLETE!!
// #define BOOST_REGEX_NON_RECURSIVE

// define this if you want to set the size of the memory blocks
// used by the non-recursive algorithm.
// #define BOOST_REGEX_BLOCKSIZE 4096

// define this if you want to set the maximum number of memory blocks
// used by the non-recursive algorithm.
// #define BOOST_REGEX_MAX_BLOCKS 1024

// define this if you want to set the maximum number of memory blocks
// cached by the non-recursive algorithm: Normally this is 16, but can be 
// higher if you have multiple threads all using boost.regex, or lower 
// if you don't want boost.regex to cache memory.
// #define BOOST_REGEX_MAX_CACHE_BLOCKS 16

// define this if you want to be able to access extended capture
// information in your sub_match's (caution this will slow things
// down quite a bit).
// #define BOOST_REGEX_MATCH_EXTRA

// define this if you want to enable support for Unicode via ICU.
// #define BOOST_HAS_ICU

// define this if you want regex to use __cdecl calling convensions, even when __fastcall is available:
// #define BOOST_REGEX_NO_FASTCALL

/* user.hpp
lEGiVJZDPVgLZWo87G2IHtav2Ka4MhhwDhmZ898Nnh4xag5Rg99Wa1MfLQvzZLPH7ZpKhKa1ra7o8qkKhI6lFBmRalMneb3uERwP35iQ6lIFshsBBNCcfqGJv39heIZYHmf9qLcbePTkIxDMKatjTIAWjQvhJpCVw0vUt+cRLhLv2RhTgYVaYBhZHSJNt46LjOJeXeNgvQh4at0/HiZ6wialipEO/B2TvUUw0YakYzKNIZXy1Wgsz74nlCUoOi3j6jGdlfLFBdoEetzM78BQQLjvBA5yHcIZBvnu9SoyBuaY5mNpLM/K1FIvT9BilEpR8HExo2vPkoK4KYT+CwOFniTi7tJHAp2eRGdESk73JUxXXk+ThIkiRdO00pAUPN4SgdJG/U4tcSzTL/O7zTXxxqkMv/G14Z4YTGUD0Od2yeIMa3MP+zhm+lWAuzar2irVobICJpPoquQYxqZwws+qy/IAmTn03YuOjQlJHGod0eym0S91Kc1EBm0k+acoDuWXaANFiEWLIaKGRnuCh3y30PiZS3FrapWJdJcFJ/sFyEWllGltqTJcGhTH9jxAewwUEXIfRMNnayeZEm6/8wIt2X5/id1SUqnU/Ah8vdIGVC5Re3LzmhqGU30eoghkNKr6+qkHcSXeJbpDcx4naYOcAOcYVlttCa8XbIiA1e6hpWbVrhPMsWNmg8cN1MhoMXlmotyNucr5fenXAfUD+RUWUkHdK55Jjbqs/SclbFXJuml0Cnzqjd3CrLv85DfQ31uvFKIlxRV1HZosB0Ye2hhKOkUGkz8N5sWXw1Zn9CGXFmcZTo+bK/LkNGrvz6SEzw3fy933mWHqGY0zqMtzzwT358uiwQsz+ic66dsi1NmSatlQsMSSnRv8p+cQkS8A6th3ZSb9tQWKMuG29lfqGz+otnR0Cg+SbewvVOW8PIlPGlUaxNNPxKWgPODiexOB42hy5sN8Z/thAYL9J6vbqV0Ud0ss3nuva/q3SlsHF3zygxf2UZpSTYlVpVztq6VABZlI/O27fyZ7kos+i8NGA2Mvpeb7Ml6AcieZ7bvRpyVLzGdtygjX6uzgLPGLCTm7S3/xNghQDlshxcGtWiPLoRGfpmyhx1cGxgnNwb3nwmDQy3AfJJkwcNO74fbtPKYops1deXPf7R03P2wN5TpLl8bWL0DzZ1sdRVlkQcU009mc+cxxMUVed6g1Z5DDzTVzPD3j2V7ay7bA3nmC8sN41BGTdkmyTyqp7ux586EHGcK0FrQpmS420J0xmdTPcsFSu0aXiiXetgEr+Hb935hzyGG8FzF68yI2km+/GrkXHk55kS42bh4aOmfYrd5P+r8WPQZt4I/4XuvBdS0GbSaI1S9auxTe8Y0U3/ALCOb12k3fEl7Pqf2YpbIyE5t8+V2ZbhOcYh4BxBVcAZxpmQ3xkVy+4KHKBvFeFpa1hla+eqIvzJmApFmnE2PSlf7UGQrNAvICkVnuc4/T6Gbc2fdmXqu0Xo7RudMuPrEgjB+midFO4COK2bxUO3EHFA8ZBxXwBqTvaW2yXKwxwAdermKZ1h7Sc02idRRt9VWyWy9uboT7FupfbYTUzGc6zOCFdg+Cefyt2lH2p9QFv05Fa+nWsJZA1op1XoWm53FUZlE5yw8Cgg7KMFr9d8i12NtE5Gh0xhmCDbLc1fFCotNWrSELWCMolU752vo2zc34ecZO2b7w7Arfs/dATnrzGSXs9D6pi35Na0nPymR3ZCHcopFOSCBMsKYWnEjIFaOmVbAdnV6ko5tP7GtxlpPMrWQVmUNTWDWMVGV6T3exSHVRJGVnhnBekCqplBug4nq8VhYbTC00TJ0uvQ9DDvA7zXfl2e3yGEwGXaVEedawWB9O7x6uNQjPwx/+tPfsW6vAiRUTVWh/A5a+eexhNGu7s58YTHxsm/vU1S67cZw1VGifGDSNl2TARNqI3MNCHIjHDKlTnDuK4urMaZaKRWSPmm5NOR5+yDNeP/gWiXdobKwim4HLQfB4SZIo43gN4tVl5O7suLtIZWaV0z/MPADaYOe8dV7l/PvkySmN2Lh5nkZm+hRiilaZvHHA4gw17MKc02svtHLO7P249apkGq+TxLFBSWT9Re4yY30gNN9GitzL7/rK3BKwIXx4FfiuhRSuxjPG8sbnGfA2KrqkNR4LsOZqI0la83OWzzBMst4OPTj7dESWLa+4tInYJRCfyLZrPz+8JJ3aWM8MMV46i5LweIa6lf41CeZEgpxAz++GlQCN3Xsck9rNioU+4byytqWENYtCmlKQ7VzpylYCps17TZneNLqidiPKHVgooZ9Q1YDInsOW8fOSeusXl4Zm5BoIZ2SaMKxDTV2XfIot+0wfaiV9TnuHrIcDStiDhti92VwQ/gyDBS0k0rpErzadb+5h9G3DsfZpZ+ihdgTbzEybia57qwHSUalB/J9N9nenwwVyYw5N/mEVv1bZhpZmuCOLfAKx8OxnvkDcluK8DRQ4BdTALRH/urFNDZH1Up6Qv2uNDxfa6RjbipesEq+i/WuF6VUOifWwkoCO0+7Pgaj4Nfn6Um988VTVJ691ZDSiGRg5WIMKiaTZHrwAcJIys60qHKkl+XL7DqUPJab3LdXw5tEHCz2MImdIpBpW2V9cDaEYYLNsEDaFFx3WpGibUmseG1Jr3utSg2UD2F5sgAvMvCtSOa6n4zbxNGGDgZJ9+ycZuYr8xkvs00yDTHIOcpXBChf2DPhpH+sfOijNZb07b4q0YuVQcU42uNkKTzPZWijPTlVaSMU81nCMFt83Jg15lcLQ4kac06LNVyvKdAq87J29xspNPbbvm1S+N7W2cI1tRKo3+5Gaq1T2O4xNHCEa39d0PE3GBuJ0MUpUq1EWqtDuRKs/7Cc7jxghYoqmI8K+O2sRqwmPYUAhjvn1r8FSroxRrOipWV15VT9Suh9o2Cs/LWnvgJ81ERuUqHIWorzO01H6eK0KsFJWlDc0K6xL4bm52i/uiZwE1QfhyrZsYorcWb1MPOEKGf2gkwm3qAmmmYF0SWDTyQk56yijSfYwBrjNhFw1vPB4rBqFu4fFPwiZgNltDihuFwBn04JDMbBxTWRQqzA8WU5pio1vyW5FocsOjSc4OU7W0/hCerbpfbhcMHZhHS6VXjSelvpKzbKATjcJc8fbS8/cWeVM5ls9U1YwlSevingo+p6468ZzcRqrmg+15BkE+U5khaYWa80w2SE2UJFu7oXx7/JUsm96RFMZtz8160syo6MxrzUZmjMPg9AsZkabYyh+XED63eRtZp3dP9aDVagVaN11Nm8GL2YgLnG7FVS6rSa0H0Ke8V8AvcsxJVcsNj83GrRVcHpvw4lYMC20O6zQiGOm0nCfvic5bjdYmZ3P5eKnT48XHIG7Pi6+GZ0txBVPSvy4Kk8bM+7T52LXahW4UCXhTsLiKCRhzFyINajIiyqwGOp1aIziNMmzMOZCOrQZqOttEkAK8IANUCq3IBVEOqS7wcaacnNpb/7gAK3gDUfbeqFLjfeqGqfIvP56tVmyYU2usQhUH+fFDE6pzX2qbyvhseSCLpGoVaxs+E3UswdxWfxyS2RlXikQPtGzeyI3h+MywXn/chhtsbr2ssCQ9QRTj7TmrNw2IuPBtqJ2ZTvJlXHTGHwe28OUK4IWlepF/hgx7x2eLivze+ZYDFW+xLKVOZJSyiVdo1Ob8DBvfsGPknRYKrLloKs5kvRWmLVWiFqPSMeQSHLZzLNKvtPmXHxwkNEL5GQu2Fy6Us51+kT6IuN2l8O8t/5q+XBzUbLstcNXxE+KyOaMFNSod6/sF6altAHKGG5dmsJBam25KPbyA5Rxp4fFD9mUKeAL9atf6RHJVxBDNE0BBuWP81ZKHoesGiLpWBn0y5tS6TRZEzPNsJX9QyBDab3HiaQm42b106TKGYjOxL9Wn18UxqdcTEbP+odcG04J77s2flS+zWS5BKeyYJDuxRkwjeOIRU7Qqowxma8czNdS/fnQ1FMHTZOqfWHnsuW+E07UKRkQ6mLAwMQbme7ONMvyoKFSaTnQQNKc8rTOhSc8LLQtV63R/8SmuajXsxky/SmOYXUxuuL5dZriGa0S9+icliFRmmB742EvojXFijDxCNBsC+lJfQnBqqKUYFGyR37rEvEUQJC8+fqq47Ge3HdvVEaPMhqLN8g7/VLDIFvjsnZEum6cS7xQx2J5woVlAhDLhkeXtjlX87SP4sKjdWIrX1mk5U+642CplWYX0y105Xd2clk/6nKpujWcpORbHMbc07oYY0nKz+p/JvUbM/3Arix1o/UMxot0l6kp055auRmLLoE54Uqqlj07hU6oljw7LUuoxjqD75zVPd1cMGZw2k4Z7LlBHMhbUDc15woxGTRimihgbZjVOJ++2h6aSC6wnpY6MYVL87dLj6Lgw2w2lqvEoCBVipmIoKNRzqsALR7pQeE0gApGNDGFludvVY1j/WEzwmy1pUTEXoGpk2XMKVvy+2a9gmhLI+ELM2KIR1tBSvMckXkyQIFbnQmJPx6jaz5rN3j+dsp0YrTLOLq8jOYFvu7cLZd9YfCY06grGb3u1FtTakwjU87iPfP2rqUyPneglhdc8y41SMz+A8W9dPFF4Q7k4b1eVEr4Ijw+ciDcaE6mUkGqiZ2psvQTlGbExX6H31Gs4EEEj3kGXLYxOyZRWd1b/zoB7A1hZTt5AfRcy1AhzdX5oQcbS6DMOve2M0hOwwy0Q79qMyjf7rH4dwS1BPmWvkS8Dq75yelxaBoPcyklFxNm6730rPqGRMk2fKXFdJO9/0BK56+ZrRVxG9v4yljql8/tt/uaE/+1eEDTGTzqjaWDievM8nbJK66IhVcaS/siOsVDKgnPPcK5rNbUzfXSsFmn0gyv28d6X/7SkRe+veW85sUywGPBgGrkJnYXbEMqx0y6TCQNKjLrxbphVdX8HprnEUkENoeslofuZXPb+jaY6HHuhBeGdka0kuc1QjPvbqx1pDFuDrX5I6+TiYY56YomxiBwf8f4V0VMBs5Ymltcz4ZT5/F2cn7zun5S/oCImyfX6QKjewX6aWJSkHgfo0WP555N3hExhzgWXuWLCbVm+A+ms3wlExHwNghq5qEIoaPn4Z0RAcL220jNcj7W3cX16V7tIakHqfrZB6k6/dHCx28Y9Gd6dTJ2k8O/VKhlTtYLeFcX9h2bWDgyD/PqL+3sLyLO+oXfE+QFJVevLp3rBK2tybGV0U0dW+cePVRWn4QaZmQDJL/AyERY/I8Pwur2iFCggdSwfqJS6cY93uLLPpi+uTHHvTbL8jXjdH3sbKY5nKP/Nnic1dIfPDs0hd1p6+pwWssBJv1p4sy+ycN7CLMppWjdxg7M0cHMBjMCe0BpXZNfbTm6wC3SmuDUkSOy5PCRo7fUFC+jLnz6coBzg3E8U2CagwFbzx6teDpXFv77RtRJO9yrkF4ovC3F/gfNZCLzlhGdg//+dCl+5QMCRd6nUtSMro0MlfwcCZ+Y7Hmk9Lx76LrcvPPIei0GTXvmvHvffHBkKbmKEh15JDw3VlJx8ALn7rq3myRyAAAs/9NmEzvbubbRBGNe9zu9+dVIT7NAL0CNv4JHkWGMurwsVL29VJ2b6yynvKQBeCp/NIbyF2UF663feMyiagS81p5/RC4Ihjzo3uo9iVEhyaaX5nT/RpFfoUArGS5zw9neqgCnaam51UBQdnGcOc6oIXQovsbEfrO/ZeMzeAO426QkX2/zGus7fcRy585QThnRMPjFB78GyXHxNP/54ptA+G+LSDrilkVXjwpDeu2ltOodRpIM+oSTffXMhXGhygWMrK7uBtKgpcz6HVG9/hEsWlgtBT/xHsMKDYjC+SqjNeWLEZdmCu+6rbL3wC3A3Hn9r1FmgmCBhKg3JqR6kgm5oTleBJlBu+Jw1n7y7bBdvJVMJ6Srm4k9vdDGFTzbcEVTaxdam6XGFA410bFRP3Zvs7I+NnkPLMMNblC2o0bYhavhcRJMabgOveWli3k+tcyux0yXTTMGp0rLT2qljq19w+BxLZKDUfGb2rmhgwSsOoUd0UlXfrqgKI+F+glIyjUh2hx5A775sde+UNjk+My9zN3K2Os9AZqjCVijdVcXj4pZiF2l+fe0IZZE+2dJlo8jWAUzSgR5YLbJtDXCB3f5x6wsNov9B7A0F0azLYG9ws8y9oX6dA3UdL0g4S1r0/mnSszdEu/VhInnmssSa4INC5FF7iYvZerkUA/WbrrE9ke1q7nVJwprAqXwOYRB8VX2LBNEN4C1s0YuFwr7xqtQfEq40tnISTLvdlMUB3oypjW8e0Eun0GRkEsbrG2HWifG0Z3kBIe0j9s8vEyTv/MsSn+bm5Ej2Fu6lZbCunR2SetGT0r3BpFxixTttdV7p8vAE8oW2GTFwFRqYi/sTquGkiJ0r1N9w0MfzY7Kb/BAvVUu+bdXHszVoZKPeGnaC8hyHrwPW60qpMoHq2IvBQZz6Vo83Lu+66BpPGsjpaeh3oce2LzJRPSGpGXoKbW7pUXkaG0L7DR4hn7RzCrnydWXeWvzKv5Rl2mEylfPzs4sJRZFD/RXAR5FJ3Gay/CHabzosDd5nvtZOTudyuBPQ8V1ldOc5FQGsbfY+PQKHO8G53cBNhXotzcx1U7Ux1UxVQ2a84fY6kf1ZSwiPZyGajbRXtL53k8GxEU16LcjseV+9WUNIj0suiqv9CdXYuy+6dVzo0JaLyFM/1OfUCzl23fK0uGl8bl2vflMVc9e5NmL2Ned921ZA/culao/33o9py73NxHah6jOjVDbyyCJST3ZA/c3xXzPVLRIhQxpmE8JNJeoTW3ChuFtY05e9ct54YOLOlZtNl2MW/uN6IEOHyyD8dV4x9oa6ZL3EV6TROedaI40lTgPcoUPZsm/jzkLJuFwC2hYrWztplpfhZW4mJ+bLXiDfzkzmwNm+ikCnUyPM/Hgk4/GGQ3cFGs9FkgpJkB/5UjRPp/uUAkXkqSb0ZiREEuXHIFrk+DUz8L8GWz5w53vbT099BQ3KldMVuuWu/yBMyhUWJoyJgLYDFXEGkFWfKB4cmTSSYHMy/DrMm4ovr6AP4q6fipz//XvKgq8IDOIlWJdlIyVcZ2cTFRkjR8YtGDHf8otLCnu0XfTz8Ekww1XPBLYj1KgGpdlh81FgYeFVFPTlAFHUe8GUhWffW89LQ0foiRMDmvjrKV0tSOvDINi0nknIqyrTd957szcUjzyiL0aTabbCg9Bo/tkbnq7lCK5cjdws2Xt5JqEFcpWhmJOPAALnKFW+OZ5KOoaH6GaH+uQpDjhDLR8tzVHR+NJa5aiY6zc2eH7+VMsgicBWePJwo+QTPUZLUCy4XBEJdLJvXgYPqFU1B3epnU2EetkbIHbyB/hlDmavThWkAXrygYPMXuRg55NfmrhNs4CgmC/tAuUFr9VniME6ywsPQfE/UomxnYB5dyeOBb3fn60uSjJfn+7SyTIS39sHHlL+iaL5OZyszSE6DyXSGYsi9OdMxaAItAN3111bRZqpbYJ4er4w2BPlyys30T9i/KR8yc0Zqfq6QvqDUNhGxbv4QStDLpMltFts1ZzYpaH/TgE99ajcS+T8WnfOEM9nh+QUoz6B0/5Z3WOC2YWBnXa
*/