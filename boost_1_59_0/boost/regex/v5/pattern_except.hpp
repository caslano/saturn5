/*
 *
 * Copyright (c) 1998-2002
 * John Maddock
 *
 * Use, modification and distribution are subject to the 
 * Boost Software License, Version 1.0. (See accompanying file 
 * LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 *
 */
 
 /*
  *   LOCATION:    see http://www.boost.org for most recent version.
  *   FILE         pattern_except.hpp
  *   VERSION      see <boost/version.hpp>
  *   DESCRIPTION: Declares pattern-matching exception classes.
  */

#ifndef BOOST_RE_V5_PAT_EXCEPT_HPP
#define BOOST_RE_V5_PAT_EXCEPT_HPP

#ifndef BOOST_REGEX_CONFIG_HPP
#include <boost/regex/config.hpp>
#endif

#include <cstddef>
#include <stdexcept>
#include <boost/regex/v5/error_type.hpp>
#include <boost/regex/v5/regex_traits_defaults.hpp>

namespace boost{

#ifdef BOOST_REGEX_MSVC
#pragma warning(push)
#pragma warning(disable : 4275)
#if BOOST_REGEX_MSVC >= 1800
#pragma warning(disable : 26812 4459)
#endif
#endif
class regex_error : public std::runtime_error
{
public:
   explicit regex_error(const std::string& s, regex_constants::error_type err = regex_constants::error_unknown, std::ptrdiff_t pos = 0)
      : std::runtime_error(s)
      , m_error_code(err)
      , m_position(pos)
   {
   }
   explicit regex_error(regex_constants::error_type err)
      : std::runtime_error(::boost::BOOST_REGEX_DETAIL_NS::get_default_error_string(err))
      , m_error_code(err)
      , m_position(0)
   {
   }
   ~regex_error() noexcept override {}
   regex_constants::error_type code()const
   { return m_error_code; }
   std::ptrdiff_t position()const
   { return m_position; }
   void raise()const 
   {
#ifndef BOOST_NO_EXCEPTIONS
#ifndef BOOST_REGEX_STANDALONE
      ::boost::throw_exception(*this);
#else
      throw* this;
#endif
#endif
   }
private:
   regex_constants::error_type m_error_code;
   std::ptrdiff_t m_position;
};

typedef regex_error bad_pattern;
typedef regex_error bad_expression;

namespace BOOST_REGEX_DETAIL_NS{

template <class E>
inline void raise_runtime_error(const E& ex)
{
#ifndef BOOST_REGEX_STANDALONE
   ::boost::throw_exception(ex);
#else
   throw ex;
#endif
}

template <class traits>
void raise_error(const traits& t, regex_constants::error_type code)
{
   (void)t;  // warning suppression
   regex_error e(t.error_string(code), code, 0);
   ::boost::BOOST_REGEX_DETAIL_NS::raise_runtime_error(e);
}

}

#ifdef BOOST_REGEX_MSVC
#pragma warning(pop)
#endif

} // namespace boost

#endif

/* pattern_except.hpp
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
*/