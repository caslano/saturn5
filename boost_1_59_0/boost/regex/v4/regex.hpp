/*
 *
 * Copyright (c) 1998-2002
 * John Maddock
 *
 * Use, modification and distribution are subject to the 
 * Boost Software License, Version 1.0. (See accompanying file 
 * LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
 *
 */

 /*
  *   LOCATION:    see http://www.boost.org for most recent version.
  *   FILE         regex.cpp
  *   VERSION      see <boost/version.hpp>
  *   DESCRIPTION: Declares boost::basic_regex<> and associated
  *                functions and classes. This header is the main
  *                entry point for the template regex code.
  */

#ifndef BOOST_RE_REGEX_HPP_INCLUDED
#define BOOST_RE_REGEX_HPP_INCLUDED

#ifdef __cplusplus

// what follows is all C++ don't include in C builds!!

#ifndef BOOST_REGEX_CONFIG_HPP
#include <boost/regex/config.hpp>
#endif
#ifndef BOOST_REGEX_WORKAROUND_HPP
#include <boost/regex/v4/regex_workaround.hpp>
#endif

#ifndef BOOST_REGEX_FWD_HPP
#include <boost/regex_fwd.hpp>
#endif
#ifndef BOOST_REGEX_TRAITS_HPP
#include <boost/regex/regex_traits.hpp>
#endif
#ifndef BOOST_REGEX_RAW_BUFFER_HPP
#include <boost/regex/v4/error_type.hpp>
#endif
#ifndef BOOST_REGEX_V4_MATCH_FLAGS
#include <boost/regex/v4/match_flags.hpp>
#endif
#ifndef BOOST_REGEX_RAW_BUFFER_HPP
#include <boost/regex/v4/regex_raw_buffer.hpp>
#endif
#ifndef BOOST_RE_PAT_EXCEPT_HPP
#include <boost/regex/pattern_except.hpp>
#endif

#ifndef BOOST_REGEX_V4_CHAR_REGEX_TRAITS_HPP
#include <boost/regex/v4/char_regex_traits.hpp>
#endif
#ifndef BOOST_REGEX_V4_STATES_HPP
#include <boost/regex/v4/states.hpp>
#endif
#ifndef BOOST_REGEX_V4_REGBASE_HPP
#include <boost/regex/v4/regbase.hpp>
#endif
#ifndef BOOST_REGEX_V4_ITERATOR_TRAITS_HPP
#include <boost/regex/v4/iterator_traits.hpp>
#endif
#ifndef BOOST_REGEX_V4_BASIC_REGEX_HPP
#include <boost/regex/v4/basic_regex.hpp>
#endif
#ifndef BOOST_REGEX_V4_BASIC_REGEX_CREATOR_HPP
#include <boost/regex/v4/basic_regex_creator.hpp>
#endif
#ifndef BOOST_REGEX_V4_BASIC_REGEX_PARSER_HPP
#include <boost/regex/v4/basic_regex_parser.hpp>
#endif
#ifndef BOOST_REGEX_V4_SUB_MATCH_HPP
#include <boost/regex/v4/sub_match.hpp>
#endif
#ifndef BOOST_REGEX_FORMAT_HPP
#include <boost/regex/v4/regex_format.hpp>
#endif
#ifndef BOOST_REGEX_V4_MATCH_RESULTS_HPP
#include <boost/regex/v4/match_results.hpp>
#endif
#ifndef BOOST_REGEX_V4_PROTECTED_CALL_HPP
#include <boost/regex/v4/protected_call.hpp>
#endif
#ifndef BOOST_REGEX_MATCHER_HPP
#include <boost/regex/v4/perl_matcher.hpp>
#endif


namespace boost{
#ifdef BOOST_REGEX_NO_FWD
typedef basic_regex<char, regex_traits<char> > regex;
#ifndef BOOST_NO_WREGEX
typedef basic_regex<wchar_t, regex_traits<wchar_t> > wregex;
#endif
#endif

typedef match_results<const char*> cmatch;
typedef match_results<std::string::const_iterator> smatch;
#ifndef BOOST_NO_WREGEX
typedef match_results<const wchar_t*> wcmatch;
typedef match_results<std::wstring::const_iterator> wsmatch;
#endif

} // namespace boost
#ifndef BOOST_REGEX_MATCH_HPP
#include <boost/regex/v4/regex_match.hpp>
#endif
#ifndef BOOST_REGEX_V4_REGEX_SEARCH_HPP
#include <boost/regex/v4/regex_search.hpp>
#endif
#ifndef BOOST_REGEX_ITERATOR_HPP
#include <boost/regex/v4/regex_iterator.hpp>
#endif
#ifndef BOOST_REGEX_TOKEN_ITERATOR_HPP
#include <boost/regex/v4/regex_token_iterator.hpp>
#endif
#ifndef BOOST_REGEX_V4_REGEX_GREP_HPP
#include <boost/regex/v4/regex_grep.hpp>
#endif
#ifndef BOOST_REGEX_V4_REGEX_REPLACE_HPP
#include <boost/regex/v4/regex_replace.hpp>
#endif
#ifndef BOOST_REGEX_V4_REGEX_MERGE_HPP
#include <boost/regex/v4/regex_merge.hpp>
#endif
#ifndef BOOST_REGEX_SPLIT_HPP
#include <boost/regex/v4/regex_split.hpp>
#endif

#endif  // __cplusplus

#endif  // include
































/* regex.hpp
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
*/