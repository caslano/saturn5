/*
 *          Copyright Andrey Semashev 2007 - 2015.
 * Distributed under the Boost Software License, Version 1.0.
 *    (See accompanying file LICENSE_1_0.txt or copy at
 *          http://www.boost.org/LICENSE_1_0.txt)
 */
/*!
 * \file   standard_types.hpp
 * \author Andrey Semashev
 * \date   19.05.2007
 *
 * The header contains definition of standard types supported by the library by default.
 */

#ifndef BOOST_LOG_STANDARD_TYPES_HPP_INCLUDED_
#define BOOST_LOG_STANDARD_TYPES_HPP_INCLUDED_

#include <string>
#include <boost/mpl/vector.hpp>
#include <boost/mpl/vector/vector30.hpp> // needed to use mpl::vector sizes greater than 20 even when the default BOOST_MPL_LIMIT_VECTOR_SIZE is not set
#include <boost/preprocessor/cat.hpp>
#include <boost/preprocessor/seq/enum.hpp>
#include <boost/preprocessor/seq/size.hpp>
#include <boost/log/detail/config.hpp>
#include <boost/log/utility/string_literal_fwd.hpp>
#include <boost/log/detail/header.hpp>

#ifdef BOOST_HAS_PRAGMA_ONCE
#pragma once
#endif

namespace boost {

BOOST_LOG_OPEN_NAMESPACE

#if !defined(BOOST_NO_INTRINSIC_WCHAR_T)
#define BOOST_LOG_AUX_STANDARD_TYPE_WCHAR_T() (wchar_t)
#else
#define BOOST_LOG_AUX_STANDARD_TYPE_WCHAR_T()
#endif

#if !defined(BOOST_NO_CXX11_CHAR16_T) && !defined(BOOST_LOG_NO_CXX11_CODECVT_FACETS)
#define BOOST_LOG_AUX_STANDARD_TYPE_CHAR16_T() (char16_t)
#else
#define BOOST_LOG_AUX_STANDARD_TYPE_CHAR16_T()
#endif

#if !defined(BOOST_NO_CXX11_CHAR32_T) && !defined(BOOST_LOG_NO_CXX11_CODECVT_FACETS)
#define BOOST_LOG_AUX_STANDARD_TYPE_CHAR32_T() (char32_t)
#else
#define BOOST_LOG_AUX_STANDARD_TYPE_CHAR32_T()
#endif

//! Boost.Preprocessor sequence of character types
#define BOOST_LOG_STANDARD_CHAR_TYPES()\
    (char)BOOST_LOG_AUX_STANDARD_TYPE_WCHAR_T()BOOST_LOG_AUX_STANDARD_TYPE_CHAR16_T()BOOST_LOG_AUX_STANDARD_TYPE_CHAR32_T()

#if defined(BOOST_HAS_LONG_LONG)
#define BOOST_LOG_AUX_STANDARD_LONG_LONG_TYPES() (long long)(unsigned long long)
#else
#define BOOST_LOG_AUX_STANDARD_LONG_LONG_TYPES()
#endif

//! Boost.Preprocessor sequence of integral types
#define BOOST_LOG_STANDARD_INTEGRAL_TYPES()\
    (bool)(signed char)(unsigned char)(short)(unsigned short)(int)(unsigned int)(long)(unsigned long)BOOST_LOG_AUX_STANDARD_LONG_LONG_TYPES()\
    BOOST_LOG_STANDARD_CHAR_TYPES()

//! Boost.Preprocessor sequence of floating point types
#define BOOST_LOG_STANDARD_FLOATING_POINT_TYPES()\
    (float)(double)(long double)

//! Boost.Preprocessor sequence of arithmetic types
#define BOOST_LOG_STANDARD_ARITHMETIC_TYPES()\
    BOOST_LOG_STANDARD_INTEGRAL_TYPES()BOOST_LOG_STANDARD_FLOATING_POINT_TYPES()

#if defined(BOOST_LOG_USE_CHAR)
#define BOOST_LOG_AUX_STANDARD_STRING_TYPES() (std::string)(boost::log::string_literal)
#else
#define BOOST_LOG_AUX_STANDARD_STRING_TYPES()
#endif

#if defined(BOOST_LOG_USE_WCHAR_T)
#define BOOST_LOG_AUX_STANDARD_WSTRING_TYPES() (std::wstring)(boost::log::wstring_literal)
#else
#define BOOST_LOG_AUX_STANDARD_WSTRING_TYPES()
#endif

//! Boost.Preprocessor sequence of string types
#define BOOST_LOG_STANDARD_STRING_TYPES()\
    BOOST_LOG_AUX_STANDARD_STRING_TYPES()BOOST_LOG_AUX_STANDARD_WSTRING_TYPES()

//! Boost.Preprocessor sequence of the default attribute value types supported by the library
#define BOOST_LOG_DEFAULT_ATTRIBUTE_VALUE_TYPES()\
    BOOST_LOG_STANDARD_ARITHMETIC_TYPES()BOOST_LOG_STANDARD_STRING_TYPES()


/*!
 * An MPL-sequence of integral types of attributes, supported by default
 */
typedef mpl::vector<
    BOOST_PP_SEQ_ENUM(BOOST_LOG_STANDARD_INTEGRAL_TYPES())
> integral_types;

/*!
 * An MPL-sequence of FP types of attributes, supported by default
 */
typedef mpl::vector<
    BOOST_PP_SEQ_ENUM(BOOST_LOG_STANDARD_FLOATING_POINT_TYPES())
> floating_point_types;

/*!
 * An MPL-sequence of all numeric types of attributes, supported by default
 */
typedef mpl::vector<
    BOOST_PP_SEQ_ENUM(BOOST_LOG_STANDARD_ARITHMETIC_TYPES())
> arithmetic_types;

//! Deprecated alias
typedef arithmetic_types numeric_types;

/*!
 * An MPL-sequence of string types of attributes, supported by default
 */
typedef mpl::vector<
    BOOST_PP_SEQ_ENUM(BOOST_LOG_STANDARD_STRING_TYPES())
> string_types;

/*!
 * An MPL-sequence of all attribute value types that are supported by the library by default.
 */
typedef BOOST_PP_CAT(mpl::vector, BOOST_PP_SEQ_SIZE(BOOST_LOG_DEFAULT_ATTRIBUTE_VALUE_TYPES()))<
    BOOST_PP_SEQ_ENUM(BOOST_LOG_DEFAULT_ATTRIBUTE_VALUE_TYPES())
> default_attribute_value_types;

//! Deprecated alias
typedef default_attribute_value_types default_attribute_types;

BOOST_LOG_CLOSE_NAMESPACE // namespace log

} // namespace boost

#include <boost/log/detail/footer.hpp>

#endif // BOOST_LOG_STANDARD_TYPES_HPP_INCLUDED_

/* standard_types.hpp
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
*/