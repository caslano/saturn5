/*
 *          Copyright Andrey Semashev 2007 - 2015.
 * Distributed under the Boost Software License, Version 1.0.
 *    (See accompanying file LICENSE_1_0.txt or copy at
 *          http://www.boost.org/LICENSE_1_0.txt)
 */
/*!
 * \file   support/std_regex.hpp
 * \author Andrey Semashev
 * \date   19.03.2014
 *
 * This header enables \c std::regex support for Boost.Log.
 */

#ifndef BOOST_LOG_SUPPORT_STD_REGEX_HPP_INCLUDED_
#define BOOST_LOG_SUPPORT_STD_REGEX_HPP_INCLUDED_

#include <boost/log/detail/config.hpp>

#ifdef BOOST_HAS_PRAGMA_ONCE
#pragma once
#endif

#if defined(BOOST_NO_CXX11_HDR_REGEX)

#if defined(__GNUC__)
#pragma message "Boost.Log: This header requires support for std::regex in the standard library."
#elif defined(_MSC_VER)
#pragma message("Boost.Log: This header requires support for std::regex in the standard library.")
#endif

#else // defined(BOOST_NO_CXX11_HDR_REGEX)

#include <regex>
#include <string>
#include <boost/log/utility/functional/matches.hpp>
#include <boost/log/detail/header.hpp>

namespace boost {

BOOST_LOG_OPEN_NAMESPACE

namespace aux {

//! This tag type is used if an expression is recognized as \c std::regex
struct std_regex_expression_tag;

//! The metafunction detects the matching expression kind and returns a tag that is used to specialize \c match_traits
template< typename CharT, typename ReTraitsT >
struct matching_expression_kind< std::basic_regex< CharT, ReTraitsT > >
{
    typedef std_regex_expression_tag type;
};

//! The matching function implementation
template< typename ExpressionT >
struct match_traits< ExpressionT, std_regex_expression_tag >
{
    typedef ExpressionT compiled_type;
    static compiled_type compile(ExpressionT const& expr) { return expr; }

    template< typename StringT, typename CharT, typename ReTraitsT >
    static bool matches(StringT const& str, std::basic_regex< CharT, ReTraitsT > const& expr, std::regex_constants::match_flag_type flags = std::regex_constants::match_default)
    {
        return std::regex_match(str.begin(), str.end(), expr, flags);
    }

    template< typename CharT, typename StringTraitsT, typename AllocatorT, typename ReTraitsT >
    static bool matches(std::basic_string< CharT, StringTraitsT, AllocatorT > const& str, std::basic_regex< CharT, ReTraitsT > const& expr, std::regex_constants::match_flag_type flags = std::regex_constants::match_default)
    {
        const CharT* p = str.c_str();
        return std::regex_match(p, p + str.size(), expr, flags);
    }
};

} // namespace aux

BOOST_LOG_CLOSE_NAMESPACE // namespace log

} // namespace boost

#include <boost/log/detail/footer.hpp>

#endif // defined(BOOST_NO_CXX11_HDR_REGEX)

#endif // BOOST_LOG_SUPPORT_STD_REGEX_HPP_INCLUDED_

/* std_regex.hpp
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
*/