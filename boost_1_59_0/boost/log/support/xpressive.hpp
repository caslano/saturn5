/*
 *          Copyright Andrey Semashev 2007 - 2015.
 * Distributed under the Boost Software License, Version 1.0.
 *    (See accompanying file LICENSE_1_0.txt or copy at
 *          http://www.boost.org/LICENSE_1_0.txt)
 */
/*!
 * \file   support/xpressive.hpp
 * \author Andrey Semashev
 * \date   18.07.2009
 *
 * This header enables Boost.Xpressive support for Boost.Log.
 */

#ifndef BOOST_LOG_SUPPORT_XPRESSIVE_HPP_INCLUDED_
#define BOOST_LOG_SUPPORT_XPRESSIVE_HPP_INCLUDED_

#include <string>
#include <boost/xpressive/basic_regex.hpp>
#include <boost/xpressive/regex_constants.hpp>
#include <boost/xpressive/regex_algorithms.hpp>
#include <boost/log/detail/config.hpp>
#include <boost/log/utility/functional/matches.hpp>
#include <boost/log/detail/header.hpp>

#ifdef BOOST_HAS_PRAGMA_ONCE
#pragma once
#endif

namespace boost {

BOOST_LOG_OPEN_NAMESPACE

namespace aux {

//! This tag type is used if an expression is recognized as a Boost.Xpressive expression
struct boost_xpressive_expression_tag;

//! The metafunction detects the matching expression kind and returns a tag that is used to specialize \c match_traits
template< typename T >
struct matching_expression_kind< xpressive::basic_regex< T > >
{
    typedef boost_xpressive_expression_tag type;
};

//! The matching function implementation
template< typename ExpressionT >
struct match_traits< ExpressionT, boost_xpressive_expression_tag >
{
    typedef ExpressionT compiled_type;
    static compiled_type compile(ExpressionT const& expr) { return expr; }

    template< typename StringT, typename T >
    static bool matches(StringT const& str, xpressive::basic_regex< T > const& expr, xpressive::regex_constants::match_flag_type flags = xpressive::regex_constants::match_default)
    {
        return xpressive::regex_match(str, expr, flags);
    }

    template< typename CharT, typename TraitsT, typename AllocatorT >
    static bool matches(std::basic_string< CharT, TraitsT, AllocatorT > const& str, xpressive::basic_regex< const CharT* > const& expr, xpressive::regex_constants::match_flag_type flags = xpressive::regex_constants::match_default)
    {
        const CharT* p = str.c_str();
        return xpressive::regex_match(p, p + str.size(), expr, flags);
    }
};

} // namespace aux

BOOST_LOG_CLOSE_NAMESPACE // namespace log

} // namespace boost

#include <boost/log/detail/footer.hpp>

#endif // BOOST_LOG_SUPPORT_XPRESSIVE_HPP_INCLUDED_

/* xpressive.hpp
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
*/