/*
 *          Copyright Andrey Semashev 2007 - 2015.
 * Distributed under the Boost Software License, Version 1.0.
 *    (See accompanying file LICENSE_1_0.txt or copy at
 *          http://www.boost.org/LICENSE_1_0.txt)
 */
/*!
 * \file   support/regex.hpp
 * \author Andrey Semashev
 * \date   18.07.2009
 *
 * This header enables Boost.Regex support for Boost.Log.
 */

#ifndef BOOST_LOG_SUPPORT_REGEX_HPP_INCLUDED_
#define BOOST_LOG_SUPPORT_REGEX_HPP_INCLUDED_

#include <string>
#include <boost/regex.hpp>
#include <boost/log/detail/config.hpp>
#include <boost/log/utility/functional/matches.hpp>
#include <boost/log/detail/header.hpp>

#ifdef BOOST_HAS_PRAGMA_ONCE
#pragma once
#endif

namespace boost {

BOOST_LOG_OPEN_NAMESPACE

namespace aux {

//! This tag type is used if an expression is recognized as a Boost.Regex expression
struct boost_regex_expression_tag;

//! The metafunction detects the matching expression kind and returns a tag that is used to specialize \c match_traits
template< typename CharT, typename TraitsT >
struct matching_expression_kind< boost::basic_regex< CharT, TraitsT > >
{
    typedef boost_regex_expression_tag type;
};

//! The matching function implementation
template< typename ExpressionT >
struct match_traits< ExpressionT, boost_regex_expression_tag >
{
    typedef ExpressionT compiled_type;
    static compiled_type compile(ExpressionT const& expr) { return expr; }

    template< typename StringT, typename CharT, typename TraitsT >
    static bool matches(StringT const& str, boost::basic_regex< CharT, TraitsT > const& expr, boost::regex_constants::match_flag_type flags = boost::regex_constants::match_default)
    {
        return boost::regex_match(str.begin(), str.end(), expr, flags);
    }

    template< typename CharT, typename StringTraitsT, typename AllocatorT, typename ReTraitsT >
    static bool matches(
        std::basic_string< CharT, StringTraitsT, AllocatorT > const& str,
        boost::basic_regex< CharT, ReTraitsT > const& expr,
        boost::regex_constants::match_flag_type flags = boost::regex_constants::match_default)
    {
        const CharT* p = str.c_str();
        return boost::regex_match(p, p + str.size(), expr, flags);
    }
};

} // namespace aux

BOOST_LOG_CLOSE_NAMESPACE // namespace log

} // namespace boost

#include <boost/log/detail/footer.hpp>

#endif // BOOST_LOG_SUPPORT_REGEX_HPP_INCLUDED_

/* regex.hpp
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
*/