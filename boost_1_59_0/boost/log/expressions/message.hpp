/*
 *          Copyright Andrey Semashev 2007 - 2015.
 * Distributed under the Boost Software License, Version 1.0.
 *    (See accompanying file LICENSE_1_0.txt or copy at
 *          http://www.boost.org/LICENSE_1_0.txt)
 */
/*!
 * \file   message.hpp
 * \author Andrey Semashev
 * \date   13.07.2012
 *
 * The header contains log message keyword declaration.
 */

#ifndef BOOST_LOG_EXPRESSIONS_MESSAGE_HPP_INCLUDED_
#define BOOST_LOG_EXPRESSIONS_MESSAGE_HPP_INCLUDED_

#include <string>
#include <boost/mpl/vector.hpp>
#include <boost/log/detail/config.hpp>
#include <boost/log/detail/default_attribute_names.hpp>
#include <boost/log/expressions/keyword.hpp>
#include <boost/log/expressions/is_keyword_descriptor.hpp>
#include <boost/log/attributes/attribute_name.hpp>
#include <boost/log/detail/header.hpp>

#ifdef BOOST_HAS_PRAGMA_ONCE
#pragma once
#endif

namespace boost {

BOOST_LOG_OPEN_NAMESPACE

namespace expressions {

namespace tag {

/*!
 * Generic log message attribute descriptor.
 */
struct message :
    public keyword_descriptor
{
    // The attribute value type here is not essential since message attributes are not intended to be created via the keyword
    typedef void attribute_type;

#if defined(BOOST_LOG_USE_CHAR) && defined(BOOST_LOG_USE_WCHAR_T)
    typedef mpl::vector2< std::string, std::wstring > value_type;
#elif defined(BOOST_LOG_USE_CHAR)
    typedef std::string value_type;
#elif defined(BOOST_LOG_USE_WCHAR_T)
    typedef std::wstring value_type;
#endif

    static attribute_name get_name() { return boost::log::aux::default_attribute_names::message(); }
};

#if defined(BOOST_LOG_USE_CHAR)
/*!
 * Narrow character log message attribute descriptor.
 */
struct smessage :
    public keyword_descriptor
{
    // The attribute value type here is not essential since message attributes are not intended to be created via the keyword
    typedef void attribute_type;
    typedef std::string value_type;

    static attribute_name get_name() { return boost::log::aux::default_attribute_names::message(); }
};
#endif

#if defined(BOOST_LOG_USE_WCHAR_T)
/*!
 * Wide character log message attribute descriptor.
 */
struct wmessage :
    public keyword_descriptor
{
    // The attribute value type here is not essential since message attributes are not intended to be created via the keyword
    typedef void attribute_type;
    typedef std::wstring value_type;

    static attribute_name get_name() { return boost::log::aux::default_attribute_names::message(); }
};
#endif

} // namespace tag

/*!
 * Generic message keyword type.
 */
typedef attribute_keyword< tag::message > message_type;
/*!
 * Generic message keyword.
 */
BOOST_INLINE_VARIABLE const message_type message = {};

#if defined(BOOST_LOG_USE_CHAR)
/*!
 * Narrow message keyword type.
 */
typedef attribute_keyword< tag::smessage > smessage_type;
/*!
 * Narrow message keyword.
 */
BOOST_INLINE_VARIABLE const smessage_type smessage = {};
#endif

#if defined(BOOST_LOG_USE_WCHAR_T)
/*!
 * Wide message keyword type.
 */
typedef attribute_keyword< tag::wmessage > wmessage_type;
/*!
 * Wide message keyword.
 */
BOOST_INLINE_VARIABLE const wmessage_type wmessage = {};
#endif

} // namespace expressions

BOOST_LOG_CLOSE_NAMESPACE // namespace log

} // namespace boost

#include <boost/log/detail/footer.hpp>

#endif // BOOST_LOG_EXPRESSIONS_MESSAGE_HPP_INCLUDED_

/* message.hpp
+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
*/