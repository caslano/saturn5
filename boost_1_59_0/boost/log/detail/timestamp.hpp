/*
 *          Copyright Andrey Semashev 2007 - 2015.
 * Distributed under the Boost Software License, Version 1.0.
 *    (See accompanying file LICENSE_1_0.txt or copy at
 *          http://www.boost.org/LICENSE_1_0.txt)
 */
/*!
 * \file   timestamp.hpp
 * \author Andrey Semashev
 * \date   31.07.2011
 *
 * \brief  This header is the Boost.Log library implementation, see the library documentation
 *         at http://www.boost.org/doc/libs/release/libs/log/doc/html/index.html.
 */

#ifndef BOOST_LOG_DETAIL_TIMESTAMP_HPP_INCLUDED_
#define BOOST_LOG_DETAIL_TIMESTAMP_HPP_INCLUDED_

#include <boost/cstdint.hpp>
#include <boost/log/detail/config.hpp>
#if defined(BOOST_WINDOWS) && !defined(__CYGWIN__)
#include <boost/winapi/basic_types.hpp>
#endif
#include <boost/log/detail/header.hpp>

#ifdef BOOST_HAS_PRAGMA_ONCE
#pragma once
#endif

namespace boost {

BOOST_LOG_OPEN_NAMESPACE

namespace aux {

/*!
 * Duration between two timestamps
 */
class duration
{
    int64_t m_ticks;

public:
    explicit duration(int64_t ticks = 0) BOOST_NOEXCEPT : m_ticks(ticks) {}

#if defined(BOOST_WINDOWS) && !defined(__CYGWIN__)
    int64_t milliseconds() const { return m_ticks; }
#else
    BOOST_LOG_API int64_t milliseconds() const;
#endif
};

/*!
 * Opaque timestamp class
 */
class timestamp
{
    uint64_t m_ticks;

public:
    explicit timestamp(uint64_t ticks = 0) BOOST_NOEXCEPT : m_ticks(ticks) {}

    duration operator- (timestamp that) const
    {
        return duration(m_ticks - that.m_ticks);
    }
};

/*!
 * \fn get_timestamp
 *
 * The function returns a timestamp, in opaque units since an unspecified
 * time point. This timer is guaranteed to be monotonic, it should not
 * be affected by clock changes, either manual or seasonal. Also, it
 * should be as fast as possible.
 */
#if defined(BOOST_WINDOWS) && !defined(__CYGWIN__)

typedef uint64_t (BOOST_WINAPI_WINAPI_CC* get_tick_count_t)();
extern BOOST_LOG_API get_tick_count_t get_tick_count;

inline timestamp get_timestamp()
{
    return timestamp(get_tick_count());
}

#else

typedef timestamp (*get_timestamp_t)();
extern BOOST_LOG_API get_timestamp_t get_timestamp;

#endif

} // namespace aux

BOOST_LOG_CLOSE_NAMESPACE // namespace log

} // namespace boost

#include <boost/log/detail/footer.hpp>

#endif // BOOST_LOG_DETAIL_TIMESTAMP_HPP_INCLUDED_

/* timestamp.hpp
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
*/