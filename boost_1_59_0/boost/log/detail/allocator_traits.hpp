/*
 *             Copyright Andrey Semashev 2018.
 * Distributed under the Boost Software License, Version 1.0.
 *    (See accompanying file LICENSE_1_0.txt or copy at
 *          http://www.boost.org/LICENSE_1_0.txt)
 */
/*!
 * \file   allocator_traits.hpp
 * \author Andrey Semashev
 * \date   03.01.2018
 *
 * \brief  This header is the Boost.Log library implementation, see the library documentation
 *         at http://www.boost.org/doc/libs/release/libs/log/doc/html/index.html.
 */

#ifndef BOOST_LOG_ALLOCATOR_TRAITS_HPP_INCLUDED_
#define BOOST_LOG_ALLOCATOR_TRAITS_HPP_INCLUDED_

#include <memory>
#include <boost/log/detail/config.hpp>
#if defined(BOOST_NO_CXX11_ALLOCATOR)
#include <boost/container/allocator_traits.hpp>
#endif
#include <boost/log/utility/use_std_allocator.hpp>
#include <boost/log/detail/header.hpp>

#ifdef BOOST_HAS_PRAGMA_ONCE
#pragma once
#endif

namespace boost {

BOOST_LOG_OPEN_NAMESPACE

namespace aux {

// A portable name for allocator traits
#if !defined(BOOST_NO_CXX11_ALLOCATOR)
using std::allocator_traits;
#else
using boost::container::allocator_traits;
#endif

/*!
 * \brief A standalone trait to rebind an allocator to another type.
 *
 * The important difference from <tt>std::allocator_traits&lt;Alloc&gt;::rebind_alloc&lt;U&gt;</tt> is that this
 * trait does not require template aliases and thus is compatible with C++03. There is
 * <tt>boost::container::allocator_traits&lt;Alloc&gt;::portable_rebind_alloc&lt;U&gt;</tt>, but it is not present in <tt>std::allocator_traits</tt>.
 */
template< typename Allocator, typename U >
struct rebind_alloc
{
#if !defined(BOOST_NO_CXX11_ALLOCATOR)
    typedef typename std::allocator_traits< Allocator >::BOOST_NESTED_TEMPLATE rebind_alloc< U > type;
#else
    typedef typename boost::container::allocator_traits< Allocator >::BOOST_NESTED_TEMPLATE portable_rebind_alloc< U >::type type;
#endif
};

/*!
 * This specialization mostly exists to keep <tt>std::allocator&lt;void&gt;</tt> working.
 * The default template will attempt to instantiate the allocator type to test if it provides the nested <tt>rebind</tt> template.
 * We don't want that to happen because it prohibits using <tt>std::allocator&lt;void&gt;</tt> in C++17 and later, which deprecated
 * this allocator specialization. This specialization does not use the nested <tt>rebind</tt> template in this case.
 */
template< typename T, typename U >
struct rebind_alloc< std::allocator< T >, U >
{
    typedef std::allocator< U > type;
};

template< typename U >
struct rebind_alloc< use_std_allocator, U >
{
    typedef std::allocator< U > type;
};

} // namespace aux

BOOST_LOG_CLOSE_NAMESPACE // namespace log

} // namespace boost

#include <boost/log/detail/footer.hpp>

#endif // BOOST_LOG_ALLOCATOR_TRAITS_HPP_INCLUDED_

/* allocator_traits.hpp
RZNthTguDeo+J7wqvh3e7ChWR6A7PG1wvAF95zM1nMml+GfcXVFP+QLPhWHE39Z9j4KHkqmQiJLwXRBB/kTG2TMDyfTzb8hAn1T/XhksElcGBJ4D1kdgxbF/misANjbHFV1a6HJ+UckEYQpXWt17HUCL2B/y+CVnvqfwBIl1Th0FtCa4o7/nLgdxIzQv53MxOwNH+317RNDM1gWwp6FMVcMsvv2sFJsB9Oyhfgy7Its10bO5ParoAGuKRiy5VGXVGYmsf70g+I31X4VU00HVpJVWS5RlHN/uH5oRoRcdoIleq4/JDFMbQpf9lm2Qk2vxcwXn1WWI3v36WfVt/KvG6iuQ44wKHaiYFogQdB2ksqZSmsgxZ1oQuSQUG0NgFe/eH4NamDnpfYdbyu2Y2a1hTucO3qkmh47S0rkIzkeOf785Qxs1Bh3mupqDq4+BGHa4PY/Qv1Z7h4u0W/chySLUgR7Kp4Q6EvpKyWa5Xce/dZO9zrV9puDq5Pu/VLRv48eYv2p2T+iZ87ZyKkEUL6S/zy+NllYuyo5xDrv6JDXlBTPby5MaCBSwvfwEanT46aHz5TN/XPMohhYhkFPBER+y5NfPQh0ztwqvxXJhDaqlljDl5P+d7bztAPBVSmlXlhZZ+ZnTr/s5pdPz2uDeHTOGbDNf0Pq+wnKz2cFkpWRJZsxifkFM4tWEtiGBrXMyPG3/97GwDrilzfT1YGgi+zqGrzRNfF5g7R6biTFyjde6nMnyaAFIC+SYhb2X3zb2hoigUGFlOZLOWQAMij9QD0fGpDmQeozmisfKFv1swxzNj0YpcKFPXAK8rthDsOUkxn+mmX0mK9KCoPKkV/1CN0wHLs1aab1stFLaMcdeTkUfF1KENVHYxcJDw6BJILB9c/AGiNKM+cTPUzpGAvEIoyiy06Ia1o4TDKPLPyrrQmWmNkLVWdiIlLhfQMGyMY3fBXBeZbjhHNlDMJTrpsGYTxretFOgZpy3o1LvOKugE9A9mkQ1R+tulsxGB8mGafFBMTcx5rL7dhr7G+bkvY2hP1q/cC27N2Vay+jlOj3o8VDygJITbDkULta0/4aMeM/kWKcn683K4Ed3UW5CV1x6hZ1h00aAtucDtgD3hTg7bIEp3ilJBWsQPhsaqStkxW/3mZU21iOzW1sLNObZpZbj6VMaqf5CMExjhFN9kcglT6r8MwOCtrOSR+y3ojfTon3ckpJVTC8nQZ9zaZXQnqyPEBp3dKQ8JC/NBnUTAz7Yjvmogs63Pbu7ac6OuhklOuPY+OjhDHrqjVbdNs5nrPR13vNddod/vtzsQAM88EY2+Odq77sG+0qib/i03ncStM1o6j2QhfeR27rPly5LzDRBs+5XliEwm1Bo+Tw2J7mN67uw/C+02MIiShcLdu4roQASQsF+vhnPExC2H/B/f0enBti5J0URlExnJj4C8YLIvQarOBmXPu83qaDI8TQKFSW3zijjZ7y/oNB8tILtFh6pnLX9TTv/FZWtUgd4BHgQzdxsFsxSHMMKlGWC0W6k6NgNKOBpkMnAOKrHerOQoWUiF3csoRHXna3xtgqAA5zKGmQCY4PzwInRBccgOxeOg5vElZjSXV3/RaQJ7GxFUqYuI7tXK9MwR8+ttUu/pUI7pcp58hhpXjY2nKvA91l+DNFPdA0fn5Iqrqd4nBJu9v+QN6b6/Su90SDLVcSV1MOn2sdQ9ALBEDFeYTDQXMZjYdiVTHZOhGaJ7pK848V2EUkTu/FJCXWzbPfx1r+BpfrIOZwc3ymBWYSUKWqKNsJGrmOHdlcGnS2zFIvEdPt4BKYLQMnc1NJxOE8EkST7ezqD4hIWBGISJrHf2yu75tvENSROpO0JQ5GKQfIaD3gO8tqOh7u7irD3vFIuIEFMZ1xZiWV8mq01q+dxqPosYL1rISePRXcZJbQN7DojU+uAT8g04YS2ieA8BSDHdI8BlNAliCG0quW0AMGmahYXTC5Iok62T3TGngDmTdzcILKWeqXSlaFA/JRuowZE9Sv+B2yMFmhT6ieErsPe5+lVqCVTFO2vXAofw3uPBp2fKy5gxsHvG3+H/eJZJk0xVDa5ppyQ8S2rBsAYFUYH34AykZ7o09ruCWYIeT0NfyQjSEFIy1ImEh9CcKTtjPdhzMZ27/Y7ZhU2I4u910AV4imITnieV60W+o+h3LJOV0Q4bVIhWax+yArl4T27y1cF/ze4SgsNf4npiLR1Uh+bBsz3T3amCElVHw81xdn7WStgSnB+Td4dN/iE/ojcN5nGs0m7bdF0BL2evOPNm4c8B4DGxSJnCwX4+jk0f8t5FIf7ulC7AwURaD6S1ilVc3O0QhuB6+5NoSFz07x6Bi87zc6c1Nge7uCv4j0fO1fTuuZ9S7elM6kiQtbFtstTEciMF9EaE1BGcYSoNqgawrgkxtzJPjVKuJhYngQmEEL2Z0zhb7iTOCsygGpCK08vWOSyCPLLfHpCBvJcY54+Fju0XJ5gONmBEo5bCUgHNjGrk9kwwht8h97kvBpM2XrfFmZE1A3rQdYQB/+fnLBX7GEtIlDmffPTDnreo2X+DO2Pxz8BwUaIaEd9QbOZndJT7I1dphVx4ljeTYBEFWsFBsUwOhQWqYTHZ26CXMO0YO/E5Z4/UKhTgcdPoq98HnbEVSGk5fLIc/Esyfbnq6R7jHB5efT1GPQK6At6wwmlmni6lrTqF2kJgCw1LnG3DPvlj/dXXZ7amcFdNQwMq0rhQ1NuYiULJ4HuFw+Nc/KbFxT15qfqaqwH/n/nMSijhL1ikex8MS9sEGclTHFZdvD7bJfoz+q3CdHrh4Y03AXPqjWjJtnS3yMD2jZ4G+NsyBhmkU4EqbfuCUuE5Wkpl+hzHgohquCluaLv4a7RKZbMnkiLLjBe5yCZxLwsVUhVA4jGj34qkUGGoq5kmtmbYEH+2/Ni5Iz46YUrKQ36TncSirMOeISNGQfN7VIoJV1Bitau5oNuGaXlyYgYc8lIP3NcyCtgSUCjDYks5ftQWoPJBFCfQGIV/rjHfMmV9SID9caf8DzFp4a7TNPX6SiComTi7S9RaMm6UKBNzVXPIlRRLxIWSslQhn0K6TQOenXTehuEZPDOlWZamSaTvL8qF0cJVmX+ZV9V/Cxn7VvPA0B5YSEDw+YitP75VH9NUq8HOAVOnvV2wdIKIL5tbBojuNNm21V9MS0wyb1y58UOKDSC9kEDX+WId33OIsTQTauCcXZnuDbJh6ZhAAgLYrMrxN7LBfcmq7lTaIBv70xbklYofhngwtQwP3TGFqY0vT4DUw9lFge/9nARV49/DHNJYyryk2u1VZZhZYpQ6trjeFQwGlTaO9gE3qUfxYMf6PzLWxTfmr7LPQeYpKB9LpnFIJLuunJm8OSKZSV6mqn3X6CdetSHgA7in+rO9c5subMLLCIFLr+m4PAgIfwBAtwGV6xuZghXggHwxJGrvJ2xpfUyoEP/NpD219d/+a4PyKI4Qk1i4bmDGgGP8oqnw+LhgnGnXzmRQ1d//0qG0KR56tWTZ1nlORKr5AohVDssl4ky5Yk7UursUNkktV0dfsqdQazzrOgsID7nlpmtZa93EAEgwYycsI/97lMzdsoWuJyevgowM+35qE5DXUKS6YUYEZ0qYdnSmAWl3yjXiPglLsDqXaTBG+2iK+X+BOm7r2XDvRMzsN+Fj14n4hX83B8AB5pJbAX3yqjzfz5qsRugWyGVXj3f+tkwL4PFLoWQtRJ+4U+es0hHjaW8corP+1EVo+vJAcfFJpkYfdx8fRYyLR9hoDMgn9O9j3gcp4k90YABT9gUgTqaxOedd+Fm1OqqYpNiHLe9Xni7Qj2WDspvMIYM2CsxtnWL1uOfx1LSTVZ/eqBrU3HkAutt3Lxy1gpaK64HSKY18G9ow/M6g8Gm+iir1T2N5kJdxO8nwvN3mxJWwwwKESFnjOdhtIcuqnbqILOp+XP6aQsyzz8I/G7saFSb4kOTgUtXel1snsN1sA8y/00TaKQ+Q76E2QouVFt3WdzHbQza7E0EouViBedWoY+uNHW4eYuylQcbucHLAAP+okV+YAznxP6AwERBzM+ql+4IvTmXsXw1+bNGVzik2vSqJn2tzjTsBzoikNsWjtLTm98MK4Jiouj+mmT+DCsHJ7yBIX3ayIpS37obKIJP/w2YMm9sBfnwkNSLc1DAbRy1m656b7c8B37QZDwW/fY08Xp/2dk4k1p+g6J6YyTdyaKQ4fsRk9CAdWkxKU5AtOX9YBHFgPwr4W+oDiBOeZAWSwHHnd3rKFwc3fUTzVmHvAXT9XKi1G2VZDJNn4tH/NYyDrOMNS+KzhkzPLCR+Wdeoe30obabW9L37AOKLHbrOKOSBocVDlqP1pjttwx0fC0/nIjqVBbUpRYLfeOWobZb3DqMKeWKAiNrLf/obJNvxf+LE1sZ68vN9yGfPIMhL8suWZwj+ppbmQbNaFIWp6wE/dYcCItZGtJWRpr7G88TrZ8rjljggOhvaKgkIOtt2cFVXgSM63xD0zRLcXmXhjo+6MKQzucIdqL8pu4h/5nVasc4C9Sy8ZsC6eqMAj5apo2nbZY8DlE3lf3RUpHBLsyLaeORV2W4gf82BiGquWt4a64kzMAjzy7hqX+whlKg6Sg1x9W1wgelyvNCqQI3Y/BVzL7Ukpth+E47F/FdyLsMZdaCNkIAx/w6ZzqEw77Dbtz56dpWE3eTsPCSa3or6gaAq1w0SSal3Yfre9hO2irwFkmOAZt5marHp0cWWwDKx2jYzbyDt2sdFgYpUynBkj18wvnBaETfLyXPcMCAMYD27AePkFZT98/ZzbQUEzW8HcXR6yZesa1AlLNtcp5iUCchtylK6hooT4m3nvyv1CO2GpArX7FGcb1Slf+spxGXjGLBo82AeT9M7wsSUwTnEJ+5xKO6TLUyQHvAn614SsJmPfrPDWQ+SwC/gmeEtNmLeFPqL+HLM2/CWREwKlTqGtQgbSCOImt1YNpunLR4nDu1DiRiEhtv4PPufoonGPH0Tkiu0R2UT3zgV/VvtXGmFveQa0jbHGMMKSGfAqJPI1XihvX6LGpaTRKLq2QQndbQ/uDK9v3UxAw32ifoq1tgI2AXLtw7Xo98pFJHtc1etS3iORaDInXrEinr59NYmplUMRIiMZKl9tBP4m6Ai3Yrz4iEzxkM0f2Uce5wAS1/tjAhEYsH9mM2GL+jJkGMfItZMZO/P/BGSWfSyb+vufB6Je10YYn7SVrxeo0Q41ihLWtlZWIms23ei+bOIhABj9Ko23SvqkW/fzoVHshSMq3Qo69X+xP12N2mtA6wRKNOdLrssVdOtLpiP/I7CMXoBsBziXVz+J+oUpDPGg6glFxUsh9IIEUIjcfV6pb/CG60PnHWMDmzKt6WKb5vQjOyDeIPg4PezCDsLuWIpzXjwnFInb6sL9y48VmOmLAqoLnSOMzwJ2WQ00WCLrb6DvJwUw+mZENCXt58OwoVm+tr3M7xJQGk1BhGvXisesoBD38gxeUcPysXBt9FTRn+YO990uFbE2N4LuSep3HgHwzEIV6m7wuFmkcaK9SMngsyObIMSbxK4fVkblp9xEKfYLBS+WalYpKhql09UM21kkk07fzwz8U4NDw+CvYYDRbcmBoSEUp4AZUS3De7kP4JtudLKzGYKJ9bByALpr+bBwTVOz4tZb7Znzx0glTULv0JrRxTzZhBhTY8PF+IcOCIUOceIX7lt0Cji6z/u8gMlD6dEg9OstoS1dghM2grlZo83J15jtIV8p2zULkRVJ8UZykkQCMJP0IRakxoHNAEDiGYi7iaKBAcdMHkNLKi3Sez0DUPUZlG/BuYWzMQNpLXX+sTThvNwWtVPnqm27AZXi3R+jkr8u05mLGytgCnOPPXki5acRKVlUzLlGeLDWbJfQBDJs2emlbGU0YAX+11Uk649mWvzjVjJgkZUu8AgBSIKft3gVzbrypABWOBEhPUtQhlYTMC5RP6sS8kISOu3PEDZwCMSvjeHO6QFKhmSdiOQYCkSIr4tBajVSWSg+YKuyEVYj7vMISm6UBQYic+l0Sufcxn6YjsqrAjZrl32WNtrC8zUsPhP6mRpD4WqFfaqMPOSUKi3WV+7pzBY6ISWz2688j3RczC94qvDgAJbNB7hpEdudXweYP+bd5Uly4Yuxf9H4rN/YAqyTZf91K30F0TZgMT1FKhgbqVtJCPo6NDLpD+wsQBPSdMvvxEpPSAYB1mXFHZBy9UmN44fFWzv8uJ7KUupS7nBr50/WPEwcn8z6Mky/wSe/Ad6oNRsiOyRxYcyQh/YkUcXWHqRYf9HjC0FjtakspZtiwyezI+8TDUPAIhTYMmS/5XT4hptYf6ybEWa1sOCHkUt0rAOLs3p3bKCAYLQ0aEnz/ba2OYQ7WM3KafywvhRt4iGLyfehvKZdraHI3bOThjmV3+son3jyfDT2t63ntFBOOTuQYPphwEkDW9RO+slaSmLmN2RcFxKiai5JuXc/uUqAYUATOAd2k11X9TVcM+C5VwbsPUg+ZetikA+CfGSdcMA8KsPG6c0Wdb9ojj5cIUXWctD+94In4HYkh2sV9FcB8ww3k/QeGJThmV2qroAvu8Ly1TCSb7Kts24VA9z3gfvC1nveVjFQ1g3UJATK/GylPTJ3tQeT06ymaxidG9xY5kaLhFzlMHAh3/xrfYEjvfwuZkwDjHFMonjtYpgk9ZdhxiceAoxy3lZ8PcbEzfSTa/TNVJS5J3nt4xqbD//X3yGBNmY+a+UiG5SCS+bSWPeCkzYLei4sq96K1Yo7QpRx5hUBJiAWQYnmCNQ1q5gzPWJnmxhilkme0djr9cZ6VBNhlgUw2Ruf5TUq7zTKqNnK14ulmJBGRkDXMRAA8bTnvWfZRYZ78mm9tlHPLZn6CJCte7LNBFLPgxtHljvcZ+i81o7oI+UT3ByDd9bun+Jxye6N6Gt7gVqh9peUGhhuNOlSrfXnzhdkDUJIqmdT+9PXeTef6fzzij6Px/dWflFLTxZxKeFkGErYYLf6T69c5wbBZlwgZnf0a1aUTTsZkhIOr1xs1Sjv52Qk/B9b+kx2rsyBTp3SfdW75MS94YtEChApV0El+oqRIr9jtqJuYToXC/BI9/gUVXvxWqdO5T8XA3rJ6cYsAeNU+C2hNg2GXEgcyR96mVh9X9n72FCnaR3OCIb7Hm6EhXCy2S5ZwL6yohNCCsG4yR+TW1GdmPc+OtTVjW+XiXGdbuBtlB3AfjSnugY/EKmskjcJqmiZtwxJO4e7QB0mrZIppbZ9xL2X0EaOU2MyoilaNaaXVrrDBkBQ3qv5zWrhEnADhu+/mivPndwMPjTv4zziz3+SD/OqX0ikbppjw/RT5m8+gJ5oB6ojTIgkB8a1fgRUOK9C3turDzfhiceRjYTAhXPnTJ81GF5anJZJrkARqiwM+KqIfvqBLV1t2pinJlu3gRh7+OoHNPuy5u8ZbtSlMzu9dsBcOCwmXZtz57MDciWHbBqbXKJRJU6ZL+upmsHcpebIWSuT4jTbpmSWikV5criWtoefoeN2JCw07OVH8Oly1IshQQnbD2RYBf6dguaXF7rwO06QzEraj8VH8jL+SF71bWtT5D4sLiag+mDB5v7X6Tqbfn4tvQ
*/