/*
 *          Copyright Andrey Semashev 2007 - 2015.
 * Distributed under the Boost Software License, Version 1.0.
 *    (See accompanying file LICENSE_1_0.txt or copy at
 *          http://www.boost.org/LICENSE_1_0.txt)
 */

#include <boost/config/abi_prefix.hpp>

#if !defined(BOOST_LOG_ENABLE_WARNINGS)

#if defined(_MSC_VER) && !defined(__clang__)

#pragma warning(push, 3)
// 'm_A' : class 'A' needs to have dll-interface to be used by clients of class 'B'
#pragma warning(disable: 4251)
// non dll-interface class 'A' used as base for dll-interface class 'B'
#pragma warning(disable: 4275)
// switch statement contains 'default' but no 'case' labels
#pragma warning(disable: 4065)
// 'this' : used in base member initializer list
#pragma warning(disable: 4355)
// 'int' : forcing value to bool 'true' or 'false' (performance warning)
#pragma warning(disable: 4800)
// unreferenced formal parameter
#pragma warning(disable: 4100)
// conditional expression is constant
#pragma warning(disable: 4127)
// default constructor could not be generated
#pragma warning(disable: 4510)
// copy constructor could not be generated
#pragma warning(disable: 4511)
// assignment operator could not be generated
#pragma warning(disable: 4512)
// struct 'A' can never be instantiated - user defined constructor required
#pragma warning(disable: 4610)
// function marked as __forceinline not inlined
#pragma warning(disable: 4714)
// decorated name length exceeded, name was truncated
#pragma warning(disable: 4503)
// declaration of 'A' hides previous local declaration
#pragma warning(disable: 4456)
// declaration of 'A' hides global declaration
#pragma warning(disable: 4459)
// 'X': This function or variable may be unsafe. Consider using Y instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.
#pragma warning(disable: 4996)

#elif (defined(__GNUC__) && !(defined(__INTEL_COMPILER) || defined(__ICL) || defined(__ICC) || defined(__ECC)) \
    && (__GNUC__ * 100 + __GNUC_MINOR__) >= 406) || defined(__clang__)

// Note: clang-cl goes here as well, as it seems to support gcc-style warning control pragmas.

#pragma GCC diagnostic push
// 'var' defined but not used
#pragma GCC diagnostic ignored "-Wunused-variable"
// unused parameter 'arg'
#pragma GCC diagnostic ignored "-Wunused-parameter"
// missing initializer for member var
#pragma GCC diagnostic ignored "-Wmissing-field-initializers"

#if (__GNUC__ * 100 + __GNUC_MINOR__) >= 407
// typedef 'foo' locally defined but not used
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"
#endif

#if defined(__clang__)
// the argument to '__builtin_assume' has side effects that will be discarded
#pragma clang diagnostic ignored "-Wassume"
#endif // defined(__clang__)

#endif

#endif // !defined(BOOST_LOG_ENABLE_WARNINGS)

/* header.hpp
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
*/