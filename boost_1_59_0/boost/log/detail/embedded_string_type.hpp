/*
 *          Copyright Andrey Semashev 2007 - 2015.
 * Distributed under the Boost Software License, Version 1.0.
 *    (See accompanying file LICENSE_1_0.txt or copy at
 *          http://www.boost.org/LICENSE_1_0.txt)
 */
/*!
 * \file   embedded_string_type.hpp
 * \author Andrey Semashev
 * \date   16.08.2009
 *
 * This header is the Boost.Log library implementation, see the library documentation
 * at http://www.boost.org/doc/libs/release/libs/log/doc/html/index.html.
 */

#ifndef BOOST_LOG_DETAIL_EMBEDDED_STRING_TYPE_HPP_INCLUDED_
#define BOOST_LOG_DETAIL_EMBEDDED_STRING_TYPE_HPP_INCLUDED_

#include <string>
#include <boost/type_traits/remove_cv.hpp>
#include <boost/log/detail/config.hpp>
#include <boost/log/detail/header.hpp>

#ifdef BOOST_HAS_PRAGMA_ONCE
#pragma once
#endif

namespace boost {

BOOST_LOG_OPEN_NAMESPACE

namespace aux {

template< typename T, typename ArgT >
struct make_embedded_string_type_impl
{
    typedef ArgT type;
};

template< typename ArgT >
struct make_embedded_string_type_impl< char, ArgT >
{
    typedef std::basic_string< char > type;
};

template< typename ArgT >
struct make_embedded_string_type_impl< const char, ArgT >
{
    typedef std::basic_string< char > type;
};

template< typename ArgT >
struct make_embedded_string_type_impl< wchar_t, ArgT >
{
    typedef std::basic_string< wchar_t > type;
};

template< typename ArgT >
struct make_embedded_string_type_impl< const wchar_t, ArgT >
{
    typedef std::basic_string< wchar_t > type;
};

#if !defined(BOOST_NO_CXX11_CHAR16_T)
template< typename ArgT >
struct make_embedded_string_type_impl< char16_t, ArgT >
{
    typedef std::basic_string< char16_t > type;
};

template< typename ArgT >
struct make_embedded_string_type_impl< const char16_t, ArgT >
{
    typedef std::basic_string< char16_t > type;
};
#endif

#if !defined(BOOST_NO_CXX11_CHAR32_T)
template< typename ArgT >
struct make_embedded_string_type_impl< char32_t, ArgT >
{
    typedef std::basic_string< char32_t > type;
};

template< typename ArgT >
struct make_embedded_string_type_impl< const char32_t, ArgT >
{
    typedef std::basic_string< char32_t > type;
};
#endif

//! An auxiliary type translator to store strings by value in function objects and attribute values
template< typename ArgT >
struct make_embedded_string_type :
    public remove_cv< ArgT >
{
};

template< typename ArgT >
struct make_embedded_string_type< ArgT* > :
    public make_embedded_string_type_impl< ArgT, ArgT* >
{
};

template< typename ArgT, unsigned int CountV >
struct make_embedded_string_type< ArgT[CountV] > :
    public make_embedded_string_type_impl< ArgT, ArgT[CountV] >
{
};

template< typename ArgT, unsigned int CountV >
struct make_embedded_string_type< ArgT(&)[CountV] > :
    public make_embedded_string_type_impl< ArgT, ArgT(&)[CountV] >
{
};

} // namespace aux

BOOST_LOG_CLOSE_NAMESPACE // namespace log

} // namespace boost

#include <boost/log/detail/footer.hpp>

#endif // BOOST_LOG_DETAIL_EMBEDDED_STRING_TYPE_HPP_INCLUDED_

/* embedded_string_type.hpp
+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
*/