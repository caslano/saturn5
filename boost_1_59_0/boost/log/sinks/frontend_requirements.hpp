/*
 *          Copyright Andrey Semashev 2007 - 2015.
 * Distributed under the Boost Software License, Version 1.0.
 *    (See accompanying file LICENSE_1_0.txt or copy at
 *          http://www.boost.org/LICENSE_1_0.txt)
 */
/*!
 * \file   sinks/frontend_requirements.hpp
 * \author Andrey Semashev
 * \date   22.04.2007
 *
 * The header contains definition of requirement tags that sink backend may declare
 * with regard to frontends. These requirements ensure that a backend will not
 * be used with an incompatible frontend.
 */

#ifndef BOOST_LOG_SINKS_FRONTEND_REQUIREMENTS_HPP_INCLUDED_
#define BOOST_LOG_SINKS_FRONTEND_REQUIREMENTS_HPP_INCLUDED_

#include <boost/mpl/aux_/na.hpp>
#include <boost/mpl/placeholders.hpp>
#include <boost/mpl/inherit.hpp>
#include <boost/mpl/inherit_linearly.hpp>
#include <boost/mpl/vector.hpp>
#include <boost/preprocessor/repetition/enum_params.hpp>
#include <boost/preprocessor/repetition/enum_params_with_a_default.hpp>
#include <boost/type_traits/is_base_of.hpp>
#include <boost/log/detail/config.hpp>
#include <boost/log/detail/header.hpp>

#ifdef BOOST_HAS_PRAGMA_ONCE
#pragma once
#endif

#ifndef BOOST_LOG_COMBINE_REQUIREMENTS_LIMIT
//! The macro specifies the maximum number of requirements that can be combined with the \c combine_requirements metafunction
#define BOOST_LOG_COMBINE_REQUIREMENTS_LIMIT 5
#endif

namespace boost {

BOOST_LOG_OPEN_NAMESPACE

namespace sinks {

/*!
 * The sink backend expects pre-synchronized calls, all needed synchronization is implemented
 * in the frontend (IOW, only one thread is feeding records to the backend concurrently, but
 * it is possible for several threads to write sequentially). Note that if a frontend supports
 * synchronized record feeding, it will also report capable of concurrent record feeding.
 */
struct synchronized_feeding {};

#if !defined(BOOST_LOG_NO_THREADS)

/*!
 * The sink backend ensures all needed synchronization, it is capable to handle multithreaded calls
 */
struct concurrent_feeding : synchronized_feeding {};

#else // !defined(BOOST_LOG_NO_THREADS)

//  If multithreading is disabled, threading models become redundant
typedef synchronized_feeding concurrent_feeding;

#endif // !defined(BOOST_LOG_NO_THREADS)

/*!
 * The sink backend requires the frontend to perform log record formatting before feeding
 */
struct formatted_records {};

/*!
 * The sink backend supports flushing
 */
struct flushing {};

#ifdef BOOST_LOG_DOXYGEN_PASS

/*!
 * The metafunction combines multiple requirement tags into one type. The resulting type will
 * satisfy all specified requirements (i.e. \c has_requirement metafunction will return positive result).
 */
template< typename... RequirementsT >
struct combine_requirements;

#else

template< BOOST_PP_ENUM_PARAMS_WITH_A_DEFAULT(BOOST_LOG_COMBINE_REQUIREMENTS_LIMIT, typename ReqT, mpl::na) >
struct combine_requirements :
    mpl::inherit_linearly<
        mpl::vector< BOOST_PP_ENUM_PARAMS(BOOST_LOG_COMBINE_REQUIREMENTS_LIMIT, ReqT) >,
        mpl::inherit2< mpl::_1, mpl::_2 >
    >
{
};

#endif // BOOST_LOG_DOXYGEN_PASS

/*!
 * A helper metafunction to check if a requirement is satisfied. The \c TestedT template argument
 * should be the type combining one or several requirements and \c RequiredT is the requirement
 * to test against. The metafunction will yield a positive result if \c TestedT supports \c RequiredT.
 */
template< typename TestedT, typename RequiredT >
struct has_requirement :
    public is_base_of< RequiredT, TestedT >
{
};

} // namespace sinks

BOOST_LOG_CLOSE_NAMESPACE // namespace log

} // namespace boost

#include <boost/log/detail/footer.hpp>

#endif // BOOST_LOG_SINKS_FRONTEND_REQUIREMENTS_HPP_INCLUDED_

/* frontend_requirements.hpp
kHvEjEnp5rAQbJlYrAWaI/5G8/tTYDXAImmwOv3bm3SzT31ENKv7GcXumB2YoO41W64FTZx5krHoEsTODeYqBKf3CiRCJSSjBw/MaszAsWgtjkvw2KpgHs7T/NvXctVt6vEp20dsfpGTDU7rsEu7vnVdxBvCilreeDBI3RnG0jEHjsxCCzGzAZiJK284P53t+rOpiwFHbOhiCfMBatIA5PRuTefQHkynqZf0ly7yZImUH2nEyWMiTqThOmSYt/jYpp0k+QSVpvcgUSFVyqqIWHAIy5I8Kk1BJqP7ly/S2vD+L/1T14k8210WiGfHyv6HOQ9/70jDS6TFdkM7OsaGCOHsPyrQN/DkyF09l93OgnCKFL7O4CTg6/Ihs0xoVpDsJYXoyDCR/MhW8h9Huvo46QvV/4s95ck7CtHhAY2KVSapAcPO13Ry42Zg7/REuXhxGwpUJ1dDqNg10Hf3ee0oQrBpDSlL1uHMHiglNRwhEJRKYQbhyQCELLrTTocweIL1Xl8Jflow26B19U8GJnp3JUn5yhX7yZ04ZESKBTeVvF30Ld2dNvpW4M+s9jPaT6Ouhtz2s3iPUoesraNc4MMMr1/JbeeF3luP0BpXzWRFe35CNtvAkzT/xZGR2hunX9XN2psz7wpUL7wW+AjYhcZ+NLpZ4jg8yCzRtMB6wqfr2SN+pNEGZA/0ri+nfYiVLesE45kOKllo7zrCvY5s+9SnGie/yEOWlWAGfMuaOWbSosPUPDzS2ngTIOF5lOoJk76OSvyb3vuWxIvwDeSMK/FGaAZ+kGhcYMVLMSWeHwUVnhwzTXgvSZZyMdTqKMclfevF8UrOOLHf4Hf0NbtAgo9dy4t+kS8lCzEy6itOadcUYxoeSJsaIuWTise9ckr/nJAy/+ejo6okuSR4hEoQs+enC4IiE+V9ExMq/UzgDVTl/FpicZusTIel5jgxAeJArqM6/uAxcIEJ77L5BqD74yByrAHHDz0+t+oCzXw4kX8GZkGzxw0Jgtcv08w6vCaKOAVp2jbPcVO0bLQ9q0Uc0ZPDrgmGkaDf1X170B/9TMqk8D7sI3o2XtfOWxWgPhUJvDshcrFGRUzEonRsUyNqaOn+mVMjlCNPVlcvHEk32B1YdKC8y+RGSNAPGMgJmUYyIBCXp2MLv4xSR+3CQszRLxGoGhfj/6z6vxFwvoL//XPyyRyP3KfksPSlmKGiuRC0ORvT1cGLo+zvZ4tBaj2tqz/osVR8+M8WrK7Ian4SsMg8BE2U5KyRd4chmJlJsXVgC/tebFYlIHR0GMtxzWazvB0i6rPCNF//lAvOaafg1s39rYzx3wbdwajkVkEHS7o0xjEuQ4KYmx0MhqQcMllDP7i5x/bqd4v3PN3dPOiu4YzlZoVB83mn0gvXHo7b4zn8v+ddsXM9+Sj46A6Es9vvfQucUdmV3y/05lcrqiB8mrZLoA0+av1MPKfi9vVF70Ag82LqO+zYPczMzWVlI0WomsYpEu5qQbOepwi6km0raHUnBpgJfaMx2ytQMnwKHryO6qTvI6seOT0DIBsKT7L5lfYhGNWTRjgSMQEQhOtve+EULzdCVjIzKCgo0Ix/HecyYKlWJfKKdlOuGMBFPl69yyBeo3NMXh712/9Zt9Rm+FzEexCHtvwD5leEijnflfYE6w8133iTYbCh4cOhn6zVXaTu/bVaLILZg0auMirxfUB6ueZzpApJHF+bhyR0IaiMgtVbB+cCUYO2y2Z4XDQmrI/0MwgNVTjwn6pTeWI/oPZSqSITapJi6r8+nKMlB+WKB+icXDh81cd05C24UGEl14S9HZSPHId+cYIdZVOlbQVi9nNgf7hVRXsu/+/Mz6dXnKfNMIOyy/jrG+0h226QoHhnx0hfdmQlaMzL+KEu5lfwmt8BfHKanohCvYE1re0/pUwK0ANHT2YKU/6SZ+XJlOTGGCUEv7XcqTuChB8mUsJ2ujtUlXNLqYGFru40RakAJScxKMLfJDgfbG6mVUUr8MhnR2LF4qhYGFx+hAvTfG4Q8gMUAlXexwMA+jF9qUKhp4p/4wXdSGcQw+P8vmiMqDaCAONiMjl6MlCy5UpGkSaULynbv+Ya4JNRLLZtn+3QZeoqJ3Oejome+ZrL6cyKGc2wc+O8J7+iy0jZL2zv248FvmrOmvB24Xed3iS2oY1RzHLWZfQT1J9JzblnMvNa+Za4hFrjQ2ipFbQyqtrr2HuDQwykbHyynFR3d9KDSbA9Epwp/UEpXq7M9E0g67vCE4phnR8Im9gQ24HZYlyZDuUGpTvz9efIurrx9+8wPBrA5MCi0rt02/PYVb07Mvacl9qrdM9A05JqrFtxfsFq4EpAln01RfeuDaor8fB6YXUSMsVSd/lrqmiqO7sydf+BKk2Q5+IY9G97MFn1k5AD/xt2HCn398ju9jq4B/AU/fkArz6vA9e1nzM6n/2F6KqTNn1f6wUc2gisCMUgMbkAse7Te9qm/6buBazAlIs/03N8VgmbGlN5TMy68Z3yM9uwpRmbnwJhEmnTKsReis21fO1dNHtewA7wbfxWg+EomRNxu+4vp0OtLkKDpcmJGEyDc680qNkNMzCkClR9xA10bQO4amI/v2mlEGkDEFkDFlmDCaEY8qIUSTAEisR2n/dA6P90BwpQJwrg030hv2j/jVJwJURW6aCyDc5M5iNtAOhzHJqjGHmn/YdhyfOMa0IuPZbKV1/uBJRhUjj5TjUkv09JOiGVCd13RDy6CW5t2a0UyuMlCpuIbO2HTClNQtDS8NEOQiLWCo1E1BZVPN+Mkqb1cMbd7FRgSZam9f7YLtIkbWuAQJaoo6BGiL6/RY6AfTZ34F5CJF5bylJ5udRAjn+rtmXIP2Cs4q5oe0joswaSkkQgJZIcHC6jCkmN+KvcER4ZlqgY1CGSESkgSjIwCoi7Qailfr2u76i4QHF5nmDgD47Hi/F0r8AeZ/Kkq4Fy/HQxgs6ihtU5NlzrC01VjUOuN0MDqsdI0ftd4JxtbXKGWaoOmvV4nn4t3oTTEacFnLS+s1c5bP7epBAMxbhqg9tJofnRiEeCoYDoEFUebyt/W0pbXt02HwqbeTl39s/x9YDhQBUAxuVADfWZ++iKed0exHPB/NSDm/cJ7tidGHzzYrxofeMImAOQmy9AfrsbofoNGa75kJE2tqCYXuSzLA+pSGZMIOINayy99xvVDnSfuhMY6ohjvbEpe8luwHaPgG04RGdbqguA7FU5QUJ5iQ4JvAklQSLJBQgpuI5wbLUnWEaNrBXLB7YkQA5tWn0HaRzzL8KF/AppAy2fyz3I2Np+Q7eKXkrfsxazs/xLSw9tlUHWZE120RLMUU+YS0+lnF9E0KnAMMWbCKbErbcz3OhcD2XvOlxZf996KKKCp7T0gQWD/k++gHI8Fr6E9cY1EFQz5wEEjxuCkqTPx2uLkj0gnl9tAltdY9+ty+dDwYIaKzlrLjC6TDzaNDtZIHArkFsoJYtwogRNy6q/g7Ql4NSLMAh1EAkA9VZmRQjoQ03euyvhX99inV8meaX6a87BND8K7RokrEXHJZx1AX+DvZ9b4qxzKt/0+yu0Cs9ovPERT0mzAtToTQfcl5oPussb9LJoNeThVU5Zb/SasE1ZQKdznUgTyLHQcQ9dbhegZJvNf6+8oseK8i7CoiK6x9a3n2lHeilFUvjaGpKIaGmGIaJQYhoGZaB4tI1ETCrF9b71RCmG6xXiOCTTP4Cd8Icny8GbZWyO4sUxhGPH2DuH/7FESnbX12iv5/CHgk6v1AgEhYCEbM7ZnIMXvWuAsnATbIPA/9tVDQx/W4d/rxvXzb6QB/bII/VoWMMYTh4NE5IO7c+9nlcwLEBDjcadNEBUlgANBT8b9rcWvvc5XzoJYs0R1N9qbxH5WB1FU4sxq250EkCV8aSkA+2r5Ie7MqFMvCJSpim8YPBLCSKIrFOCOR7wB+6gObi4OZCIN2bB3zdG89nBjPF3KSxtllWWys1D5vXrWAY5fiuQPPI3alTwRs7NkKO758JGs5wu4oTNIEkpv/YlkhKIr1ulM8nzG2u5+7ExLO4WpDrh9Qo5pktP4p20acpG8CEaMqngwfknmjDVMmZR0uPLxaLNZPhWVwI1V/oKG0j5dJrvJZDxdbwa0k9Bl7H87Z8A1qTwMTd+JCLskvuBhtEjQxYCMD8SvTcI8GFTllz0Ch1ovbPr7Pn2sqbGIz2/BT7HcAipLcozx6MgS8wuwJXSAabcQlShAohnF8hEcZgb1gd9mnA0pK7VA1s2nx3SRrcvRt4B29lcM6t/5PYCrP/XNOFyEA6CJOvZcmtSlQhIFKmdT9zb3XsBUQv+WTye2LbZcLfYhwezt6nYWT7ZLm4OOfjP0B51nEBaBXK5N6rCK/ThBUGkqVQtX569k9J1w7bIfOV/Abs6mpFsdLKBOs14bbF4S1HpIS1vTuinRjpAo9jjsy0yv+a0xwZNANznOmOg7Cz+Qx1hl5dwBsWLbPtoyBqe2DAfkG8N1252UVF1iO8XdIKF0eSBDNA2SSWuPK4rdEYSo+2c+PdQqieFNRJEJ847PPUps0xoRVJ5MbNVM4RnYlpI7rH9GoExVgZCph4bqteV/MYml6vSm3Mpram30TCqxTXzHNy/Xuh+/PVyLJFnhzZg6z5gboZgrPSjE3TBhp3b93Ph5g+2yoLtt3hUR69eh5tt0ldTsB4ujc5NVDR6PrjuVmtaVGv7g1oR2H/3vQK1Re3EbJl6kkZGzLQXZM36lirTnMO4OK4mH+rgZ1biG23ghkn2UNVmcSAz76GzMi7B/xeQfJ56Y2zhpQl6RfEfWCi2D1gMR9iOK5a7kfgoKy0JpmINn0+Ym/7vFob92jr98HWmr/cRn46dl/o1pe4Tya0/xuFLJcnmL0b1heqWSABYPW+qiJteckbLXpQUQq+Zb5JNjLGXbHJgHRGdf4+ear2bMljvIRxEhXrRpsQ7Ya7/Y9xCu3dVK+DjSV5Ap2TH0P1nG6yQNyG4JrIGpR5Xn/NYLv7HuBixGtXK47Pk92jIetqGeEDU3HihMD2c8ME4Y7zdyZHLz4DPBcYrD1vZ4wl5b1iJEzZbkcysItToJjyfWX2o9dM1+MkEp3rIHNsamH9G0c5UsJsMMLSQMfCch6UB/ljZSM7DYv9iVqexefd+NueRzcKAN93DcL5FeoJxHuMrIwwARg0HUwrZVNYdNtRYu1ni2Sdn+olBTgq3E0taypwW7QFN3nxVGWOzYX8/vxYjGGkoA8IrdlAGV8l4dTLgFOOKtNoNCljy288VqngwOQuwvExw4UWY02hOqQQ2noWDrS56XS8lw7YWNiZojeBr/jVRUrYd9BF4JX2/Sbl7d3PDCnmDMPXVatSQRPWKXshlK6DCd3Z+4ZDEMjA/RJBMQABAemiD7Tr30G7bstCdvdHdMj4LgO5it2sjtfziPyzUj/USJlDQUC1532v8t4vyzUscmfM3BFpEJwIgG6jBV/IcMO17BeCgNjBq1IzgtUS8aCy77QjUbVZ8e9pJIZLxpUYisPcHGlMtNM83JVnuxJqBD0gXvnBd4Qlk/EML2WvmHACkMJcvApgKiwo3HfDFoYa68mSCTa+xEKs3ZJ3kEmi6yYUJht9EVbfoEQeiMQwe2CHG2PMRrBfivtizU5d3skaFl5Kq4cND6TGgkaMJ2SrF2unxhCfndV4ulf/W4uSicnSPhZ1MC2Tm1T9kfgYIzmCve7AfrqGVbbwHjI+cPCN1cvGo8JDdbcUtRlU6fAp1csd2ZQBbLMW44GclDuze2bgGBmnSso6dinTsUqbOlrmZ7h0EOniksyFhAlLlAzIbjQ+BMFLfiHCI0xyX8mERBi7rbkANIxpsFFYTQCXicTkDEPqDr9MBXkzEc6t2GVHhj1JwLxqJgR3CxDWFDN+c2VUC+OXKQfzNBETfnOFVwviFCwD9HstiHfmYy7dGkH1ar838mLo8A3V4BEHBYEGw52jZ0/b2a49Jj65PThvzqOGSEhV1PSftIWXzJmPjRKgJ7dn3/bBM0tjmng74guXH8DIC1vqWG38rLg5jNl3Ap5Zcz21ezgAoTbmZtn0uREo8ZNwcS6P2BpVjuAWlyB9KPO24jhP1yjDPKGMdOyRPIJ0SG12Ebo/EEKzjsI/sUhEVuxdK7dVLMRs0oyww6jQKe3VAC0Ut+Lghi837aF4ikq8tPRp18sS3XUFRcY9sxmzLrmGnElHEY3sKptN1i1iOLG9jIV/DHkU8rIEmelyqvylMXCnx1XKhMKjjPsHnXKpsYbZ7Bn1RQUtNCpk2IJBLUWIn6KZRBGZcGvR9QL2KiHWfxiPe0vziY9+vc9r8x9+zHq40Trx1n+8VD3pyU/1aIbm4WlXtK/q9Ud/o0w1h8ExMQJiPtuXvJ0Dk9xaSMHN/XpC3c6UHnPsDHfozGQ5iQU10clwz21UmVL4XNX0swUh6hFuYDi5kPQbr+r7aHks073/EPf5pCscyajxVWTesg3hoicbIF48+HWLXBROl7sR2PbzPytC4sI+ufoGEnDYKXt+Bd3rIWgNVb/mM64ObboUXWIZoh9lsrzQTnIi4kjNJ+7pjrIQkaAVJykrMI0234x4bDvVTiIH9Q4m+dpRRiq3/ZGTSQfklUKbNLSDDWUa69+AIz3wLS00PLXplcObSGOf4Ib5GtJliBJTmhS0Rio2I74MbSjiAfPT+XDkajGuoYkKET8RUk35Qme7y/bLshZCHe9TH9IHSmF3solX1UEtz+g+hEaTsIaeqkzNHW1wc4Qs24y1v7oqlIg4mWK6qABT6yhWoVh27eg1BQbWz1Yh54dJQlbsZ9bOgk3UcD3tnamMGPaB+feZzATZL6ZvQjTGmUyFSZhIlv6HG63fI50IlwOPJVQIqYHIhKDkF07jRvN/JmGNDxs1tv15OR/aJ9laz85KF3M2oYpBDIuBeKoQBlzOyo3N+phHQH0RZ+xNvGfK3Eb45CeCwzqdSnJMozbU+Ly5Mzn6NvofpTYD6vwq2zu2ZGZs3Uk49DsfkwoWVuqy9jsj47YujZvkNo6GmMueomRO8PR+1ZzS7b6mcylgGDUsDynkoPOZIjAoeU80XFLB+1CxawsjDTMPEGPqlq7p71EC9cDrQ03C8MgGxi6vIZUV58OKmurkLsOGcbdy2QM7DGg7VF5BJQo2dJOlL9f0I9ObgrqDCD/V5wy9qBjgWL+ZCJYapeRJ5PZjrYgM+95gY9RwNWf4bCDD9oSo9FyZcdb08jlrGTkaK4yimIpD0LUR/Ane7Un9G7efIV9dXoRFH/VbjWKZqxOhem3D2LrN+w+lI49SxNKX86fS8HQQb+ZBwzjD3gzYSDLZ+HJIa8Clzy4jLnQfHu7142IOJyfy1u9Vcy3+kRR9RVQGNvZzQya5yHWUgzcvD+8gZXJGfPk6gFKJiOXQOXM35yzOlfBsxq1VNGbrwgwrX/OxHFcbVDcDuPpO2UvmkTsFO5Y1r/DH0bJR990RyG9D2EfanX2jePf7lRq5FKwsSsyH9jgVFLE3QawYBDrdLKFmdbNM2viy216W8jAWgVIse9Hi2MXT8axp8fobPpObKuDz6TkUmkM8Z/+31B33v/LhvbpbUobi48OVDQs1X1WcoRZ6bnIKzF8XE
*/