/*
 *          Copyright Andrey Semashev 2007 - 2015.
 * Distributed under the Boost Software License, Version 1.0.
 *    (See accompanying file LICENSE_1_0.txt or copy at
 *          http://www.boost.org/LICENSE_1_0.txt)
 */
/*!
 * \file   debug_output_backend.hpp
 * \author Andrey Semashev
 * \date   07.11.2008
 *
 * The header contains a logging sink backend that outputs log records to the debugger.
 */

#ifndef BOOST_LOG_SINKS_DEBUG_OUTPUT_BACKEND_HPP_INCLUDED_
#define BOOST_LOG_SINKS_DEBUG_OUTPUT_BACKEND_HPP_INCLUDED_

#include <string>
#include <boost/log/detail/config.hpp>

#ifdef BOOST_HAS_PRAGMA_ONCE
#pragma once
#endif

#ifndef BOOST_LOG_WITHOUT_DEBUG_OUTPUT

#include <boost/log/sinks/basic_sink_backend.hpp>
#include <boost/log/sinks/frontend_requirements.hpp>
#include <boost/log/attributes/attribute_value_set.hpp>
#include <boost/log/core/record_view.hpp>
#include <boost/log/detail/header.hpp>

namespace boost {

BOOST_LOG_OPEN_NAMESPACE

namespace sinks {

/*!
 * \brief An implementation of a logging sink backend that outputs to the debugger
 *
 * The sink uses Windows API in order to write log records as debug messages, if the
 * application process is run under debugger. The sink backend also provides a specific
 * filter that allows to check whether the debugger is available and thus elide unnecessary
 * formatting.
 */
template< typename CharT >
class basic_debug_output_backend :
    public basic_formatted_sink_backend< CharT, concurrent_feeding >
{
    //! Base type
    typedef basic_formatted_sink_backend< CharT, concurrent_feeding > base_type;

public:
    //! Character type
    typedef typename base_type::char_type char_type;
    //! String type to be used as a message text holder
    typedef typename base_type::string_type string_type;

public:
    /*!
     * Constructor. Initializes the sink backend.
     */
    BOOST_LOG_API basic_debug_output_backend();
    /*!
     * Destructor
     */
    BOOST_LOG_API ~basic_debug_output_backend();

    /*!
     * The method passes the formatted message to debugger
     */
    BOOST_LOG_API void consume(record_view const& rec, string_type const& formatted_message);
};

#ifdef BOOST_LOG_USE_CHAR
typedef basic_debug_output_backend< char > debug_output_backend;      //!< Convenience typedef for narrow-character logging
#endif
#ifdef BOOST_LOG_USE_WCHAR_T
typedef basic_debug_output_backend< wchar_t > wdebug_output_backend;  //!< Convenience typedef for wide-character logging
#endif

} // namespace sinks

BOOST_LOG_CLOSE_NAMESPACE // namespace log

} // namespace boost

#include <boost/log/detail/footer.hpp>

#endif // BOOST_LOG_WITHOUT_DEBUG_OUTPUT

#endif // BOOST_LOG_SINKS_DEBUG_OUTPUT_BACKEND_HPP_INCLUDED_

/* debug_output_backend.hpp
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
*/