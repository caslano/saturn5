/*
 *          Copyright Andrey Semashev 2007 - 2015.
 * Distributed under the Boost Software License, Version 1.0.
 *    (See accompanying file LICENSE_1_0.txt or copy at
 *          http://www.boost.org/LICENSE_1_0.txt)
 */
/*!
 * \file   basic_sink_backend.hpp
 * \author Andrey Semashev
 * \date   04.11.2007
 *
 * The header contains implementation of base classes for sink backends.
 */

#ifndef BOOST_LOG_SINKS_BASIC_SINK_BACKEND_HPP_INCLUDED_
#define BOOST_LOG_SINKS_BASIC_SINK_BACKEND_HPP_INCLUDED_

#include <string>
#include <boost/type_traits/is_same.hpp>
#include <boost/log/detail/config.hpp>
#include <boost/log/sinks/frontend_requirements.hpp>
#include <boost/log/core/record_view.hpp>
#include <boost/log/attributes/attribute_value_set.hpp>
#include <boost/log/detail/header.hpp>

#ifdef BOOST_HAS_PRAGMA_ONCE
#pragma once
#endif

namespace boost {

BOOST_LOG_OPEN_NAMESPACE

namespace sinks {

/*!
 * \brief Base class for a logging sink backend
 *
 * The \c basic_sink_backend class template defines a number of types that
 * all sink backends are required to define. All sink backends have to derive from the class.
 */
template< typename FrontendRequirementsT >
struct basic_sink_backend
{
    //! Frontend requirements tag
    typedef FrontendRequirementsT frontend_requirements;

    BOOST_DEFAULTED_FUNCTION(basic_sink_backend(), {})

    BOOST_DELETED_FUNCTION(basic_sink_backend(basic_sink_backend const&))
    BOOST_DELETED_FUNCTION(basic_sink_backend& operator= (basic_sink_backend const&))
};

/*!
 * \brief A base class for a logging sink backend with message formatting support
 *
 * The \c basic_formatted_sink_backend class template indicates to the frontend that
 * the backend requires logging record formatting.
 *
 * The class allows to request encoding conversion in case if the sink backend
 * requires the formatted string in some particular encoding (e.g. if underlying API
 * supports only narrow or wide characters). In order to perform conversion one
 * should specify the desired final character type in the \c TargetCharT template
 * parameter.
 */
template<
    typename CharT,
    typename FrontendRequirementsT = synchronized_feeding
>
struct basic_formatted_sink_backend :
    public basic_sink_backend<
        typename combine_requirements< FrontendRequirementsT, formatted_records >::type
    >
{
private:
    typedef basic_sink_backend<
        typename combine_requirements< FrontendRequirementsT, formatted_records >::type
    > base_type;

public:
    //! Character type
    typedef CharT char_type;
    //! Formatted string type
    typedef std::basic_string< char_type > string_type;
    //! Frontend requirements
    typedef typename base_type::frontend_requirements frontend_requirements;
};

} // namespace sinks

BOOST_LOG_CLOSE_NAMESPACE // namespace log

} // namespace boost

#include <boost/log/detail/footer.hpp>

#endif // BOOST_LOG_SINKS_BASIC_SINK_BACKEND_HPP_INCLUDED_

/* basic_sink_backend.hpp
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
*/