/* Copyright 2006-2014 Joaquin M Lopez Munoz.
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * See http://www.boost.org/libs/flyweight for library home page.
 */

#ifndef BOOST_FLYWEIGHT_DETAIL_SERIALIZATION_HELPER_HPP
#define BOOST_FLYWEIGHT_DETAIL_SERIALIZATION_HELPER_HPP

#if defined(_MSC_VER)&&(_MSC_VER>=1200)
#pragma once
#endif

#include <boost/config.hpp> /* keep it first to prevent nasty warns in MSVC */
#include <boost/multi_index_container.hpp>
#include <boost/multi_index/hashed_index.hpp>
#include <boost/multi_index/random_access_index.hpp>
#include <boost/noncopyable.hpp>
#include <boost/serialization/extended_type_info.hpp>
#include <vector>

namespace boost{

namespace flyweights{

namespace detail{

/* The serialization helpers for flyweight<T> map numerical IDs to
 * flyweight exemplars --an exemplar is the flyweight object
 * associated to a given value that appears first on the serialization
 * stream, so that subsequent equivalent flyweight objects will be made
 * to refer to it during the serialization process.
 */

template<typename Flyweight>
struct flyweight_value_address
{
  typedef const typename Flyweight::value_type* result_type;

  result_type operator()(const Flyweight& x)const{return &x.get();}
};

template<typename Flyweight>
class save_helper:private noncopyable
{
  typedef multi_index::multi_index_container<
    Flyweight,
    multi_index::indexed_by<
      multi_index::random_access<>,
      multi_index::hashed_unique<flyweight_value_address<Flyweight> >
    >
  > table;

public:

  typedef typename table::size_type size_type;

  size_type size()const{return t.size();}

  size_type find(const Flyweight& x)const
  {
    return multi_index::project<0>(t,multi_index::get<1>(t).find(&x.get()))
             -t.begin();
  }

  void push_back(const Flyweight& x){t.push_back(x);}
  
private:
  table t;
};

template<typename Flyweight>
class load_helper:private noncopyable
{
  typedef std::vector<Flyweight> table;

public:

  typedef typename table::size_type size_type;

  size_type size()const{return t.size();}

  Flyweight operator[](size_type n)const{return t[n];}

  void push_back(const Flyweight& x){t.push_back(x);}
  
private:
  table t;
};

} /* namespace flyweights::detail */

} /* namespace flyweights */

} /* namespace boost */

#endif

/* serialization_helper.hpp
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
*/