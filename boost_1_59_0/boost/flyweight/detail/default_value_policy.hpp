/* Copyright 2006-2019 Joaquin M Lopez Munoz.
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * See http://www.boost.org/libs/flyweight for library home page.
 */

#ifndef BOOST_FLYWEIGHT_DETAIL_DEFAULT_VALUE_POLICY_HPP
#define BOOST_FLYWEIGHT_DETAIL_DEFAULT_VALUE_POLICY_HPP

#if defined(_MSC_VER)
#pragma once
#endif

#include <boost/config.hpp> /* keep it first to prevent nasty warns in MSVC */
#include <boost/detail/workaround.hpp>
#include <boost/flyweight/detail/perfect_fwd.hpp>
#include <boost/flyweight/detail/value_tag.hpp>

/* Default value policy: the key is the same as the value.
 */

namespace boost{

namespace flyweights{

namespace detail{

template<typename Value>
struct default_value_policy:value_marker
{
  typedef Value key_type;
  typedef Value value_type;

  struct rep_type
  {
  /* template ctors */

#if !defined(BOOST_NO_CXX11_RVALUE_REFERENCES)&&\
    !defined(BOOST_NO_CXX11_VARIADIC_TEMPLATES)&&\
    BOOST_WORKAROUND(BOOST_GCC,<=40603)
/* GCC bug: the default ctor generated by the variadic template ctor below
 * fails to value-initialize x.
 */

    rep_type():x(){}
#endif

#define BOOST_FLYWEIGHT_PERFECT_FWD_CTR_BODY(args) \
  :x(BOOST_FLYWEIGHT_FORWARD(args)){}

  BOOST_FLYWEIGHT_PERFECT_FWD(
    explicit rep_type,
    BOOST_FLYWEIGHT_PERFECT_FWD_CTR_BODY)

#undef BOOST_FLYWEIGHT_PERFECT_FWD_CTR_BODY

    rep_type(const rep_type& r):x(r.x){}

#if !defined(BOOST_NO_CXX11_RVALUE_REFERENCES)
    rep_type(rep_type&& r):x(std::move(r.x)){}
#endif

    operator const value_type&()const{return x;}

    value_type x;
  };

  static void construct_value(const rep_type&){}
  static void copy_value(const rep_type&){}

#if !defined(BOOST_NO_CXX11_RVALUE_REFERENCES)
  static void move_value(const rep_type&){}
#endif
};

} /* namespace flyweights::detail */

} /* namespace flyweights */

} /* namespace boost */

#endif

/* default_value_policy.hpp
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
*/