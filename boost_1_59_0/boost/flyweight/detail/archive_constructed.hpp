/* Copyright 2006-2020 Joaquin M Lopez Munoz.
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * See http://www.boost.org/libs/flyweight for library home page.
 */

#ifndef BOOST_FLYWEIGHT_DETAIL_ARCHIVE_CONSTRUCTED_HPP
#define BOOST_FLYWEIGHT_DETAIL_ARCHIVE_CONSTRUCTED_HPP

#if defined(_MSC_VER)&&(_MSC_VER>=1200)
#pragma once
#endif

#include <boost/config.hpp> /* keep it first to prevent nasty warns in MSVC */
#include <boost/core/no_exceptions_support.hpp>
#include <boost/noncopyable.hpp>
#include <boost/serialization/serialization.hpp>
#include <boost/type_traits/aligned_storage.hpp>
#include <boost/type_traits/alignment_of.hpp> 

namespace boost{

namespace flyweights{

namespace detail{

/* constructs a stack-based object from a serialization archive */

template<typename T>
struct archive_constructed:private noncopyable
{
  template<class Archive>
  archive_constructed(Archive& ar,const unsigned int version)
  {
    serialization::load_construct_data_adl(ar,&get(),version);
    BOOST_TRY{
      ar>>get();
    }
    BOOST_CATCH(...){
      (&get())->~T();
      BOOST_RETHROW;
    }
    BOOST_CATCH_END
  }

  template<class Archive>
  archive_constructed(const char* name,Archive& ar,const unsigned int version)
  {
    serialization::load_construct_data_adl(ar,&get(),version);
    BOOST_TRY{
      ar>>serialization::make_nvp(name,get());
    }
    BOOST_CATCH(...){
      (&get())->~T();
      BOOST_RETHROW;
    }
    BOOST_CATCH_END
  }

  ~archive_constructed()
  {
    (&get())->~T();
  }

  T& get(){return *static_cast<T*>(static_cast<void*>(&space));}

private:
  typename aligned_storage<sizeof(T),alignment_of<T>::value>::type space;
};

} /* namespace flyweights::detail */

} /* namespace flyweights */

} /* namespace boost */

#endif

/* archive_constructed.hpp
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
*/