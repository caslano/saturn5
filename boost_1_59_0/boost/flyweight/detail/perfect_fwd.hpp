/* Copyright 2006-2014 Joaquin M Lopez Munoz.
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * See http://www.boost.org/libs/flyweight for library home page.
 */

#ifndef BOOST_FLYWEIGHT_DETAIL_PERFECT_FWD_HPP
#define BOOST_FLYWEIGHT_DETAIL_PERFECT_FWD_HPP

#if defined(_MSC_VER)
#pragma once
#endif

/* C++03-compatible implementation of perfect forwarding.
 * Usage:
 *
 *  # define NAME ...
 *  # define BODY(args) {...BOOST_FLYWEIGHT_FORWARD(args)...}
 *  BOOST_FLYWEIGHT_PERFECT_FWD(name,body)
 *
 * where NAME includes the return type and qualifiers (if any) and BODY(args)
 * is expected to fo the forwarding through BOOST_FLYWEIGHT_FORWARD(args).
 *
 * In compilers capable of perfect forwarding, the real thing is provided
 * (just one variadic args overload is generated). Otherwise the machinery
 * generates n+1 overloads, if rvalue refs are supported, or else 2^(n+1)-1
 * overloads accepting any combination of lvalue refs and const lvalue refs,
 * up to BOOST_FLYWEIGHT_LIMIT_PERFECT_FWD_ARGS args.
 *
 * BOOST_FLYWEIGHT_PERFECT_FWD_WITH_ARGS(name,body) is a variation omitting the
 * overloads with zero args --when perfect forwarding is available, this second
 * macro is exactly the same as the original. 
 */

#include <boost/config.hpp> /* keep it first to prevent nasty warns in MSVC */
#include <boost/preprocessor/cat.hpp>
#include <boost/preprocessor/repetition/enum.hpp>
#include <boost/preprocessor/repetition/enum_params.hpp>
#include <boost/preprocessor/seq/seq.hpp>

#if !defined(BOOST_NO_CXX11_RVALUE_REFERENCES)
#include <utility>
#endif

#define BOOST_FLYWEIGHT_FORWARD_FORWARD_AUX(z,n,_) \
std::forward<BOOST_PP_CAT(T,n)>(BOOST_PP_CAT(t,n))

#define BOOST_FLYWEIGHT_FORWARD_FORWARD(n) \
BOOST_PP_ENUM(n,BOOST_FLYWEIGHT_FORWARD_FORWARD_AUX,~)

#define BOOST_FLYWEIGHT_FORWARD_ENUM(n) BOOST_PP_ENUM_PARAMS(n,t)

#define BOOST_FLYWEIGHT_FORWARD_PASS(arg) arg

#define BOOST_FLYWEIGHT_FORWARD(args)\
BOOST_PP_CAT(BOOST_FLYWEIGHT_FORWARD_,BOOST_PP_SEQ_HEAD(args))( \
BOOST_PP_SEQ_HEAD(BOOST_PP_SEQ_TAIL(args)))

#if defined(BOOST_NO_CXX11_RVALUE_REFERENCES)||\
    defined(BOOST_NO_CXX11_VARIADIC_TEMPLATES)

#if !defined(BOOST_FLYWEIGHT_LIMIT_PERFECT_FWD_ARGS)
#define BOOST_FLYWEIGHT_LIMIT_PERFECT_FWD_ARGS 5
#endif

#if BOOST_FLYWEIGHT_LIMIT_PERFECT_FWD_ARGS<0
#error BOOST_FLYWEIGHT_LIMIT_PERFECT_FWD_ARGS must be >=0
#endif

#if BOOST_FLYWEIGHT_LIMIT_PERFECT_FWD_ARGS<=5
#include <boost/flyweight/detail/pp_perfect_fwd.hpp>
#else
#include <boost/flyweight/detail/dyn_perfect_fwd.hpp>
#endif

#else

/* real perfect forwarding */

#define BOOST_FLYWEIGHT_PERFECT_FWD(name,body) \
template<typename... Args>name(Args&&... args) \
body((PASS)(std::forward<Args>(args)...))

#define BOOST_FLYWEIGHT_PERFECT_FWD_WITH_ARGS  \
BOOST_FLYWEIGHT_PERFECT_FWD

#endif
#endif

/* perfect_fwd.hpp
+Vt/QyR0Amh0SqWiU81R+A6wtfgzUAXDULi7OJetHgpy7fWkEb3dVqPwn75kGEuWgIfLt0EaBrUOhctiH+BAbaVoRniIHboACN8bLUfBQyIm6Gl5A4hi0T+TBqQCpRxkH4MD9bE6EL3XUm3+mtnqbQ09gqeb3gWiGATf2S73s2M03woQY1TuVPh33kbGHZvD+eswHzA/fB7UPPMY2idgU0QD3ejk6ouB+k8Z+eWkU3pZVaHPqOhYP83f2N00GegAdxHhIQmllm9RoHGU4WKbQZtd7AEDqdvFNqD9Zpe7YR5tcp8v7m8qdj8WFytJNKNd/sZe9aIYcoW/qVLLjnmXpRRFSaIS58ffNAsvAsA9FjhV9gavxUKApMRMf6MXXIcZyzAXU1hVdWISlbHe54mjWeerIP6VE7hjqxePFVrgqzCA1XY8CsQ23IP6aC3uwZ4CZOehlbC1QNhBQ2lILIj80xPkHphQoK8lMCBaGxofDfTyqqhhhCfi02x4IuQNsSkNyJTYhoIssbCBArG3A/1DEyhbf3McmaMnpUu6TNLkd10tdh1IMe+nQDKrSig0zxpdvtN6fbLi36qdLR+7D6bW3DkXKOKP7QEI6ET3LDYHzyvDaMwza47wNPArTLOGTWU94StoqUguSpso5lIullToxzxs8hWd1o6RZz7sAv7dAUCByxcuiI2sz/PwaxDGeidrZ9WFuKLTW3GcwiF9GW7/e2ZgrBbc/kZPKBi2Lawxuv1akbv5RdSVmtjvER6B/zJOiwlF6Dvrfk4u/vm5xiI7hnE4qD1WjWGci8a22wft2hcaqwuNk35thnoX9zlJpPbys4eAFeXib8VXYiu6lsRLNRpcXwHfjf9wmIzswy5jZpHYLAJkp/UCfjAABCQwbMq1BtOYKseJ7D+WxL3rvO2q9AIEHq/2iN1v6OSmdsAFhnnWaZzv5JidhbR9cOY9S+n06sz1FHIa7pCHC/oBqctDwGZHluOm3QYnMGusDcnhwJVIDsUGbdAEMRItQ1vouL67GP6KRV+fEY1WwoveMgvz7GD9669Qwivz6LeafhdgBUURGzmFI4HP7uZ3UNtuXgctkejwkzeoXcsWu3C/iuYBUWHvvkVf3MMWe0u78YRzoAAsKRRii/v0QD/Mj64NJK7FnbaLPdEZNlD9LOC9SQczWysAm7y0MyK7svTF0NIpit2h7aIvHjB2I8DRaCH8+s7y7ndALTYm/Y1F2kWRVzDLUD3RFsxFc6WpB+Vf2IGLdrQIs/n5PE/FOdWJIu7rkNlBRRGXoskzDW4cmPAD3M254Gb64h3yKYx86EhWADnKYYC/Qx4YTzYH0J8LHTEryLziQ4zkeAAXkfasmoXko418iOEVj95SguiG+cXEb1kFvemCDNNAPUOy5tVbyql4wXwoEFWSt+vR2ZBQ8Vrjg6w9Es/SW2bgiHdjIlQOGbuxeb4ZO9s9w0xU+IYPMwoFjd3lNPFUtDCzaFDhLniPtGDRrAg1npWGIVqdvN1PAKzfxKJISyLkY9Oy7qiK3mHoUSe2c7tNj0pYhYpGFQDXHZ0ImJkbnW8TAxBwM+qnWjHBpr1WAxmQCrgU3j5ggWvVMMeANZama9xu1BAKqweszlOwR5XRWype08LntW3i665UGyyKyTgb1NL8THDGIu5viXS/o6J0dyKjx/kGjfF2o2V2Che3CGRssuOwondk1aQH/i42pxVEq0aV9NgeTGBTfb6jYeed5953b24/986Ezhq+8nQy1U/PEhDes1i0nMB2sG52n5NJ+r1JttCl57HHaZZeErM0HjitNM++uEDPi7TjlryTkdYCyJc6WrzwZ/AfYCJngfo+IiezBBBG/s421B9RzOfzwLOJUlFkrf8F3cRIeghN6iUhFnVhyRveAjlG0oa1oOxBF5puCaDsGkYCKWOhpBa6tLcam4cxQnQWeXMTaj6xVEl8GbYF+eY3sX+TtaGGg/8aINJbhsFu00ks+LU+9yN0YIrAjxxJCgivAOrb8EB2daRztNLdvEmcqGJNSTbJpMQqp8WZLjvIKpotEmwVw01uP5Vpyr3DIOrwR6nksfWXmfPfgkFcYLPpCDPNqKCuxKXm/LasS6Up/NzrIybhoIZf3glvQgYLXB5xVsh97k3zqAYOgm9/BwxMYzeOEirs/BOiHRkNd1a2SClhqMtexKIQaCWoHObWAL4I4zijHS0uU9LxEsrwigxbeva5GzLMLTmmzOPlV+dIZ5aBoNNfwU47WhxmYZYTjd5Fs3ncXATTX7mLlMZK+m2g33twHJvXm8dG9FeI68yQiLtld+o4yUYz5Sk8AvIKYscXx4jNPOf4CsKv+0fGeHSSvZH42YoW7Mj9yIfjM6uLGcRFsSv81II2PU2f1wtC9McwFuhuvgnNuFTmxWb5yYIw/XtFoel2hKWARm2hCBCW83l6vxUmJUJtSBRj2gA0DSVzW93NE2zi/gkNz4FFH8hi3aVv6YHNeuAJ+2t6YAfwbKQV4QDfpg0UYDSYpTdujT4wqgfieqBTiFl98U598WH2Y2RjXX5Ml5/U5e26tktvjOnaPrCXWZQoiHAeXfD6Zr+/yaX7O4huUSWB1+AVZSD3MTZa6o+uzzV0v6A8oTed6/eGs8LOqLxZGcv2ge5Mtv/3ayNG4p4Okmq03NNY6G5WRgnx7pb5SKRjJnTmKInDUtlzpgwew3QcdIN1dqGF5FOMFg60bCOwKWE35GZGM+6XN+LFLBtNQRK1BIkNBcnjiPeFpghBdNea4gNdQX77a6n5cDdjxI5RG9EWBQlLbOJ8RSECXUS/dfS7jEQerQ0ShVXrLXWpajj4yw+PwDgLm1ajvfEtMdAnYKB+uVBdxuQNpQB7YFN0N1aOvrIafnFLyjznWTGPrTpJAvB4iFTdj8crzUUTzXl1i4oiI8fWsp66XG12+dyhEYDYnBe0YGIYUCM+Uq8Ci8ISLg0kkxT+xNEROoRyTCTxkUPo5W00YbK2VfXRRqNjvOZQhojIyRAR2YEMEZGdISIGFkB7hE2fYW4EiQ7hxNpC/F8n0kI7KdKgtpO/Tel1GcIc08fxA5AOD+MF+7mbMRYdbcHWELaDIE59R2mPsdB2FSfA9637S9Iwrc0bBRrcLR3Izeg1Fqm2akM7bBq1crxaEejB5h5ESbtbZHSeYXa03LYzeWtlRpmlnYisHYa2sxJf2w8iLndCSmah61KFwALDhF+kimFCuuDEjIJ2TLj3ICbsgrbltkzQ+jsohIbpMeq4+iDSWZF2hxihNt+SXrieofqjLUkTR1tep9g23p4Uj8RHM9rc3JHOqcaEoXaE8vB5WPlmB6Z2neHIpibbeZv86Ug5GLpiY/IGIRIcpN+7UCQ4zDb6jqRJQkyNu6V0zFSe6/rcVLqbrx21zAMxLm1SelxHuhAsi7g1F1L2fuxGLsBhUgq/vH1kTAPqpLTh39KFhV3ACeYk/V98RFxDRQ0g0uMZzXkh4U+U4Kk2Xw/HcYwWQDO7xvblbl4oBDsi2IXzm8ZpvgCUrrQyO7s/3Zm4F+sYX2l2dyaJ5khG02IQWk6689ixC6Dv4yQJViQTG8GcBuCxV6lpHLkYy/ABc/AeE54PDnweddZk3XrMRJ3HRN1LBzKaQ8Q/e8CSMZqLP3l+U7PTgBuvjWTASCNPQ/nPw9RsZQojCw8Q1bubcX3R5HFcDI+0j2LYvQCdSxxEYelBPdBsPwhmOqgHlqMHNoFpsXiD8GwF8wuRon7V/wpKWjUnIm+wJzwhXO3eYB1ekjeYHqPmpTUCPUMbGmqF5WmShm84htLDgwnYgLWfT+RmyM3X54N6TB1ZzCgpjDkYZQIEtCXwfi2NtX/Ui1CGeYW+/Fbc/vPI+3b7wfbhrESOSDMlW2aVAjokuQ0X38bUyKYkofVtAdfVsndMtauw2uWGdYZztkjNCxkzsVr6iBcaqQaIo/0lKR8ZZbe+G5/4e1WoJnC6UdDru/GJH6XEIZGYre/GJ76raiTDeBRyhDZo/rLKkh4pYPpwjY0AN2i3qTYFV9wmWXG6TCQ0jzl7ao7tBrRNUWfXoMn5H/S8MEpJwQNTgNRDY8N72SuDozihA6MmoC0YFFHAwp2Avr4lBTGbz+hACTFg0vqfU9IobPk+eBmBZbfgDWlWNBptFeR6i9QmmnpJBPfIgtnUPpIJBXWY8FwQgXfKIwa/I5/OrlinVQOFzIbBJWPzdhil0lDdBab8PFC3eKhdze2Qi8TWoqLzTmEGhnlTpxmDcmXGoIr+cwzqz/PMGFQh7lHtwwDUm1Nc2DhuItDyM3ah32/t+50bWTUo7cfqOl58UyTi+asJuYEB/udXEYbBMXXMTapQnjfMG6Gdo9q0C1xyuUMdNXiZ1zrKM+UzgOcPAh6JBUoorN7rbg4L8U2ryB4rcGjqPDsIu8Yy8Ki4dk0NOuJh0pI9Y46YCR+JMNBzMzD99XTY7NHv5Ui+uIL3FJZFcdUHj0JY867LyVbe+ZP0sYfvQ+lI4wzQJqcxcPTbfydFIPLbz2UGIs24UkYw8tO/pYIADSzy05F3ZQQj2ZQGXNfHiCTFuIessPKqbukAUo3e2IVjIAffJOVAF7/nMB5u6iLVRaK+XHg4szJi4yJcbbVutkuU+v7+jBh1ObSHPiV0xA/eNELB7L4XgUifm0wB0LAnVo0TsivPJeEOk7Pmtv5wCHeQL35A7MmvpUNzWjLjNJRfKzHXrc0pD/TTuTQ+41lEYaFNm0YnFehQeFZIbEDkH16C8PbjFn4PtH1mQBLHficSdd9vbSmmm1NTHRtv0fHNlWOWyl24dfFbq0eNjPN01u3J1903mqqaukHP3BsN2dPuw7NRAOEXfHEApkahICI3IeW3AIyJIBTI0pQUAJncQfFmkwbC2Ua+anHJroMml7jSXIIcUp9EJrl5LoiF4jyxauWNfQvRPsfjIpnUiIfRzUGtu3fUwIuRM6/Yu0tsu8ebhPjFQB1ikZG2b5ahPxFwUXzdY5cLcOl5ENSynVYTR4Osp4Z8ixMnP+OuV0aMIFogJ/jaPciyhZJ2MZp1cl8ttjWwT9gRJ2p5cI9YBjzBjx20YhADHfIABTLWVcJQlnhoOcHa9WbMVM1d/CCzXjv0eZkl5FWGnPpqpSmnCnBN4qeIjy+5XRLdToGHGIvMCyqUsK0WqfEyaJSOiwFCRW5dKneA2xEPeIagX2HHkeT5ZLTuh4FJ2XF/faF2kzhRr/CcfWR82ckaFQtt7Dhf9eIIHTuDx3fIMvfg1jsXD7xIL3hTQCXdFAA0fvhlgSco4OVlL6ab86Sam5pu7n+ouQJxHevobnHLgNZuqfDAwEZBIJffaCG6X9f6+RR45UOTxJpNcawd8bN2Ei1F4gEjzYkz3Sl6PvkJdQx+ZGU4G0P5gf5wNszqXEUPDJgH6QzrnrA6P90Tpil+uiZMqw7i7Xzf1PByv4I0aYNfrV25d75WJsW2dm+Q0nf6rfxl+k6/W6FW4j6xVvUu/cFq2THpQZSPgR4eb0c89Ch4BDPJH0Qbe5jlhOmWwmJcce4Rlx7iivxa8yIgxM9iKFmL16/FLaT0dMg9RDefzgHE/GuiUCie2D8RMUMul3WSwmSTf8eJHlKccpxnUee+eAs6+rSY/2R30qC7IfppuhWe2ItT5cWJLeC1u8RUvXbgcwxwP4CAJ3IWTxSXb5XFLkoCFN8hKLrME21gX3y7ICvy7cIs88iJHhjMPFIZObIg2thpHvQyQngm7Wvo48gcRDxiqwaF/6AvXnEOAKY77BInTIB7EGDwwW4wAZY7yU/d+oL52k3OJ+L9GJ9qljmGg2qiEoXi5d70i4evfCFVzMNDL4hV5+OgTIC9+vita3JwC1LYZrQdFit/oVD4tvDKcFb69DYGqm2tvO/HeNoHXyR+zZrUgbsOmRPuKmbD9BW6CHENuEswdgfi7pcTrJsSdflJdnMZa4vb6b6aKMZh9F+hl4JblorO0g4Tm2ru3yoW29rGdci03QtvsfSkLkFUJ1mlrVux04e1HBXn1MnmkbQOeTOF5eIqVN9shUzWi9AI37EfReyTUYoE0WntPa+kHUC5meIgynEY5ZoCtrQs2riV9kAFtkfa7XpgO/sljoRFYlk4HmL6io4mjdg3vPLkJ3Wl7ZHh8Y328Pg6RZyw4p/emyPhNTbRwGP8GrN3+TGFxFrFKzhP25m8A1LRf8OQrsLL91jBDUrmjz+Pp1Efw1nQtcf4qzdgK9sBg9pl/sbNWqGhNUNB/iEKwzl0gcNuHN6ZRWiHLd7KKH4SvdOm18fgN8Kz9MVten08uiQrctAebTIw3Fl/WF/cSYdAT0WrDb2+F8RYVBnxnd5Pxo28Q2/ch3sUAj14mWojLTLWb9K1jSKw2WYaPiK4GdjI14BcZY1P+us97ubHaS/WRlRLHpSwUSQAflMoV6LVcbp18hJGziurLGMbaNmaaIXlKcajuDaKTso1CuLwBsLZE3TsPK2ZH+uQHyOJssMP9uKlsTiKr/rNmTdAZJSvBUgeBuktIKdkDP0hHk/wp1+20AjjIHm+kS/0o8uASMUpJy4gkuJ+yGAdvGwc8IDrQsdI88yLf1zsYTylGLLGc6QgfSuEWoIH+vhdpLL5mNtWIL1D7qeRHZ81QhcMiRvbcb/XuU8n0AWyYSX2Q+S7LzqR7/A+B5YX1fYFo1ovmAhlMLeGVmJoxdA3enFMLrTL3lrTukANdHLUvGkiescnML3Rqk8i7W6xpS0Sd4M1jbujpnwXj4XSvgs850ka5BS//HFKjVaNRFeM6HIsEs81T9BFb8vVAzt1uU0tDdYEyYK/+dEc8hXcLZvEjjJcLdTaQoYWC/ErITNxP92wGOjkxks42sO4m4ZYxQPvQcDlYV3uxqs+QaCN20UmEG4MXPOHEbr5HE2gWFTeFcL8MyQF2/Diqdo/4GM3JHbuRV7qRF7qkDtJimnXp1ZmuPydHIkvzxW7o5TYYURrV45Aax7aJI2HQ9HGeEggFCw9E6dg5WUcDhYYZgFhkuDGQk9pAJjI6zsddVTrcqF/OpnmeHFkjL/07RzapQuelnaYDtuCTR37lSVtY7wNCpxpJ4zFfcb8UC3e1vAeDgSoV2jjj2IUgYwGdujydj71JczbIaynLH4qhrxYgOve9V5d3sc6aH8aW1wIwHXj5rseuja9Fw2NTjTz9ECnXo8HwnGHQGOfvpjuY6gfEIv8KLKO8ybqch88qTHE6Q5a8JJ3ELFedp2F07YOuY3QPAmSuD1HGM1lsY8QtfdmI2q9eAOJZh1MFi4DaFEESNzc8Ja/sVzL9jfOUEFfFuAWqN0OE+V95FP0gnQgcurhF5OK7D3Pn0xZHBtnguVZQMZNiTrN31imTsYj2wVIMEdXjRpn8FI6Ia+7+fdwYHgmmXR4dM/5OvyqziSFH1CHF6AOX/s8dl4sVPJ7vxMqWS6qtvR38HmU7EVQhKJy+36HUbkS9ZIxjVz7fEqVF/GfU5Ey9XLwWTEUWYAzBFVd1BIlFcHrfb8TSv7MixbeuzvkbsL7T2dgC+Xq2Ft+8xCb0zIv+TCRcHgl+PjLHDBNM9Aku3IEpunrdpd5/OOLPXS6vOVB2ijvbFhUQCdIrtpPJ0ic7MUi3KV4cUP5ZEp37xeH0fH+YvbiLAdo
*/