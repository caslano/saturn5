#ifndef BOOST_LEAF_TO_VARIANT_HPP_INCLUDED
#define BOOST_LEAF_TO_VARIANT_HPP_INCLUDED

// Copyright 2018-2022 Emil Dotchevski and Reverge Studios, Inc.

// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

#if __cplusplus >= 201703L

#include <boost/leaf/config.hpp>
#include <boost/leaf/handle_errors.hpp>
#include <boost/leaf/result.hpp>
#include <variant>
#include <optional>
#include <tuple>

namespace boost { namespace leaf {

template <class... E, class TryBlock>
std::variant<typename std::decay<decltype(std::declval<TryBlock>()().value())>::type,std::tuple<std::optional<E>...>>
to_variant( TryBlock && try_block )
{
    static_assert(is_result_type<decltype(std::declval<TryBlock>()())>::value, "The return type of the try_block passed to a to_variant function must be registered with leaf::is_result_type");
    using T = typename std::decay<decltype(std::declval<TryBlock>()().value())>::type;
    using error_tuple_type = std::tuple<std::optional<E>...>;
    using variant_type = std::variant<T, error_tuple_type>;
    return try_handle_all(
        [&]() -> result<variant_type>
        {
            if( auto r = std::forward<TryBlock>(try_block)() )
                return *std::move(r);
            else
                return r.error();
        },
        []( E const * ... e ) -> variant_type
        {
            return error_tuple_type { e ? std::optional<E>(*e) : std::optional<E>{}... };
        },
        []() -> variant_type
        {
            return error_tuple_type { };
        } );
}

} }

#endif

#endif

/* to_variant.hpp
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
*/