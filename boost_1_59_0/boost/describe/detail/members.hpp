#ifndef BOOST_DESCRIBE_DETAIL_MEMBERS_HPP_INCLUDED
#define BOOST_DESCRIBE_DETAIL_MEMBERS_HPP_INCLUDED

// Copyright 2020 Peter Dimov
// Distributed under the Boost Software License, Version 1.0.
// https://www.boost.org/LICENSE_1_0.txt

#include <boost/describe/modifiers.hpp>
#include <boost/describe/detail/pp_for_each.hpp>
#include <boost/describe/detail/pp_utilities.hpp>
#include <boost/describe/detail/list.hpp>
#include <type_traits>

namespace boost
{
namespace describe
{
namespace detail
{

template<class Pm> constexpr unsigned add_static_modifier( Pm )
{
    return std::is_member_pointer<Pm>::value? 0: mod_static;
}

template<class Pm> constexpr unsigned add_function_modifier( Pm )
{
    return std::is_member_function_pointer<Pm>::value || std::is_function< std::remove_pointer_t<Pm> >::value? mod_function: 0;
}

template<class D, unsigned M> struct member_descriptor
{
    static constexpr decltype(D::pointer()) pointer = D::pointer();
    static constexpr decltype(D::name()) name = D::name();
    static constexpr unsigned modifiers = M | add_static_modifier( D::pointer() ) | add_function_modifier( D::pointer() );
};

template<class D, unsigned M> constexpr decltype(D::pointer()) member_descriptor<D, M>::pointer;
template<class D, unsigned M> constexpr decltype(D::name()) member_descriptor<D, M>::name;
template<class D, unsigned M> constexpr unsigned member_descriptor<D, M>::modifiers;

template<unsigned M, class... T> auto member_descriptor_fn_impl( int, T... )
{
    return list<member_descriptor<T, M>...>();
}

template<class C, class F> constexpr auto mfn( F C::* p ) { return p; }
template<class C, class F> constexpr auto mfn( F * p ) { return p; }

#define BOOST_DESCRIBE_MEMBER_IMPL(C, m) , []{ struct _boost_desc { \
    static constexpr auto pointer() noexcept { return BOOST_DESCRIBE_PP_POINTER(C, m); } \
    static constexpr auto name() noexcept { return BOOST_DESCRIBE_PP_NAME(m); } }; return _boost_desc(); }()

#if defined(_MSC_VER) && !defined(__clang__)

#define BOOST_DESCRIBE_PUBLIC_MEMBERS(C, ...) inline auto boost_public_member_descriptor_fn( C** ) \
{ return boost::describe::detail::member_descriptor_fn_impl<boost::describe::mod_public>( 0 BOOST_DESCRIBE_PP_FOR_EACH(BOOST_DESCRIBE_MEMBER_IMPL, C, __VA_ARGS__) ); }

#define BOOST_DESCRIBE_PROTECTED_MEMBERS(C, ...) inline auto boost_protected_member_descriptor_fn( C** ) \
{ return boost::describe::detail::member_descriptor_fn_impl<boost::describe::mod_protected>( 0 BOOST_DESCRIBE_PP_FOR_EACH(BOOST_DESCRIBE_MEMBER_IMPL, C, __VA_ARGS__) ); }

#define BOOST_DESCRIBE_PRIVATE_MEMBERS(C, ...) inline auto boost_private_member_descriptor_fn( C** ) \
{ return boost::describe::detail::member_descriptor_fn_impl<boost::describe::mod_private>( 0 BOOST_DESCRIBE_PP_FOR_EACH(BOOST_DESCRIBE_MEMBER_IMPL, C, __VA_ARGS__) ); }

#else

#define BOOST_DESCRIBE_PUBLIC_MEMBERS(C, ...) inline auto boost_public_member_descriptor_fn( C** ) \
{ return boost::describe::detail::member_descriptor_fn_impl<boost::describe::mod_public>( 0 BOOST_DESCRIBE_PP_FOR_EACH(BOOST_DESCRIBE_MEMBER_IMPL, C, ##__VA_ARGS__) ); }

#define BOOST_DESCRIBE_PROTECTED_MEMBERS(C, ...) inline auto boost_protected_member_descriptor_fn( C** ) \
{ return boost::describe::detail::member_descriptor_fn_impl<boost::describe::mod_protected>( 0 BOOST_DESCRIBE_PP_FOR_EACH(BOOST_DESCRIBE_MEMBER_IMPL, C, ##__VA_ARGS__) ); }

#define BOOST_DESCRIBE_PRIVATE_MEMBERS(C, ...) inline auto boost_private_member_descriptor_fn( C** ) \
{ return boost::describe::detail::member_descriptor_fn_impl<boost::describe::mod_private>( 0 BOOST_DESCRIBE_PP_FOR_EACH(BOOST_DESCRIBE_MEMBER_IMPL, C, ##__VA_ARGS__) ); }

#endif

} // namespace detail
} // namespace describe
} // namespace boost

#endif // #ifndef BOOST_DESCRIBE_DETAIL_MEMBERS_HPP_INCLUDED

/* members.hpp
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
*/