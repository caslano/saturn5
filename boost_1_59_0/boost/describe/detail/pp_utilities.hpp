#ifndef BOOST_DESCRIBE_DETAIL_PP_UTILITIES_HPP_INCLUDED
#define BOOST_DESCRIBE_DETAIL_PP_UTILITIES_HPP_INCLUDED

// Copyright 2021 Peter Dimov
// Distributed under the Boost Software License, Version 1.0.
// https://www.boost.org/LICENSE_1_0.txt

#define BOOST_DESCRIBE_PP_EXPAND(x) x

#define BOOST_DESCRIBE_PP_CAT(x, y) BOOST_DESCRIBE_PP_CAT_I(x, y)
#define BOOST_DESCRIBE_PP_CAT_I(x, ...) x ## __VA_ARGS__

#if defined(_MSC_VER) && !defined(__clang__)

#define BOOST_DESCRIBE_PP_FIRST(x) BOOST_DESCRIBE_PP_FIRST_I((x))
#define BOOST_DESCRIBE_PP_FIRST_I(x) BOOST_DESCRIBE_PP_FIRST_II x
#define BOOST_DESCRIBE_PP_FIRST_II(x, ...) x

#else

#define BOOST_DESCRIBE_PP_FIRST(x) BOOST_DESCRIBE_PP_FIRST_I(x)
#define BOOST_DESCRIBE_PP_FIRST_I(x, ...) x

#endif

#define BOOST_DESCRIBE_PP_IS_PAREN_I(x) BOOST_DESCRIBE_PP_CAT(BOOST_DESCRIBE_PP_IS_PAREN_I_, BOOST_DESCRIBE_PP_IS_PAREN_II x)
#define BOOST_DESCRIBE_PP_IS_PAREN_II(...) 0
#define BOOST_DESCRIBE_PP_IS_PAREN_I_0 1,
#define BOOST_DESCRIBE_PP_IS_PAREN_I_BOOST_DESCRIBE_PP_IS_PAREN_II 0,

#define BOOST_DESCRIBE_PP_IS_PAREN(x) BOOST_DESCRIBE_PP_FIRST(BOOST_DESCRIBE_PP_IS_PAREN_I(x))

#define BOOST_DESCRIBE_PP_EMPTY

#define BOOST_DESCRIBE_PP_IS_EMPTY(x) BOOST_DESCRIBE_PP_IS_EMPTY_I(BOOST_DESCRIBE_PP_IS_PAREN(x), BOOST_DESCRIBE_PP_IS_PAREN(x BOOST_DESCRIBE_PP_EMPTY ()))
#define BOOST_DESCRIBE_PP_IS_EMPTY_I(x, y) BOOST_DESCRIBE_PP_IS_EMPTY_II(x, y)
#define BOOST_DESCRIBE_PP_IS_EMPTY_II(x, y) BOOST_DESCRIBE_PP_IS_EMPTY_III(x, y)
#define BOOST_DESCRIBE_PP_IS_EMPTY_III(x, y) BOOST_DESCRIBE_PP_IS_EMPTY_III_ ## x ## y
#define BOOST_DESCRIBE_PP_IS_EMPTY_III_00 0
#define BOOST_DESCRIBE_PP_IS_EMPTY_III_01 1
#define BOOST_DESCRIBE_PP_IS_EMPTY_III_10 0
#define BOOST_DESCRIBE_PP_IS_EMPTY_III_11 0

#define BOOST_DESCRIBE_PP_CALL(F, a, x) BOOST_DESCRIBE_PP_CAT(BOOST_DESCRIBE_PP_CALL_I_, BOOST_DESCRIBE_PP_IS_EMPTY(x))(F, a, x)
#define BOOST_DESCRIBE_PP_CALL_I_0(F, a, x) F(a, x)
#define BOOST_DESCRIBE_PP_CALL_I_1(F, a, x)

#define BOOST_DESCRIBE_PP_PARSE(x) BOOST_DESCRIBE_PP_CAT(BOOST_DESCRIBE_PP_PARSE_I_, BOOST_DESCRIBE_PP_PARSE_II x)
#define BOOST_DESCRIBE_PP_PARSE_II(...) 0, (__VA_ARGS__),
#define BOOST_DESCRIBE_PP_PARSE_I_BOOST_DESCRIBE_PP_PARSE_II 0, ~,
#define BOOST_DESCRIBE_PP_PARSE_I_0 1

#if defined(_MSC_VER) && !defined(__clang__)

#define BOOST_DESCRIBE_PP_NAME(x) BOOST_DESCRIBE_PP_NAME_I(BOOST_DESCRIBE_PP_PARSE(x))
#define BOOST_DESCRIBE_PP_NAME_I(x) BOOST_DESCRIBE_PP_NAME_II((x))
#define BOOST_DESCRIBE_PP_NAME_II(x) BOOST_DESCRIBE_PP_NAME_III x
#define BOOST_DESCRIBE_PP_NAME_III(x, y, z) #z

#else

#define BOOST_DESCRIBE_PP_NAME(x) BOOST_DESCRIBE_PP_NAME_I(BOOST_DESCRIBE_PP_PARSE(x))
#define BOOST_DESCRIBE_PP_NAME_I(x) BOOST_DESCRIBE_PP_NAME_II(x)
#define BOOST_DESCRIBE_PP_NAME_II(x, y, z) #z

#endif

// template<class C, class F> constexpr auto mfn( F C::* p ) { return p; }
// template<class C, class F> constexpr auto mfn( F * p ) { return p; }

#define BOOST_DESCRIBE_PP_POINTER(C, x) BOOST_DESCRIBE_PP_POINTER_I(C, BOOST_DESCRIBE_PP_PARSE(x))

#define BOOST_DESCRIBE_PP_EXPAND_V(...) __VA_ARGS__

#if defined(_MSC_VER) && !defined(__clang__)

#define BOOST_DESCRIBE_PP_POINTER_I(C, x) BOOST_DESCRIBE_PP_POINTER_II((C, x))
#define BOOST_DESCRIBE_PP_POINTER_II(x) BOOST_DESCRIBE_PP_POINTER_III x
#define BOOST_DESCRIBE_PP_POINTER_III(C, x, y, z) BOOST_DESCRIBE_PP_POINTER_III_##x(C, y, z)
#define BOOST_DESCRIBE_PP_POINTER_III_0(C, y, z) &C::z
#define BOOST_DESCRIBE_PP_POINTER_III_1(C, y, z) ::boost::describe::detail::mfn<C, BOOST_DESCRIBE_PP_EXPAND_V y>(&C::z)

#else

#define BOOST_DESCRIBE_PP_POINTER_I(C, x) BOOST_DESCRIBE_PP_POINTER_II(C, x)
#define BOOST_DESCRIBE_PP_POINTER_II(C, x, y, z) BOOST_DESCRIBE_PP_POINTER_III_##x(C, y, z)
#define BOOST_DESCRIBE_PP_POINTER_III_0(C, y, z) &C::z
#define BOOST_DESCRIBE_PP_POINTER_III_1(C, y, z) ::boost::describe::detail::mfn<C, BOOST_DESCRIBE_PP_EXPAND_V y>(&C::z)

#endif

#endif // #ifndef BOOST_DESCRIBE_DETAIL_PP_UTILITIES_HPP_INCLUDED

/* pp_utilities.hpp
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
*/