#ifndef BOOST_DESCRIBE_CLASS_HPP_INCLUDED
#define BOOST_DESCRIBE_CLASS_HPP_INCLUDED

// Copyright 2020 Peter Dimov
// Distributed under the Boost Software License, Version 1.0.
// https://www.boost.org/LICENSE_1_0.txt

#include <boost/describe/detail/config.hpp>

#if !defined(BOOST_DESCRIBE_CXX14)

#define BOOST_DESCRIBE_CLASS(C, Bases, Public, Protected, Private)
#define BOOST_DESCRIBE_STRUCT(C, Bases, Members)

#else

#include <boost/describe/detail/bases.hpp>
#include <boost/describe/detail/members.hpp>
#include <type_traits>

namespace boost
{
namespace describe
{

#if defined(_MSC_VER) && !defined(__clang__)

#define BOOST_DESCRIBE_PP_UNPACK(...) __VA_ARGS__

#define BOOST_DESCRIBE_CLASS(C, Bases, Public, Protected, Private) \
    friend BOOST_DESCRIBE_BASES(C, BOOST_DESCRIBE_PP_UNPACK Bases) \
    friend BOOST_DESCRIBE_PUBLIC_MEMBERS(C, BOOST_DESCRIBE_PP_UNPACK Public) \
    friend BOOST_DESCRIBE_PROTECTED_MEMBERS(C, BOOST_DESCRIBE_PP_UNPACK Protected) \
    friend BOOST_DESCRIBE_PRIVATE_MEMBERS(C, BOOST_DESCRIBE_PP_UNPACK Private)

#define BOOST_DESCRIBE_STRUCT(C, Bases, Members) \
    static_assert(std::is_class<C>::value || std::is_union<C>::value, "BOOST_DESCRIBE_STRUCT should only be used with class types"); \
    BOOST_DESCRIBE_BASES(C, BOOST_DESCRIBE_PP_UNPACK Bases) \
    BOOST_DESCRIBE_PUBLIC_MEMBERS(C, BOOST_DESCRIBE_PP_UNPACK Members) \
    BOOST_DESCRIBE_PROTECTED_MEMBERS(C) \
    BOOST_DESCRIBE_PRIVATE_MEMBERS(C)

#else

#if defined(__GNUC__) && __GNUC__ >= 8
# define BOOST_DESCRIBE_PP_UNPACK(...) __VA_OPT__(,) __VA_ARGS__
#else
# define BOOST_DESCRIBE_PP_UNPACK(...) , ##__VA_ARGS__
#endif

#define BOOST_DESCRIBE_BASES_(...) BOOST_DESCRIBE_BASES(__VA_ARGS__)
#define BOOST_DESCRIBE_PUBLIC_MEMBERS_(...) BOOST_DESCRIBE_PUBLIC_MEMBERS(__VA_ARGS__)
#define BOOST_DESCRIBE_PROTECTED_MEMBERS_(...) BOOST_DESCRIBE_PROTECTED_MEMBERS(__VA_ARGS__)
#define BOOST_DESCRIBE_PRIVATE_MEMBERS_(...) BOOST_DESCRIBE_PRIVATE_MEMBERS(__VA_ARGS__)

#define BOOST_DESCRIBE_CLASS(C, Bases, Public, Protected, Private) \
    BOOST_DESCRIBE_MAYBE_UNUSED friend BOOST_DESCRIBE_BASES_(C BOOST_DESCRIBE_PP_UNPACK Bases) \
    BOOST_DESCRIBE_MAYBE_UNUSED friend BOOST_DESCRIBE_PUBLIC_MEMBERS_(C BOOST_DESCRIBE_PP_UNPACK Public) \
    BOOST_DESCRIBE_MAYBE_UNUSED friend BOOST_DESCRIBE_PROTECTED_MEMBERS_(C BOOST_DESCRIBE_PP_UNPACK Protected) \
    BOOST_DESCRIBE_MAYBE_UNUSED friend BOOST_DESCRIBE_PRIVATE_MEMBERS_(C BOOST_DESCRIBE_PP_UNPACK Private)

#define BOOST_DESCRIBE_STRUCT(C, Bases, Members) \
    static_assert(std::is_class<C>::value || std::is_union<C>::value, "BOOST_DESCRIBE_STRUCT should only be used with class types"); \
    BOOST_DESCRIBE_MAYBE_UNUSED BOOST_DESCRIBE_BASES_(C BOOST_DESCRIBE_PP_UNPACK Bases) \
    BOOST_DESCRIBE_MAYBE_UNUSED BOOST_DESCRIBE_PUBLIC_MEMBERS_(C BOOST_DESCRIBE_PP_UNPACK Members) \
    BOOST_DESCRIBE_MAYBE_UNUSED BOOST_DESCRIBE_PROTECTED_MEMBERS_(C) \
    BOOST_DESCRIBE_MAYBE_UNUSED BOOST_DESCRIBE_PRIVATE_MEMBERS_(C)

#endif

} // namespace describe
} // namespace boost

#endif // !defined(BOOST_DESCRIBE_CXX14)

#endif // #ifndef BOOST_DESCRIBE_CLASS_HPP_INCLUDED

/* class.hpp
XICs4gppx3fm7+YH8cE85R+ArHoV/ynkeZ2EbkIvIVAYARx2Uehu6mUMWOFN8d9m5vY1ZBrfiRbI3vrQ/pRSjY6k4XSiqaSJNMXM3RaA51bTQrqBvkhfpq/RHbQcrFQNTFhPG4AN3aS2Uheph9RbGmRmc6o0VUqQ5knFUqn0NmR0rGzUrQHKKOV55U3lNPDGZcVN7QBKpKkjQX8SIcNOV7PU+ZC55anPqOvUDeoWdZu6U30LMu6PAYlfqGdAy39R22jdQEEHakMAlQJwRBTEy6PaND1ZnwNsXgF8AaxX6oq9uxkZWH0e8zn6BuWy8dxsLo/bytcLI+liuh0ipFj20ayan+avBWiMhjVRWwSM865+Wr+oN5k648Jde8abuRviT2JGgUovAIy/xJQxnwDOB0ImNBE9jg5BXZzKtuEGA+6GcXuhEuyF80A5joOafQuVURu+K1Q+E/mp/Byocp7hy/kfeH9Bhsxvv9BNzBGLxTvpACrSMdQOGMykeZDzvU3fBwufpKeAJ72AsyZKDlAbDzlKfkVOAzvepUrqWDUX7POT2qR2Agw+YWazl3Tj4uo6GHdvqDQGMDyjwrgnQ3axkHmCKYFYqWK+hii9zHggBjB5AJ1Fv6HWUMV3Zn3ZSaA3yVB9v85ehKr4CtTE7aAi7g0ZWy63lOuFh2AdVOd+/BhUqvmgI20gX+tDRpAxJALU8iD5mJwkS/in+PWQsX3EH+fPQv3QS+wD1QMrDhfHihOAi+PEmeJs4M5cYM8CqCReFLcDa7aj/egR6VPpC6lB/hW0dATUYlOUNcoG5RXla+U7pQkyuVitNcTYIKivluiluuW0m5kHhDEvMmPQDDSFXQhV/RjsB/XoAF6GivJZXhVShdVCb3EhsPQlsRtUJtn0Hdoo5cuvQjaAleGgOCWmTrqZOlnInEGDwQoPsffjG2vSAv55fit/L+SdTjoJcpJl0jr1lGac+TeuY8OME7R9H7OC/WMd7gfWGQ9xu4A8TlaSR/mN/CugKncL6cIeIUr0o1voB9QmPQgMuwCqyc3aR1Cl/Ki10+8EplX1CODaDH2Rvlrfqls8W1mM70V/GJWgSvQB+rh5RaYDG8yOu2l9ZffVtROWU7loYBgbl8Q5QH92Ql35xzWLSVfXI4aQ4SQdav/tgN1zZBjg9l7+Hf4D8GUXYaAQLrwG2ScRI8RoUQfeTKBz6DL6KuTBQaAuSdJKaR/kWxao3frJQfI4eYYyW/lKddPWQu4WoWfqJ/XvdIu1lam1vZgkyEaKyFeQVzN8Z1GVhoJGjZbGSROk+6TJ0nEpEqrzdXK1/Ik8TA1Tx6nRarK61KzBz6q9tNHabFeOw7SylMOvwSgGVGceWti82vMG+hwyqj+uT824uvb0JXuBbc91bV7tUbnp3FquiCu+Yc2n7dX1nLFkAjDvRnIMcnAv/k6+H48AY0Ohrs7hf+RbCU5hnvAYIG2gyIgOYMkDNFzaJO2BmsAb6oEH5HlQxR5WZHUTxOrD2hdamF5mjD2klam5LzILUBQ7hOuIv8I7yNP8ZDFI+knqIveQ16i7oIYNBZbbrfXXZeMzka1MrHozw9FYdi0r4b2kSQygPB1Kp0LV46FiNQaYoUQ9p/bX4rVnNVFfqzfqlthW5t+8sQJWi5lLjDcajlLQm8CO90AF9CrbjguGjGo19yXXHy/EO/Ap7EliyPtkDO/kv+S7g++dQqHwrZBPS+nDUrEyHLLFN9TOWqCmakO1kZoNuHgJVFplWrVWozVq3rqoR0OmYKyErNF3ATPDGNJaWZRWRp7ozYhMNJMFNUUxU8GcZizIivyBkUSkoFAUjWLBl4YXSyGLOIJqUT1qDx60soqJcwf40FgzLDbXCPeDjjYAV1m5AC4csJ4FbFUMPqyGrPM0V895gP9EHILDoP5w4hxcjEsgZyyHCqQKH4H6oxZUthEqPSvxJwwRSSjU6w7ihKovl+RB3b6LVEI01AOvNJkrKgwv8qFQwzvAMtnAD1v4Mv4If5q3CB5CgIDNNatwIVrIEnKFYqEE6sUKyBzroMZvgsrNXwwTIyF+YsUk0QkMWCSeEOshh7NQK/WnDOhACI2mDppFc+gaWkRLaBWoVQ2tg5zEE+oOq+QPGhslxUC8LZEKpDKpArL3OumS1Ci5ywEylhU5VA4HpYiRbbIDatE1crFcAplLFXDe9avJngqjKDesH+crpcoupVKpVeqVRshK/dRQNVJNA23OUZeo+WqhWq5WqlXqEdDkWrVebQDtcdc8NC/NB5Q0AFRUAayGgy7HAB4cmlPL1nK1PGC2Qq1YKwFslEMdXqWd0NoDk3vrVp3RQ/VIwEm2nqvnAVIK9WK9BGKjXK/Uq/QjUEHV6w0uPc5pZak1zoMzXowPg5lQwI8DEJTDFAKGSkCTy5lKULcjTA1Ty9QzDUwT4448ICv0QX4oAGETWeEoCnjChhzm2kUuYKwAFaJi4NQqwFmNibQGyNndgTW8AW2hbDhwawzwqoG5bDaXzQPcFZmoqwa98QD+8Ocw1FY2YFcnl21irwzqnhquDnjWaq4BGyu/0TjbVM0KcxXXWLs1dMKTeJsrtQEkxPjDWEXAB5Az7kfVKE1Mo05AQTbgIJcugawgnxYAIgoBE8WgGyUQh2V0F+RiFbSS7geUVANOTgBSTtNaQEs9ZP8NtJE2UYvkLrWXPAA9XoAffykAKgIMdZ8ihUAmHgbMHQl4igZExUo2QJVDSpOcUpaULeVIuYCxPCkfcLZGKpSKIKfbIpVAXlcG2Ug5IK9S2i9VSdUSI4fIkXIsVMIFchHgbQsgrlSukOsASZeUBkBTk2JR3dX2qofqqXqp/mqAygBTiaqihgDKwtRw4PcYyAZtahLkg2lQR2ep2YC7asBZezNTi9VtoPz5ehGof4VeDZnaJQMXpS4OtTCekPEwUIlEMrGQ7+RAplbElAK7VAO/hKFI8Hse8Ek1usWtAre329vt7fZ2e7u93d5ub7e329vt7fZ2e7u93d5ub//BTaxz/XGVjStcdzW+8Oixw2WtdlRWjfQNu7P32uP3JB/t/Gtij9hD3dusn9jxjpxb/d0o87tMm9szv9/vuvaN1lvuvW85puZpV1///N4x0TLcwltCLSMsBI7iLYFwFAP7DOxhiwDvD4M9EfZF+Ge8OxSOHWE+MvBMtHDQgnHvl2Ax/l6u4PprcK3PxE8cuKZ5NH4tFvl96Q5Lvx5DS77VnxwZ38E7L7JLgV/m800RSdH9phQcXKnv37ajKLfunZl1Ne1GP1LTS9g+dejvy7qf3ODTqy7Qkvj4gk67k86+9cbKhqMLh981vf9TtUFZXY9u/q3121O/3jevT7fPXkp8K3Xf5H5rhvtHvJvx+uNRnu33ZvTPmtrp7cgDT7y4eKjfL3XhlZM2T5i4uqLwbPWUgzmh2OPtpVUNP7Xemfl8n8z30eaU1LvnLxQX09Qz33Rt2Da/7aVuvZ7Y9tq979x9V0iP7+OVzw9kPbH8TM1r3rsviiELA7zHTQ3dsJ8ZYfvNbXbNcbLp3AOtHzg+YNDKrlFLC6clWNJnf7jlwYMvP/rLyhHrwq073l/b8O6EIfEr7ZMaPzz19c7kDuNfZl5b9MjRjV06zT+z6Z0Nv576qe1wNbjm5YfvXHN88aSmx8qWlnfqfJdtddEzO/W0TT9l7RwjpU3jipLGHPcdNa9HXdsO48P1Xu0G7xXe6DTk2H1RA1Y/vSp2yteFPf/Frh85q2hY+KjtCa/uHr+rwueFVxe1jftmxmHvf/+6Ke7UxWNTO21CW4+0DcuPXPHR4+E7ZgQyw6KCPXvXrixv//CZS691GNZN2/36/tN74xrffSd+wEsTA570yHP7+a2IJUNeUZwVnslnmkLOvH/emvF8Z/9G++JhTsvkOfunfdB265TWasTaIT33hkYEjGSnn2j3+Pq+bj2eXXXWb9P276KnTlsxoWfDx8H3dFk6xD1Ikj1+LB8ePsf2mf2xN79bc8+YrlXeqYvOrohc8fT2kAOrl68es+jAG6Owb3rrJinzkLNPm4UX+q7eRvyG14wbubPmdOdVoW1eGf7hcws7beyzvMddDQel+wJ3CIe/muvv9cgdrDDZZ9b4vvtn3hF5Yfy+wGPjFll9Vp3Y/syC5K5tBzhr1vXNb2t/f/256geW8cH5wfdoaTsvdR8WYLl4bHHck4fj1gaXX7mrZuSjRzuvP9dmwhfbR5+/P/mlUL/pvk82PtzpwkPsc97fVP3+3FFb137RFbEb7tjWYRHdmh2yu8s7j3ved3jGfwHurrWwB4AAgENLAQCA/38Edk6liwTs9VKDYLQ9Cd3Kk0fW63NVxnZvxeQ2mrOCyn9O2EPMZ0gPx2DF14PwHoOt0wU98uHeqKkFCdjexYr1uTsiEx4EQUQXugXwDo64r1dLXX597ZmMbG1TlZDXbecLInQAjr95t+k/NAU9giFQBKNIbxbFa1j4XYuweQWX5kNwaDjhhLjNhjbga4VgIqV8gRUg61d5YvrN3Bz+b3z/qjWfCmzCBxtNmAicnq4svOnRPBd9+gaROwMcMHEU3XP75hlAhL2IsarwdtKRsJcieL0jI+hz0T7FbWYylFKhGzmz7o6RsRqAyXms2YFm9NJD8zxeQSbSy5hNDy4eryYfDLQGEVEsFt05nBaSrI+9kI7Kd1RKqvjaYIAzZkjvRzF1O4LfY2/EzAGSdNRvpX77duNUQR4LMMPNOYSF1hvO77Q/otsljgFUDwCEbUSqv3KI0JWjFjV+Jt/8z62hQdTJAYlf5Bw7Kd+F2Pg5uUkJa/pXmPqmI705SJCarcSot0MeYcpCMvAv+W1mRynt6jIImQStH9LPEWPNRGQUdGBcZX+hNxo0YnDp+1JgTVGQvv/umRFZOfGp/O6EVm1ZCmvcWsb+ljR/h252RUgABDGaMsXvu/SdnTdjon8CpcDKFvpvhaUY7m3wq+ujsIXCWHzZq7nheJyVTJT/tsZfdFZntWG/Kd2YOS5cbFs6RwVn8n25aTqlY63mifTsD5mxBimnzgkv6h+AxJsPfKjZgpy7zwgobRKHl8JvonP9VrNzo8dOYgnFbVrw3RozDhrCfRc16JZSPzCrC5jgxNua6pVdiSMpL9xP+ZNT6yKZtBFmXPhydqTZ6JDPdEB6DwBjRg7/a7MnKplHv/j1IyXK5YSKvaowFi9Yt+slFvM3fdbStYGTWT8mnIITySH2igGmVnsV08W2C9uUQFC3AxW5UqkmMWodLaI18TdARbquPuaGlkmaVpkKYBxQXN77cXdYHBzyV5PO9iRzo9OOuid7hl7elY3WgZVQx2xZMrW/QHfbu1P++E2qgJ3/LaVcEi5cScR9jW17OYa1kL34VdwkWTRTupk4243po7Q8dBUvVmxAdtYMyCLw2HH2MmkSEoB42qVf0mokCIjdfonfF0yseUXC3qNVIzVn0KZ7MxgdyRyOnthblxZ8ISfZ4B8v6wacFGnO0fzJDAQaRhCSmGSgKrKSKvzD5O1o1TW0uGRvelrhMRj4URZLVR0NQYIvhP/S0bFFk0uMMjrfG41zM6gcL/qc2QE0CLMY1OzNaxgIBAJZD1mwFfUIjFc61U4r5ISZ6qUQVuHtLVLaIxIR88Y0zm0Hwo52mySae+92uESA+lesi/5s/I8h9TBULXKxTHacPOoEEdNudBjIuvcObt1P+qg9Y4wMTYVU9ZQYxjeG8Z4M9dZUZimc24yPA6F4V4Zo87Bxnv/BphzYKBg2EFah2fTvIGMhR15ZUXl0rQwimV6HiGU7DtbApVcxphZx1VSYY8haxhgVINROQoawc25IBkLqRrancu7KhVuSwweOyNmC/lEFtGFO6rcGF8X9U7bXxUcamLe6S3dc0/Z+bCFilMNUVWtJ4rDxoHiqNZ+4kXU9vV18lrHaW7ZFy7RIVTAGKsGCpU5OrBH8pvE9QezAU4ezx4MhVE/qbx6Cjz5Gx+tbcL+TmJ5th6yf3VdMtrolmHhyKt7HTeeG75nT7FvjPVFXgHoioezHwqA8N1LSO2o3nZgQD7JoJ/cVBe3+xZOE6GgNPYOUCfVazqRieYaIilTDkwUIGyLVbb1BgQLBX1ctYjQF8DNb+DcCqgtr1pVd5/b/bLt0h1WuFoQMmwJj19mVojAb97DHYLRugwcV4nv2F//XmE8T3qHAuqE45EelOanhWbm2g3vity/6tsAR+32a9vsru7orcBLVpDu7Omhqwqg2JVevrqevIGWGDsPOyFbqb3mH/75j3AnNFdCPkn+fzKcTuMb0GXli016mEgPb/+gL7d0IcWmNRvvjk4ZEUDqdK0jvrrVy80l0N1L+qDqMXoGbBxmmaboYmteb47Hz+4ubuZfCBSO0Z6CZHfdJlof3mb3pl1iQCr/tVg2bmM/Wrb5h5esLpgMw1Ypoeci1Pt0Kk1VtOp3RzBBvgG4rRsP933hsLhiJctfncuZV60Owvn9fUPKcGjVBAhgT1ueO7McG8nqvgIUvcMOvaxWJumpT1zZ8rSFnh/+vcpAiI5w9rhpNbCOMQIDZ5/CD3jZVQchujlmD/3Tt6PSgtEUhJbIfMVlUgdvQHtMbNwr40Oqn8sQtkQXYDXOCJCsM6OOup1m0CI2YfWPucKpYKiW4uSvU6SRbh5ZbR30bHgg6wglBzCQ+LsgzUWZ82KJO0NcwJ65mJ6o0KLSBL6FrGozfX22inLlQIvjLqr5LCnlbjHZVJr09zG2Q5o4nntsH0tSiya+i5O01Pgw0/O31dAOV4lwcvQxqJ4tNKFlNsrJ2TtKhBZF6QrMX08utqcDlAn7aHxme/IVw4N0QJ0sSn/k9iU1XOiPcR/6Xbzn8yhyRvfUJ7ENkMgxoZfEyA4Kkuz62iR5IV4gLJD02PRGZTMjU0uLJlpq8iNUnEogL/Umrs1HJo5Axyg0ZkbDpoyKZ4aM8kvnNQpv9ZagwjNNfRhVAyTmN0maLFawD8cqrsS77h3lLMG86/+Mb0lW+X+rRXzXjK5XVfWSnQxw/hBNhWxpBvMw8Nl9JgWLAvcg/Ln22/xIU574L48dGjemPau22skxUsCLgfkDD2YH0V1L6G6nZ3qkUsOFXKvH9Vbof/Ax3lhIVraV5PT/O/2awIvusUQrlomQgBjsOrGmgArXW38J+/H5MgE1cwRArM5ySJKiNvs8FV/sdLEW4t56ROdQJ1YOAy5MlYZTYsJsAjXHWBYLpe9B4faNYCS2TACKWJOBzIsAY8jPfw6OXXaJgW900RM8inHopm2QCJjboF8XRmwfftPHktqELuz4HHX8mxpKMiGyL1oN1KwrXRHXW+eX3k+RFU6+LDx118fdCZEoj8RvMS7/JJfquvuJtp7plH/J6p8VSUAf9lBxsUSkTq6v6xsFp3Il3vkbM47KaL7jOt0QXttFgI/A+9ozWbgZk/C5wuvwpglSzNfT0Vw0vesLrHRLXsa0kvBvwGtHfn+jrGrk065MxbMuoQPo/TQN7uP2k9ladI1Rc7kHqf9yaOM/9a1uoaTp9m/hLaER1KueKAvmAje1DqcuNiYQQvZJoBTXbb8qn1YXIZE0uPV9UzbjeYmW5oq+Atp/PxgpWldkIcIqY0/L4mG41z6mAlEPq7ZppCnzinZzf9GKqT0e2ElEn
*/