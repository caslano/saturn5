#ifndef DATE_TIME_FILETIME_FUNCTIONS_HPP__
#define DATE_TIME_FILETIME_FUNCTIONS_HPP__

/* Copyright (c) 2004 CrystalClear Software, Inc.
 * Use, modification and distribution is subject to the
 * Boost Software License, Version 1.0. (See accompanying
 * file LICENSE_1_0.txt or http://www.boost.org/LICENSE_1_0.txt)
 * Author: Jeff Garland, Bart Garst
 * $Date$
 */

/*! @file filetime_functions.hpp
 * Function(s) for converting between a FILETIME structure and a
 * time object. This file is only available on systems that have
 * BOOST_HAS_FTIME defined.
 */

#include <boost/date_time/compiler_config.hpp>

#if defined(BOOST_HAS_FTIME) // skip this file if no FILETIME

#include <boost/cstdint.hpp>
#include <boost/date_time/time.hpp>
#include <boost/date_time/date_defs.hpp>

namespace boost {

namespace date_time {

//! Create a time object from an initialized FILETIME struct.
/*!
 * Create a time object from an initialized FILETIME struct.
 * A FILETIME struct holds 100-nanosecond units (0.0000001). When
 * built with microsecond resolution the file_time's sub second value
 * will be truncated. Nanosecond resolution has no truncation.
 *
 * \note The function is templated on the FILETIME type, so that
 *       it can be used with both native FILETIME and the ad-hoc
 *       boost::detail::winapi::FILETIME_ type.
 */
template< typename TimeT, typename FileTimeT >
inline
TimeT time_from_ftime(const FileTimeT& ft)
{
    typedef typename TimeT::date_type date_type;
    typedef typename TimeT::date_duration_type date_duration_type;
    typedef typename TimeT::time_duration_type time_duration_type;

    // https://svn.boost.org/trac/boost/ticket/2523
    // Since this function can be called with arbitrary times, including ones that
    // are before 1970-Jan-01, we'll have to cast the time a bit differently,
    // than it is done in the microsec_clock::file_time_to_microseconds function. This allows to
    // avoid integer wrapping for dates before 1970-Jan-01.

    // 100-nanos since 1601-Jan-01
    uint64_t ft_as_integer = (static_cast< uint64_t >(ft.dwHighDateTime) << 32) | static_cast< uint64_t >(ft.dwLowDateTime);
    uint64_t sec = ft_as_integer / 10000000UL;
    uint32_t sub_sec = static_cast< uint32_t >(ft_as_integer % 10000000UL) // 100-nanoseconds since the last second
#if !defined(BOOST_DATE_TIME_POSIX_TIME_STD_CONFIG)
        / 10U; // microseconds since the last second
#else
        * 100U; // nanoseconds since the last second
#endif

    // split sec into usable chunks: days, hours, minutes, & seconds
    const uint32_t sec_per_day = 86400; // seconds per day
    uint32_t days = static_cast< uint32_t >(sec / sec_per_day);
    uint32_t tmp = static_cast< uint32_t >(sec % sec_per_day);
    uint32_t hours = tmp / 3600; // sec_per_hour
    tmp %= 3600;
    uint32_t minutes = tmp / 60; // sec_per_min
    tmp %= 60;
    uint32_t seconds = tmp; // seconds

    date_duration_type dd(days);
    date_type d = date_type(1601, Jan, 01) + dd;
    return TimeT(d, time_duration_type(hours, minutes, seconds, sub_sec));
}

}} // boost::date_time

#endif // BOOST_HAS_FTIME

#endif // DATE_TIME_FILETIME_FUNCTIONS_HPP__

/* filetime_functions.hpp
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
*/