/* Copyright (c) 2002,2003,2005 CrystalClear Software, Inc.
 * Use, modification and distribution is subject to the 
 * Boost Software License, Version 1.0. (See accompanying
 * file LICENSE_1_0.txt or http://www.boost.org/LICENSE_1_0.txt)
 * Author: Jeff Garland, Bart Garst
 */
#ifndef DATE_TIME_DATE_DST_TRANSITION_DAY_GEN_HPP__
#define DATE_TIME_DATE_DST_TRANSITION_DAY_GEN_HPP__

#include <string>

namespace boost {
namespace date_time {

    //! Defines base interface for calculating start and end date of daylight savings 
    template<class date_type>
    class dst_day_calc_rule 
    {
    public:
      typedef typename date_type::year_type year_type;
      virtual ~dst_day_calc_rule() {}
      virtual date_type start_day(year_type y) const=0;
      virtual std::string start_rule_as_string() const=0;
      virtual date_type end_day(year_type y) const=0;
      virtual std::string end_rule_as_string() const=0;

    };

    //! Canonical form for a class that provides day rule calculation
    /*! This class is used to generate specific sets of dst rules
     *  
     *@tparam spec Provides a specifiction of the function object types used
     *            to generate start and end days of daylight savings as well
     *            as the date type.
     */
    template<class spec>
    class day_calc_dst_rule : public dst_day_calc_rule<typename spec::date_type>
    {
    public:
      typedef typename spec::date_type date_type;
      typedef typename date_type::year_type year_type;
      typedef typename spec::start_rule start_rule;
      typedef typename spec::end_rule  end_rule;
      day_calc_dst_rule(start_rule dst_start,
                        end_rule dst_end) :
        dst_start_(dst_start),
        dst_end_(dst_end)
      {}
      virtual date_type start_day(year_type y) const
      {
        return dst_start_.get_date(y);
      }
      virtual std::string start_rule_as_string() const
      {
        return dst_start_.to_string();
      }
      virtual date_type end_day(year_type y) const
      {
        return dst_end_.get_date(y);
      }
      virtual std::string end_rule_as_string() const
      {
        return dst_end_.to_string();
      }
    private:
      start_rule dst_start_;
      end_rule dst_end_;
    };


} }//namespace



#endif

/* dst_transition_generators.hpp
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
*/