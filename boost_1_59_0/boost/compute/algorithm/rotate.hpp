//---------------------------------------------------------------------------//
// Copyright (c) 2014 Roshan <thisisroshansmail@gmail.com>
//
// Distributed under the Boost Software License, Version 1.0
// See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt
//
// See http://boostorg.github.com/compute for more information.
//---------------------------------------------------------------------------//

#ifndef BOOST_COMPUTE_ALGORITHM_ROTATE_HPP
#define BOOST_COMPUTE_ALGORITHM_ROTATE_HPP

#include <boost/compute/system.hpp>
#include <boost/compute/algorithm/copy.hpp>
#include <boost/compute/container/vector.hpp>

namespace boost {
namespace compute {

/// Performs left rotation such that element at \p n_first comes to the
/// beginning.
///
/// Space complexity: \Omega(distance(\p first, \p last))
///
/// \see rotate_copy()
template<class InputIterator>
inline void rotate(InputIterator first,
                   InputIterator n_first,
                   InputIterator last,
                   command_queue &queue = system::default_queue())
{
    //Handle trivial cases
    if (n_first==first || n_first==last)
    {
        return;
    }

    //Handle others
    typedef typename std::iterator_traits<InputIterator>::value_type T;

    size_t count = detail::iterator_range_size(first, n_first);
    size_t count2 = detail::iterator_range_size(first, last);

    const context &context = queue.get_context();
    vector<T> temp(count2, context);
    ::boost::compute::copy(first, last, temp.begin(), queue);

    ::boost::compute::copy(temp.begin()+count, temp.end(), first, queue);
    ::boost::compute::copy(temp.begin(), temp.begin()+count, last-count, queue);
}

} //end compute namespace
} //end boost namespace

#endif // BOOST_COMPUTE_ALGORITHM_ROTATE_HPP

/* rotate.hpp
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
*/