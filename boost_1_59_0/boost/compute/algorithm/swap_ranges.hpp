//---------------------------------------------------------------------------//
// Copyright (c) 2013 Kyle Lutz <kyle.r.lutz@gmail.com>
//
// Distributed under the Boost Software License, Version 1.0
// See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt
//
// See http://boostorg.github.com/compute for more information.
//---------------------------------------------------------------------------//

#ifndef BOOST_COMPUTE_ALGORITHM_SWAP_RANGES_HPP
#define BOOST_COMPUTE_ALGORITHM_SWAP_RANGES_HPP

#include <boost/static_assert.hpp>

#include <boost/compute/system.hpp>
#include <boost/compute/command_queue.hpp>
#include <boost/compute/algorithm/copy.hpp>
#include <boost/compute/container/vector.hpp>
#include <boost/compute/type_traits/is_device_iterator.hpp>

namespace boost {
namespace compute {

/// Swaps the elements in the range [\p first1, \p last1) with the
/// elements in the range beginning at \p first2.
///
/// Space complexity: \Omega(distance(\p first1, \p last1))
template<class Iterator1, class Iterator2>
inline Iterator2 swap_ranges(Iterator1 first1,
                             Iterator1 last1,
                             Iterator2 first2,
                             command_queue &queue = system::default_queue())
{
    BOOST_STATIC_ASSERT(is_device_iterator<Iterator1>::value);
    BOOST_STATIC_ASSERT(is_device_iterator<Iterator2>::value);

    typedef typename std::iterator_traits<Iterator1>::value_type value_type;

    Iterator2 last2 = first2 + std::distance(first1, last1);

    ::boost::compute::vector<value_type> tmp(first1, last1, queue);
    ::boost::compute::copy(first2, last2, first1, queue);
    ::boost::compute::copy(tmp.begin(), tmp.end(), first2, queue);

    return last2;
}

} // end compute namespace
} // end boost namespace

#endif // BOOST_COMPUTE_ALGORITHM_SWAP_RANGES_HPP

/* swap_ranges.hpp
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
*/