//---------------------------------------------------------------------------//
// Copyright (c) 2013 Kyle Lutz <kyle.r.lutz@gmail.com>
//
// Distributed under the Boost Software License, Version 1.0
// See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt
//
// See http://boostorg.github.com/compute for more information.
//---------------------------------------------------------------------------//

#ifndef BOOST_COMPUTE_ALGORITHM_LOWER_BOUND_HPP
#define BOOST_COMPUTE_ALGORITHM_LOWER_BOUND_HPP

#include <boost/static_assert.hpp>

#include <boost/compute/lambda.hpp>
#include <boost/compute/system.hpp>
#include <boost/compute/command_queue.hpp>
#include <boost/compute/algorithm/detail/binary_find.hpp>
#include <boost/compute/type_traits/is_device_iterator.hpp>

namespace boost {
namespace compute {

/// Returns an iterator pointing to the first element in the sorted
/// range [\p first, \p last) that is not less than \p value.
///
/// Space complexity: \Omega(1)
///
/// \see upper_bound()
template<class InputIterator, class T>
inline InputIterator
lower_bound(InputIterator first,
            InputIterator last,
            const T &value,
            command_queue &queue = system::default_queue())
{
    BOOST_STATIC_ASSERT(is_device_iterator<InputIterator>::value);
    using ::boost::compute::_1;

    InputIterator position =
        detail::binary_find(first, last, _1 >= value, queue);

    return position;
}

} // end compute namespace
} // end boost namespace

#endif // BOOST_COMPUTE_ALGORITHM_LOWER_BOUND_HPP

/* lower_bound.hpp
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
*/