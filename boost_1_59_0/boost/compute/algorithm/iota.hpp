//---------------------------------------------------------------------------//
// Copyright (c) 2013 Kyle Lutz <kyle.r.lutz@gmail.com>
//
// Distributed under the Boost Software License, Version 1.0
// See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt
//
// See http://boostorg.github.com/compute for more information.
//---------------------------------------------------------------------------//

#ifndef BOOST_COMPUTE_ALGORITHM_IOTA_HPP
#define BOOST_COMPUTE_ALGORITHM_IOTA_HPP

#include <boost/static_assert.hpp>

#include <boost/compute/system.hpp>
#include <boost/compute/command_queue.hpp>
#include <boost/compute/algorithm/copy.hpp>
#include <boost/compute/iterator/counting_iterator.hpp>
#include <boost/compute/type_traits/is_device_iterator.hpp>

namespace boost {
namespace compute {

/// Fills the range [\p first, \p last) with sequential values starting at
/// \p value.
///
/// For example, the following code:
/// \snippet test/test_iota.cpp iota
///
/// Will fill \c vec with the values (\c 0, \c 1, \c 2, \c ...).
///
/// Space complexity: \Omega(1)
template<class BufferIterator, class T>
inline void iota(BufferIterator first,
                 BufferIterator last,
                 const T &value,
                 command_queue &queue = system::default_queue())
{
    BOOST_STATIC_ASSERT(is_device_iterator<BufferIterator>::value);
    T count = static_cast<T>(detail::iterator_range_size(first, last));

    copy(
        ::boost::compute::make_counting_iterator(value),
        ::boost::compute::make_counting_iterator(value + count),
        first,
        queue
    );
}

} // end compute namespace
} // end boost namespace

#endif // BOOST_COMPUTE_ALGORITHM_IOTA_HPP

/* iota.hpp
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
*/