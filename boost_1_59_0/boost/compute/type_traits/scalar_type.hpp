//---------------------------------------------------------------------------//
// Copyright (c) 2013 Kyle Lutz <kyle.r.lutz@gmail.com>
//
// Distributed under the Boost Software License, Version 1.0
// See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt
//
// See http://boostorg.github.com/compute for more information.
//---------------------------------------------------------------------------//

#ifndef BOOST_COMPUTE_TYPE_TRAITS_SCALAR_TYPE_HPP
#define BOOST_COMPUTE_TYPE_TRAITS_SCALAR_TYPE_HPP

#include <boost/preprocessor/cat.hpp>

#include <boost/compute/types/fundamental.hpp>

namespace boost {
namespace compute {

/// Meta-function returning the scalar type for a vector type.
///
/// For example,
/// \code
/// scalar_type<float4_>::type == float
/// \endcode
template<class Vector>
struct scalar_type
{
    /// \internal_
    typedef void type;
};

/// \internal_
#define BOOST_COMPUTE_DECLARE_SCALAR_TYPE_FUNCTION(scalar) \
    template<> \
    struct scalar_type<BOOST_PP_CAT(scalar, _)> \
    { \
        typedef BOOST_PP_CAT(scalar, _) type; \
    };

/// \internal_
#define BOOST_COMPUTE_DECLARE_VECTOR_SCALAR_TYPE_FUNCTION(scalar, size) \
    template<> \
    struct scalar_type<BOOST_PP_CAT(BOOST_PP_CAT(scalar, size), _)> \
    { \
        typedef BOOST_PP_CAT(scalar, _) type; \
    };

/// \internal_
#define BOOST_COMPUTE_DECLARE_SCALAR_TYPE_FUNCTIONS(scalar) \
    BOOST_COMPUTE_DECLARE_SCALAR_TYPE_FUNCTION(scalar) \
    BOOST_COMPUTE_DECLARE_VECTOR_SCALAR_TYPE_FUNCTION(scalar, 2) \
    BOOST_COMPUTE_DECLARE_VECTOR_SCALAR_TYPE_FUNCTION(scalar, 4) \
    BOOST_COMPUTE_DECLARE_VECTOR_SCALAR_TYPE_FUNCTION(scalar, 8) \
    BOOST_COMPUTE_DECLARE_VECTOR_SCALAR_TYPE_FUNCTION(scalar, 16)

BOOST_COMPUTE_DECLARE_SCALAR_TYPE_FUNCTIONS(char)
BOOST_COMPUTE_DECLARE_SCALAR_TYPE_FUNCTIONS(uchar)
BOOST_COMPUTE_DECLARE_SCALAR_TYPE_FUNCTIONS(short)
BOOST_COMPUTE_DECLARE_SCALAR_TYPE_FUNCTIONS(ushort)
BOOST_COMPUTE_DECLARE_SCALAR_TYPE_FUNCTIONS(int)
BOOST_COMPUTE_DECLARE_SCALAR_TYPE_FUNCTIONS(uint)
BOOST_COMPUTE_DECLARE_SCALAR_TYPE_FUNCTIONS(long)
BOOST_COMPUTE_DECLARE_SCALAR_TYPE_FUNCTIONS(ulong)
BOOST_COMPUTE_DECLARE_SCALAR_TYPE_FUNCTIONS(float)
BOOST_COMPUTE_DECLARE_SCALAR_TYPE_FUNCTIONS(double)

} // end compute namespace
} // end boost namespace

#endif // BOOST_COMPUTE_TYPE_TRAITS_SCALAR_TYPE_HPP

/* scalar_type.hpp
3UAaPwaPdtFovCRoMYRKIvzKAzzvo/vcSHzSl7HU47Xaj7NGBFVImPpQUmlpP7xikKAPPE+cmiZk0C2FiWCYKV7IG27ING7IDe77qp9Rlu4xoALpNloouM0QxLQrOasvdNpLOUwn4jU/NApT07eXUoKW7rJL0shcM98o2Q36WXngGSqNmUqJlM7G2RC2WVGJmRGuWVHe2ZLuWTP62dPrWa3g2dIKerKkmdEr+pVGeo8u+pZoupUgerAouldOejNWetcG+lR6etdKejteelYyevxC+txkulrOWtZrej3e2puu2ryaGryomt3u2luNmhjxmlqu2vl5WwLLGoRku/9wbecsbfMcayCTayVqbcNqa+YZLP515pOKGACPAwkWEu5mEq8lAWLtabNTsQJEQJFIX+HaTePurmQzvMGNvMp6Xcr6PelqHul6QQsCQQwrQUED7VIH3CZ7ATHP4Y2tA2xxQGSMwF8UyYdowWcUAXKrujbwvqKNxKryxrIyxj4ovRpkI5pftD5NuEZo+d+6yTE3Uyi0/z4ygBoSbOWriimVc6fr8XkbeMM5udlKdV/Ler9ce8B1e9yB8X3a8Ixi/xbyAnnpDkTrMRnGKPXPnqvNvhfRt2vRgyrRW8DVQo7UjvPWou6tUjWdMjW1Wt5Jdc8+4i+shpSvvmS0mt5pWa9qnS9v+j144p5/yk9/hj1YiU15Li57sl2K7S59Sk9fJgxuJg2OYqm/E39eHNrNbAJtnOYBKx/AJ3EwFSAL1xLBJdUuJru356bMOQdzPaaV6FPTM9znVtvN8bfNEgScVto68TE4MIw4/LYII3CSSqRZJUtQku6ggznC2DtJ8+FcnIlrsMJ2sBsz4Iu/cILT/0y2Ssh1XG6FI5AFC5h5OW3EW1NNSUXPcW2kO3FciMkKO122cw8xZ1B0a3YEsz/DpITWFTUGUx3H/Icy0rvrTO1EZc18jF3pZIV7MkS+1ay+AoWDjlbI5KN34cTuqoP0j1YNs5VaQMhX9L/ds+ZgRaYNzx/T3VvpoazN39qZHHIhJiJPI5pAqIKFgRzxTu5Lhucz2KLab9AWnVpnDs4r9c/rum1UEDHqrpsPI1+K8JUGx+3r03vleOnwu5DOSftlvdDC6dVB9gw1ILZoWOvI3VfykX3nO0dYbOjwXd1GdRFz3h28QFmJQS/hmR3CnVL2vlrPqoE4CoI8DBTNPRT0rR2LYgoamyLJZ+oYMxpYIjnTdBCgd+5MEipqgG74gDgIbwCH/dPpvgJrfK/7aE2QDGZEA8JGmPFfAd4sY0oidjuTcqSf5XXSk73HkyGrSypzKizbX/iHeRffyr6V1loSntIBt+G7Y/yH/u6Tr9m+uDQGwUl0X64Ypyf4d7fOXiW04B9xgODY1soK8R/6B4EzB77EFBmWqgH+H/j3vf//opUokieGLlZ+6h0JCX3vz5JkQwQ2h5RoJESm7Lz2rjk1PkS9Jm7AwcNvkAGuxVY44LBK3O1LCvc60TJp4zlT9t6dknuDP8cDyjONe5QfOuDjPeN+1qWKUkyCxyyqhFQ7fNsM3slu+l6RfrM6vEoOEI7OFiBH+z0H5eU6hI7Ys9yDQ2uWkgt/TmB6+q6FE3cSkXb6wJoxd/xrAMtktXtn4OPNHJak+NaA8+Ccm49WWnX4TMliuhDELH4L84z76r4fHpCj6zAZHXXaG2Zi68MbpdH+Ep0IGMEf3O5gDyyyX4/9vGcTkBAhfntWJo86WqPisrh79rTJRVwpl8wP7pXZzkoJzZ7TswW6zEg2hv9c8ahg2QxpFIEPnQGqRau07DljDdUlwZttaWkbZxsVGNgFY5aZk+utDcXI5K792I7aySYDVQTJygj+rzvrkj1G23emwgpZS6ZT4tdJg/Wfrv0Lo+z7W7OsXW5z6839Uv23Svr39autMJycAAlLJbCO7NKtHNszTAekw9EwqB5AsDdgz6eJltoBc3ZH+n8+5uDwa0r2frLxWYItnat17joDo5/JWR05cEpx6AWfL1eQMGgtN2Z5lLBxodkmIXkK95/vHWRATg/HoXXPgzTMEpCu/n4dTgS5ZQz+yA6gSjql70R3DeH+wTrD9W3HSy4gKyhlisP3YCpBa4NCi27nJGFwVu15Zca7JITCXxsmgiRlLr46miM9heihVGlKFJYsrv2LwuKUaD4isZCoQo3VsKu7u6g6MOehUPSxDP/WtgsuRfZiQD/SM5UKqEDyKq3nuO7WMhBnuec9MSncKtjS4gXhXqdZRvtCtzLiD0NWgjYURfvCQ+Ij08MncVQdB+aJgcJyjdqKlpF8epX0QcMm68CF2o2f7Pri4IFVDrMpgr6g+G/+IfJuW0q843gS5albTM0JXp0NGN8rUgYwySrtLT4ijBcalYFs4pXfMpNUVloEzTbz+Whd9PeTcbOAqzsHELlyy1XwWJOcb1/15plYwickl2lk3DpCnDpgzokb3ZRecpOevPgR2TOg0BjmoOCb2AUNk5N22F3lhSVTJizesVIaonQN9UPXUnTi85MworiZHsuhZMZxxKBPQdYILcxeBw+NBe4vIkbDUYpGCylvo5vJJYp3qRHreeIfgAwJHV7yk/26hx4GXYXHJV2FWretxPEdpGQid4ebdeftH9s/HO+EiveSYRlT4gpAjcz7bbs+oeJ75MuTYlA3W2wWi/HHMRgAtLH0hP7HLSuW1nibXFe5MA7fPrx0tIj0JBN7TqMeJVjPRbrAVBzJkleoZfm2L+aFjfKMoTIfB+oX2WcsJLjg0SFLgEO4qw0d7Boi2i3TXDYzof1+XvvDO7oddphvRvRoMve+oOyLoOPVayAEGoNo3scapKs+8Z2zR5syo7+9e6TgstB/yNL/rJ5iuC0T6IqYO2hQSo1KHqFDeMIybp3TdjRs6rdSFyx6xUyC1uGQI6h8CT5nLUTEUcnvOmEEdNuT/B9SMjA5L+kGRWUFSeMhUNDu9EZ7Ga4s5ZvZUBJAzyHQtjHKByDnfUJd2vwpXQUMIB9NU+cLFal3n0/Y48B2E5x088MTcaPiVmvOf/adRHX/+nk/N3Gbk1knPL2gBWD8y5PwYbx6DZ33mb/sW8KqAVHy1ZUpJ89j9OU5WLxrR3TT0jpBgGhW2YIspG5NxCN6UxsMaEuIF/yLYVW97ZPezTGDf2QfQsE6vDmftM78UcreBksAz7iQpjWPEkdNWlSiEnmxUFh6Epfnqj0MGBq+h9d0hwaoCXJuvEo3yL6rIdq4Cb4QwPzLTuoe4eci4IXlrPqMi9lluJo4EHdhnHLwsjMoY/SOJ6WZkP5FQvf0FZyN+WVuF4/9nEls1dlZ9pl1tz6nrptAqzxwsDKCHb/gbCeRt+NxOQzbid0X3/Pd+2mGXuHBYPfveKG8zxM3OOid5o1bF/p8Odm61a1lzS67uDtXHbpMg15oC5rkE6/Js3tghYrMVMM76/rpUKqYVg3rBv2nnSGrIFDBwPJyjDupuI5XKPlRkHYdZuJnV+FBnZ+T4Y6U6COdy1ezOPCrOLbOp2fRPULSaBTV4Xh0sf8IyEg4dmlJRMuBvrDHYr3pGe4jBLAOOxB3w1CPXSUrnFH7jj2xAb9Cal0GvZcMNrhEhjhcYZ3BGacpKzPRH4nOQY84UtT28R1XX5g1OSdZQ3xT+s13a64giDR0loHQ3+X/tYRh2V6F5T6O70wFdMm3J4ysD+IkHF64CpxvggvByT/tAT7Q61r8ZJk9usK+POafFqMHqXAfkAwDqRClzFC/3I5FYrMS1QtnW5PoM1BPHS/dQ0ydXfKBoTLut2sIY4YKjJYeHIW/kdwx+jLbPy2kyaCGwI7ggz6/jV/Ci6JpURgu1/uvPV5w5SpRLg8cFFck0lWUzPE4f5GrDNvtl0iDgxJEl4IjzI7sIEtkDetTh23BFI4GTPTfAobzoCbgpk9yI1hUQ4GAY8NMfcj7R+qSGWUQ8VK1y5R0JE4nC/ASJradefdNBpbYpfBH2hrDJSGJgfjdWoDhppDvyLlxH1gmadWTc2hnc1GFL2FaLB4Z/xsj2YnuCP7emK47uSiguB1qWV6f4HsFwY9Ric5h5dsUM3C2Pusd/Kp1BzsygO+n6hpiReR59+tmTBh2EwgXKl6EOzCX+EBtDTh1IPzUMaUBKKXu0cyM1vrpBDlcTSoC02j+tDWCRypDzzmDOSq6SQKzxnkzD2oqwxn6NA3KUS0ic2pSovRB3XW8VeoSQ7L4ebIy0tDJINIpR6qy8wiS9JUqalICR/wcQ5wH9eW2INJKBE4cSuKRUuKSDT6CyG3idSpThHTc7i2rYApaRrz0YBJrpLS8rZ0KYlLLWqxaYUVLGE5UYJWqHmqTbaqpyO1q7ySRmbXXbfLNZOLG+786TPDwQ+or9TFSJY0HE26p9cJJ96xdGlhoAsJ6q41jS9mn5t7RR68wSdu6M9WRW2/x8O6BOHHW/3B0kEmwv2JsxZbxcSgrvRYo1/twV3hhenJTFG9To0sGZPxKoYLxosgSMjXwPkRJU9fmcpJ2xOASpMZhGrtuZTDxoSaSJseCVskStmwTJ0ewGiDjZsgSooGiTnbgMc1cTj0nSP1EFwEavk4eRKQHua0aiq8Hz5ML7XMGNb4Lk4MHPWAblr8H3cOJm0+BQeN5fKdCI/mhnE+uUMUbotWhTGBtpuMHUZON/B8fOL+h/F+J1TyhfGGNjaGPOwWEnqUPr3OigwIcvk8WSFuIA0+FyuPzAgb6bV3v5+3TY+znhr7P4P0GjD/1cRsM9UqkrzrMCZMPokbYW0MKCsnN5zQU2JCbkDjWVMvNW+A0XcFkuie/NXIRiBRB7BzhXhBlajLlKByo0sGo8KLkmsRf8DLgq0SoLKapc0xlrXtis02oXoRZQauoKRkpddSorv/B7ihTsRBG+iJnLVAqe5Fgsd9nKZrLe6ynXhVgeVynbmGqgRlQ+prKbt/A+yOTwocr83KT17KrgBAlG8iT/VsFN2j/2AVAvqOj6rpJUFM+DNNF2ns+tzk6P/ZEJSNDfYIPJy/B9HFEpbEMVwNWqZFO9jJbjmUx8RrmXaJSwcFQIaKHjIrGdBFQWYC0t07SgNJSiSCw74qFnAA3BRJiyXBR0TRlOSjT+HBUAROxb4jRICJiOQEUmIjU+IIsdvXjbKjG+gxhyI7jtErJoEN/3Op+h5izhTOSjp6NiS2WzP6UkWGoiLcUyn42fHCUFQlqj0l0073L7AiChi886LL172B2rPZLFe2v6tgSK/5vuYtg6qvWJ1oLDJZU5EODdQigCsgkdepXLSB+I1tXkoA0nNK0R48pCcm6bvGX2EaRGzFKoHwFoaKD7f5XKjOKTJMyGKpOU59lNflbr2lcMTqcCfK78VGN0vTScMh969c88ReEmKZClz+8jIJn16eh5Rc1aunmyV5hM+01Hpjhu9IPaj3v99qbIW4PdSsNNFPBB0zdQvhlSUBCHUvmq1AGQQU5oXAh3ckMaqKJNyenTUytv7epF5Lk3yW4ad/Xx3KOgHs37AI30syBXQNHefVvD4uFOD7RHbYlOE7H9epNyAh1+8/D+TGmWytfa/GELB5sP4xzZ2sSMZHiE+ROHCRxsOok/MNn25vNFbyF8poQjq6E1I1/OUsXZcBxNwlUtKpNB3IAaXbHYbiFbualnJiS5P5gkLoljl/QPlZoPe6I6dEIl/glvG9PALmoVzabMdogsJQcFrlgX+stHUyyKoKUsEvDrQsRS8NtRU+lUhJFLRtRiv7ZU0NulcygK4bdF+oukczrUxrnckPjFNFjpSaGzEmtglWkNTp2a6H0LB8t2jlerUkKJlUs+fC7QdgDKagPxr6TxX3ZPql7vOUN+Xu9ntq5VEIQpDXUv7b3yUfVo6lVEaL3ttQJNrA+GLNk2EgQLBj9cWOe8RW+UguV7bqo0+ZvS82PBHdYPbXxCrDS3lUZqX+6zFON3OYEiYvDzwDWvD5YX9twpl3WO6e+A0wlklVt1jx2xk2LPCNttZadel8+y4i7h/kmXp2eLsuggK85S5TqQ27bwHJa7tVr2cX44PczA06LscW0ZSVLgXQn8FJ4Vh7/hNEEh2xh+devCS+PC7pxTSwtzTCDPj4j9KYbjD3Z5qlxGp4SSwDW6zLQY959PGQgOnce4AovfNCCVKcYgWSqOIXBwOnfHW9EYl0y/s0iLPYJkAe1u5Q8XMq6L6oNjEDGK769MzqUZX4BmN49XBVCWBoWcGebwbKf21upnBnh4n7/GFn2o78abLvvn8g7I9PZ1mKjOrOrRrNMJQTZD/8PKYDWfzb1Q3c2vQZgwGg0pcXFwGXyOcUGNbPBzTAjOgklJvAuwccHHlZpga5H0hgSgXyf6xeFI7qxPR6WYeTVDdIOcr2lPVHpu4cSq48QcztjUbmA5vMVuGw9QgkUVXH88i5ixIH68frodNmydc6oEYDN9V6PxMHfbxexMaNT3QHthkS2CYjn0dhnhoyG2BQp/oJyP3Dlh6BPIgZv2XwUZOf5sAe/bzskBqmm9BtWclDE+ymmfED6e0RALuIQbP1kFoqzJLTkp7y4uMmMP0zy2Bqqe1MvCYOUv+r37AWwp2w/Bc2UFytnPkZKKSdZsXRoiFk+VgkdJ5V3dLjO+NeBTF4COj2VCBNkSiSevV7G8JtIK2dcXPrjdrZdew9CUAHR2Dep54mbaNfARYKO1CHh1zodF8k1Uji5YQ1sc8vxChNy3JHhJQBGcFRkIdXFHxkppdv4VKxxSo6RESX/oni7+0I6mZEkxfjbxFKNdfK8R0mF4tukWuRwejO5Mb1w+6SAvQLm3yNjieN/UrqRDyUc04ZVEO9Sh0HDrAkj40b+TqETkTTsKfQTNsW3aaoNxdx2chN27hwJy++7PEMjI/bxd5lByLT8SwiTOJ3KseeRR6QL//M/XzyXJddQInwgC57yev0ZffheIpq0POVHwBkBlAu6ge0NFuAt5jkRKJVMk2UrezbPx+P6KuUhnhTpPh9CqBkxKiw/O47CQrv8R5YA+bE+vhXLfSRtuAbADi/beV9smhBaLT7DQLF9X8IioIVoFpAxw2RpESxgauSfoPHdGqWUhDlCo4Rh4buoJLLMcoZR6ehCdTIM62v3KfqvQ82ywW3ScfoKvaXRxcbWhyrHqAqDI/ml1tWHateJCqOn0aXO14caXxRb43qJxQG6Xk3KhdGfwt2x/SSz5HBs0Qh58ivFVCElHFWVFgHBFcPOjaWd/GsWMvoDgacDnHlkfTX9EIyzrcnfUBmXv1sSzi+DjQIBhOi0dr8Jxdakx6PbUVh6uUfVXBGfmiEo8fqRLdT3+VOMltzxpH/NrR/ppRiw7aGgLpv4+xnsuS6hsBKLeQQmKGq1H39L+arCEXoRTdFxrZkyszzL0cnH3fm8QMnYtGN0/Sch6aUDfzz6559i+blyTcLvCEVswMUqlm5J6CqExu/+b+F/WuH8YFm5xxtR9yY86FqM/Anhdn6hLP+mW4vyQWiph0bOR3GpEP8g8hSK8UVzYNomRvKfCbl9h8ajRk0PpLfdYYt2YaKB8EcF3cQImRTg+m5LncHmC4zRBxI1PNdCmp77bf9gHvYRuIFXF4zFtvxhD2VNCEGpHba6gQrGrsccgH8jE2TD/TG8zswOcMm18K/UJXN4h+Oz
*/