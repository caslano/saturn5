//---------------------------------------------------------------------------//
// Copyright (c) 2013 Kyle Lutz <kyle.r.lutz@gmail.com>
//
// Distributed under the Boost Software License, Version 1.0
// See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt
//
// See http://boostorg.github.com/compute for more information.
//---------------------------------------------------------------------------//

#ifndef BOOST_COMPUTE_FUNCTIONAL_GET_HPP
#define BOOST_COMPUTE_FUNCTIONAL_GET_HPP

#include <cstddef>

#include <boost/compute/types/fundamental.hpp>
#include <boost/compute/type_traits/scalar_type.hpp>

namespace boost {
namespace compute {
namespace detail {

// meta-function returning the result type for get<N>()
template<size_t N, class Arg>
struct get_result_type
{
    typedef typename scalar_type<Arg>::type type;
};

template<size_t N, class Arg, class T>
struct invoked_get
{
    typedef typename get_result_type<N, T>::type result_type;

    invoked_get(const Arg &arg)
        : m_arg(arg)
    {
    }

    Arg m_arg;
};

} // end detail namespace

/// Returns the \c N'th element of an aggregate type (e.g. scalarN,
/// pair, tuple, etc.).
///
/// \see \ref field "field<T>"
template<size_t N>
struct get
{
    /// \internal_
    template<class> struct result;

    /// \internal_
    template<class F, class Arg>
    struct result<F(Arg)>
    {
        typedef typename detail::get_result_type<N, Arg>::type type;
    };

    template<class Arg>
    detail::invoked_get<
        N, Arg, typename boost::remove_cv<typename Arg::result_type>::type
    > operator()(const Arg &arg) const
    {
        typedef typename boost::remove_cv<typename Arg::result_type>::type T;

        return detail::invoked_get<N, Arg, T>(arg);
    }
};

} // end compute namespace
} // end boost namespace

#endif // BOOST_COMPUTE_FUNCTIONAL_GET_HPP

/* get.hpp
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
*/