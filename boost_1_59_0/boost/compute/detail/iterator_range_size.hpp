//---------------------------------------------------------------------------//
// Copyright (c) 2013 Kyle Lutz <kyle.r.lutz@gmail.com>
//
// Distributed under the Boost Software License, Version 1.0
// See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt
//
// See http://boostorg.github.com/compute for more information.
//---------------------------------------------------------------------------//

#ifndef BOOST_COMPUTE_DETAIL_ITERATOR_RANGE_SIZE_H
#define BOOST_COMPUTE_DETAIL_ITERATOR_RANGE_SIZE_H

#include <cstddef>
#include <algorithm>
#include <iterator>

namespace boost {
namespace compute {
namespace detail {

// This is a convenience function which returns the size of a range
// bounded by two iterators. This function has two differences from
// the std::distance() function: 1) the return type (size_t) is
// unsigned, and 2) the return value is always positive.
template<class Iterator>
inline size_t iterator_range_size(Iterator first, Iterator last)
{
    typedef typename
        std::iterator_traits<Iterator>::difference_type
        difference_type;

    difference_type difference = std::distance(first, last);

    return static_cast<size_t>(
        (std::max)(difference, static_cast<difference_type>(0))
    );
}

} // end detail namespace
} // end compute namespace
} // end boost namespace

#endif // BOOST_COMPUTE_DETAIL_ITERATOR_RANGE_SIZE_H

/* iterator_range_size.hpp
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
*/