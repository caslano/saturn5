//---------------------------------------------------------------------------//
// Copyright (c) 2013 Kyle Lutz <kyle.r.lutz@gmail.com>
//
// Distributed under the Boost Software License, Version 1.0
// See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt
//
// See http://boostorg.github.com/compute for more information.
//---------------------------------------------------------------------------//

#ifndef BOOST_COMPUTE_DETAIL_ITERATOR_PLUS_DISTANCE_HPP
#define BOOST_COMPUTE_DETAIL_ITERATOR_PLUS_DISTANCE_HPP

#include <iterator>

namespace boost {
namespace compute {
namespace detail {

template<class Iterator, class Distance, class Tag>
inline Iterator iterator_plus_distance(Iterator i, Distance n, Tag)
{
    while(n--){ i++; }

    return i;
}

template<class Iterator, class Distance>
inline Iterator iterator_plus_distance(Iterator i,
                                       Distance n,
                                       std::random_access_iterator_tag)
{
    typedef typename
        std::iterator_traits<Iterator>::difference_type difference_type;

    return i + static_cast<difference_type>(n);
}

// similar to std::advance() except returns the advanced iterator and
// also works with iterators that don't define difference_type
template<class Iterator, class Distance>
inline Iterator iterator_plus_distance(Iterator i, Distance n)
{
    typedef typename std::iterator_traits<Iterator>::iterator_category tag;

    return iterator_plus_distance(i, n, tag());
}

} // end detail namespace
} // end compute namespace
} // end boost namespace

#endif // BOOST_COMPUTE_DETAIL_ITERATOR_PLUS_DISTANCE_HPP

/* iterator_plus_distance.hpp
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
*/