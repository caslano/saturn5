//---------------------------------------------------------------------------//
// Copyright (c) 2013 Kyle Lutz <kyle.r.lutz@gmail.com>
//
// Distributed under the Boost Software License, Version 1.0
// See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt
//
// See http://boostorg.github.com/compute for more information.
//---------------------------------------------------------------------------//

#ifndef BOOST_COMPUTE_LAMBDA_PLACEHOLDERS_HPP
#define BOOST_COMPUTE_LAMBDA_PLACEHOLDERS_HPP

#include <boost/mpl/has_xxx.hpp>

#include <boost/compute/lambda/context.hpp>
#include <boost/compute/lambda/result_of.hpp>

namespace boost {
namespace compute {
namespace lambda {

namespace mpl = boost::mpl;
namespace proto = boost::proto;

// lambda placeholders
expression<proto::terminal<placeholder<0> >::type> const _1;
expression<proto::terminal<placeholder<1> >::type> const _2;
expression<proto::terminal<placeholder<2> >::type> const _3;

namespace detail {

BOOST_MPL_HAS_XXX_TRAIT_DEF(result_type)

template<class T, bool HasResultType>
struct terminal_type_impl;

template<class T>
struct terminal_type_impl<T, true>
{
    typedef typename T::result_type type;
};

template<class T>
struct terminal_type_impl<T, false>
{
    typedef T type;
};

template<class T>
struct terminal_type
{
    typedef typename terminal_type_impl<T, has_result_type<T>::value>::type type;
};

} // end detail namespace

// result_of placeholders
template<class Args>
struct result_of<expression<proto::terminal<placeholder<0> >::type>, Args, proto::tag::terminal>
{
    typedef typename boost::tuples::element<0, Args>::type arg_type;

    typedef typename detail::terminal_type<arg_type>::type type;
};

template<class Args>
struct result_of<expression<proto::terminal<placeholder<1> >::type>, Args, proto::tag::terminal>
{
    typedef typename boost::tuples::element<1, Args>::type arg_type;

    typedef typename detail::terminal_type<arg_type>::type type;
};

template<class Args>
struct result_of<expression<proto::terminal<placeholder<2> >::type>, Args, proto::tag::terminal>
{
    typedef typename boost::tuples::element<2, Args>::type arg_type;

    typedef typename detail::terminal_type<arg_type>::type type;
};

} // end lambda namespace

// lift lambda placeholders up to the boost::compute namespace
using lambda::_1;
using lambda::_2;
using lambda::_3;

} // end compute namespace
} // end boost namespace

#endif // BOOST_COMPUTE_LAMBDA_PLACEHOLDERS_HPP

/* placeholders.hpp
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
*/