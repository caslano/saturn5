
//          Copyright Oliver Kowalke 2009.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_COROUTINES_EXCEPTIONS_H
#define BOOST_COROUTINES_EXCEPTIONS_H

#include <stdexcept>
#include <string>

#include <boost/config.hpp>
#include <boost/core/scoped_enum.hpp>
#include <boost/system/error_code.hpp>
#include <boost/system/system_error.hpp>
#include <boost/type_traits/integral_constant.hpp>

#include <boost/coroutine/detail/config.hpp>

#ifdef BOOST_HAS_ABI_HEADERS
#  include BOOST_ABI_PREFIX
#endif

namespace boost {
namespace coroutines {
namespace detail {

struct forced_unwind {};

}

BOOST_SCOPED_ENUM_DECLARE_BEGIN(coroutine_errc)
{
  no_data = 1
}
BOOST_SCOPED_ENUM_DECLARE_END(coroutine_errc)

BOOST_COROUTINES_DECL
system::error_category const& coroutine_category() BOOST_NOEXCEPT;

}

namespace system {

template<>
struct is_error_code_enum< coroutines::coroutine_errc > : public true_type
{};

#ifdef BOOST_NO_CXX11_SCOPED_ENUMS
template<>
struct is_error_code_enum< coroutines::coroutine_errc::enum_type > : public true_type
{};
#endif

inline
error_code make_error_code( coroutines::coroutine_errc e) //BOOST_NOEXCEPT
{
    return error_code( underlying_cast< int >( e), coroutines::coroutine_category() );
}

inline
error_condition make_error_condition( coroutines::coroutine_errc e) //BOOST_NOEXCEPT
{
    return error_condition( underlying_cast< int >( e), coroutines::coroutine_category() );
}

}

namespace coroutines {

class coroutine_error : public std::logic_error
{
private:
    system::error_code  ec_;

public:
    coroutine_error( system::error_code ec) :
        logic_error( ec.message() ),
        ec_( ec)
    {}

    system::error_code const& code() const BOOST_NOEXCEPT
    { return ec_; }
};

class invalid_result : public coroutine_error
{
public:
    invalid_result() :
        coroutine_error(
            system::make_error_code(
                coroutine_errc::no_data) )
    {}
};

}}

#ifdef BOOST_HAS_ABI_HEADERS
#  include BOOST_ABI_SUFFIX
#endif

#endif // BOOST_COROUTINES_EXCEPTIONS_H

/* exceptions.hpp
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
*/