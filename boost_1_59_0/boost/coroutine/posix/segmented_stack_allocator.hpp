
//          Copyright Oliver Kowalke 2009.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_COROUTINES_SEGMENTED_STACK_ALLOCATOR_H
#define BOOST_COROUTINES_SEGMENTED_STACK_ALLOCATOR_H

#include <cstddef>
#include <new>

#include <boost/config.hpp>

#include <boost/coroutine/detail/config.hpp>
#include <boost/coroutine/stack_context.hpp>
#include <boost/coroutine/stack_traits.hpp>

#ifdef BOOST_HAS_ABI_HEADERS
#  include BOOST_ABI_PREFIX
#endif

// forward declaration for splitstack-functions defined in libgcc
extern "C" {
void *__splitstack_makecontext( std::size_t,
                                void * [BOOST_CONTEXT_SEGMENTS],
                                std::size_t *);

void __splitstack_releasecontext( void * [BOOST_CONTEXT_SEGMENTS]);

void __splitstack_resetcontext( void * [BOOST_CONTEXT_SEGMENTS]);

void __splitstack_block_signals_context( void * [BOOST_CONTEXT_SEGMENTS],
                                         int * new_value, int * old_value);
}

namespace boost {
namespace coroutines {

template< typename traitsT >
struct basic_segmented_stack_allocator
{
    typedef traitsT traits_type;

    void allocate( stack_context & ctx, std::size_t size = traits_type::minimum_size() )
    {
        void * limit = __splitstack_makecontext( size, ctx.segments_ctx, & ctx.size);
        if ( ! limit) throw std::bad_alloc();

        // ctx.size is already filled by __splitstack_makecontext
        ctx.sp = static_cast< char * >( limit) + ctx.size;

        int off = 0;
        __splitstack_block_signals_context( ctx.segments_ctx, & off, 0);
    }

    void deallocate( stack_context & ctx)
    { __splitstack_releasecontext( ctx.segments_ctx); }
};

typedef basic_segmented_stack_allocator< stack_traits > segmented_stack_allocator;

}}

#ifdef BOOST_HAS_ABI_HEADERS
#  include BOOST_ABI_SUFFIX
#endif

#endif // BOOST_COROUTINES_SEGMENTED_STACK_ALLOCATOR_H

/* segmented_stack_allocator.hpp
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
*/