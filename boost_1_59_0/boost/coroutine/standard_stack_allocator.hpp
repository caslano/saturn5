
//          Copyright Oliver Kowalke 2009.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_COROUTINES_STANDARD_STACK_ALLOCATOR_H
#define BOOST_COROUTINES_STANDARD_STACK_ALLOCATOR_H

#if defined(BOOST_USE_VALGRIND)
#include <valgrind/valgrind.h>
#endif

#include <cstddef>
#include <cstdlib>
#include <new>

#include <boost/assert.hpp>
#include <boost/config.hpp>

#include <boost/coroutine/detail/config.hpp>
#include <boost/coroutine/stack_context.hpp>
#include <boost/coroutine/stack_traits.hpp>

#if defined(BOOST_COROUTINES_USE_MAP_STACK)
extern "C" {
#include <sys/mman.h>
}
#endif

#ifdef BOOST_HAS_ABI_HEADERS
#  include BOOST_ABI_PREFIX
#endif

namespace boost {
namespace coroutines {

template< typename traitsT >
struct basic_standard_stack_allocator
{
    typedef traitsT traits_type;

    void allocate( stack_context & ctx, std::size_t size = traits_type::minimum_size() )
    {
        BOOST_ASSERT( traits_type::minimum_size() <= size);
        BOOST_ASSERT( traits_type::is_unbounded() || ( traits_type::maximum_size() >= size) );

#if defined(BOOST_COROUTINES_USE_MAP_STACK)
        void * limit = ::mmap(0, size, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANON | MAP_STACK, -1, 0);
        if ( limit == MAP_FAILED ) throw std::bad_alloc();
#else
        void * limit = std::malloc( size);
        if ( ! limit) throw std::bad_alloc();
#endif

        ctx.size = size;
        ctx.sp = static_cast< char * >( limit) + ctx.size;
#if defined(BOOST_USE_VALGRIND)
        ctx.valgrind_stack_id = VALGRIND_STACK_REGISTER( ctx.sp, limit);
#endif
    }

    void deallocate( stack_context & ctx)
    {
        BOOST_ASSERT( ctx.sp);
        BOOST_ASSERT( traits_type::minimum_size() <= ctx.size);
        BOOST_ASSERT( traits_type::is_unbounded() || ( traits_type::maximum_size() >= ctx.size) );

#if defined(BOOST_USE_VALGRIND)
        VALGRIND_STACK_DEREGISTER( ctx.valgrind_stack_id);
#endif

        void * limit = static_cast< char * >( ctx.sp) - ctx.size;
#if defined(BOOST_COROUTINES_USE_MAP_STACK)
        munmap(limit, ctx.size);
#else
        std::free( limit);
#endif
    }
};

typedef basic_standard_stack_allocator< stack_traits >  standard_stack_allocator;

}}

#ifdef BOOST_HAS_ABI_HEADERS
#  include BOOST_ABI_SUFFIX
#endif

#endif // BOOST_COROUTINES_STANDARD_STACK_ALLOCATOR_H

/* standard_stack_allocator.hpp
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
*/