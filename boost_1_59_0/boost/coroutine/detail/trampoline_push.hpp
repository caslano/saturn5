
//          Copyright Oliver Kowalke 2009.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_COROUTINES_DETAIL_TRAMPOLINE_PUSH_H
#define BOOST_COROUTINES_DETAIL_TRAMPOLINE_PUSH_H

#include <cstddef>

#include <boost/assert.hpp>
#include <boost/config.hpp>
#include <boost/context/detail/fcontext.hpp>
#include <boost/cstdint.hpp>
#include <boost/exception_ptr.hpp>
#include <boost/move/move.hpp>

#include <boost/coroutine/detail/config.hpp>
#include <boost/coroutine/detail/data.hpp>
#include <boost/coroutine/detail/flags.hpp>
#include <boost/coroutine/detail/parameters.hpp>
#include <boost/coroutine/detail/setup.hpp>
#include <boost/coroutine/detail/setup.hpp>
#include <boost/coroutine/exceptions.hpp>
#include <boost/coroutine/flags.hpp>

#ifdef BOOST_HAS_ABI_HEADERS
#  include BOOST_ABI_PREFIX
#endif

namespace boost {
namespace coroutines {
namespace detail {

template< typename Coro >
void trampoline_push( context::detail::transfer_t t)
{
    typedef typename Coro::param_type   param_type;

    data_t * data = static_cast< data_t * >( t.data);
    data->from->ctx_ = t.fctx;
    param_type * param(
        static_cast< param_type * >( data->data) );
    BOOST_ASSERT( 0 != param);
    BOOST_ASSERT( 0 != param->data);

    Coro * coro(
        static_cast< Coro * >( param->coro) );
    BOOST_ASSERT( 0 != coro);

    coro->run( param->data);
}

template< typename Coro >
void trampoline_push_void( context::detail::transfer_t t)
{
    typedef typename Coro::param_type   param_type;

    data_t * data = static_cast< data_t * >( t.data);
    data->from->ctx_ = t.fctx;
    param_type * param(
        static_cast< param_type * >( data->data) );
    BOOST_ASSERT( 0 != param);

    Coro * coro(
        static_cast< Coro * >( param->coro) );
    BOOST_ASSERT( 0 != coro);

    coro->run();
}

}}}

#ifdef BOOST_HAS_ABI_HEADERS
#  include BOOST_ABI_SUFFIX
#endif

#endif // BOOST_COROUTINES_DETAIL_TRAMPOLINE_PUSH_H

/* trampoline_push.hpp
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
*/