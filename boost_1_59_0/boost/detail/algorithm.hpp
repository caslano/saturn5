// (C) Copyright Jeremy Siek 2001.
// Distributed under the Boost Software License, Version 1.0. (See accompany-
// ing file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

/*
 *
 * Copyright (c) 1994
 * Hewlett-Packard Company
 *
 * Permission to use, copy, modify, distribute and sell this software
 * and its documentation for any purpose is hereby granted without fee,
 * provided that the above copyright notice appear in all copies and
 * that both that copyright notice and this permission notice appear
 * in supporting documentation.  Hewlett-Packard Company makes no
 * representations about the suitability of this software for any
 * purpose.  It is provided "as is" without express or implied warranty.
 *
 *
 * Copyright (c) 1996
 * Silicon Graphics Computer Systems, Inc.
 *
 * Permission to use, copy, modify, distribute and sell this software
 * and its documentation for any purpose is hereby granted without fee,
 * provided that the above copyright notice appear in all copies and
 * that both that copyright notice and this permission notice appear
 * in supporting documentation.  Silicon Graphics makes no
 * representations about the suitability of this software for any
 * purpose.  It is provided "as is" without express or implied warranty.
 */

#ifndef BOOST_ALGORITHM_HPP
#define BOOST_ALGORITHM_HPP

// Algorithms on sequences
//
// The functions in this file have not yet gone through formal
// review, and are subject to change. This is a work in progress.
// They have been checked into the detail directory because
// there are some graph algorithms that use these functions.

#include <algorithm>
#include <vector>
#include <boost/range/begin.hpp>
#include <boost/range/end.hpp>
#include <boost/range/algorithm/copy.hpp>
#include <boost/range/algorithm/equal.hpp>
#include <boost/range/algorithm/sort.hpp>
#include <boost/range/algorithm/stable_sort.hpp>
#include <boost/range/algorithm/find_if.hpp>
#include <boost/range/algorithm/count.hpp>
#include <boost/range/algorithm/count_if.hpp>
#include <boost/range/algorithm_ext/is_sorted.hpp>
#include <boost/range/algorithm_ext/iota.hpp>

namespace boost
{

template < typename InputIterator, typename Predicate >
bool any_if(InputIterator first, InputIterator last, Predicate p)
{
    return std::find_if(first, last, p) != last;
}

template < typename Container, typename Predicate >
bool any_if(const Container& c, Predicate p)
{
    return any_if(boost::begin(c), boost::end(c), p);
}

template < typename InputIterator, typename T >
bool container_contains(InputIterator first, InputIterator last, T value)
{
    return std::find(first, last, value) != last;
}
template < typename Container, typename T >
bool container_contains(const Container& c, const T& value)
{
    return container_contains(boost::begin(c), boost::end(c), value);
}

} // namespace boost

#endif // BOOST_ALGORITHM_HPP

/* algorithm.hpp
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
*/