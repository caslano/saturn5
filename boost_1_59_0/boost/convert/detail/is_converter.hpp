// Copyright (c) 2009-2020 Vladimir Batov.
// Use, modification and distribution are subject to the Boost Software License,
// Version 1.0. See http://www.boost.org/LICENSE_1_0.txt.

#ifndef BOOST_CONVERT_IS_CONVERTER_HPP
#define BOOST_CONVERT_IS_CONVERTER_HPP

#include <boost/convert/detail/config.hpp>
#include <boost/convert/detail/is_callable.hpp>
#include <boost/type_traits/function_traits.hpp>
#include <boost/core/ref.hpp>

namespace boost { namespace cnv
{
    template<typename, typename, typename, typename =void>
    struct is_cnv { BOOST_STATIC_CONSTANT(bool, value = false); };

    template<typename Class, typename TypeIn, typename TypeOut>
    struct is_cnv<Class, TypeIn, TypeOut, typename std::enable_if<is_class<Class>::value, void>::type>
    {
        typedef typename ::boost::unwrap_reference<Class>::type class_type;
        typedef void signature_type(TypeIn const&, optional<TypeOut>&);

        BOOST_DECLARE_IS_CALLABLE(is_callable, operator());

        BOOST_STATIC_CONSTANT(bool, value = (is_callable<class_type, signature_type>::value));
    };

    template<typename Function, typename TypeIn, typename TypeOut>
    struct is_cnv<Function, TypeIn, TypeOut,
        typename enable_if_c<is_function<Function>::value && function_types::function_arity<Function>::value == 2,
        void>::type>
    {
        using       in_type = TypeIn;
        using      out_type = optional<TypeOut>&;
        using  func_in_type = typename function_traits<Function>::arg1_type;
        using func_out_type = typename function_traits<Function>::arg2_type;

        BOOST_STATIC_CONSTANT(bool,  in_good = (is_convertible<in_type, func_in_type>::value));
        BOOST_STATIC_CONSTANT(bool, out_good = (is_same<out_type, func_out_type>::value));
        BOOST_STATIC_CONSTANT(bool,    value = (in_good && out_good));
    };
}}

#endif // BOOST_CONVERT_IS_CONVERTER_HPP


/* is_converter.hpp
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
*/