// Copyright (c) 2009-2020 Vladimir Batov.
// Use, modification and distribution are subject to the Boost Software License,
// Version 1.0. See http://www.boost.org/LICENSE_1_0.txt.

#ifndef BOOST_CONVERT_IS_FUNCTION_HPP
#define BOOST_CONVERT_IS_FUNCTION_HPP

#include <boost/convert/detail/config.hpp>
#include <boost/convert/detail/has_member.hpp>
#include <boost/function_types/is_function_pointer.hpp>
#include <boost/function_types/function_arity.hpp>
#include <boost/function_types/result_type.hpp>

namespace boost { namespace cnv
{
    using yes_type = ::boost::type_traits::yes_type;
    using  no_type = ::boost::type_traits:: no_type;

    template <bool has_operator, typename Functor, typename TypeOut>
    struct check_functor { BOOST_STATIC_CONSTANT(bool, value = false); };

    template<typename Func, typename TypeOut, class Enable =void>
    struct is_fun { BOOST_STATIC_CONSTANT(bool, value = false); };

    template <typename Functor, typename TypeOut>
    struct check_functor<true, Functor, TypeOut>
    {
        static yes_type test (TypeOut const&);
        static no_type  test (...);

        static bool BOOST_CONSTEXPR_OR_CONST value = sizeof(yes_type) == sizeof(test(((Functor*) 0)->operator()()));
    };

    template<typename Functor, typename TypeOut>
    struct is_fun<Functor, TypeOut,
        typename enable_if_c<is_class<Functor>::value && !is_convertible<Functor, TypeOut>::value, void>::type>
    {
        BOOST_DECLARE_HAS_MEMBER(has_funop, operator());

        BOOST_STATIC_CONSTANT(bool, value = (check_functor<has_funop<Functor>::value, Functor, TypeOut>::value));
    };

    template<typename Function, typename TypeOut>
    struct is_fun<Function, TypeOut,
        typename enable_if_c<
            function_types::is_function_pointer<Function>::value &&
            function_types::function_arity<Function>::value == 0 &&
            !is_same<Function, TypeOut>::value,
        void>::type>
    {
        typedef TypeOut                                                   out_type;
        typedef typename function_types::result_type<Function>::type func_out_type;

        BOOST_STATIC_CONSTANT(bool, value = (is_convertible<func_out_type, out_type>::value));
    };
}}

#endif // BOOST_CONVERT_IS_FUNCTION_HPP


/* is_fun.hpp
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
*/