// Copyright (c) 2009-2020 Vladimir Batov.
// Use, modification and distribution are subject to the Boost Software License,
// Version 1.0. See http://www.boost.org/LICENSE_1_0.txt.

#ifndef BOOST_CONVERT_SPIRIT_BASED_CONVERTER_HPP
#define BOOST_CONVERT_SPIRIT_BASED_CONVERTER_HPP

#include <boost/convert/base.hpp>
#include <boost/convert/detail/config.hpp>
#include <boost/spirit/include/qi.hpp>
#include <boost/spirit/include/karma.hpp>

namespace boost { namespace cnv
{
    struct spirit;
}}

struct boost::cnv::spirit : public boost::cnv::cnvbase<boost::cnv::spirit>
{
    typedef boost::cnv::spirit             this_type;
    typedef boost::cnv::cnvbase<this_type> base_type;

    using base_type::operator();

    template<typename string_type, typename out_type>
    void
    str_to(cnv::range<string_type> range, optional<out_type>& result_out) const
    {
        typedef typename cnv::range<string_type>::iterator                  iterator;
        typedef typename boost::spirit::traits::create_parser<out_type>::type parser;

        iterator    beg = range.begin();
        iterator    end = range.end();
        out_type result;

        if (boost::spirit::qi::parse(beg, end, parser(), result))
            if (beg == end) // ensure the whole string has been parsed
                result_out = result;
    }
    template<typename in_type, typename char_type>
    cnv::range<char_type*>
    to_str(in_type value_in, char_type* beg) const
    {
        typedef typename boost::spirit::traits::create_generator<in_type>::type generator;

        char_type* end = beg;
        bool      good = boost::spirit::karma::generate(end, generator(), value_in);
        
        return cnv::range<char_type*>(beg, good ? end : beg);
    }
};

#endif // BOOST_CONVERT_SPIRIT_BASED_CONVERTER_HPP


/* spirit.hpp
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
*/