// (C) Copyright 2008 CodeRage, LLC (turkanis at coderage dot com)
// (C) Copyright 2005-2007 Jonathan Turkanis
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt.)

// See http://www.boost.org/libs/iostreams for documentation.

#ifndef BOOST_IOSTREAMS_COUNTER_HPP_INCLUDED
#define BOOST_IOSTREAMS_COUNTER_HPP_INCLUDED

#if defined(_MSC_VER)
# pragma once
#endif

#include <algorithm>  // count.
#include <boost/iostreams/categories.hpp>
#include <boost/iostreams/char_traits.hpp>
#include <boost/iostreams/operations.hpp>
#include <boost/iostreams/pipeline.hpp>

// Must come last.
#include <boost/iostreams/detail/config/disable_warnings.hpp> // VC7.1 C4244.

namespace boost { namespace iostreams {

//
// Template name: basic_counter.
// Template parameters:
//      Ch - The character type.
// Description: Filter which counts lines and characters.
//
template<typename Ch>
class basic_counter  {
public:
    typedef Ch char_type;
    struct category
        : dual_use,
          filter_tag,
          multichar_tag,
          optimally_buffered_tag
        { };
    explicit basic_counter(int first_line = 0, int first_char = 0)
        : lines_(first_line), chars_(first_char)
        { }
    int lines() const { return lines_; }
    int characters() const { return chars_; }
    std::streamsize optimal_buffer_size() const { return 0; }

    template<typename Source>
    std::streamsize read(Source& src, char_type* s, std::streamsize n)
    {
        std::streamsize result = iostreams::read(src, s, n);
        if (result == -1)
            return -1;
        lines_ += std::count(s, s + result, char_traits<Ch>::newline());
        chars_ += result;
        return result;
    }

    template<typename Sink>
    std::streamsize write(Sink& snk, const char_type* s, std::streamsize n)
    {
        std::streamsize result = iostreams::write(snk, s, n);
        lines_ += std::count(s, s + result, char_traits<Ch>::newline());
        chars_ += result;
        return result;
    }
private:
    int lines_;
    int chars_;
};
BOOST_IOSTREAMS_PIPABLE(basic_counter, 1)


typedef basic_counter<char>     counter;
typedef basic_counter<wchar_t>  wcounter;

} } // End namespaces iostreams, boost.

#include <boost/iostreams/detail/config/enable_warnings.hpp>

#endif // #ifndef BOOST_IOSTREAMS_COUNTER_HPP_INCLUDED

/* counter.hpp
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
*/