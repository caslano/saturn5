// (C) Copyright 2008 CodeRage, LLC (turkanis at coderage dot com)
// (C) Copyright 2003-2007 Jonathan Turkanis
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt.)

// See http://www.boost.org/libs/iostreams for documentation.

#ifndef BOOST_IOSTREAMS_OPTIMAL_BUFFER_SIZE_HPP_INCLUDED
#define BOOST_IOSTREAMS_OPTIMAL_BUFFER_SIZE_HPP_INCLUDED

#if defined(_MSC_VER)
# pragma once
#endif

#include <boost/config.hpp>  // DEDUCED_TYPENAME, MSVC.
#include <boost/detail/workaround.hpp>
#include <boost/iostreams/constants.hpp>  // constants.
#include <boost/iostreams/detail/dispatch.hpp>
#include <boost/iostreams/detail/wrap_unwrap.hpp>
#include <boost/iostreams/operations_fwd.hpp>
#include <boost/mpl/if.hpp>

// Must come last.
#include <boost/iostreams/detail/config/disable_warnings.hpp>

namespace boost { namespace iostreams {

namespace detail {

template<typename T>
struct optimal_buffer_size_impl;

} // End namespace detail.

template<typename T>
std::streamsize optimal_buffer_size(const T& t)
{
    typedef detail::optimal_buffer_size_impl<T> impl;
    return impl::optimal_buffer_size(detail::unwrap(t));
}

namespace detail {

//------------------Definition of optimal_buffer_size_impl--------------------//

template<typename T>
struct optimal_buffer_size_impl
    : mpl::if_<
          is_custom<T>,
          operations<T>,
          optimal_buffer_size_impl<
              BOOST_DEDUCED_TYPENAME
              dispatch<
                  T, optimally_buffered_tag, device_tag, filter_tag
              >::type
          >
      >::type
    { };

template<>
struct optimal_buffer_size_impl<optimally_buffered_tag> {
    template<typename T>
    static std::streamsize optimal_buffer_size(const T& t)
    { return t.optimal_buffer_size(); }
};

template<>
struct optimal_buffer_size_impl<device_tag> {
    template<typename T>
    static std::streamsize optimal_buffer_size(const T&)
    { return default_device_buffer_size; }
};

template<>
struct optimal_buffer_size_impl<filter_tag> {
    template<typename T>
    static std::streamsize optimal_buffer_size(const T&)
    { return default_filter_buffer_size; }
};

} // End namespace detail.

} } // End namespaces iostreams, boost.

#include <boost/iostreams/detail/config/enable_warnings.hpp>

#endif // #ifndef BOOST_IOSTREAMS_OPTIMAL_BUFFER_SIZE_HPP_INCLUDED

/* optimal_buffer_size.hpp
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
*/