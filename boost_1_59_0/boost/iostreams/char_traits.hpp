// (C) Copyright 2008 CodeRage, LLC (turkanis at coderage dot com)
// (C) Copyright 2003-2007 Jonathan Turkanis
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt.)

// See http://www.boost.org/libs/iostreams for documentation.

#ifndef BOOST_IOSTREAMS_CHAR_TRAITS_HPP_INCLUDED
#define BOOST_IOSTREAMS_CHAR_TRAITS_HPP_INCLUDED

#if defined(_MSC_VER)
# pragma once
#endif 

#include <boost/config.hpp>
#include <cstddef>
#include <cstdio>  // EOF.
#include <string>  // std::char_traits.
#include <boost/iostreams/detail/char_traits.hpp>
#include <boost/iostreams/detail/config/wide_streams.hpp>
#ifndef BOOST_IOSTREAMS_NO_WIDE_STREAMS
# include <cwchar>
#endif

#ifdef BOOST_NO_STDC_NAMESPACE
namespace std { using ::wint_t; }
#endif

namespace boost { namespace iostreams {

// Dinkumware that comes with QNX Momentics 6.3.0, 4.0.2, incorrectly defines
// the EOF and WEOF macros to not std:: qualify the wint_t type (and so does
// Sun C++ 5.8 + STLport 4). Fix by placing the def in this scope.
// NOTE: Use BOOST_WORKAROUND?
#if (defined(__QNX__) && defined(BOOST_DINKUMWARE_STDLIB))  \
    || defined(__SUNPRO_CC)
using ::std::wint_t;
#endif

const int WOULD_BLOCK = (int) (EOF - 1);

#ifndef BOOST_IOSTREAMS_NO_WIDE_STREAMS
const std::wint_t WWOULD_BLOCK = (std::wint_t) (WEOF - 1);
#endif

template<typename Ch>
struct char_traits;

template<>
struct char_traits<char> : BOOST_IOSTREAMS_CHAR_TRAITS(char) {
    static char newline() { return '\n'; }
    static int good() { return '\n'; }
    static int would_block() { return WOULD_BLOCK; }
    static bool is_good(int c) { return c != EOF && c != WOULD_BLOCK; }
    static bool is_eof(int c) { return c == EOF; }
    static bool would_block(int c) { return c == WOULD_BLOCK; }
};

#ifndef BOOST_IOSTREAMS_NO_WIDE_STREAMS
template<>
struct char_traits<wchar_t> : std::char_traits<wchar_t> {
    static wchar_t newline() { return L'\n'; }
    static std::wint_t good() { return L'\n'; }
    static std::wint_t would_block() { return WWOULD_BLOCK; }
    static bool is_good(std::wint_t c) { return c != WEOF && c != WWOULD_BLOCK; }
    static bool is_eof(std::wint_t c) { return c == WEOF; }
    static bool would_block(std::wint_t c) { return c == WWOULD_BLOCK; }
};
#endif

} } // End namespaces iostreams, boost.

#endif // #ifndef BOOST_IOSTREAMS_CHAR_TRAITS_HPP_INCLUDED

/* char_traits.hpp
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
*/