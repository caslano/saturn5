/*
 * Defines the class template boost::iostreams::detail::filter_adapter,
 * a convenience base class for filter adapters.
 *
 * File:        boost/iostreams/detail/adapter/filter_adapter.hpp
 * Date:        Mon Nov 26 14:35:48 MST 2007
 * Copyright:   2007-2008 CodeRage, LLC
 * Author:      Jonathan Turkanis
 * Contact:     turkanis at coderage dot com
 *
 * Distributed under the Boost Software License, Version 1.0.(See accompanying 
 * file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt.)
 * 
 * See http://www.boost.org/libs/iostreams for documentation.
 */

#ifndef BOOST_IOSTREAMS_DETAIL_FILTER_ADAPTER_HPP_INCLUDED
#define BOOST_IOSTREAMS_DETAIL_FILTER_ADAPTER_HPP_INCLUDED

#include <boost/iostreams/categories.hpp>
#include <boost/iostreams/detail/call_traits.hpp>
#include <boost/iostreams/detail/ios.hpp>
#include <boost/iostreams/operations.hpp>
#include <boost/iostreams/traits.hpp>
#include <boost/static_assert.hpp>

namespace boost { namespace iostreams { namespace detail {

template<typename T>
class filter_adapter {
private:
    typedef typename detail::value_type<T>::type value_type;
    typedef typename detail::param_type<T>::type param_type;
public:
    explicit filter_adapter(param_type t) : t_(t) { }
    T& component() { return t_; }

    template<typename Device>
    void close(Device& dev) 
    { 
        detail::close_all(t_, dev); 
    }

    template<typename Device>
    void close(Device& dev, BOOST_IOS::openmode which) 
    { 
        iostreams::close(t_, dev, which); 
    }

    template<typename Device>
    void flush(Device& dev) 
    { 
        return iostreams::flush(t_, dev); 
    }

    template<typename Locale> // Avoid dependency on <locale>
    void imbue(const Locale& loc) { iostreams::imbue(t_, loc); }

    std::streamsize optimal_buffer_size() const 
    { return iostreams::optimal_buffer_size(t_); }
public:
    value_type t_;
};

//----------------------------------------------------------------------------//

} } } // End namespaces detail, iostreams, boost.

#endif // #ifndef BOOST_IOSTREAMS_DETAIL_FILTER_ADAPTER_HPP_INCLUDED

/* filter_adapter.hpp
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
*/