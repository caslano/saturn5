/*
 * Defines the class template boost::iostreams::detail::device_adapter,
 * a convenience base class for device adapters.
 *
 * File:        boost/iostreams/detail/adapter/filter_adapter.hpp
 * Date:        Mon Nov 26 14:35:48 MST 2007
 * 
 * Copyright:   2007-2008 CodeRage, LLC
 * Author:      Jonathan Turkanis
 * Contact:     turkanis at coderage dot com
 *
 * Distributed under the Boost Software License, Version 1.0.(See accompanying 
 * file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt.)
 * 
 * See http://www.boost.org/libs/iostreams for documentation.
 */

#ifndef BOOST_IOSTREAMS_DETAIL_DEVICE_ADAPTER_HPP_INCLUDED
#define BOOST_IOSTREAMS_DETAIL_DEVICE_ADAPTER_HPP_INCLUDED

#include <boost/iostreams/categories.hpp>
#include <boost/iostreams/detail/call_traits.hpp>
#include <boost/iostreams/detail/ios.hpp>
#include <boost/iostreams/operations.hpp>
#include <boost/iostreams/traits.hpp>
#include <boost/static_assert.hpp>

namespace boost { namespace iostreams { namespace detail {

template<typename T>
class device_adapter {
private:
    typedef typename detail::value_type<T>::type value_type;
    typedef typename detail::param_type<T>::type param_type;
public:
    explicit device_adapter(param_type t) : t_(t) { }
    T& component() { return t_; }

    void close() 
    {
        detail::close_all(t_);
    }

    void close(BOOST_IOS::openmode which) 
    { 
        iostreams::close(t_, which); 
    }

    bool flush() 
    { 
        return iostreams::flush(t_); 
    }

    template<typename Locale> // Avoid dependency on <locale>
    void imbue(const Locale& loc) { iostreams::imbue(t_, loc); }

    std::streamsize optimal_buffer_size() const 
    { return iostreams::optimal_buffer_size(t_); }
public:
    value_type t_;
};

//----------------------------------------------------------------------------//

} } } // End namespaces detail, iostreams, boost.

#endif // #ifndef BOOST_IOSTREAMS_DETAIL_DEVICE_ADAPTER_HPP_INCLUDED

/* device_adapter.hpp
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
*/