// (C) Copyright 2008 CodeRage, LLC (turkanis at coderage dot com)
// (C) Copyright 2003-2007 Jonathan Turkanis
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt.)

// See http://www.boost.org/libs/iostreams for documentation.

// Contains machinery for performing code conversion.

#ifndef BOOST_IOSTREAMS_DETAIL_CODECVT_HOLDER_HPP_INCLUDED
#define BOOST_IOSTREAMS_DETAIL_CODECVT_HOLDER_HPP_INCLUDED

#if defined(_MSC_VER)
# pragma once
#endif

#include <cwchar>            // mbstate_t.
#include <locale>            // codecvt, locale.
#include <boost/config.hpp>  // HAS_MACRO_USE_FACET.
#include <boost/iostreams/detail/config/codecvt.hpp>

namespace boost { namespace iostreams { namespace detail {

struct default_codecvt { 
    typedef wchar_t         intern_type, from_type;
    typedef char            extern_type, to_type;
    typedef std::mbstate_t  state_type;
};

template<typename Codecvt>
struct codecvt_holder {
    typedef Codecvt codecvt_type;
    const codecvt_type& get() const { return codecvt_; }
    void imbue(const std::locale&) { }
    Codecvt codecvt_;
};

template<>
struct codecvt_holder<default_codecvt> {
    typedef std::codecvt<wchar_t, char, std::mbstate_t> codecvt_type;
    codecvt_holder() { reset_codecvt(); }
    const codecvt_type& get() const { return *codecvt_; }
    void imbue(const std::locale& loc) 
    { 
        loc_ = loc;
        reset_codecvt();
    }
    void reset_codecvt()
    {
        using namespace std;
        #ifndef BOOST_HAS_MACRO_USE_FACET
            codecvt_ = & use_facet< codecvt_type >(loc_);
        #else
            codecvt_ = & _USE(loc_, codecvt_type);
        #endif
    }
    std::locale loc_; // Prevent codecvt_ from being freed.
    const codecvt_type* codecvt_;
};

} } } // End namespaces detail, iostreams, boost.

#endif // #ifndef BOOST_IOSTREAMS_DETAIL_CODECVT_HOLDER_HPP_INCLUDED

/* codecvt_holder.hpp
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
*/