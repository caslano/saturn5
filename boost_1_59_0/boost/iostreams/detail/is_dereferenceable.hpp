// (C) Copyright 2008 CodeRage, LLC (turkanis at coderage dot com)
// (C) Copyright 2005-2007 Jonathan Turkanis
// (C) Copyright David Abrahams 2004.
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt.)

// See http://www.boost.org/libs/iostreams for documentation.

#ifndef BOOST_IOSTREAMS_DETAIL_IS_DEREFERENCEABLE_HPP_INCLUDED
#define BOOST_IOSTREAMS_DETAIL_IS_DEREFERENCEABLE_HPP_INCLUDED

# include <boost/type_traits/remove_cv.hpp>
# include <boost/mpl/aux_/lambda_support.hpp>
# include <boost/mpl/bool.hpp>
# include <boost/detail/workaround.hpp>

namespace boost { namespace iostreams { namespace detail { 

// is_dereferenceable<T> metafunction
//
// Requires: Given x of type T&, if the expression *x is well-formed
// it must have complete type; otherwise, it must neither be ambiguous
// nor violate access.

// This namespace ensures that ADL doesn't mess things up.
namespace is_dereferenceable_
{
  // a type returned from operator* when no increment is found in the
  // type's own namespace
  struct tag {};
  
  // any soaks up implicit conversions and makes the following
  // operator* less-preferred than any other such operator that
  // might be found via ADL.
  struct any { template <class T> any(T const&); };

  // This is a last-resort operator* for when none other is found
  tag operator*(any const&);

# if BOOST_WORKAROUND(__MWERKS__, BOOST_TESTED_AT(0x3202))
#  define BOOST_comma(a,b) (a)
# else 
  // In case an operator++ is found that returns void, we'll use ++x,0
  tag operator,(tag,int);  
#  define BOOST_comma(a,b) (a,b)
# endif 
  
  // two check overloads help us identify which operator++ was picked
  char (& check_increment(tag) )[2];
  
  template <class T>
  char check_increment(T const&);
  
  template <class T>
  struct impl
  {
      static typename boost::remove_cv<T>::type& x;

      BOOST_STATIC_CONSTANT(
          bool
        , value = sizeof(is_dereferenceable_::check_increment(BOOST_comma(*x,0))) == 1
      );
  };
}

# undef BOOST_comma

template<typename T> 
struct is_dereferenceable 
    : public ::boost::integral_constant<bool, is_dereferenceable_::impl<T>::value >
{ 
    BOOST_MPL_AUX_LAMBDA_SUPPORT(1,is_dereferenceable,(T))
};

} } 


} // End namespaces detail, iostreams, boost.

#endif // BOOST_IOSTREAMS_DETAIL_IS_DEREFERENCEABLE_HPP_INCLUDED

/* is_dereferenceable.hpp
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
*/