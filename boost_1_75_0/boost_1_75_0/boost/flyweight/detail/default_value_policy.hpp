/* Copyright 2006-2019 Joaquin M Lopez Munoz.
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * See http://www.boost.org/libs/flyweight for library home page.
 */

#ifndef BOOST_FLYWEIGHT_DETAIL_DEFAULT_VALUE_POLICY_HPP
#define BOOST_FLYWEIGHT_DETAIL_DEFAULT_VALUE_POLICY_HPP

#if defined(_MSC_VER)
#pragma once
#endif

#include <boost/config.hpp> /* keep it first to prevent nasty warns in MSVC */
#include <boost/detail/workaround.hpp>
#include <boost/flyweight/detail/perfect_fwd.hpp>
#include <boost/flyweight/detail/value_tag.hpp>

/* Default value policy: the key is the same as the value.
 */

namespace boost{

namespace flyweights{

namespace detail{

template<typename Value>
struct default_value_policy:value_marker
{
  typedef Value key_type;
  typedef Value value_type;

  struct rep_type
  {
  /* template ctors */

#if !defined(BOOST_NO_CXX11_RVALUE_REFERENCES)&&\
    !defined(BOOST_NO_CXX11_VARIADIC_TEMPLATES)&&\
    BOOST_WORKAROUND(BOOST_GCC,<=40603)
/* GCC bug: the default ctor generated by the variadic template ctor below
 * fails to value-initialize x.
 */

    rep_type():x(){}
#endif

#define BOOST_FLYWEIGHT_PERFECT_FWD_CTR_BODY(args) \
  :x(BOOST_FLYWEIGHT_FORWARD(args)){}

  BOOST_FLYWEIGHT_PERFECT_FWD(
    explicit rep_type,
    BOOST_FLYWEIGHT_PERFECT_FWD_CTR_BODY)

#undef BOOST_FLYWEIGHT_PERFECT_FWD_CTR_BODY

    rep_type(const rep_type& r):x(r.x){}

#if !defined(BOOST_NO_CXX11_RVALUE_REFERENCES)
    rep_type(rep_type&& r):x(std::move(r.x)){}
#endif

    operator const value_type&()const{return x;}

    value_type x;
  };

  static void construct_value(const rep_type&){}
  static void copy_value(const rep_type&){}

#if !defined(BOOST_NO_CXX11_RVALUE_REFERENCES)
  static void move_value(const rep_type&){}
#endif
};

} /* namespace flyweights::detail */

} /* namespace flyweights */

} /* namespace boost */

#endif

/* default_value_policy.hpp
vulJiNiguC6lfui5kPdBhzwH/PIJnTmtD8DPbCExWjW0hYLUa4nVWe3xj0P2jwD3sXPv0xyDbei6CXbavWHaIfkq/aGrQyFPXOV8HGo2vgN0nWkSaxF/b3+ayeFNiMb175uPounjN84LrAP18AU70gT+947gvi7if/0n4DS0/qDxSFa+hsueK/8lyYOzuEto7keweTsmC30CawiSPVXwgI5QwaOkALaYPzIAJwTvOGKVPHPFMemw8fx0WJVLSc+Y0kvVMxCOEgMyoZ6xlFVoKZQur6RRW4GjdjOM2grEGLipte68b6V6hJmNv0rFegf7qs4BjurbcVaox5liBCoclf4de04qMGVVijBiJEx5KDGf9dllbbnj1DK2yKwrVr0hUx3cM3mn3sto54pME8DvfdVKLf979oiVl0vl3XaW8i56UZTXK5ryKnh5t2vl3bECXLCtg6ZARgtx1vE3/4B59c8vZt0hH5EI+IyRrli7wgdemp8gjUNWITgdchOfilOhALGLzDSAmt2u/+AmdMIKzTX8cJLwPvsGvMPBOfyozjl8NxMyLXGQgJO6pl7nIl4Ji4yqSG0Tq7ZN+x+iaBtnPbXN2CS1bYbUIy9sxIvd30XmxawXRHmwVj1red8tp/KOJarl7WeP7J+0gRoWeid3rZTXl9sLZkiWRxqgxhEr+/PzovBLoil8DC/8Pq3wW9kjfbEDoil2jFrsB/uj
*/