// Boost.Geometry (aka GGL, Generic Geometry Library)

// Copyright (c) 2007-2012 Barend Gehrels, Amsterdam, the Netherlands.
// Copyright (c) 2008-2012 Bruno Lalande, Paris, France.
// Copyright (c) 2009-2012 Mateusz Loskot, London, UK.

// Parts of Boost.Geometry are redesigned from Geodan's Geographic Library
// (geolib/GGL), copyright (c) 1995-2010 Geodan, Amsterdam, the Netherlands.

// Use, modification and distribution is subject to the Boost Software License,
// Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_GEOMETRY_VIEWS_SEGMENT_VIEW_HPP
#define BOOST_GEOMETRY_VIEWS_SEGMENT_VIEW_HPP


#include <boost/range.hpp>

#include <boost/geometry/core/point_type.hpp>
#include <boost/geometry/views/detail/points_view.hpp>
#include <boost/geometry/algorithms/assign.hpp>


namespace boost { namespace geometry
{


/*!
\brief Makes a segment behave like a linestring or a range
\details Adapts a segment to the Boost.Range concept, enabling the user to
    iterate the two segment points. The segment_view is registered as a LineString Concept
\tparam Segment \tparam_geometry{Segment}
\ingroup views

\qbk{before.synopsis,
[heading Model of]
[link geometry.reference.concepts.concept_linestring LineString Concept]
}

\qbk{[include reference/views/segment_view.qbk]}

*/
template <typename Segment>
struct segment_view
    : public detail::points_view
        <
            typename geometry::point_type<Segment>::type,
            2
        >
{
    typedef typename geometry::point_type<Segment>::type point_type;

    /// Constructor accepting the segment to adapt
    explicit segment_view(Segment const& segment)
        : detail::points_view<point_type, 2>(copy_policy(segment))
    {}

private :

    class copy_policy
    {
    public :
        inline copy_policy(Segment const& segment)
            : m_segment(segment)
        {}

        inline void apply(point_type* points) const
        {
            geometry::detail::assign_point_from_index<0>(m_segment, points[0]);
            geometry::detail::assign_point_from_index<1>(m_segment, points[1]);
        }
    private :
        Segment const& m_segment;
    };

};


#ifndef DOXYGEN_NO_TRAITS_SPECIALIZATIONS

// All segment ranges can be handled as linestrings
namespace traits
{

template<typename Segment>
struct tag<segment_view<Segment> >
{
    typedef linestring_tag type;
};

}

#endif // DOXYGEN_NO_TRAITS_SPECIALIZATIONS


}} // namespace boost::geometry


#endif // BOOST_GEOMETRY_VIEWS_SEGMENT_VIEW_HPP

/* segment_view.hpp
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
*/