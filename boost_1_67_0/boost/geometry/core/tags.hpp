// Boost.Geometry (aka GGL, Generic Geometry Library)

// Copyright (c) 2007-2012 Barend Gehrels, Amsterdam, the Netherlands.
// Copyright (c) 2008-2012 Bruno Lalande, Paris, France.
// Copyright (c) 2009-2012 Mateusz Loskot, London, UK.

// This file was modified by Oracle on 2014, 2018.
// Modifications copyright (c) 2014-2018 Oracle and/or its affiliates.

// Contributed and/or modified by Adam Wulkiewicz, on behalf of Oracle

// Parts of Boost.Geometry are redesigned from Geodan's Geographic Library
// (geolib/GGL), copyright (c) 1995-2010 Geodan, Amsterdam, the Netherlands.

// Use, modification and distribution is subject to the Boost Software License,
// Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_GEOMETRY_CORE_TAGS_HPP
#define BOOST_GEOMETRY_CORE_TAGS_HPP


namespace boost { namespace geometry
{

// Tags defining strategies linked to coordinate systems

/// Tag used for undefined coordinate system
struct cs_undefined_tag {};

/// Tag used for casting spherical/geographic coordinate systems
struct spherical_tag {};


/// Tag indicating Cartesian coordinate system family (cartesian,epsg)
struct cartesian_tag {};

/// Tag indicating Spherical polar coordinate system family
struct spherical_polar_tag : spherical_tag {};

/// Tag indicating Spherical equatorial coordinate system family
struct spherical_equatorial_tag : spherical_tag {};

/// Tag indicating Geographic coordinate system family (geographic)
struct geographic_tag : spherical_tag {};


// Tags defining coordinate systems reference models

/// For reference spheroid defining parameters of geographical coordinate system
struct srs_spheroid_tag {};

/// For reference sphere defining parameters of spherical coordinate system
struct srs_sphere_tag : srs_spheroid_tag {};


// Tags defining tag hierarchy

/// For single-geometries (point, linestring, polygon, box, ring, segment)
struct single_tag {};


/// For multiple-geometries (multi_point, multi_linestring, multi_polygon)
struct multi_tag {};

/// For point-like types (point, multi_point)
struct pointlike_tag {};

/// For linear types (linestring, multi-linestring, segment)
struct linear_tag {};

/// For areal types (polygon, multi_polygon, box, ring)
struct areal_tag {};

// Subset of areal types (polygon, multi_polygon, ring)
struct polygonal_tag : areal_tag {};

/// For volume types (also box (?), polyhedron)
struct volumetric_tag {};


// Tags defining geometry types


/// "default" tag
struct geometry_not_recognized_tag {};

/// OGC Point identifying tag
struct point_tag : single_tag, pointlike_tag {};

/// OGC Linestring identifying tag
struct linestring_tag : single_tag, linear_tag {};

/// OGC Polygon identifying tag
struct polygon_tag : single_tag, polygonal_tag {};

/// Convenience (linear) ring identifying tag
struct ring_tag : single_tag, polygonal_tag {};

/// Convenience 2D or 3D box (mbr / aabb) identifying tag
struct box_tag : single_tag, areal_tag {};

/// Convenience segment (2-points) identifying tag
struct segment_tag : single_tag, linear_tag {};


/// OGC Multi point identifying tag
struct multi_point_tag : multi_tag, pointlike_tag  {};

/// OGC Multi linestring identifying tag
struct multi_linestring_tag : multi_tag, linear_tag {};

/// OGC Multi polygon identifying tag
struct multi_polygon_tag : multi_tag, polygonal_tag {};

/// OGC Geometry Collection identifying tag
struct geometry_collection_tag : multi_tag {};


/*!
\brief Meta-function to get for a tag of a multi-geometry
    the tag of the corresponding single-geometry
*/
template <typename Tag>
struct single_tag_of
{};

#ifndef DOXYGEN_NO_DETAIL

template <>
struct single_tag_of<multi_point_tag>
{
    typedef point_tag type;
};

template <>
struct single_tag_of<multi_linestring_tag>
{
    typedef linestring_tag type;
};

template <>
struct single_tag_of<multi_polygon_tag>
{
    typedef polygon_tag type;
};

#endif


}} // namespace boost::geometry

#endif // BOOST_GEOMETRY_CORE_TAGS_HPP

/* tags.hpp
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
*/