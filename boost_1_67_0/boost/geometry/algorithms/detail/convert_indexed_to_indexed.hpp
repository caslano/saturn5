// Boost.Geometry (aka GGL, Generic Geometry Library)

// Copyright (c) 2007-2012 Barend Gehrels, Amsterdam, the Netherlands.
// Copyright (c) 2008-2012 Bruno Lalande, Paris, France.
// Copyright (c) 2009-2012 Mateusz Loskot, London, UK.

// Parts of Boost.Geometry are redesigned from Geodan's Geographic Library
// (geolib/GGL), copyright (c) 1995-2010 Geodan, Amsterdam, the Netherlands.

// Use, modification and distribution is subject to the Boost Software License,
// Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_GEOMETRY_ALGORITHMS_DETAIL_CONVERT_INDEXED_TO_INDEXED_HPP
#define BOOST_GEOMETRY_ALGORITHMS_DETAIL_CONVERT_INDEXED_TO_INDEXED_HPP


#include <cstddef>

#include <boost/numeric/conversion/cast.hpp>
#include <boost/geometry/core/access.hpp>
#include <boost/geometry/core/coordinate_dimension.hpp>
#include <boost/geometry/core/coordinate_type.hpp>


namespace boost { namespace geometry
{

#ifndef DOXYGEN_NO_DETAIL
namespace detail { namespace conversion
{


template
<
    typename Source,
    typename Destination,
    std::size_t Dimension,
    std::size_t DimensionCount
>
struct indexed_to_indexed
{
    static inline void apply(Source const& source, Destination& destination)
    {
        typedef typename coordinate_type<Destination>::type coordinate_type;

        geometry::set<min_corner, Dimension>(destination,
            boost::numeric_cast<coordinate_type>(
                geometry::get<min_corner, Dimension>(source)));
        geometry::set<max_corner, Dimension>(destination,
            boost::numeric_cast<coordinate_type>(
                geometry::get<max_corner, Dimension>(source)));

        indexed_to_indexed
            <
                Source, Destination,
                Dimension + 1, DimensionCount
            >::apply(source, destination);
    }
};

template
<
    typename Source,
    typename Destination,
    std::size_t DimensionCount
>
struct indexed_to_indexed<Source, Destination, DimensionCount, DimensionCount>
{
    static inline void apply(Source const& , Destination& )
    {}
};


}} // namespace detail::conversion
#endif // DOXYGEN_NO_DETAIL

}} // namespace boost::geometry

#endif // BOOST_GEOMETRY_ALGORITHMS_DETAIL_CONVERT_INDEXED_TO_INDEXED_HPP

/* convert_indexed_to_indexed.hpp
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
*/