// Boost.Geometry (aka GGL, Generic Geometry Library)

// Copyright (c) 2020 Digvijay Janartha, Hamirpur, India.

// Use, modification and distribution is subject to the Boost Software License,
// Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_GEOMETRY_GEOMETRIES_POINT_XYZ_HPP
#define BOOST_GEOMETRY_GEOMETRIES_POINT_XYZ_HPP

#include <cstddef>

#include <boost/config.hpp>
#include <boost/mpl/int.hpp>

#include <boost/geometry/core/cs.hpp>
#include <boost/geometry/geometries/point.hpp>

namespace boost { namespace geometry
{

namespace model { namespace d3
{

/*!
\brief 3D point in Cartesian coordinate system
\tparam CoordinateType numeric type, for example, double, float, int
\tparam CoordinateSystem coordinate system, defaults to cs::cartesian

\qbk{[include reference/geometries/point_xyz.qbk]}
\qbk{before.synopsis,
[heading Model of]
[link geometry.reference.concepts.concept_point Point Concept]
}

\qbk{[include reference/geometries/point_assign_warning.qbk]}

*/
template<typename CoordinateType, typename CoordinateSystem = cs::cartesian>
class point_xyz : public model::point<CoordinateType, 3, CoordinateSystem>
{
public:

#ifndef BOOST_NO_CXX11_DEFAULTED_FUNCTIONS
    /// \constructor_default_no_init
    point_xyz() = default;
#else
    /// \constructor_default_no_init
    inline point_xyz()
    {}
#endif

    /// Constructor with x/y/z values
    inline point_xyz(CoordinateType const& x, CoordinateType const& y, CoordinateType const& z)
        : model::point<CoordinateType, 3, CoordinateSystem>(x, y, z)
    {}

    /// Get x-value
    inline CoordinateType const& x() const
    { return this->template get<0>(); }

    /// Get y-value
    inline CoordinateType const& y() const
    { return this->template get<1>(); }

    /// Get z-value
    inline CoordinateType const& z() const
    { return this->template get<2>(); }

    /// Set x-value
    inline void x(CoordinateType const& v)
    { this->template set<0>(v); }

    /// Set y-value
    inline void y(CoordinateType const& v)
    { this->template set<1>(v); }
    
    /// Set z-value
    inline void z(CoordinateType const& v)
    { this->template set<2>(v); }
};


}} // namespace model::d3


// Adapt the point_xyz to the concept
#ifndef DOXYGEN_NO_TRAITS_SPECIALIZATIONS
namespace traits
{

template <typename CoordinateType, typename CoordinateSystem>
struct tag<model::d3::point_xyz<CoordinateType, CoordinateSystem> >
{
    typedef point_tag type;
};

template<typename CoordinateType, typename CoordinateSystem>
struct coordinate_type<model::d3::point_xyz<CoordinateType, CoordinateSystem> >
{
    typedef CoordinateType type;
};

template<typename CoordinateType, typename CoordinateSystem>
struct coordinate_system<model::d3::point_xyz<CoordinateType, CoordinateSystem> >
{
    typedef CoordinateSystem type;
};

template<typename CoordinateType, typename CoordinateSystem>
struct dimension<model::d3::point_xyz<CoordinateType, CoordinateSystem> >
    : boost::mpl::int_<3>
{};

template<typename CoordinateType, typename CoordinateSystem, std::size_t Dimension>
struct access<model::d3::point_xyz<CoordinateType, CoordinateSystem>, Dimension >
{
    static inline CoordinateType get(
        model::d3::point_xyz<CoordinateType, CoordinateSystem> const& p)
    {
        return p.template get<Dimension>();
    }

    static inline void set(model::d3::point_xyz<CoordinateType, CoordinateSystem>& p,
        CoordinateType const& value)
    {
        p.template set<Dimension>(value);
    }
};

} // namespace traits
#endif // DOXYGEN_NO_TRAITS_SPECIALIZATIONS

}} // namespace boost::geometry

#endif // BOOST_GEOMETRY_GEOMETRIES_POINT_XYZ_HPP

/* point_xyz.hpp
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
*/