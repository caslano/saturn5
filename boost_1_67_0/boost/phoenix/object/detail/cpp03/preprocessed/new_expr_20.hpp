/*==============================================================================
    Copyright (c) 2016 Kohei Takahashi

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
==============================================================================*/
namespace boost { namespace phoenix { namespace tag { struct new_ {}; template <typename Ostream> inline Ostream &operator<<( Ostream & os , new_) { os << "new_"; return os; } } namespace expression { template < typename A0 = void , typename A1 = void , typename A2 = void , typename A3 = void , typename A4 = void , typename A5 = void , typename A6 = void , typename A7 = void , typename A8 = void , typename A9 = void , typename A10 = void , typename A11 = void , typename A12 = void , typename A13 = void , typename A14 = void , typename A15 = void , typename A16 = void , typename A17 = void , typename A18 = void , typename A19 = void , typename A20 = void , typename Dummy = void > struct new_; template < typename A0 , typename A1 > struct new_< A0 , A1 > : boost::phoenix::expr< tag:: new_ , A0 , A1 > {}; template < typename A0 , typename A1 , typename A2 > struct new_< A0 , A1 , A2 > : boost::phoenix::expr< tag:: new_ , A0 , A1 , A2 > {}; template < typename A0 , typename A1 , typename A2 , typename A3 > struct new_< A0 , A1 , A2 , A3 > : boost::phoenix::expr< tag:: new_ , A0 , A1 , A2 , A3 > {}; template < typename A0 , typename A1 , typename A2 , typename A3 , typename A4 > struct new_< A0 , A1 , A2 , A3 , A4 > : boost::phoenix::expr< tag:: new_ , A0 , A1 , A2 , A3 , A4 > {}; template < typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 > struct new_< A0 , A1 , A2 , A3 , A4 , A5 > : boost::phoenix::expr< tag:: new_ , A0 , A1 , A2 , A3 , A4 , A5 > {}; template < typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 > struct new_< A0 , A1 , A2 , A3 , A4 , A5 , A6 > : boost::phoenix::expr< tag:: new_ , A0 , A1 , A2 , A3 , A4 , A5 , A6 > {}; template < typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 > struct new_< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 > : boost::phoenix::expr< tag:: new_ , A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 > {}; template < typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 > struct new_< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 > : boost::phoenix::expr< tag:: new_ , A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 > {}; template < typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 > struct new_< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 > : boost::phoenix::expr< tag:: new_ , A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 > {}; template < typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10 > struct new_< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 > : boost::phoenix::expr< tag:: new_ , A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 > {}; template < typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10 , typename A11 > struct new_< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 > : boost::phoenix::expr< tag:: new_ , A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 > {}; template < typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10 , typename A11 , typename A12 > struct new_< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 > : boost::phoenix::expr< tag:: new_ , A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 > {}; template < typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10 , typename A11 , typename A12 , typename A13 > struct new_< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 > : boost::phoenix::expr< tag:: new_ , A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 > {}; template < typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10 , typename A11 , typename A12 , typename A13 , typename A14 > struct new_< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 > : boost::phoenix::expr< tag:: new_ , A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 > {}; template < typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10 , typename A11 , typename A12 , typename A13 , typename A14 , typename A15 > struct new_< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 > : boost::phoenix::expr< tag:: new_ , A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 > {}; template < typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10 , typename A11 , typename A12 , typename A13 , typename A14 , typename A15 , typename A16 > struct new_< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 > : boost::phoenix::expr< tag:: new_ , A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 > {}; template < typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10 , typename A11 , typename A12 , typename A13 , typename A14 , typename A15 , typename A16 , typename A17 > struct new_< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 > : boost::phoenix::expr< tag:: new_ , A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 > {}; template < typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10 , typename A11 , typename A12 , typename A13 , typename A14 , typename A15 , typename A16 , typename A17 , typename A18 > struct new_< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 > : boost::phoenix::expr< tag:: new_ , A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 > {}; template < typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10 , typename A11 , typename A12 , typename A13 , typename A14 , typename A15 , typename A16 , typename A17 , typename A18 , typename A19 > struct new_< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 > : boost::phoenix::expr< tag:: new_ , A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 > {}; template < typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10 , typename A11 , typename A12 , typename A13 , typename A14 , typename A15 , typename A16 , typename A17 , typename A18 , typename A19 , typename A20 > struct new_< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 > : boost::phoenix::expr< tag:: new_ , A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 > {}; } namespace rule { struct new_ : expression:: new_ < proto::terminal<detail::target<proto::_> > , boost::proto::vararg< meta_grammar > > {}; } namespace functional { typedef boost::proto::functional::make_expr< tag:: new_ > make_new_; } namespace result_of { template <typename A0 = void , typename A1 = void , typename A2 = void , typename A3 = void , typename A4 = void , typename A5 = void , typename A6 = void , typename A7 = void , typename A8 = void , typename A9 = void , typename A10 = void , typename A11 = void , typename A12 = void , typename A13 = void , typename A14 = void , typename A15 = void , typename A16 = void , typename A17 = void , typename A18 = void , typename A19 = void, typename Dummy = void> struct make_new_; template <typename A0> struct make_new_ <A0> : boost::result_of< functional:: make_new_( A0 ) > {}; template <typename A0 , typename A1> struct make_new_ <A0 , A1> : boost::result_of< functional:: make_new_( A0 , A1 ) > {}; template <typename A0 , typename A1 , typename A2> struct make_new_ <A0 , A1 , A2> : boost::result_of< functional:: make_new_( A0 , A1 , A2 ) > {}; template <typename A0 , typename A1 , typename A2 , typename A3> struct make_new_ <A0 , A1 , A2 , A3> : boost::result_of< functional:: make_new_( A0 , A1 , A2 , A3 ) > {}; template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4> struct make_new_ <A0 , A1 , A2 , A3 , A4> : boost::result_of< functional:: make_new_( A0 , A1 , A2 , A3 , A4 ) > {}; template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5> struct make_new_ <A0 , A1 , A2 , A3 , A4 , A5> : boost::result_of< functional:: make_new_( A0 , A1 , A2 , A3 , A4 , A5 ) > {}; template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6> struct make_new_ <A0 , A1 , A2 , A3 , A4 , A5 , A6> : boost::result_of< functional:: make_new_( A0 , A1 , A2 , A3 , A4 , A5 , A6 ) > {}; template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7> struct make_new_ <A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7> : boost::result_of< functional:: make_new_( A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 ) > {}; template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8> struct make_new_ <A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8> : boost::result_of< functional:: make_new_( A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 ) > {}; template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9> struct make_new_ <A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9> : boost::result_of< functional:: make_new_( A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 ) > {}; template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10> struct make_new_ <A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10> : boost::result_of< functional:: make_new_( A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 ) > {}; template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10 , typename A11> struct make_new_ <A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11> : boost::result_of< functional:: make_new_( A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 ) > {}; template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10 , typename A11 , typename A12> struct make_new_ <A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12> : boost::result_of< functional:: make_new_( A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 ) > {}; template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10 , typename A11 , typename A12 , typename A13> struct make_new_ <A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13> : boost::result_of< functional:: make_new_( A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 ) > {}; template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10 , typename A11 , typename A12 , typename A13 , typename A14> struct make_new_ <A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14> : boost::result_of< functional:: make_new_( A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 ) > {}; template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10 , typename A11 , typename A12 , typename A13 , typename A14 , typename A15> struct make_new_ <A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15> : boost::result_of< functional:: make_new_( A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 ) > {}; template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10 , typename A11 , typename A12 , typename A13 , typename A14 , typename A15 , typename A16> struct make_new_ <A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16> : boost::result_of< functional:: make_new_( A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 ) > {}; template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10 , typename A11 , typename A12 , typename A13 , typename A14 , typename A15 , typename A16 , typename A17> struct make_new_ <A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17> : boost::result_of< functional:: make_new_( A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 ) > {}; template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10 , typename A11 , typename A12 , typename A13 , typename A14 , typename A15 , typename A16 , typename A17 , typename A18> struct make_new_ <A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18> : boost::result_of< functional:: make_new_( A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 ) > {}; } template <typename A0> inline typename result_of:: make_new_< A0 >::type make_new_(A0 const& a0) { return functional::make_new_()(a0); } template <typename A0 , typename A1> inline typename result_of:: make_new_< A0 , A1 >::type make_new_(A0 const& a0 , A1 const& a1) { return functional::make_new_()(a0 , a1); } template <typename A0 , typename A1 , typename A2> inline typename result_of:: make_new_< A0 , A1 , A2 >::type make_new_(A0 const& a0 , A1 const& a1 , A2 const& a2) { return functional::make_new_()(a0 , a1 , a2); } template <typename A0 , typename A1 , typename A2 , typename A3> inline typename result_of:: make_new_< A0 , A1 , A2 , A3 >::type make_new_(A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3) { return functional::make_new_()(a0 , a1 , a2 , a3); } template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4> inline typename result_of:: make_new_< A0 , A1 , A2 , A3 , A4 >::type make_new_(A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4) { return functional::make_new_()(a0 , a1 , a2 , a3 , a4); } template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5> inline typename result_of:: make_new_< A0 , A1 , A2 , A3 , A4 , A5 >::type make_new_(A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5) { return functional::make_new_()(a0 , a1 , a2 , a3 , a4 , a5); } template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6> inline typename result_of:: make_new_< A0 , A1 , A2 , A3 , A4 , A5 , A6 >::type make_new_(A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6) { return functional::make_new_()(a0 , a1 , a2 , a3 , a4 , a5 , a6); } template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7> inline typename result_of:: make_new_< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 >::type make_new_(A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 , A7 const& a7) { return functional::make_new_()(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7); } template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8> inline typename result_of:: make_new_< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 >::type make_new_(A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 , A7 const& a7 , A8 const& a8) { return functional::make_new_()(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8); } template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9> inline typename result_of:: make_new_< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 >::type make_new_(A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 , A7 const& a7 , A8 const& a8 , A9 const& a9) { return functional::make_new_()(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 , a9); } template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10> inline typename result_of:: make_new_< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 >::type make_new_(A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 , A7 const& a7 , A8 const& a8 , A9 const& a9 , A10 const& a10) { return functional::make_new_()(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 , a9 , a10); } template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10 , typename A11> inline typename result_of:: make_new_< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 >::type make_new_(A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 , A7 const& a7 , A8 const& a8 , A9 const& a9 , A10 const& a10 , A11 const& a11) { return functional::make_new_()(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 , a9 , a10 , a11); } template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10 , typename A11 , typename A12> inline typename result_of:: make_new_< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 >::type make_new_(A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 , A7 const& a7 , A8 const& a8 , A9 const& a9 , A10 const& a10 , A11 const& a11 , A12 const& a12) { return functional::make_new_()(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 , a9 , a10 , a11 , a12); } template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10 , typename A11 , typename A12 , typename A13> inline typename result_of:: make_new_< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 >::type make_new_(A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 , A7 const& a7 , A8 const& a8 , A9 const& a9 , A10 const& a10 , A11 const& a11 , A12 const& a12 , A13 const& a13) { return functional::make_new_()(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 , a9 , a10 , a11 , a12 , a13); } template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10 , typename A11 , typename A12 , typename A13 , typename A14> inline typename result_of:: make_new_< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 >::type make_new_(A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 , A7 const& a7 , A8 const& a8 , A9 const& a9 , A10 const& a10 , A11 const& a11 , A12 const& a12 , A13 const& a13 , A14 const& a14) { return functional::make_new_()(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 , a9 , a10 , a11 , a12 , a13 , a14); } template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10 , typename A11 , typename A12 , typename A13 , typename A14 , typename A15> inline typename result_of:: make_new_< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 >::type make_new_(A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 , A7 const& a7 , A8 const& a8 , A9 const& a9 , A10 const& a10 , A11 const& a11 , A12 const& a12 , A13 const& a13 , A14 const& a14 , A15 const& a15) { return functional::make_new_()(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 , a9 , a10 , a11 , a12 , a13 , a14 , a15); } template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10 , typename A11 , typename A12 , typename A13 , typename A14 , typename A15 , typename A16> inline typename result_of:: make_new_< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 >::type make_new_(A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 , A7 const& a7 , A8 const& a8 , A9 const& a9 , A10 const& a10 , A11 const& a11 , A12 const& a12 , A13 const& a13 , A14 const& a14 , A15 const& a15 , A16 const& a16) { return functional::make_new_()(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 , a9 , a10 , a11 , a12 , a13 , a14 , a15 , a16); } template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10 , typename A11 , typename A12 , typename A13 , typename A14 , typename A15 , typename A16 , typename A17> inline typename result_of:: make_new_< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 >::type make_new_(A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 , A7 const& a7 , A8 const& a8 , A9 const& a9 , A10 const& a10 , A11 const& a11 , A12 const& a12 , A13 const& a13 , A14 const& a14 , A15 const& a15 , A16 const& a16 , A17 const& a17) { return functional::make_new_()(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 , a9 , a10 , a11 , a12 , a13 , a14 , a15 , a16 , a17); } template <typename A0 , typename A1 , typename A2 , typename A3 , typename A4 , typename A5 , typename A6 , typename A7 , typename A8 , typename A9 , typename A10 , typename A11 , typename A12 , typename A13 , typename A14 , typename A15 , typename A16 , typename A17 , typename A18> inline typename result_of:: make_new_< A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 >::type make_new_(A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 , A7 const& a7 , A8 const& a8 , A9 const& a9 , A10 const& a10 , A11 const& a11 , A12 const& a12 , A13 const& a13 , A14 const& a14 , A15 const& a15 , A16 const& a16 , A17 const& a17 , A18 const& a18) { return functional::make_new_()(a0 , a1 , a2 , a3 , a4 , a5 , a6 , a7 , a8 , a9 , a10 , a11 , a12 , a13 , a14 , a15 , a16 , a17 , a18); } } } namespace boost { namespace phoenix { template <typename Dummy> struct meta_grammar::case_< :: boost :: phoenix :: tag:: new_ , Dummy > : enable_rule< :: boost :: phoenix :: rule:: new_ , Dummy > {}; } }

/* new_expr_20.hpp
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
*/