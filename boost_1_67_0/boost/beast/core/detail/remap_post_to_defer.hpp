//
// Copyright (c) 2016-2019 Vinnie Falco (vinnie dot falco at gmail dot com)
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//
// Official repository: https://github.com/boostorg/beast
//

#ifndef BOOST_BEAST_DETAIL_REMAP_POST_TO_DEFER_HPP
#define BOOST_BEAST_DETAIL_REMAP_POST_TO_DEFER_HPP

#include <boost/asio/is_executor.hpp>
#include <boost/core/empty_value.hpp>
#include <type_traits>
#include <utility>

namespace boost {
namespace beast {
namespace detail {

template<class Executor>
class remap_post_to_defer
    : private boost::empty_value<Executor>
{
    BOOST_STATIC_ASSERT(
        net::is_executor<Executor>::value);

    Executor const&
    ex() const noexcept
    {
        return this->get();
    }

public:
    remap_post_to_defer(
        remap_post_to_defer&&) = default;

    remap_post_to_defer(
        remap_post_to_defer const&) = default;

    explicit
    remap_post_to_defer(
        Executor const& ex)
        : boost::empty_value<Executor>(
            boost::empty_init_t{}, ex)
    {
    }

    bool
    operator==(
        remap_post_to_defer const& other) const noexcept
    {
        return ex() == other.ex();
    }

    bool
    operator!=(
        remap_post_to_defer const& other) const noexcept
    {
        return ex() != other.ex();
    }

    decltype(std::declval<Executor const&>().context())
    context() const noexcept
    {
        return ex().context();
    }

    void
    on_work_started() const noexcept
    {
        ex().on_work_started();
    }

    void
    on_work_finished() const noexcept
    {
        ex().on_work_finished();
    }

    template<class F, class A>
    void
    dispatch(F&& f, A const& a) const
    {
        ex().dispatch(std::forward<F>(f), a);
    }

    template<class F, class A>
    void
    post(F&& f, A const& a) const
    {
        ex().defer(std::forward<F>(f), a);
    }

    template<class F, class A>
    void
    defer(F&& f, A const& a) const
    {
        ex().defer(std::forward<F>(f), a);
    }
};

} // detail
} // beast
} // boost

#endif

/* remap_post_to_defer.hpp
+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
*/