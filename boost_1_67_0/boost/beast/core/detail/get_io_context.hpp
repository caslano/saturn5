//
// Copyright (c) 2016-2019 Vinnie Falco (vinnie dot falco at gmail dot com)
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//
// Official repository: https://github.com/boostorg/beast
//

#ifndef BOOST_BEAST_DETAIL_GET_IO_CONTEXT_HPP
#define BOOST_BEAST_DETAIL_GET_IO_CONTEXT_HPP

#include <boost/beast/core/stream_traits.hpp>
#include <boost/asio/executor.hpp>
#include <boost/asio/io_context.hpp>
#include <boost/asio/strand.hpp>
#include <memory>
#include <type_traits>

namespace boost {
namespace beast {
namespace detail {

//------------------------------------------------------------------------------

inline
net::io_context*
get_io_context(net::io_context& ioc)
{
    return std::addressof(ioc);
}

inline
net::io_context*
get_io_context(net::io_context::executor_type const& ex)
{
    return std::addressof(ex.context());
}

inline
net::io_context*
get_io_context(net::strand<
    net::io_context::executor_type> const& ex)
{
    return std::addressof(
        ex.get_inner_executor().context());
}

template<class Executor>
net::io_context*
get_io_context(net::strand<Executor> const& ex)
{
    return get_io_context(ex.get_inner_executor());
}

template<
    class T,
    class = typename std::enable_if<
        std::is_same<T, net::executor>::value>::type>
net::io_context*
get_io_context(T const& ex)
{
    auto p = ex.template target<typename
        net::io_context::executor_type>();
    if(! p)
        return nullptr;
    return std::addressof(p->context());
}

inline
net::io_context*
get_io_context(...)
{
    return nullptr;
}

//------------------------------------------------------------------------------

template<class T>
net::io_context*
get_io_context_impl(T& t, std::true_type)
{
    return get_io_context(
        t.get_executor());
}

template<class T>
net::io_context*
get_io_context_impl(T const&, std::false_type)
{
    return nullptr;
}

// Returns the io_context*, or nullptr, for any object.
template<class T>
net::io_context*
get_io_context(T& t)
{
    return get_io_context_impl(t,
        has_get_executor<T>{});
}

} // detail
} // beast
} // boost

#endif

/* get_io_context.hpp
5fsaU2g/50RZ3dQ1hwB+iR1YPy1zTfV0yPW7P32D2Ob0qXDSUnodTODu9+pNAIPbasoPVTrV4Rod6ZI4GM93lqcV/LFX69QopwjXEvcmHUmgDc1jhhu3e29/DMMhzTOf64d74CNqQEjlVuypwj3dI2JAUOdw40njjfsj2lNIwHDn5srJ0Q3KPc1j5Jz6Plk2JTJqgUk1LsbGrwNHRAkpFFFpIlX7dtdfOlVoMc5EIPTV9rr09a1Dr0usUz2fENKk1ybaJtsm2aaoR7ZMu/xymb4CUzPcI/wqHCUCaf3FiZNT7XVIk4Svoq+Mr4Kvqq+ur9L9qyWyQ2whnE60TpwA9KvIgHcwfSG9VNpTRf0qGKVpX2VtGNxCri5ltVVoSmuTGNySW+QECg1UOjZT4Qurvmrik0oUmVhHsCvQp9pcuN2+eGAJxkvIw4uOKpaUKyiPtzYjaJbULGj90nOMBy3Zu2OJiU/Vb2TaxDKMaynPXow7HcVagF7oC9Js4tga3EybRNH3xOkWHvaaRBHwUjpGETykIAetQouvb5+dhY+CNnHQoQsDWJRv0DtCrO5V/Om+3GzdO5sIO+rJ8N/r7HyWnGSYTeyfZOOKR/Qn6IxmX/M45pNW9efqzGAPzm7JYQ9b9g6sCyT2eVcXYuATUvcmW1dOR+xIQHZBGMWB3D4PJ4f8IJcmh+wgj8uQlOia4R5rKr7z8wpp2mStIwbo/NA9AVrgHm0Xqv0ebuht9iNm23zqvVxCT+fWSoJeR+oRlX7udgCp/o1gR6zrhtBZjozH5JsKShT2PJhdskuMu/hsk4BqoV0q7IjQwkYtSux438kY3JOgt73hdMjoMGhCVsOo6AB7PBF4YdP+OFKrMSh0iLE0+e5cAVUZKHYr3l2KcUzLhI51Qq0v5xhlvfTOCVoUM3GP6xBOQDzSbLpsGXiR1nEq5cmqvkLYun0IFcR0d7TwoAZ9UVnhjZQEbqvvrKyo7I48eFALHtB4iPieWHgQOp5IePDpnkR4Lxaa3iDCRLfFRwHK29KioMbakqMgDvRkJIPfVpCbCssdkZuKqB5RbAjrklBuiJgSDEJNLiBtmp2wnLCwfpkyYIU790DggXa95mGFPr+mcqbfObU1o985y9hkn9xtHGI/0T/RV6H3J/UXLg72PyJlEx7wSGSdPJuQab6uv+ZIozvEukrQXhd0IkljfKR/lKXvXelbGSKcfAo2q3iPilGIvh+Y6GWEwFoK4TMpwzEnbspKsp8Px0NkV4BXCryzkrAp4lQhUKFxi+ON865KVjQDaslaOlNryTHxILwsZuAh+FTMxwPzsgSGB+dTCQ4PykvanJcp8kOU23JAOmEmgC18IkKRoAqJc/xXw59KTCnwRaLO4WqUWPFURsaqgypVNdabKqXy9BQjhfilb/WKK7/NJmzdevsJNOsFqAUk6QFnBgaTjYLQm+E/vaLQDKbiJJ8N5OCkmn0j0UA5G6TeQDVLQBQdYxb6ZWhH3AGAMEbF9SbZnYorqMidhiu4/pK0EfdGUrD5Gywu0DkDjbPbjErLUciZT+s1mbZ5bxRucw+uGSJ5WbRxP7MzjdY5rTOO1gW3M5fWpbgzitYVJnhdcs3uTKLlhde88gFK1xBy5lGgdEu7jWBiG/jI0BllOOa42ni8eJN1b9CRLTSes6prF3vDGxDZOSC0yXdN/MjzhH+/dWXC9Vg2pzC6kRre06u8zu2Uzy3xfGzR81lFHVo02WTZjBXYR2iz71Ai94RTOcO91qfXa9cj18vWOR+JV6/6YvuUepX6QH1HvSR9hr2Q64braOEyCYUyxI/13PI2n/lkDgpl6WhjIG0+suunU/l/dGSHEmNBpOixcqjjXCAwKKj9MnJMQFZQydJFy/kCXyw6vh/X9A3L/HsbeS4LfPXjCo4GJYoGpYIGLtMGro0GLgy7SqqFR9kagWQ7H/q+S7WPB6Xsi6q7DVKsdrGb1QIqFIsUHA0CKm8P4tPniEtLwWieuLT5IF4HTBWBEZiqP4hfAFPlYDTf8aH9IJJ3ruNDwUEkq73QRv2DfMqBJe+8P/XiJVuWvVCi6V2a3uKEa/WDvCYY1T7IeyxObM77F4cdWHovEOemHgC9F4lJVy4BgouQ7xtgjsGEkU8gxCJkiB0KaoOAcO8lwM8OZXL2EvBgh/I64QB4u0hsFHgAhLdHQa0XEI4/AEaAc7UCwuEHwPUGGFwrn0ARMLLzCSQDIxufQGMwcvAJRAMja59AZaO7NLM6+xFTOwZiW90T7kXngcUUvs8NS4n2I1lWunuUizo0izPeEfblqna2At8aZkob6rMtdPfYF3Xk7G2zHBZ/IC5yjtgtvmy0dym2z6i1W8y0X7QItc9wAedsFy2K7DPO7BY/1djXLjSM3TTYZzssWkSPcPq4PAXUjc1eZ9zrPwLnfjgscoqETXK2Ps02NCvvMwlSCVJ0kHaQd3xegW7Tv4e1P9M9gTmxPOE6UTqpEqdSViFaHIX4ZT7FPoPtMyeJUIV9uuTkjuk5V0RUE0svrlM3p9LcjyeUReqiqJ2qjmxZjc+0LUH8CgYNmo2G8Tn73OHtDtTfjYmg97geCXZOoe89mgx6n0L2VPxRKzSl5eAwlBLGA/cAu/JNkkW1azq+mfjIcxz3xrPHqfo9ZK1v5Q7wsec5Ms1nX8foQ356KnQpR+d0yxZjdP9wRvQTIqxlMo/J+UOk/bCBMkGnTl21UDLksgUK2brxCazxKo5RFmyHCDn6NUw0rdEsW3kWGWtvDOlWQqC+3NtHXi02/qFOOeVcnBmbJyTpB/iyRqV95+hrL6O716DwG49L+C86yqg+9sJrQ99n0ieXC17tYx3NVuH7TUYEVakPJVPMV3DNEDzYb3fbJNZzfQs/B+xim7Stcvgw3rXUHj5BfNC1+ykXdksvIYNQPvXkZD96o+KNdaxsNHNAE9IgZ3LMyaatKmHWQsm8F1sV5qpkR2WJuXjndGy5dGwCqhvO4Kbs8DFjvxh52OXViqL5pM9NhrOfiVpZm2Eu4uNTpMhKLQb/gXr6XdwXEu4XpGTBSxNFcD/ME+fE+DNiN7+1Zecg7G1urXI0nkC+kcKl0yPnhAw4yWoi+dQCfX0uXzVZqiKaPWusGNZMlL13bBMmPnDGuzx1sh0TYNEwuB+nncDDf7Y5KpNWYpad7qX44+3oNtvK2FJ8M8gl4Aeao6kjjWNFYyrXCsHx5cnl2eVVf5tq+7fls7ZZL5Ix9Np08/rhn0nJGd8YbMVnmj6VauOY6+e4GdLMyPz82qQ6rcjIW3+QNF+qW9KmGMyb7E4/YTGPN6/NQxm2hcuDxzPmorNdN7GbOU1BEzcNKmG1dBqX4JFzSdnWy3CRGg/m2XPm3OZPO/Md3+Nx/OGbdKbu0LnUvZS/ZN3M5mz5Y3ys/FB53tS4UuOqoZ1rj5QPl3/uyOgp+EtwdbAtir8Ps5PV7RowLIDHd0f6Ml4sXOzSvyT1E0TfkEnifE8bG0nf3nWakd+IiNhRSPPxkSiFcVKVWpuOr9w9XJIBTKlbCId3HrsC8begwK/0fPwra9JSU05OA+pEAUOUaeVs7WnBrFJ5XxVH9DJvtH5Eph1Z+ifcyP0Agk44oUvdYErTlt9R1POQ1pe1ldmV1ouXIk3gZ7jBSx/QS9koCNvY87qJlyrsqVnIjd2hqBBsSR98zFTnsSUsbYdXuUMtnBmI1/E6JIxbqCN2I63XuPJGmQomQn4rYhMKE4nSj9LhczyZVxp2t6hyRqxtJ8N4wmO1Ixjo0QXKhJocmxqhwJpR90T4cNj76LJTLlYZbsQRtkw2nkMSHLKPcRmUfCgQG1cp3HnVMLdo55jYHn3lfYnvc9G+YOBW2ab5Ji/8yNxnyEODJF4AB1IP5fWXbCGhdseJ7qNtwMP1FVoT06ILMlnr9r5BneXZMpfgUfV2RDvXYYfjVYQ+g3v5shseWethdfbKd5vZ3VbFYLXHim79R/0sj36PlP39RrYatqbpTrYAy8asLPeGxXlfmu8nGzHtfB3zJ1sxE59K3NuaTEdiSjz4kb8i8B0unwzGJBBJ8OXz8R7t1FHYSg2AHBbOvmYPuAuw1H4bLV6fNnrTONw4yDXCRbWieqvx8+hm7qzhJEv6GnHEoBTO4p5C2gpe+uWLKtyZS6iZY4K8OiBqksYIQaISAxHwFAu8ItAobYX9oqPTrKMawn2TKqQjTAA5ewNA0Gs+OyjLKvh+GzthYBLUgKmKE/90G8spkfFzMvEp8vSB0KZ4WSnnoREic0mGiRznrNQMOqo5NY5h0HyT01moGaHtlhV1N3RTBzc8gDo1kWBQRdbYbFlKo1v6geEmdJ+mbCiY2aBTmph8egjRGYuOojLB+RTdK9SOojJ+dohg05Y1sU1hmdIxPmzo5SlFc3obzMZdqxnnTco+VWoCT+GbUaozaarSN3jCHDxZo2HaIoylNG5mQG3pDjLLOLYhcmdsnrBMBWIaj7izwWYzFp4cX5jaWwVX6PYg1uFSYQnnOMJ8rqmMnbFzbOf3hHnoyaWi6Oca3gT6Mo4lZTtEakX430pFNKf5hoCnfO2RywpHeVdTdzsPrkh+gYLSJPko01JWkPpys18uNlFqspgKUr8gnSvf4vplOhQSL7xzyM+wNk0XyZgsNkO5SeIsGNvFOJdZeNNQOLKrem7dEupQNDFpac2wkM4vim9FsPDr2N8DK5+FIPdC0CTOUM4m6BTvJtNCBTSWn7Xzp7OAHSftfz89uUNmJd9x2mOn9VygJu33o5R9RToKF4vMp8ynnHedd+F3ZXfpd2128Xd1dnl3va1DXYNdC+a0W2Ra0pYovpN/p/9OXZ7kkKoh4yFdVsRX1FrYWuRT6BPK0623K7jrbx19Hnieex53XnX+7itpefKMzF4RkmgRs5K3mre8t94CrX0Cp5yStJKskoySnG5h+RTbVO2Uy9TZFMJU5JTc1MgUw1TZlO3U3hTBFOeuwi7jWtxrLW5ySnFylfhwPUxx5SRxbTVx9a/i+t663lLemgtM7SA/Uj9aP0q/lwdx7rI50q2F36eId1V32XZddhF25XYZdm13Caoujgrbp66mUKZiz/1ugQ9x/uJCxXznxc5vl8Qd6LkSM0YYN1OcGZrrlyQdaBpT+QaJtuTnGSyHss4tvF3aoUeN3Pd8zpUuJs4nLkDnoIvK88oLx6iVKMj+o36S/px+w36RjTinOW4TSv5eMQH58RS+ER7niiWJQ3qPxNYRL5OYZRVHKlDKRCooDpQESgClgOJTB+W25LbMT81PnW+cb+BvZG/ob2xu8G90bnhvvE8F5xkrSUmGuQa5hrmCrlqg2+bsT2Vv3L2SfcPadDpUOyJ9xQWp+QaZToE34h26HVIdmh1KHYYGFEJGR++F7I4WKpNnh57PzCvwtm2PXtZwLGmc5dshupD/Xma5m3Vu116bXbD9U/+8YgYOvUiaW5VOw0Q2HF3zBbzbMKl5Fas43kdE1bcMFEnxw7TmdaySeGVRqv0MGEmJyeHDlOY1zhGsEjzqaR8zi+UxKmZbd79f8LeHLaseFV3NnF04Xhydt99e3aK0KHG5dTo3O4c6FzknO9c7RzuXO2c5t9eINos0KzfLNGs3SzSrN3/vEXgjRUm0K3iL8ZB2WPh82rS/d+Cj4lNuwFSnFbGANMqXnnPYA6ALQzft6AY3xvtBSmq20FL5AoE05EgcFNte/FrEmRAO8zEtl4XIeiNGa8f0CZ3qmU9ItiML1ZefIPcGWY1jGgh/EGR9iE1/mXGrbZnS4/y3s6eziScRzoluFR8wHqT8ch4TH2tP0f/FcdRb5ltY7tR8kVlj48bbNWdzJu6CrYH6g0wmOAyVNXJz6FscW25bSOYZp8WnKacNpzHPZ9DV6HsZ3gjfvLqRvtGaz9tXE1R2p2tNFhguGbYc3h7GGU4d1hyeHeYa9hg22PJ5PoHOPOc08bT2NPK0rMbwRoEn977iPu++9L4vpUauD7E63PkVDyUnVgZdWDKFiUt16JyKXRGlWr5Kcnh5Hye9JrS6GpW6Bpa6Ooe6JlJ1+ZyiHcgdlS8i7aOUfSGnBpt45Xsqd/Tab9R/PbGO00a3PmvB4CDXXY1NvTK9yF2lViDhr+fVofJF8tgo1acu6I5p+n0svf0WqJP74lscvgaFDQmL5n7+pfpdKU3pwzegTR6+euRXE47ilA9ODzgPmm65vIMUPpixP7/wtwy8gikT+5r3k9mtiVeUqDRGRarM9Gv1T263Nl4RAe2snRNPfC98H9avMj/NLjDdIrw/8qoLKGQVp3yc/oZnk6ZTMa5mWVr7Dd6vk1cqq0zj49lX+nqdrMrsipkP9TZZOpVMRqm1DHPJ+/TuHK1v9W0P6qqxbh33X7hTtIZ/H3UwbqxZnJN1b215JZT76+CooY7Zoy9HM0ffjqaPZmd3UHZQIvwfQJcUiwMT2zinkTfo/nSf8is2Zxf4zBo/468ebhzGtXevGAkR1UpdMj4FHW0I1ebMg/Y1G3Ie+pGrVuZJTLSi3vmdh52HXUidB9+SPVT5iyvhhjwMPZrAzJO5vycyhlPk3opyYao6arY6qrnAugt/6BP1bBlctiZwdS2JtlzwsWfr4zFJ1qJgWtXvZXuyb4zeLjpoFEjpWOn3iTiKIKH0WGpSutdZYjjECMAKeLrLJlhhqI/nJQyYjcaRLsaM664S/YlS+0BO149VKh4hB1kkMmVk/Y5dDZ8aKVVSmqJIecrKOopdA58mOpVamkYOo0hmyqzJJaJDwzAnAWW2aTy60HdfoI3VukEtTyi9IXj2y87m/uoWAZDC7mi1L0qkv8rU/diCwCVK1i+1pL4E6SHkML91l/iW7kFewUq8AH+6idoqn9q6ptjqY7F1i4UVcXn8jNbIZLqVQr2Fjsstz4MoN+k90z3ZPd09FeHXxl3Hn467jntHO0c/j3YXL64uUM5RLmLnuJ7PK18s6xSeSXCzSzuHQIqTGjLd5Lml0lbijNu+wBmC3sSrCYkNdNvG1RKLLk6dZjhPvfYUDMoZpTmt9s10F5fbCbmX7JwpHbeS3m7paoDfTqBxw3Vw056YzMBdjOKKboxqnDe/HdikPoX0SllSqMiDHExml8WZLNvlONdpibMrtNz7qEbzTQ5hPvKW2q/2MeSx8DHpsa5DYuWjUI+BCahWc65sn+OS1yfY3tSxpnFucZ/okmmxz71WYF/1Eu8u0+9zh5lhdaUInxKEPSFDDMbAmfzhlnYbxs4mYrX8SxgBIroYdKnglGxqRQw5EZewiJ7etVzbiUjQO9CbjnamDjIHyO/lz0ckT67bOHV48h51t546tPFZnWmvz6/z5A6lvhEEAf06EM/v+LMHfAI1DMd8Tg3auCa2BR2chVACUw5xAjBQAvv9QY+kj7De6cD0ha/rcN4LyumQLbyaHzd9bjwAK8EGkiJskSLTV+9yInKCLt0hiQ4heDNp+ot8h2B4syBvlzDqmiq/KvHK7FO7b0DzDwZs3ZVDllDiqVQhuzFL7qtWHwq9TkTIp2T4WEyQLRnNls5uP9MmMaJRvlhnP9shNiDvqFGyP87TrN/ivpc9W2BZuXwjOE1CC/u2O17Q7y7ra4Cwcd0Hbg10Em6r47i8nrexuDw25++rN/qVuL3WC4dK5HncflpPyw6d45lvsVmOVbxna3Q2UL+4n7a12fuJ85Lf9EuaZZbfePM2o+DTGwRQy3UClRxI333+dKSy6fRjWWXzZcue5tLrDQWuRF1HXa+7j3waK16z36+WfFYebIlXUQTPjymQbGfLV453TGMdl+puwmlyvL1HZiwHXSY6j9flQJ2nP20rO6sPxhoHF4/a7pYvr4RISfzaTLdpWt1z3uVl/k/gfhs3oimtDmjFsCy3ANtcyEEWXgnsqD6Oj+jlmvFDqD0you5AC4q7GxSrg/jxVXew9pzGZIyEKwi5TV4nHrcZy+LzbDyVOHki2bYK64vHiLgAIvvEOWHvnvv3kG1Ac6W3XqcWUwkNir4ILj8ib1qPv/b1ivHG0+JBsx2M7FaJC6SJuiPgJKDivTg7unF1MjFZj+jlCG8VZuA8ScUIC1dc6B71f+FFcVJwbWxCswunpIeSXpthUCAoCx80YkLrRTA67/ijBJ6dheEEp44UweLQETUIkcZxsvwlig2IxnB65tzOALF+Kc1Kmh+laCFR1ZjoNduoNcKOcAqVogyiUpuIDgTK3mJrxiBvVeCAMLVSfGwp2WNSE8MJhrWYd9znY0GCQc6WZBIe38d4ICkLWuHXaPFVRQ4v/BkSx89LN3gajPj5cP4no70+hTwn8SeTCz5rQ5U7R8wJPVrjhpjr4eRTsJvO9VT2pxCjW4vdmSaUWQC2UJuGhFlUaO7bVUe8T2pMVFyiB61GM6e4o9LLmx7wKLAwRchSl5T4IrGbCbpGB+cAFSzq04ifUHV6ojpSDABs3ya0WfiQ+lMnrt26H7r5nEv9DOyIP5UQB36TUsUvLtilc+UUyGAC7rXC/Xhw/OKolRRt6mJcmDamtK0EJ3Hs8ekVgx4svn/a+Vh8uFS20Oll/AqGxTo6K/75mq/Vw0UV/SLA+5R6lEqIvHXIUi3ETZHi2racsX+6dvWoeZVNY5EhC6lri/EW7wH7h2nnl+CZL7TvHetrf8gfc2V8qwplllyGd7fXvrzaV1qO8IDIoF99uKY0QCrX6a580xl7qhTa0J3BPMK1dgR/4o7LRoyagxWQgHgDEUpbSdJy9vqqpzUmjkIu9hN3zeHg296SQuhzY904UepdmHJQaKdLbqdmYL+A6HJosrbtTtBhnRDRiwSe6PG8kmk24QSczx8PHVoPUHp495C0gPvBnD5G/Zb1zTij3yLmpK/5kpNrp40zO9/aGx3VdjYhmoqaLr/x2Ia8KW3LnD2R8IV2XK3s0brHE+pC+bwSkguXJkpDpjmI8QK+BO6iW3bNds3WCd4zB0SlkE6jD7GXk7OVu2RITBWbohSK92h66jPMPiIWnON//z53h/g9SdKx1BDWKKgOuNKEdH7DrtIfxjap5k6iPzyeR6BleYJYCtqTk4rLCdGLu4jcd38Pfb7Vs/uKN2XUWDDKiR1nBvCThl/KHzU7xGPxBUcOGd65XoMS6yCvrBaUZ0fXWSj/I/7N+6PimtfgeG1VdXof9H1EKgibn+ochybhpT+D1/scxQmy2Bp00bo=
*/