// Copyright 2008 Christophe Henry
// henry UNDERSCORE christophe AT hotmail DOT com
// This is an extended version of the state machine available in the boost::mpl library
// Distributed under the same license as the original.
// Copyright for the original version:
// Copyright 2005 David Abrahams and Aleksey Gurtovoy. Distributed
// under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_MSM_FRONT_EUML_QUERYING_H
#define BOOST_MSM_FRONT_EUML_QUERYING_H

#include <algorithm>
#include <boost/msm/front/euml/common.hpp>

namespace boost { namespace msm { namespace front { namespace euml
{

BOOST_MSM_EUML_FUNCTION(Find_ , std::find , find_ , RESULT_TYPE_PARAM1 , RESULT_TYPE2_PARAM1 )
BOOST_MSM_EUML_FUNCTION(FindIf_ , std::find_if , find_if_ , RESULT_TYPE_PARAM1 , RESULT_TYPE2_PARAM1 )
BOOST_MSM_EUML_FUNCTION(LowerBound_ , std::lower_bound , lower_bound_ , RESULT_TYPE_PARAM1 , RESULT_TYPE2_PARAM1 )
BOOST_MSM_EUML_FUNCTION(UpperBound_ , std::upper_bound , upper_bound_ , RESULT_TYPE_PARAM1 , RESULT_TYPE2_PARAM1 )
BOOST_MSM_EUML_FUNCTION(BinarySearch_ , std::binary_search , binary_search_ , bool , bool )
BOOST_MSM_EUML_FUNCTION(MinElement_ , std::min_element , min_element_ , RESULT_TYPE_PARAM1 , RESULT_TYPE2_PARAM1 )
BOOST_MSM_EUML_FUNCTION(MaxElement_ , std::max_element , max_element_ , RESULT_TYPE_PARAM1 , RESULT_TYPE2_PARAM1 )
BOOST_MSM_EUML_FUNCTION(AdjacentFind_ , std::adjacent_find , adjacent_find_ , RESULT_TYPE_PARAM1 , RESULT_TYPE2_PARAM1 )
BOOST_MSM_EUML_FUNCTION(FindEnd_ , std::find_end , find_end_ , RESULT_TYPE_PARAM1 , RESULT_TYPE2_PARAM1 )
BOOST_MSM_EUML_FUNCTION(FindFirstOf_ , std::find_first_of , find_first_of_ , RESULT_TYPE_PARAM1 , RESULT_TYPE2_PARAM1 )
BOOST_MSM_EUML_FUNCTION(Equal_ , std::equal , equal_ , bool , bool )
BOOST_MSM_EUML_FUNCTION(Search_ , std::search , search_ , RESULT_TYPE_PARAM1 , RESULT_TYPE2_PARAM1 )
BOOST_MSM_EUML_FUNCTION(Includes_ , std::includes , includes_ , bool , bool )
BOOST_MSM_EUML_FUNCTION(LexicographicalCompare_ , std::lexicographical_compare , lexicographical_compare_ , bool , bool )
BOOST_MSM_EUML_FUNCTION(Count_ , std::count , count_ , RESULT_TYPE_DIFF_TYPE_ITER_TRAITS_PARAM1 , RESULT_TYPE2_DIFF_TYPE_ITER_TRAITS_PARAM1 )
BOOST_MSM_EUML_FUNCTION(CountIf_ , std::count_if , count_if_ , RESULT_TYPE_DIFF_TYPE_ITER_TRAITS_PARAM1 , RESULT_TYPE2_DIFF_TYPE_ITER_TRAITS_PARAM1 )
BOOST_MSM_EUML_FUNCTION(Distance_ , std::distance , distance_ , RESULT_TYPE_DIFF_TYPE_ITER_TRAITS_PARAM1 , RESULT_TYPE2_DIFF_TYPE_ITER_TRAITS_PARAM1 )
BOOST_MSM_EUML_FUNCTION(EqualRange_ , std::equal_range , equal_range_ , RESULT_TYPE_PAIR_REMOVE_REF_PARAM1 , RESULT_TYPE2_PAIR_REMOVE_REF_PARAM1 )
BOOST_MSM_EUML_FUNCTION(Mismatch_ , std::mismatch , mismatch_ , RESULT_TYPE_PAIR_REMOVE_REF_PARAM1 , RESULT_TYPE2_PAIR_REMOVE_REF_PARAM1 )


}}}}

#endif //BOOST_MSM_FRONT_EUML_QUERYING_H

/* querying.hpp
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
*/