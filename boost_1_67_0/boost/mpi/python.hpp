// Copyright (C) 2006 Douglas Gregor <doug.gregor -at- gmail.com>

// Use, modification and distribution is subject to the Boost Software
// License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

//  Authors: Douglas Gregor
#ifndef BOOST_MPI_PYTHON_HPP
#define BOOST_MPI_PYTHON_HPP

#include <boost/python/object.hpp>

/** @file python.hpp
 *
 *  This header interacts with the Python bindings for Boost.MPI. The
 *  routines in this header can be used to register user-defined and
 *  library-defined data types with Boost.MPI for efficient
 *  (de-)serialization and separate transmission of skeletons and
 *  content.
 *
 */

namespace boost { namespace mpi { namespace python {

/**
 * @brief Register the type T for direct serialization within Boost.MPI
 *
 * The @c register_serialized function registers a C++ type for direct
 * serialization within Boost.MPI. Direct serialization elides the use
 * of the Python @c pickle package when serializing Python objects
 * that represent C++ values. Direct serialization can be beneficial
 * both to improve serialization performance (Python pickling can be
 * very inefficient) and to permit serialization for Python-wrapped
 * C++ objects that do not support pickling.
 *
 *  @param value A sample value of the type @c T. This may be used
 *  to compute the Python type associated with the C++ type @c T.
 *
 *  @param type The Python type associated with the C++ type @c
 *  T. If not provided, it will be computed from the same value @p
 *  value.
 */
template<typename T>
void
register_serialized(const T& value = T(), PyTypeObject* type = 0);

/**
 * @brief Registers a type for use with the skeleton/content mechanism
 * in Python.
 *
 * The skeleton/content mechanism can only be used from Python with
 * C++ types that have previously been registered via a call to this
 * function. Both the sender and the transmitter must register the
 * type. It is permitted to call this function multiple times for the
 * same type @c T, but only one call per process per type is
 * required. The type @c T must be Serializable.
 *
 *  @param value A sample object of type T that will be used to
 *  determine the Python type associated with T, if @p type is not
 *  specified.
 *
 *  @param type The Python type associated with the C++ type @c
 *  T. If not provided, it will be computed from the same value @p
 *  value.
 */
template<typename T>
void 
register_skeleton_and_content(const T& value = T(), PyTypeObject* type = 0);

} } } // end namespace boost::mpi::python

#ifndef BOOST_MPI_PYTHON_FORWARD_ONLY
#  include <boost/mpi/python/serialize.hpp>
#  include <boost/mpi/python/skeleton_and_content.hpp>
#else
#  undef BOOST_MPI_PYTHON_FORWARD_ONLY
#endif

#endif // BOOST_MPI_PYTHON_HPP

/* python.hpp
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
*/