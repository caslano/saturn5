// (C) Copyright 2005 Matthias Troyer

// Use, modification and distribution is subject to the Boost Software
// License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

//  Authors: Matthias Troyer

#ifndef BOOST_MPI_DETAIL_TYPE_MPI_DATATYPE_CACHE_HPP
#define BOOST_MPI_DETAIL_TYPE_MPI_DATATYPE_CACHE_HPP

#include <boost/mpi/datatype_fwd.hpp>
#include <boost/mpi/detail/mpi_datatype_oarchive.hpp>
#include <boost/mpi/exception.hpp>
#include <boost/utility/enable_if.hpp>
#include <boost/mpl/assert.hpp>
#include <boost/noncopyable.hpp>
#include <typeinfo>

// The std::type_info::before function in Visual C++ 8.0 (and probably earlier)
// incorrectly returns an "int" instead of a "bool". Then the compiler has the
// audacity to complain when that "int" is converted to a "bool". Silence
// this warning.
#ifdef BOOST_MSVC
#  pragma warning(push)
#  pragma warning(disable : 4800)
#endif

namespace boost { namespace mpi { namespace detail {

/// @brief comparison function object for two std::type_info pointers
///
/// is implemented using the before() member function of the std::type_info
/// class

struct type_info_compare
{
  bool operator()(std::type_info const* lhs, std::type_info const* rhs) const
  {
    return lhs->before(*rhs);
  }
};


/// @brief a map of MPI data types, indexed by their type_info
///
///
class BOOST_MPI_DECL mpi_datatype_map
 : public boost::noncopyable
{
  struct implementation;

  implementation *impl;

public:
  mpi_datatype_map();
  ~mpi_datatype_map();

  template <class T>
  MPI_Datatype datatype(const T& x = T(), typename boost::enable_if<is_mpi_builtin_datatype<T> >::type* =0)
  {
    return get_mpi_datatype<T>(x);
  }

  template <class T>
  MPI_Datatype datatype(const T& x =T(), typename boost::disable_if<is_mpi_builtin_datatype<T> >::type* =0 )
  {
    BOOST_MPL_ASSERT((is_mpi_datatype<T>));

    // check whether the type already exists
    std::type_info const* t = &typeid(T);
    MPI_Datatype datatype = get(t);
    if (datatype == MPI_DATATYPE_NULL) {
      // need to create a type
      mpi_datatype_oarchive ar(x);
      datatype = ar.get_mpi_datatype();
      set(t, datatype);
    }

    return datatype;
  }
  
  void clear(); 

private:
  MPI_Datatype get(const std::type_info* t);
  void set(const std::type_info* t, MPI_Datatype datatype);
};

/// Retrieve the MPI datatype cache
BOOST_MPI_DECL mpi_datatype_map& mpi_datatype_cache();

} } } // end namespace boost::mpi::detail

#ifdef BOOST_MSVC
#  pragma warning(pop)
#endif

#endif // BOOST_MPI_DETAIL_TYPE_MPI_DATATYPE_CACHE_HPP

/* mpi_datatype_cache.hpp
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
*/