// (C) Copyright 2005 Matthias Troyer

// Use, modification and distribution is subject to the Boost Software
// License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

//  Authors: Matthias Troyer

#ifndef BOOST_MPI_DETAIL_MPI_DATATYPE_OARCHIVE_HPP
#define BOOST_MPI_DETAIL_MPI_DATATYPE_OARCHIVE_HPP

#include <boost/type_traits/is_enum.hpp>
#include <boost/mpl/bool.hpp>
#include <boost/archive/detail/oserializer.hpp>
#include <boost/archive/detail/auto_link_archive.hpp>
#include <boost/archive/basic_archive.hpp>
#include <boost/mpi/detail/ignore_skeleton_oarchive.hpp>
#include <boost/mpi/detail/mpi_datatype_primitive.hpp>
#include <boost/mpi/datatype_fwd.hpp>
#include <boost/mpl/assert.hpp>
#include <boost/static_assert.hpp>
#include <boost/integer.hpp>
#include <boost/archive/detail/register_archive.hpp>

namespace boost { namespace mpi { namespace detail {


// an archive wrapper that stores only the data members but not the
// special types defined by the serialization library
// to define the data skeletons (classes, pointers, container sizes, ...)

class mpi_datatype_oarchive
  : public mpi_datatype_primitive,
    public ignore_skeleton_oarchive<mpi_datatype_oarchive>
{
public:
    template <class T>
    mpi_datatype_oarchive(const T& x)
         :  mpi_datatype_primitive(&x) // register address
        {
          BOOST_MPL_ASSERT((is_mpi_datatype<T>));
          *this << x;                   // serialize the object
        }

    template<class T>
    void save_override(T const& t)
    {
      save_enum(t,boost::is_enum<T>());
    }

    template<class T>
    void save_enum(T const& t, mpl::false_)
    {
      ignore_skeleton_oarchive<mpi_datatype_oarchive>::save_override(t);
    }

    template<class T>
    void save_enum(T const& t, mpl::true_)
    {
      // select the right sized integer for the enum
      typedef typename boost::uint_t<8*sizeof(T)>::least int_type;
      BOOST_STATIC_ASSERT((sizeof(T)==sizeof(int_type)));
      this->save(*reinterpret_cast<int_type const*>(&t));
    }

};

} } } // end namespace boost::mpi::detail

// required by export
BOOST_SERIALIZATION_REGISTER_ARCHIVE(boost::mpi::detail::mpi_datatype_oarchive)
BOOST_SERIALIZATION_REGISTER_ARCHIVE(boost::mpi::detail::ignore_skeleton_oarchive<boost::mpi::detail::mpi_datatype_oarchive>)
BOOST_SERIALIZATION_USE_ARRAY_OPTIMIZATION(boost::mpi::detail::mpi_datatype_oarchive)

#endif // BOOST_MPI_DETAIL_MPI_DATATYPE_OARCHIVE_HPP

/* mpi_datatype_oarchive.hpp
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
*/