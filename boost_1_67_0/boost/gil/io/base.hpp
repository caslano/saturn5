//
// Copyright 2007-2008 Christian Henning, Andreas Pokorny, Lubomir Bourdev
//
// Distributed under the Boost Software License, Version 1.0
// See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt
//
#ifndef BOOST_GIL_IO_BASE_HPP
#define BOOST_GIL_IO_BASE_HPP

#include <boost/gil/extension/toolbox/toolbox.hpp>

#include <boost/gil/bit_aligned_pixel_reference.hpp>
#include <boost/gil/bit_aligned_pixel_iterator.hpp>
#include <boost/gil/color_convert.hpp>
#include <boost/gil/utilities.hpp>
#include <boost/gil/io/error.hpp>
#include <boost/gil/io/typedefs.hpp>

#include <istream>
#include <ostream>
#include <type_traits>
#include <vector>

namespace boost { namespace gil {

struct format_tag {};

template< typename Property >
struct property_base
{
    using type = Property;
};

template<typename FormatTag>
struct is_format_tag : std::is_base_of<format_tag, FormatTag> {};

struct image_read_settings_base
{
protected:

    image_read_settings_base()
    : _top_left( 0, 0 )
    , _dim     ( 0, 0 )
    {}

    image_read_settings_base( const point_t& top_left
                            , const point_t& dim
                            )
    : _top_left( top_left )
    , _dim     ( dim      )
    {}


public:

    void set( const point_t& top_left
            , const point_t& dim
            )
    {
        _top_left = top_left;
        _dim      = dim;
    }

public:

    point_t _top_left;
    point_t _dim;
};

/**
 * Boolean meta function, std::true_type if the pixel type \a PixelType is supported
 * by the image format identified with \a FormatTag.
 * \todo the name is_supported is to generic, pick something more IO realted.
 */
// Depending on image type the parameter Pixel can be a reference type
// for bit_aligned images or a pixel for byte images.
template< typename Pixel, typename FormatTag > struct is_read_supported {};
template< typename Pixel, typename FormatTag > struct is_write_supported {};


namespace detail {

template< typename Property >
struct property_base
{
    using type = Property;
};

} // namespace detail

struct read_support_true  { static constexpr bool is_supported = true; };
struct read_support_false { static constexpr bool is_supported = false; };
struct write_support_true { static constexpr bool is_supported = true; };
struct write_support_false{ static constexpr bool is_supported = false; };

class no_log {};

template< typename Device, typename FormatTag > struct reader_backend;
template< typename Device, typename FormatTag > struct writer_backend;

template< typename FormatTag > struct image_read_info;
template< typename FormatTag > struct image_read_settings;
template< typename FormatTag, typename Log = no_log > struct image_write_info;

} // namespace gil
} // namespace boost

#endif

/* base.hpp
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
*/