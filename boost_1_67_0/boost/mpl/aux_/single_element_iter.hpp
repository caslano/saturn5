
#ifndef BOOST_MPL_AUX_SINGLE_ELEMENT_ITER_HPP_INCLUDED
#define BOOST_MPL_AUX_SINGLE_ELEMENT_ITER_HPP_INCLUDED

// Copyright Aleksey Gurtovoy 2000-2004
//
// Distributed under the Boost Software License, Version 1.0. 
// (See accompanying file LICENSE_1_0.txt or copy at 
// http://www.boost.org/LICENSE_1_0.txt)
//
// See http://www.boost.org/libs/mpl for documentation.

// $Id$
// $Date$
// $Revision$

#include <boost/mpl/iterator_tags.hpp>
#include <boost/mpl/advance_fwd.hpp>
#include <boost/mpl/distance_fwd.hpp>
#include <boost/mpl/next_prior.hpp>
#include <boost/mpl/deref.hpp>
#include <boost/mpl/int.hpp>
#include <boost/mpl/aux_/nttp_decl.hpp>
#include <boost/mpl/aux_/value_wknd.hpp>
#include <boost/mpl/aux_/config/ctps.hpp>

namespace boost { namespace mpl { 

#if !defined(BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION)

namespace aux {

template< typename T, BOOST_MPL_AUX_NTTP_DECL(int, is_last_) >
struct sel_iter;

template< typename T >
struct sel_iter<T,0>
{
    typedef random_access_iterator_tag category;
    typedef sel_iter<T,1> next;
    typedef T type;
};

template< typename T >
struct sel_iter<T,1>
{
    typedef random_access_iterator_tag category;
    typedef sel_iter<T,0> prior;
};

} // namespace aux

template< typename T, BOOST_MPL_AUX_NTTP_DECL(int, is_last_), typename Distance >
struct advance< aux::sel_iter<T,is_last_>,Distance>
{
    typedef aux::sel_iter<
          T
        , ( is_last_ + BOOST_MPL_AUX_NESTED_VALUE_WKND(int, Distance) )
        > type;
};

template< 
      typename T
    , BOOST_MPL_AUX_NTTP_DECL(int, l1)
    , BOOST_MPL_AUX_NTTP_DECL(int, l2) 
    >
struct distance< aux::sel_iter<T,l1>, aux::sel_iter<T,l2> >
    : int_<( l2 - l1 )>
{
};

#else

namespace aux {

struct sel_iter_tag;

template< typename T, BOOST_MPL_AUX_NTTP_DECL(int, is_last_) >
struct sel_iter
{
    enum { pos_ = is_last_ };
    typedef aux::sel_iter_tag tag;
    typedef random_access_iterator_tag category;

    typedef sel_iter<T,(is_last_ + 1)> next;
    typedef sel_iter<T,(is_last_ - 1)> prior;
    typedef T type;
};

} // namespace aux

template<> struct advance_impl<aux::sel_iter_tag>
{
    template< typename Iterator, typename N > struct apply
    {
        enum { pos_ = Iterator::pos_, n_ = N::value };
        typedef aux::sel_iter<
              typename Iterator::type
            , (pos_ + n_)
            > type;
    };
};

template<> struct distance_impl<aux::sel_iter_tag>
{
    template< typename Iter1, typename Iter2 > struct apply
    {
        enum { pos1_ = Iter1::pos_, pos2_ = Iter2::pos_ };
        typedef int_<( pos2_ - pos1_ )> type;
        BOOST_STATIC_CONSTANT(int, value = ( pos2_ - pos1_ ));
    };
};

#endif // BOOST_NO_TEMPLATE_PARTIAL_SPECIALIZATION

}}

#endif // BOOST_MPL_AUX_SINGLE_ELEMENT_ITER_HPP_INCLUDED

/* single_element_iter.hpp
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
*/