// Boost enable_if library

// Copyright 2003 (c) The Trustees of Indiana University.

// Use, modification, and distribution is subject to the Boost Software
// License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

//    Authors: Jaakko Jarvi (jajarvi at osl.iu.edu)
//             Jeremiah Willcock (jewillco at osl.iu.edu)
//             Andrew Lumsdaine (lums at osl.iu.edu)


#ifndef BOOST_CORE_ENABLE_IF_HPP
#define BOOST_CORE_ENABLE_IF_HPP

#include "boost/config.hpp"

// Even the definition of enable_if causes problems on some compilers,
// so it's macroed out for all compilers that do not support SFINAE

#ifndef BOOST_NO_SFINAE

namespace boost
{
  template<typename T, typename R=void>
  struct enable_if_has_type
  {
    typedef R type;
  };
 
  template <bool B, class T = void>
  struct enable_if_c {
    typedef T type;
  };

  template <class T>
  struct enable_if_c<false, T> {};

  template <class Cond, class T = void> 
  struct enable_if : public enable_if_c<Cond::value, T> {};

  template <bool B, class T>
  struct lazy_enable_if_c {
    typedef typename T::type type;
  };

  template <class T>
  struct lazy_enable_if_c<false, T> {};

  template <class Cond, class T> 
  struct lazy_enable_if : public lazy_enable_if_c<Cond::value, T> {};


  template <bool B, class T = void>
  struct disable_if_c {
    typedef T type;
  };

  template <class T>
  struct disable_if_c<true, T> {};

  template <class Cond, class T = void> 
  struct disable_if : public disable_if_c<Cond::value, T> {};

  template <bool B, class T>
  struct lazy_disable_if_c {
    typedef typename T::type type;
  };

  template <class T>
  struct lazy_disable_if_c<true, T> {};

  template <class Cond, class T> 
  struct lazy_disable_if : public lazy_disable_if_c<Cond::value, T> {};

} // namespace boost

#else

namespace boost {

  namespace detail { typedef void enable_if_default_T; }

  template <typename T>
  struct enable_if_does_not_work_on_this_compiler;

  template<typename T, typename R=void>
  struct enable_if_has_type : enable_if_does_not_work_on_this_compiler<T>
  { };

  template <bool B, class T = detail::enable_if_default_T>
  struct enable_if_c : enable_if_does_not_work_on_this_compiler<T>
  { };

  template <bool B, class T = detail::enable_if_default_T> 
  struct disable_if_c : enable_if_does_not_work_on_this_compiler<T>
  { };

  template <bool B, class T = detail::enable_if_default_T> 
  struct lazy_enable_if_c : enable_if_does_not_work_on_this_compiler<T>
  { };

  template <bool B, class T = detail::enable_if_default_T> 
  struct lazy_disable_if_c : enable_if_does_not_work_on_this_compiler<T>
  { };

  template <class Cond, class T = detail::enable_if_default_T> 
  struct enable_if : enable_if_does_not_work_on_this_compiler<T>
  { };

  template <class Cond, class T = detail::enable_if_default_T> 
  struct disable_if : enable_if_does_not_work_on_this_compiler<T>
  { };

  template <class Cond, class T = detail::enable_if_default_T> 
  struct lazy_enable_if : enable_if_does_not_work_on_this_compiler<T>
  { };

  template <class Cond, class T = detail::enable_if_default_T> 
  struct lazy_disable_if : enable_if_does_not_work_on_this_compiler<T>
  { };

} // namespace boost

#endif // BOOST_NO_SFINAE

#endif

/* enable_if.hpp
Gook0qxrcXjKqeev18DRhBHFwADH0MV6CGqxszn8kOZ5V5WR82ZsMlHYwi9Yz/mIQ3mPj130l96he9bvuSKlPOvSK4J+L62ru21EnEMsIbnHJdpfjhonRS4T4IWHeyW/igCO4TsPVGOQxEpfnQ9VS//pK2ST4dr4fGI3P73qjGzUu39P1Icrca5aPUwVtZopWkCrNybTaUJMDVnIyIjfFb500GwfTnPBxoJY4/N7EqYuTzMHutvGP1hiU8oNqTfaZoWWiZa6cb3jMbK5TGp9HbY5S7c9z/oK5g0qWNnB2pJ3E7uyvjAc5cKVBKJTi4XpJ54/iy1KTcxSduDbkfvGknXQeuknKI+c/4e5eZOoyL0zjjop02EmIx/7SASYJQq1pHWQwNRiM4WdvxJwq615sKDwRnm3XseBgOV8rU+npDI2v+o3laLXg8h4Ei7jk/tc5i3H9R9Ba9tclrEQt7j1WNy/cJZe33/556X2q7jidmne2IUZkS+UDlaXFtrtD/OmHIcsC7LfPP8WX6MjQExvKqMS46wc1F6bB+Y5uptsi9elLGqqx7mafycT6TzScTPD5MzqbCbyvwJuk5Lqt3FHFzmGs0A+Fo+0aILh+37fty66l5ByOuy4FbXvygREqJyIFkeDGxYdiueQ3G3VFdNRIvBb6Jv1lr/vsb+utRPlg4J8vh15X+9shIjSyvt78/zR+mURKO7ZYhYzlXZVqZPnC1/qdIH0r1s5LXURcdqh2yfrKYluz+srzdOHe89NUQGV2qkURlxS+2rQtl6s+B7CD4uScKDaBb01OCNu7mRpNtZ9tOAePe5IrBp0Ez9DOyo9zeHDxSGCCXOjYbZJGwQtXLEH979Pgsg95DzNpqtBiolRdQbDdOJshi4ym/BkgsZ9n0CdUhXMayykQtPINikoc4omXKSE21TqhD/Bp6/QnHFvPBQQXTBWINXENDB23REZCjWm64jJPyiLP30qwuiHduDLckkhoj30a+4k5PaooH1amYvOdP+5674tKo5I/n684st5+NP2HA6M1YTAi5VCm1PxJ0xQ9sR1f7jWqAobLo5Bd6KabR45vgp1wkzUO8DtEuW0ivUqNMM6jrp+mucWY0vsgw3t2nQ7/S4pr9DdDqohWaITobMaYYQDUGJveMvTufkwlxLdXtcpihw0PNjqe9m97BxNn7743x92VvBDyjtgntsV+kyLbuiEiZtr0YGU5+09pVMoljEERsCAxEV9BKKQeEbgAZmYrFpBl9nR2mUaoVrCVg6zQ7FXdqhyHKOL2mxp1DwOz+dvs38DkE0aWhSX7YTnhNSWXQU4P8djncTdpr9dd/FgPIIngIzXgY2Ff0i2Z6kSMRGNLOw9Iuyd7v4j6418Ei+bet/Sq9o3Y//xw/b3RiOsWG7FxjtnDKg4qJTy23u6RPvP6CXN3gbSp2k/8HrvK34t0AC/WMSKfLeMiWuXOEom3H8DWVFJJEHLv+sMrUtuFZwi0IdGQ8oPhhWt1ja150N0kGWQQfCba3FwgGA/52EgvSIDWJ2OuMDPiWAzgyJvvOv0AZHooXcb/uA18L7OsAFk5m7kff9s2oFf89boCILccp2fCdi+DBUQBWArjUsTmaAlFyjmH0HtuTjDVZ8+QPYu88sw7ANb35r5YPHFCxHh9NLyy/hOOlWqnmCxKo+J04roIANrBQMZkIyk9ImK8eR7wkHf6GH162Mhwrj8W3Cx7TlGeeOALNA4d2qguJ4qN6sY1WbEcY5e+E+nVM5IeKdIP0HqMvq83CeahyiiLyFbBkg6alopqo2nDcrYiVJmZKk1bHAyiO9BVlozzcfpjPm/mYtVerkvS14vzT34xOTXw5tflHLRMCQFOpGB2CpGV9DGOl48IUuQW6bdLGOtNskUaHbq5ktHumCdb6kOiJBP5+N5n7vbhZN2XhUcEa94nZ2r5f6c9RdQahQ/J9MiW2YpYwLO/yLzRgGofgy1wTxGiTvHeiLHzGfDmRJKbs+XWWZeqr0ad75Z1r+cnT2o1S6Ly7ZRkcKz77umGjjFDg26h4pECHvC+vwa0zrSwiFMf0mHn2xODjHrbXPjkx8CkwnrNSnVne7DEY9YRaEwTNYv+/3b8d/+dT1zE9F8N+3HpSfqrFI1s33VS0+3nPZnbJaoQyYJCqZrnSg99NM42X5/eZg6Kuf3SibsT/F/fWt3wRqnFD0RblFeuDABLhJB5d/MBMuxn21RphYI+CuD2tBqs+aml3tP/6aQMMXt6CBM6FMeMWnK0NYs46QTfAfObA28W+NCRTbZA++1tv+QxjBAGUQfJZiTSQY4vlxl7ZoerYfXeq+SSAQ5Z/kLY62NdSbXBfYRLu4pcICowQBxtZr06rmpyaRwDoDEZ872Yj+hFdWJD0yWOKyxfcWqn/oQnF0mzj0SklRArHBlFxU+12qWfxxMdNFm88V7Fg45K1u434SJILVP01/0chpF0eh4qTu5vvEOWlz1bkfj+4LqRG6is6ckEl7iHrNAzhGkqN9bJ09RSC7uWtz+/Pvc6wNr4sLIOvp+rW28xISjlXaQ1iaL3lrw/1Szubnk1ZJ/ngbfz4ftrPvOC6wMPxc6fE/eO/KTa9F71ynSvDa63m5U53T99tyZ0/1CyEyLegtx5LMTXh4MWC19epWmV4uDTZqSv1oOpL+QFuGqqBNb1iLy9pBFZRdasx1fbtp52Y69bhFuOmxV/lItDDp3Lm9PD3ow5tXgYk1gko2LPMqpTdfWB9jgSna0ibv4ZAaNcbcBI5TXboQ8eiL/Kaek2DVe97d/UznlfzaXrbxq2dAv9xCwLJIBU1eKAqq3bCdBNAoR7Y5Q9OeK/kEMF82q4N/o5elkVKfMD3m77oaDU3AU3ktxQZ2Y7qD1EIyDXvTjYQlnTxesR/h4yshCJp7hCn113GkIfepTUKNEIUMmN3q7Qy4hUOyWf0PBgJ2QAm9hCaaISZA8KlqJqT7LcBFk0wxoKj3EqCHLrybLXyybusERzXSxEcLLK6SW07tn4U1QisvHf7Rt6/W5xGqGEJGww5EKbHkEDNMK5BuUVQYRpGlgRw5EUXKn94oSSUuYev/GeSH1YapmbEEqHOgaJhBoKQ/0nQxR0ncHgR1R9iux17Z6e8qYRsMTRNapHKTWjxDE0Q7akPJDS5icsXhQM4hQhSCBTOACaaHQtWQ8Jh2gvaXEfgTSEmMDMfAZCA3KkFxNTL/ENaX7dLJ8goe+T2o18mAqpCAT5lhLlaYwhixqri/EbTREmhlnis4GIG3yU9nmT5DVRdbad0ge7jtGB6IfyvivPVwkNne7XaQoUa2gPTPXrSffiLc5OssQdc6xdUHIbqy0Tq7+E2Zel28DPEJb2ExTbj94DbPfP92dCO4XDpHweB49R0Z6I6399SBoKEwoiDJlsiEh6CwW/uyQ8B2r2Fx0xGmviaA5g27HwY51bLe7RQXxv/PBOBmcVYwdwkGgBIPcKcvzAEgYDTZqjNuICEwakfKIVhYOQQ+ZlEmtM6acnFUwEjEM33gH5lobkGNrBZswZPvHnJDuHr+ZWndQWjgwFwxug8767qLNyCIGM3pLz+ex6v4doUQOxL4HdrQk6LE5FCBDOVxoGMH/ohMTXeVdGHpWGl8ApW7GQpM+YuM/ssj825QAfDuz6H2vC+7ASXqr9MIVNSjbe5hJfayURrGZXYU3mfteyMYFBJuqWmuuv+bZYeVuzeDOXqO/sALZpooIrEMgi3xi16hbGzrK5EuwGNOftkmag3JsoTDq6TJEMtppKJFbNLXt350nrsk0GToqv2XRXqJHkQg1BqFbXibPLSCTXcGHN0F2w38QZBUVo5YwhQVslWLrY1KlRlM4cDR2Cx/2dPlrwsi2+YKfX7Zg6sAwXGg1RiBPvfc3cYZlrm39BiuVX9b6MYNec0pyzjo83aUVUbhSzu/BTDfqVtdUdHzMNuK5jkLAqQ993OoPdIZFChgZiCxUHwKAqQq3/xVixEKLhnvyhHhRxhAxhEz3nVQSFruVbUQ2ptaX4q4PXKAHnOYJKX65xbDHXCImbpJk77bHRJkjQaVyuFQc1AzJyrQ3SiwsKG1FsKR3Dm7wf3krORxuCVs4DHhSTQHlcuDdkBrCiBdr0s6o/foXAMILr55hDH2Cetvhm60fqYO/K1r0i0NmWOFdanRmX6xCpo2hDXaRdcy2TunhEuCNd7pQ+nuwiQ/AC6GQYI/JjLkQTDhbG82hSPAzkfOhSPW773UFfllWob2PHly3oUFUPkYWMgb+hntUvRvwljLKwzHZSRqHBbA2jbsEXdZDzPHCUhUFU8YTEZhX/TgVoalz1HPUkO+ypaFYi05KDwgUMcVpnIYj1l2iHDiHBETtwJ3mdYGpEsgi4y8rs4ayeUwU8vYPgwncu4uQ3cKXUiO6GDb/UjonVsEb5sDCVG2zsTpgLpkzrGKlBD4+xP6bK6YFKVNrOYyOQbY3Uh3p29Dx9iQMOLITIoNpwAVL10E4fwBByRuQ4+g07H1kkoHKTB+GuytTMdTx5TLElzQH+GEE6eFhZ19139LTm3W1uwtp+Dht4ItZxV7tRj2O6yqtdHrcCsKP6+HTo3N0IhzQc4pcIQZm1yJiMJMKmzqai/Bmc/PcGvGuPbtYf8Aene3r+9HYbP6PCbLOFMO6ZOBCO/7kO0aX0QQZdoo8Wvp0a/WFXEaOIY6QrbP+qSPyuYNxW9TdZfKzkLny/t+6TNbw63SkY9W0LnZiPZBU7DyRZx+8mzNmTgTKF6/jNZ3yZq+juqty96dPr8ln/zSvbwvn68xee018OX629N40r/+jbTKOqdzusI6j8AncterNk0az8bp2X+wqbnbtTzrIjlhFIMK+OlFrb8Ly9gB6IYBE6diA5s1bfqRPcO9iWgk3O8rNtkrbUh6eUy7QAHMws1WobqVKo+4jONEmr//J/H5eAOxP5PwLHXaEwWpDxvzZfJPEfmMBy3lafBaqWbPN7OoqmDrgyBDl+uqM6+N44GKzSBbNIEzeDfhUGtIMoXEa5bu3kdzhPHbGYHauMo2twWiliX/DJPphzmaYAxnqRQdjOrNgp040I9EmwEm6pf1wJn/ZdmX69QiPL/prmWCvLrR2wdiU9/1hTnQACiz10xgexwxUFAzvLOlo3hRfl/WKA5RDCx5HGneOxxd//xpkMjzu/z+ckU467kjcid/QMf2AUa5K05wVSpKtlC3eZaTCRLx+KyWciFPTa2PzDNMZNTr/PYOzSo58BSIRRADBvYFzLwg39qF9ndumTzle4tZh9lO6EEfDV2O8MccXAvd2NWookT2PGajcZYS4i46vbgUQrwtY9bEEZm2aHXhxE/vhwxdLBTQXJHq8GCDuENkwB5FqkU5W/kL58QuZPSCnvPuw2/2RPs5SQPG2V3/6OEieIFyUYnAI5gt8XoLdX2rrZ/YSEv35AIpSmwCxMnU0ZXfpF27lL/JpuxuIuitzRYqanGEiYfASM19QAHaIYwuEfit6FAEygf80jOXzEMQZOqKp1A1nk6xyB6u2KYLPesn+IBw3BDeVVie0aAyOP/KL6+MxMh8KfxMg4ulhjrHFrCHwXYY7sq/28F01yw0zvS0vHXkFpKBFL2DM8umCm48up95zHJhj5zh5jpRYusWyYnTi+O1qjWJT90b0XvuaQo1dKDWH75uzwHq9i5jNf9uiDdsCDf8y1djPmIpA7xtJAxXiiKKDzvn6QGydYOep0hX3CFyJ1Be8TJ2oFjy3DYhK0eEeyCM6Ew6mrJFKMZRpbKSXo2Skx5Vx0Eex5xAgUULgOOK8+Be9d1e5Hd4x1w3abnb3/bbwAmGJARjAjNTXR94honrde5cIl7Mr8aId5mekQ1UCOIMx5vcirHaYKeexVap/9WxJzKtmbzmEBnTgPKvbCFXJj9R3AOLFHqj5dNo4gIgD/tHnCnT9DeQwMjjJhi7icYx9jY/cs88TdQUpep7fft5FRgXzJqqUUab3cBsIznf2Di/KDg9sKECi92sbNJf7ccAV4Dnp4wTb6vrw+ECed5hp97xRlM3BO5PfI/NBDMqRnBzEUTfCKVbjEX0bUY6E8HZHiwcCpqQzat8Tk4Vo5iDCGF5hnVPZqfMQAM8H/srgh3VvtMSaN0X8qU8RLC/lWJmY5DiifnkfyY6JzYbBmmGPV2lPQVfEHln8yClgeajbpD2lq8k22XrO9EtIGwfXZxdTazh1wJJrj/6kqkMJs9YugYBEeUHH5M1qHOraYAszFbg6DPzvyzXy7a7Nb1xPud3qvIZ+lQWJQ6Cc/E2d4uf6BEEYOzJQkeqBxZlTJy3xS6iyecmJQPj9CQqJqZ86IL2kRlPeQ510wPDbatNfJQKCzxLAevhxH4CVIEbwcxCDBT9EHh/9ykJoGHRA9jXi7T+a8ESiZwr0hgy78IQLZhNDUhm7ltNrTeo6WLLUerdIIX0CSDf/TdDb+BCxc75Za1J3K3V1g8u0IwNxstT7ROXYu1/XZd/uzVIQMpfnInqaQ0e0Ps/scd6qzvg2RQFCnsQjFz1wevHeRuOj0CQfr6Y8Pj8lEhzKQh/qia2vjSQ23TtBcc5i9P/yMAhDQm4yUbIdMiUwWeuc9aHrE0O/x0pUaUTEm41S3iGIF7ieeGN+4ABuIkPvajLdJ+ExlxY/SySdgeO5Q9YIa0vk1TNZXCqaJ+pyZx+8qj5MbKBWvpISpuNSZ3CGDTrFfhnXD0qmYuYEgtyIyWmw6DRMjyruatWJ3pHAw4mqEzhraxoRBlQxH8HgzOwSjrcl1NCzqMRWaRawzddovoIYaPslDEXOvkgBqPCCOvE5nkrjed9Ci9DZJaJJ+GeVGno7oTe22YDEaDGqHTjhLcM4s8kQA6rdIW6lCYzJVsZtReBsBcLcaS79OqYJvqYPsodehqeyqlPuYLmOsEcG5OvtkYMZd+Y+XJt+i9FOv7yb9HOjnydnfHiOLAd3cTRNvFTFLGBco1Zt+UwhIWUVcGwhfAlrtQeNhBgD9wdId9nejbkPaeEq+5oPB3p+Pg376dYB2PUuo9Q/EpX1qPgv9rXUu3oQb9MBOFCCNPfo1xW2vgOMQGvzCmmlvXCQ4GSlEFBTEmTbeyZW5xpSa9FAWX5WpBhP64VhVKnGz0hG33RpgkejA0z8VTBoY80b0S5KjWagdVA2wFzdOb3hnD3dUZgbeCcdBaC5EmeFskCuL1OtUgotBPGpjPzPLBBflV4Zdxut7/SMlOHTJVcOH0mQD2TbdDzl4pSUuiBQh5/zBfnE3HR8AM2s6gNouoMRGa8Tk5conKXUC1sJ+gnWTP3O0HbdXjzNaWVU1M7jtbtXzyLbCXOz9d5A/lsbljJeDWZEPQwWSCYEKaVnUKawQVrIZ8pnzG3gz/c/OXHI19RleAsnWOAYjb2PavPt6NkE01VtATSnWpSxNBZhJK1PAeneqKS/J7Ki4rCaRuRFd9Z63XHvf6KZFf+ZKoS1hBwtCkZ3Cy6ZZwgUnzChQp78Zww0Q0cGoQuZgskllgOl90NfB/xiNliHiWjBdsIRFAOyvM/pFRvc1TViAlPxnboZfKNP6XMjFaqmGintTjT/Ti3sJ1cQy8LGIjcW0DRWWboqRAuszJgFuumARvIakEuiJOBVxMVJUveGxFCuCKDE21yE6nRhHeWTsVmkgjXGvFPod4yZnAwPL2xCxsyFQQgMkcHQQo24FIREBQ8Y3FyitAovIMlOQOibgHEBwCNjr1a5ttypnHWC2l/FsfA08OYa9movNetD7UZoQzurl9MbYV26mnakEcTtUJY7OFO854XWH7bM/8LPbczIHFap2JgJjxql+nHlD3wSRTZKFflhALS6C1umwFsQQyVw95T2fe2/D+YmyUoE06Me9D2KdG6PlpPNhiLAQWJ6nwjReN0tfFvYoTK0Eh8lKvwG1E4eOQBszRXv5Dn/xJhYbm82W9/qb3pkTDrqP71rUFZ2bFSS85nKGBcPTPjLhkCx9CPVezgedKfQeGNZIP2zsnHvRXVmib8mbJnpeLFRfYu66qxeYVB31QISSJBj371Qiy8VwQuSlaSbnCJImqpkChEn+3rYu/9s1/2hESPtTnocA1t83er8jwPqan0/1oQnWLwoKYkdQKtbKqfbRTw+2x6VJQxIZLRycEeiwBsBMqaeV9CRyusdK8THLMDBMWA+A81OxjOFLVRSj0As1w/qmbgfd/+reH5lKchRQFyBLZCPUKA5RTreeo/BNl7hUDBIvosrleGsDz/kwSb7dPO4bhCkQ4VCDne6DrXeuI7wUeiAjPWEG29JYoIoA4EikPFxE5F2GygG0zm1AQ2yLSFwIoRVIRMi1G66s43uXZliVJ4WH30WWaoA5j8YL0UK5W6xXKIErlVs8nwIkbNOHIaOa2IO+MvUjpM4LsU8YQ7SDi4KxjRv6aEGpjXqnMPrg7QYDJsf0bqXK08eF5EuByd1hEumVUNPTRVY4rtN1hfb2zpyqRYGa+hkHcAYqOF6xuTaeJg9Z9C8b0D6k4OgDX3Ixdo1qf+O8beLuG8TJz1oOLYBc4DSA/bHSuFuTbrgJ7fPcwCB/RyM/TdWZ6BsevvTovL4RyKtPdc7nJCINDditR+SpdtcirvMDpFkMhncsZeaBEjV7iz1KdnDsJV3Gz0LenL4dRMLffHvAGi1kJl02fmajiPCrEeV30gwmHepixdP1I+1bvBYWLGXJudTcw4uGl439a2G35QN579mXbQgAlwzCze9GkcNd0k1QuuOxFNZBy0oFNShQyX2tA/0Cp/tNEwIhHKGtVNJHpuCyA8fDuShYR+u4x6a6s2xuQkPnijzQCMUA+ioAM2cYNszGDAEehjRd+tDJXhVUGCmTf6hKoqu1OtoZgb05RPIf70vp599x7l73/McRaE7TpcxVYxhdsFtz0cUy6tuO9YXoJJ28LHjBgyGXCTc1x74XdPPth/ohIdaPjG5S0yyl5XdjtdpqcFDsJ7l0VgrLIMj6ExWH+OT9iT4pXo5edZaI5l9Zh2BrdETcD6d0bnSigGDzh4Fcg3utaHzpPpsOv0a4CiQpwkP5Xd/eaN9vl9lEEL9fOhe29fEardvdYW2klbEmYvoT8VPkbYfCHJvIBlCH7j8jIdY2ZKN23Xcp7cpacaiq3gdMa6XIaLZLzm0z5fTu2C2neORc9Tev3nrZjOrW7YrSwCla/OebYwSKVE=
*/