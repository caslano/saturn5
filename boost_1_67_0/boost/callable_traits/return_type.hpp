/*

@Copyright Barrett Adair 2015-2017

Distributed under the Boost Software License, Version 1.0.
(See accompanying file LICENSE.md or copy at http://boost.org/LICENSE_1_0.txt)

*/

#ifndef BOOST_CLBL_TRTS_RESULT_OF_HPP
#define BOOST_CLBL_TRTS_RESULT_OF_HPP

#include <boost/callable_traits/detail/core.hpp>

namespace boost { namespace callable_traits {

BOOST_CLBL_TRTS_DEFINE_SFINAE_ERROR_ORIGIN(return_type)
BOOST_CLBL_TRTS_SFINAE_MSG(return_type, unable_to_determine_return_type)

//[ return_type_hpp
/*`
[section:ref_return_type return_type]
[heading Header]
``#include <boost/callable_traits/return_type.hpp>``
[heading Definition]
*/

template<typename T>
using return_type_t = //see below
//<-
    detail::try_but_fail_if_invalid<
        typename detail::traits<detail::shallow_decay<T>>::return_type,
        unable_to_determine_return_type>;

namespace detail {

    template<typename T, typename = std::false_type>
    struct return_type_impl {};

    template<typename T>
    struct return_type_impl <T, typename std::is_same<
        return_type_t<T>, detail::dummy>::type>
    {
        using type = return_type_t<T>;
    };
}

//->

template<typename T>
struct return_type : detail::return_type_impl<T> {};

//<-
}} // namespace boost::callable_traits
//->

/*`
[heading Constraints]
* `T` must be one of the following:
  * function
  * function pointer
  * function reference
  * member function pointer
  * member data pointer
  * user-defined type with a non-overloaded `operator()`
  * type of a non-generic lambda

[heading Behavior]
* When the constraints are violated, a substitution failure occurs.
* The aliased type is the return type of `T`.

[heading Input/Output Examples]
[table
    [[`T`]                              [`return_type_t<T, std::tuple>`]]
    [[`void()`]                         [`void`]]
    [[`float(*)()`]                     [`float`]]
    [[`const char*(&)()`]               [`const char *`]]
    [[`int(foo::*)() const`]            [`int`]]
    [[`int`]                            [(substitution failure)]]
    [[`int (*const)()`]                 [(substitution failure)]]
]

[heading Example Program]
[import ../example/return_type.cpp]
[return_type]
[endsect]
*/
//]

#endif // #ifndef BOOST_CLBL_TRTS_RESULT_OF_HPP

/* return_type.hpp
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
*/