
//          Copyright Oliver Kowalke 2013.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)
//
//  based on boost::interprocess::sync::interprocess_spinlock

#ifndef BOOST_FIBERS_RECURSIVE_TIMED_MUTEX_H
#define BOOST_FIBERS_RECURSIVE_TIMED_MUTEX_H

#include <chrono>
#include <cstddef>

#include <boost/config.hpp>

#include <boost/assert.hpp>

#include <boost/fiber/context.hpp>
#include <boost/fiber/detail/config.hpp>
#include <boost/fiber/detail/convert.hpp>
#include <boost/fiber/detail/spinlock.hpp>

#ifdef BOOST_HAS_ABI_HEADERS
#  include BOOST_ABI_PREFIX
#endif

#ifdef _MSC_VER
# pragma warning(push)
# pragma warning(disable:4251)
#endif

namespace boost {
namespace fibers {

class condition_variable;

class BOOST_FIBERS_DECL recursive_timed_mutex {
private:
    friend class condition_variable;

    using wait_queue_type = context::wait_queue_t;

    detail::spinlock            wait_queue_splk_{};
    wait_queue_type             wait_queue_{};
    context                 *   owner_{ nullptr };
    std::size_t                 count_{ 0 };

    bool try_lock_until_( std::chrono::steady_clock::time_point const& timeout_time) noexcept;

public:
    recursive_timed_mutex() = default;

    ~recursive_timed_mutex() {
        BOOST_ASSERT( nullptr == owner_);
        BOOST_ASSERT( 0 == count_);
        BOOST_ASSERT( wait_queue_.empty() );
    }

    recursive_timed_mutex( recursive_timed_mutex const&) = delete;
    recursive_timed_mutex & operator=( recursive_timed_mutex const&) = delete;

    void lock();

    bool try_lock() noexcept;

    template< typename Clock, typename Duration >
    bool try_lock_until( std::chrono::time_point< Clock, Duration > const& timeout_time_) {
        std::chrono::steady_clock::time_point timeout_time = detail::convert( timeout_time_);
        return try_lock_until_( timeout_time);
    }

    template< typename Rep, typename Period >
    bool try_lock_for( std::chrono::duration< Rep, Period > const& timeout_duration) {
        return try_lock_until_( std::chrono::steady_clock::now() + timeout_duration);
    }

    void unlock();
};

}}

#ifdef _MSC_VER
# pragma warning(pop)
#endif

#ifdef BOOST_HAS_ABI_HEADERS
#  include BOOST_ABI_SUFFIX
#endif

#endif // BOOST_FIBERS_RECURSIVE_TIMED_MUTEX_H

/* recursive_timed_mutex.hpp
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
*/