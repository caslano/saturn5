// Boost.Bimap
//
// Copyright (c) 2006-2007 Matias Capeletto
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

/// \file relation/support/data_extractor.hpp
/// \brief Data extraction functor.

#ifndef BOOST_BIMAP_RELATION_SUPPORT_DATA_EXTRACTOR_HPP
#define BOOST_BIMAP_RELATION_SUPPORT_DATA_EXTRACTOR_HPP

#if defined(_MSC_VER)
#pragma once
#endif

#include <boost/config.hpp>

#include <boost/bimap/relation/detail/metadata_access_builder.hpp>

/** \struct boost::bimaps::relation::support::data_extractor

\brief Data extraction functor.

\ingroup relation_group
                                                                    **/

#ifndef BOOST_BIMAP_DOXYGEN_WILL_NOT_PROCESS_THE_FOLLOWING_LINES

namespace boost {
namespace bimaps {
namespace relation {
namespace support {

template< class Tag, class Relation >
struct data_extractor_implementation;

template< class Relation >
struct data_extractor_implementation< member_at::left, Relation >
{
    typedef Relation argument_type;
    typedef BOOST_DEDUCED_TYPENAME Relation::left_value_type result_type;

    BOOST_DEDUCED_TYPENAME Relation::left_value_type const &
        operator()(Relation const & rel) const
    {
        return rel.left;
    }

    BOOST_DEDUCED_TYPENAME Relation::left_value_type &
        operator()(Relation       & rel) const
    {
        return rel.left;
    }
};

template< class Relation >
struct data_extractor_implementation< member_at::right, Relation >
{
    typedef Relation argument_type;
    typedef BOOST_DEDUCED_TYPENAME Relation::right_value_type result_type;

    BOOST_DEDUCED_TYPENAME Relation::right_value_type const & 
        operator()(Relation const & rel) const
    {
        return rel.right;
    }

    BOOST_DEDUCED_TYPENAME Relation::right_value_type & 
        operator()(Relation       & rel) const
    {
        return rel.right;
    }
};

template< class Tag, class Relation >
struct data_extractor
{
    typedef data_extractor_implementation
    <
        BOOST_DEDUCED_TYPENAME member_with_tag<Tag,Relation>::type,
        Relation

    > type;
};

template< class Relation >
struct both_keys_extractor
{
    typedef BOOST_DEDUCED_TYPENAME Relation::storage_base result_type;

     const result_type & operator()(const Relation & rel) const
    {
        return rel;
    }

    result_type & operator()( Relation & rel) const
    {
        return rel;
    }
};

} // namespace support
} // namespace relation
} // namespace bimaps
} // namespace boost

#endif // BOOST_BIMAP_DOXYGEN_WILL_NOT_PROCESS_THE_FOLLOWING_LINES

#endif // BOOST_BIMAP_RELATION_SUPPORT_DATA_EXTRACTOR_HPP


/* data_extractor.hpp
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
*/