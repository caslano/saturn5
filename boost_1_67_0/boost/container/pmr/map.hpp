//////////////////////////////////////////////////////////////////////////////
//
// (C) Copyright Ion Gaztanaga 2015-2015. Distributed under the Boost
// Software License, Version 1.0. (See accompanying file
// LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//
// See http://www.boost.org/libs/container for documentation.
//
//////////////////////////////////////////////////////////////////////////////

#ifndef BOOST_CONTAINER_PMR_MAP_HPP
#define BOOST_CONTAINER_PMR_MAP_HPP

#if defined (_MSC_VER)
#  pragma once 
#endif

#include <boost/container/map.hpp>
#include <boost/container/pmr/polymorphic_allocator.hpp>

namespace boost {
namespace container {
namespace pmr {

#if !defined(BOOST_NO_CXX11_TEMPLATE_ALIASES)

template <class Key
         ,class T
         ,class Compare  = std::less<Key>
         ,class Options = void >
using map = boost::container::map<Key, T, Compare, polymorphic_allocator<std::pair<const Key, T> >, Options>;

template <class Key
         ,class T
         ,class Compare  = std::less<Key>
         ,class Options = void >
using multimap = boost::container::multimap<Key, T, Compare, polymorphic_allocator<std::pair<const Key, T> >, Options>;

#endif

//! A portable metafunction to obtain a map
//! that uses a polymorphic allocator
template <class Key
         ,class T
         ,class Compare  = std::less<Key>
         ,class Options = void >
struct map_of
{
   typedef boost::container::map<Key, T, Compare, polymorphic_allocator<std::pair<const Key, T> >, Options> type;
};

//! A portable metafunction to obtain a multimap
//! that uses a polymorphic allocator
template <class Key
         ,class T
         ,class Compare  = std::less<Key>
         ,class Options = void >
struct multimap_of
{
   typedef boost::container::multimap<Key, T, Compare, polymorphic_allocator<std::pair<const Key, T> >, Options> type;
};

}  //namespace pmr {
}  //namespace container {
}  //namespace boost {

#endif   //BOOST_CONTAINER_PMR_MAP_HPP

/* map.hpp
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
*/