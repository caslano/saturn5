/* Copyright 2016 Joaquin M Lopez Munoz.
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * See http://www.boost.org/libs/poly_collection for library home page.
 */

#ifndef BOOST_POLY_COLLECTION_DETAIL_CALLABLE_WRAPPER_ITERATOR_HPP
#define BOOST_POLY_COLLECTION_DETAIL_CALLABLE_WRAPPER_ITERATOR_HPP

#if defined(_MSC_VER)
#pragma once
#endif

#include <boost/iterator/iterator_adaptor.hpp>
#include <type_traits>

namespace boost{

namespace poly_collection{

namespace detail{

/* callable_wrapper<Sig>* adaptor convertible to pointer to wrapped entity */

template<typename CWrapper>
class callable_wrapper_iterator:public boost::iterator_adaptor<
  callable_wrapper_iterator<CWrapper>,CWrapper*
>
{
public:
  callable_wrapper_iterator()=default;
  explicit callable_wrapper_iterator(CWrapper* p)noexcept:
    callable_wrapper_iterator::iterator_adaptor_{p}{}
  callable_wrapper_iterator(const callable_wrapper_iterator&)=default;
  callable_wrapper_iterator& operator=(
    const callable_wrapper_iterator&)=default;

  template<
    typename NonConstCWrapper,
    typename std::enable_if<
      std::is_same<CWrapper,const NonConstCWrapper>::value>::type* =nullptr
  >
  callable_wrapper_iterator(
    const callable_wrapper_iterator<NonConstCWrapper>& x)noexcept:
    callable_wrapper_iterator::iterator_adaptor_{x.base()}{}

  template<
    typename NonConstCWrapper,
    typename std::enable_if<
      std::is_same<CWrapper,const NonConstCWrapper>::value>::type* =nullptr
  >
  callable_wrapper_iterator& operator=(
    const callable_wrapper_iterator<NonConstCWrapper>& x)noexcept
  {
    this->base_reference()=x.base();
    return *this;
  }

  /* interoperability with CWrapper* */

  callable_wrapper_iterator& operator=(CWrapper* p)noexcept
    {this->base_reference()=p;return *this;}
  operator CWrapper*()const noexcept{return this->base();}

  /* interoperability with Callable* */

  template<
    typename Callable,
    typename std::enable_if<
      std::is_constructible<CWrapper,Callable&>::value&&
      (!std::is_const<CWrapper>::value||std::is_const<Callable>::value)
    >::type* =nullptr
  >
  explicit operator Callable*()const noexcept
  {
    return const_cast<Callable*>(
      static_cast<const Callable*>(
        const_cast<const void*>(
          this->base()->data())));
  }

private:
  template<typename>
  friend class callable_wrapper_iterator;
};

} /* namespace poly_collection::detail */

} /* namespace poly_collection */

} /* namespace boost */

#endif

/* callable_wrapper_iterator.hpp
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
*/