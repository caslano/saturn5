// -- Boost Lambda Library -------------------------------------------------

// Copyright (C) 1999, 2000 Jaakko Jarvi (jaakko.jarvi@cs.utu.fi)
//
// Distributed under the Boost Software License, Version 1.0. (See
// accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
//
// For more information, see www.boost.org

// --------------------------------------------------

#ifndef BOOST_LAMBDA_ARITY_CODE_HPP
#define BOOST_LAMBDA_ARITY_CODE_HPP

#include "boost/type_traits/cv_traits.hpp"
#include "boost/type_traits/transform_traits.hpp"

namespace boost { 
namespace lambda {

// These constants state, whether a lambda_functor instantiation results from 
// an expression which contains no placeholders (NONE), 
// only free1 placeholders (FIRST), 
// free2 placeholders and maybe free1 placeholders (SECOND),
// free3 and maybe free1 and free2 placeholders (THIRD),
// freeE placeholders and maybe free1 and free2  (EXCEPTION).
// RETHROW means, that a rethrow expression is used somewhere in the lambda_functor.

enum { NONE             = 0x00, // Notice we are using bits as flags here.
       FIRST            = 0x01, 
       SECOND           = 0x02, 
       THIRD            = 0x04, 
       EXCEPTION        = 0x08, 
       RETHROW          = 0x10};


template<class T>
struct get_tuple_arity;

namespace detail {

template <class T> struct get_arity_;

} // end detail;

template <class T> struct get_arity {

  BOOST_STATIC_CONSTANT(int, value = detail::get_arity_<typename boost::remove_cv<typename boost::remove_reference<T>::type>::type>::value);

};

namespace detail {

template<class T>
struct get_arity_ {
  BOOST_STATIC_CONSTANT(int, value = 0);
};

template<class T>
struct get_arity_<lambda_functor<T> > {
  BOOST_STATIC_CONSTANT(int, value = get_arity<T>::value);
};

template<class Action, class Args>
struct get_arity_<lambda_functor_base<Action, Args> > {
  BOOST_STATIC_CONSTANT(int, value = get_tuple_arity<Args>::value);
};

template<int I>
struct get_arity_<placeholder<I> > {
  BOOST_STATIC_CONSTANT(int, value = I);
};

} // detail 

template<class T>
struct get_tuple_arity {
  BOOST_STATIC_CONSTANT(int, value = get_arity<typename T::head_type>::value | get_tuple_arity<typename T::tail_type>::value);
};


template<>
struct get_tuple_arity<null_type> {
  BOOST_STATIC_CONSTANT(int, value = 0);
};


  // Does T have placeholder<I> as it's subexpression?

template<class T, int I>
struct has_placeholder {
  BOOST_STATIC_CONSTANT(bool, value = (get_arity<T>::value & I) != 0);
}; 

template<int I, int J>
struct includes_placeholder {
  BOOST_STATIC_CONSTANT(bool, value = (J & I) != 0);
};

template<int I, int J>
struct lacks_placeholder {
  BOOST_STATIC_CONSTANT(bool, value = ((J & I) == 0));
};


} // namespace lambda
} // namespace boost

#endif

/* arity_code.hpp
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
*/