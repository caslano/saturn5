/* Copyright 2003-2015 Joaquin M Lopez Munoz.
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * See http://www.boost.org/libs/multi_index for library home page.
 */

#ifndef BOOST_MULTI_INDEX_IDENTITY_HPP
#define BOOST_MULTI_INDEX_IDENTITY_HPP

#if defined(_MSC_VER)
#pragma once
#endif

#include <boost/config.hpp>
#include <boost/detail/workaround.hpp>
#include <boost/mpl/if.hpp>
#include <boost/multi_index/identity_fwd.hpp>
#include <boost/type_traits/is_const.hpp>
#include <boost/type_traits/remove_const.hpp>
#include <boost/utility/enable_if.hpp>

#if !defined(BOOST_NO_SFINAE)
#include <boost/type_traits/is_convertible.hpp>
#endif

namespace boost{

template<class Type> class reference_wrapper; /* fwd decl. */

namespace multi_index{

namespace detail{

/* identity is a do-nothing key extractor that returns the [const] Type&
 * object passed.
 * Additionally, identity is overloaded to support referece_wrappers
 * of Type and "chained pointers" to Type's. By chained pointer to Type we
 * mean a  type  P such that, given a p of type P
 *   *...n...*x is convertible to Type&, for some n>=1.
 * Examples of chained pointers are raw and smart pointers, iterators and
 * arbitrary combinations of these (vg. Type** or unique_ptr<Type*>.)
 */

template<typename Type>
struct const_identity_base
{
  typedef Type result_type;

  template<typename ChainedPtr>

#if !defined(BOOST_NO_SFINAE)
  typename disable_if<is_convertible<const ChainedPtr&,Type&>,Type&>::type
#else
  Type&
#endif 
  
  operator()(const ChainedPtr& x)const
  {
    return operator()(*x);
  }

  Type& operator()(Type& x)const
  {
    return x;
  }

  Type& operator()(const reference_wrapper<Type>& x)const
  { 
    return x.get();
  }

  Type& operator()(
    const reference_wrapper<typename remove_const<Type>::type>& x

#if BOOST_WORKAROUND(BOOST_MSVC,==1310)
/* http://lists.boost.org/Archives/boost/2015/10/226135.php */
    ,int=0
#endif

  )const
  { 
    return x.get();
  }
};

template<typename Type>
struct non_const_identity_base
{
  typedef Type result_type;

  /* templatized for pointer-like types */
  
  template<typename ChainedPtr>

#if !defined(BOOST_NO_SFINAE)
  typename disable_if<
    is_convertible<const ChainedPtr&,const Type&>,Type&>::type
#else
  Type&
#endif 
    
  operator()(const ChainedPtr& x)const
  {
    return operator()(*x);
  }

  const Type& operator()(const Type& x)const
  {
    return x;
  }

  Type& operator()(Type& x)const
  {
    return x;
  }

  const Type& operator()(const reference_wrapper<const Type>& x)const
  { 
    return x.get();
  }

  Type& operator()(const reference_wrapper<Type>& x)const
  { 
    return x.get();
  }
};

} /* namespace multi_index::detail */

template<class Type>
struct identity:
  mpl::if_c<
    is_const<Type>::value,
    detail::const_identity_base<Type>,detail::non_const_identity_base<Type>
  >::type
{
};

} /* namespace multi_index */

} /* namespace boost */

#endif

/* identity.hpp
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
*/