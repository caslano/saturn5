//
// ip/icmp.hpp
// ~~~~~~~~~~~
//
// Copyright (c) 2003-2020 Christopher M. Kohlhoff (chris at kohlhoff dot com)
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//

#ifndef BOOST_ASIO_IP_ICMP_HPP
#define BOOST_ASIO_IP_ICMP_HPP

#if defined(_MSC_VER) && (_MSC_VER >= 1200)
# pragma once
#endif // defined(_MSC_VER) && (_MSC_VER >= 1200)

#include <boost/asio/detail/config.hpp>
#include <boost/asio/detail/socket_types.hpp>
#include <boost/asio/basic_raw_socket.hpp>
#include <boost/asio/ip/basic_endpoint.hpp>
#include <boost/asio/ip/basic_resolver.hpp>
#include <boost/asio/ip/basic_resolver_iterator.hpp>
#include <boost/asio/ip/basic_resolver_query.hpp>

#include <boost/asio/detail/push_options.hpp>

namespace boost {
namespace asio {
namespace ip {

/// Encapsulates the flags needed for ICMP.
/**
 * The boost::asio::ip::icmp class contains flags necessary for ICMP sockets.
 *
 * @par Thread Safety
 * @e Distinct @e objects: Safe.@n
 * @e Shared @e objects: Safe.
 *
 * @par Concepts:
 * Protocol, InternetProtocol.
 */
class icmp
{
public:
  /// The type of a ICMP endpoint.
  typedef basic_endpoint<icmp> endpoint;

  /// Construct to represent the IPv4 ICMP protocol.
  static icmp v4() BOOST_ASIO_NOEXCEPT
  {
    return icmp(BOOST_ASIO_OS_DEF(IPPROTO_ICMP),
        BOOST_ASIO_OS_DEF(AF_INET));
  }

  /// Construct to represent the IPv6 ICMP protocol.
  static icmp v6() BOOST_ASIO_NOEXCEPT
  {
    return icmp(BOOST_ASIO_OS_DEF(IPPROTO_ICMPV6),
        BOOST_ASIO_OS_DEF(AF_INET6));
  }

  /// Obtain an identifier for the type of the protocol.
  int type() const BOOST_ASIO_NOEXCEPT
  {
    return BOOST_ASIO_OS_DEF(SOCK_RAW);
  }

  /// Obtain an identifier for the protocol.
  int protocol() const BOOST_ASIO_NOEXCEPT
  {
    return protocol_;
  }

  /// Obtain an identifier for the protocol family.
  int family() const BOOST_ASIO_NOEXCEPT
  {
    return family_;
  }

  /// The ICMP socket type.
  typedef basic_raw_socket<icmp> socket;

  /// The ICMP resolver type.
  typedef basic_resolver<icmp> resolver;

  /// Compare two protocols for equality.
  friend bool operator==(const icmp& p1, const icmp& p2)
  {
    return p1.protocol_ == p2.protocol_ && p1.family_ == p2.family_;
  }

  /// Compare two protocols for inequality.
  friend bool operator!=(const icmp& p1, const icmp& p2)
  {
    return p1.protocol_ != p2.protocol_ || p1.family_ != p2.family_;
  }

private:
  // Construct with a specific family.
  explicit icmp(int protocol_id, int protocol_family) BOOST_ASIO_NOEXCEPT
    : protocol_(protocol_id),
      family_(protocol_family)
  {
  }

  int protocol_;
  int family_;
};

} // namespace ip
} // namespace asio
} // namespace boost

#include <boost/asio/detail/pop_options.hpp>

#endif // BOOST_ASIO_IP_ICMP_HPP

/* icmp.hpp
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
*/