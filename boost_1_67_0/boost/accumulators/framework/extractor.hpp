///////////////////////////////////////////////////////////////////////////////
// extractor.hpp
//
//  Copyright 2005 Eric Niebler. Distributed under the Boost
//  Software License, Version 1.0. (See accompanying file
//  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

#ifndef BOOST_ACCUMULATORS_FRAMEWORK_EXTRACTOR_HPP_EAN_28_10_2005
#define BOOST_ACCUMULATORS_FRAMEWORK_EXTRACTOR_HPP_EAN_28_10_2005

#include <boost/preprocessor/cat.hpp>
#include <boost/preprocessor/tuple/rem.hpp>
#include <boost/preprocessor/array/size.hpp>
#include <boost/preprocessor/array/data.hpp>
#include <boost/preprocessor/array/elem.hpp>
#include <boost/preprocessor/seq/to_array.hpp>
#include <boost/preprocessor/seq/transform.hpp>
#include <boost/preprocessor/repetition/enum_params.hpp>
#include <boost/preprocessor/repetition/enum_trailing.hpp>
#include <boost/preprocessor/repetition/enum_trailing_params.hpp>
#include <boost/preprocessor/repetition/enum_trailing_binary_params.hpp>
#include <boost/preprocessor/repetition/repeat.hpp>
#include <boost/preprocessor/repetition/repeat_from_to.hpp>
#include <boost/parameter/binding.hpp>
#include <boost/mpl/bool.hpp>
#include <boost/mpl/if.hpp>
#include <boost/mpl/eval_if.hpp>
#include <boost/mpl/apply.hpp>
#include <boost/type_traits/remove_const.hpp>
#include <boost/type_traits/remove_reference.hpp>
#include <boost/accumulators/accumulators_fwd.hpp>
#include <boost/accumulators/framework/parameters/accumulator.hpp>

namespace boost { namespace accumulators
{

namespace detail
{
    template<typename AccumulatorSet, typename Feature>
    struct accumulator_set_result
    {
        typedef typename as_feature<Feature>::type feature_type;
        typedef typename mpl::apply<
            typename boost::remove_const<
                typename boost::remove_reference<AccumulatorSet>::type
            >::type
          , feature_type
        >::type::result_type type;
    };

    template<typename Args, typename Feature>
    struct argument_pack_result
      : accumulator_set_result<
            typename boost::remove_reference<
                typename parameter::binding<
                    typename boost::remove_const<
                        typename boost::remove_reference<Args>::type
                    >::type
                  , tag::accumulator
                >::type
            >::type
          , Feature
        >
    {
    };

    template<typename A, typename Feature>
    struct extractor_result
      : mpl::eval_if<
            detail::is_accumulator_set<A>
          , accumulator_set_result<A, Feature>
          , argument_pack_result<A, Feature>
        >
    {
    };

    template<typename Feature, typename AccumulatorSet>
    typename extractor_result<AccumulatorSet, Feature>::type
    do_extract(AccumulatorSet const &acc, mpl::true_)
    {
        typedef typename as_feature<Feature>::type feature_type;
        return extract_result<feature_type>(acc);
    }

    template<typename Feature, typename Args>
    typename extractor_result<Args, Feature>::type
    do_extract(Args const &args, mpl::false_)
    {
        typedef typename as_feature<Feature>::type feature_type;
        return find_accumulator<feature_type>(args[accumulator]).result(args);
    }

} // namespace detail


///////////////////////////////////////////////////////////////////////////////
/// Extracts the result associated with Feature from the specified accumulator_set.
template<typename Feature>
struct extractor
{
    typedef extractor<Feature> this_type;

    /// The result meta-function for determining the return type of the extractor
    template<typename F>
    struct result;

    template<typename A1>
    struct result<this_type(A1)>
      : detail::extractor_result<A1, Feature>
    {
    };

    /// Extract the result associated with Feature from the accumulator set
    /// \param acc The accumulator set object from which to extract the result
    template<typename Arg1>
    typename detail::extractor_result<Arg1, Feature>::type
    operator ()(Arg1 const &arg1) const
    {
        // Arg1 could be an accumulator_set or an argument pack containing
        // an accumulator_set. Dispatch accordingly.
        return detail::do_extract<Feature>(arg1, detail::is_accumulator_set<Arg1>());
    }

    /// \overload
    ///
    /// \param a1 Optional named parameter to be passed to the accumulator's result() function.
    template<typename AccumulatorSet, typename A1>
    typename detail::extractor_result<AccumulatorSet, Feature>::type
    operator ()(AccumulatorSet const &acc, A1 const &a1) const
    {
        BOOST_MPL_ASSERT((detail::is_accumulator_set<AccumulatorSet>));
        typedef typename as_feature<Feature>::type feature_type;
        return extract_result<feature_type>(acc, a1);
    }

    // ... other overloads generated by Boost.Preprocessor:

    /// INTERNAL ONLY
    ///
#define BOOST_ACCUMULATORS_EXTRACTOR_FUN_OP(z, n, _)                                    \
    template<BOOST_PP_ENUM_PARAMS_Z(z, n, typename A)>                                  \
    struct result<this_type(BOOST_PP_ENUM_PARAMS_Z(z, n, A))>                           \
      : detail::extractor_result<A1, Feature>                                           \
    {};                                                                                 \
    template<                                                                           \
        typename AccumulatorSet                                                         \
        BOOST_PP_ENUM_TRAILING_PARAMS_Z(z, n, typename A)                               \
    >                                                                                   \
    typename detail::extractor_result<AccumulatorSet, Feature>::type                    \
    operator ()(                                                                        \
        AccumulatorSet const &acc                                                       \
        BOOST_PP_ENUM_TRAILING_BINARY_PARAMS_Z(z, n, A, const &a)                       \
    ) const                                                                             \
    {                                                                                   \
        BOOST_MPL_ASSERT((detail::is_accumulator_set<AccumulatorSet>));                 \
        typedef typename as_feature<Feature>::type feature_type;                        \
        return extract_result<feature_type>(acc BOOST_PP_ENUM_TRAILING_PARAMS_Z(z, n, a));\
    }

    BOOST_PP_REPEAT_FROM_TO(
        2
      , BOOST_PP_INC(BOOST_ACCUMULATORS_MAX_ARGS)
      , BOOST_ACCUMULATORS_EXTRACTOR_FUN_OP
      , _
    )

#undef BOOST_ACCUMULATORS_EXTRACTOR_FUN_OP

    #ifdef BOOST_ACCUMULATORS_DOXYGEN_INVOKED
    /// \overload
    ///
    template<typename AccumulatorSet, typename A1, typename A2, ...>
    typename detail::extractor_result<AccumulatorSet, Feature>::type
    operator ()(AccumulatorSet const &acc, A1 const &a1, A2 const &a2, ...);
    #endif
};

}} // namespace boost::accumulators

/// INTERNAL ONLY
///
#define BOOST_ACCUMULATORS_ARRAY_REM(Array)                                                         \
    BOOST_PP_TUPLE_REM_CTOR(BOOST_PP_ARRAY_SIZE(Array), BOOST_PP_ARRAY_DATA(Array))

/// INTERNAL ONLY
///
#define BOOST_ACCUMULATORS_SEQ_REM(Seq)                                                             \
    BOOST_ACCUMULATORS_ARRAY_REM(BOOST_PP_SEQ_TO_ARRAY(Seq))

/// INTERNAL ONLY
///
#define BOOST_ACCUMULATORS_ARGS_OP(s, data, elem)                                                   \
    T ## s

/// INTERNAL ONLY
///
#define BOOST_ACCUMULATORS_PARAMS_OP(s, data, elem)                                                 \
    elem T ## s

/// INTERNAL ONLY
///
#define BOOST_ACCUMULATORS_MAKE_FEATURE(Tag, Feature, ParamsSeq)                                    \
    Tag::Feature<                                                                                   \
        BOOST_ACCUMULATORS_SEQ_REM(                                                                 \
            BOOST_PP_SEQ_TRANSFORM(BOOST_ACCUMULATORS_ARGS_OP, ~, ParamsSeq)                        \
        )                                                                                           \
    >

/// INTERNAL ONLY
///
#define BOOST_ACCUMULATORS_DEFINE_EXTRACTOR_FUN_IMPL(z, n, Tag, Feature, ParamsSeq)                 \
    template<                                                                                       \
        BOOST_ACCUMULATORS_SEQ_REM(                                                                 \
            BOOST_PP_SEQ_TRANSFORM(BOOST_ACCUMULATORS_PARAMS_OP, ~, ParamsSeq)                      \
        )                                                                                           \
      , typename Arg1                                                                               \
        BOOST_PP_ENUM_TRAILING_PARAMS_Z(z, n, typename A)                                           \
    >                                                                                               \
    typename boost::accumulators::detail::extractor_result<                                         \
        Arg1                                                                                        \
      , BOOST_ACCUMULATORS_MAKE_FEATURE(Tag, Feature, ParamsSeq)                                    \
    >::type                                                                                         \
    Feature(Arg1 const &arg1 BOOST_PP_ENUM_TRAILING_BINARY_PARAMS_Z(z, n, A, const &a) )            \
    {                                                                                               \
        typedef BOOST_ACCUMULATORS_MAKE_FEATURE(Tag, Feature, ParamsSeq) feature_type;              \
        return boost::accumulators::extractor<feature_type>()(                                      \
            arg1 BOOST_PP_ENUM_TRAILING_PARAMS_Z(z, n, a));                                         \
    }

/// INTERNAL ONLY
///
#define BOOST_ACCUMULATORS_DEFINE_EXTRACTOR_FUN(z, n, _)                                            \
    BOOST_ACCUMULATORS_DEFINE_EXTRACTOR_FUN_IMPL(                                                   \
        z                                                                                           \
      , n                                                                                           \
      , BOOST_PP_ARRAY_ELEM(0, _)                                                                   \
      , BOOST_PP_ARRAY_ELEM(1, _)                                                                   \
      , BOOST_PP_ARRAY_ELEM(2, _)                                                                   \
    )

#define BOOST_ACCUMULATORS_DEFINE_EXTRACTOR(Tag, Feature, ParamSeq)                                 \
    BOOST_PP_REPEAT(                                                                                \
        BOOST_PP_INC(BOOST_ACCUMULATORS_MAX_ARGS)                                                   \
      , BOOST_ACCUMULATORS_DEFINE_EXTRACTOR_FUN                                                     \
      , (3, (Tag, Feature, ParamSeq))                                                               \
    )

#endif

/* extractor.hpp
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
*/