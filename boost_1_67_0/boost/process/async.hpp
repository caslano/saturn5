// Copyright (c) 2016 Klemens D. Morgenstern
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

/** \file boost/process/async.hpp

The header which provides the basic asynchrounous features.
It provides the on_exit property, which allows callbacks when the process exits.
It also implements the necessary traits for passing an boost::asio::io_context,
which is needed for asynchronous communication.

It also pulls the [boost::asio::buffer](http://www.boost.org/doc/libs/release/doc/html/boost_asio/reference/buffer.html)
into the boost::process namespace for convenience.

\xmlonly
<programlisting>
namespace boost {
  namespace process {
    <emphasis>unspecified</emphasis> <ulink url="http://www.boost.org/doc/libs/1_61_0/doc/html/boost_asio/reference/buffer.html">buffer</ulink>;
    <emphasis>unspecified</emphasis> <globalname alt="boost::process::on_exit">on_exit</globalname>;
  }
}
</programlisting>

\endxmlonly
  */

#ifndef BOOST_PROCESS_ASYNC_HPP_
#define BOOST_PROCESS_ASYNC_HPP_

#include <boost/process/detail/traits.hpp>
#include <boost/process/detail/on_exit.hpp>

#include <boost/asio/io_context.hpp>
#include <boost/asio/streambuf.hpp>
#include <boost/asio/buffer.hpp>
#include <type_traits>
#include <boost/fusion/iterator/deref.hpp>

#if defined(BOOST_POSIX_API)
#include <boost/process/detail/posix/io_context_ref.hpp>
#include <boost/process/detail/posix/async_in.hpp>
#include <boost/process/detail/posix/async_out.hpp>
#include <boost/process/detail/posix/on_exit.hpp>

#elif defined(BOOST_WINDOWS_API)
#include <boost/process/detail/windows/io_context_ref.hpp>
#include <boost/process/detail/windows/async_in.hpp>
#include <boost/process/detail/windows/async_out.hpp>
#include <boost/process/detail/windows/on_exit.hpp>
#endif

namespace boost { namespace process { namespace detail {

struct async_tag;

template<typename T>
struct is_io_context : std::false_type {};
template<>
struct is_io_context<api::io_context_ref> : std::true_type {};

template<typename Tuple>
inline asio::io_context& get_io_context(const Tuple & tup)
{
    auto& ref = *boost::fusion::find_if<is_io_context<boost::mpl::_>>(tup);
    return ref.get();
}

struct async_builder
{
    boost::asio::io_context * ios;

    void operator()(boost::asio::io_context & ios_) {this->ios = &ios_;};

    typedef api::io_context_ref result_type;
    api::io_context_ref get_initializer() {return api::io_context_ref (*ios);};
};


template<>
struct initializer_builder<async_tag>
{
    typedef async_builder type;
};

}

using ::boost::asio::buffer;


#if defined(BOOST_PROCESS_DOXYGEN)
/** When an io_context is passed, the on_exit property can be used, to be notified
    when the child process exits.


The following syntax is valid

\code{.cpp}
on_exit=function;
on_exit(function);
\endcode

with `function` being a callable object with the signature `(int, const std::error_code&)` or an
`std::future<int>`.

\par Example

\code{.cpp}
io_context ios;

child c("ls", on_exit=[](int exit, const std::error_code& ec_in){});

std::future<int> exit_code;
chlid c2("ls", on_exit=exit_code);

\endcode

\note The handler is not invoked when the launch fails.
\warning When used \ref ignore_error it might get invoked on error.
\warning `on_exit` uses `boost::asio::signal_set` to listen for `SIGCHLD` on posix, and so has the
same restrictions as that class (do not register a handler for `SIGCHLD` except by using
`boost::asio::signal_set`).
 */
constexpr static ::boost::process::detail::on_exit_ on_exit{};
#endif

}}



#endif /* INCLUDE_BOOST_PROCESS_DETAIL_ASYNC_HPP_ */

/* async.hpp
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
*/